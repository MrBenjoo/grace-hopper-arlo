
GccBoardProject1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000055c  20070000  00080be4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000d8  2007055c  00081140  0002055c  2**2
                  ALLOC
  3 .stack        00002004  20070634  00081218  0002055c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002055c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020585  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000c70c  00000000  00000000  000205de  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad0  00000000  00000000  0002ccea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002a9e  00000000  00000000  0002e7ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005e8  00000000  00000000  00031258  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000578  00000000  00000000  00031840  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001526b  00000000  00000000  00031db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00008495  00000000  00000000  00047023  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000630cd  00000000  00000000  0004f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000dc8  00000000  00000000  000b2588  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	38 26 07 20 e1 07 08 00 dd 07 08 00 dd 07 08 00     8&. ............
   80010:	dd 07 08 00 dd 07 08 00 dd 07 08 00 00 00 00 00     ................
	...
   8002c:	dd 07 08 00 dd 07 08 00 00 00 00 00 dd 07 08 00     ................
   8003c:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   8004c:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   8005c:	dd 07 08 00 dd 07 08 00 dd 07 08 00 00 00 00 00     ................
   8006c:	51 06 08 00 65 06 08 00 79 06 08 00 8d 06 08 00     Q...e...y.......
	...
   80084:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   80094:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   800a4:	00 00 00 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   800b4:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   800c4:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   800d4:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................
   800e4:	dd 07 08 00 dd 07 08 00 dd 07 08 00 dd 07 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007055c 	.word	0x2007055c
   80110:	00000000 	.word	0x00000000
   80114:	00080be4 	.word	0x00080be4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080be4 	.word	0x00080be4
   80154:	20070560 	.word	0x20070560
   80158:	00080be4 	.word	0x00080be4
   8015c:	00000000 	.word	0x00000000

00080160 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
   80162:	b08c      	sub	sp, #48	; 0x30
   80164:	4607      	mov	r7, r0
   80166:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80168:	ac01      	add	r4, sp, #4
   8016a:	4d11      	ldr	r5, [pc, #68]	; (801b0 <pwm_clocks_generate+0x50>)
   8016c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8016e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   8017c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8017e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80180:	f852 0b04 	ldr.w	r0, [r2], #4
   80184:	fbb6 f0f0 	udiv	r0, r6, r0
   80188:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8018c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80190:	d907      	bls.n	801a2 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80192:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80194:	2b0b      	cmp	r3, #11
   80196:	d1f3      	bne.n	80180 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80198:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8019c:	b00c      	add	sp, #48	; 0x30
   8019e:	bcf0      	pop	{r4, r5, r6, r7}
   801a0:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   801a2:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   801a4:	bf94      	ite	ls
   801a6:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   801aa:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   801ae:	e7f5      	b.n	8019c <pwm_clocks_generate+0x3c>
   801b0:	00080b90 	.word	0x00080b90

000801b4 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   801b4:	b570      	push	{r4, r5, r6, lr}
   801b6:	4606      	mov	r6, r0
   801b8:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   801ba:	680c      	ldr	r4, [r1, #0]
   801bc:	b144      	cbz	r4, 801d0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   801be:	6889      	ldr	r1, [r1, #8]
   801c0:	4620      	mov	r0, r4
   801c2:	4b0c      	ldr	r3, [pc, #48]	; (801f4 <pwm_init+0x40>)
   801c4:	4798      	blx	r3
   801c6:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   801c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801cc:	4298      	cmp	r0, r3
   801ce:	d00c      	beq.n	801ea <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   801d0:	6868      	ldr	r0, [r5, #4]
   801d2:	b140      	cbz	r0, 801e6 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   801d4:	68a9      	ldr	r1, [r5, #8]
   801d6:	4b07      	ldr	r3, [pc, #28]	; (801f4 <pwm_init+0x40>)
   801d8:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   801da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801de:	4298      	cmp	r0, r3
   801e0:	d005      	beq.n	801ee <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   801e2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   801e6:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   801e8:	2400      	movs	r4, #0
}
   801ea:	4620      	mov	r0, r4
   801ec:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   801ee:	4604      	mov	r4, r0
   801f0:	e7fb      	b.n	801ea <pwm_init+0x36>
   801f2:	bf00      	nop
   801f4:	00080161 	.word	0x00080161

000801f8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   801f8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   801fa:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   801fc:	684b      	ldr	r3, [r1, #4]
   801fe:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   80202:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80204:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   80206:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80208:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   8020a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8020c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80210:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80212:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80216:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80218:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8021c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8021e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   80222:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80226:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8022a:	68cb      	ldr	r3, [r1, #12]
   8022c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80230:	690b      	ldr	r3, [r1, #16]
   80232:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80236:	7d8b      	ldrb	r3, [r1, #22]
   80238:	b13b      	cbz	r3, 8024a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8023a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8023c:	8b4b      	ldrh	r3, [r1, #26]
   8023e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80242:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   80246:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8024a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8024c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   80250:	4093      	lsls	r3, r2
   80252:	43db      	mvns	r3, r3
   80254:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80256:	7fcc      	ldrb	r4, [r1, #31]
   80258:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8025c:	7f8c      	ldrb	r4, [r1, #30]
   8025e:	4094      	lsls	r4, r2
   80260:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80264:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80266:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80268:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8026a:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   8026c:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80270:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80274:	f891 4020 	ldrb.w	r4, [r1, #32]
   80278:	4094      	lsls	r4, r2
   8027a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8027e:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80280:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80282:	2301      	movs	r3, #1
   80284:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   80286:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8028a:	b334      	cbz	r4, 802da <pwm_channel_init+0xe2>
		p_pwm->PWM_SCM |= channel;
   8028c:	6a04      	ldr	r4, [r0, #32]
   8028e:	431c      	orrs	r4, r3
   80290:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80292:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80296:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80298:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8029a:	bf0c      	ite	eq
   8029c:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8029e:	439c      	bicne	r4, r3
   802a0:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   802a2:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   802a6:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   802a8:	6e84      	ldr	r4, [r0, #104]	; 0x68
   802aa:	bf0c      	ite	eq
   802ac:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   802b0:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   802b4:	6683      	str	r3, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   802b6:	2a03      	cmp	r2, #3
   802b8:	d914      	bls.n	802e4 <pwm_channel_init+0xec>
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
   802ba:	3a04      	subs	r2, #4
		ch_num *= 8;
   802bc:	00d2      	lsls	r2, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   802be:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   802c0:	23ff      	movs	r3, #255	; 0xff
   802c2:	4093      	lsls	r3, r2
   802c4:	ea24 0403 	bic.w	r4, r4, r3
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   802c8:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   802cc:	fa03 f202 	lsl.w	r2, r3, r2
   802d0:	4322      	orrs	r2, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   802d2:	6702      	str	r2, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   802d4:	2000      	movs	r0, #0
   802d6:	bc70      	pop	{r4, r5, r6}
   802d8:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   802da:	6a04      	ldr	r4, [r0, #32]
   802dc:	ea24 0403 	bic.w	r4, r4, r3
   802e0:	6204      	str	r4, [r0, #32]
   802e2:	e7d6      	b.n	80292 <pwm_channel_init+0x9a>
		ch_num *= 8;
   802e4:	00d5      	lsls	r5, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   802e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   802e8:	24ff      	movs	r4, #255	; 0xff
   802ea:	40ac      	lsls	r4, r5
   802ec:	ea23 0304 	bic.w	r3, r3, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   802f0:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   802f4:	40aa      	lsls	r2, r5
   802f6:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   802f8:	66c2      	str	r2, [r0, #108]	; 0x6c
   802fa:	e7eb      	b.n	802d4 <pwm_channel_init+0xdc>

000802fc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   802fc:	2301      	movs	r3, #1
   802fe:	fa03 f101 	lsl.w	r1, r3, r1
   80302:	6041      	str	r1, [r0, #4]
   80304:	4770      	bx	lr

00080306 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80306:	2301      	movs	r3, #1
   80308:	fa03 f101 	lsl.w	r1, r3, r1
   8030c:	6081      	str	r1, [r0, #8]
   8030e:	4770      	bx	lr

00080310 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80310:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80312:	480e      	ldr	r0, [pc, #56]	; (8034c <sysclk_init+0x3c>)
   80314:	4b0e      	ldr	r3, [pc, #56]	; (80350 <sysclk_init+0x40>)
   80316:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80318:	213e      	movs	r1, #62	; 0x3e
   8031a:	2000      	movs	r0, #0
   8031c:	4b0d      	ldr	r3, [pc, #52]	; (80354 <sysclk_init+0x44>)
   8031e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80320:	4c0d      	ldr	r4, [pc, #52]	; (80358 <sysclk_init+0x48>)
   80322:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80324:	2800      	cmp	r0, #0
   80326:	d0fc      	beq.n	80322 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80328:	4b0c      	ldr	r3, [pc, #48]	; (8035c <sysclk_init+0x4c>)
   8032a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8032c:	4a0c      	ldr	r2, [pc, #48]	; (80360 <sysclk_init+0x50>)
   8032e:	4b0d      	ldr	r3, [pc, #52]	; (80364 <sysclk_init+0x54>)
   80330:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80332:	4c0d      	ldr	r4, [pc, #52]	; (80368 <sysclk_init+0x58>)
   80334:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80336:	2800      	cmp	r0, #0
   80338:	d0fc      	beq.n	80334 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8033a:	2010      	movs	r0, #16
   8033c:	4b0b      	ldr	r3, [pc, #44]	; (8036c <sysclk_init+0x5c>)
   8033e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80340:	4b0b      	ldr	r3, [pc, #44]	; (80370 <sysclk_init+0x60>)
   80342:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80344:	4801      	ldr	r0, [pc, #4]	; (8034c <sysclk_init+0x3c>)
   80346:	4b02      	ldr	r3, [pc, #8]	; (80350 <sysclk_init+0x40>)
   80348:	4798      	blx	r3
   8034a:	bd10      	pop	{r4, pc}
   8034c:	0501bd00 	.word	0x0501bd00
   80350:	200700a5 	.word	0x200700a5
   80354:	00080705 	.word	0x00080705
   80358:	00080759 	.word	0x00080759
   8035c:	00080769 	.word	0x00080769
   80360:	200d3f01 	.word	0x200d3f01
   80364:	400e0600 	.word	0x400e0600
   80368:	00080779 	.word	0x00080779
   8036c:	000806a1 	.word	0x000806a1
   80370:	00080879 	.word	0x00080879

00080374 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80374:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80376:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8037a:	4b16      	ldr	r3, [pc, #88]	; (803d4 <board_init+0x60>)
   8037c:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8037e:	200b      	movs	r0, #11
   80380:	4c15      	ldr	r4, [pc, #84]	; (803d8 <board_init+0x64>)
   80382:	47a0      	blx	r4
   80384:	200c      	movs	r0, #12
   80386:	47a0      	blx	r4
   80388:	200d      	movs	r0, #13
   8038a:	47a0      	blx	r4
   8038c:	200e      	movs	r0, #14
   8038e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80390:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80394:	203b      	movs	r0, #59	; 0x3b
   80396:	4c11      	ldr	r4, [pc, #68]	; (803dc <board_init+0x68>)
   80398:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8039a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8039e:	2055      	movs	r0, #85	; 0x55
   803a0:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   803a2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   803a6:	2056      	movs	r0, #86	; 0x56
   803a8:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   803aa:	490d      	ldr	r1, [pc, #52]	; (803e0 <board_init+0x6c>)
   803ac:	2068      	movs	r0, #104	; 0x68
   803ae:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   803b0:	490c      	ldr	r1, [pc, #48]	; (803e4 <board_init+0x70>)
   803b2:	205c      	movs	r0, #92	; 0x5c
   803b4:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   803b6:	4a0c      	ldr	r2, [pc, #48]	; (803e8 <board_init+0x74>)
   803b8:	f44f 7140 	mov.w	r1, #768	; 0x300
   803bc:	480b      	ldr	r0, [pc, #44]	; (803ec <board_init+0x78>)
   803be:	4b0c      	ldr	r3, [pc, #48]	; (803f0 <board_init+0x7c>)
   803c0:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   803c2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803c6:	202b      	movs	r0, #43	; 0x2b
   803c8:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   803ca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803ce:	202a      	movs	r0, #42	; 0x2a
   803d0:	47a0      	blx	r4
   803d2:	bd10      	pop	{r4, pc}
   803d4:	400e1a50 	.word	0x400e1a50
   803d8:	00080789 	.word	0x00080789
   803dc:	00080495 	.word	0x00080495
   803e0:	28000079 	.word	0x28000079
   803e4:	28000001 	.word	0x28000001
   803e8:	08000001 	.word	0x08000001
   803ec:	400e0e00 	.word	0x400e0e00
   803f0:	00080565 	.word	0x00080565

000803f4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   803f4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   803f6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   803fa:	d016      	beq.n	8042a <pio_set_peripheral+0x36>
   803fc:	d80b      	bhi.n	80416 <pio_set_peripheral+0x22>
   803fe:	b149      	cbz	r1, 80414 <pio_set_peripheral+0x20>
   80400:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80404:	d105      	bne.n	80412 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80406:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80408:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8040a:	400b      	ands	r3, r1
   8040c:	ea23 0302 	bic.w	r3, r3, r2
   80410:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80412:	6042      	str	r2, [r0, #4]
   80414:	4770      	bx	lr
	switch (ul_type) {
   80416:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8041a:	d0fb      	beq.n	80414 <pio_set_peripheral+0x20>
   8041c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80420:	d0f8      	beq.n	80414 <pio_set_peripheral+0x20>
   80422:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80426:	d1f4      	bne.n	80412 <pio_set_peripheral+0x1e>
   80428:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8042a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8042c:	4313      	orrs	r3, r2
   8042e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80430:	e7ef      	b.n	80412 <pio_set_peripheral+0x1e>

00080432 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80432:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80434:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80438:	bf14      	ite	ne
   8043a:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8043c:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8043e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80442:	bf14      	ite	ne
   80444:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80446:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80448:	f012 0f02 	tst.w	r2, #2
   8044c:	d107      	bne.n	8045e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8044e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80452:	bf18      	it	ne
   80454:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80458:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8045a:	6001      	str	r1, [r0, #0]
   8045c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8045e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80462:	e7f9      	b.n	80458 <pio_set_input+0x26>

00080464 <pio_set_output>:
{
   80464:	b410      	push	{r4}
   80466:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80468:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8046a:	b944      	cbnz	r4, 8047e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8046c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8046e:	b143      	cbz	r3, 80482 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80470:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80472:	b942      	cbnz	r2, 80486 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80474:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80476:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80478:	6001      	str	r1, [r0, #0]
}
   8047a:	bc10      	pop	{r4}
   8047c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8047e:	6641      	str	r1, [r0, #100]	; 0x64
   80480:	e7f5      	b.n	8046e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80482:	6541      	str	r1, [r0, #84]	; 0x54
   80484:	e7f5      	b.n	80472 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80486:	6301      	str	r1, [r0, #48]	; 0x30
   80488:	e7f5      	b.n	80476 <pio_set_output+0x12>

0008048a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8048a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8048c:	4770      	bx	lr

0008048e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8048e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80490:	4770      	bx	lr
	...

00080494 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80494:	b570      	push	{r4, r5, r6, lr}
   80496:	b082      	sub	sp, #8
   80498:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8049a:	0943      	lsrs	r3, r0, #5
   8049c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   804a0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   804a4:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   804a6:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   804aa:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   804ae:	d031      	beq.n	80514 <pio_configure_pin+0x80>
   804b0:	d816      	bhi.n	804e0 <pio_configure_pin+0x4c>
   804b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   804b6:	d01b      	beq.n	804f0 <pio_configure_pin+0x5c>
   804b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   804bc:	d116      	bne.n	804ec <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   804be:	f000 001f 	and.w	r0, r0, #31
   804c2:	2601      	movs	r6, #1
   804c4:	4086      	lsls	r6, r0
   804c6:	4632      	mov	r2, r6
   804c8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804cc:	4620      	mov	r0, r4
   804ce:	4b22      	ldr	r3, [pc, #136]	; (80558 <pio_configure_pin+0xc4>)
   804d0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   804d2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   804d6:	bf14      	ite	ne
   804d8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   804da:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   804dc:	2001      	movs	r0, #1
   804de:	e017      	b.n	80510 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   804e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   804e4:	d021      	beq.n	8052a <pio_configure_pin+0x96>
   804e6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   804ea:	d01e      	beq.n	8052a <pio_configure_pin+0x96>
		return 0;
   804ec:	2000      	movs	r0, #0
   804ee:	e00f      	b.n	80510 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   804f0:	f000 001f 	and.w	r0, r0, #31
   804f4:	2601      	movs	r6, #1
   804f6:	4086      	lsls	r6, r0
   804f8:	4632      	mov	r2, r6
   804fa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804fe:	4620      	mov	r0, r4
   80500:	4b15      	ldr	r3, [pc, #84]	; (80558 <pio_configure_pin+0xc4>)
   80502:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80504:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80508:	bf14      	ite	ne
   8050a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8050c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8050e:	2001      	movs	r0, #1
}
   80510:	b002      	add	sp, #8
   80512:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80514:	f000 011f 	and.w	r1, r0, #31
   80518:	2601      	movs	r6, #1
   8051a:	462a      	mov	r2, r5
   8051c:	fa06 f101 	lsl.w	r1, r6, r1
   80520:	4620      	mov	r0, r4
   80522:	4b0e      	ldr	r3, [pc, #56]	; (8055c <pio_configure_pin+0xc8>)
   80524:	4798      	blx	r3
	return 1;
   80526:	4630      	mov	r0, r6
		break;
   80528:	e7f2      	b.n	80510 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8052a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8052e:	f000 011f 	and.w	r1, r0, #31
   80532:	2601      	movs	r6, #1
   80534:	ea05 0306 	and.w	r3, r5, r6
   80538:	9300      	str	r3, [sp, #0]
   8053a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8053e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80542:	bf14      	ite	ne
   80544:	2200      	movne	r2, #0
   80546:	2201      	moveq	r2, #1
   80548:	fa06 f101 	lsl.w	r1, r6, r1
   8054c:	4620      	mov	r0, r4
   8054e:	4c04      	ldr	r4, [pc, #16]	; (80560 <pio_configure_pin+0xcc>)
   80550:	47a0      	blx	r4
	return 1;
   80552:	4630      	mov	r0, r6
		break;
   80554:	e7dc      	b.n	80510 <pio_configure_pin+0x7c>
   80556:	bf00      	nop
   80558:	000803f5 	.word	0x000803f5
   8055c:	00080433 	.word	0x00080433
   80560:	00080465 	.word	0x00080465

00080564 <pio_configure_pin_group>:
{
   80564:	b570      	push	{r4, r5, r6, lr}
   80566:	b082      	sub	sp, #8
   80568:	4605      	mov	r5, r0
   8056a:	460e      	mov	r6, r1
   8056c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8056e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80572:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80576:	d027      	beq.n	805c8 <pio_configure_pin_group+0x64>
   80578:	d811      	bhi.n	8059e <pio_configure_pin_group+0x3a>
   8057a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8057e:	d016      	beq.n	805ae <pio_configure_pin_group+0x4a>
   80580:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80584:	d111      	bne.n	805aa <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80586:	460a      	mov	r2, r1
   80588:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8058c:	4b19      	ldr	r3, [pc, #100]	; (805f4 <pio_configure_pin_group+0x90>)
   8058e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80590:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80594:	bf14      	ite	ne
   80596:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80598:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8059a:	2001      	movs	r0, #1
   8059c:	e012      	b.n	805c4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8059e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   805a2:	d015      	beq.n	805d0 <pio_configure_pin_group+0x6c>
   805a4:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   805a8:	d012      	beq.n	805d0 <pio_configure_pin_group+0x6c>
		return 0;
   805aa:	2000      	movs	r0, #0
   805ac:	e00a      	b.n	805c4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   805ae:	460a      	mov	r2, r1
   805b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   805b4:	4b0f      	ldr	r3, [pc, #60]	; (805f4 <pio_configure_pin_group+0x90>)
   805b6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   805b8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   805bc:	bf14      	ite	ne
   805be:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   805c0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   805c2:	2001      	movs	r0, #1
}
   805c4:	b002      	add	sp, #8
   805c6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   805c8:	4b0b      	ldr	r3, [pc, #44]	; (805f8 <pio_configure_pin_group+0x94>)
   805ca:	4798      	blx	r3
	return 1;
   805cc:	2001      	movs	r0, #1
		break;
   805ce:	e7f9      	b.n	805c4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   805d0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   805d4:	f004 0301 	and.w	r3, r4, #1
   805d8:	9300      	str	r3, [sp, #0]
   805da:	f3c4 0380 	ubfx	r3, r4, #2, #1
   805de:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   805e2:	bf14      	ite	ne
   805e4:	2200      	movne	r2, #0
   805e6:	2201      	moveq	r2, #1
   805e8:	4631      	mov	r1, r6
   805ea:	4628      	mov	r0, r5
   805ec:	4c03      	ldr	r4, [pc, #12]	; (805fc <pio_configure_pin_group+0x98>)
   805ee:	47a0      	blx	r4
	return 1;
   805f0:	2001      	movs	r0, #1
		break;
   805f2:	e7e7      	b.n	805c4 <pio_configure_pin_group+0x60>
   805f4:	000803f5 	.word	0x000803f5
   805f8:	00080433 	.word	0x00080433
   805fc:	00080465 	.word	0x00080465

00080600 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80604:	4604      	mov	r4, r0
   80606:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80608:	4b0e      	ldr	r3, [pc, #56]	; (80644 <pio_handler_process+0x44>)
   8060a:	4798      	blx	r3
   8060c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8060e:	4620      	mov	r0, r4
   80610:	4b0d      	ldr	r3, [pc, #52]	; (80648 <pio_handler_process+0x48>)
   80612:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80614:	4005      	ands	r5, r0
   80616:	d013      	beq.n	80640 <pio_handler_process+0x40>
   80618:	4c0c      	ldr	r4, [pc, #48]	; (8064c <pio_handler_process+0x4c>)
   8061a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8061e:	e003      	b.n	80628 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80620:	42b4      	cmp	r4, r6
   80622:	d00d      	beq.n	80640 <pio_handler_process+0x40>
   80624:	3410      	adds	r4, #16
		while (status != 0) {
   80626:	b15d      	cbz	r5, 80640 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80628:	6820      	ldr	r0, [r4, #0]
   8062a:	4540      	cmp	r0, r8
   8062c:	d1f8      	bne.n	80620 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8062e:	6861      	ldr	r1, [r4, #4]
   80630:	4229      	tst	r1, r5
   80632:	d0f5      	beq.n	80620 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80634:	68e3      	ldr	r3, [r4, #12]
   80636:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80638:	6863      	ldr	r3, [r4, #4]
   8063a:	ea25 0503 	bic.w	r5, r5, r3
   8063e:	e7ef      	b.n	80620 <pio_handler_process+0x20>
   80640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80644:	0008048b 	.word	0x0008048b
   80648:	0008048f 	.word	0x0008048f
   8064c:	20070578 	.word	0x20070578

00080650 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80650:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80652:	210b      	movs	r1, #11
   80654:	4801      	ldr	r0, [pc, #4]	; (8065c <PIOA_Handler+0xc>)
   80656:	4b02      	ldr	r3, [pc, #8]	; (80660 <PIOA_Handler+0x10>)
   80658:	4798      	blx	r3
   8065a:	bd08      	pop	{r3, pc}
   8065c:	400e0e00 	.word	0x400e0e00
   80660:	00080601 	.word	0x00080601

00080664 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80664:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80666:	210c      	movs	r1, #12
   80668:	4801      	ldr	r0, [pc, #4]	; (80670 <PIOB_Handler+0xc>)
   8066a:	4b02      	ldr	r3, [pc, #8]	; (80674 <PIOB_Handler+0x10>)
   8066c:	4798      	blx	r3
   8066e:	bd08      	pop	{r3, pc}
   80670:	400e1000 	.word	0x400e1000
   80674:	00080601 	.word	0x00080601

00080678 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80678:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8067a:	210d      	movs	r1, #13
   8067c:	4801      	ldr	r0, [pc, #4]	; (80684 <PIOC_Handler+0xc>)
   8067e:	4b02      	ldr	r3, [pc, #8]	; (80688 <PIOC_Handler+0x10>)
   80680:	4798      	blx	r3
   80682:	bd08      	pop	{r3, pc}
   80684:	400e1200 	.word	0x400e1200
   80688:	00080601 	.word	0x00080601

0008068c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8068c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8068e:	210e      	movs	r1, #14
   80690:	4801      	ldr	r0, [pc, #4]	; (80698 <PIOD_Handler+0xc>)
   80692:	4b02      	ldr	r3, [pc, #8]	; (8069c <PIOD_Handler+0x10>)
   80694:	4798      	blx	r3
   80696:	bd08      	pop	{r3, pc}
   80698:	400e1400 	.word	0x400e1400
   8069c:	00080601 	.word	0x00080601

000806a0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   806a0:	4a17      	ldr	r2, [pc, #92]	; (80700 <pmc_switch_mck_to_pllack+0x60>)
   806a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   806a8:	4318      	orrs	r0, r3
   806aa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806ac:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806ae:	f013 0f08 	tst.w	r3, #8
   806b2:	d10a      	bne.n	806ca <pmc_switch_mck_to_pllack+0x2a>
   806b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806b8:	4911      	ldr	r1, [pc, #68]	; (80700 <pmc_switch_mck_to_pllack+0x60>)
   806ba:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806bc:	f012 0f08 	tst.w	r2, #8
   806c0:	d103      	bne.n	806ca <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   806c2:	3b01      	subs	r3, #1
   806c4:	d1f9      	bne.n	806ba <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   806c6:	2001      	movs	r0, #1
   806c8:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   806ca:	4a0d      	ldr	r2, [pc, #52]	; (80700 <pmc_switch_mck_to_pllack+0x60>)
   806cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   806ce:	f023 0303 	bic.w	r3, r3, #3
   806d2:	f043 0302 	orr.w	r3, r3, #2
   806d6:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   806d8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   806da:	f013 0f08 	tst.w	r3, #8
   806de:	d10a      	bne.n	806f6 <pmc_switch_mck_to_pllack+0x56>
   806e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   806e4:	4906      	ldr	r1, [pc, #24]	; (80700 <pmc_switch_mck_to_pllack+0x60>)
   806e6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   806e8:	f012 0f08 	tst.w	r2, #8
   806ec:	d105      	bne.n	806fa <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   806ee:	3b01      	subs	r3, #1
   806f0:	d1f9      	bne.n	806e6 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   806f2:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   806f4:	4770      	bx	lr
	return 0;
   806f6:	2000      	movs	r0, #0
   806f8:	4770      	bx	lr
   806fa:	2000      	movs	r0, #0
   806fc:	4770      	bx	lr
   806fe:	bf00      	nop
   80700:	400e0600 	.word	0x400e0600

00080704 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80704:	b9c8      	cbnz	r0, 8073a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80706:	4a11      	ldr	r2, [pc, #68]	; (8074c <pmc_switch_mainck_to_xtal+0x48>)
   80708:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8070a:	0209      	lsls	r1, r1, #8
   8070c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8070e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80712:	f023 0303 	bic.w	r3, r3, #3
   80716:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8071a:	f043 0301 	orr.w	r3, r3, #1
   8071e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80720:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80722:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80724:	f013 0f01 	tst.w	r3, #1
   80728:	d0fb      	beq.n	80722 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8072a:	4a08      	ldr	r2, [pc, #32]	; (8074c <pmc_switch_mainck_to_xtal+0x48>)
   8072c:	6a13      	ldr	r3, [r2, #32]
   8072e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80736:	6213      	str	r3, [r2, #32]
   80738:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8073a:	4904      	ldr	r1, [pc, #16]	; (8074c <pmc_switch_mainck_to_xtal+0x48>)
   8073c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8073e:	4a04      	ldr	r2, [pc, #16]	; (80750 <pmc_switch_mainck_to_xtal+0x4c>)
   80740:	401a      	ands	r2, r3
   80742:	4b04      	ldr	r3, [pc, #16]	; (80754 <pmc_switch_mainck_to_xtal+0x50>)
   80744:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80746:	620b      	str	r3, [r1, #32]
   80748:	4770      	bx	lr
   8074a:	bf00      	nop
   8074c:	400e0600 	.word	0x400e0600
   80750:	fec8fffc 	.word	0xfec8fffc
   80754:	01370002 	.word	0x01370002

00080758 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80758:	4b02      	ldr	r3, [pc, #8]	; (80764 <pmc_osc_is_ready_mainck+0xc>)
   8075a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8075c:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80760:	4770      	bx	lr
   80762:	bf00      	nop
   80764:	400e0600 	.word	0x400e0600

00080768 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80768:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8076c:	4b01      	ldr	r3, [pc, #4]	; (80774 <pmc_disable_pllack+0xc>)
   8076e:	629a      	str	r2, [r3, #40]	; 0x28
   80770:	4770      	bx	lr
   80772:	bf00      	nop
   80774:	400e0600 	.word	0x400e0600

00080778 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80778:	4b02      	ldr	r3, [pc, #8]	; (80784 <pmc_is_locked_pllack+0xc>)
   8077a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8077c:	f000 0002 	and.w	r0, r0, #2
   80780:	4770      	bx	lr
   80782:	bf00      	nop
   80784:	400e0600 	.word	0x400e0600

00080788 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80788:	282c      	cmp	r0, #44	; 0x2c
   8078a:	d81e      	bhi.n	807ca <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8078c:	281f      	cmp	r0, #31
   8078e:	d80c      	bhi.n	807aa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80790:	4b11      	ldr	r3, [pc, #68]	; (807d8 <pmc_enable_periph_clk+0x50>)
   80792:	699a      	ldr	r2, [r3, #24]
   80794:	2301      	movs	r3, #1
   80796:	4083      	lsls	r3, r0
   80798:	4393      	bics	r3, r2
   8079a:	d018      	beq.n	807ce <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8079c:	2301      	movs	r3, #1
   8079e:	fa03 f000 	lsl.w	r0, r3, r0
   807a2:	4b0d      	ldr	r3, [pc, #52]	; (807d8 <pmc_enable_periph_clk+0x50>)
   807a4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   807a6:	2000      	movs	r0, #0
   807a8:	4770      	bx	lr
		ul_id -= 32;
   807aa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   807ac:	4b0a      	ldr	r3, [pc, #40]	; (807d8 <pmc_enable_periph_clk+0x50>)
   807ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   807b2:	2301      	movs	r3, #1
   807b4:	4083      	lsls	r3, r0
   807b6:	4393      	bics	r3, r2
   807b8:	d00b      	beq.n	807d2 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   807ba:	2301      	movs	r3, #1
   807bc:	fa03 f000 	lsl.w	r0, r3, r0
   807c0:	4b05      	ldr	r3, [pc, #20]	; (807d8 <pmc_enable_periph_clk+0x50>)
   807c2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   807c6:	2000      	movs	r0, #0
   807c8:	4770      	bx	lr
		return 1;
   807ca:	2001      	movs	r0, #1
   807cc:	4770      	bx	lr
	return 0;
   807ce:	2000      	movs	r0, #0
   807d0:	4770      	bx	lr
   807d2:	2000      	movs	r0, #0
}
   807d4:	4770      	bx	lr
   807d6:	bf00      	nop
   807d8:	400e0600 	.word	0x400e0600

000807dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   807dc:	e7fe      	b.n	807dc <Dummy_Handler>
	...

000807e0 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   807e0:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   807e2:	4b1c      	ldr	r3, [pc, #112]	; (80854 <Reset_Handler+0x74>)
   807e4:	4a1c      	ldr	r2, [pc, #112]	; (80858 <Reset_Handler+0x78>)
   807e6:	429a      	cmp	r2, r3
   807e8:	d010      	beq.n	8080c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   807ea:	4b1c      	ldr	r3, [pc, #112]	; (8085c <Reset_Handler+0x7c>)
   807ec:	4a19      	ldr	r2, [pc, #100]	; (80854 <Reset_Handler+0x74>)
   807ee:	429a      	cmp	r2, r3
   807f0:	d20c      	bcs.n	8080c <Reset_Handler+0x2c>
   807f2:	3b01      	subs	r3, #1
   807f4:	1a9b      	subs	r3, r3, r2
   807f6:	f023 0303 	bic.w	r3, r3, #3
   807fa:	3304      	adds	r3, #4
   807fc:	4413      	add	r3, r2
   807fe:	4916      	ldr	r1, [pc, #88]	; (80858 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80800:	f851 0b04 	ldr.w	r0, [r1], #4
   80804:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80808:	429a      	cmp	r2, r3
   8080a:	d1f9      	bne.n	80800 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8080c:	4b14      	ldr	r3, [pc, #80]	; (80860 <Reset_Handler+0x80>)
   8080e:	4a15      	ldr	r2, [pc, #84]	; (80864 <Reset_Handler+0x84>)
   80810:	429a      	cmp	r2, r3
   80812:	d20a      	bcs.n	8082a <Reset_Handler+0x4a>
   80814:	3b01      	subs	r3, #1
   80816:	1a9b      	subs	r3, r3, r2
   80818:	f023 0303 	bic.w	r3, r3, #3
   8081c:	3304      	adds	r3, #4
   8081e:	4413      	add	r3, r2
		*pDest++ = 0;
   80820:	2100      	movs	r1, #0
   80822:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80826:	4293      	cmp	r3, r2
   80828:	d1fb      	bne.n	80822 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8082a:	4b0f      	ldr	r3, [pc, #60]	; (80868 <Reset_Handler+0x88>)
   8082c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80830:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80834:	490d      	ldr	r1, [pc, #52]	; (8086c <Reset_Handler+0x8c>)
   80836:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80838:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8083c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80840:	d203      	bcs.n	8084a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80842:	688b      	ldr	r3, [r1, #8]
   80844:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80848:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8084a:	4b09      	ldr	r3, [pc, #36]	; (80870 <Reset_Handler+0x90>)
   8084c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8084e:	4b09      	ldr	r3, [pc, #36]	; (80874 <Reset_Handler+0x94>)
   80850:	4798      	blx	r3
   80852:	e7fe      	b.n	80852 <Reset_Handler+0x72>
   80854:	20070000 	.word	0x20070000
   80858:	00080be4 	.word	0x00080be4
   8085c:	2007055c 	.word	0x2007055c
   80860:	20070634 	.word	0x20070634
   80864:	2007055c 	.word	0x2007055c
   80868:	00080000 	.word	0x00080000
   8086c:	e000ed00 	.word	0xe000ed00
   80870:	00080a21 	.word	0x00080a21
   80874:	00080991 	.word	0x00080991

00080878 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80878:	4b3d      	ldr	r3, [pc, #244]	; (80970 <SystemCoreClockUpdate+0xf8>)
   8087a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8087c:	f003 0303 	and.w	r3, r3, #3
   80880:	2b03      	cmp	r3, #3
   80882:	d80e      	bhi.n	808a2 <SystemCoreClockUpdate+0x2a>
   80884:	e8df f003 	tbb	[pc, r3]
   80888:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8088c:	4b39      	ldr	r3, [pc, #228]	; (80974 <SystemCoreClockUpdate+0xfc>)
   8088e:	695b      	ldr	r3, [r3, #20]
   80890:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80894:	bf14      	ite	ne
   80896:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8089a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8089e:	4b36      	ldr	r3, [pc, #216]	; (80978 <SystemCoreClockUpdate+0x100>)
   808a0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   808a2:	4b33      	ldr	r3, [pc, #204]	; (80970 <SystemCoreClockUpdate+0xf8>)
   808a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   808a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808aa:	2b70      	cmp	r3, #112	; 0x70
   808ac:	d057      	beq.n	8095e <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   808ae:	4b30      	ldr	r3, [pc, #192]	; (80970 <SystemCoreClockUpdate+0xf8>)
   808b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   808b2:	4931      	ldr	r1, [pc, #196]	; (80978 <SystemCoreClockUpdate+0x100>)
   808b4:	f3c2 1202 	ubfx	r2, r2, #4, #3
   808b8:	680b      	ldr	r3, [r1, #0]
   808ba:	40d3      	lsrs	r3, r2
   808bc:	600b      	str	r3, [r1, #0]
   808be:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808c0:	4b2b      	ldr	r3, [pc, #172]	; (80970 <SystemCoreClockUpdate+0xf8>)
   808c2:	6a1b      	ldr	r3, [r3, #32]
   808c4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   808c8:	d003      	beq.n	808d2 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   808ca:	4a2c      	ldr	r2, [pc, #176]	; (8097c <SystemCoreClockUpdate+0x104>)
   808cc:	4b2a      	ldr	r3, [pc, #168]	; (80978 <SystemCoreClockUpdate+0x100>)
   808ce:	601a      	str	r2, [r3, #0]
   808d0:	e7e7      	b.n	808a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   808d2:	4a2b      	ldr	r2, [pc, #172]	; (80980 <SystemCoreClockUpdate+0x108>)
   808d4:	4b28      	ldr	r3, [pc, #160]	; (80978 <SystemCoreClockUpdate+0x100>)
   808d6:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808d8:	4b25      	ldr	r3, [pc, #148]	; (80970 <SystemCoreClockUpdate+0xf8>)
   808da:	6a1b      	ldr	r3, [r3, #32]
   808dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808e0:	2b10      	cmp	r3, #16
   808e2:	d005      	beq.n	808f0 <SystemCoreClockUpdate+0x78>
   808e4:	2b20      	cmp	r3, #32
   808e6:	d1dc      	bne.n	808a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   808e8:	4a24      	ldr	r2, [pc, #144]	; (8097c <SystemCoreClockUpdate+0x104>)
   808ea:	4b23      	ldr	r3, [pc, #140]	; (80978 <SystemCoreClockUpdate+0x100>)
   808ec:	601a      	str	r2, [r3, #0]
				break;
   808ee:	e7d8      	b.n	808a2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   808f0:	4a24      	ldr	r2, [pc, #144]	; (80984 <SystemCoreClockUpdate+0x10c>)
   808f2:	4b21      	ldr	r3, [pc, #132]	; (80978 <SystemCoreClockUpdate+0x100>)
   808f4:	601a      	str	r2, [r3, #0]
				break;
   808f6:	e7d4      	b.n	808a2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808f8:	4b1d      	ldr	r3, [pc, #116]	; (80970 <SystemCoreClockUpdate+0xf8>)
   808fa:	6a1b      	ldr	r3, [r3, #32]
   808fc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80900:	d00c      	beq.n	8091c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80902:	4a1e      	ldr	r2, [pc, #120]	; (8097c <SystemCoreClockUpdate+0x104>)
   80904:	4b1c      	ldr	r3, [pc, #112]	; (80978 <SystemCoreClockUpdate+0x100>)
   80906:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80908:	4b19      	ldr	r3, [pc, #100]	; (80970 <SystemCoreClockUpdate+0xf8>)
   8090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8090c:	f003 0303 	and.w	r3, r3, #3
   80910:	2b02      	cmp	r3, #2
   80912:	d016      	beq.n	80942 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80914:	4a1c      	ldr	r2, [pc, #112]	; (80988 <SystemCoreClockUpdate+0x110>)
   80916:	4b18      	ldr	r3, [pc, #96]	; (80978 <SystemCoreClockUpdate+0x100>)
   80918:	601a      	str	r2, [r3, #0]
   8091a:	e7c2      	b.n	808a2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8091c:	4a18      	ldr	r2, [pc, #96]	; (80980 <SystemCoreClockUpdate+0x108>)
   8091e:	4b16      	ldr	r3, [pc, #88]	; (80978 <SystemCoreClockUpdate+0x100>)
   80920:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80922:	4b13      	ldr	r3, [pc, #76]	; (80970 <SystemCoreClockUpdate+0xf8>)
   80924:	6a1b      	ldr	r3, [r3, #32]
   80926:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8092a:	2b10      	cmp	r3, #16
   8092c:	d005      	beq.n	8093a <SystemCoreClockUpdate+0xc2>
   8092e:	2b20      	cmp	r3, #32
   80930:	d1ea      	bne.n	80908 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80932:	4a12      	ldr	r2, [pc, #72]	; (8097c <SystemCoreClockUpdate+0x104>)
   80934:	4b10      	ldr	r3, [pc, #64]	; (80978 <SystemCoreClockUpdate+0x100>)
   80936:	601a      	str	r2, [r3, #0]
				break;
   80938:	e7e6      	b.n	80908 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8093a:	4a12      	ldr	r2, [pc, #72]	; (80984 <SystemCoreClockUpdate+0x10c>)
   8093c:	4b0e      	ldr	r3, [pc, #56]	; (80978 <SystemCoreClockUpdate+0x100>)
   8093e:	601a      	str	r2, [r3, #0]
				break;
   80940:	e7e2      	b.n	80908 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80942:	4a0b      	ldr	r2, [pc, #44]	; (80970 <SystemCoreClockUpdate+0xf8>)
   80944:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80946:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80948:	480b      	ldr	r0, [pc, #44]	; (80978 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8094a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8094e:	6803      	ldr	r3, [r0, #0]
   80950:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80954:	b2d2      	uxtb	r2, r2
   80956:	fbb3 f3f2 	udiv	r3, r3, r2
   8095a:	6003      	str	r3, [r0, #0]
   8095c:	e7a1      	b.n	808a2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8095e:	4a06      	ldr	r2, [pc, #24]	; (80978 <SystemCoreClockUpdate+0x100>)
   80960:	6813      	ldr	r3, [r2, #0]
   80962:	490a      	ldr	r1, [pc, #40]	; (8098c <SystemCoreClockUpdate+0x114>)
   80964:	fba1 1303 	umull	r1, r3, r1, r3
   80968:	085b      	lsrs	r3, r3, #1
   8096a:	6013      	str	r3, [r2, #0]
   8096c:	4770      	bx	lr
   8096e:	bf00      	nop
   80970:	400e0600 	.word	0x400e0600
   80974:	400e1a10 	.word	0x400e1a10
   80978:	2007012c 	.word	0x2007012c
   8097c:	00b71b00 	.word	0x00b71b00
   80980:	003d0900 	.word	0x003d0900
   80984:	007a1200 	.word	0x007a1200
   80988:	0e4e1c00 	.word	0x0e4e1c00
   8098c:	aaaaaaab 	.word	0xaaaaaaab

00080990 <main>:
#define PWM_DAC IOPORT_CREATE_PIN(PIOC, 3)

pwm_channel_t pwm_channel_instance;

int main (void)
{
   80990:	b500      	push	{lr}
   80992:	b085      	sub	sp, #20
	//clock configuration and initialization
	sysclk_init();
   80994:	4b16      	ldr	r3, [pc, #88]	; (809f0 <main+0x60>)
   80996:	4798      	blx	r3
	
	/*Disable the watchdog timer and configure/initialize
	port pins connected to various components incorporated 
	into the SAM4S Xplained development platform, e.g., the 
	NAND flash, the OLED interface, the LEDs, the SW0 pushbutton.*/  
	board_init();
   80998:	4b16      	ldr	r3, [pc, #88]	; (809f4 <main+0x64>)
   8099a:	4798      	blx	r3
	
	//connect peripheral B to pin A23
	pio_configure_pin(PWM_DAC, PIO_TYPE_PIO_PERIPH_B);
   8099c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809a0:	2043      	movs	r0, #67	; 0x43
   809a2:	4b15      	ldr	r3, [pc, #84]	; (809f8 <main+0x68>)
   809a4:	4798      	blx	r3

	//enable the peripheral clock for the PWM hardware
	pmc_enable_periph_clk(ID_PWM);
   809a6:	2024      	movs	r0, #36	; 0x24
   809a8:	4b14      	ldr	r3, [pc, #80]	; (809fc <main+0x6c>)
   809aa:	4798      	blx	r3

	//disable the channel until it is properly configured
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   809ac:	4c14      	ldr	r4, [pc, #80]	; (80a00 <main+0x70>)
   809ae:	2100      	movs	r1, #0
   809b0:	4620      	mov	r0, r4
   809b2:	4b14      	ldr	r3, [pc, #80]	; (80a04 <main+0x74>)
   809b4:	4798      	blx	r3

	//PWM clock configuration
	pwm_clock_t PWMDAC_clock_config = 
   809b6:	4b14      	ldr	r3, [pc, #80]	; (80a08 <main+0x78>)
   809b8:	9301      	str	r3, [sp, #4]
   809ba:	2500      	movs	r5, #0
   809bc:	9502      	str	r5, [sp, #8]
   809be:	4b13      	ldr	r3, [pc, #76]	; (80a0c <main+0x7c>)
   809c0:	9303      	str	r3, [sp, #12]
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};
	
	//apply the clock configuration
	pwm_init(PWM, &PWMDAC_clock_config);
   809c2:	a901      	add	r1, sp, #4
   809c4:	4620      	mov	r0, r4
   809c6:	4b12      	ldr	r3, [pc, #72]	; (80a10 <main+0x80>)
   809c8:	4798      	blx	r3
	
	//see the article for details
	pwm_channel_instance.channel = PWM_CHANNEL_0;
   809ca:	4912      	ldr	r1, [pc, #72]	; (80a14 <main+0x84>)
   809cc:	600d      	str	r5, [r1, #0]
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   809ce:	230b      	movs	r3, #11
   809d0:	604b      	str	r3, [r1, #4]
	pwm_channel_instance.polarity = PWM_HIGH;
   809d2:	2301      	movs	r3, #1
   809d4:	728b      	strb	r3, [r1, #10]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
   809d6:	810d      	strh	r5, [r1, #8]
	pwm_channel_instance.ul_period = 100;
   809d8:	2364      	movs	r3, #100	; 0x64
   809da:	610b      	str	r3, [r1, #16]
	pwm_channel_instance.ul_duty = 50;
   809dc:	2332      	movs	r3, #50	; 0x32
   809de:	60cb      	str	r3, [r1, #12]
	
	//apply the channel configuration
	pwm_channel_init(PWM, &pwm_channel_instance);
   809e0:	4620      	mov	r0, r4
   809e2:	4b0d      	ldr	r3, [pc, #52]	; (80a18 <main+0x88>)
   809e4:	4798      	blx	r3
	
	//configuration is complete, so enable the channel
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   809e6:	4629      	mov	r1, r5
   809e8:	4620      	mov	r0, r4
   809ea:	4b0c      	ldr	r3, [pc, #48]	; (80a1c <main+0x8c>)
   809ec:	4798      	blx	r3
   809ee:	e7fe      	b.n	809ee <main+0x5e>
   809f0:	00080311 	.word	0x00080311
   809f4:	00080375 	.word	0x00080375
   809f8:	00080495 	.word	0x00080495
   809fc:	00080789 	.word	0x00080789
   80a00:	40094000 	.word	0x40094000
   80a04:	00080307 	.word	0x00080307
   80a08:	000f4240 	.word	0x000f4240
   80a0c:	0501bd00 	.word	0x0501bd00
   80a10:	000801b5 	.word	0x000801b5
   80a14:	200705e8 	.word	0x200705e8
   80a18:	000801f9 	.word	0x000801f9
   80a1c:	000802fd 	.word	0x000802fd

00080a20 <__libc_init_array>:
   80a20:	b570      	push	{r4, r5, r6, lr}
   80a22:	4e0f      	ldr	r6, [pc, #60]	; (80a60 <__libc_init_array+0x40>)
   80a24:	4d0f      	ldr	r5, [pc, #60]	; (80a64 <__libc_init_array+0x44>)
   80a26:	1b76      	subs	r6, r6, r5
   80a28:	10b6      	asrs	r6, r6, #2
   80a2a:	bf18      	it	ne
   80a2c:	2400      	movne	r4, #0
   80a2e:	d005      	beq.n	80a3c <__libc_init_array+0x1c>
   80a30:	3401      	adds	r4, #1
   80a32:	f855 3b04 	ldr.w	r3, [r5], #4
   80a36:	4798      	blx	r3
   80a38:	42a6      	cmp	r6, r4
   80a3a:	d1f9      	bne.n	80a30 <__libc_init_array+0x10>
   80a3c:	4e0a      	ldr	r6, [pc, #40]	; (80a68 <__libc_init_array+0x48>)
   80a3e:	4d0b      	ldr	r5, [pc, #44]	; (80a6c <__libc_init_array+0x4c>)
   80a40:	f000 f8be 	bl	80bc0 <_init>
   80a44:	1b76      	subs	r6, r6, r5
   80a46:	10b6      	asrs	r6, r6, #2
   80a48:	bf18      	it	ne
   80a4a:	2400      	movne	r4, #0
   80a4c:	d006      	beq.n	80a5c <__libc_init_array+0x3c>
   80a4e:	3401      	adds	r4, #1
   80a50:	f855 3b04 	ldr.w	r3, [r5], #4
   80a54:	4798      	blx	r3
   80a56:	42a6      	cmp	r6, r4
   80a58:	d1f9      	bne.n	80a4e <__libc_init_array+0x2e>
   80a5a:	bd70      	pop	{r4, r5, r6, pc}
   80a5c:	bd70      	pop	{r4, r5, r6, pc}
   80a5e:	bf00      	nop
   80a60:	00080bcc 	.word	0x00080bcc
   80a64:	00080bcc 	.word	0x00080bcc
   80a68:	00080bd4 	.word	0x00080bd4
   80a6c:	00080bcc 	.word	0x00080bcc

00080a70 <register_fini>:
   80a70:	4b02      	ldr	r3, [pc, #8]	; (80a7c <register_fini+0xc>)
   80a72:	b113      	cbz	r3, 80a7a <register_fini+0xa>
   80a74:	4802      	ldr	r0, [pc, #8]	; (80a80 <register_fini+0x10>)
   80a76:	f000 b805 	b.w	80a84 <atexit>
   80a7a:	4770      	bx	lr
   80a7c:	00000000 	.word	0x00000000
   80a80:	00080a91 	.word	0x00080a91

00080a84 <atexit>:
   80a84:	2300      	movs	r3, #0
   80a86:	4601      	mov	r1, r0
   80a88:	461a      	mov	r2, r3
   80a8a:	4618      	mov	r0, r3
   80a8c:	f000 b81e 	b.w	80acc <__register_exitproc>

00080a90 <__libc_fini_array>:
   80a90:	b538      	push	{r3, r4, r5, lr}
   80a92:	4c0a      	ldr	r4, [pc, #40]	; (80abc <__libc_fini_array+0x2c>)
   80a94:	4d0a      	ldr	r5, [pc, #40]	; (80ac0 <__libc_fini_array+0x30>)
   80a96:	1b64      	subs	r4, r4, r5
   80a98:	10a4      	asrs	r4, r4, #2
   80a9a:	d00a      	beq.n	80ab2 <__libc_fini_array+0x22>
   80a9c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80aa0:	3b01      	subs	r3, #1
   80aa2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   80aa6:	3c01      	subs	r4, #1
   80aa8:	f855 3904 	ldr.w	r3, [r5], #-4
   80aac:	4798      	blx	r3
   80aae:	2c00      	cmp	r4, #0
   80ab0:	d1f9      	bne.n	80aa6 <__libc_fini_array+0x16>
   80ab2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80ab6:	f000 b88d 	b.w	80bd4 <_fini>
   80aba:	bf00      	nop
   80abc:	00080be4 	.word	0x00080be4
   80ac0:	00080be0 	.word	0x00080be0

00080ac4 <__retarget_lock_acquire_recursive>:
   80ac4:	4770      	bx	lr
   80ac6:	bf00      	nop

00080ac8 <__retarget_lock_release_recursive>:
   80ac8:	4770      	bx	lr
   80aca:	bf00      	nop

00080acc <__register_exitproc>:
   80acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80ad0:	4d2c      	ldr	r5, [pc, #176]	; (80b84 <__register_exitproc+0xb8>)
   80ad2:	4606      	mov	r6, r0
   80ad4:	6828      	ldr	r0, [r5, #0]
   80ad6:	4698      	mov	r8, r3
   80ad8:	460f      	mov	r7, r1
   80ada:	4691      	mov	r9, r2
   80adc:	f7ff fff2 	bl	80ac4 <__retarget_lock_acquire_recursive>
   80ae0:	4b29      	ldr	r3, [pc, #164]	; (80b88 <__register_exitproc+0xbc>)
   80ae2:	681c      	ldr	r4, [r3, #0]
   80ae4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80ae8:	2b00      	cmp	r3, #0
   80aea:	d03e      	beq.n	80b6a <__register_exitproc+0x9e>
   80aec:	685a      	ldr	r2, [r3, #4]
   80aee:	2a1f      	cmp	r2, #31
   80af0:	dc1c      	bgt.n	80b2c <__register_exitproc+0x60>
   80af2:	f102 0e01 	add.w	lr, r2, #1
   80af6:	b176      	cbz	r6, 80b16 <__register_exitproc+0x4a>
   80af8:	2101      	movs	r1, #1
   80afa:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   80afe:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   80b02:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   80b06:	4091      	lsls	r1, r2
   80b08:	4308      	orrs	r0, r1
   80b0a:	2e02      	cmp	r6, #2
   80b0c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b10:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   80b14:	d023      	beq.n	80b5e <__register_exitproc+0x92>
   80b16:	3202      	adds	r2, #2
   80b18:	f8c3 e004 	str.w	lr, [r3, #4]
   80b1c:	6828      	ldr	r0, [r5, #0]
   80b1e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   80b22:	f7ff ffd1 	bl	80ac8 <__retarget_lock_release_recursive>
   80b26:	2000      	movs	r0, #0
   80b28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b2c:	4b17      	ldr	r3, [pc, #92]	; (80b8c <__register_exitproc+0xc0>)
   80b2e:	b30b      	cbz	r3, 80b74 <__register_exitproc+0xa8>
   80b30:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80b34:	f3af 8000 	nop.w
   80b38:	4603      	mov	r3, r0
   80b3a:	b1d8      	cbz	r0, 80b74 <__register_exitproc+0xa8>
   80b3c:	2000      	movs	r0, #0
   80b3e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   80b42:	f04f 0e01 	mov.w	lr, #1
   80b46:	6058      	str	r0, [r3, #4]
   80b48:	6019      	str	r1, [r3, #0]
   80b4a:	4602      	mov	r2, r0
   80b4c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b50:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   80b54:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80b58:	2e00      	cmp	r6, #0
   80b5a:	d0dc      	beq.n	80b16 <__register_exitproc+0x4a>
   80b5c:	e7cc      	b.n	80af8 <__register_exitproc+0x2c>
   80b5e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   80b62:	4301      	orrs	r1, r0
   80b64:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80b68:	e7d5      	b.n	80b16 <__register_exitproc+0x4a>
   80b6a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80b6e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   80b72:	e7bb      	b.n	80aec <__register_exitproc+0x20>
   80b74:	6828      	ldr	r0, [r5, #0]
   80b76:	f7ff ffa7 	bl	80ac8 <__retarget_lock_release_recursive>
   80b7a:	f04f 30ff 	mov.w	r0, #4294967295
   80b7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   80b82:	bf00      	nop
   80b84:	20070558 	.word	0x20070558
   80b88:	00080bbc 	.word	0x00080bbc
   80b8c:	00000000 	.word	0x00000000
   80b90:	00000001 	.word	0x00000001
   80b94:	00000002 	.word	0x00000002
   80b98:	00000004 	.word	0x00000004
   80b9c:	00000008 	.word	0x00000008
   80ba0:	00000010 	.word	0x00000010
   80ba4:	00000020 	.word	0x00000020
   80ba8:	00000040 	.word	0x00000040
   80bac:	00000080 	.word	0x00000080
   80bb0:	00000100 	.word	0x00000100
   80bb4:	00000200 	.word	0x00000200
   80bb8:	00000400 	.word	0x00000400

00080bbc <_global_impure_ptr>:
   80bbc:	20070130                                0.. 

00080bc0 <_init>:
   80bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bc2:	bf00      	nop
   80bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bc6:	bc08      	pop	{r3}
   80bc8:	469e      	mov	lr, r3
   80bca:	4770      	bx	lr

00080bcc <__init_array_start>:
   80bcc:	00080a71 	.word	0x00080a71

00080bd0 <__frame_dummy_init_array_entry>:
   80bd0:	00080119                                ....

00080bd4 <_fini>:
   80bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80bd6:	bf00      	nop
   80bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80bda:	bc08      	pop	{r3}
   80bdc:	469e      	mov	lr, r3
   80bde:	4770      	bx	lr

00080be0 <__fini_array_start>:
   80be0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...

20070558 <__atexit_recursive_mutex>:
20070558:	20070610                                ... 

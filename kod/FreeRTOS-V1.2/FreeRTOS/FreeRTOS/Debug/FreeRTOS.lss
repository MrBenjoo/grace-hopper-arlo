
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005554  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085554  00085554  00015554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae8  20070000  0008555c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a240  20070ae8  00086048  00020ae8  2**3
                  ALLOC
  4 .stack        00002000  2007ad28  00090288  00020ae8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b11  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b735  00000000  00000000  00020b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000040f7  00000000  00000000  0003c29f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00007186  00000000  00000000  00040396  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000cd0  00000000  00000000  0004751c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d18  00000000  00000000  000481ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a6e5  00000000  00000000  00048f04  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001138c  00000000  00000000  000635e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000698d3  00000000  00000000  00074975  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a54  00000000  00000000  000de248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	28 cd 07 20 31 22 08 00 2d 22 08 00 2d 22 08 00     (.. 1"..-"..-"..
   80010:	2d 22 08 00 2d 22 08 00 2d 22 08 00 00 00 00 00     -"..-"..-"......
	...
   8002c:	ad 07 08 00 2d 22 08 00 00 00 00 00 2d 08 08 00     ....-"......-...
   8003c:	69 08 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     i...-"..-"..-"..
   8004c:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   8005c:	2d 22 08 00 2d 22 08 00 2d 22 08 00 00 00 00 00     -"..-"..-"......
   8006c:	a1 20 08 00 b5 20 08 00 c9 20 08 00 dd 20 08 00     . ... ... ... ..
	...
   80084:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   80094:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   800a4:	00 00 00 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     ....-"..-"..-"..
   800b4:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   800c4:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   800d4:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..
   800e4:	2d 22 08 00 2d 22 08 00 2d 22 08 00 2d 22 08 00     -"..-"..-"..-"..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae8 	.word	0x20070ae8
   80110:	00000000 	.word	0x00000000
   80114:	0008555c 	.word	0x0008555c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008555c 	.word	0x0008555c
   80154:	20070aec 	.word	0x20070aec
   80158:	0008555c 	.word	0x0008555c
   8015c:	00000000 	.word	0x00000000

00080160 <ISR1>:

int pVal1 = -1;
int pVal2 = -1;

void ISR1(void)
{
   80160:	b508      	push	{r3, lr}
	printf("%s\n","ISR1");
   80162:	490f      	ldr	r1, [pc, #60]	; (801a0 <ISR1+0x40>)
   80164:	480f      	ldr	r0, [pc, #60]	; (801a4 <ISR1+0x44>)
   80166:	4b10      	ldr	r3, [pc, #64]	; (801a8 <ISR1+0x48>)
   80168:	4798      	blx	r3
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   8016a:	4b10      	ldr	r3, [pc, #64]	; (801ac <ISR1+0x4c>)
   8016c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(pin7) == HIGH) 
   8016e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   80172:	d105      	bne.n	80180 <ISR1+0x20>
   80174:	4b0d      	ldr	r3, [pc, #52]	; (801ac <ISR1+0x4c>)
   80176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	{
		printf("%s\n","pin8 IS HIGH");
		ioport_set_pin_level(pin11,LOW);
	} else if(ioport_get_pin_level(pin7) == LOW)
   80178:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   8017c:	d008      	beq.n	80190 <ISR1+0x30>
   8017e:	bd08      	pop	{r3, pc}
		printf("%s\n","pin8 IS HIGH");
   80180:	490b      	ldr	r1, [pc, #44]	; (801b0 <ISR1+0x50>)
   80182:	4808      	ldr	r0, [pc, #32]	; (801a4 <ISR1+0x44>)
   80184:	4b08      	ldr	r3, [pc, #32]	; (801a8 <ISR1+0x48>)
   80186:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80188:	2280      	movs	r2, #128	; 0x80
   8018a:	4b0a      	ldr	r3, [pc, #40]	; (801b4 <ISR1+0x54>)
   8018c:	635a      	str	r2, [r3, #52]	; 0x34
   8018e:	bd08      	pop	{r3, pc}
	{
		printf("%s\n","pin8 IS LOW");
   80190:	4909      	ldr	r1, [pc, #36]	; (801b8 <ISR1+0x58>)
   80192:	4804      	ldr	r0, [pc, #16]	; (801a4 <ISR1+0x44>)
   80194:	4b04      	ldr	r3, [pc, #16]	; (801a8 <ISR1+0x48>)
   80196:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80198:	2280      	movs	r2, #128	; 0x80
   8019a:	4b06      	ldr	r3, [pc, #24]	; (801b4 <ISR1+0x54>)
   8019c:	631a      	str	r2, [r3, #48]	; 0x30
	
	//ioport_toggle_pin_level(pin11)
	//ioport_get_pin_level()
	//ioport_set_pin_level(pin11,pVal1);
	//pVal1 = ~pVal1;
}
   8019e:	e7ee      	b.n	8017e <ISR1+0x1e>
   801a0:	0008533c 	.word	0x0008533c
   801a4:	00085344 	.word	0x00085344
   801a8:	000824a9 	.word	0x000824a9
   801ac:	400e1200 	.word	0x400e1200
   801b0:	00085348 	.word	0x00085348
   801b4:	400e1400 	.word	0x400e1400
   801b8:	00085358 	.word	0x00085358

000801bc <ISR2>:

void ISR2(void)
{
   801bc:	b508      	push	{r3, lr}
	printf("%s\n","ISR2");
   801be:	490d      	ldr	r1, [pc, #52]	; (801f4 <ISR2+0x38>)
   801c0:	480d      	ldr	r0, [pc, #52]	; (801f8 <ISR2+0x3c>)
   801c2:	4b0e      	ldr	r3, [pc, #56]	; (801fc <ISR2+0x40>)
   801c4:	4798      	blx	r3
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
   801c6:	4b0e      	ldr	r3, [pc, #56]	; (80200 <ISR2+0x44>)
   801c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
	if(ioport_get_pin_level(pin8) == HIGH) 
   801ca:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   801ce:	d108      	bne.n	801e2 <ISR2+0x26>
		printf("%s\n","PIN7 IS HIGH");
		ioport_set_pin_level(pin8,LOW);
	} 
	else 
	{
		printf("%s\n","PIN7 IS LOW");
   801d0:	490c      	ldr	r1, [pc, #48]	; (80204 <ISR2+0x48>)
   801d2:	4809      	ldr	r0, [pc, #36]	; (801f8 <ISR2+0x3c>)
   801d4:	4b09      	ldr	r3, [pc, #36]	; (801fc <ISR2+0x40>)
   801d6:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   801d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   801dc:	4b0a      	ldr	r3, [pc, #40]	; (80208 <ISR2+0x4c>)
   801de:	631a      	str	r2, [r3, #48]	; 0x30
   801e0:	bd08      	pop	{r3, pc}
		printf("%s\n","PIN7 IS HIGH");
   801e2:	490a      	ldr	r1, [pc, #40]	; (8020c <ISR2+0x50>)
   801e4:	4804      	ldr	r0, [pc, #16]	; (801f8 <ISR2+0x3c>)
   801e6:	4b05      	ldr	r3, [pc, #20]	; (801fc <ISR2+0x40>)
   801e8:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   801ea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   801ee:	4b04      	ldr	r3, [pc, #16]	; (80200 <ISR2+0x44>)
   801f0:	635a      	str	r2, [r3, #52]	; 0x34
   801f2:	bd08      	pop	{r3, pc}
   801f4:	00085364 	.word	0x00085364
   801f8:	00085344 	.word	0x00085344
   801fc:	000824a9 	.word	0x000824a9
   80200:	400e1200 	.word	0x400e1200
   80204:	0008537c 	.word	0x0008537c
   80208:	400e0e00 	.word	0x400e0e00
   8020c:	0008536c 	.word	0x0008536c

00080210 <task2>:
* Function: task2
* -------------------
* Performs an action every xTimeT2 milliseconds
*/
void task2(void *pvParamters)
{
   80210:	b570      	push	{r4, r5, r6, lr}
   80212:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = xTimeT2/portTICK_RATE_MS; /* set ticks (xTimeT2) in milliseconds */
	xLastWakeTime = xTaskGetTickCount();					/* the count of ticks since vTaskStartScheduler was called */
   80214:	4b0d      	ldr	r3, [pc, #52]	; (8024c <task2+0x3c>)
   80216:	4798      	blx	r3
   80218:	9001      	str	r0, [sp, #4]
	
	while(1) /* the task must be looping infinitely */
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* constant period, independent of execution time */
   8021a:	4e0d      	ldr	r6, [pc, #52]	; (80250 <task2+0x40>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8021c:	4d0d      	ldr	r5, [pc, #52]	; (80254 <task2+0x44>)
   8021e:	f44f 7480 	mov.w	r4, #256	; 0x100
   80222:	e000      	b.n	80226 <task2+0x16>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80224:	636c      	str	r4, [r5, #52]	; 0x34
   80226:	2114      	movs	r1, #20
   80228:	a801      	add	r0, sp, #4
   8022a:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8022c:	632c      	str	r4, [r5, #48]	; 0x30
		//vTaskDelay(50);								 /* no constant period, dependent of execution time */
		
		
		/* ----------------------------------- simulate a function/task that is working ----------------------------------- */
		ioport_set_pin_level(pin12, HIGH); /* set pin to HIGH to indicate that the task has entered the running state */
		volatile int j=0;
   8022e:	2300      	movs	r3, #0
   80230:	9300      	str	r3, [sp, #0]
   80232:	f242 7210 	movw	r2, #10000	; 0x2710
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80236:	4808      	ldr	r0, [pc, #32]	; (80258 <task2+0x48>)
   80238:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8023c:	6341      	str	r1, [r0, #52]	; 0x34
		for (int i=0; i < 10000; i++)
		{
			ioport_set_pin_level(pin13, LOW);
			j++;
   8023e:	9b00      	ldr	r3, [sp, #0]
   80240:	3301      	adds	r3, #1
   80242:	9300      	str	r3, [sp, #0]
		for (int i=0; i < 10000; i++)
   80244:	3a01      	subs	r2, #1
   80246:	d1f9      	bne.n	8023c <task2+0x2c>
   80248:	e7ec      	b.n	80224 <task2+0x14>
   8024a:	bf00      	nop
   8024c:	0008127d 	.word	0x0008127d
   80250:	000814c5 	.word	0x000814c5
   80254:	400e1400 	.word	0x400e1400
   80258:	400e1000 	.word	0x400e1000

0008025c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8025c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80260:	b980      	cbnz	r0, 80284 <_read+0x28>
   80262:	460c      	mov	r4, r1
   80264:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80266:	2a00      	cmp	r2, #0
   80268:	dd0f      	ble.n	8028a <_read+0x2e>
   8026a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8026c:	4e08      	ldr	r6, [pc, #32]	; (80290 <_read+0x34>)
   8026e:	4d09      	ldr	r5, [pc, #36]	; (80294 <_read+0x38>)
   80270:	6830      	ldr	r0, [r6, #0]
   80272:	4621      	mov	r1, r4
   80274:	682b      	ldr	r3, [r5, #0]
   80276:	4798      	blx	r3
		ptr++;
   80278:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8027a:	42bc      	cmp	r4, r7
   8027c:	d1f8      	bne.n	80270 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8027e:	4640      	mov	r0, r8
   80280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80284:	f04f 38ff 	mov.w	r8, #4294967295
   80288:	e7f9      	b.n	8027e <_read+0x22>
	for (; len > 0; --len) {
   8028a:	4680      	mov	r8, r0
   8028c:	e7f7      	b.n	8027e <_read+0x22>
   8028e:	bf00      	nop
   80290:	2007acfc 	.word	0x2007acfc
   80294:	2007acf4 	.word	0x2007acf4

00080298 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80298:	3801      	subs	r0, #1
   8029a:	2802      	cmp	r0, #2
   8029c:	d815      	bhi.n	802ca <_write+0x32>
{
   8029e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   802a2:	460e      	mov	r6, r1
   802a4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   802a6:	b19a      	cbz	r2, 802d0 <_write+0x38>
   802a8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   802aa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 802e4 <_write+0x4c>
   802ae:	4f0c      	ldr	r7, [pc, #48]	; (802e0 <_write+0x48>)
   802b0:	f8d8 0000 	ldr.w	r0, [r8]
   802b4:	f815 1b01 	ldrb.w	r1, [r5], #1
   802b8:	683b      	ldr	r3, [r7, #0]
   802ba:	4798      	blx	r3
   802bc:	2800      	cmp	r0, #0
   802be:	db0a      	blt.n	802d6 <_write+0x3e>
   802c0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   802c2:	3c01      	subs	r4, #1
   802c4:	d1f4      	bne.n	802b0 <_write+0x18>
   802c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   802ca:	f04f 30ff 	mov.w	r0, #4294967295
   802ce:	4770      	bx	lr
	for (; len != 0; --len) {
   802d0:	4610      	mov	r0, r2
   802d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   802d6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   802da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802de:	bf00      	nop
   802e0:	2007acf8 	.word	0x2007acf8
   802e4:	2007acfc 	.word	0x2007acfc

000802e8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802e8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802ea:	23ac      	movs	r3, #172	; 0xac
   802ec:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802ee:	680b      	ldr	r3, [r1, #0]
   802f0:	684a      	ldr	r2, [r1, #4]
   802f2:	fbb3 f3f2 	udiv	r3, r3, r2
   802f6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802f8:	1e5c      	subs	r4, r3, #1
   802fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802fe:	4294      	cmp	r4, r2
   80300:	d80b      	bhi.n	8031a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80302:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80304:	688b      	ldr	r3, [r1, #8]
   80306:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80308:	f240 2302 	movw	r3, #514	; 0x202
   8030c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80310:	2350      	movs	r3, #80	; 0x50
   80312:	6003      	str	r3, [r0, #0]

	return 0;
   80314:	2000      	movs	r0, #0
}
   80316:	bc10      	pop	{r4}
   80318:	4770      	bx	lr
		return 1;
   8031a:	2001      	movs	r0, #1
   8031c:	e7fb      	b.n	80316 <uart_init+0x2e>

0008031e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8031e:	6943      	ldr	r3, [r0, #20]
   80320:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80324:	bf1a      	itte	ne
   80326:	61c1      	strne	r1, [r0, #28]
	return 0;
   80328:	2000      	movne	r0, #0
		return 1;
   8032a:	2001      	moveq	r0, #1
}
   8032c:	4770      	bx	lr

0008032e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8032e:	6943      	ldr	r3, [r0, #20]
   80330:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80334:	bf1d      	ittte	ne
   80336:	6983      	ldrne	r3, [r0, #24]
   80338:	700b      	strbne	r3, [r1, #0]
	return 0;
   8033a:	2000      	movne	r0, #0
		return 1;
   8033c:	2001      	moveq	r0, #1
}
   8033e:	4770      	bx	lr

00080340 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80340:	6943      	ldr	r3, [r0, #20]
   80342:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80346:	bf1d      	ittte	ne
   80348:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8034c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8034e:	2000      	movne	r0, #0
		return 1;
   80350:	2001      	moveq	r0, #1
}
   80352:	4770      	bx	lr

00080354 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80354:	6943      	ldr	r3, [r0, #20]
   80356:	f013 0f01 	tst.w	r3, #1
   8035a:	d005      	beq.n	80368 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8035c:	6983      	ldr	r3, [r0, #24]
   8035e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80362:	600b      	str	r3, [r1, #0]

	return 0;
   80364:	2000      	movs	r0, #0
   80366:	4770      	bx	lr
		return 1;
   80368:	2001      	movs	r0, #1
}
   8036a:	4770      	bx	lr

0008036c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8036c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8036e:	b083      	sub	sp, #12
   80370:	4604      	mov	r4, r0
   80372:	460d      	mov	r5, r1
	uint32_t val = 0;
   80374:	2300      	movs	r3, #0
   80376:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80378:	4b20      	ldr	r3, [pc, #128]	; (803fc <usart_serial_getchar+0x90>)
   8037a:	4298      	cmp	r0, r3
   8037c:	d00d      	beq.n	8039a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8037e:	4b20      	ldr	r3, [pc, #128]	; (80400 <usart_serial_getchar+0x94>)
   80380:	4298      	cmp	r0, r3
   80382:	d012      	beq.n	803aa <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80384:	4b1f      	ldr	r3, [pc, #124]	; (80404 <usart_serial_getchar+0x98>)
   80386:	4298      	cmp	r0, r3
   80388:	d019      	beq.n	803be <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8038a:	4b1f      	ldr	r3, [pc, #124]	; (80408 <usart_serial_getchar+0x9c>)
   8038c:	429c      	cmp	r4, r3
   8038e:	d020      	beq.n	803d2 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80390:	4b1e      	ldr	r3, [pc, #120]	; (8040c <usart_serial_getchar+0xa0>)
   80392:	429c      	cmp	r4, r3
   80394:	d027      	beq.n	803e6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80396:	b003      	add	sp, #12
   80398:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8039a:	461f      	mov	r7, r3
   8039c:	4e1c      	ldr	r6, [pc, #112]	; (80410 <usart_serial_getchar+0xa4>)
   8039e:	4629      	mov	r1, r5
   803a0:	4638      	mov	r0, r7
   803a2:	47b0      	blx	r6
   803a4:	2800      	cmp	r0, #0
   803a6:	d1fa      	bne.n	8039e <usart_serial_getchar+0x32>
   803a8:	e7ef      	b.n	8038a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   803aa:	461f      	mov	r7, r3
   803ac:	4e19      	ldr	r6, [pc, #100]	; (80414 <usart_serial_getchar+0xa8>)
   803ae:	a901      	add	r1, sp, #4
   803b0:	4638      	mov	r0, r7
   803b2:	47b0      	blx	r6
   803b4:	2800      	cmp	r0, #0
   803b6:	d1fa      	bne.n	803ae <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   803b8:	9b01      	ldr	r3, [sp, #4]
   803ba:	702b      	strb	r3, [r5, #0]
   803bc:	e7e8      	b.n	80390 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   803be:	461e      	mov	r6, r3
   803c0:	4c14      	ldr	r4, [pc, #80]	; (80414 <usart_serial_getchar+0xa8>)
   803c2:	a901      	add	r1, sp, #4
   803c4:	4630      	mov	r0, r6
   803c6:	47a0      	blx	r4
   803c8:	2800      	cmp	r0, #0
   803ca:	d1fa      	bne.n	803c2 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   803cc:	9b01      	ldr	r3, [sp, #4]
   803ce:	702b      	strb	r3, [r5, #0]
   803d0:	e7e1      	b.n	80396 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   803d2:	461e      	mov	r6, r3
   803d4:	4c0f      	ldr	r4, [pc, #60]	; (80414 <usart_serial_getchar+0xa8>)
   803d6:	a901      	add	r1, sp, #4
   803d8:	4630      	mov	r0, r6
   803da:	47a0      	blx	r4
   803dc:	2800      	cmp	r0, #0
   803de:	d1fa      	bne.n	803d6 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   803e0:	9b01      	ldr	r3, [sp, #4]
   803e2:	702b      	strb	r3, [r5, #0]
   803e4:	e7d7      	b.n	80396 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   803e6:	461e      	mov	r6, r3
   803e8:	4c0a      	ldr	r4, [pc, #40]	; (80414 <usart_serial_getchar+0xa8>)
   803ea:	a901      	add	r1, sp, #4
   803ec:	4630      	mov	r0, r6
   803ee:	47a0      	blx	r4
   803f0:	2800      	cmp	r0, #0
   803f2:	d1fa      	bne.n	803ea <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   803f4:	9b01      	ldr	r3, [sp, #4]
   803f6:	702b      	strb	r3, [r5, #0]
}
   803f8:	e7cd      	b.n	80396 <usart_serial_getchar+0x2a>
   803fa:	bf00      	nop
   803fc:	400e0800 	.word	0x400e0800
   80400:	40098000 	.word	0x40098000
   80404:	4009c000 	.word	0x4009c000
   80408:	400a0000 	.word	0x400a0000
   8040c:	400a4000 	.word	0x400a4000
   80410:	0008032f 	.word	0x0008032f
   80414:	00080355 	.word	0x00080355

00080418 <usart_serial_putchar>:
{
   80418:	b570      	push	{r4, r5, r6, lr}
   8041a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   8041c:	4b1e      	ldr	r3, [pc, #120]	; (80498 <usart_serial_putchar+0x80>)
   8041e:	4298      	cmp	r0, r3
   80420:	d00d      	beq.n	8043e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80422:	4b1e      	ldr	r3, [pc, #120]	; (8049c <usart_serial_putchar+0x84>)
   80424:	4298      	cmp	r0, r3
   80426:	d013      	beq.n	80450 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80428:	4b1d      	ldr	r3, [pc, #116]	; (804a0 <usart_serial_putchar+0x88>)
   8042a:	4298      	cmp	r0, r3
   8042c:	d019      	beq.n	80462 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8042e:	4b1d      	ldr	r3, [pc, #116]	; (804a4 <usart_serial_putchar+0x8c>)
   80430:	4298      	cmp	r0, r3
   80432:	d01f      	beq.n	80474 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80434:	4b1c      	ldr	r3, [pc, #112]	; (804a8 <usart_serial_putchar+0x90>)
   80436:	4298      	cmp	r0, r3
   80438:	d025      	beq.n	80486 <usart_serial_putchar+0x6e>
	return 0;
   8043a:	2000      	movs	r0, #0
}
   8043c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8043e:	461e      	mov	r6, r3
   80440:	4d1a      	ldr	r5, [pc, #104]	; (804ac <usart_serial_putchar+0x94>)
   80442:	4621      	mov	r1, r4
   80444:	4630      	mov	r0, r6
   80446:	47a8      	blx	r5
   80448:	2800      	cmp	r0, #0
   8044a:	d1fa      	bne.n	80442 <usart_serial_putchar+0x2a>
		return 1;
   8044c:	2001      	movs	r0, #1
   8044e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80450:	461e      	mov	r6, r3
   80452:	4d17      	ldr	r5, [pc, #92]	; (804b0 <usart_serial_putchar+0x98>)
   80454:	4621      	mov	r1, r4
   80456:	4630      	mov	r0, r6
   80458:	47a8      	blx	r5
   8045a:	2800      	cmp	r0, #0
   8045c:	d1fa      	bne.n	80454 <usart_serial_putchar+0x3c>
		return 1;
   8045e:	2001      	movs	r0, #1
   80460:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80462:	461e      	mov	r6, r3
   80464:	4d12      	ldr	r5, [pc, #72]	; (804b0 <usart_serial_putchar+0x98>)
   80466:	4621      	mov	r1, r4
   80468:	4630      	mov	r0, r6
   8046a:	47a8      	blx	r5
   8046c:	2800      	cmp	r0, #0
   8046e:	d1fa      	bne.n	80466 <usart_serial_putchar+0x4e>
		return 1;
   80470:	2001      	movs	r0, #1
   80472:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80474:	461e      	mov	r6, r3
   80476:	4d0e      	ldr	r5, [pc, #56]	; (804b0 <usart_serial_putchar+0x98>)
   80478:	4621      	mov	r1, r4
   8047a:	4630      	mov	r0, r6
   8047c:	47a8      	blx	r5
   8047e:	2800      	cmp	r0, #0
   80480:	d1fa      	bne.n	80478 <usart_serial_putchar+0x60>
		return 1;
   80482:	2001      	movs	r0, #1
   80484:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80486:	461e      	mov	r6, r3
   80488:	4d09      	ldr	r5, [pc, #36]	; (804b0 <usart_serial_putchar+0x98>)
   8048a:	4621      	mov	r1, r4
   8048c:	4630      	mov	r0, r6
   8048e:	47a8      	blx	r5
   80490:	2800      	cmp	r0, #0
   80492:	d1fa      	bne.n	8048a <usart_serial_putchar+0x72>
		return 1;
   80494:	2001      	movs	r0, #1
   80496:	bd70      	pop	{r4, r5, r6, pc}
   80498:	400e0800 	.word	0x400e0800
   8049c:	40098000 	.word	0x40098000
   804a0:	4009c000 	.word	0x4009c000
   804a4:	400a0000 	.word	0x400a0000
   804a8:	400a4000 	.word	0x400a4000
   804ac:	0008031f 	.word	0x0008031f
   804b0:	00080341 	.word	0x00080341

000804b4 <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   804b4:	b538      	push	{r3, r4, r5, lr}
	sysclk_init();
   804b6:	4b19      	ldr	r3, [pc, #100]	; (8051c <misc_init+0x68>)
   804b8:	4798      	blx	r3
	board_init();
   804ba:	4b19      	ldr	r3, [pc, #100]	; (80520 <misc_init+0x6c>)
   804bc:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   804be:	200b      	movs	r0, #11
   804c0:	4c18      	ldr	r4, [pc, #96]	; (80524 <misc_init+0x70>)
   804c2:	47a0      	blx	r4
   804c4:	200c      	movs	r0, #12
   804c6:	47a0      	blx	r4
   804c8:	200d      	movs	r0, #13
   804ca:	47a0      	blx	r4
   804cc:	200e      	movs	r0, #14
   804ce:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804d0:	4815      	ldr	r0, [pc, #84]	; (80528 <misc_init+0x74>)
   804d2:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
   804d6:	6104      	str	r4, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804d8:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804dc:	4b13      	ldr	r3, [pc, #76]	; (8052c <misc_init+0x78>)
   804de:	f44f 7180 	mov.w	r1, #256	; 0x100
   804e2:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804e4:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804e8:	2280      	movs	r2, #128	; 0x80
   804ea:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804f0:	4a0f      	ldr	r2, [pc, #60]	; (80530 <misc_init+0x7c>)
   804f2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   804f6:	6115      	str	r5, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804f8:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   804fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
   80500:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
   80504:	6155      	str	r5, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80506:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8050a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
   8050e:	6155      	str	r5, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80510:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80514:	6344      	str	r4, [r0, #52]	; 0x34
   80516:	6359      	str	r1, [r3, #52]	; 0x34
	ioport_set_pin_level(pin13, LOW);
	ioport_set_pin_level(pin12, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   80518:	2000      	movs	r0, #0
   8051a:	bd38      	pop	{r3, r4, r5, pc}
   8051c:	00081cc1 	.word	0x00081cc1
   80520:	00081d25 	.word	0x00081d25
   80524:	000821d9 	.word	0x000821d9
   80528:	400e1000 	.word	0x400e1000
   8052c:	400e1400 	.word	0x400e1400
   80530:	400e0e00 	.word	0x400e0e00

00080534 <rtos_init>:
* Function: rtos_init
* -------------------
* initializes FreeRTOS by creating a number of tasks and starting the scheduler.
*/
int rtos_init (void)
{
   80534:	b570      	push	{r4, r5, r6, lr}
   80536:	b084      	sub	sp, #16
	/* -------------------------------- Used for testing purposes ------------------------------------- */
	xTaskCreate(task1, (const signed char * const) "task1", TASK_1_STACK_SIZE, NULL, TASK_1_PRIORITY, NULL);
   80538:	2400      	movs	r4, #0
   8053a:	9403      	str	r4, [sp, #12]
   8053c:	9402      	str	r4, [sp, #8]
   8053e:	9401      	str	r4, [sp, #4]
   80540:	2601      	movs	r6, #1
   80542:	9600      	str	r6, [sp, #0]
   80544:	4623      	mov	r3, r4
   80546:	f44f 7200 	mov.w	r2, #512	; 0x200
   8054a:	4909      	ldr	r1, [pc, #36]	; (80570 <rtos_init+0x3c>)
   8054c:	4809      	ldr	r0, [pc, #36]	; (80574 <rtos_init+0x40>)
   8054e:	4d0a      	ldr	r5, [pc, #40]	; (80578 <rtos_init+0x44>)
   80550:	47a8      	blx	r5
	xTaskCreate(task2, (const signed char * const) "task2", TASK_2_STACK_SIZE, NULL, TASK_2_PRIORITY, NULL);
   80552:	9403      	str	r4, [sp, #12]
   80554:	9402      	str	r4, [sp, #8]
   80556:	9401      	str	r4, [sp, #4]
   80558:	9600      	str	r6, [sp, #0]
   8055a:	4623      	mov	r3, r4
   8055c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80560:	4906      	ldr	r1, [pc, #24]	; (8057c <rtos_init+0x48>)
   80562:	4807      	ldr	r0, [pc, #28]	; (80580 <rtos_init+0x4c>)
   80564:	47a8      	blx	r5
	/* ------------------------------------------------------------------------------------------------ */
	
	vTaskStartScheduler();
   80566:	4b07      	ldr	r3, [pc, #28]	; (80584 <rtos_init+0x50>)
   80568:	4798      	blx	r3
	return 0;
}
   8056a:	4620      	mov	r0, r4
   8056c:	b004      	add	sp, #16
   8056e:	bd70      	pop	{r4, r5, r6, pc}
   80570:	000853a8 	.word	0x000853a8
   80574:	00080695 	.word	0x00080695
   80578:	00081001 	.word	0x00081001
   8057c:	000853b0 	.word	0x000853b0
   80580:	00080211 	.word	0x00080211
   80584:	00081205 	.word	0x00081205

00080588 <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   80588:	b530      	push	{r4, r5, lr}
   8058a:	b085      	sub	sp, #20
   8058c:	2008      	movs	r0, #8
   8058e:	4d15      	ldr	r5, [pc, #84]	; (805e4 <console_init+0x5c>)
   80590:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80592:	4c15      	ldr	r4, [pc, #84]	; (805e8 <console_init+0x60>)
   80594:	4b15      	ldr	r3, [pc, #84]	; (805ec <console_init+0x64>)
   80596:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80598:	4a15      	ldr	r2, [pc, #84]	; (805f0 <console_init+0x68>)
   8059a:	4b16      	ldr	r3, [pc, #88]	; (805f4 <console_init+0x6c>)
   8059c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8059e:	4a16      	ldr	r2, [pc, #88]	; (805f8 <console_init+0x70>)
   805a0:	4b16      	ldr	r3, [pc, #88]	; (805fc <console_init+0x74>)
   805a2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   805a4:	4b16      	ldr	r3, [pc, #88]	; (80600 <console_init+0x78>)
   805a6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   805a8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   805ac:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   805ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805b2:	9303      	str	r3, [sp, #12]
   805b4:	2008      	movs	r0, #8
   805b6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   805b8:	a901      	add	r1, sp, #4
   805ba:	4620      	mov	r0, r4
   805bc:	4b11      	ldr	r3, [pc, #68]	; (80604 <console_init+0x7c>)
   805be:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805c0:	4d11      	ldr	r5, [pc, #68]	; (80608 <console_init+0x80>)
   805c2:	682b      	ldr	r3, [r5, #0]
   805c4:	2100      	movs	r1, #0
   805c6:	6898      	ldr	r0, [r3, #8]
   805c8:	4c10      	ldr	r4, [pc, #64]	; (8060c <console_init+0x84>)
   805ca:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805cc:	682b      	ldr	r3, [r5, #0]
   805ce:	2100      	movs	r1, #0
   805d0:	6858      	ldr	r0, [r3, #4]
   805d2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   805d4:	480e      	ldr	r0, [pc, #56]	; (80610 <console_init+0x88>)
   805d6:	4c0f      	ldr	r4, [pc, #60]	; (80614 <console_init+0x8c>)
   805d8:	47a0      	blx	r4
	printf("=============\n");
   805da:	480f      	ldr	r0, [pc, #60]	; (80618 <console_init+0x90>)
   805dc:	47a0      	blx	r4
	return 0;
}
   805de:	2000      	movs	r0, #0
   805e0:	b005      	add	sp, #20
   805e2:	bd30      	pop	{r4, r5, pc}
   805e4:	000821d9 	.word	0x000821d9
   805e8:	400e0800 	.word	0x400e0800
   805ec:	2007acfc 	.word	0x2007acfc
   805f0:	00080419 	.word	0x00080419
   805f4:	2007acf8 	.word	0x2007acf8
   805f8:	0008036d 	.word	0x0008036d
   805fc:	2007acf4 	.word	0x2007acf4
   80600:	0501bd00 	.word	0x0501bd00
   80604:	000802e9 	.word	0x000802e9
   80608:	2007013c 	.word	0x2007013c
   8060c:	00082659 	.word	0x00082659
   80610:	00085388 	.word	0x00085388
   80614:	000824a9 	.word	0x000824a9
   80618:	00085398 	.word	0x00085398

0008061c <interrupt_init>:

/* author Gustav Dahlman */
int interrupt_init(void) 
{
   8061c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8061e:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOC);
   80620:	200d      	movs	r0, #13
   80622:	4b14      	ldr	r3, [pc, #80]	; (80674 <interrupt_init+0x58>)
   80624:	4798      	blx	r3
	
	/* Interrupt 1 */ 
	pio_set_input(PIOC, pin8, NULL);
   80626:	4c14      	ldr	r4, [pc, #80]	; (80678 <interrupt_init+0x5c>)
   80628:	2200      	movs	r2, #0
   8062a:	2156      	movs	r1, #86	; 0x56
   8062c:	4620      	mov	r0, r4
   8062e:	4f13      	ldr	r7, [pc, #76]	; (8067c <interrupt_init+0x60>)
   80630:	47b8      	blx	r7
	//pio_handler_set(PIOC, ID_PIOC, pin8, PIO_IT_RE_OR_HL, ISR1);
	pio_handler_set(PIOC, ID_PIOC, pin8, PIO_IT_EDGE, ISR1);
   80632:	4b13      	ldr	r3, [pc, #76]	; (80680 <interrupt_init+0x64>)
   80634:	9300      	str	r3, [sp, #0]
   80636:	2340      	movs	r3, #64	; 0x40
   80638:	2256      	movs	r2, #86	; 0x56
   8063a:	210d      	movs	r1, #13
   8063c:	4620      	mov	r0, r4
   8063e:	4e11      	ldr	r6, [pc, #68]	; (80684 <interrupt_init+0x68>)
   80640:	47b0      	blx	r6
	pio_enable_interrupt(PIOC, pin8);
   80642:	2156      	movs	r1, #86	; 0x56
   80644:	4620      	mov	r0, r4
   80646:	4d10      	ldr	r5, [pc, #64]	; (80688 <interrupt_init+0x6c>)
   80648:	47a8      	blx	r5
	/* ------------ */
	
	/* Interrupt 2 */ 
	//pio_set_input(PIOC, pin7, PIO_PULLUP);
	pio_set_input(PIOC, pin7, NULL);
   8064a:	2200      	movs	r2, #0
   8064c:	2157      	movs	r1, #87	; 0x57
   8064e:	4620      	mov	r0, r4
   80650:	47b8      	blx	r7
	pio_handler_set(PIOC, ID_PIOC, pin7, PIO_IT_EDGE, ISR2);
   80652:	4b0e      	ldr	r3, [pc, #56]	; (8068c <interrupt_init+0x70>)
   80654:	9300      	str	r3, [sp, #0]
   80656:	2340      	movs	r3, #64	; 0x40
   80658:	2257      	movs	r2, #87	; 0x57
   8065a:	210d      	movs	r1, #13
   8065c:	4620      	mov	r0, r4
   8065e:	47b0      	blx	r6
	pio_enable_interrupt(PIOC, pin7);
   80660:	2157      	movs	r1, #87	; 0x57
   80662:	4620      	mov	r0, r4
   80664:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80666:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8066a:	4b09      	ldr	r3, [pc, #36]	; (80690 <interrupt_init+0x74>)
   8066c:	601a      	str	r2, [r3, #0]
	/* ------------ */
	
	NVIC_EnableIRQ(PIOC_IRQn);
	
	return 0;
}
   8066e:	2000      	movs	r0, #0
   80670:	b003      	add	sp, #12
   80672:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80674:	000821d9 	.word	0x000821d9
   80678:	400e1200 	.word	0x400e1200
   8067c:	00081de3 	.word	0x00081de3
   80680:	00080161 	.word	0x00080161
   80684:	00082031 	.word	0x00082031
   80688:	00081e69 	.word	0x00081e69
   8068c:	000801bd 	.word	0x000801bd
   80690:	e000e100 	.word	0xe000e100

00080694 <task1>:
* Function: task1
* -------------------
* Performs an action every xTimeT1 milliseconds
*/
void task1(void *pvParamters)
{
   80694:	b570      	push	{r4, r5, r6, lr}
   80696:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = xTimeT1/portTICK_RATE_MS; /* set ticks (xTimeT1) in milliseconds */
	xLastWakeTime = xTaskGetTickCount();					/* the count of ticks since vTaskStartScheduler was called */
   80698:	4b0e      	ldr	r3, [pc, #56]	; (806d4 <task1+0x40>)
   8069a:	4798      	blx	r3
   8069c:	9001      	str	r0, [sp, #4]
	
	while (1) /* the task must be looping infinitely */
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* constant period, independent of execution time */
   8069e:	4e0e      	ldr	r6, [pc, #56]	; (806d8 <task1+0x44>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806a0:	4d0e      	ldr	r5, [pc, #56]	; (806dc <task1+0x48>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806a2:	4c0f      	ldr	r4, [pc, #60]	; (806e0 <task1+0x4c>)
   806a4:	e002      	b.n	806ac <task1+0x18>
   806a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   806aa:	636b      	str	r3, [r5, #52]	; 0x34
   806ac:	2132      	movs	r1, #50	; 0x32
   806ae:	a801      	add	r0, sp, #4
   806b0:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   806b6:	632b      	str	r3, [r5, #48]	; 0x30
		//vTaskDelay(50);								 /* no constant period, dependent of execution time */ 
		
		
		/* ----------------------------------- simulate a function/task that is working ----------------------------------- */
		ioport_set_pin_level(pin13, HIGH); /* set pin to HIGH to indicate that the task has entered the running state */
		volatile int j=0;
   806b8:	2300      	movs	r3, #0
   806ba:	9300      	str	r3, [sp, #0]
   806bc:	f242 7210 	movw	r2, #10000	; 0x2710
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806c0:	f44f 7180 	mov.w	r1, #256	; 0x100
   806c4:	6361      	str	r1, [r4, #52]	; 0x34
		for (int i=0; i < 10000; i++)
		{
			ioport_set_pin_level(pin12, LOW);
			j++;
   806c6:	9b00      	ldr	r3, [sp, #0]
   806c8:	3301      	adds	r3, #1
   806ca:	9300      	str	r3, [sp, #0]
		for (int i=0; i < 10000; i++)
   806cc:	3a01      	subs	r2, #1
   806ce:	d1f9      	bne.n	806c4 <task1+0x30>
   806d0:	e7e9      	b.n	806a6 <task1+0x12>
   806d2:	bf00      	nop
   806d4:	0008127d 	.word	0x0008127d
   806d8:	000814c5 	.word	0x000814c5
   806dc:	400e1000 	.word	0x400e1000
   806e0:	400e1400 	.word	0x400e1400

000806e4 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   806e4:	f100 0308 	add.w	r3, r0, #8
   806e8:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   806ea:	f04f 32ff 	mov.w	r2, #4294967295
   806ee:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   806f0:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   806f2:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   806f4:	2300      	movs	r3, #0
   806f6:	6003      	str	r3, [r0, #0]
   806f8:	4770      	bx	lr

000806fa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   806fa:	2300      	movs	r3, #0
   806fc:	6103      	str	r3, [r0, #16]
   806fe:	4770      	bx	lr

00080700 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80700:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80702:	685a      	ldr	r2, [r3, #4]
   80704:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80706:	6842      	ldr	r2, [r0, #4]
   80708:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8070a:	685a      	ldr	r2, [r3, #4]
   8070c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8070e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80710:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80712:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80714:	6803      	ldr	r3, [r0, #0]
   80716:	3301      	adds	r3, #1
   80718:	6003      	str	r3, [r0, #0]
   8071a:	4770      	bx	lr

0008071c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8071c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8071e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80720:	f1b4 3fff 	cmp.w	r4, #4294967295
   80724:	d015      	beq.n	80752 <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80726:	f100 0308 	add.w	r3, r0, #8
   8072a:	68c2      	ldr	r2, [r0, #12]
   8072c:	6812      	ldr	r2, [r2, #0]
   8072e:	4294      	cmp	r4, r2
   80730:	d304      	bcc.n	8073c <vListInsert+0x20>
   80732:	685b      	ldr	r3, [r3, #4]
   80734:	685a      	ldr	r2, [r3, #4]
   80736:	6812      	ldr	r2, [r2, #0]
   80738:	4294      	cmp	r4, r2
   8073a:	d2fa      	bcs.n	80732 <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   8073c:	685a      	ldr	r2, [r3, #4]
   8073e:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80740:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80742:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80744:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80746:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80748:	6803      	ldr	r3, [r0, #0]
   8074a:	3301      	adds	r3, #1
   8074c:	6003      	str	r3, [r0, #0]
}
   8074e:	bc10      	pop	{r4}
   80750:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   80752:	6903      	ldr	r3, [r0, #16]
   80754:	e7f2      	b.n	8073c <vListInsert+0x20>

00080756 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80756:	6843      	ldr	r3, [r0, #4]
   80758:	6882      	ldr	r2, [r0, #8]
   8075a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8075c:	6883      	ldr	r3, [r0, #8]
   8075e:	6842      	ldr	r2, [r0, #4]
   80760:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80762:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80764:	685a      	ldr	r2, [r3, #4]
   80766:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80768:	bf04      	itt	eq
   8076a:	6882      	ldreq	r2, [r0, #8]
   8076c:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8076e:	2200      	movs	r2, #0
   80770:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80772:	681a      	ldr	r2, [r3, #0]
   80774:	3a01      	subs	r2, #1
   80776:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80778:	6818      	ldr	r0, [r3, #0]
}
   8077a:	4770      	bx	lr

0008077c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   8077c:	4803      	ldr	r0, [pc, #12]	; (8078c <prvPortStartFirstTask+0x10>)
   8077e:	6800      	ldr	r0, [r0, #0]
   80780:	6800      	ldr	r0, [r0, #0]
   80782:	f380 8808 	msr	MSP, r0
   80786:	b662      	cpsie	i
   80788:	df00      	svc	0
   8078a:	bf00      	nop
   8078c:	e000ed08 	.word	0xe000ed08

00080790 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80794:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80798:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   8079c:	2300      	movs	r3, #0
   8079e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   807a2:	f840 2c20 	str.w	r2, [r0, #-32]
}
   807a6:	3840      	subs	r0, #64	; 0x40
   807a8:	4770      	bx	lr
	...

000807ac <SVC_Handler>:
	__asm volatile (
   807ac:	4b06      	ldr	r3, [pc, #24]	; (807c8 <pxCurrentTCBConst2>)
   807ae:	6819      	ldr	r1, [r3, #0]
   807b0:	6808      	ldr	r0, [r1, #0]
   807b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   807b6:	f380 8809 	msr	PSP, r0
   807ba:	f04f 0000 	mov.w	r0, #0
   807be:	f380 8811 	msr	BASEPRI, r0
   807c2:	f04e 0e0d 	orr.w	lr, lr, #13
   807c6:	4770      	bx	lr

000807c8 <pxCurrentTCBConst2>:
   807c8:	2007ab10 	.word	0x2007ab10

000807cc <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   807cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   807d0:	4b01      	ldr	r3, [pc, #4]	; (807d8 <vPortYieldFromISR+0xc>)
   807d2:	601a      	str	r2, [r3, #0]
   807d4:	4770      	bx	lr
   807d6:	bf00      	nop
   807d8:	e000ed04 	.word	0xe000ed04

000807dc <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   807dc:	f3ef 8011 	mrs	r0, BASEPRI
   807e0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   807e4:	f381 8811 	msr	BASEPRI, r1
   807e8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   807ea:	2000      	movs	r0, #0

000807ec <vPortEnterCritical>:
{
   807ec:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   807ee:	4b03      	ldr	r3, [pc, #12]	; (807fc <vPortEnterCritical+0x10>)
   807f0:	4798      	blx	r3
	uxCriticalNesting++;
   807f2:	4a03      	ldr	r2, [pc, #12]	; (80800 <vPortEnterCritical+0x14>)
   807f4:	6813      	ldr	r3, [r2, #0]
   807f6:	3301      	adds	r3, #1
   807f8:	6013      	str	r3, [r2, #0]
   807fa:	bd08      	pop	{r3, pc}
   807fc:	000807dd 	.word	0x000807dd
   80800:	2007012c 	.word	0x2007012c

00080804 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80804:	f380 8811 	msr	BASEPRI, r0
   80808:	4770      	bx	lr
	...

0008080c <vPortExitCritical>:
{
   8080c:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   8080e:	4a05      	ldr	r2, [pc, #20]	; (80824 <vPortExitCritical+0x18>)
   80810:	6813      	ldr	r3, [r2, #0]
   80812:	3b01      	subs	r3, #1
   80814:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80816:	b103      	cbz	r3, 8081a <vPortExitCritical+0xe>
   80818:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   8081a:	2000      	movs	r0, #0
   8081c:	4b02      	ldr	r3, [pc, #8]	; (80828 <vPortExitCritical+0x1c>)
   8081e:	4798      	blx	r3
}
   80820:	e7fa      	b.n	80818 <vPortExitCritical+0xc>
   80822:	bf00      	nop
   80824:	2007012c 	.word	0x2007012c
   80828:	00080805 	.word	0x00080805

0008082c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8082c:	f3ef 8009 	mrs	r0, PSP
   80830:	4b0c      	ldr	r3, [pc, #48]	; (80864 <pxCurrentTCBConst>)
   80832:	681a      	ldr	r2, [r3, #0]
   80834:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80838:	6010      	str	r0, [r2, #0]
   8083a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8083e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80842:	f380 8811 	msr	BASEPRI, r0
   80846:	f000 fec7 	bl	815d8 <vTaskSwitchContext>
   8084a:	f04f 0000 	mov.w	r0, #0
   8084e:	f380 8811 	msr	BASEPRI, r0
   80852:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80856:	6819      	ldr	r1, [r3, #0]
   80858:	6808      	ldr	r0, [r1, #0]
   8085a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8085e:	f380 8809 	msr	PSP, r0
   80862:	4770      	bx	lr

00080864 <pxCurrentTCBConst>:
   80864:	2007ab10 	.word	0x2007ab10

00080868 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80868:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8086a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8086e:	4b05      	ldr	r3, [pc, #20]	; (80884 <SysTick_Handler+0x1c>)
   80870:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80872:	4b05      	ldr	r3, [pc, #20]	; (80888 <SysTick_Handler+0x20>)
   80874:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80876:	4b05      	ldr	r3, [pc, #20]	; (8088c <SysTick_Handler+0x24>)
   80878:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8087a:	2000      	movs	r0, #0
   8087c:	4b04      	ldr	r3, [pc, #16]	; (80890 <SysTick_Handler+0x28>)
   8087e:	4798      	blx	r3
   80880:	bd08      	pop	{r3, pc}
   80882:	bf00      	nop
   80884:	e000ed04 	.word	0xe000ed04
   80888:	000807dd 	.word	0x000807dd
   8088c:	0008129d 	.word	0x0008129d
   80890:	00080805 	.word	0x00080805

00080894 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80894:	4a03      	ldr	r2, [pc, #12]	; (808a4 <vPortSetupTimerInterrupt+0x10>)
   80896:	4b04      	ldr	r3, [pc, #16]	; (808a8 <vPortSetupTimerInterrupt+0x14>)
   80898:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   8089a:	2207      	movs	r2, #7
   8089c:	3b04      	subs	r3, #4
   8089e:	601a      	str	r2, [r3, #0]
   808a0:	4770      	bx	lr
   808a2:	bf00      	nop
   808a4:	0001481f 	.word	0x0001481f
   808a8:	e000e014 	.word	0xe000e014

000808ac <xPortStartScheduler>:
{
   808ac:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   808ae:	4b09      	ldr	r3, [pc, #36]	; (808d4 <xPortStartScheduler+0x28>)
   808b0:	681a      	ldr	r2, [r3, #0]
   808b2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   808b6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   808b8:	681a      	ldr	r2, [r3, #0]
   808ba:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   808be:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   808c0:	4b05      	ldr	r3, [pc, #20]	; (808d8 <xPortStartScheduler+0x2c>)
   808c2:	4798      	blx	r3
	uxCriticalNesting = 0;
   808c4:	2400      	movs	r4, #0
   808c6:	4b05      	ldr	r3, [pc, #20]	; (808dc <xPortStartScheduler+0x30>)
   808c8:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   808ca:	4b05      	ldr	r3, [pc, #20]	; (808e0 <xPortStartScheduler+0x34>)
   808cc:	4798      	blx	r3
}
   808ce:	4620      	mov	r0, r4
   808d0:	bd10      	pop	{r4, pc}
   808d2:	bf00      	nop
   808d4:	e000ed20 	.word	0xe000ed20
   808d8:	00080895 	.word	0x00080895
   808dc:	2007012c 	.word	0x2007012c
   808e0:	0008077d 	.word	0x0008077d

000808e4 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   808e4:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   808e6:	4a13      	ldr	r2, [pc, #76]	; (80934 <prvInsertBlockIntoFreeList+0x50>)
   808e8:	e000      	b.n	808ec <prvInsertBlockIntoFreeList+0x8>
   808ea:	461a      	mov	r2, r3
   808ec:	6813      	ldr	r3, [r2, #0]
   808ee:	4283      	cmp	r3, r0
   808f0:	d3fb      	bcc.n	808ea <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   808f2:	6851      	ldr	r1, [r2, #4]
   808f4:	1854      	adds	r4, r2, r1
   808f6:	42a0      	cmp	r0, r4
   808f8:	d009      	beq.n	8090e <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   808fa:	6841      	ldr	r1, [r0, #4]
   808fc:	1844      	adds	r4, r0, r1
   808fe:	42a3      	cmp	r3, r4
   80900:	d00a      	beq.n	80918 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80902:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80904:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80906:	bf18      	it	ne
   80908:	6010      	strne	r0, [r2, #0]
	}
}
   8090a:	bc10      	pop	{r4}
   8090c:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8090e:	6840      	ldr	r0, [r0, #4]
   80910:	4401      	add	r1, r0
   80912:	6051      	str	r1, [r2, #4]
   80914:	4610      	mov	r0, r2
   80916:	e7f0      	b.n	808fa <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80918:	4c07      	ldr	r4, [pc, #28]	; (80938 <prvInsertBlockIntoFreeList+0x54>)
   8091a:	6824      	ldr	r4, [r4, #0]
   8091c:	42a3      	cmp	r3, r4
   8091e:	d006      	beq.n	8092e <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80920:	685b      	ldr	r3, [r3, #4]
   80922:	4419      	add	r1, r3
   80924:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80926:	6813      	ldr	r3, [r2, #0]
   80928:	681b      	ldr	r3, [r3, #0]
   8092a:	6003      	str	r3, [r0, #0]
   8092c:	e7ea      	b.n	80904 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   8092e:	6003      	str	r3, [r0, #0]
   80930:	e7e8      	b.n	80904 <prvInsertBlockIntoFreeList+0x20>
   80932:	bf00      	nop
   80934:	2007ab08 	.word	0x2007ab08
   80938:	20070b04 	.word	0x20070b04

0008093c <pvPortMalloc>:
{
   8093c:	b538      	push	{r3, r4, r5, lr}
   8093e:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80940:	4b2a      	ldr	r3, [pc, #168]	; (809ec <pvPortMalloc+0xb0>)
   80942:	4798      	blx	r3
		if( pxEnd == NULL )
   80944:	4b2a      	ldr	r3, [pc, #168]	; (809f0 <pvPortMalloc+0xb4>)
   80946:	681b      	ldr	r3, [r3, #0]
   80948:	b18b      	cbz	r3, 8096e <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   8094a:	2c00      	cmp	r4, #0
   8094c:	d047      	beq.n	809de <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   8094e:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80952:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80956:	bf1c      	itt	ne
   80958:	f022 0207 	bicne.w	r2, r2, #7
   8095c:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8095e:	1e51      	subs	r1, r2, #1
   80960:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80964:	4299      	cmp	r1, r3
   80966:	d83c      	bhi.n	809e2 <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   80968:	4922      	ldr	r1, [pc, #136]	; (809f4 <pvPortMalloc+0xb8>)
   8096a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8096c:	e016      	b.n	8099c <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8096e:	4a21      	ldr	r2, [pc, #132]	; (809f4 <pvPortMalloc+0xb8>)
   80970:	4b21      	ldr	r3, [pc, #132]	; (809f8 <pvPortMalloc+0xbc>)
   80972:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80974:	2100      	movs	r1, #0
   80976:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   80978:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   8097c:	1898      	adds	r0, r3, r2
   8097e:	4d1c      	ldr	r5, [pc, #112]	; (809f0 <pvPortMalloc+0xb4>)
   80980:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   80982:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80986:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80988:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   8098a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   8098c:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8098e:	4a1b      	ldr	r2, [pc, #108]	; (809fc <pvPortMalloc+0xc0>)
   80990:	6813      	ldr	r3, [r2, #0]
   80992:	3b10      	subs	r3, #16
   80994:	6013      	str	r3, [r2, #0]
   80996:	e7d8      	b.n	8094a <pvPortMalloc+0xe>
   80998:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   8099a:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   8099c:	6863      	ldr	r3, [r4, #4]
   8099e:	429a      	cmp	r2, r3
   809a0:	d902      	bls.n	809a8 <pvPortMalloc+0x6c>
   809a2:	6823      	ldr	r3, [r4, #0]
   809a4:	2b00      	cmp	r3, #0
   809a6:	d1f7      	bne.n	80998 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   809a8:	4b11      	ldr	r3, [pc, #68]	; (809f0 <pvPortMalloc+0xb4>)
   809aa:	681b      	ldr	r3, [r3, #0]
   809ac:	429c      	cmp	r4, r3
   809ae:	d01a      	beq.n	809e6 <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   809b0:	680d      	ldr	r5, [r1, #0]
   809b2:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   809b4:	6823      	ldr	r3, [r4, #0]
   809b6:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   809b8:	6863      	ldr	r3, [r4, #4]
   809ba:	1a9b      	subs	r3, r3, r2
   809bc:	2b20      	cmp	r3, #32
   809be:	d808      	bhi.n	809d2 <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   809c0:	4a0e      	ldr	r2, [pc, #56]	; (809fc <pvPortMalloc+0xc0>)
   809c2:	6813      	ldr	r3, [r2, #0]
   809c4:	6861      	ldr	r1, [r4, #4]
   809c6:	1a5b      	subs	r3, r3, r1
   809c8:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   809ca:	4b0d      	ldr	r3, [pc, #52]	; (80a00 <pvPortMalloc+0xc4>)
   809cc:	4798      	blx	r3
}
   809ce:	4628      	mov	r0, r5
   809d0:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   809d2:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   809d4:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   809d6:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   809d8:	4b0a      	ldr	r3, [pc, #40]	; (80a04 <pvPortMalloc+0xc8>)
   809da:	4798      	blx	r3
   809dc:	e7f0      	b.n	809c0 <pvPortMalloc+0x84>
void *pvReturn = NULL;
   809de:	2500      	movs	r5, #0
   809e0:	e7f3      	b.n	809ca <pvPortMalloc+0x8e>
   809e2:	2500      	movs	r5, #0
   809e4:	e7f1      	b.n	809ca <pvPortMalloc+0x8e>
   809e6:	2500      	movs	r5, #0
   809e8:	e7ef      	b.n	809ca <pvPortMalloc+0x8e>
   809ea:	bf00      	nop
   809ec:	0008126d 	.word	0x0008126d
   809f0:	20070b04 	.word	0x20070b04
   809f4:	2007ab08 	.word	0x2007ab08
   809f8:	20070b08 	.word	0x20070b08
   809fc:	20070130 	.word	0x20070130
   80a00:	000813c5 	.word	0x000813c5
   80a04:	000808e5 	.word	0x000808e5

00080a08 <vPortFree>:
	if( pv != NULL )
   80a08:	b180      	cbz	r0, 80a2c <vPortFree+0x24>
{
   80a0a:	b510      	push	{r4, lr}
   80a0c:	4604      	mov	r4, r0
		vTaskSuspendAll();
   80a0e:	4b08      	ldr	r3, [pc, #32]	; (80a30 <vPortFree+0x28>)
   80a10:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   80a12:	4a08      	ldr	r2, [pc, #32]	; (80a34 <vPortFree+0x2c>)
   80a14:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a18:	6811      	ldr	r1, [r2, #0]
   80a1a:	440b      	add	r3, r1
   80a1c:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80a1e:	f1a4 0010 	sub.w	r0, r4, #16
   80a22:	4b05      	ldr	r3, [pc, #20]	; (80a38 <vPortFree+0x30>)
   80a24:	4798      	blx	r3
		xTaskResumeAll();
   80a26:	4b05      	ldr	r3, [pc, #20]	; (80a3c <vPortFree+0x34>)
   80a28:	4798      	blx	r3
   80a2a:	bd10      	pop	{r4, pc}
   80a2c:	4770      	bx	lr
   80a2e:	bf00      	nop
   80a30:	0008126d 	.word	0x0008126d
   80a34:	20070130 	.word	0x20070130
   80a38:	000808e5 	.word	0x000808e5
   80a3c:	000813c5 	.word	0x000813c5

00080a40 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80a40:	b510      	push	{r4, lr}
   80a42:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80a44:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a46:	b95b      	cbnz	r3, 80a60 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80a48:	6803      	ldr	r3, [r0, #0]
   80a4a:	b11b      	cbz	r3, 80a54 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80a4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80a4e:	3301      	adds	r3, #1
   80a50:	63a3      	str	r3, [r4, #56]	; 0x38
   80a52:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80a54:	6840      	ldr	r0, [r0, #4]
   80a56:	4b12      	ldr	r3, [pc, #72]	; (80aa0 <prvCopyDataToQueue+0x60>)
   80a58:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80a5a:	2300      	movs	r3, #0
   80a5c:	6063      	str	r3, [r4, #4]
   80a5e:	e7f5      	b.n	80a4c <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   80a60:	b96a      	cbnz	r2, 80a7e <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80a62:	461a      	mov	r2, r3
   80a64:	6880      	ldr	r0, [r0, #8]
   80a66:	4b0f      	ldr	r3, [pc, #60]	; (80aa4 <prvCopyDataToQueue+0x64>)
   80a68:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80a6a:	68a3      	ldr	r3, [r4, #8]
   80a6c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80a6e:	4413      	add	r3, r2
   80a70:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80a72:	6862      	ldr	r2, [r4, #4]
   80a74:	4293      	cmp	r3, r2
   80a76:	d3e9      	bcc.n	80a4c <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80a78:	6823      	ldr	r3, [r4, #0]
   80a7a:	60a3      	str	r3, [r4, #8]
   80a7c:	e7e6      	b.n	80a4c <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80a7e:	461a      	mov	r2, r3
   80a80:	68c0      	ldr	r0, [r0, #12]
   80a82:	4b08      	ldr	r3, [pc, #32]	; (80aa4 <prvCopyDataToQueue+0x64>)
   80a84:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80a86:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80a88:	4252      	negs	r2, r2
   80a8a:	68e3      	ldr	r3, [r4, #12]
   80a8c:	4413      	add	r3, r2
   80a8e:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80a90:	6821      	ldr	r1, [r4, #0]
   80a92:	428b      	cmp	r3, r1
   80a94:	d2da      	bcs.n	80a4c <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80a96:	6863      	ldr	r3, [r4, #4]
   80a98:	441a      	add	r2, r3
   80a9a:	60e2      	str	r2, [r4, #12]
   80a9c:	e7d6      	b.n	80a4c <prvCopyDataToQueue+0xc>
   80a9e:	bf00      	nop
   80aa0:	00081905 	.word	0x00081905
   80aa4:	000824d1 	.word	0x000824d1

00080aa8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80aa8:	b538      	push	{r3, r4, r5, lr}
   80aaa:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80aac:	6800      	ldr	r0, [r0, #0]
   80aae:	b158      	cbz	r0, 80ac8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80ab2:	68dc      	ldr	r4, [r3, #12]
   80ab4:	4414      	add	r4, r2
   80ab6:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80ab8:	685d      	ldr	r5, [r3, #4]
   80aba:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80abc:	bf28      	it	cs
   80abe:	60d8      	strcs	r0, [r3, #12]
   80ac0:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80ac2:	68d9      	ldr	r1, [r3, #12]
   80ac4:	4b01      	ldr	r3, [pc, #4]	; (80acc <prvCopyDataFromQueue+0x24>)
   80ac6:	4798      	blx	r3
   80ac8:	bd38      	pop	{r3, r4, r5, pc}
   80aca:	bf00      	nop
   80acc:	000824d1 	.word	0x000824d1

00080ad0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80ad2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80ad4:	4b1f      	ldr	r3, [pc, #124]	; (80b54 <prvUnlockQueue+0x84>)
   80ad6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ada:	2b00      	cmp	r3, #0
   80adc:	dd14      	ble.n	80b08 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80ae0:	b193      	cbz	r3, 80b08 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80ae2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80ae6:	4d1c      	ldr	r5, [pc, #112]	; (80b58 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80ae8:	4f1c      	ldr	r7, [pc, #112]	; (80b5c <prvUnlockQueue+0x8c>)
   80aea:	e007      	b.n	80afc <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80aec:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80aee:	3b01      	subs	r3, #1
   80af0:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80af2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80af4:	2b00      	cmp	r3, #0
   80af6:	dd07      	ble.n	80b08 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80afa:	b12b      	cbz	r3, 80b08 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80afc:	4630      	mov	r0, r6
   80afe:	47a8      	blx	r5
   80b00:	2800      	cmp	r0, #0
   80b02:	d0f3      	beq.n	80aec <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   80b04:	47b8      	blx	r7
   80b06:	e7f1      	b.n	80aec <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80b08:	f04f 33ff 	mov.w	r3, #4294967295
   80b0c:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80b0e:	4b14      	ldr	r3, [pc, #80]	; (80b60 <prvUnlockQueue+0x90>)
   80b10:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80b12:	4b10      	ldr	r3, [pc, #64]	; (80b54 <prvUnlockQueue+0x84>)
   80b14:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b16:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b18:	2b00      	cmp	r3, #0
   80b1a:	dd14      	ble.n	80b46 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b1c:	6923      	ldr	r3, [r4, #16]
   80b1e:	b193      	cbz	r3, 80b46 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b20:	f104 0610 	add.w	r6, r4, #16
   80b24:	4d0c      	ldr	r5, [pc, #48]	; (80b58 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   80b26:	4f0d      	ldr	r7, [pc, #52]	; (80b5c <prvUnlockQueue+0x8c>)
   80b28:	e007      	b.n	80b3a <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   80b2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b2c:	3b01      	subs	r3, #1
   80b2e:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b30:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b32:	2b00      	cmp	r3, #0
   80b34:	dd07      	ble.n	80b46 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b36:	6923      	ldr	r3, [r4, #16]
   80b38:	b12b      	cbz	r3, 80b46 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b3a:	4630      	mov	r0, r6
   80b3c:	47a8      	blx	r5
   80b3e:	2800      	cmp	r0, #0
   80b40:	d0f3      	beq.n	80b2a <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   80b42:	47b8      	blx	r7
   80b44:	e7f1      	b.n	80b2a <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80b46:	f04f 33ff 	mov.w	r3, #4294967295
   80b4a:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80b4c:	4b04      	ldr	r3, [pc, #16]	; (80b60 <prvUnlockQueue+0x90>)
   80b4e:	4798      	blx	r3
   80b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b52:	bf00      	nop
   80b54:	000807ed 	.word	0x000807ed
   80b58:	0008171d 	.word	0x0008171d
   80b5c:	0008184d 	.word	0x0008184d
   80b60:	0008080d 	.word	0x0008080d

00080b64 <xQueueGenericReset>:
{
   80b64:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80b66:	b308      	cbz	r0, 80bac <xQueueGenericReset+0x48>
   80b68:	460d      	mov	r5, r1
   80b6a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80b6c:	4b17      	ldr	r3, [pc, #92]	; (80bcc <xQueueGenericReset+0x68>)
   80b6e:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80b70:	6822      	ldr	r2, [r4, #0]
   80b72:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80b74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b76:	fb03 f301 	mul.w	r3, r3, r1
   80b7a:	18d0      	adds	r0, r2, r3
   80b7c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80b7e:	2000      	movs	r0, #0
   80b80:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80b82:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80b84:	1a5b      	subs	r3, r3, r1
   80b86:	4413      	add	r3, r2
   80b88:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80b8a:	f04f 33ff 	mov.w	r3, #4294967295
   80b8e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80b90:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   80b92:	b995      	cbnz	r5, 80bba <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b94:	6923      	ldr	r3, [r4, #16]
   80b96:	b12b      	cbz	r3, 80ba4 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80b98:	f104 0010 	add.w	r0, r4, #16
   80b9c:	4b0c      	ldr	r3, [pc, #48]	; (80bd0 <xQueueGenericReset+0x6c>)
   80b9e:	4798      	blx	r3
   80ba0:	2801      	cmp	r0, #1
   80ba2:	d007      	beq.n	80bb4 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80ba4:	4b0b      	ldr	r3, [pc, #44]	; (80bd4 <xQueueGenericReset+0x70>)
   80ba6:	4798      	blx	r3
}
   80ba8:	2001      	movs	r0, #1
   80baa:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   80bac:	4b0a      	ldr	r3, [pc, #40]	; (80bd8 <xQueueGenericReset+0x74>)
   80bae:	4798      	blx	r3
   80bb0:	bf00      	nop
   80bb2:	e7fd      	b.n	80bb0 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   80bb4:	4b09      	ldr	r3, [pc, #36]	; (80bdc <xQueueGenericReset+0x78>)
   80bb6:	4798      	blx	r3
   80bb8:	e7f4      	b.n	80ba4 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80bba:	f104 0010 	add.w	r0, r4, #16
   80bbe:	4d08      	ldr	r5, [pc, #32]	; (80be0 <xQueueGenericReset+0x7c>)
   80bc0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80bc2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80bc6:	47a8      	blx	r5
   80bc8:	e7ec      	b.n	80ba4 <xQueueGenericReset+0x40>
   80bca:	bf00      	nop
   80bcc:	000807ed 	.word	0x000807ed
   80bd0:	0008171d 	.word	0x0008171d
   80bd4:	0008080d 	.word	0x0008080d
   80bd8:	000807dd 	.word	0x000807dd
   80bdc:	000807cd 	.word	0x000807cd
   80be0:	000806e5 	.word	0x000806e5

00080be4 <xQueueGenericCreate>:
{
   80be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80be6:	b1d8      	cbz	r0, 80c20 <xQueueGenericCreate+0x3c>
   80be8:	460d      	mov	r5, r1
   80bea:	4617      	mov	r7, r2
   80bec:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80bee:	2050      	movs	r0, #80	; 0x50
   80bf0:	4b0d      	ldr	r3, [pc, #52]	; (80c28 <xQueueGenericCreate+0x44>)
   80bf2:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80bf4:	4604      	mov	r4, r0
   80bf6:	b198      	cbz	r0, 80c20 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80bf8:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80bfc:	3001      	adds	r0, #1
   80bfe:	4b0a      	ldr	r3, [pc, #40]	; (80c28 <xQueueGenericCreate+0x44>)
   80c00:	4798      	blx	r3
   80c02:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80c04:	b148      	cbz	r0, 80c1a <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   80c06:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80c08:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80c0a:	2101      	movs	r1, #1
   80c0c:	4620      	mov	r0, r4
   80c0e:	4b07      	ldr	r3, [pc, #28]	; (80c2c <xQueueGenericCreate+0x48>)
   80c10:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   80c12:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   80c16:	4620      	mov	r0, r4
   80c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   80c1a:	4620      	mov	r0, r4
   80c1c:	4b04      	ldr	r3, [pc, #16]	; (80c30 <xQueueGenericCreate+0x4c>)
   80c1e:	4798      	blx	r3
	configASSERT( xReturn );
   80c20:	4b04      	ldr	r3, [pc, #16]	; (80c34 <xQueueGenericCreate+0x50>)
   80c22:	4798      	blx	r3
   80c24:	bf00      	nop
   80c26:	e7fd      	b.n	80c24 <xQueueGenericCreate+0x40>
   80c28:	0008093d 	.word	0x0008093d
   80c2c:	00080b65 	.word	0x00080b65
   80c30:	00080a09 	.word	0x00080a09
   80c34:	000807dd 	.word	0x000807dd

00080c38 <xQueueGenericSend>:
{
   80c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c3c:	b085      	sub	sp, #20
   80c3e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80c40:	b148      	cbz	r0, 80c56 <xQueueGenericSend+0x1e>
   80c42:	4688      	mov	r8, r1
   80c44:	4699      	mov	r9, r3
   80c46:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c48:	b149      	cbz	r1, 80c5e <xQueueGenericSend+0x26>
   80c4a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80c4c:	4e38      	ldr	r6, [pc, #224]	; (80d30 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   80c4e:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80d5c <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   80c52:	4d38      	ldr	r5, [pc, #224]	; (80d34 <xQueueGenericSend+0xfc>)
   80c54:	e02e      	b.n	80cb4 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   80c56:	4b38      	ldr	r3, [pc, #224]	; (80d38 <xQueueGenericSend+0x100>)
   80c58:	4798      	blx	r3
   80c5a:	bf00      	nop
   80c5c:	e7fd      	b.n	80c5a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80c60:	b11b      	cbz	r3, 80c6a <xQueueGenericSend+0x32>
   80c62:	4b35      	ldr	r3, [pc, #212]	; (80d38 <xQueueGenericSend+0x100>)
   80c64:	4798      	blx	r3
   80c66:	bf00      	nop
   80c68:	e7fd      	b.n	80c66 <xQueueGenericSend+0x2e>
   80c6a:	2700      	movs	r7, #0
   80c6c:	e7ee      	b.n	80c4c <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80c6e:	464a      	mov	r2, r9
   80c70:	4641      	mov	r1, r8
   80c72:	4620      	mov	r0, r4
   80c74:	4b31      	ldr	r3, [pc, #196]	; (80d3c <xQueueGenericSend+0x104>)
   80c76:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c78:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c7a:	b92b      	cbnz	r3, 80c88 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   80c7c:	4b2d      	ldr	r3, [pc, #180]	; (80d34 <xQueueGenericSend+0xfc>)
   80c7e:	4798      	blx	r3
				return pdPASS;
   80c80:	2001      	movs	r0, #1
}
   80c82:	b005      	add	sp, #20
   80c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80c88:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c8c:	4b2c      	ldr	r3, [pc, #176]	; (80d40 <xQueueGenericSend+0x108>)
   80c8e:	4798      	blx	r3
   80c90:	2801      	cmp	r0, #1
   80c92:	d1f3      	bne.n	80c7c <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80c94:	4b2b      	ldr	r3, [pc, #172]	; (80d44 <xQueueGenericSend+0x10c>)
   80c96:	4798      	blx	r3
   80c98:	e7f0      	b.n	80c7c <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80c9a:	4b26      	ldr	r3, [pc, #152]	; (80d34 <xQueueGenericSend+0xfc>)
   80c9c:	4798      	blx	r3
					return errQUEUE_FULL;
   80c9e:	2000      	movs	r0, #0
   80ca0:	e7ef      	b.n	80c82 <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   80ca2:	a802      	add	r0, sp, #8
   80ca4:	47d0      	blx	sl
   80ca6:	e00f      	b.n	80cc8 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80ca8:	4620      	mov	r0, r4
   80caa:	4b27      	ldr	r3, [pc, #156]	; (80d48 <xQueueGenericSend+0x110>)
   80cac:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80cae:	4b27      	ldr	r3, [pc, #156]	; (80d4c <xQueueGenericSend+0x114>)
   80cb0:	4798      	blx	r3
   80cb2:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80cb4:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80cb6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80cba:	429a      	cmp	r2, r3
   80cbc:	d3d7      	bcc.n	80c6e <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80cbe:	9b01      	ldr	r3, [sp, #4]
   80cc0:	2b00      	cmp	r3, #0
   80cc2:	d0ea      	beq.n	80c9a <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   80cc4:	2f00      	cmp	r7, #0
   80cc6:	d0ec      	beq.n	80ca2 <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   80cc8:	47a8      	blx	r5
		vTaskSuspendAll();
   80cca:	4b21      	ldr	r3, [pc, #132]	; (80d50 <xQueueGenericSend+0x118>)
   80ccc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80cce:	47b0      	blx	r6
   80cd0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80cd6:	bf04      	itt	eq
   80cd8:	2300      	moveq	r3, #0
   80cda:	6463      	streq	r3, [r4, #68]	; 0x44
   80cdc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80cde:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ce2:	bf04      	itt	eq
   80ce4:	2300      	moveq	r3, #0
   80ce6:	64a3      	streq	r3, [r4, #72]	; 0x48
   80ce8:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80cea:	a901      	add	r1, sp, #4
   80cec:	a802      	add	r0, sp, #8
   80cee:	4b19      	ldr	r3, [pc, #100]	; (80d54 <xQueueGenericSend+0x11c>)
   80cf0:	4798      	blx	r3
   80cf2:	b9a8      	cbnz	r0, 80d20 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80cf4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80cf6:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80cfa:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80cfc:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80cfe:	45bb      	cmp	fp, r7
   80d00:	d1d2      	bne.n	80ca8 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80d02:	9901      	ldr	r1, [sp, #4]
   80d04:	f104 0010 	add.w	r0, r4, #16
   80d08:	4b13      	ldr	r3, [pc, #76]	; (80d58 <xQueueGenericSend+0x120>)
   80d0a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80d0c:	4620      	mov	r0, r4
   80d0e:	4b0e      	ldr	r3, [pc, #56]	; (80d48 <xQueueGenericSend+0x110>)
   80d10:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80d12:	4b0e      	ldr	r3, [pc, #56]	; (80d4c <xQueueGenericSend+0x114>)
   80d14:	4798      	blx	r3
   80d16:	2800      	cmp	r0, #0
   80d18:	d1cb      	bne.n	80cb2 <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80d1a:	4b0a      	ldr	r3, [pc, #40]	; (80d44 <xQueueGenericSend+0x10c>)
   80d1c:	4798      	blx	r3
   80d1e:	e7c8      	b.n	80cb2 <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80d20:	4620      	mov	r0, r4
   80d22:	4b09      	ldr	r3, [pc, #36]	; (80d48 <xQueueGenericSend+0x110>)
   80d24:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80d26:	4b09      	ldr	r3, [pc, #36]	; (80d4c <xQueueGenericSend+0x114>)
   80d28:	4798      	blx	r3
			return errQUEUE_FULL;
   80d2a:	2000      	movs	r0, #0
   80d2c:	e7a9      	b.n	80c82 <xQueueGenericSend+0x4a>
   80d2e:	bf00      	nop
   80d30:	000807ed 	.word	0x000807ed
   80d34:	0008080d 	.word	0x0008080d
   80d38:	000807dd 	.word	0x000807dd
   80d3c:	00080a41 	.word	0x00080a41
   80d40:	0008171d 	.word	0x0008171d
   80d44:	000807cd 	.word	0x000807cd
   80d48:	00080ad1 	.word	0x00080ad1
   80d4c:	000813c5 	.word	0x000813c5
   80d50:	0008126d 	.word	0x0008126d
   80d54:	000817c9 	.word	0x000817c9
   80d58:	00081679 	.word	0x00081679
   80d5c:	000817a1 	.word	0x000817a1

00080d60 <xQueueGenericSendFromISR>:
{
   80d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80d64:	b190      	cbz	r0, 80d8c <xQueueGenericSendFromISR+0x2c>
   80d66:	460e      	mov	r6, r1
   80d68:	4615      	mov	r5, r2
   80d6a:	4698      	mov	r8, r3
   80d6c:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d6e:	b189      	cbz	r1, 80d94 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80d70:	4b1b      	ldr	r3, [pc, #108]	; (80de0 <xQueueGenericSendFromISR+0x80>)
   80d72:	4798      	blx	r3
   80d74:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80d76:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d78:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d7a:	429a      	cmp	r2, r3
   80d7c:	d311      	bcc.n	80da2 <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   80d7e:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80d80:	4638      	mov	r0, r7
   80d82:	4b18      	ldr	r3, [pc, #96]	; (80de4 <xQueueGenericSendFromISR+0x84>)
   80d84:	4798      	blx	r3
}
   80d86:	4620      	mov	r0, r4
   80d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80d8c:	4b14      	ldr	r3, [pc, #80]	; (80de0 <xQueueGenericSendFromISR+0x80>)
   80d8e:	4798      	blx	r3
   80d90:	bf00      	nop
   80d92:	e7fd      	b.n	80d90 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80d94:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80d96:	2b00      	cmp	r3, #0
   80d98:	d0ea      	beq.n	80d70 <xQueueGenericSendFromISR+0x10>
   80d9a:	4b11      	ldr	r3, [pc, #68]	; (80de0 <xQueueGenericSendFromISR+0x80>)
   80d9c:	4798      	blx	r3
   80d9e:	bf00      	nop
   80da0:	e7fd      	b.n	80d9e <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80da2:	4642      	mov	r2, r8
   80da4:	4631      	mov	r1, r6
   80da6:	4620      	mov	r0, r4
   80da8:	4b0f      	ldr	r3, [pc, #60]	; (80de8 <xQueueGenericSendFromISR+0x88>)
   80daa:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80dac:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dae:	f1b3 3fff 	cmp.w	r3, #4294967295
   80db2:	d10a      	bne.n	80dca <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80db6:	b16b      	cbz	r3, 80dd4 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80db8:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80dbc:	4b0b      	ldr	r3, [pc, #44]	; (80dec <xQueueGenericSendFromISR+0x8c>)
   80dbe:	4798      	blx	r3
   80dc0:	b150      	cbz	r0, 80dd8 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80dc2:	b15d      	cbz	r5, 80ddc <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80dc4:	2401      	movs	r4, #1
   80dc6:	602c      	str	r4, [r5, #0]
   80dc8:	e7da      	b.n	80d80 <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80dca:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80dcc:	3301      	adds	r3, #1
   80dce:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80dd0:	2401      	movs	r4, #1
   80dd2:	e7d5      	b.n	80d80 <xQueueGenericSendFromISR+0x20>
   80dd4:	2401      	movs	r4, #1
   80dd6:	e7d3      	b.n	80d80 <xQueueGenericSendFromISR+0x20>
   80dd8:	2401      	movs	r4, #1
   80dda:	e7d1      	b.n	80d80 <xQueueGenericSendFromISR+0x20>
   80ddc:	2401      	movs	r4, #1
   80dde:	e7cf      	b.n	80d80 <xQueueGenericSendFromISR+0x20>
   80de0:	000807dd 	.word	0x000807dd
   80de4:	00080805 	.word	0x00080805
   80de8:	00080a41 	.word	0x00080a41
   80dec:	0008171d 	.word	0x0008171d

00080df0 <xQueueGenericReceive>:
{
   80df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80df4:	b084      	sub	sp, #16
   80df6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80df8:	b148      	cbz	r0, 80e0e <xQueueGenericReceive+0x1e>
   80dfa:	4688      	mov	r8, r1
   80dfc:	4699      	mov	r9, r3
   80dfe:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e00:	b149      	cbz	r1, 80e16 <xQueueGenericReceive+0x26>
   80e02:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80e04:	4e46      	ldr	r6, [pc, #280]	; (80f20 <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80e06:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80f54 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80e0a:	4d46      	ldr	r5, [pc, #280]	; (80f24 <xQueueGenericReceive+0x134>)
   80e0c:	e04b      	b.n	80ea6 <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80e0e:	4b46      	ldr	r3, [pc, #280]	; (80f28 <xQueueGenericReceive+0x138>)
   80e10:	4798      	blx	r3
   80e12:	bf00      	nop
   80e14:	e7fd      	b.n	80e12 <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e16:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e18:	b11b      	cbz	r3, 80e22 <xQueueGenericReceive+0x32>
   80e1a:	4b43      	ldr	r3, [pc, #268]	; (80f28 <xQueueGenericReceive+0x138>)
   80e1c:	4798      	blx	r3
   80e1e:	bf00      	nop
   80e20:	e7fd      	b.n	80e1e <xQueueGenericReceive+0x2e>
   80e22:	2700      	movs	r7, #0
   80e24:	e7ee      	b.n	80e04 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80e26:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80e28:	4641      	mov	r1, r8
   80e2a:	4620      	mov	r0, r4
   80e2c:	4b3f      	ldr	r3, [pc, #252]	; (80f2c <xQueueGenericReceive+0x13c>)
   80e2e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80e30:	f1b9 0f00 	cmp.w	r9, #0
   80e34:	d117      	bne.n	80e66 <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   80e36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e38:	3b01      	subs	r3, #1
   80e3a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80e3c:	6823      	ldr	r3, [r4, #0]
   80e3e:	b913      	cbnz	r3, 80e46 <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80e40:	4b3b      	ldr	r3, [pc, #236]	; (80f30 <xQueueGenericReceive+0x140>)
   80e42:	4798      	blx	r3
   80e44:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e46:	6923      	ldr	r3, [r4, #16]
   80e48:	b13b      	cbz	r3, 80e5a <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80e4a:	f104 0010 	add.w	r0, r4, #16
   80e4e:	4b39      	ldr	r3, [pc, #228]	; (80f34 <xQueueGenericReceive+0x144>)
   80e50:	4798      	blx	r3
   80e52:	2801      	cmp	r0, #1
   80e54:	d101      	bne.n	80e5a <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80e56:	4b38      	ldr	r3, [pc, #224]	; (80f38 <xQueueGenericReceive+0x148>)
   80e58:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80e5a:	4b32      	ldr	r3, [pc, #200]	; (80f24 <xQueueGenericReceive+0x134>)
   80e5c:	4798      	blx	r3
				return pdPASS;
   80e5e:	2001      	movs	r0, #1
}
   80e60:	b004      	add	sp, #16
   80e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80e66:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80e6a:	2b00      	cmp	r3, #0
   80e6c:	d0f5      	beq.n	80e5a <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e6e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e72:	4b30      	ldr	r3, [pc, #192]	; (80f34 <xQueueGenericReceive+0x144>)
   80e74:	4798      	blx	r3
   80e76:	2800      	cmp	r0, #0
   80e78:	d0ef      	beq.n	80e5a <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80e7a:	4b2f      	ldr	r3, [pc, #188]	; (80f38 <xQueueGenericReceive+0x148>)
   80e7c:	4798      	blx	r3
   80e7e:	e7ec      	b.n	80e5a <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   80e80:	4b28      	ldr	r3, [pc, #160]	; (80f24 <xQueueGenericReceive+0x134>)
   80e82:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80e84:	2000      	movs	r0, #0
   80e86:	e7eb      	b.n	80e60 <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80e88:	a802      	add	r0, sp, #8
   80e8a:	47d0      	blx	sl
   80e8c:	e014      	b.n	80eb8 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   80e8e:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80e90:	6860      	ldr	r0, [r4, #4]
   80e92:	4b2a      	ldr	r3, [pc, #168]	; (80f3c <xQueueGenericReceive+0x14c>)
   80e94:	4798      	blx	r3
						portEXIT_CRITICAL();
   80e96:	47a8      	blx	r5
   80e98:	e02c      	b.n	80ef4 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80e9a:	4620      	mov	r0, r4
   80e9c:	4b28      	ldr	r3, [pc, #160]	; (80f40 <xQueueGenericReceive+0x150>)
   80e9e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ea0:	4b28      	ldr	r3, [pc, #160]	; (80f44 <xQueueGenericReceive+0x154>)
   80ea2:	4798      	blx	r3
   80ea4:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80ea6:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80ea8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80eaa:	2b00      	cmp	r3, #0
   80eac:	d1bb      	bne.n	80e26 <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80eae:	9b01      	ldr	r3, [sp, #4]
   80eb0:	2b00      	cmp	r3, #0
   80eb2:	d0e5      	beq.n	80e80 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80eb4:	2f00      	cmp	r7, #0
   80eb6:	d0e7      	beq.n	80e88 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80eb8:	47a8      	blx	r5
		vTaskSuspendAll();
   80eba:	4b23      	ldr	r3, [pc, #140]	; (80f48 <xQueueGenericReceive+0x158>)
   80ebc:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80ebe:	47b0      	blx	r6
   80ec0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80ec2:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ec6:	bf04      	itt	eq
   80ec8:	2300      	moveq	r3, #0
   80eca:	6463      	streq	r3, [r4, #68]	; 0x44
   80ecc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80ece:	f1b3 3fff 	cmp.w	r3, #4294967295
   80ed2:	bf04      	itt	eq
   80ed4:	2300      	moveq	r3, #0
   80ed6:	64a3      	streq	r3, [r4, #72]	; 0x48
   80ed8:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80eda:	a901      	add	r1, sp, #4
   80edc:	a802      	add	r0, sp, #8
   80ede:	4b1b      	ldr	r3, [pc, #108]	; (80f4c <xQueueGenericReceive+0x15c>)
   80ee0:	4798      	blx	r3
   80ee2:	b9b0      	cbnz	r0, 80f12 <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80ee4:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80ee6:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80ee8:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80eea:	2f00      	cmp	r7, #0
   80eec:	d1d5      	bne.n	80e9a <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80eee:	6823      	ldr	r3, [r4, #0]
   80ef0:	2b00      	cmp	r3, #0
   80ef2:	d0cc      	beq.n	80e8e <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80ef4:	9901      	ldr	r1, [sp, #4]
   80ef6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80efa:	4b15      	ldr	r3, [pc, #84]	; (80f50 <xQueueGenericReceive+0x160>)
   80efc:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80efe:	4620      	mov	r0, r4
   80f00:	4b0f      	ldr	r3, [pc, #60]	; (80f40 <xQueueGenericReceive+0x150>)
   80f02:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f04:	4b0f      	ldr	r3, [pc, #60]	; (80f44 <xQueueGenericReceive+0x154>)
   80f06:	4798      	blx	r3
   80f08:	2800      	cmp	r0, #0
   80f0a:	d1cb      	bne.n	80ea4 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80f0c:	4b0a      	ldr	r3, [pc, #40]	; (80f38 <xQueueGenericReceive+0x148>)
   80f0e:	4798      	blx	r3
   80f10:	e7c8      	b.n	80ea4 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80f12:	4620      	mov	r0, r4
   80f14:	4b0a      	ldr	r3, [pc, #40]	; (80f40 <xQueueGenericReceive+0x150>)
   80f16:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f18:	4b0a      	ldr	r3, [pc, #40]	; (80f44 <xQueueGenericReceive+0x154>)
   80f1a:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80f1c:	2000      	movs	r0, #0
   80f1e:	e79f      	b.n	80e60 <xQueueGenericReceive+0x70>
   80f20:	000807ed 	.word	0x000807ed
   80f24:	0008080d 	.word	0x0008080d
   80f28:	000807dd 	.word	0x000807dd
   80f2c:	00080aa9 	.word	0x00080aa9
   80f30:	00081859 	.word	0x00081859
   80f34:	0008171d 	.word	0x0008171d
   80f38:	000807cd 	.word	0x000807cd
   80f3c:	00081885 	.word	0x00081885
   80f40:	00080ad1 	.word	0x00080ad1
   80f44:	000813c5 	.word	0x000813c5
   80f48:	0008126d 	.word	0x0008126d
   80f4c:	000817c9 	.word	0x000817c9
   80f50:	00081679 	.word	0x00081679
   80f54:	000817a1 	.word	0x000817a1

00080f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80f58:	b538      	push	{r3, r4, r5, lr}
   80f5a:	4604      	mov	r4, r0
   80f5c:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80f5e:	4b0e      	ldr	r3, [pc, #56]	; (80f98 <vQueueWaitForMessageRestricted+0x40>)
   80f60:	4798      	blx	r3
   80f62:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f64:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f68:	bf04      	itt	eq
   80f6a:	2300      	moveq	r3, #0
   80f6c:	6463      	streq	r3, [r4, #68]	; 0x44
   80f6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f70:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f74:	bf04      	itt	eq
   80f76:	2300      	moveq	r3, #0
   80f78:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f7a:	4b08      	ldr	r3, [pc, #32]	; (80f9c <vQueueWaitForMessageRestricted+0x44>)
   80f7c:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80f80:	b11b      	cbz	r3, 80f8a <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80f82:	4620      	mov	r0, r4
   80f84:	4b06      	ldr	r3, [pc, #24]	; (80fa0 <vQueueWaitForMessageRestricted+0x48>)
   80f86:	4798      	blx	r3
   80f88:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80f8a:	4629      	mov	r1, r5
   80f8c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f90:	4b04      	ldr	r3, [pc, #16]	; (80fa4 <vQueueWaitForMessageRestricted+0x4c>)
   80f92:	4798      	blx	r3
   80f94:	e7f5      	b.n	80f82 <vQueueWaitForMessageRestricted+0x2a>
   80f96:	bf00      	nop
   80f98:	000807ed 	.word	0x000807ed
   80f9c:	0008080d 	.word	0x0008080d
   80fa0:	00080ad1 	.word	0x00080ad1
   80fa4:	000816d9 	.word	0x000816d9

00080fa8 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80fa8:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80faa:	4b0f      	ldr	r3, [pc, #60]	; (80fe8 <prvAddCurrentTaskToDelayedList+0x40>)
   80fac:	681b      	ldr	r3, [r3, #0]
   80fae:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80fb0:	4b0e      	ldr	r3, [pc, #56]	; (80fec <prvAddCurrentTaskToDelayedList+0x44>)
   80fb2:	681b      	ldr	r3, [r3, #0]
   80fb4:	4298      	cmp	r0, r3
   80fb6:	d30e      	bcc.n	80fd6 <prvAddCurrentTaskToDelayedList+0x2e>
   80fb8:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80fba:	4b0d      	ldr	r3, [pc, #52]	; (80ff0 <prvAddCurrentTaskToDelayedList+0x48>)
   80fbc:	6818      	ldr	r0, [r3, #0]
   80fbe:	4b0a      	ldr	r3, [pc, #40]	; (80fe8 <prvAddCurrentTaskToDelayedList+0x40>)
   80fc0:	6819      	ldr	r1, [r3, #0]
   80fc2:	3104      	adds	r1, #4
   80fc4:	4b0b      	ldr	r3, [pc, #44]	; (80ff4 <prvAddCurrentTaskToDelayedList+0x4c>)
   80fc6:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80fc8:	4b0b      	ldr	r3, [pc, #44]	; (80ff8 <prvAddCurrentTaskToDelayedList+0x50>)
   80fca:	681b      	ldr	r3, [r3, #0]
   80fcc:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80fce:	bf3c      	itt	cc
   80fd0:	4b09      	ldrcc	r3, [pc, #36]	; (80ff8 <prvAddCurrentTaskToDelayedList+0x50>)
   80fd2:	601c      	strcc	r4, [r3, #0]
   80fd4:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80fd6:	4b09      	ldr	r3, [pc, #36]	; (80ffc <prvAddCurrentTaskToDelayedList+0x54>)
   80fd8:	6818      	ldr	r0, [r3, #0]
   80fda:	4b03      	ldr	r3, [pc, #12]	; (80fe8 <prvAddCurrentTaskToDelayedList+0x40>)
   80fdc:	6819      	ldr	r1, [r3, #0]
   80fde:	3104      	adds	r1, #4
   80fe0:	4b04      	ldr	r3, [pc, #16]	; (80ff4 <prvAddCurrentTaskToDelayedList+0x4c>)
   80fe2:	4798      	blx	r3
   80fe4:	bd10      	pop	{r4, pc}
   80fe6:	bf00      	nop
   80fe8:	2007ab10 	.word	0x2007ab10
   80fec:	2007ac0c 	.word	0x2007ac0c
   80ff0:	2007ab14 	.word	0x2007ab14
   80ff4:	0008071d 	.word	0x0008071d
   80ff8:	20070134 	.word	0x20070134
   80ffc:	2007ab18 	.word	0x2007ab18

00081000 <xTaskGenericCreate>:
{
   81000:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81004:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   81006:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   8100a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   8100c:	b148      	cbz	r0, 81022 <xTaskGenericCreate+0x22>
   8100e:	4688      	mov	r8, r1
   81010:	4615      	mov	r5, r2
   81012:	469b      	mov	fp, r3
   81014:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81016:	2f04      	cmp	r7, #4
   81018:	d907      	bls.n	8102a <xTaskGenericCreate+0x2a>
   8101a:	4b60      	ldr	r3, [pc, #384]	; (8119c <xTaskGenericCreate+0x19c>)
   8101c:	4798      	blx	r3
   8101e:	bf00      	nop
   81020:	e7fd      	b.n	8101e <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   81022:	4b5e      	ldr	r3, [pc, #376]	; (8119c <xTaskGenericCreate+0x19c>)
   81024:	4798      	blx	r3
   81026:	bf00      	nop
   81028:	e7fd      	b.n	81026 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   8102a:	204c      	movs	r0, #76	; 0x4c
   8102c:	4b5c      	ldr	r3, [pc, #368]	; (811a0 <xTaskGenericCreate+0x1a0>)
   8102e:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81030:	4604      	mov	r4, r0
   81032:	2800      	cmp	r0, #0
   81034:	d054      	beq.n	810e0 <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81036:	2e00      	cmp	r6, #0
   81038:	d048      	beq.n	810cc <xTaskGenericCreate+0xcc>
   8103a:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   8103c:	00aa      	lsls	r2, r5, #2
   8103e:	21a5      	movs	r1, #165	; 0xa5
   81040:	4630      	mov	r0, r6
   81042:	4b58      	ldr	r3, [pc, #352]	; (811a4 <xTaskGenericCreate+0x1a4>)
   81044:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   81046:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   8104a:	3d01      	subs	r5, #1
   8104c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8104e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   81052:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   81056:	220a      	movs	r2, #10
   81058:	4641      	mov	r1, r8
   8105a:	f104 0034 	add.w	r0, r4, #52	; 0x34
   8105e:	4b52      	ldr	r3, [pc, #328]	; (811a8 <xTaskGenericCreate+0x1a8>)
   81060:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   81062:	2300      	movs	r3, #0
   81064:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   81068:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   8106a:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   8106c:	f104 0804 	add.w	r8, r4, #4
   81070:	4640      	mov	r0, r8
   81072:	4e4e      	ldr	r6, [pc, #312]	; (811ac <xTaskGenericCreate+0x1ac>)
   81074:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   81076:	f104 0018 	add.w	r0, r4, #24
   8107a:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   8107c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   8107e:	f1c7 0305 	rsb	r3, r7, #5
   81082:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81084:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81086:	465a      	mov	r2, fp
   81088:	4651      	mov	r1, sl
   8108a:	4628      	mov	r0, r5
   8108c:	4b48      	ldr	r3, [pc, #288]	; (811b0 <xTaskGenericCreate+0x1b0>)
   8108e:	4798      	blx	r3
   81090:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81092:	f010 0f07 	tst.w	r0, #7
   81096:	d127      	bne.n	810e8 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   81098:	f1b9 0f00 	cmp.w	r9, #0
   8109c:	d001      	beq.n	810a2 <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   8109e:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   810a2:	4b44      	ldr	r3, [pc, #272]	; (811b4 <xTaskGenericCreate+0x1b4>)
   810a4:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   810a6:	4a44      	ldr	r2, [pc, #272]	; (811b8 <xTaskGenericCreate+0x1b8>)
   810a8:	6813      	ldr	r3, [r2, #0]
   810aa:	3301      	adds	r3, #1
   810ac:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   810ae:	4b43      	ldr	r3, [pc, #268]	; (811bc <xTaskGenericCreate+0x1bc>)
   810b0:	681b      	ldr	r3, [r3, #0]
   810b2:	b1eb      	cbz	r3, 810f0 <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   810b4:	4b42      	ldr	r3, [pc, #264]	; (811c0 <xTaskGenericCreate+0x1c0>)
   810b6:	681b      	ldr	r3, [r3, #0]
   810b8:	2b00      	cmp	r3, #0
   810ba:	d140      	bne.n	8113e <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   810bc:	4b3f      	ldr	r3, [pc, #252]	; (811bc <xTaskGenericCreate+0x1bc>)
   810be:	681b      	ldr	r3, [r3, #0]
   810c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   810c2:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   810c4:	bf24      	itt	cs
   810c6:	4b3d      	ldrcs	r3, [pc, #244]	; (811bc <xTaskGenericCreate+0x1bc>)
   810c8:	601c      	strcs	r4, [r3, #0]
   810ca:	e038      	b.n	8113e <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   810cc:	00a8      	lsls	r0, r5, #2
   810ce:	4b34      	ldr	r3, [pc, #208]	; (811a0 <xTaskGenericCreate+0x1a0>)
   810d0:	4798      	blx	r3
   810d2:	4606      	mov	r6, r0
   810d4:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   810d6:	2800      	cmp	r0, #0
   810d8:	d1b0      	bne.n	8103c <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   810da:	4620      	mov	r0, r4
   810dc:	4b39      	ldr	r3, [pc, #228]	; (811c4 <xTaskGenericCreate+0x1c4>)
   810de:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   810e0:	f04f 30ff 	mov.w	r0, #4294967295
}
   810e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   810e8:	4b2c      	ldr	r3, [pc, #176]	; (8119c <xTaskGenericCreate+0x19c>)
   810ea:	4798      	blx	r3
   810ec:	bf00      	nop
   810ee:	e7fd      	b.n	810ec <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   810f0:	4b32      	ldr	r3, [pc, #200]	; (811bc <xTaskGenericCreate+0x1bc>)
   810f2:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   810f4:	6813      	ldr	r3, [r2, #0]
   810f6:	2b01      	cmp	r3, #1
   810f8:	d121      	bne.n	8113e <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   810fa:	4e33      	ldr	r6, [pc, #204]	; (811c8 <xTaskGenericCreate+0x1c8>)
   810fc:	4630      	mov	r0, r6
   810fe:	4d33      	ldr	r5, [pc, #204]	; (811cc <xTaskGenericCreate+0x1cc>)
   81100:	47a8      	blx	r5
   81102:	f106 0014 	add.w	r0, r6, #20
   81106:	47a8      	blx	r5
   81108:	f106 0028 	add.w	r0, r6, #40	; 0x28
   8110c:	47a8      	blx	r5
   8110e:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   81112:	47a8      	blx	r5
   81114:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81118:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8111a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 81200 <xTaskGenericCreate+0x200>
   8111e:	4648      	mov	r0, r9
   81120:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81122:	4e2b      	ldr	r6, [pc, #172]	; (811d0 <xTaskGenericCreate+0x1d0>)
   81124:	4630      	mov	r0, r6
   81126:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   81128:	482a      	ldr	r0, [pc, #168]	; (811d4 <xTaskGenericCreate+0x1d4>)
   8112a:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   8112c:	482a      	ldr	r0, [pc, #168]	; (811d8 <xTaskGenericCreate+0x1d8>)
   8112e:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81130:	482a      	ldr	r0, [pc, #168]	; (811dc <xTaskGenericCreate+0x1dc>)
   81132:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   81134:	4b2a      	ldr	r3, [pc, #168]	; (811e0 <xTaskGenericCreate+0x1e0>)
   81136:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8113a:	4b2a      	ldr	r3, [pc, #168]	; (811e4 <xTaskGenericCreate+0x1e4>)
   8113c:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8113e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81140:	4b29      	ldr	r3, [pc, #164]	; (811e8 <xTaskGenericCreate+0x1e8>)
   81142:	681b      	ldr	r3, [r3, #0]
   81144:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   81146:	bf84      	itt	hi
   81148:	4b27      	ldrhi	r3, [pc, #156]	; (811e8 <xTaskGenericCreate+0x1e8>)
   8114a:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   8114c:	4a27      	ldr	r2, [pc, #156]	; (811ec <xTaskGenericCreate+0x1ec>)
   8114e:	6813      	ldr	r3, [r2, #0]
   81150:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   81152:	3301      	adds	r3, #1
   81154:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   81156:	4b26      	ldr	r3, [pc, #152]	; (811f0 <xTaskGenericCreate+0x1f0>)
   81158:	681b      	ldr	r3, [r3, #0]
   8115a:	4298      	cmp	r0, r3
   8115c:	bf84      	itt	hi
   8115e:	4b24      	ldrhi	r3, [pc, #144]	; (811f0 <xTaskGenericCreate+0x1f0>)
   81160:	6018      	strhi	r0, [r3, #0]
   81162:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81166:	4641      	mov	r1, r8
   81168:	4b17      	ldr	r3, [pc, #92]	; (811c8 <xTaskGenericCreate+0x1c8>)
   8116a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8116e:	4b21      	ldr	r3, [pc, #132]	; (811f4 <xTaskGenericCreate+0x1f4>)
   81170:	4798      	blx	r3
		taskEXIT_CRITICAL();
   81172:	4b21      	ldr	r3, [pc, #132]	; (811f8 <xTaskGenericCreate+0x1f8>)
   81174:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   81176:	4b12      	ldr	r3, [pc, #72]	; (811c0 <xTaskGenericCreate+0x1c0>)
   81178:	681b      	ldr	r3, [r3, #0]
   8117a:	b14b      	cbz	r3, 81190 <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   8117c:	4b0f      	ldr	r3, [pc, #60]	; (811bc <xTaskGenericCreate+0x1bc>)
   8117e:	681b      	ldr	r3, [r3, #0]
   81180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81182:	429f      	cmp	r7, r3
   81184:	d907      	bls.n	81196 <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   81186:	4b1d      	ldr	r3, [pc, #116]	; (811fc <xTaskGenericCreate+0x1fc>)
   81188:	4798      	blx	r3
   8118a:	2001      	movs	r0, #1
   8118c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81190:	2001      	movs	r0, #1
   81192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81196:	2001      	movs	r0, #1
	return xReturn;
   81198:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8119c:	000807dd 	.word	0x000807dd
   811a0:	0008093d 	.word	0x0008093d
   811a4:	000825bd 	.word	0x000825bd
   811a8:	00082855 	.word	0x00082855
   811ac:	000806fb 	.word	0x000806fb
   811b0:	00080791 	.word	0x00080791
   811b4:	000807ed 	.word	0x000807ed
   811b8:	2007ab80 	.word	0x2007ab80
   811bc:	2007ab10 	.word	0x2007ab10
   811c0:	2007abe0 	.word	0x2007abe0
   811c4:	00080a09 	.word	0x00080a09
   811c8:	2007ab1c 	.word	0x2007ab1c
   811cc:	000806e5 	.word	0x000806e5
   811d0:	2007abb0 	.word	0x2007abb0
   811d4:	2007abcc 	.word	0x2007abcc
   811d8:	2007abf8 	.word	0x2007abf8
   811dc:	2007abe4 	.word	0x2007abe4
   811e0:	2007ab14 	.word	0x2007ab14
   811e4:	2007ab18 	.word	0x2007ab18
   811e8:	2007ab98 	.word	0x2007ab98
   811ec:	2007ab8c 	.word	0x2007ab8c
   811f0:	2007ab94 	.word	0x2007ab94
   811f4:	00080701 	.word	0x00080701
   811f8:	0008080d 	.word	0x0008080d
   811fc:	000807cd 	.word	0x000807cd
   81200:	2007ab9c 	.word	0x2007ab9c

00081204 <vTaskStartScheduler>:
{
   81204:	b510      	push	{r4, lr}
   81206:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81208:	2300      	movs	r3, #0
   8120a:	9303      	str	r3, [sp, #12]
   8120c:	9302      	str	r3, [sp, #8]
   8120e:	9301      	str	r3, [sp, #4]
   81210:	9300      	str	r3, [sp, #0]
   81212:	2282      	movs	r2, #130	; 0x82
   81214:	490d      	ldr	r1, [pc, #52]	; (8124c <vTaskStartScheduler+0x48>)
   81216:	480e      	ldr	r0, [pc, #56]	; (81250 <vTaskStartScheduler+0x4c>)
   81218:	4c0e      	ldr	r4, [pc, #56]	; (81254 <vTaskStartScheduler+0x50>)
   8121a:	47a0      	blx	r4
		if( xReturn == pdPASS )
   8121c:	2801      	cmp	r0, #1
   8121e:	d002      	beq.n	81226 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   81220:	b180      	cbz	r0, 81244 <vTaskStartScheduler+0x40>
}
   81222:	b004      	add	sp, #16
   81224:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   81226:	4b0c      	ldr	r3, [pc, #48]	; (81258 <vTaskStartScheduler+0x54>)
   81228:	4798      	blx	r3
	if( xReturn == pdPASS )
   8122a:	2801      	cmp	r0, #1
   8122c:	d1f8      	bne.n	81220 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   8122e:	4b0b      	ldr	r3, [pc, #44]	; (8125c <vTaskStartScheduler+0x58>)
   81230:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   81232:	2201      	movs	r2, #1
   81234:	4b0a      	ldr	r3, [pc, #40]	; (81260 <vTaskStartScheduler+0x5c>)
   81236:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81238:	2200      	movs	r2, #0
   8123a:	4b0a      	ldr	r3, [pc, #40]	; (81264 <vTaskStartScheduler+0x60>)
   8123c:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   8123e:	4b0a      	ldr	r3, [pc, #40]	; (81268 <vTaskStartScheduler+0x64>)
   81240:	4798      	blx	r3
   81242:	e7ee      	b.n	81222 <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   81244:	4b05      	ldr	r3, [pc, #20]	; (8125c <vTaskStartScheduler+0x58>)
   81246:	4798      	blx	r3
   81248:	bf00      	nop
   8124a:	e7fd      	b.n	81248 <vTaskStartScheduler+0x44>
   8124c:	000853b8 	.word	0x000853b8
   81250:	00081551 	.word	0x00081551
   81254:	00081001 	.word	0x00081001
   81258:	000819fd 	.word	0x000819fd
   8125c:	000807dd 	.word	0x000807dd
   81260:	2007abe0 	.word	0x2007abe0
   81264:	2007ac0c 	.word	0x2007ac0c
   81268:	000808ad 	.word	0x000808ad

0008126c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   8126c:	4a02      	ldr	r2, [pc, #8]	; (81278 <vTaskSuspendAll+0xc>)
   8126e:	6813      	ldr	r3, [r2, #0]
   81270:	3301      	adds	r3, #1
   81272:	6013      	str	r3, [r2, #0]
   81274:	4770      	bx	lr
   81276:	bf00      	nop
   81278:	2007ab88 	.word	0x2007ab88

0008127c <xTaskGetTickCount>:
{
   8127c:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   8127e:	4b04      	ldr	r3, [pc, #16]	; (81290 <xTaskGetTickCount+0x14>)
   81280:	4798      	blx	r3
		xTicks = xTickCount;
   81282:	4b04      	ldr	r3, [pc, #16]	; (81294 <xTaskGetTickCount+0x18>)
   81284:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   81286:	4b04      	ldr	r3, [pc, #16]	; (81298 <xTaskGetTickCount+0x1c>)
   81288:	4798      	blx	r3
}
   8128a:	4620      	mov	r0, r4
   8128c:	bd10      	pop	{r4, pc}
   8128e:	bf00      	nop
   81290:	000807ed 	.word	0x000807ed
   81294:	2007ac0c 	.word	0x2007ac0c
   81298:	0008080d 	.word	0x0008080d

0008129c <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8129c:	4b3d      	ldr	r3, [pc, #244]	; (81394 <vTaskIncrementTick+0xf8>)
   8129e:	681b      	ldr	r3, [r3, #0]
   812a0:	2b00      	cmp	r3, #0
   812a2:	d16f      	bne.n	81384 <vTaskIncrementTick+0xe8>
{
   812a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   812a8:	4b3b      	ldr	r3, [pc, #236]	; (81398 <vTaskIncrementTick+0xfc>)
   812aa:	681a      	ldr	r2, [r3, #0]
   812ac:	3201      	adds	r2, #1
   812ae:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   812b0:	681b      	ldr	r3, [r3, #0]
   812b2:	b9ab      	cbnz	r3, 812e0 <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   812b4:	4b39      	ldr	r3, [pc, #228]	; (8139c <vTaskIncrementTick+0x100>)
   812b6:	681b      	ldr	r3, [r3, #0]
   812b8:	681b      	ldr	r3, [r3, #0]
   812ba:	2b00      	cmp	r3, #0
   812bc:	d128      	bne.n	81310 <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   812be:	4b37      	ldr	r3, [pc, #220]	; (8139c <vTaskIncrementTick+0x100>)
   812c0:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   812c2:	4a37      	ldr	r2, [pc, #220]	; (813a0 <vTaskIncrementTick+0x104>)
   812c4:	6810      	ldr	r0, [r2, #0]
   812c6:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   812c8:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   812ca:	4936      	ldr	r1, [pc, #216]	; (813a4 <vTaskIncrementTick+0x108>)
   812cc:	680a      	ldr	r2, [r1, #0]
   812ce:	3201      	adds	r2, #1
   812d0:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   812d2:	681b      	ldr	r3, [r3, #0]
   812d4:	681b      	ldr	r3, [r3, #0]
   812d6:	b9fb      	cbnz	r3, 81318 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   812d8:	f04f 32ff 	mov.w	r2, #4294967295
   812dc:	4b32      	ldr	r3, [pc, #200]	; (813a8 <vTaskIncrementTick+0x10c>)
   812de:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   812e0:	4b2d      	ldr	r3, [pc, #180]	; (81398 <vTaskIncrementTick+0xfc>)
   812e2:	681a      	ldr	r2, [r3, #0]
   812e4:	4b30      	ldr	r3, [pc, #192]	; (813a8 <vTaskIncrementTick+0x10c>)
   812e6:	681b      	ldr	r3, [r3, #0]
   812e8:	429a      	cmp	r2, r3
   812ea:	d350      	bcc.n	8138e <vTaskIncrementTick+0xf2>
   812ec:	4b2b      	ldr	r3, [pc, #172]	; (8139c <vTaskIncrementTick+0x100>)
   812ee:	681b      	ldr	r3, [r3, #0]
   812f0:	681b      	ldr	r3, [r3, #0]
   812f2:	b1cb      	cbz	r3, 81328 <vTaskIncrementTick+0x8c>
   812f4:	4b29      	ldr	r3, [pc, #164]	; (8139c <vTaskIncrementTick+0x100>)
   812f6:	681b      	ldr	r3, [r3, #0]
   812f8:	68db      	ldr	r3, [r3, #12]
   812fa:	68dc      	ldr	r4, [r3, #12]
   812fc:	6863      	ldr	r3, [r4, #4]
   812fe:	4a26      	ldr	r2, [pc, #152]	; (81398 <vTaskIncrementTick+0xfc>)
   81300:	6812      	ldr	r2, [r2, #0]
   81302:	4293      	cmp	r3, r2
   81304:	d816      	bhi.n	81334 <vTaskIncrementTick+0x98>
   81306:	4e29      	ldr	r6, [pc, #164]	; (813ac <vTaskIncrementTick+0x110>)
   81308:	4f29      	ldr	r7, [pc, #164]	; (813b0 <vTaskIncrementTick+0x114>)
   8130a:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 813c0 <vTaskIncrementTick+0x124>
   8130e:	e02f      	b.n	81370 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81310:	4b28      	ldr	r3, [pc, #160]	; (813b4 <vTaskIncrementTick+0x118>)
   81312:	4798      	blx	r3
   81314:	bf00      	nop
   81316:	e7fd      	b.n	81314 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81318:	4b20      	ldr	r3, [pc, #128]	; (8139c <vTaskIncrementTick+0x100>)
   8131a:	681b      	ldr	r3, [r3, #0]
   8131c:	68db      	ldr	r3, [r3, #12]
   8131e:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81320:	685a      	ldr	r2, [r3, #4]
   81322:	4b21      	ldr	r3, [pc, #132]	; (813a8 <vTaskIncrementTick+0x10c>)
   81324:	601a      	str	r2, [r3, #0]
   81326:	e7db      	b.n	812e0 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   81328:	f04f 32ff 	mov.w	r2, #4294967295
   8132c:	4b1e      	ldr	r3, [pc, #120]	; (813a8 <vTaskIncrementTick+0x10c>)
   8132e:	601a      	str	r2, [r3, #0]
   81330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81334:	4a1c      	ldr	r2, [pc, #112]	; (813a8 <vTaskIncrementTick+0x10c>)
   81336:	6013      	str	r3, [r2, #0]
   81338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8133c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8133e:	683b      	ldr	r3, [r7, #0]
   81340:	4298      	cmp	r0, r3
   81342:	bf88      	it	hi
   81344:	6038      	strhi	r0, [r7, #0]
   81346:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8134a:	4629      	mov	r1, r5
   8134c:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81350:	4b19      	ldr	r3, [pc, #100]	; (813b8 <vTaskIncrementTick+0x11c>)
   81352:	4798      	blx	r3
   81354:	4b11      	ldr	r3, [pc, #68]	; (8139c <vTaskIncrementTick+0x100>)
   81356:	681b      	ldr	r3, [r3, #0]
   81358:	681b      	ldr	r3, [r3, #0]
   8135a:	2b00      	cmp	r3, #0
   8135c:	d0e4      	beq.n	81328 <vTaskIncrementTick+0x8c>
   8135e:	4b0f      	ldr	r3, [pc, #60]	; (8139c <vTaskIncrementTick+0x100>)
   81360:	681b      	ldr	r3, [r3, #0]
   81362:	68db      	ldr	r3, [r3, #12]
   81364:	68dc      	ldr	r4, [r3, #12]
   81366:	6863      	ldr	r3, [r4, #4]
   81368:	4a0b      	ldr	r2, [pc, #44]	; (81398 <vTaskIncrementTick+0xfc>)
   8136a:	6812      	ldr	r2, [r2, #0]
   8136c:	4293      	cmp	r3, r2
   8136e:	d8e1      	bhi.n	81334 <vTaskIncrementTick+0x98>
   81370:	1d25      	adds	r5, r4, #4
   81372:	4628      	mov	r0, r5
   81374:	47b0      	blx	r6
   81376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81378:	2b00      	cmp	r3, #0
   8137a:	d0df      	beq.n	8133c <vTaskIncrementTick+0xa0>
   8137c:	f104 0018 	add.w	r0, r4, #24
   81380:	47b0      	blx	r6
   81382:	e7db      	b.n	8133c <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   81384:	4a0d      	ldr	r2, [pc, #52]	; (813bc <vTaskIncrementTick+0x120>)
   81386:	6813      	ldr	r3, [r2, #0]
   81388:	3301      	adds	r3, #1
   8138a:	6013      	str	r3, [r2, #0]
}
   8138c:	4770      	bx	lr
   8138e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81392:	bf00      	nop
   81394:	2007ab88 	.word	0x2007ab88
   81398:	2007ac0c 	.word	0x2007ac0c
   8139c:	2007ab14 	.word	0x2007ab14
   813a0:	2007ab18 	.word	0x2007ab18
   813a4:	2007abc8 	.word	0x2007abc8
   813a8:	20070134 	.word	0x20070134
   813ac:	00080757 	.word	0x00080757
   813b0:	2007ab94 	.word	0x2007ab94
   813b4:	000807dd 	.word	0x000807dd
   813b8:	00080701 	.word	0x00080701
   813bc:	2007ab84 	.word	0x2007ab84
   813c0:	2007ab1c 	.word	0x2007ab1c

000813c4 <xTaskResumeAll>:
{
   813c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   813c8:	4b2f      	ldr	r3, [pc, #188]	; (81488 <xTaskResumeAll+0xc4>)
   813ca:	681b      	ldr	r3, [r3, #0]
   813cc:	b91b      	cbnz	r3, 813d6 <xTaskResumeAll+0x12>
   813ce:	4b2f      	ldr	r3, [pc, #188]	; (8148c <xTaskResumeAll+0xc8>)
   813d0:	4798      	blx	r3
   813d2:	bf00      	nop
   813d4:	e7fd      	b.n	813d2 <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   813d6:	4b2e      	ldr	r3, [pc, #184]	; (81490 <xTaskResumeAll+0xcc>)
   813d8:	4798      	blx	r3
		--uxSchedulerSuspended;
   813da:	4b2b      	ldr	r3, [pc, #172]	; (81488 <xTaskResumeAll+0xc4>)
   813dc:	681a      	ldr	r2, [r3, #0]
   813de:	3a01      	subs	r2, #1
   813e0:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   813e2:	681b      	ldr	r3, [r3, #0]
   813e4:	2b00      	cmp	r3, #0
   813e6:	d14d      	bne.n	81484 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   813e8:	4b2a      	ldr	r3, [pc, #168]	; (81494 <xTaskResumeAll+0xd0>)
   813ea:	681b      	ldr	r3, [r3, #0]
   813ec:	b12b      	cbz	r3, 813fa <xTaskResumeAll+0x36>
   813ee:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   813f0:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 814c0 <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   813f4:	4f28      	ldr	r7, [pc, #160]	; (81498 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   813f6:	4e29      	ldr	r6, [pc, #164]	; (8149c <xTaskResumeAll+0xd8>)
   813f8:	e023      	b.n	81442 <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   813fa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   813fc:	4b28      	ldr	r3, [pc, #160]	; (814a0 <xTaskResumeAll+0xdc>)
   813fe:	4798      	blx	r3
}
   81400:	4620      	mov	r0, r4
   81402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81406:	f8d8 300c 	ldr.w	r3, [r8, #12]
   8140a:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   8140c:	f105 0018 	add.w	r0, r5, #24
   81410:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81412:	f105 0904 	add.w	r9, r5, #4
   81416:	4648      	mov	r0, r9
   81418:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   8141a:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   8141c:	6833      	ldr	r3, [r6, #0]
   8141e:	4298      	cmp	r0, r3
   81420:	bf88      	it	hi
   81422:	6030      	strhi	r0, [r6, #0]
   81424:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81428:	4649      	mov	r1, r9
   8142a:	4b1e      	ldr	r3, [pc, #120]	; (814a4 <xTaskResumeAll+0xe0>)
   8142c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81430:	4b1d      	ldr	r3, [pc, #116]	; (814a8 <xTaskResumeAll+0xe4>)
   81432:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81434:	4b1d      	ldr	r3, [pc, #116]	; (814ac <xTaskResumeAll+0xe8>)
   81436:	681b      	ldr	r3, [r3, #0]
   81438:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   8143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   8143c:	429a      	cmp	r2, r3
   8143e:	bf28      	it	cs
   81440:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81442:	f8d8 3000 	ldr.w	r3, [r8]
   81446:	2b00      	cmp	r3, #0
   81448:	d1dd      	bne.n	81406 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8144a:	4b19      	ldr	r3, [pc, #100]	; (814b0 <xTaskResumeAll+0xec>)
   8144c:	681b      	ldr	r3, [r3, #0]
   8144e:	b193      	cbz	r3, 81476 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81450:	4b17      	ldr	r3, [pc, #92]	; (814b0 <xTaskResumeAll+0xec>)
   81452:	681b      	ldr	r3, [r3, #0]
   81454:	b143      	cbz	r3, 81468 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   81456:	4d17      	ldr	r5, [pc, #92]	; (814b4 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81458:	4c15      	ldr	r4, [pc, #84]	; (814b0 <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   8145a:	47a8      	blx	r5
						--uxMissedTicks;
   8145c:	6823      	ldr	r3, [r4, #0]
   8145e:	3b01      	subs	r3, #1
   81460:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81462:	6823      	ldr	r3, [r4, #0]
   81464:	2b00      	cmp	r3, #0
   81466:	d1f8      	bne.n	8145a <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   81468:	2200      	movs	r2, #0
   8146a:	4b13      	ldr	r3, [pc, #76]	; (814b8 <xTaskResumeAll+0xf4>)
   8146c:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8146e:	4b13      	ldr	r3, [pc, #76]	; (814bc <xTaskResumeAll+0xf8>)
   81470:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   81472:	2401      	movs	r4, #1
   81474:	e7c2      	b.n	813fc <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81476:	2c01      	cmp	r4, #1
   81478:	d0f6      	beq.n	81468 <xTaskResumeAll+0xa4>
   8147a:	4b0f      	ldr	r3, [pc, #60]	; (814b8 <xTaskResumeAll+0xf4>)
   8147c:	681b      	ldr	r3, [r3, #0]
   8147e:	2b01      	cmp	r3, #1
   81480:	d1bc      	bne.n	813fc <xTaskResumeAll+0x38>
   81482:	e7f1      	b.n	81468 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81484:	2400      	movs	r4, #0
   81486:	e7b9      	b.n	813fc <xTaskResumeAll+0x38>
   81488:	2007ab88 	.word	0x2007ab88
   8148c:	000807dd 	.word	0x000807dd
   81490:	000807ed 	.word	0x000807ed
   81494:	2007ab80 	.word	0x2007ab80
   81498:	00080757 	.word	0x00080757
   8149c:	2007ab94 	.word	0x2007ab94
   814a0:	0008080d 	.word	0x0008080d
   814a4:	2007ab1c 	.word	0x2007ab1c
   814a8:	00080701 	.word	0x00080701
   814ac:	2007ab10 	.word	0x2007ab10
   814b0:	2007ab84 	.word	0x2007ab84
   814b4:	0008129d 	.word	0x0008129d
   814b8:	2007abc4 	.word	0x2007abc4
   814bc:	000807cd 	.word	0x000807cd
   814c0:	2007abcc 	.word	0x2007abcc

000814c4 <vTaskDelayUntil>:
	{
   814c4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   814c6:	b130      	cbz	r0, 814d6 <vTaskDelayUntil+0x12>
   814c8:	460c      	mov	r4, r1
   814ca:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   814cc:	b939      	cbnz	r1, 814de <vTaskDelayUntil+0x1a>
   814ce:	4b18      	ldr	r3, [pc, #96]	; (81530 <vTaskDelayUntil+0x6c>)
   814d0:	4798      	blx	r3
   814d2:	bf00      	nop
   814d4:	e7fd      	b.n	814d2 <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   814d6:	4b16      	ldr	r3, [pc, #88]	; (81530 <vTaskDelayUntil+0x6c>)
   814d8:	4798      	blx	r3
   814da:	bf00      	nop
   814dc:	e7fd      	b.n	814da <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   814de:	4b15      	ldr	r3, [pc, #84]	; (81534 <vTaskDelayUntil+0x70>)
   814e0:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   814e2:	682b      	ldr	r3, [r5, #0]
   814e4:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   814e6:	4a14      	ldr	r2, [pc, #80]	; (81538 <vTaskDelayUntil+0x74>)
   814e8:	6812      	ldr	r2, [r2, #0]
   814ea:	4293      	cmp	r3, r2
   814ec:	d90a      	bls.n	81504 <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   814ee:	42a3      	cmp	r3, r4
   814f0:	d90e      	bls.n	81510 <vTaskDelayUntil+0x4c>
   814f2:	4b11      	ldr	r3, [pc, #68]	; (81538 <vTaskDelayUntil+0x74>)
   814f4:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   814f6:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   814f8:	429c      	cmp	r4, r3
   814fa:	d80f      	bhi.n	8151c <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   814fc:	4b0f      	ldr	r3, [pc, #60]	; (8153c <vTaskDelayUntil+0x78>)
   814fe:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81500:	b140      	cbz	r0, 81514 <vTaskDelayUntil+0x50>
   81502:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81504:	42a3      	cmp	r3, r4
   81506:	d808      	bhi.n	8151a <vTaskDelayUntil+0x56>
   81508:	4b0b      	ldr	r3, [pc, #44]	; (81538 <vTaskDelayUntil+0x74>)
   8150a:	681b      	ldr	r3, [r3, #0]
   8150c:	429c      	cmp	r4, r3
   8150e:	d804      	bhi.n	8151a <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   81510:	602c      	str	r4, [r5, #0]
   81512:	e7f3      	b.n	814fc <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   81514:	4b0a      	ldr	r3, [pc, #40]	; (81540 <vTaskDelayUntil+0x7c>)
   81516:	4798      	blx	r3
	}
   81518:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   8151a:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8151c:	4b09      	ldr	r3, [pc, #36]	; (81544 <vTaskDelayUntil+0x80>)
   8151e:	6818      	ldr	r0, [r3, #0]
   81520:	3004      	adds	r0, #4
   81522:	4b09      	ldr	r3, [pc, #36]	; (81548 <vTaskDelayUntil+0x84>)
   81524:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81526:	4620      	mov	r0, r4
   81528:	4b08      	ldr	r3, [pc, #32]	; (8154c <vTaskDelayUntil+0x88>)
   8152a:	4798      	blx	r3
   8152c:	e7e6      	b.n	814fc <vTaskDelayUntil+0x38>
   8152e:	bf00      	nop
   81530:	000807dd 	.word	0x000807dd
   81534:	0008126d 	.word	0x0008126d
   81538:	2007ac0c 	.word	0x2007ac0c
   8153c:	000813c5 	.word	0x000813c5
   81540:	000807cd 	.word	0x000807cd
   81544:	2007ab10 	.word	0x2007ab10
   81548:	00080757 	.word	0x00080757
   8154c:	00080fa9 	.word	0x00080fa9

00081550 <prvIdleTask>:
{
   81550:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81552:	4d16      	ldr	r5, [pc, #88]	; (815ac <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   81554:	f8df 8078 	ldr.w	r8, [pc, #120]	; 815d0 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81558:	4e15      	ldr	r6, [pc, #84]	; (815b0 <prvIdleTask+0x60>)
   8155a:	e024      	b.n	815a6 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8155c:	4b15      	ldr	r3, [pc, #84]	; (815b4 <prvIdleTask+0x64>)
   8155e:	681b      	ldr	r3, [r3, #0]
   81560:	2b01      	cmp	r3, #1
   81562:	d81e      	bhi.n	815a2 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81564:	682b      	ldr	r3, [r5, #0]
   81566:	2b00      	cmp	r3, #0
   81568:	d0f8      	beq.n	8155c <prvIdleTask+0xc>
			vTaskSuspendAll();
   8156a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   8156c:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8156e:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   81570:	2c00      	cmp	r4, #0
   81572:	d0f7      	beq.n	81564 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81574:	4b10      	ldr	r3, [pc, #64]	; (815b8 <prvIdleTask+0x68>)
   81576:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81578:	68f3      	ldr	r3, [r6, #12]
   8157a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8157c:	1d20      	adds	r0, r4, #4
   8157e:	4b0f      	ldr	r3, [pc, #60]	; (815bc <prvIdleTask+0x6c>)
   81580:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81582:	4a0f      	ldr	r2, [pc, #60]	; (815c0 <prvIdleTask+0x70>)
   81584:	6813      	ldr	r3, [r2, #0]
   81586:	3b01      	subs	r3, #1
   81588:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   8158a:	682b      	ldr	r3, [r5, #0]
   8158c:	3b01      	subs	r3, #1
   8158e:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   81590:	4b0c      	ldr	r3, [pc, #48]	; (815c4 <prvIdleTask+0x74>)
   81592:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81594:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81596:	f8df 903c 	ldr.w	r9, [pc, #60]	; 815d4 <prvIdleTask+0x84>
   8159a:	47c8      	blx	r9
		vPortFree( pxTCB );
   8159c:	4620      	mov	r0, r4
   8159e:	47c8      	blx	r9
   815a0:	e7e0      	b.n	81564 <prvIdleTask+0x14>
				taskYIELD();
   815a2:	4b09      	ldr	r3, [pc, #36]	; (815c8 <prvIdleTask+0x78>)
   815a4:	4798      	blx	r3
			xTaskResumeAll();
   815a6:	4f09      	ldr	r7, [pc, #36]	; (815cc <prvIdleTask+0x7c>)
   815a8:	e7dc      	b.n	81564 <prvIdleTask+0x14>
   815aa:	bf00      	nop
   815ac:	2007ab90 	.word	0x2007ab90
   815b0:	2007abf8 	.word	0x2007abf8
   815b4:	2007ab1c 	.word	0x2007ab1c
   815b8:	000807ed 	.word	0x000807ed
   815bc:	00080757 	.word	0x00080757
   815c0:	2007ab80 	.word	0x2007ab80
   815c4:	0008080d 	.word	0x0008080d
   815c8:	000807cd 	.word	0x000807cd
   815cc:	000813c5 	.word	0x000813c5
   815d0:	0008126d 	.word	0x0008126d
   815d4:	00080a09 	.word	0x00080a09

000815d8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   815d8:	4b21      	ldr	r3, [pc, #132]	; (81660 <vTaskSwitchContext+0x88>)
   815da:	681b      	ldr	r3, [r3, #0]
   815dc:	b9eb      	cbnz	r3, 8161a <vTaskSwitchContext+0x42>
{
   815de:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   815e0:	4b20      	ldr	r3, [pc, #128]	; (81664 <vTaskSwitchContext+0x8c>)
   815e2:	681b      	ldr	r3, [r3, #0]
   815e4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   815e8:	009b      	lsls	r3, r3, #2
   815ea:	4a1f      	ldr	r2, [pc, #124]	; (81668 <vTaskSwitchContext+0x90>)
   815ec:	58d3      	ldr	r3, [r2, r3]
   815ee:	b9c3      	cbnz	r3, 81622 <vTaskSwitchContext+0x4a>
   815f0:	4b1c      	ldr	r3, [pc, #112]	; (81664 <vTaskSwitchContext+0x8c>)
   815f2:	681b      	ldr	r3, [r3, #0]
   815f4:	b16b      	cbz	r3, 81612 <vTaskSwitchContext+0x3a>
   815f6:	4a1b      	ldr	r2, [pc, #108]	; (81664 <vTaskSwitchContext+0x8c>)
   815f8:	491b      	ldr	r1, [pc, #108]	; (81668 <vTaskSwitchContext+0x90>)
   815fa:	6813      	ldr	r3, [r2, #0]
   815fc:	3b01      	subs	r3, #1
   815fe:	6013      	str	r3, [r2, #0]
   81600:	6813      	ldr	r3, [r2, #0]
   81602:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8160a:	b953      	cbnz	r3, 81622 <vTaskSwitchContext+0x4a>
   8160c:	6813      	ldr	r3, [r2, #0]
   8160e:	2b00      	cmp	r3, #0
   81610:	d1f3      	bne.n	815fa <vTaskSwitchContext+0x22>
   81612:	4b16      	ldr	r3, [pc, #88]	; (8166c <vTaskSwitchContext+0x94>)
   81614:	4798      	blx	r3
   81616:	bf00      	nop
   81618:	e7fd      	b.n	81616 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   8161a:	2201      	movs	r2, #1
   8161c:	4b14      	ldr	r3, [pc, #80]	; (81670 <vTaskSwitchContext+0x98>)
   8161e:	601a      	str	r2, [r3, #0]
   81620:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81622:	4b10      	ldr	r3, [pc, #64]	; (81664 <vTaskSwitchContext+0x8c>)
   81624:	681b      	ldr	r3, [r3, #0]
   81626:	4a10      	ldr	r2, [pc, #64]	; (81668 <vTaskSwitchContext+0x90>)
   81628:	0099      	lsls	r1, r3, #2
   8162a:	18c8      	adds	r0, r1, r3
   8162c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81630:	6844      	ldr	r4, [r0, #4]
   81632:	6864      	ldr	r4, [r4, #4]
   81634:	6044      	str	r4, [r0, #4]
   81636:	4419      	add	r1, r3
   81638:	4602      	mov	r2, r0
   8163a:	3208      	adds	r2, #8
   8163c:	4294      	cmp	r4, r2
   8163e:	d009      	beq.n	81654 <vTaskSwitchContext+0x7c>
   81640:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81644:	4a08      	ldr	r2, [pc, #32]	; (81668 <vTaskSwitchContext+0x90>)
   81646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8164a:	685b      	ldr	r3, [r3, #4]
   8164c:	68da      	ldr	r2, [r3, #12]
   8164e:	4b09      	ldr	r3, [pc, #36]	; (81674 <vTaskSwitchContext+0x9c>)
   81650:	601a      	str	r2, [r3, #0]
   81652:	bd10      	pop	{r4, pc}
   81654:	6860      	ldr	r0, [r4, #4]
   81656:	4a04      	ldr	r2, [pc, #16]	; (81668 <vTaskSwitchContext+0x90>)
   81658:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   8165c:	6050      	str	r0, [r2, #4]
   8165e:	e7ef      	b.n	81640 <vTaskSwitchContext+0x68>
   81660:	2007ab88 	.word	0x2007ab88
   81664:	2007ab94 	.word	0x2007ab94
   81668:	2007ab1c 	.word	0x2007ab1c
   8166c:	000807dd 	.word	0x000807dd
   81670:	2007abc4 	.word	0x2007abc4
   81674:	2007ab10 	.word	0x2007ab10

00081678 <vTaskPlaceOnEventList>:
{
   81678:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   8167a:	b190      	cbz	r0, 816a2 <vTaskPlaceOnEventList+0x2a>
   8167c:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8167e:	4d0e      	ldr	r5, [pc, #56]	; (816b8 <vTaskPlaceOnEventList+0x40>)
   81680:	6829      	ldr	r1, [r5, #0]
   81682:	3118      	adds	r1, #24
   81684:	4b0d      	ldr	r3, [pc, #52]	; (816bc <vTaskPlaceOnEventList+0x44>)
   81686:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81688:	6828      	ldr	r0, [r5, #0]
   8168a:	3004      	adds	r0, #4
   8168c:	4b0c      	ldr	r3, [pc, #48]	; (816c0 <vTaskPlaceOnEventList+0x48>)
   8168e:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   81690:	f1b4 3fff 	cmp.w	r4, #4294967295
   81694:	d009      	beq.n	816aa <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   81696:	4b0b      	ldr	r3, [pc, #44]	; (816c4 <vTaskPlaceOnEventList+0x4c>)
   81698:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8169a:	4420      	add	r0, r4
   8169c:	4b0a      	ldr	r3, [pc, #40]	; (816c8 <vTaskPlaceOnEventList+0x50>)
   8169e:	4798      	blx	r3
   816a0:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   816a2:	4b0a      	ldr	r3, [pc, #40]	; (816cc <vTaskPlaceOnEventList+0x54>)
   816a4:	4798      	blx	r3
   816a6:	bf00      	nop
   816a8:	e7fd      	b.n	816a6 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   816aa:	6829      	ldr	r1, [r5, #0]
   816ac:	3104      	adds	r1, #4
   816ae:	4808      	ldr	r0, [pc, #32]	; (816d0 <vTaskPlaceOnEventList+0x58>)
   816b0:	4b08      	ldr	r3, [pc, #32]	; (816d4 <vTaskPlaceOnEventList+0x5c>)
   816b2:	4798      	blx	r3
   816b4:	bd38      	pop	{r3, r4, r5, pc}
   816b6:	bf00      	nop
   816b8:	2007ab10 	.word	0x2007ab10
   816bc:	0008071d 	.word	0x0008071d
   816c0:	00080757 	.word	0x00080757
   816c4:	2007ac0c 	.word	0x2007ac0c
   816c8:	00080fa9 	.word	0x00080fa9
   816cc:	000807dd 	.word	0x000807dd
   816d0:	2007abe4 	.word	0x2007abe4
   816d4:	00080701 	.word	0x00080701

000816d8 <vTaskPlaceOnEventListRestricted>:
	{
   816d8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   816da:	b178      	cbz	r0, 816fc <vTaskPlaceOnEventListRestricted+0x24>
   816dc:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   816de:	4c09      	ldr	r4, [pc, #36]	; (81704 <vTaskPlaceOnEventListRestricted+0x2c>)
   816e0:	6821      	ldr	r1, [r4, #0]
   816e2:	3118      	adds	r1, #24
   816e4:	4b08      	ldr	r3, [pc, #32]	; (81708 <vTaskPlaceOnEventListRestricted+0x30>)
   816e6:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   816e8:	6820      	ldr	r0, [r4, #0]
   816ea:	3004      	adds	r0, #4
   816ec:	4b07      	ldr	r3, [pc, #28]	; (8170c <vTaskPlaceOnEventListRestricted+0x34>)
   816ee:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   816f0:	4b07      	ldr	r3, [pc, #28]	; (81710 <vTaskPlaceOnEventListRestricted+0x38>)
   816f2:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   816f4:	4428      	add	r0, r5
   816f6:	4b07      	ldr	r3, [pc, #28]	; (81714 <vTaskPlaceOnEventListRestricted+0x3c>)
   816f8:	4798      	blx	r3
   816fa:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   816fc:	4b06      	ldr	r3, [pc, #24]	; (81718 <vTaskPlaceOnEventListRestricted+0x40>)
   816fe:	4798      	blx	r3
   81700:	bf00      	nop
   81702:	e7fd      	b.n	81700 <vTaskPlaceOnEventListRestricted+0x28>
   81704:	2007ab10 	.word	0x2007ab10
   81708:	00080701 	.word	0x00080701
   8170c:	00080757 	.word	0x00080757
   81710:	2007ac0c 	.word	0x2007ac0c
   81714:	00080fa9 	.word	0x00080fa9
   81718:	000807dd 	.word	0x000807dd

0008171c <xTaskRemoveFromEventList>:
{
   8171c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8171e:	68c3      	ldr	r3, [r0, #12]
   81720:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81722:	b31c      	cbz	r4, 8176c <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81724:	f104 0518 	add.w	r5, r4, #24
   81728:	4628      	mov	r0, r5
   8172a:	4b15      	ldr	r3, [pc, #84]	; (81780 <xTaskRemoveFromEventList+0x64>)
   8172c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8172e:	4b15      	ldr	r3, [pc, #84]	; (81784 <xTaskRemoveFromEventList+0x68>)
   81730:	681b      	ldr	r3, [r3, #0]
   81732:	b9fb      	cbnz	r3, 81774 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81734:	1d25      	adds	r5, r4, #4
   81736:	4628      	mov	r0, r5
   81738:	4b11      	ldr	r3, [pc, #68]	; (81780 <xTaskRemoveFromEventList+0x64>)
   8173a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   8173c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8173e:	4b12      	ldr	r3, [pc, #72]	; (81788 <xTaskRemoveFromEventList+0x6c>)
   81740:	681b      	ldr	r3, [r3, #0]
   81742:	4298      	cmp	r0, r3
   81744:	bf84      	itt	hi
   81746:	4b10      	ldrhi	r3, [pc, #64]	; (81788 <xTaskRemoveFromEventList+0x6c>)
   81748:	6018      	strhi	r0, [r3, #0]
   8174a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8174e:	4629      	mov	r1, r5
   81750:	4b0e      	ldr	r3, [pc, #56]	; (8178c <xTaskRemoveFromEventList+0x70>)
   81752:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81756:	4b0e      	ldr	r3, [pc, #56]	; (81790 <xTaskRemoveFromEventList+0x74>)
   81758:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8175a:	4b0e      	ldr	r3, [pc, #56]	; (81794 <xTaskRemoveFromEventList+0x78>)
   8175c:	681b      	ldr	r3, [r3, #0]
   8175e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81762:	4298      	cmp	r0, r3
   81764:	bf34      	ite	cc
   81766:	2000      	movcc	r0, #0
   81768:	2001      	movcs	r0, #1
   8176a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   8176c:	4b0a      	ldr	r3, [pc, #40]	; (81798 <xTaskRemoveFromEventList+0x7c>)
   8176e:	4798      	blx	r3
   81770:	bf00      	nop
   81772:	e7fd      	b.n	81770 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81774:	4629      	mov	r1, r5
   81776:	4809      	ldr	r0, [pc, #36]	; (8179c <xTaskRemoveFromEventList+0x80>)
   81778:	4b05      	ldr	r3, [pc, #20]	; (81790 <xTaskRemoveFromEventList+0x74>)
   8177a:	4798      	blx	r3
   8177c:	e7ed      	b.n	8175a <xTaskRemoveFromEventList+0x3e>
   8177e:	bf00      	nop
   81780:	00080757 	.word	0x00080757
   81784:	2007ab88 	.word	0x2007ab88
   81788:	2007ab94 	.word	0x2007ab94
   8178c:	2007ab1c 	.word	0x2007ab1c
   81790:	00080701 	.word	0x00080701
   81794:	2007ab10 	.word	0x2007ab10
   81798:	000807dd 	.word	0x000807dd
   8179c:	2007abcc 	.word	0x2007abcc

000817a0 <vTaskSetTimeOutState>:
{
   817a0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   817a2:	b130      	cbz	r0, 817b2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   817a4:	4a05      	ldr	r2, [pc, #20]	; (817bc <vTaskSetTimeOutState+0x1c>)
   817a6:	6812      	ldr	r2, [r2, #0]
   817a8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   817aa:	4a05      	ldr	r2, [pc, #20]	; (817c0 <vTaskSetTimeOutState+0x20>)
   817ac:	6812      	ldr	r2, [r2, #0]
   817ae:	6042      	str	r2, [r0, #4]
   817b0:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   817b2:	4b04      	ldr	r3, [pc, #16]	; (817c4 <vTaskSetTimeOutState+0x24>)
   817b4:	4798      	blx	r3
   817b6:	bf00      	nop
   817b8:	e7fd      	b.n	817b6 <vTaskSetTimeOutState+0x16>
   817ba:	bf00      	nop
   817bc:	2007abc8 	.word	0x2007abc8
   817c0:	2007ac0c 	.word	0x2007ac0c
   817c4:	000807dd 	.word	0x000807dd

000817c8 <xTaskCheckForTimeOut>:
{
   817c8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   817ca:	b1e8      	cbz	r0, 81808 <xTaskCheckForTimeOut+0x40>
   817cc:	460d      	mov	r5, r1
   817ce:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   817d0:	b1f1      	cbz	r1, 81810 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   817d2:	4b18      	ldr	r3, [pc, #96]	; (81834 <xTaskCheckForTimeOut+0x6c>)
   817d4:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   817d6:	682b      	ldr	r3, [r5, #0]
   817d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   817dc:	d026      	beq.n	8182c <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   817de:	4a16      	ldr	r2, [pc, #88]	; (81838 <xTaskCheckForTimeOut+0x70>)
   817e0:	6812      	ldr	r2, [r2, #0]
   817e2:	6821      	ldr	r1, [r4, #0]
   817e4:	4291      	cmp	r1, r2
   817e6:	d004      	beq.n	817f2 <xTaskCheckForTimeOut+0x2a>
   817e8:	4a14      	ldr	r2, [pc, #80]	; (8183c <xTaskCheckForTimeOut+0x74>)
   817ea:	6812      	ldr	r2, [r2, #0]
   817ec:	6861      	ldr	r1, [r4, #4]
   817ee:	4291      	cmp	r1, r2
   817f0:	d91e      	bls.n	81830 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   817f2:	4a12      	ldr	r2, [pc, #72]	; (8183c <xTaskCheckForTimeOut+0x74>)
   817f4:	6812      	ldr	r2, [r2, #0]
   817f6:	6861      	ldr	r1, [r4, #4]
   817f8:	1a52      	subs	r2, r2, r1
   817fa:	4293      	cmp	r3, r2
   817fc:	d80c      	bhi.n	81818 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   817fe:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81800:	4b0f      	ldr	r3, [pc, #60]	; (81840 <xTaskCheckForTimeOut+0x78>)
   81802:	4798      	blx	r3
}
   81804:	4620      	mov	r0, r4
   81806:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81808:	4b0e      	ldr	r3, [pc, #56]	; (81844 <xTaskCheckForTimeOut+0x7c>)
   8180a:	4798      	blx	r3
   8180c:	bf00      	nop
   8180e:	e7fd      	b.n	8180c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81810:	4b0c      	ldr	r3, [pc, #48]	; (81844 <xTaskCheckForTimeOut+0x7c>)
   81812:	4798      	blx	r3
   81814:	bf00      	nop
   81816:	e7fd      	b.n	81814 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81818:	4a08      	ldr	r2, [pc, #32]	; (8183c <xTaskCheckForTimeOut+0x74>)
   8181a:	6812      	ldr	r2, [r2, #0]
   8181c:	1a52      	subs	r2, r2, r1
   8181e:	1a9b      	subs	r3, r3, r2
   81820:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81822:	4620      	mov	r0, r4
   81824:	4b08      	ldr	r3, [pc, #32]	; (81848 <xTaskCheckForTimeOut+0x80>)
   81826:	4798      	blx	r3
			xReturn = pdFALSE;
   81828:	2400      	movs	r4, #0
   8182a:	e7e9      	b.n	81800 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   8182c:	2400      	movs	r4, #0
   8182e:	e7e7      	b.n	81800 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81830:	2401      	movs	r4, #1
   81832:	e7e5      	b.n	81800 <xTaskCheckForTimeOut+0x38>
   81834:	000807ed 	.word	0x000807ed
   81838:	2007abc8 	.word	0x2007abc8
   8183c:	2007ac0c 	.word	0x2007ac0c
   81840:	0008080d 	.word	0x0008080d
   81844:	000807dd 	.word	0x000807dd
   81848:	000817a1 	.word	0x000817a1

0008184c <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   8184c:	2201      	movs	r2, #1
   8184e:	4b01      	ldr	r3, [pc, #4]	; (81854 <vTaskMissedYield+0x8>)
   81850:	601a      	str	r2, [r3, #0]
   81852:	4770      	bx	lr
   81854:	2007abc4 	.word	0x2007abc4

00081858 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81858:	4b01      	ldr	r3, [pc, #4]	; (81860 <xTaskGetCurrentTaskHandle+0x8>)
   8185a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   8185c:	4770      	bx	lr
   8185e:	bf00      	nop
   81860:	2007ab10 	.word	0x2007ab10

00081864 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81864:	4b05      	ldr	r3, [pc, #20]	; (8187c <xTaskGetSchedulerState+0x18>)
   81866:	681b      	ldr	r3, [r3, #0]
   81868:	b133      	cbz	r3, 81878 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8186a:	4b05      	ldr	r3, [pc, #20]	; (81880 <xTaskGetSchedulerState+0x1c>)
   8186c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8186e:	2b00      	cmp	r3, #0
   81870:	bf0c      	ite	eq
   81872:	2001      	moveq	r0, #1
   81874:	2002      	movne	r0, #2
   81876:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81878:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   8187a:	4770      	bx	lr
   8187c:	2007abe0 	.word	0x2007abe0
   81880:	2007ab88 	.word	0x2007ab88

00081884 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81884:	2800      	cmp	r0, #0
   81886:	d031      	beq.n	818ec <vTaskPriorityInherit+0x68>
	{
   81888:	b538      	push	{r3, r4, r5, lr}
   8188a:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   8188c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8188e:	4918      	ldr	r1, [pc, #96]	; (818f0 <vTaskPriorityInherit+0x6c>)
   81890:	6809      	ldr	r1, [r1, #0]
   81892:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81894:	428b      	cmp	r3, r1
   81896:	d211      	bcs.n	818bc <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81898:	4915      	ldr	r1, [pc, #84]	; (818f0 <vTaskPriorityInherit+0x6c>)
   8189a:	6809      	ldr	r1, [r1, #0]
   8189c:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8189e:	f1c1 0105 	rsb	r1, r1, #5
   818a2:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   818a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818a8:	4912      	ldr	r1, [pc, #72]	; (818f4 <vTaskPriorityInherit+0x70>)
   818aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   818ae:	6941      	ldr	r1, [r0, #20]
   818b0:	4299      	cmp	r1, r3
   818b2:	d004      	beq.n	818be <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   818b4:	4b0e      	ldr	r3, [pc, #56]	; (818f0 <vTaskPriorityInherit+0x6c>)
   818b6:	681b      	ldr	r3, [r3, #0]
   818b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   818ba:	62c3      	str	r3, [r0, #44]	; 0x2c
   818bc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   818be:	1d04      	adds	r4, r0, #4
   818c0:	4620      	mov	r0, r4
   818c2:	4b0d      	ldr	r3, [pc, #52]	; (818f8 <vTaskPriorityInherit+0x74>)
   818c4:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   818c6:	4b0a      	ldr	r3, [pc, #40]	; (818f0 <vTaskPriorityInherit+0x6c>)
   818c8:	681b      	ldr	r3, [r3, #0]
   818ca:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   818cc:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   818ce:	4b0b      	ldr	r3, [pc, #44]	; (818fc <vTaskPriorityInherit+0x78>)
   818d0:	681b      	ldr	r3, [r3, #0]
   818d2:	4298      	cmp	r0, r3
   818d4:	bf84      	itt	hi
   818d6:	4b09      	ldrhi	r3, [pc, #36]	; (818fc <vTaskPriorityInherit+0x78>)
   818d8:	6018      	strhi	r0, [r3, #0]
   818da:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   818de:	4621      	mov	r1, r4
   818e0:	4b04      	ldr	r3, [pc, #16]	; (818f4 <vTaskPriorityInherit+0x70>)
   818e2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   818e6:	4b06      	ldr	r3, [pc, #24]	; (81900 <vTaskPriorityInherit+0x7c>)
   818e8:	4798      	blx	r3
   818ea:	bd38      	pop	{r3, r4, r5, pc}
   818ec:	4770      	bx	lr
   818ee:	bf00      	nop
   818f0:	2007ab10 	.word	0x2007ab10
   818f4:	2007ab1c 	.word	0x2007ab1c
   818f8:	00080757 	.word	0x00080757
   818fc:	2007ab94 	.word	0x2007ab94
   81900:	00080701 	.word	0x00080701

00081904 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81904:	b1e8      	cbz	r0, 81942 <vTaskPriorityDisinherit+0x3e>
	{
   81906:	b538      	push	{r3, r4, r5, lr}
   81908:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   8190a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   8190c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   8190e:	4291      	cmp	r1, r2
   81910:	d016      	beq.n	81940 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81912:	1d05      	adds	r5, r0, #4
   81914:	4628      	mov	r0, r5
   81916:	4b0b      	ldr	r3, [pc, #44]	; (81944 <vTaskPriorityDisinherit+0x40>)
   81918:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   8191a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   8191c:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   8191e:	f1c0 0305 	rsb	r3, r0, #5
   81922:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81924:	4b08      	ldr	r3, [pc, #32]	; (81948 <vTaskPriorityDisinherit+0x44>)
   81926:	681b      	ldr	r3, [r3, #0]
   81928:	4298      	cmp	r0, r3
   8192a:	bf84      	itt	hi
   8192c:	4b06      	ldrhi	r3, [pc, #24]	; (81948 <vTaskPriorityDisinherit+0x44>)
   8192e:	6018      	strhi	r0, [r3, #0]
   81930:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81934:	4629      	mov	r1, r5
   81936:	4b05      	ldr	r3, [pc, #20]	; (8194c <vTaskPriorityDisinherit+0x48>)
   81938:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8193c:	4b04      	ldr	r3, [pc, #16]	; (81950 <vTaskPriorityDisinherit+0x4c>)
   8193e:	4798      	blx	r3
   81940:	bd38      	pop	{r3, r4, r5, pc}
   81942:	4770      	bx	lr
   81944:	00080757 	.word	0x00080757
   81948:	2007ab94 	.word	0x2007ab94
   8194c:	2007ab1c 	.word	0x2007ab1c
   81950:	00080701 	.word	0x00080701

00081954 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81954:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81956:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81958:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   8195a:	4291      	cmp	r1, r2
   8195c:	d80c      	bhi.n	81978 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8195e:	1ad2      	subs	r2, r2, r3
   81960:	6983      	ldr	r3, [r0, #24]
   81962:	429a      	cmp	r2, r3
   81964:	d301      	bcc.n	8196a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81966:	2001      	movs	r0, #1
   81968:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   8196a:	1d01      	adds	r1, r0, #4
   8196c:	4b09      	ldr	r3, [pc, #36]	; (81994 <prvInsertTimerInActiveList+0x40>)
   8196e:	6818      	ldr	r0, [r3, #0]
   81970:	4b09      	ldr	r3, [pc, #36]	; (81998 <prvInsertTimerInActiveList+0x44>)
   81972:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81974:	2000      	movs	r0, #0
   81976:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81978:	429a      	cmp	r2, r3
   8197a:	d201      	bcs.n	81980 <prvInsertTimerInActiveList+0x2c>
   8197c:	4299      	cmp	r1, r3
   8197e:	d206      	bcs.n	8198e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81980:	1d01      	adds	r1, r0, #4
   81982:	4b06      	ldr	r3, [pc, #24]	; (8199c <prvInsertTimerInActiveList+0x48>)
   81984:	6818      	ldr	r0, [r3, #0]
   81986:	4b04      	ldr	r3, [pc, #16]	; (81998 <prvInsertTimerInActiveList+0x44>)
   81988:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   8198a:	2000      	movs	r0, #0
   8198c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   8198e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81990:	bd08      	pop	{r3, pc}
   81992:	bf00      	nop
   81994:	2007ac14 	.word	0x2007ac14
   81998:	0008071d 	.word	0x0008071d
   8199c:	2007ac10 	.word	0x2007ac10

000819a0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   819a0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   819a2:	4b0d      	ldr	r3, [pc, #52]	; (819d8 <prvCheckForValidListAndQueue+0x38>)
   819a4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   819a6:	4b0d      	ldr	r3, [pc, #52]	; (819dc <prvCheckForValidListAndQueue+0x3c>)
   819a8:	681b      	ldr	r3, [r3, #0]
   819aa:	b113      	cbz	r3, 819b2 <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   819ac:	4b0c      	ldr	r3, [pc, #48]	; (819e0 <prvCheckForValidListAndQueue+0x40>)
   819ae:	4798      	blx	r3
   819b0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   819b2:	4d0c      	ldr	r5, [pc, #48]	; (819e4 <prvCheckForValidListAndQueue+0x44>)
   819b4:	4628      	mov	r0, r5
   819b6:	4e0c      	ldr	r6, [pc, #48]	; (819e8 <prvCheckForValidListAndQueue+0x48>)
   819b8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   819ba:	4c0c      	ldr	r4, [pc, #48]	; (819ec <prvCheckForValidListAndQueue+0x4c>)
   819bc:	4620      	mov	r0, r4
   819be:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   819c0:	4b0b      	ldr	r3, [pc, #44]	; (819f0 <prvCheckForValidListAndQueue+0x50>)
   819c2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   819c4:	4b0b      	ldr	r3, [pc, #44]	; (819f4 <prvCheckForValidListAndQueue+0x54>)
   819c6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   819c8:	2200      	movs	r2, #0
   819ca:	210c      	movs	r1, #12
   819cc:	2005      	movs	r0, #5
   819ce:	4b0a      	ldr	r3, [pc, #40]	; (819f8 <prvCheckForValidListAndQueue+0x58>)
   819d0:	4798      	blx	r3
   819d2:	4b02      	ldr	r3, [pc, #8]	; (819dc <prvCheckForValidListAndQueue+0x3c>)
   819d4:	6018      	str	r0, [r3, #0]
   819d6:	e7e9      	b.n	819ac <prvCheckForValidListAndQueue+0xc>
   819d8:	000807ed 	.word	0x000807ed
   819dc:	2007ac44 	.word	0x2007ac44
   819e0:	0008080d 	.word	0x0008080d
   819e4:	2007ac18 	.word	0x2007ac18
   819e8:	000806e5 	.word	0x000806e5
   819ec:	2007ac2c 	.word	0x2007ac2c
   819f0:	2007ac10 	.word	0x2007ac10
   819f4:	2007ac14 	.word	0x2007ac14
   819f8:	00080be5 	.word	0x00080be5

000819fc <xTimerCreateTimerTask>:
{
   819fc:	b510      	push	{r4, lr}
   819fe:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   81a00:	4b0b      	ldr	r3, [pc, #44]	; (81a30 <xTimerCreateTimerTask+0x34>)
   81a02:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81a04:	4b0b      	ldr	r3, [pc, #44]	; (81a34 <xTimerCreateTimerTask+0x38>)
   81a06:	681b      	ldr	r3, [r3, #0]
   81a08:	b173      	cbz	r3, 81a28 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81a0a:	2300      	movs	r3, #0
   81a0c:	9303      	str	r3, [sp, #12]
   81a0e:	9302      	str	r3, [sp, #8]
   81a10:	9301      	str	r3, [sp, #4]
   81a12:	2204      	movs	r2, #4
   81a14:	9200      	str	r2, [sp, #0]
   81a16:	f44f 7282 	mov.w	r2, #260	; 0x104
   81a1a:	4907      	ldr	r1, [pc, #28]	; (81a38 <xTimerCreateTimerTask+0x3c>)
   81a1c:	4807      	ldr	r0, [pc, #28]	; (81a3c <xTimerCreateTimerTask+0x40>)
   81a1e:	4c08      	ldr	r4, [pc, #32]	; (81a40 <xTimerCreateTimerTask+0x44>)
   81a20:	47a0      	blx	r4
	configASSERT( xReturn );
   81a22:	b108      	cbz	r0, 81a28 <xTimerCreateTimerTask+0x2c>
}
   81a24:	b004      	add	sp, #16
   81a26:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   81a28:	4b06      	ldr	r3, [pc, #24]	; (81a44 <xTimerCreateTimerTask+0x48>)
   81a2a:	4798      	blx	r3
   81a2c:	bf00      	nop
   81a2e:	e7fd      	b.n	81a2c <xTimerCreateTimerTask+0x30>
   81a30:	000819a1 	.word	0x000819a1
   81a34:	2007ac44 	.word	0x2007ac44
   81a38:	000853c0 	.word	0x000853c0
   81a3c:	00081b4d 	.word	0x00081b4d
   81a40:	00081001 	.word	0x00081001
   81a44:	000807dd 	.word	0x000807dd

00081a48 <xTimerGenericCommand>:
{
   81a48:	b530      	push	{r4, r5, lr}
   81a4a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81a4c:	4c0f      	ldr	r4, [pc, #60]	; (81a8c <xTimerGenericCommand+0x44>)
   81a4e:	6825      	ldr	r5, [r4, #0]
   81a50:	b1d5      	cbz	r5, 81a88 <xTimerGenericCommand+0x40>
   81a52:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81a54:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81a56:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81a58:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81a5a:	b13b      	cbz	r3, 81a6c <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81a5c:	2300      	movs	r3, #0
   81a5e:	4622      	mov	r2, r4
   81a60:	a901      	add	r1, sp, #4
   81a62:	4628      	mov	r0, r5
   81a64:	4c0a      	ldr	r4, [pc, #40]	; (81a90 <xTimerGenericCommand+0x48>)
   81a66:	47a0      	blx	r4
}
   81a68:	b005      	add	sp, #20
   81a6a:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81a6c:	4b09      	ldr	r3, [pc, #36]	; (81a94 <xTimerGenericCommand+0x4c>)
   81a6e:	4798      	blx	r3
   81a70:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81a72:	f04f 0300 	mov.w	r3, #0
   81a76:	bf0c      	ite	eq
   81a78:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81a7a:	461a      	movne	r2, r3
   81a7c:	a901      	add	r1, sp, #4
   81a7e:	4803      	ldr	r0, [pc, #12]	; (81a8c <xTimerGenericCommand+0x44>)
   81a80:	6800      	ldr	r0, [r0, #0]
   81a82:	4c05      	ldr	r4, [pc, #20]	; (81a98 <xTimerGenericCommand+0x50>)
   81a84:	47a0      	blx	r4
   81a86:	e7ef      	b.n	81a68 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   81a88:	2000      	movs	r0, #0
	return xReturn;
   81a8a:	e7ed      	b.n	81a68 <xTimerGenericCommand+0x20>
   81a8c:	2007ac44 	.word	0x2007ac44
   81a90:	00080d61 	.word	0x00080d61
   81a94:	00081865 	.word	0x00081865
   81a98:	00080c39 	.word	0x00080c39

00081a9c <prvSampleTimeNow>:
{
   81a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81aa0:	b082      	sub	sp, #8
   81aa2:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   81aa4:	4b21      	ldr	r3, [pc, #132]	; (81b2c <prvSampleTimeNow+0x90>)
   81aa6:	4798      	blx	r3
   81aa8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   81aaa:	4b21      	ldr	r3, [pc, #132]	; (81b30 <prvSampleTimeNow+0x94>)
   81aac:	681b      	ldr	r3, [r3, #0]
   81aae:	4298      	cmp	r0, r3
   81ab0:	d315      	bcc.n	81ade <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   81ab2:	2300      	movs	r3, #0
   81ab4:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   81ab8:	4b1d      	ldr	r3, [pc, #116]	; (81b30 <prvSampleTimeNow+0x94>)
   81aba:	f8c3 8000 	str.w	r8, [r3]
}
   81abe:	4640      	mov	r0, r8
   81ac0:	b002      	add	sp, #8
   81ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81ac6:	2100      	movs	r1, #0
   81ac8:	9100      	str	r1, [sp, #0]
   81aca:	460b      	mov	r3, r1
   81acc:	4652      	mov	r2, sl
   81ace:	4620      	mov	r0, r4
   81ad0:	4c18      	ldr	r4, [pc, #96]	; (81b34 <prvSampleTimeNow+0x98>)
   81ad2:	47a0      	blx	r4
				configASSERT( xResult );
   81ad4:	b928      	cbnz	r0, 81ae2 <prvSampleTimeNow+0x46>
   81ad6:	4b18      	ldr	r3, [pc, #96]	; (81b38 <prvSampleTimeNow+0x9c>)
   81ad8:	4798      	blx	r3
   81ada:	bf00      	nop
   81adc:	e7fd      	b.n	81ada <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81ade:	4e17      	ldr	r6, [pc, #92]	; (81b3c <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81ae0:	4f17      	ldr	r7, [pc, #92]	; (81b40 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81ae2:	6833      	ldr	r3, [r6, #0]
   81ae4:	681a      	ldr	r2, [r3, #0]
   81ae6:	b1c2      	cbz	r2, 81b1a <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ae8:	68da      	ldr	r2, [r3, #12]
   81aea:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81aee:	68db      	ldr	r3, [r3, #12]
   81af0:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81af2:	1d25      	adds	r5, r4, #4
   81af4:	4628      	mov	r0, r5
   81af6:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81af8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81afa:	4620      	mov	r0, r4
   81afc:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81afe:	69e3      	ldr	r3, [r4, #28]
   81b00:	2b01      	cmp	r3, #1
   81b02:	d1ee      	bne.n	81ae2 <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81b04:	69a3      	ldr	r3, [r4, #24]
   81b06:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81b08:	459a      	cmp	sl, r3
   81b0a:	d2dc      	bcs.n	81ac6 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81b0c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81b0e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81b10:	4629      	mov	r1, r5
   81b12:	6830      	ldr	r0, [r6, #0]
   81b14:	4b0b      	ldr	r3, [pc, #44]	; (81b44 <prvSampleTimeNow+0xa8>)
   81b16:	4798      	blx	r3
   81b18:	e7e3      	b.n	81ae2 <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   81b1a:	4a0b      	ldr	r2, [pc, #44]	; (81b48 <prvSampleTimeNow+0xac>)
   81b1c:	6810      	ldr	r0, [r2, #0]
   81b1e:	4907      	ldr	r1, [pc, #28]	; (81b3c <prvSampleTimeNow+0xa0>)
   81b20:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81b22:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81b24:	2301      	movs	r3, #1
   81b26:	f8c9 3000 	str.w	r3, [r9]
   81b2a:	e7c5      	b.n	81ab8 <prvSampleTimeNow+0x1c>
   81b2c:	0008127d 	.word	0x0008127d
   81b30:	2007ac40 	.word	0x2007ac40
   81b34:	00081a49 	.word	0x00081a49
   81b38:	000807dd 	.word	0x000807dd
   81b3c:	2007ac10 	.word	0x2007ac10
   81b40:	00080757 	.word	0x00080757
   81b44:	0008071d 	.word	0x0008071d
   81b48:	2007ac14 	.word	0x2007ac14

00081b4c <prvTimerTask>:
{
   81b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b50:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b52:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81cbc <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81b56:	4b4d      	ldr	r3, [pc, #308]	; (81c8c <prvTimerTask+0x140>)
   81b58:	681b      	ldr	r3, [r3, #0]
   81b5a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81b5c:	2a00      	cmp	r2, #0
   81b5e:	f000 8089 	beq.w	81c74 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b62:	68db      	ldr	r3, [r3, #12]
   81b64:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81b66:	4b4a      	ldr	r3, [pc, #296]	; (81c90 <prvTimerTask+0x144>)
   81b68:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b6a:	a803      	add	r0, sp, #12
   81b6c:	4b49      	ldr	r3, [pc, #292]	; (81c94 <prvTimerTask+0x148>)
   81b6e:	4798      	blx	r3
   81b70:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81b72:	9b03      	ldr	r3, [sp, #12]
   81b74:	2b00      	cmp	r3, #0
   81b76:	f040 8086 	bne.w	81c86 <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81b7a:	42a8      	cmp	r0, r5
   81b7c:	d20f      	bcs.n	81b9e <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81b7e:	1ba9      	subs	r1, r5, r6
   81b80:	4b45      	ldr	r3, [pc, #276]	; (81c98 <prvTimerTask+0x14c>)
   81b82:	6818      	ldr	r0, [r3, #0]
   81b84:	4b45      	ldr	r3, [pc, #276]	; (81c9c <prvTimerTask+0x150>)
   81b86:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81b88:	4b45      	ldr	r3, [pc, #276]	; (81ca0 <prvTimerTask+0x154>)
   81b8a:	4798      	blx	r3
   81b8c:	b908      	cbnz	r0, 81b92 <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   81b8e:	4b45      	ldr	r3, [pc, #276]	; (81ca4 <prvTimerTask+0x158>)
   81b90:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81b92:	a802      	add	r0, sp, #8
   81b94:	4b3f      	ldr	r3, [pc, #252]	; (81c94 <prvTimerTask+0x148>)
   81b96:	4798      	blx	r3
   81b98:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81b9a:	4e3f      	ldr	r6, [pc, #252]	; (81c98 <prvTimerTask+0x14c>)
   81b9c:	e036      	b.n	81c0c <prvTimerTask+0xc0>
				xTaskResumeAll();
   81b9e:	4b40      	ldr	r3, [pc, #256]	; (81ca0 <prvTimerTask+0x154>)
   81ba0:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81ba2:	4b3a      	ldr	r3, [pc, #232]	; (81c8c <prvTimerTask+0x140>)
   81ba4:	681b      	ldr	r3, [r3, #0]
   81ba6:	68db      	ldr	r3, [r3, #12]
   81ba8:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81baa:	1d20      	adds	r0, r4, #4
   81bac:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81bae:	69e3      	ldr	r3, [r4, #28]
   81bb0:	2b01      	cmp	r3, #1
   81bb2:	d114      	bne.n	81bde <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81bb4:	69a1      	ldr	r1, [r4, #24]
   81bb6:	462b      	mov	r3, r5
   81bb8:	4632      	mov	r2, r6
   81bba:	4429      	add	r1, r5
   81bbc:	4620      	mov	r0, r4
   81bbe:	4e3a      	ldr	r6, [pc, #232]	; (81ca8 <prvTimerTask+0x15c>)
   81bc0:	47b0      	blx	r6
   81bc2:	2801      	cmp	r0, #1
   81bc4:	d10b      	bne.n	81bde <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81bc6:	2100      	movs	r1, #0
   81bc8:	9100      	str	r1, [sp, #0]
   81bca:	460b      	mov	r3, r1
   81bcc:	462a      	mov	r2, r5
   81bce:	4620      	mov	r0, r4
   81bd0:	4d36      	ldr	r5, [pc, #216]	; (81cac <prvTimerTask+0x160>)
   81bd2:	47a8      	blx	r5
			configASSERT( xResult );
   81bd4:	b918      	cbnz	r0, 81bde <prvTimerTask+0x92>
   81bd6:	4b36      	ldr	r3, [pc, #216]	; (81cb0 <prvTimerTask+0x164>)
   81bd8:	4798      	blx	r3
   81bda:	bf00      	nop
   81bdc:	e7fd      	b.n	81bda <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81bde:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81be0:	4620      	mov	r0, r4
   81be2:	4798      	blx	r3
   81be4:	e7d5      	b.n	81b92 <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   81be6:	2500      	movs	r5, #0
   81be8:	e7c9      	b.n	81b7e <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81bea:	9904      	ldr	r1, [sp, #16]
   81bec:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81bee:	b131      	cbz	r1, 81bfe <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81bf0:	463b      	mov	r3, r7
   81bf2:	463a      	mov	r2, r7
   81bf4:	4439      	add	r1, r7
   81bf6:	4620      	mov	r0, r4
   81bf8:	4c2b      	ldr	r4, [pc, #172]	; (81ca8 <prvTimerTask+0x15c>)
   81bfa:	47a0      	blx	r4
   81bfc:	e006      	b.n	81c0c <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81bfe:	4b2c      	ldr	r3, [pc, #176]	; (81cb0 <prvTimerTask+0x164>)
   81c00:	4798      	blx	r3
   81c02:	bf00      	nop
   81c04:	e7fd      	b.n	81c02 <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   81c06:	4620      	mov	r0, r4
   81c08:	4b2a      	ldr	r3, [pc, #168]	; (81cb4 <prvTimerTask+0x168>)
   81c0a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81c0c:	4d2a      	ldr	r5, [pc, #168]	; (81cb8 <prvTimerTask+0x16c>)
   81c0e:	2300      	movs	r3, #0
   81c10:	461a      	mov	r2, r3
   81c12:	a903      	add	r1, sp, #12
   81c14:	6830      	ldr	r0, [r6, #0]
   81c16:	47a8      	blx	r5
   81c18:	2800      	cmp	r0, #0
   81c1a:	d09c      	beq.n	81b56 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81c1c:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   81c1e:	b11c      	cbz	r4, 81c28 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81c20:	6963      	ldr	r3, [r4, #20]
   81c22:	b10b      	cbz	r3, 81c28 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81c24:	1d20      	adds	r0, r4, #4
   81c26:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81c28:	9b03      	ldr	r3, [sp, #12]
   81c2a:	2b02      	cmp	r3, #2
   81c2c:	d0dd      	beq.n	81bea <prvTimerTask+0x9e>
   81c2e:	2b03      	cmp	r3, #3
   81c30:	d0e9      	beq.n	81c06 <prvTimerTask+0xba>
   81c32:	2b00      	cmp	r3, #0
   81c34:	d1eb      	bne.n	81c0e <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81c36:	9904      	ldr	r1, [sp, #16]
   81c38:	69a0      	ldr	r0, [r4, #24]
   81c3a:	460b      	mov	r3, r1
   81c3c:	463a      	mov	r2, r7
   81c3e:	4401      	add	r1, r0
   81c40:	4620      	mov	r0, r4
   81c42:	4d19      	ldr	r5, [pc, #100]	; (81ca8 <prvTimerTask+0x15c>)
   81c44:	47a8      	blx	r5
   81c46:	2801      	cmp	r0, #1
   81c48:	d1e0      	bne.n	81c0c <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c4c:	4620      	mov	r0, r4
   81c4e:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c50:	69e3      	ldr	r3, [r4, #28]
   81c52:	2b01      	cmp	r3, #1
   81c54:	d1da      	bne.n	81c0c <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81c56:	69a2      	ldr	r2, [r4, #24]
   81c58:	2100      	movs	r1, #0
   81c5a:	9100      	str	r1, [sp, #0]
   81c5c:	460b      	mov	r3, r1
   81c5e:	9804      	ldr	r0, [sp, #16]
   81c60:	4402      	add	r2, r0
   81c62:	4620      	mov	r0, r4
   81c64:	4c11      	ldr	r4, [pc, #68]	; (81cac <prvTimerTask+0x160>)
   81c66:	47a0      	blx	r4
						configASSERT( xResult );
   81c68:	2800      	cmp	r0, #0
   81c6a:	d1cf      	bne.n	81c0c <prvTimerTask+0xc0>
   81c6c:	4b10      	ldr	r3, [pc, #64]	; (81cb0 <prvTimerTask+0x164>)
   81c6e:	4798      	blx	r3
   81c70:	bf00      	nop
   81c72:	e7fd      	b.n	81c70 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81c74:	4b06      	ldr	r3, [pc, #24]	; (81c90 <prvTimerTask+0x144>)
   81c76:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81c78:	a803      	add	r0, sp, #12
   81c7a:	4b06      	ldr	r3, [pc, #24]	; (81c94 <prvTimerTask+0x148>)
   81c7c:	4798      	blx	r3
   81c7e:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81c80:	9b03      	ldr	r3, [sp, #12]
   81c82:	2b00      	cmp	r3, #0
   81c84:	d0af      	beq.n	81be6 <prvTimerTask+0x9a>
			xTaskResumeAll();
   81c86:	4b06      	ldr	r3, [pc, #24]	; (81ca0 <prvTimerTask+0x154>)
   81c88:	4798      	blx	r3
   81c8a:	e782      	b.n	81b92 <prvTimerTask+0x46>
   81c8c:	2007ac10 	.word	0x2007ac10
   81c90:	0008126d 	.word	0x0008126d
   81c94:	00081a9d 	.word	0x00081a9d
   81c98:	2007ac44 	.word	0x2007ac44
   81c9c:	00080f59 	.word	0x00080f59
   81ca0:	000813c5 	.word	0x000813c5
   81ca4:	000807cd 	.word	0x000807cd
   81ca8:	00081955 	.word	0x00081955
   81cac:	00081a49 	.word	0x00081a49
   81cb0:	000807dd 	.word	0x000807dd
   81cb4:	00080a09 	.word	0x00080a09
   81cb8:	00080df1 	.word	0x00080df1
   81cbc:	00080757 	.word	0x00080757

00081cc0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81cc0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81cc2:	480e      	ldr	r0, [pc, #56]	; (81cfc <sysclk_init+0x3c>)
   81cc4:	4b0e      	ldr	r3, [pc, #56]	; (81d00 <sysclk_init+0x40>)
   81cc6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81cc8:	213e      	movs	r1, #62	; 0x3e
   81cca:	2000      	movs	r0, #0
   81ccc:	4b0d      	ldr	r3, [pc, #52]	; (81d04 <sysclk_init+0x44>)
   81cce:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81cd0:	4c0d      	ldr	r4, [pc, #52]	; (81d08 <sysclk_init+0x48>)
   81cd2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81cd4:	2800      	cmp	r0, #0
   81cd6:	d0fc      	beq.n	81cd2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81cd8:	4b0c      	ldr	r3, [pc, #48]	; (81d0c <sysclk_init+0x4c>)
   81cda:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81cdc:	4a0c      	ldr	r2, [pc, #48]	; (81d10 <sysclk_init+0x50>)
   81cde:	4b0d      	ldr	r3, [pc, #52]	; (81d14 <sysclk_init+0x54>)
   81ce0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81ce2:	4c0d      	ldr	r4, [pc, #52]	; (81d18 <sysclk_init+0x58>)
   81ce4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81ce6:	2800      	cmp	r0, #0
   81ce8:	d0fc      	beq.n	81ce4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81cea:	2010      	movs	r0, #16
   81cec:	4b0b      	ldr	r3, [pc, #44]	; (81d1c <sysclk_init+0x5c>)
   81cee:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81cf0:	4b0b      	ldr	r3, [pc, #44]	; (81d20 <sysclk_init+0x60>)
   81cf2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81cf4:	4801      	ldr	r0, [pc, #4]	; (81cfc <sysclk_init+0x3c>)
   81cf6:	4b02      	ldr	r3, [pc, #8]	; (81d00 <sysclk_init+0x40>)
   81cf8:	4798      	blx	r3
   81cfa:	bd10      	pop	{r4, pc}
   81cfc:	0501bd00 	.word	0x0501bd00
   81d00:	200700a5 	.word	0x200700a5
   81d04:	00082155 	.word	0x00082155
   81d08:	000821a9 	.word	0x000821a9
   81d0c:	000821b9 	.word	0x000821b9
   81d10:	200d3f01 	.word	0x200d3f01
   81d14:	400e0600 	.word	0x400e0600
   81d18:	000821c9 	.word	0x000821c9
   81d1c:	000820f1 	.word	0x000820f1
   81d20:	000822c9 	.word	0x000822c9

00081d24 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81d24:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81d26:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d2a:	4b16      	ldr	r3, [pc, #88]	; (81d84 <board_init+0x60>)
   81d2c:	605a      	str	r2, [r3, #4]
   81d2e:	200b      	movs	r0, #11
   81d30:	4c15      	ldr	r4, [pc, #84]	; (81d88 <board_init+0x64>)
   81d32:	47a0      	blx	r4
   81d34:	200c      	movs	r0, #12
   81d36:	47a0      	blx	r4
   81d38:	200d      	movs	r0, #13
   81d3a:	47a0      	blx	r4
   81d3c:	200e      	movs	r0, #14
   81d3e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d40:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d44:	203b      	movs	r0, #59	; 0x3b
   81d46:	4c11      	ldr	r4, [pc, #68]	; (81d8c <board_init+0x68>)
   81d48:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81d4a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d4e:	2055      	movs	r0, #85	; 0x55
   81d50:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81d52:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d56:	2056      	movs	r0, #86	; 0x56
   81d58:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81d5a:	490d      	ldr	r1, [pc, #52]	; (81d90 <board_init+0x6c>)
   81d5c:	2068      	movs	r0, #104	; 0x68
   81d5e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81d60:	490c      	ldr	r1, [pc, #48]	; (81d94 <board_init+0x70>)
   81d62:	205c      	movs	r0, #92	; 0x5c
   81d64:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81d66:	4a0c      	ldr	r2, [pc, #48]	; (81d98 <board_init+0x74>)
   81d68:	f44f 7140 	mov.w	r1, #768	; 0x300
   81d6c:	480b      	ldr	r0, [pc, #44]	; (81d9c <board_init+0x78>)
   81d6e:	4b0c      	ldr	r3, [pc, #48]	; (81da0 <board_init+0x7c>)
   81d70:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81d72:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d76:	202b      	movs	r0, #43	; 0x2b
   81d78:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81d7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81d7e:	202a      	movs	r0, #42	; 0x2a
   81d80:	47a0      	blx	r4
   81d82:	bd10      	pop	{r4, pc}
   81d84:	400e1a50 	.word	0x400e1a50
   81d88:	000821d9 	.word	0x000821d9
   81d8c:	00081e75 	.word	0x00081e75
   81d90:	28000079 	.word	0x28000079
   81d94:	28000001 	.word	0x28000001
   81d98:	08000001 	.word	0x08000001
   81d9c:	400e0e00 	.word	0x400e0e00
   81da0:	00081f45 	.word	0x00081f45

00081da4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81da4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81da6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81daa:	d016      	beq.n	81dda <pio_set_peripheral+0x36>
   81dac:	d80b      	bhi.n	81dc6 <pio_set_peripheral+0x22>
   81dae:	b149      	cbz	r1, 81dc4 <pio_set_peripheral+0x20>
   81db0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81db4:	d105      	bne.n	81dc2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81db6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81db8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81dba:	400b      	ands	r3, r1
   81dbc:	ea23 0302 	bic.w	r3, r3, r2
   81dc0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81dc2:	6042      	str	r2, [r0, #4]
   81dc4:	4770      	bx	lr
	switch (ul_type) {
   81dc6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81dca:	d0fb      	beq.n	81dc4 <pio_set_peripheral+0x20>
   81dcc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81dd0:	d0f8      	beq.n	81dc4 <pio_set_peripheral+0x20>
   81dd2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81dd6:	d1f4      	bne.n	81dc2 <pio_set_peripheral+0x1e>
   81dd8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81dda:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81ddc:	4313      	orrs	r3, r2
   81dde:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81de0:	e7ef      	b.n	81dc2 <pio_set_peripheral+0x1e>

00081de2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81de2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81de4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81de8:	bf14      	ite	ne
   81dea:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81dec:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81dee:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81df2:	bf14      	ite	ne
   81df4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81df6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81df8:	f012 0f02 	tst.w	r2, #2
   81dfc:	d107      	bne.n	81e0e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81dfe:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e02:	bf18      	it	ne
   81e04:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81e08:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e0a:	6001      	str	r1, [r0, #0]
   81e0c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81e0e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81e12:	e7f9      	b.n	81e08 <pio_set_input+0x26>

00081e14 <pio_set_output>:
{
   81e14:	b410      	push	{r4}
   81e16:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81e18:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e1a:	b944      	cbnz	r4, 81e2e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81e1c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81e1e:	b143      	cbz	r3, 81e32 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81e20:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81e22:	b942      	cbnz	r2, 81e36 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81e24:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81e26:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81e28:	6001      	str	r1, [r0, #0]
}
   81e2a:	bc10      	pop	{r4}
   81e2c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81e2e:	6641      	str	r1, [r0, #100]	; 0x64
   81e30:	e7f5      	b.n	81e1e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81e32:	6541      	str	r1, [r0, #84]	; 0x54
   81e34:	e7f5      	b.n	81e22 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81e36:	6301      	str	r1, [r0, #48]	; 0x30
   81e38:	e7f5      	b.n	81e26 <pio_set_output+0x12>

00081e3a <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81e3a:	f012 0f10 	tst.w	r2, #16
   81e3e:	d010      	beq.n	81e62 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   81e40:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81e44:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81e48:	bf14      	ite	ne
   81e4a:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   81e4e:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   81e52:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81e56:	bf14      	ite	ne
   81e58:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81e5c:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81e60:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   81e62:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81e66:	4770      	bx	lr

00081e68 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   81e68:	6401      	str	r1, [r0, #64]	; 0x40
   81e6a:	4770      	bx	lr

00081e6c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81e6c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81e6e:	4770      	bx	lr

00081e70 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81e70:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81e72:	4770      	bx	lr

00081e74 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81e74:	b570      	push	{r4, r5, r6, lr}
   81e76:	b082      	sub	sp, #8
   81e78:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81e7a:	0943      	lsrs	r3, r0, #5
   81e7c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81e80:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81e84:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81e86:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81e8a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81e8e:	d031      	beq.n	81ef4 <pio_configure_pin+0x80>
   81e90:	d816      	bhi.n	81ec0 <pio_configure_pin+0x4c>
   81e92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81e96:	d01b      	beq.n	81ed0 <pio_configure_pin+0x5c>
   81e98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81e9c:	d116      	bne.n	81ecc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81e9e:	f000 001f 	and.w	r0, r0, #31
   81ea2:	2601      	movs	r6, #1
   81ea4:	4086      	lsls	r6, r0
   81ea6:	4632      	mov	r2, r6
   81ea8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81eac:	4620      	mov	r0, r4
   81eae:	4b22      	ldr	r3, [pc, #136]	; (81f38 <pio_configure_pin+0xc4>)
   81eb0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81eb2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81eb6:	bf14      	ite	ne
   81eb8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81eba:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81ebc:	2001      	movs	r0, #1
   81ebe:	e017      	b.n	81ef0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81ec0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81ec4:	d021      	beq.n	81f0a <pio_configure_pin+0x96>
   81ec6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81eca:	d01e      	beq.n	81f0a <pio_configure_pin+0x96>
		return 0;
   81ecc:	2000      	movs	r0, #0
   81ece:	e00f      	b.n	81ef0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81ed0:	f000 001f 	and.w	r0, r0, #31
   81ed4:	2601      	movs	r6, #1
   81ed6:	4086      	lsls	r6, r0
   81ed8:	4632      	mov	r2, r6
   81eda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ede:	4620      	mov	r0, r4
   81ee0:	4b15      	ldr	r3, [pc, #84]	; (81f38 <pio_configure_pin+0xc4>)
   81ee2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81ee4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81ee8:	bf14      	ite	ne
   81eea:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81eec:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81eee:	2001      	movs	r0, #1
}
   81ef0:	b002      	add	sp, #8
   81ef2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81ef4:	f000 011f 	and.w	r1, r0, #31
   81ef8:	2601      	movs	r6, #1
   81efa:	462a      	mov	r2, r5
   81efc:	fa06 f101 	lsl.w	r1, r6, r1
   81f00:	4620      	mov	r0, r4
   81f02:	4b0e      	ldr	r3, [pc, #56]	; (81f3c <pio_configure_pin+0xc8>)
   81f04:	4798      	blx	r3
	return 1;
   81f06:	4630      	mov	r0, r6
		break;
   81f08:	e7f2      	b.n	81ef0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f0a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f0e:	f000 011f 	and.w	r1, r0, #31
   81f12:	2601      	movs	r6, #1
   81f14:	ea05 0306 	and.w	r3, r5, r6
   81f18:	9300      	str	r3, [sp, #0]
   81f1a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81f1e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f22:	bf14      	ite	ne
   81f24:	2200      	movne	r2, #0
   81f26:	2201      	moveq	r2, #1
   81f28:	fa06 f101 	lsl.w	r1, r6, r1
   81f2c:	4620      	mov	r0, r4
   81f2e:	4c04      	ldr	r4, [pc, #16]	; (81f40 <pio_configure_pin+0xcc>)
   81f30:	47a0      	blx	r4
	return 1;
   81f32:	4630      	mov	r0, r6
		break;
   81f34:	e7dc      	b.n	81ef0 <pio_configure_pin+0x7c>
   81f36:	bf00      	nop
   81f38:	00081da5 	.word	0x00081da5
   81f3c:	00081de3 	.word	0x00081de3
   81f40:	00081e15 	.word	0x00081e15

00081f44 <pio_configure_pin_group>:
{
   81f44:	b570      	push	{r4, r5, r6, lr}
   81f46:	b082      	sub	sp, #8
   81f48:	4605      	mov	r5, r0
   81f4a:	460e      	mov	r6, r1
   81f4c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81f4e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81f52:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f56:	d027      	beq.n	81fa8 <pio_configure_pin_group+0x64>
   81f58:	d811      	bhi.n	81f7e <pio_configure_pin_group+0x3a>
   81f5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81f5e:	d016      	beq.n	81f8e <pio_configure_pin_group+0x4a>
   81f60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81f64:	d111      	bne.n	81f8a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81f66:	460a      	mov	r2, r1
   81f68:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81f6c:	4b19      	ldr	r3, [pc, #100]	; (81fd4 <pio_configure_pin_group+0x90>)
   81f6e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f70:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81f74:	bf14      	ite	ne
   81f76:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f78:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81f7a:	2001      	movs	r0, #1
   81f7c:	e012      	b.n	81fa4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81f7e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f82:	d015      	beq.n	81fb0 <pio_configure_pin_group+0x6c>
   81f84:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f88:	d012      	beq.n	81fb0 <pio_configure_pin_group+0x6c>
		return 0;
   81f8a:	2000      	movs	r0, #0
   81f8c:	e00a      	b.n	81fa4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81f8e:	460a      	mov	r2, r1
   81f90:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f94:	4b0f      	ldr	r3, [pc, #60]	; (81fd4 <pio_configure_pin_group+0x90>)
   81f96:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f98:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81f9c:	bf14      	ite	ne
   81f9e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fa0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81fa2:	2001      	movs	r0, #1
}
   81fa4:	b002      	add	sp, #8
   81fa6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81fa8:	4b0b      	ldr	r3, [pc, #44]	; (81fd8 <pio_configure_pin_group+0x94>)
   81faa:	4798      	blx	r3
	return 1;
   81fac:	2001      	movs	r0, #1
		break;
   81fae:	e7f9      	b.n	81fa4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81fb0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81fb4:	f004 0301 	and.w	r3, r4, #1
   81fb8:	9300      	str	r3, [sp, #0]
   81fba:	f3c4 0380 	ubfx	r3, r4, #2, #1
   81fbe:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81fc2:	bf14      	ite	ne
   81fc4:	2200      	movne	r2, #0
   81fc6:	2201      	moveq	r2, #1
   81fc8:	4631      	mov	r1, r6
   81fca:	4628      	mov	r0, r5
   81fcc:	4c03      	ldr	r4, [pc, #12]	; (81fdc <pio_configure_pin_group+0x98>)
   81fce:	47a0      	blx	r4
	return 1;
   81fd0:	2001      	movs	r0, #1
		break;
   81fd2:	e7e7      	b.n	81fa4 <pio_configure_pin_group+0x60>
   81fd4:	00081da5 	.word	0x00081da5
   81fd8:	00081de3 	.word	0x00081de3
   81fdc:	00081e15 	.word	0x00081e15

00081fe0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   81fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fe4:	4604      	mov	r4, r0
   81fe6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   81fe8:	4b0e      	ldr	r3, [pc, #56]	; (82024 <pio_handler_process+0x44>)
   81fea:	4798      	blx	r3
   81fec:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   81fee:	4620      	mov	r0, r4
   81ff0:	4b0d      	ldr	r3, [pc, #52]	; (82028 <pio_handler_process+0x48>)
   81ff2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81ff4:	4005      	ands	r5, r0
   81ff6:	d013      	beq.n	82020 <pio_handler_process+0x40>
   81ff8:	4c0c      	ldr	r4, [pc, #48]	; (8202c <pio_handler_process+0x4c>)
   81ffa:	f104 0660 	add.w	r6, r4, #96	; 0x60
   81ffe:	e003      	b.n	82008 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82000:	42b4      	cmp	r4, r6
   82002:	d00d      	beq.n	82020 <pio_handler_process+0x40>
   82004:	3410      	adds	r4, #16
		while (status != 0) {
   82006:	b15d      	cbz	r5, 82020 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82008:	6820      	ldr	r0, [r4, #0]
   8200a:	4540      	cmp	r0, r8
   8200c:	d1f8      	bne.n	82000 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8200e:	6861      	ldr	r1, [r4, #4]
   82010:	4229      	tst	r1, r5
   82012:	d0f5      	beq.n	82000 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82014:	68e3      	ldr	r3, [r4, #12]
   82016:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82018:	6863      	ldr	r3, [r4, #4]
   8201a:	ea25 0503 	bic.w	r5, r5, r3
   8201e:	e7ef      	b.n	82000 <pio_handler_process+0x20>
   82020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82024:	00081e6d 	.word	0x00081e6d
   82028:	00081e71 	.word	0x00081e71
   8202c:	2007ac48 	.word	0x2007ac48

00082030 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82032:	4c18      	ldr	r4, [pc, #96]	; (82094 <pio_handler_set+0x64>)
   82034:	6826      	ldr	r6, [r4, #0]
   82036:	2e06      	cmp	r6, #6
   82038:	d829      	bhi.n	8208e <pio_handler_set+0x5e>
   8203a:	f04f 0c00 	mov.w	ip, #0
   8203e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82040:	4f15      	ldr	r7, [pc, #84]	; (82098 <pio_handler_set+0x68>)
   82042:	e004      	b.n	8204e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   82044:	3401      	adds	r4, #1
   82046:	b2e4      	uxtb	r4, r4
   82048:	46a4      	mov	ip, r4
   8204a:	42a6      	cmp	r6, r4
   8204c:	d309      	bcc.n	82062 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   8204e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82050:	0125      	lsls	r5, r4, #4
   82052:	597d      	ldr	r5, [r7, r5]
   82054:	428d      	cmp	r5, r1
   82056:	d1f5      	bne.n	82044 <pio_handler_set+0x14>
   82058:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   8205c:	686d      	ldr	r5, [r5, #4]
   8205e:	4295      	cmp	r5, r2
   82060:	d1f0      	bne.n	82044 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   82062:	4d0d      	ldr	r5, [pc, #52]	; (82098 <pio_handler_set+0x68>)
   82064:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   82068:	eb05 040e 	add.w	r4, r5, lr
   8206c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   82070:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   82072:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   82074:	9906      	ldr	r1, [sp, #24]
   82076:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   82078:	3601      	adds	r6, #1
   8207a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   8207c:	bf04      	itt	eq
   8207e:	4905      	ldreq	r1, [pc, #20]	; (82094 <pio_handler_set+0x64>)
   82080:	600e      	streq	r6, [r1, #0]
   82082:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82084:	461a      	mov	r2, r3
   82086:	4b05      	ldr	r3, [pc, #20]	; (8209c <pio_handler_set+0x6c>)
   82088:	4798      	blx	r3

	return 0;
   8208a:	2000      	movs	r0, #0
   8208c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8208e:	2001      	movs	r0, #1
}
   82090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82092:	bf00      	nop
   82094:	2007acb8 	.word	0x2007acb8
   82098:	2007ac48 	.word	0x2007ac48
   8209c:	00081e3b 	.word	0x00081e3b

000820a0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   820a0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   820a2:	210b      	movs	r1, #11
   820a4:	4801      	ldr	r0, [pc, #4]	; (820ac <PIOA_Handler+0xc>)
   820a6:	4b02      	ldr	r3, [pc, #8]	; (820b0 <PIOA_Handler+0x10>)
   820a8:	4798      	blx	r3
   820aa:	bd08      	pop	{r3, pc}
   820ac:	400e0e00 	.word	0x400e0e00
   820b0:	00081fe1 	.word	0x00081fe1

000820b4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   820b4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   820b6:	210c      	movs	r1, #12
   820b8:	4801      	ldr	r0, [pc, #4]	; (820c0 <PIOB_Handler+0xc>)
   820ba:	4b02      	ldr	r3, [pc, #8]	; (820c4 <PIOB_Handler+0x10>)
   820bc:	4798      	blx	r3
   820be:	bd08      	pop	{r3, pc}
   820c0:	400e1000 	.word	0x400e1000
   820c4:	00081fe1 	.word	0x00081fe1

000820c8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   820c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   820ca:	210d      	movs	r1, #13
   820cc:	4801      	ldr	r0, [pc, #4]	; (820d4 <PIOC_Handler+0xc>)
   820ce:	4b02      	ldr	r3, [pc, #8]	; (820d8 <PIOC_Handler+0x10>)
   820d0:	4798      	blx	r3
   820d2:	bd08      	pop	{r3, pc}
   820d4:	400e1200 	.word	0x400e1200
   820d8:	00081fe1 	.word	0x00081fe1

000820dc <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   820dc:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   820de:	210e      	movs	r1, #14
   820e0:	4801      	ldr	r0, [pc, #4]	; (820e8 <PIOD_Handler+0xc>)
   820e2:	4b02      	ldr	r3, [pc, #8]	; (820ec <PIOD_Handler+0x10>)
   820e4:	4798      	blx	r3
   820e6:	bd08      	pop	{r3, pc}
   820e8:	400e1400 	.word	0x400e1400
   820ec:	00081fe1 	.word	0x00081fe1

000820f0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   820f0:	4a17      	ldr	r2, [pc, #92]	; (82150 <pmc_switch_mck_to_pllack+0x60>)
   820f2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   820f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   820f8:	4318      	orrs	r0, r3
   820fa:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   820fc:	6e93      	ldr	r3, [r2, #104]	; 0x68
   820fe:	f013 0f08 	tst.w	r3, #8
   82102:	d10a      	bne.n	8211a <pmc_switch_mck_to_pllack+0x2a>
   82104:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82108:	4911      	ldr	r1, [pc, #68]	; (82150 <pmc_switch_mck_to_pllack+0x60>)
   8210a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8210c:	f012 0f08 	tst.w	r2, #8
   82110:	d103      	bne.n	8211a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82112:	3b01      	subs	r3, #1
   82114:	d1f9      	bne.n	8210a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82116:	2001      	movs	r0, #1
   82118:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8211a:	4a0d      	ldr	r2, [pc, #52]	; (82150 <pmc_switch_mck_to_pllack+0x60>)
   8211c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8211e:	f023 0303 	bic.w	r3, r3, #3
   82122:	f043 0302 	orr.w	r3, r3, #2
   82126:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82128:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8212a:	f013 0f08 	tst.w	r3, #8
   8212e:	d10a      	bne.n	82146 <pmc_switch_mck_to_pllack+0x56>
   82130:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82134:	4906      	ldr	r1, [pc, #24]	; (82150 <pmc_switch_mck_to_pllack+0x60>)
   82136:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82138:	f012 0f08 	tst.w	r2, #8
   8213c:	d105      	bne.n	8214a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8213e:	3b01      	subs	r3, #1
   82140:	d1f9      	bne.n	82136 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82142:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82144:	4770      	bx	lr
	return 0;
   82146:	2000      	movs	r0, #0
   82148:	4770      	bx	lr
   8214a:	2000      	movs	r0, #0
   8214c:	4770      	bx	lr
   8214e:	bf00      	nop
   82150:	400e0600 	.word	0x400e0600

00082154 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82154:	b9c8      	cbnz	r0, 8218a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82156:	4a11      	ldr	r2, [pc, #68]	; (8219c <pmc_switch_mainck_to_xtal+0x48>)
   82158:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8215a:	0209      	lsls	r1, r1, #8
   8215c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8215e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82162:	f023 0303 	bic.w	r3, r3, #3
   82166:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8216a:	f043 0301 	orr.w	r3, r3, #1
   8216e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82170:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82172:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82174:	f013 0f01 	tst.w	r3, #1
   82178:	d0fb      	beq.n	82172 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8217a:	4a08      	ldr	r2, [pc, #32]	; (8219c <pmc_switch_mainck_to_xtal+0x48>)
   8217c:	6a13      	ldr	r3, [r2, #32]
   8217e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82182:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82186:	6213      	str	r3, [r2, #32]
   82188:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8218a:	4904      	ldr	r1, [pc, #16]	; (8219c <pmc_switch_mainck_to_xtal+0x48>)
   8218c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8218e:	4a04      	ldr	r2, [pc, #16]	; (821a0 <pmc_switch_mainck_to_xtal+0x4c>)
   82190:	401a      	ands	r2, r3
   82192:	4b04      	ldr	r3, [pc, #16]	; (821a4 <pmc_switch_mainck_to_xtal+0x50>)
   82194:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   82196:	620b      	str	r3, [r1, #32]
   82198:	4770      	bx	lr
   8219a:	bf00      	nop
   8219c:	400e0600 	.word	0x400e0600
   821a0:	fec8fffc 	.word	0xfec8fffc
   821a4:	01370002 	.word	0x01370002

000821a8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   821a8:	4b02      	ldr	r3, [pc, #8]	; (821b4 <pmc_osc_is_ready_mainck+0xc>)
   821aa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   821ac:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   821b0:	4770      	bx	lr
   821b2:	bf00      	nop
   821b4:	400e0600 	.word	0x400e0600

000821b8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   821b8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   821bc:	4b01      	ldr	r3, [pc, #4]	; (821c4 <pmc_disable_pllack+0xc>)
   821be:	629a      	str	r2, [r3, #40]	; 0x28
   821c0:	4770      	bx	lr
   821c2:	bf00      	nop
   821c4:	400e0600 	.word	0x400e0600

000821c8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   821c8:	4b02      	ldr	r3, [pc, #8]	; (821d4 <pmc_is_locked_pllack+0xc>)
   821ca:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   821cc:	f000 0002 	and.w	r0, r0, #2
   821d0:	4770      	bx	lr
   821d2:	bf00      	nop
   821d4:	400e0600 	.word	0x400e0600

000821d8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   821d8:	282c      	cmp	r0, #44	; 0x2c
   821da:	d81e      	bhi.n	8221a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   821dc:	281f      	cmp	r0, #31
   821de:	d80c      	bhi.n	821fa <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   821e0:	4b11      	ldr	r3, [pc, #68]	; (82228 <pmc_enable_periph_clk+0x50>)
   821e2:	699a      	ldr	r2, [r3, #24]
   821e4:	2301      	movs	r3, #1
   821e6:	4083      	lsls	r3, r0
   821e8:	4393      	bics	r3, r2
   821ea:	d018      	beq.n	8221e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   821ec:	2301      	movs	r3, #1
   821ee:	fa03 f000 	lsl.w	r0, r3, r0
   821f2:	4b0d      	ldr	r3, [pc, #52]	; (82228 <pmc_enable_periph_clk+0x50>)
   821f4:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   821f6:	2000      	movs	r0, #0
   821f8:	4770      	bx	lr
		ul_id -= 32;
   821fa:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   821fc:	4b0a      	ldr	r3, [pc, #40]	; (82228 <pmc_enable_periph_clk+0x50>)
   821fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82202:	2301      	movs	r3, #1
   82204:	4083      	lsls	r3, r0
   82206:	4393      	bics	r3, r2
   82208:	d00b      	beq.n	82222 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8220a:	2301      	movs	r3, #1
   8220c:	fa03 f000 	lsl.w	r0, r3, r0
   82210:	4b05      	ldr	r3, [pc, #20]	; (82228 <pmc_enable_periph_clk+0x50>)
   82212:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82216:	2000      	movs	r0, #0
   82218:	4770      	bx	lr
		return 1;
   8221a:	2001      	movs	r0, #1
   8221c:	4770      	bx	lr
	return 0;
   8221e:	2000      	movs	r0, #0
   82220:	4770      	bx	lr
   82222:	2000      	movs	r0, #0
}
   82224:	4770      	bx	lr
   82226:	bf00      	nop
   82228:	400e0600 	.word	0x400e0600

0008222c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8222c:	e7fe      	b.n	8222c <Dummy_Handler>
	...

00082230 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82230:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82232:	4b1c      	ldr	r3, [pc, #112]	; (822a4 <Reset_Handler+0x74>)
   82234:	4a1c      	ldr	r2, [pc, #112]	; (822a8 <Reset_Handler+0x78>)
   82236:	429a      	cmp	r2, r3
   82238:	d010      	beq.n	8225c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8223a:	4b1c      	ldr	r3, [pc, #112]	; (822ac <Reset_Handler+0x7c>)
   8223c:	4a19      	ldr	r2, [pc, #100]	; (822a4 <Reset_Handler+0x74>)
   8223e:	429a      	cmp	r2, r3
   82240:	d20c      	bcs.n	8225c <Reset_Handler+0x2c>
   82242:	3b01      	subs	r3, #1
   82244:	1a9b      	subs	r3, r3, r2
   82246:	f023 0303 	bic.w	r3, r3, #3
   8224a:	3304      	adds	r3, #4
   8224c:	4413      	add	r3, r2
   8224e:	4916      	ldr	r1, [pc, #88]	; (822a8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82250:	f851 0b04 	ldr.w	r0, [r1], #4
   82254:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82258:	429a      	cmp	r2, r3
   8225a:	d1f9      	bne.n	82250 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8225c:	4b14      	ldr	r3, [pc, #80]	; (822b0 <Reset_Handler+0x80>)
   8225e:	4a15      	ldr	r2, [pc, #84]	; (822b4 <Reset_Handler+0x84>)
   82260:	429a      	cmp	r2, r3
   82262:	d20a      	bcs.n	8227a <Reset_Handler+0x4a>
   82264:	3b01      	subs	r3, #1
   82266:	1a9b      	subs	r3, r3, r2
   82268:	f023 0303 	bic.w	r3, r3, #3
   8226c:	3304      	adds	r3, #4
   8226e:	4413      	add	r3, r2
		*pDest++ = 0;
   82270:	2100      	movs	r1, #0
   82272:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82276:	4293      	cmp	r3, r2
   82278:	d1fb      	bne.n	82272 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8227a:	4b0f      	ldr	r3, [pc, #60]	; (822b8 <Reset_Handler+0x88>)
   8227c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82280:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82284:	490d      	ldr	r1, [pc, #52]	; (822bc <Reset_Handler+0x8c>)
   82286:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82288:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8228c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   82290:	d203      	bcs.n	8229a <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   82292:	688b      	ldr	r3, [r1, #8]
   82294:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   82298:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8229a:	4b09      	ldr	r3, [pc, #36]	; (822c0 <Reset_Handler+0x90>)
   8229c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8229e:	4b09      	ldr	r3, [pc, #36]	; (822c4 <Reset_Handler+0x94>)
   822a0:	4798      	blx	r3
   822a2:	e7fe      	b.n	822a2 <Reset_Handler+0x72>
   822a4:	20070000 	.word	0x20070000
   822a8:	0008555c 	.word	0x0008555c
   822ac:	20070ae8 	.word	0x20070ae8
   822b0:	2007ad28 	.word	0x2007ad28
   822b4:	20070ae8 	.word	0x20070ae8
   822b8:	00080000 	.word	0x00080000
   822bc:	e000ed00 	.word	0xe000ed00
   822c0:	00082459 	.word	0x00082459
   822c4:	00082431 	.word	0x00082431

000822c8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   822c8:	4b3d      	ldr	r3, [pc, #244]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   822ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822cc:	f003 0303 	and.w	r3, r3, #3
   822d0:	2b03      	cmp	r3, #3
   822d2:	d80e      	bhi.n	822f2 <SystemCoreClockUpdate+0x2a>
   822d4:	e8df f003 	tbb	[pc, r3]
   822d8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   822dc:	4b39      	ldr	r3, [pc, #228]	; (823c4 <SystemCoreClockUpdate+0xfc>)
   822de:	695b      	ldr	r3, [r3, #20]
   822e0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   822e4:	bf14      	ite	ne
   822e6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   822ea:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   822ee:	4b36      	ldr	r3, [pc, #216]	; (823c8 <SystemCoreClockUpdate+0x100>)
   822f0:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   822f2:	4b33      	ldr	r3, [pc, #204]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   822f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   822f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   822fa:	2b70      	cmp	r3, #112	; 0x70
   822fc:	d057      	beq.n	823ae <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   822fe:	4b30      	ldr	r3, [pc, #192]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   82300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82302:	4931      	ldr	r1, [pc, #196]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82304:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82308:	680b      	ldr	r3, [r1, #0]
   8230a:	40d3      	lsrs	r3, r2
   8230c:	600b      	str	r3, [r1, #0]
   8230e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82310:	4b2b      	ldr	r3, [pc, #172]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   82312:	6a1b      	ldr	r3, [r3, #32]
   82314:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82318:	d003      	beq.n	82322 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8231a:	4a2c      	ldr	r2, [pc, #176]	; (823cc <SystemCoreClockUpdate+0x104>)
   8231c:	4b2a      	ldr	r3, [pc, #168]	; (823c8 <SystemCoreClockUpdate+0x100>)
   8231e:	601a      	str	r2, [r3, #0]
   82320:	e7e7      	b.n	822f2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82322:	4a2b      	ldr	r2, [pc, #172]	; (823d0 <SystemCoreClockUpdate+0x108>)
   82324:	4b28      	ldr	r3, [pc, #160]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82326:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82328:	4b25      	ldr	r3, [pc, #148]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   8232a:	6a1b      	ldr	r3, [r3, #32]
   8232c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82330:	2b10      	cmp	r3, #16
   82332:	d005      	beq.n	82340 <SystemCoreClockUpdate+0x78>
   82334:	2b20      	cmp	r3, #32
   82336:	d1dc      	bne.n	822f2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82338:	4a24      	ldr	r2, [pc, #144]	; (823cc <SystemCoreClockUpdate+0x104>)
   8233a:	4b23      	ldr	r3, [pc, #140]	; (823c8 <SystemCoreClockUpdate+0x100>)
   8233c:	601a      	str	r2, [r3, #0]
				break;
   8233e:	e7d8      	b.n	822f2 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82340:	4a24      	ldr	r2, [pc, #144]	; (823d4 <SystemCoreClockUpdate+0x10c>)
   82342:	4b21      	ldr	r3, [pc, #132]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82344:	601a      	str	r2, [r3, #0]
				break;
   82346:	e7d4      	b.n	822f2 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82348:	4b1d      	ldr	r3, [pc, #116]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   8234a:	6a1b      	ldr	r3, [r3, #32]
   8234c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82350:	d00c      	beq.n	8236c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82352:	4a1e      	ldr	r2, [pc, #120]	; (823cc <SystemCoreClockUpdate+0x104>)
   82354:	4b1c      	ldr	r3, [pc, #112]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82356:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82358:	4b19      	ldr	r3, [pc, #100]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   8235a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8235c:	f003 0303 	and.w	r3, r3, #3
   82360:	2b02      	cmp	r3, #2
   82362:	d016      	beq.n	82392 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82364:	4a1c      	ldr	r2, [pc, #112]	; (823d8 <SystemCoreClockUpdate+0x110>)
   82366:	4b18      	ldr	r3, [pc, #96]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82368:	601a      	str	r2, [r3, #0]
   8236a:	e7c2      	b.n	822f2 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8236c:	4a18      	ldr	r2, [pc, #96]	; (823d0 <SystemCoreClockUpdate+0x108>)
   8236e:	4b16      	ldr	r3, [pc, #88]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82370:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82372:	4b13      	ldr	r3, [pc, #76]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   82374:	6a1b      	ldr	r3, [r3, #32]
   82376:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8237a:	2b10      	cmp	r3, #16
   8237c:	d005      	beq.n	8238a <SystemCoreClockUpdate+0xc2>
   8237e:	2b20      	cmp	r3, #32
   82380:	d1ea      	bne.n	82358 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82382:	4a12      	ldr	r2, [pc, #72]	; (823cc <SystemCoreClockUpdate+0x104>)
   82384:	4b10      	ldr	r3, [pc, #64]	; (823c8 <SystemCoreClockUpdate+0x100>)
   82386:	601a      	str	r2, [r3, #0]
				break;
   82388:	e7e6      	b.n	82358 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8238a:	4a12      	ldr	r2, [pc, #72]	; (823d4 <SystemCoreClockUpdate+0x10c>)
   8238c:	4b0e      	ldr	r3, [pc, #56]	; (823c8 <SystemCoreClockUpdate+0x100>)
   8238e:	601a      	str	r2, [r3, #0]
				break;
   82390:	e7e2      	b.n	82358 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   82392:	4a0b      	ldr	r2, [pc, #44]	; (823c0 <SystemCoreClockUpdate+0xf8>)
   82394:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   82396:	6a92      	ldr	r2, [r2, #40]	; 0x28
   82398:	480b      	ldr	r0, [pc, #44]	; (823c8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8239a:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8239e:	6803      	ldr	r3, [r0, #0]
   823a0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823a4:	b2d2      	uxtb	r2, r2
   823a6:	fbb3 f3f2 	udiv	r3, r3, r2
   823aa:	6003      	str	r3, [r0, #0]
   823ac:	e7a1      	b.n	822f2 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   823ae:	4a06      	ldr	r2, [pc, #24]	; (823c8 <SystemCoreClockUpdate+0x100>)
   823b0:	6813      	ldr	r3, [r2, #0]
   823b2:	490a      	ldr	r1, [pc, #40]	; (823dc <SystemCoreClockUpdate+0x114>)
   823b4:	fba1 1303 	umull	r1, r3, r1, r3
   823b8:	085b      	lsrs	r3, r3, #1
   823ba:	6013      	str	r3, [r2, #0]
   823bc:	4770      	bx	lr
   823be:	bf00      	nop
   823c0:	400e0600 	.word	0x400e0600
   823c4:	400e1a10 	.word	0x400e1a10
   823c8:	20070138 	.word	0x20070138
   823cc:	00b71b00 	.word	0x00b71b00
   823d0:	003d0900 	.word	0x003d0900
   823d4:	007a1200 	.word	0x007a1200
   823d8:	0e4e1c00 	.word	0x0e4e1c00
   823dc:	aaaaaaab 	.word	0xaaaaaaab

000823e0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   823e0:	4b0a      	ldr	r3, [pc, #40]	; (8240c <_sbrk+0x2c>)
   823e2:	681b      	ldr	r3, [r3, #0]
   823e4:	b153      	cbz	r3, 823fc <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   823e6:	4b09      	ldr	r3, [pc, #36]	; (8240c <_sbrk+0x2c>)
   823e8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   823ea:	181a      	adds	r2, r3, r0
   823ec:	4908      	ldr	r1, [pc, #32]	; (82410 <_sbrk+0x30>)
   823ee:	4291      	cmp	r1, r2
   823f0:	db08      	blt.n	82404 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   823f2:	4610      	mov	r0, r2
   823f4:	4a05      	ldr	r2, [pc, #20]	; (8240c <_sbrk+0x2c>)
   823f6:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   823f8:	4618      	mov	r0, r3
   823fa:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   823fc:	4a05      	ldr	r2, [pc, #20]	; (82414 <_sbrk+0x34>)
   823fe:	4b03      	ldr	r3, [pc, #12]	; (8240c <_sbrk+0x2c>)
   82400:	601a      	str	r2, [r3, #0]
   82402:	e7f0      	b.n	823e6 <_sbrk+0x6>
		return (caddr_t) -1;	
   82404:	f04f 30ff 	mov.w	r0, #4294967295
}
   82408:	4770      	bx	lr
   8240a:	bf00      	nop
   8240c:	2007acbc 	.word	0x2007acbc
   82410:	20087ffc 	.word	0x20087ffc
   82414:	2007cd28 	.word	0x2007cd28

00082418 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82418:	f04f 30ff 	mov.w	r0, #4294967295
   8241c:	4770      	bx	lr

0008241e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8241e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82422:	604b      	str	r3, [r1, #4]

	return 0;
}
   82424:	2000      	movs	r0, #0
   82426:	4770      	bx	lr

00082428 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82428:	2001      	movs	r0, #1
   8242a:	4770      	bx	lr

0008242c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8242c:	2000      	movs	r0, #0
   8242e:	4770      	bx	lr

00082430 <main>:
#include "initializations/main_init.h"

int main (void)
{
   82430:	b508      	push	{r3, lr}
	misc_init();
   82432:	4b05      	ldr	r3, [pc, #20]	; (82448 <main+0x18>)
   82434:	4798      	blx	r3
	console_init();
   82436:	4b05      	ldr	r3, [pc, #20]	; (8244c <main+0x1c>)
   82438:	4798      	blx	r3
	interrupt_init();		
   8243a:	4b05      	ldr	r3, [pc, #20]	; (82450 <main+0x20>)
   8243c:	4798      	blx	r3
	rtos_init();
   8243e:	4b05      	ldr	r3, [pc, #20]	; (82454 <main+0x24>)
   82440:	4798      	blx	r3
   82442:	2000      	movs	r0, #0
   82444:	bd08      	pop	{r3, pc}
   82446:	bf00      	nop
   82448:	000804b5 	.word	0x000804b5
   8244c:	00080589 	.word	0x00080589
   82450:	0008061d 	.word	0x0008061d
   82454:	00080535 	.word	0x00080535

00082458 <__libc_init_array>:
   82458:	b570      	push	{r4, r5, r6, lr}
   8245a:	4e0f      	ldr	r6, [pc, #60]	; (82498 <__libc_init_array+0x40>)
   8245c:	4d0f      	ldr	r5, [pc, #60]	; (8249c <__libc_init_array+0x44>)
   8245e:	1b76      	subs	r6, r6, r5
   82460:	10b6      	asrs	r6, r6, #2
   82462:	bf18      	it	ne
   82464:	2400      	movne	r4, #0
   82466:	d005      	beq.n	82474 <__libc_init_array+0x1c>
   82468:	3401      	adds	r4, #1
   8246a:	f855 3b04 	ldr.w	r3, [r5], #4
   8246e:	4798      	blx	r3
   82470:	42a6      	cmp	r6, r4
   82472:	d1f9      	bne.n	82468 <__libc_init_array+0x10>
   82474:	4e0a      	ldr	r6, [pc, #40]	; (824a0 <__libc_init_array+0x48>)
   82476:	4d0b      	ldr	r5, [pc, #44]	; (824a4 <__libc_init_array+0x4c>)
   82478:	f003 f85a 	bl	85530 <_init>
   8247c:	1b76      	subs	r6, r6, r5
   8247e:	10b6      	asrs	r6, r6, #2
   82480:	bf18      	it	ne
   82482:	2400      	movne	r4, #0
   82484:	d006      	beq.n	82494 <__libc_init_array+0x3c>
   82486:	3401      	adds	r4, #1
   82488:	f855 3b04 	ldr.w	r3, [r5], #4
   8248c:	4798      	blx	r3
   8248e:	42a6      	cmp	r6, r4
   82490:	d1f9      	bne.n	82486 <__libc_init_array+0x2e>
   82492:	bd70      	pop	{r4, r5, r6, pc}
   82494:	bd70      	pop	{r4, r5, r6, pc}
   82496:	bf00      	nop
   82498:	0008553c 	.word	0x0008553c
   8249c:	0008553c 	.word	0x0008553c
   824a0:	00085544 	.word	0x00085544
   824a4:	0008553c 	.word	0x0008553c

000824a8 <iprintf>:
   824a8:	b40f      	push	{r0, r1, r2, r3}
   824aa:	b510      	push	{r4, lr}
   824ac:	4b07      	ldr	r3, [pc, #28]	; (824cc <iprintf+0x24>)
   824ae:	b082      	sub	sp, #8
   824b0:	ac04      	add	r4, sp, #16
   824b2:	f854 2b04 	ldr.w	r2, [r4], #4
   824b6:	6818      	ldr	r0, [r3, #0]
   824b8:	4623      	mov	r3, r4
   824ba:	6881      	ldr	r1, [r0, #8]
   824bc:	9401      	str	r4, [sp, #4]
   824be:	f000 fa3b 	bl	82938 <_vfiprintf_r>
   824c2:	b002      	add	sp, #8
   824c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824c8:	b004      	add	sp, #16
   824ca:	4770      	bx	lr
   824cc:	2007013c 	.word	0x2007013c

000824d0 <memcpy>:
   824d0:	4684      	mov	ip, r0
   824d2:	ea41 0300 	orr.w	r3, r1, r0
   824d6:	f013 0303 	ands.w	r3, r3, #3
   824da:	d149      	bne.n	82570 <memcpy+0xa0>
   824dc:	3a40      	subs	r2, #64	; 0x40
   824de:	d323      	bcc.n	82528 <memcpy+0x58>
   824e0:	680b      	ldr	r3, [r1, #0]
   824e2:	6003      	str	r3, [r0, #0]
   824e4:	684b      	ldr	r3, [r1, #4]
   824e6:	6043      	str	r3, [r0, #4]
   824e8:	688b      	ldr	r3, [r1, #8]
   824ea:	6083      	str	r3, [r0, #8]
   824ec:	68cb      	ldr	r3, [r1, #12]
   824ee:	60c3      	str	r3, [r0, #12]
   824f0:	690b      	ldr	r3, [r1, #16]
   824f2:	6103      	str	r3, [r0, #16]
   824f4:	694b      	ldr	r3, [r1, #20]
   824f6:	6143      	str	r3, [r0, #20]
   824f8:	698b      	ldr	r3, [r1, #24]
   824fa:	6183      	str	r3, [r0, #24]
   824fc:	69cb      	ldr	r3, [r1, #28]
   824fe:	61c3      	str	r3, [r0, #28]
   82500:	6a0b      	ldr	r3, [r1, #32]
   82502:	6203      	str	r3, [r0, #32]
   82504:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82506:	6243      	str	r3, [r0, #36]	; 0x24
   82508:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8250a:	6283      	str	r3, [r0, #40]	; 0x28
   8250c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8250e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82510:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82512:	6303      	str	r3, [r0, #48]	; 0x30
   82514:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82516:	6343      	str	r3, [r0, #52]	; 0x34
   82518:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8251a:	6383      	str	r3, [r0, #56]	; 0x38
   8251c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8251e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82520:	3040      	adds	r0, #64	; 0x40
   82522:	3140      	adds	r1, #64	; 0x40
   82524:	3a40      	subs	r2, #64	; 0x40
   82526:	d2db      	bcs.n	824e0 <memcpy+0x10>
   82528:	3230      	adds	r2, #48	; 0x30
   8252a:	d30b      	bcc.n	82544 <memcpy+0x74>
   8252c:	680b      	ldr	r3, [r1, #0]
   8252e:	6003      	str	r3, [r0, #0]
   82530:	684b      	ldr	r3, [r1, #4]
   82532:	6043      	str	r3, [r0, #4]
   82534:	688b      	ldr	r3, [r1, #8]
   82536:	6083      	str	r3, [r0, #8]
   82538:	68cb      	ldr	r3, [r1, #12]
   8253a:	60c3      	str	r3, [r0, #12]
   8253c:	3010      	adds	r0, #16
   8253e:	3110      	adds	r1, #16
   82540:	3a10      	subs	r2, #16
   82542:	d2f3      	bcs.n	8252c <memcpy+0x5c>
   82544:	320c      	adds	r2, #12
   82546:	d305      	bcc.n	82554 <memcpy+0x84>
   82548:	f851 3b04 	ldr.w	r3, [r1], #4
   8254c:	f840 3b04 	str.w	r3, [r0], #4
   82550:	3a04      	subs	r2, #4
   82552:	d2f9      	bcs.n	82548 <memcpy+0x78>
   82554:	3204      	adds	r2, #4
   82556:	d008      	beq.n	8256a <memcpy+0x9a>
   82558:	07d2      	lsls	r2, r2, #31
   8255a:	bf1c      	itt	ne
   8255c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82560:	f800 3b01 	strbne.w	r3, [r0], #1
   82564:	d301      	bcc.n	8256a <memcpy+0x9a>
   82566:	880b      	ldrh	r3, [r1, #0]
   82568:	8003      	strh	r3, [r0, #0]
   8256a:	4660      	mov	r0, ip
   8256c:	4770      	bx	lr
   8256e:	bf00      	nop
   82570:	2a08      	cmp	r2, #8
   82572:	d313      	bcc.n	8259c <memcpy+0xcc>
   82574:	078b      	lsls	r3, r1, #30
   82576:	d0b1      	beq.n	824dc <memcpy+0xc>
   82578:	f010 0303 	ands.w	r3, r0, #3
   8257c:	d0ae      	beq.n	824dc <memcpy+0xc>
   8257e:	f1c3 0304 	rsb	r3, r3, #4
   82582:	1ad2      	subs	r2, r2, r3
   82584:	07db      	lsls	r3, r3, #31
   82586:	bf1c      	itt	ne
   82588:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8258c:	f800 3b01 	strbne.w	r3, [r0], #1
   82590:	d3a4      	bcc.n	824dc <memcpy+0xc>
   82592:	f831 3b02 	ldrh.w	r3, [r1], #2
   82596:	f820 3b02 	strh.w	r3, [r0], #2
   8259a:	e79f      	b.n	824dc <memcpy+0xc>
   8259c:	3a04      	subs	r2, #4
   8259e:	d3d9      	bcc.n	82554 <memcpy+0x84>
   825a0:	3a01      	subs	r2, #1
   825a2:	f811 3b01 	ldrb.w	r3, [r1], #1
   825a6:	f800 3b01 	strb.w	r3, [r0], #1
   825aa:	d2f9      	bcs.n	825a0 <memcpy+0xd0>
   825ac:	780b      	ldrb	r3, [r1, #0]
   825ae:	7003      	strb	r3, [r0, #0]
   825b0:	784b      	ldrb	r3, [r1, #1]
   825b2:	7043      	strb	r3, [r0, #1]
   825b4:	788b      	ldrb	r3, [r1, #2]
   825b6:	7083      	strb	r3, [r0, #2]
   825b8:	4660      	mov	r0, ip
   825ba:	4770      	bx	lr

000825bc <memset>:
   825bc:	b470      	push	{r4, r5, r6}
   825be:	0786      	lsls	r6, r0, #30
   825c0:	d046      	beq.n	82650 <memset+0x94>
   825c2:	1e54      	subs	r4, r2, #1
   825c4:	2a00      	cmp	r2, #0
   825c6:	d041      	beq.n	8264c <memset+0x90>
   825c8:	b2ca      	uxtb	r2, r1
   825ca:	4603      	mov	r3, r0
   825cc:	e002      	b.n	825d4 <memset+0x18>
   825ce:	f114 34ff 	adds.w	r4, r4, #4294967295
   825d2:	d33b      	bcc.n	8264c <memset+0x90>
   825d4:	f803 2b01 	strb.w	r2, [r3], #1
   825d8:	079d      	lsls	r5, r3, #30
   825da:	d1f8      	bne.n	825ce <memset+0x12>
   825dc:	2c03      	cmp	r4, #3
   825de:	d92e      	bls.n	8263e <memset+0x82>
   825e0:	b2cd      	uxtb	r5, r1
   825e2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   825e6:	2c0f      	cmp	r4, #15
   825e8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   825ec:	d919      	bls.n	82622 <memset+0x66>
   825ee:	4626      	mov	r6, r4
   825f0:	f103 0210 	add.w	r2, r3, #16
   825f4:	3e10      	subs	r6, #16
   825f6:	2e0f      	cmp	r6, #15
   825f8:	f842 5c10 	str.w	r5, [r2, #-16]
   825fc:	f842 5c0c 	str.w	r5, [r2, #-12]
   82600:	f842 5c08 	str.w	r5, [r2, #-8]
   82604:	f842 5c04 	str.w	r5, [r2, #-4]
   82608:	f102 0210 	add.w	r2, r2, #16
   8260c:	d8f2      	bhi.n	825f4 <memset+0x38>
   8260e:	f1a4 0210 	sub.w	r2, r4, #16
   82612:	f022 020f 	bic.w	r2, r2, #15
   82616:	f004 040f 	and.w	r4, r4, #15
   8261a:	3210      	adds	r2, #16
   8261c:	2c03      	cmp	r4, #3
   8261e:	4413      	add	r3, r2
   82620:	d90d      	bls.n	8263e <memset+0x82>
   82622:	461e      	mov	r6, r3
   82624:	4622      	mov	r2, r4
   82626:	3a04      	subs	r2, #4
   82628:	2a03      	cmp	r2, #3
   8262a:	f846 5b04 	str.w	r5, [r6], #4
   8262e:	d8fa      	bhi.n	82626 <memset+0x6a>
   82630:	1f22      	subs	r2, r4, #4
   82632:	f022 0203 	bic.w	r2, r2, #3
   82636:	3204      	adds	r2, #4
   82638:	4413      	add	r3, r2
   8263a:	f004 0403 	and.w	r4, r4, #3
   8263e:	b12c      	cbz	r4, 8264c <memset+0x90>
   82640:	b2c9      	uxtb	r1, r1
   82642:	441c      	add	r4, r3
   82644:	f803 1b01 	strb.w	r1, [r3], #1
   82648:	429c      	cmp	r4, r3
   8264a:	d1fb      	bne.n	82644 <memset+0x88>
   8264c:	bc70      	pop	{r4, r5, r6}
   8264e:	4770      	bx	lr
   82650:	4614      	mov	r4, r2
   82652:	4603      	mov	r3, r0
   82654:	e7c2      	b.n	825dc <memset+0x20>
   82656:	bf00      	nop

00082658 <setbuf>:
   82658:	2900      	cmp	r1, #0
   8265a:	bf0c      	ite	eq
   8265c:	2202      	moveq	r2, #2
   8265e:	2200      	movne	r2, #0
   82660:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82664:	f000 b800 	b.w	82668 <setvbuf>

00082668 <setvbuf>:
   82668:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8266c:	4d61      	ldr	r5, [pc, #388]	; (827f4 <setvbuf+0x18c>)
   8266e:	b083      	sub	sp, #12
   82670:	682d      	ldr	r5, [r5, #0]
   82672:	4604      	mov	r4, r0
   82674:	460f      	mov	r7, r1
   82676:	4690      	mov	r8, r2
   82678:	461e      	mov	r6, r3
   8267a:	b115      	cbz	r5, 82682 <setvbuf+0x1a>
   8267c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8267e:	2b00      	cmp	r3, #0
   82680:	d064      	beq.n	8274c <setvbuf+0xe4>
   82682:	f1b8 0f02 	cmp.w	r8, #2
   82686:	d006      	beq.n	82696 <setvbuf+0x2e>
   82688:	f1b8 0f01 	cmp.w	r8, #1
   8268c:	f200 809f 	bhi.w	827ce <setvbuf+0x166>
   82690:	2e00      	cmp	r6, #0
   82692:	f2c0 809c 	blt.w	827ce <setvbuf+0x166>
   82696:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82698:	07d8      	lsls	r0, r3, #31
   8269a:	d534      	bpl.n	82706 <setvbuf+0x9e>
   8269c:	4621      	mov	r1, r4
   8269e:	4628      	mov	r0, r5
   826a0:	f001 f8e2 	bl	83868 <_fflush_r>
   826a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   826a6:	b141      	cbz	r1, 826ba <setvbuf+0x52>
   826a8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   826ac:	4299      	cmp	r1, r3
   826ae:	d002      	beq.n	826b6 <setvbuf+0x4e>
   826b0:	4628      	mov	r0, r5
   826b2:	f001 fa57 	bl	83b64 <_free_r>
   826b6:	2300      	movs	r3, #0
   826b8:	6323      	str	r3, [r4, #48]	; 0x30
   826ba:	2200      	movs	r2, #0
   826bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   826c0:	61a2      	str	r2, [r4, #24]
   826c2:	6062      	str	r2, [r4, #4]
   826c4:	061a      	lsls	r2, r3, #24
   826c6:	d43a      	bmi.n	8273e <setvbuf+0xd6>
   826c8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   826cc:	f023 0303 	bic.w	r3, r3, #3
   826d0:	f1b8 0f02 	cmp.w	r8, #2
   826d4:	81a3      	strh	r3, [r4, #12]
   826d6:	d01d      	beq.n	82714 <setvbuf+0xac>
   826d8:	ab01      	add	r3, sp, #4
   826da:	466a      	mov	r2, sp
   826dc:	4621      	mov	r1, r4
   826de:	4628      	mov	r0, r5
   826e0:	f001 fcde 	bl	840a0 <__swhatbuf_r>
   826e4:	89a3      	ldrh	r3, [r4, #12]
   826e6:	4318      	orrs	r0, r3
   826e8:	81a0      	strh	r0, [r4, #12]
   826ea:	2e00      	cmp	r6, #0
   826ec:	d132      	bne.n	82754 <setvbuf+0xec>
   826ee:	9e00      	ldr	r6, [sp, #0]
   826f0:	4630      	mov	r0, r6
   826f2:	f001 fd4d 	bl	84190 <malloc>
   826f6:	4607      	mov	r7, r0
   826f8:	2800      	cmp	r0, #0
   826fa:	d06b      	beq.n	827d4 <setvbuf+0x16c>
   826fc:	89a3      	ldrh	r3, [r4, #12]
   826fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82702:	81a3      	strh	r3, [r4, #12]
   82704:	e028      	b.n	82758 <setvbuf+0xf0>
   82706:	89a3      	ldrh	r3, [r4, #12]
   82708:	0599      	lsls	r1, r3, #22
   8270a:	d4c7      	bmi.n	8269c <setvbuf+0x34>
   8270c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8270e:	f001 fcc3 	bl	84098 <__retarget_lock_acquire_recursive>
   82712:	e7c3      	b.n	8269c <setvbuf+0x34>
   82714:	2500      	movs	r5, #0
   82716:	2600      	movs	r6, #0
   82718:	2001      	movs	r0, #1
   8271a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8271c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82720:	f043 0302 	orr.w	r3, r3, #2
   82724:	60a6      	str	r6, [r4, #8]
   82726:	07ce      	lsls	r6, r1, #31
   82728:	81a3      	strh	r3, [r4, #12]
   8272a:	6160      	str	r0, [r4, #20]
   8272c:	6022      	str	r2, [r4, #0]
   8272e:	6122      	str	r2, [r4, #16]
   82730:	d401      	bmi.n	82736 <setvbuf+0xce>
   82732:	0598      	lsls	r0, r3, #22
   82734:	d53e      	bpl.n	827b4 <setvbuf+0x14c>
   82736:	4628      	mov	r0, r5
   82738:	b003      	add	sp, #12
   8273a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8273e:	6921      	ldr	r1, [r4, #16]
   82740:	4628      	mov	r0, r5
   82742:	f001 fa0f 	bl	83b64 <_free_r>
   82746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8274a:	e7bd      	b.n	826c8 <setvbuf+0x60>
   8274c:	4628      	mov	r0, r5
   8274e:	f001 f8e3 	bl	83918 <__sinit>
   82752:	e796      	b.n	82682 <setvbuf+0x1a>
   82754:	2f00      	cmp	r7, #0
   82756:	d0cb      	beq.n	826f0 <setvbuf+0x88>
   82758:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8275a:	2b00      	cmp	r3, #0
   8275c:	d033      	beq.n	827c6 <setvbuf+0x15e>
   8275e:	9b00      	ldr	r3, [sp, #0]
   82760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82764:	429e      	cmp	r6, r3
   82766:	bf1c      	itt	ne
   82768:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8276c:	81a2      	strhne	r2, [r4, #12]
   8276e:	f1b8 0f01 	cmp.w	r8, #1
   82772:	bf04      	itt	eq
   82774:	f042 0201 	orreq.w	r2, r2, #1
   82778:	81a2      	strheq	r2, [r4, #12]
   8277a:	b292      	uxth	r2, r2
   8277c:	f012 0308 	ands.w	r3, r2, #8
   82780:	6027      	str	r7, [r4, #0]
   82782:	6127      	str	r7, [r4, #16]
   82784:	6166      	str	r6, [r4, #20]
   82786:	d00e      	beq.n	827a6 <setvbuf+0x13e>
   82788:	07d1      	lsls	r1, r2, #31
   8278a:	d51a      	bpl.n	827c2 <setvbuf+0x15a>
   8278c:	2300      	movs	r3, #0
   8278e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82790:	4276      	negs	r6, r6
   82792:	f015 0501 	ands.w	r5, r5, #1
   82796:	61a6      	str	r6, [r4, #24]
   82798:	60a3      	str	r3, [r4, #8]
   8279a:	d009      	beq.n	827b0 <setvbuf+0x148>
   8279c:	2500      	movs	r5, #0
   8279e:	4628      	mov	r0, r5
   827a0:	b003      	add	sp, #12
   827a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   827a6:	60a3      	str	r3, [r4, #8]
   827a8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   827aa:	f015 0501 	ands.w	r5, r5, #1
   827ae:	d1f5      	bne.n	8279c <setvbuf+0x134>
   827b0:	0593      	lsls	r3, r2, #22
   827b2:	d4c0      	bmi.n	82736 <setvbuf+0xce>
   827b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   827b6:	f001 fc71 	bl	8409c <__retarget_lock_release_recursive>
   827ba:	4628      	mov	r0, r5
   827bc:	b003      	add	sp, #12
   827be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   827c2:	60a6      	str	r6, [r4, #8]
   827c4:	e7f0      	b.n	827a8 <setvbuf+0x140>
   827c6:	4628      	mov	r0, r5
   827c8:	f001 f8a6 	bl	83918 <__sinit>
   827cc:	e7c7      	b.n	8275e <setvbuf+0xf6>
   827ce:	f04f 35ff 	mov.w	r5, #4294967295
   827d2:	e7b0      	b.n	82736 <setvbuf+0xce>
   827d4:	f8dd 9000 	ldr.w	r9, [sp]
   827d8:	45b1      	cmp	r9, r6
   827da:	d004      	beq.n	827e6 <setvbuf+0x17e>
   827dc:	4648      	mov	r0, r9
   827de:	f001 fcd7 	bl	84190 <malloc>
   827e2:	4607      	mov	r7, r0
   827e4:	b920      	cbnz	r0, 827f0 <setvbuf+0x188>
   827e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   827ea:	f04f 35ff 	mov.w	r5, #4294967295
   827ee:	e792      	b.n	82716 <setvbuf+0xae>
   827f0:	464e      	mov	r6, r9
   827f2:	e783      	b.n	826fc <setvbuf+0x94>
   827f4:	2007013c 	.word	0x2007013c

000827f8 <strlen>:
   827f8:	f020 0103 	bic.w	r1, r0, #3
   827fc:	f010 0003 	ands.w	r0, r0, #3
   82800:	f1c0 0000 	rsb	r0, r0, #0
   82804:	f851 3b04 	ldr.w	r3, [r1], #4
   82808:	f100 0c04 	add.w	ip, r0, #4
   8280c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82810:	f06f 0200 	mvn.w	r2, #0
   82814:	bf1c      	itt	ne
   82816:	fa22 f20c 	lsrne.w	r2, r2, ip
   8281a:	4313      	orrne	r3, r2
   8281c:	f04f 0c01 	mov.w	ip, #1
   82820:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82824:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82828:	eba3 020c 	sub.w	r2, r3, ip
   8282c:	ea22 0203 	bic.w	r2, r2, r3
   82830:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82834:	bf04      	itt	eq
   82836:	f851 3b04 	ldreq.w	r3, [r1], #4
   8283a:	3004      	addeq	r0, #4
   8283c:	d0f4      	beq.n	82828 <strlen+0x30>
   8283e:	f1c2 0100 	rsb	r1, r2, #0
   82842:	ea02 0201 	and.w	r2, r2, r1
   82846:	fab2 f282 	clz	r2, r2
   8284a:	f1c2 021f 	rsb	r2, r2, #31
   8284e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82852:	4770      	bx	lr

00082854 <strncpy>:
   82854:	ea40 0301 	orr.w	r3, r0, r1
   82858:	f013 0f03 	tst.w	r3, #3
   8285c:	b470      	push	{r4, r5, r6}
   8285e:	4603      	mov	r3, r0
   82860:	d024      	beq.n	828ac <strncpy+0x58>
   82862:	b1a2      	cbz	r2, 8288e <strncpy+0x3a>
   82864:	780c      	ldrb	r4, [r1, #0]
   82866:	3a01      	subs	r2, #1
   82868:	701c      	strb	r4, [r3, #0]
   8286a:	3101      	adds	r1, #1
   8286c:	3301      	adds	r3, #1
   8286e:	b13c      	cbz	r4, 82880 <strncpy+0x2c>
   82870:	b16a      	cbz	r2, 8288e <strncpy+0x3a>
   82872:	f811 4b01 	ldrb.w	r4, [r1], #1
   82876:	3a01      	subs	r2, #1
   82878:	f803 4b01 	strb.w	r4, [r3], #1
   8287c:	2c00      	cmp	r4, #0
   8287e:	d1f7      	bne.n	82870 <strncpy+0x1c>
   82880:	b12a      	cbz	r2, 8288e <strncpy+0x3a>
   82882:	2100      	movs	r1, #0
   82884:	441a      	add	r2, r3
   82886:	f803 1b01 	strb.w	r1, [r3], #1
   8288a:	429a      	cmp	r2, r3
   8288c:	d1fb      	bne.n	82886 <strncpy+0x32>
   8288e:	bc70      	pop	{r4, r5, r6}
   82890:	4770      	bx	lr
   82892:	460e      	mov	r6, r1
   82894:	f851 5b04 	ldr.w	r5, [r1], #4
   82898:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   8289c:	ea24 0405 	bic.w	r4, r4, r5
   828a0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   828a4:	d105      	bne.n	828b2 <strncpy+0x5e>
   828a6:	3a04      	subs	r2, #4
   828a8:	f843 5b04 	str.w	r5, [r3], #4
   828ac:	2a03      	cmp	r2, #3
   828ae:	d8f0      	bhi.n	82892 <strncpy+0x3e>
   828b0:	e7d7      	b.n	82862 <strncpy+0xe>
   828b2:	4631      	mov	r1, r6
   828b4:	e7d6      	b.n	82864 <strncpy+0x10>
   828b6:	bf00      	nop

000828b8 <__sprint_r.part.0>:
   828b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   828be:	4693      	mov	fp, r2
   828c0:	049c      	lsls	r4, r3, #18
   828c2:	d52f      	bpl.n	82924 <__sprint_r.part.0+0x6c>
   828c4:	6893      	ldr	r3, [r2, #8]
   828c6:	6812      	ldr	r2, [r2, #0]
   828c8:	b353      	cbz	r3, 82920 <__sprint_r.part.0+0x68>
   828ca:	460e      	mov	r6, r1
   828cc:	4607      	mov	r7, r0
   828ce:	f102 0908 	add.w	r9, r2, #8
   828d2:	e919 0420 	ldmdb	r9, {r5, sl}
   828d6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   828da:	d017      	beq.n	8290c <__sprint_r.part.0+0x54>
   828dc:	2400      	movs	r4, #0
   828de:	3d04      	subs	r5, #4
   828e0:	e001      	b.n	828e6 <__sprint_r.part.0+0x2e>
   828e2:	45a0      	cmp	r8, r4
   828e4:	d010      	beq.n	82908 <__sprint_r.part.0+0x50>
   828e6:	4632      	mov	r2, r6
   828e8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   828ec:	4638      	mov	r0, r7
   828ee:	f001 f8b5 	bl	83a5c <_fputwc_r>
   828f2:	1c43      	adds	r3, r0, #1
   828f4:	f104 0401 	add.w	r4, r4, #1
   828f8:	d1f3      	bne.n	828e2 <__sprint_r.part.0+0x2a>
   828fa:	2300      	movs	r3, #0
   828fc:	f8cb 3008 	str.w	r3, [fp, #8]
   82900:	f8cb 3004 	str.w	r3, [fp, #4]
   82904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82908:	f8db 3008 	ldr.w	r3, [fp, #8]
   8290c:	f02a 0a03 	bic.w	sl, sl, #3
   82910:	eba3 030a 	sub.w	r3, r3, sl
   82914:	f8cb 3008 	str.w	r3, [fp, #8]
   82918:	f109 0908 	add.w	r9, r9, #8
   8291c:	2b00      	cmp	r3, #0
   8291e:	d1d8      	bne.n	828d2 <__sprint_r.part.0+0x1a>
   82920:	2000      	movs	r0, #0
   82922:	e7ea      	b.n	828fa <__sprint_r.part.0+0x42>
   82924:	f001 fa04 	bl	83d30 <__sfvwrite_r>
   82928:	2300      	movs	r3, #0
   8292a:	f8cb 3008 	str.w	r3, [fp, #8]
   8292e:	f8cb 3004 	str.w	r3, [fp, #4]
   82932:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82936:	bf00      	nop

00082938 <_vfiprintf_r>:
   82938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8293c:	b0ad      	sub	sp, #180	; 0xb4
   8293e:	461d      	mov	r5, r3
   82940:	468b      	mov	fp, r1
   82942:	4690      	mov	r8, r2
   82944:	9307      	str	r3, [sp, #28]
   82946:	9006      	str	r0, [sp, #24]
   82948:	b118      	cbz	r0, 82952 <_vfiprintf_r+0x1a>
   8294a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8294c:	2b00      	cmp	r3, #0
   8294e:	f000 80f3 	beq.w	82b38 <_vfiprintf_r+0x200>
   82952:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82956:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8295a:	07df      	lsls	r7, r3, #31
   8295c:	b281      	uxth	r1, r0
   8295e:	d402      	bmi.n	82966 <_vfiprintf_r+0x2e>
   82960:	058e      	lsls	r6, r1, #22
   82962:	f140 80fc 	bpl.w	82b5e <_vfiprintf_r+0x226>
   82966:	048c      	lsls	r4, r1, #18
   82968:	d40a      	bmi.n	82980 <_vfiprintf_r+0x48>
   8296a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8296e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82976:	f8ab 100c 	strh.w	r1, [fp, #12]
   8297a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8297e:	b289      	uxth	r1, r1
   82980:	0708      	lsls	r0, r1, #28
   82982:	f140 80b3 	bpl.w	82aec <_vfiprintf_r+0x1b4>
   82986:	f8db 3010 	ldr.w	r3, [fp, #16]
   8298a:	2b00      	cmp	r3, #0
   8298c:	f000 80ae 	beq.w	82aec <_vfiprintf_r+0x1b4>
   82990:	f001 031a 	and.w	r3, r1, #26
   82994:	2b0a      	cmp	r3, #10
   82996:	f000 80b5 	beq.w	82b04 <_vfiprintf_r+0x1cc>
   8299a:	2300      	movs	r3, #0
   8299c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   829a0:	46d1      	mov	r9, sl
   829a2:	930b      	str	r3, [sp, #44]	; 0x2c
   829a4:	9303      	str	r3, [sp, #12]
   829a6:	9311      	str	r3, [sp, #68]	; 0x44
   829a8:	9310      	str	r3, [sp, #64]	; 0x40
   829aa:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   829ae:	f8cd b010 	str.w	fp, [sp, #16]
   829b2:	f898 3000 	ldrb.w	r3, [r8]
   829b6:	4644      	mov	r4, r8
   829b8:	b1fb      	cbz	r3, 829fa <_vfiprintf_r+0xc2>
   829ba:	2b25      	cmp	r3, #37	; 0x25
   829bc:	d102      	bne.n	829c4 <_vfiprintf_r+0x8c>
   829be:	e01c      	b.n	829fa <_vfiprintf_r+0xc2>
   829c0:	2b25      	cmp	r3, #37	; 0x25
   829c2:	d003      	beq.n	829cc <_vfiprintf_r+0x94>
   829c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   829c8:	2b00      	cmp	r3, #0
   829ca:	d1f9      	bne.n	829c0 <_vfiprintf_r+0x88>
   829cc:	eba4 0508 	sub.w	r5, r4, r8
   829d0:	b19d      	cbz	r5, 829fa <_vfiprintf_r+0xc2>
   829d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   829d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   829d6:	3301      	adds	r3, #1
   829d8:	442a      	add	r2, r5
   829da:	2b07      	cmp	r3, #7
   829dc:	f8c9 8000 	str.w	r8, [r9]
   829e0:	f8c9 5004 	str.w	r5, [r9, #4]
   829e4:	9211      	str	r2, [sp, #68]	; 0x44
   829e6:	9310      	str	r3, [sp, #64]	; 0x40
   829e8:	dd7a      	ble.n	82ae0 <_vfiprintf_r+0x1a8>
   829ea:	2a00      	cmp	r2, #0
   829ec:	f040 84b5 	bne.w	8335a <_vfiprintf_r+0xa22>
   829f0:	46d1      	mov	r9, sl
   829f2:	9b03      	ldr	r3, [sp, #12]
   829f4:	9210      	str	r2, [sp, #64]	; 0x40
   829f6:	442b      	add	r3, r5
   829f8:	9303      	str	r3, [sp, #12]
   829fa:	7823      	ldrb	r3, [r4, #0]
   829fc:	2b00      	cmp	r3, #0
   829fe:	f000 83e5 	beq.w	831cc <_vfiprintf_r+0x894>
   82a02:	2000      	movs	r0, #0
   82a04:	f04f 0300 	mov.w	r3, #0
   82a08:	f104 0801 	add.w	r8, r4, #1
   82a0c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82a10:	7862      	ldrb	r2, [r4, #1]
   82a12:	4606      	mov	r6, r0
   82a14:	4605      	mov	r5, r0
   82a16:	4603      	mov	r3, r0
   82a18:	f04f 34ff 	mov.w	r4, #4294967295
   82a1c:	f108 0801 	add.w	r8, r8, #1
   82a20:	f1a2 0120 	sub.w	r1, r2, #32
   82a24:	2958      	cmp	r1, #88	; 0x58
   82a26:	f200 82d9 	bhi.w	82fdc <_vfiprintf_r+0x6a4>
   82a2a:	e8df f011 	tbh	[pc, r1, lsl #1]
   82a2e:	0228      	.short	0x0228
   82a30:	02d702d7 	.word	0x02d702d7
   82a34:	02d70230 	.word	0x02d70230
   82a38:	02d702d7 	.word	0x02d702d7
   82a3c:	02d702d7 	.word	0x02d702d7
   82a40:	00a002d7 	.word	0x00a002d7
   82a44:	02d70288 	.word	0x02d70288
   82a48:	02b800a8 	.word	0x02b800a8
   82a4c:	01a602d7 	.word	0x01a602d7
   82a50:	01ab01ab 	.word	0x01ab01ab
   82a54:	01ab01ab 	.word	0x01ab01ab
   82a58:	01ab01ab 	.word	0x01ab01ab
   82a5c:	01ab01ab 	.word	0x01ab01ab
   82a60:	02d701ab 	.word	0x02d701ab
   82a64:	02d702d7 	.word	0x02d702d7
   82a68:	02d702d7 	.word	0x02d702d7
   82a6c:	02d702d7 	.word	0x02d702d7
   82a70:	02d702d7 	.word	0x02d702d7
   82a74:	01b902d7 	.word	0x01b902d7
   82a78:	02d702d7 	.word	0x02d702d7
   82a7c:	02d702d7 	.word	0x02d702d7
   82a80:	02d702d7 	.word	0x02d702d7
   82a84:	02d702d7 	.word	0x02d702d7
   82a88:	02d702d7 	.word	0x02d702d7
   82a8c:	02d7019e 	.word	0x02d7019e
   82a90:	02d702d7 	.word	0x02d702d7
   82a94:	02d702d7 	.word	0x02d702d7
   82a98:	02d701a2 	.word	0x02d701a2
   82a9c:	025a02d7 	.word	0x025a02d7
   82aa0:	02d702d7 	.word	0x02d702d7
   82aa4:	02d702d7 	.word	0x02d702d7
   82aa8:	02d702d7 	.word	0x02d702d7
   82aac:	02d702d7 	.word	0x02d702d7
   82ab0:	02d702d7 	.word	0x02d702d7
   82ab4:	02220261 	.word	0x02220261
   82ab8:	02d702d7 	.word	0x02d702d7
   82abc:	027602d7 	.word	0x027602d7
   82ac0:	02d70222 	.word	0x02d70222
   82ac4:	027b02d7 	.word	0x027b02d7
   82ac8:	01fc02d7 	.word	0x01fc02d7
   82acc:	02100189 	.word	0x02100189
   82ad0:	02d702d2 	.word	0x02d702d2
   82ad4:	02d70295 	.word	0x02d70295
   82ad8:	02d700ad 	.word	0x02d700ad
   82adc:	023502d7 	.word	0x023502d7
   82ae0:	f109 0908 	add.w	r9, r9, #8
   82ae4:	9b03      	ldr	r3, [sp, #12]
   82ae6:	442b      	add	r3, r5
   82ae8:	9303      	str	r3, [sp, #12]
   82aea:	e786      	b.n	829fa <_vfiprintf_r+0xc2>
   82aec:	4659      	mov	r1, fp
   82aee:	9806      	ldr	r0, [sp, #24]
   82af0:	f000 fdaa 	bl	83648 <__swsetup_r>
   82af4:	bb18      	cbnz	r0, 82b3e <_vfiprintf_r+0x206>
   82af6:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82afa:	f001 031a 	and.w	r3, r1, #26
   82afe:	2b0a      	cmp	r3, #10
   82b00:	f47f af4b 	bne.w	8299a <_vfiprintf_r+0x62>
   82b04:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82b08:	2b00      	cmp	r3, #0
   82b0a:	f6ff af46 	blt.w	8299a <_vfiprintf_r+0x62>
   82b0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b12:	07db      	lsls	r3, r3, #31
   82b14:	d405      	bmi.n	82b22 <_vfiprintf_r+0x1ea>
   82b16:	058f      	lsls	r7, r1, #22
   82b18:	d403      	bmi.n	82b22 <_vfiprintf_r+0x1ea>
   82b1a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82b1e:	f001 fabd 	bl	8409c <__retarget_lock_release_recursive>
   82b22:	462b      	mov	r3, r5
   82b24:	4642      	mov	r2, r8
   82b26:	4659      	mov	r1, fp
   82b28:	9806      	ldr	r0, [sp, #24]
   82b2a:	f000 fd49 	bl	835c0 <__sbprintf>
   82b2e:	9003      	str	r0, [sp, #12]
   82b30:	9803      	ldr	r0, [sp, #12]
   82b32:	b02d      	add	sp, #180	; 0xb4
   82b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b38:	f000 feee 	bl	83918 <__sinit>
   82b3c:	e709      	b.n	82952 <_vfiprintf_r+0x1a>
   82b3e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b42:	07d9      	lsls	r1, r3, #31
   82b44:	d404      	bmi.n	82b50 <_vfiprintf_r+0x218>
   82b46:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82b4a:	059a      	lsls	r2, r3, #22
   82b4c:	f140 84ae 	bpl.w	834ac <_vfiprintf_r+0xb74>
   82b50:	f04f 33ff 	mov.w	r3, #4294967295
   82b54:	9303      	str	r3, [sp, #12]
   82b56:	9803      	ldr	r0, [sp, #12]
   82b58:	b02d      	add	sp, #180	; 0xb4
   82b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b5e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82b62:	f001 fa99 	bl	84098 <__retarget_lock_acquire_recursive>
   82b66:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82b6a:	b281      	uxth	r1, r0
   82b6c:	e6fb      	b.n	82966 <_vfiprintf_r+0x2e>
   82b6e:	9907      	ldr	r1, [sp, #28]
   82b70:	460a      	mov	r2, r1
   82b72:	680d      	ldr	r5, [r1, #0]
   82b74:	3204      	adds	r2, #4
   82b76:	2d00      	cmp	r5, #0
   82b78:	9207      	str	r2, [sp, #28]
   82b7a:	da02      	bge.n	82b82 <_vfiprintf_r+0x24a>
   82b7c:	426d      	negs	r5, r5
   82b7e:	f043 0304 	orr.w	r3, r3, #4
   82b82:	f898 2000 	ldrb.w	r2, [r8]
   82b86:	e749      	b.n	82a1c <_vfiprintf_r+0xe4>
   82b88:	9508      	str	r5, [sp, #32]
   82b8a:	069e      	lsls	r6, r3, #26
   82b8c:	f100 845a 	bmi.w	83444 <_vfiprintf_r+0xb0c>
   82b90:	9907      	ldr	r1, [sp, #28]
   82b92:	06dd      	lsls	r5, r3, #27
   82b94:	460a      	mov	r2, r1
   82b96:	f100 83ef 	bmi.w	83378 <_vfiprintf_r+0xa40>
   82b9a:	0658      	lsls	r0, r3, #25
   82b9c:	f140 83ec 	bpl.w	83378 <_vfiprintf_r+0xa40>
   82ba0:	2700      	movs	r7, #0
   82ba2:	2201      	movs	r2, #1
   82ba4:	880e      	ldrh	r6, [r1, #0]
   82ba6:	3104      	adds	r1, #4
   82ba8:	9107      	str	r1, [sp, #28]
   82baa:	f04f 0100 	mov.w	r1, #0
   82bae:	2500      	movs	r5, #0
   82bb0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82bb4:	1c61      	adds	r1, r4, #1
   82bb6:	f000 8117 	beq.w	82de8 <_vfiprintf_r+0x4b0>
   82bba:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82bbe:	9102      	str	r1, [sp, #8]
   82bc0:	ea56 0107 	orrs.w	r1, r6, r7
   82bc4:	f040 8115 	bne.w	82df2 <_vfiprintf_r+0x4ba>
   82bc8:	2c00      	cmp	r4, #0
   82bca:	f040 835b 	bne.w	83284 <_vfiprintf_r+0x94c>
   82bce:	2a00      	cmp	r2, #0
   82bd0:	f040 83b6 	bne.w	83340 <_vfiprintf_r+0xa08>
   82bd4:	f013 0301 	ands.w	r3, r3, #1
   82bd8:	9305      	str	r3, [sp, #20]
   82bda:	f000 8455 	beq.w	83488 <_vfiprintf_r+0xb50>
   82bde:	2330      	movs	r3, #48	; 0x30
   82be0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82be4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82be8:	9b05      	ldr	r3, [sp, #20]
   82bea:	42a3      	cmp	r3, r4
   82bec:	bfb8      	it	lt
   82bee:	4623      	movlt	r3, r4
   82bf0:	9301      	str	r3, [sp, #4]
   82bf2:	b10d      	cbz	r5, 82bf8 <_vfiprintf_r+0x2c0>
   82bf4:	3301      	adds	r3, #1
   82bf6:	9301      	str	r3, [sp, #4]
   82bf8:	9b02      	ldr	r3, [sp, #8]
   82bfa:	f013 0302 	ands.w	r3, r3, #2
   82bfe:	9309      	str	r3, [sp, #36]	; 0x24
   82c00:	d002      	beq.n	82c08 <_vfiprintf_r+0x2d0>
   82c02:	9b01      	ldr	r3, [sp, #4]
   82c04:	3302      	adds	r3, #2
   82c06:	9301      	str	r3, [sp, #4]
   82c08:	9b02      	ldr	r3, [sp, #8]
   82c0a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82c0e:	930a      	str	r3, [sp, #40]	; 0x28
   82c10:	f040 8215 	bne.w	8303e <_vfiprintf_r+0x706>
   82c14:	9b08      	ldr	r3, [sp, #32]
   82c16:	9a01      	ldr	r2, [sp, #4]
   82c18:	1a9d      	subs	r5, r3, r2
   82c1a:	2d00      	cmp	r5, #0
   82c1c:	f340 820f 	ble.w	8303e <_vfiprintf_r+0x706>
   82c20:	2d10      	cmp	r5, #16
   82c22:	f340 8484 	ble.w	8352e <_vfiprintf_r+0xbf6>
   82c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82c28:	46ce      	mov	lr, r9
   82c2a:	2710      	movs	r7, #16
   82c2c:	46a1      	mov	r9, r4
   82c2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c30:	4ec5      	ldr	r6, [pc, #788]	; (82f48 <_vfiprintf_r+0x610>)
   82c32:	4619      	mov	r1, r3
   82c34:	9c06      	ldr	r4, [sp, #24]
   82c36:	e007      	b.n	82c48 <_vfiprintf_r+0x310>
   82c38:	f101 0c02 	add.w	ip, r1, #2
   82c3c:	4601      	mov	r1, r0
   82c3e:	f10e 0e08 	add.w	lr, lr, #8
   82c42:	3d10      	subs	r5, #16
   82c44:	2d10      	cmp	r5, #16
   82c46:	dd11      	ble.n	82c6c <_vfiprintf_r+0x334>
   82c48:	1c48      	adds	r0, r1, #1
   82c4a:	3210      	adds	r2, #16
   82c4c:	2807      	cmp	r0, #7
   82c4e:	9211      	str	r2, [sp, #68]	; 0x44
   82c50:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82c54:	9010      	str	r0, [sp, #64]	; 0x40
   82c56:	ddef      	ble.n	82c38 <_vfiprintf_r+0x300>
   82c58:	2a00      	cmp	r2, #0
   82c5a:	f040 81d9 	bne.w	83010 <_vfiprintf_r+0x6d8>
   82c5e:	3d10      	subs	r5, #16
   82c60:	2d10      	cmp	r5, #16
   82c62:	4611      	mov	r1, r2
   82c64:	f04f 0c01 	mov.w	ip, #1
   82c68:	46d6      	mov	lr, sl
   82c6a:	dced      	bgt.n	82c48 <_vfiprintf_r+0x310>
   82c6c:	464c      	mov	r4, r9
   82c6e:	4661      	mov	r1, ip
   82c70:	46f1      	mov	r9, lr
   82c72:	442a      	add	r2, r5
   82c74:	2907      	cmp	r1, #7
   82c76:	9211      	str	r2, [sp, #68]	; 0x44
   82c78:	f8c9 6000 	str.w	r6, [r9]
   82c7c:	f8c9 5004 	str.w	r5, [r9, #4]
   82c80:	9110      	str	r1, [sp, #64]	; 0x40
   82c82:	f300 82eb 	bgt.w	8325c <_vfiprintf_r+0x924>
   82c86:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82c8a:	f109 0908 	add.w	r9, r9, #8
   82c8e:	1c48      	adds	r0, r1, #1
   82c90:	2d00      	cmp	r5, #0
   82c92:	f040 81dc 	bne.w	8304e <_vfiprintf_r+0x716>
   82c96:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82c98:	2b00      	cmp	r3, #0
   82c9a:	f000 81f6 	beq.w	8308a <_vfiprintf_r+0x752>
   82c9e:	2102      	movs	r1, #2
   82ca0:	ab0e      	add	r3, sp, #56	; 0x38
   82ca2:	440a      	add	r2, r1
   82ca4:	2807      	cmp	r0, #7
   82ca6:	9211      	str	r2, [sp, #68]	; 0x44
   82ca8:	9010      	str	r0, [sp, #64]	; 0x40
   82caa:	f8c9 1004 	str.w	r1, [r9, #4]
   82cae:	f8c9 3000 	str.w	r3, [r9]
   82cb2:	f340 81e6 	ble.w	83082 <_vfiprintf_r+0x74a>
   82cb6:	2a00      	cmp	r2, #0
   82cb8:	f040 8395 	bne.w	833e6 <_vfiprintf_r+0xaae>
   82cbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82cbe:	2001      	movs	r0, #1
   82cc0:	2b80      	cmp	r3, #128	; 0x80
   82cc2:	4611      	mov	r1, r2
   82cc4:	46d1      	mov	r9, sl
   82cc6:	f040 81e4 	bne.w	83092 <_vfiprintf_r+0x75a>
   82cca:	9b08      	ldr	r3, [sp, #32]
   82ccc:	9d01      	ldr	r5, [sp, #4]
   82cce:	1b5e      	subs	r6, r3, r5
   82cd0:	2e00      	cmp	r6, #0
   82cd2:	f340 81de 	ble.w	83092 <_vfiprintf_r+0x75a>
   82cd6:	2e10      	cmp	r6, #16
   82cd8:	f340 843c 	ble.w	83554 <_vfiprintf_r+0xc1c>
   82cdc:	46cc      	mov	ip, r9
   82cde:	2710      	movs	r7, #16
   82ce0:	46a1      	mov	r9, r4
   82ce2:	4d9a      	ldr	r5, [pc, #616]	; (82f4c <_vfiprintf_r+0x614>)
   82ce4:	9c06      	ldr	r4, [sp, #24]
   82ce6:	e007      	b.n	82cf8 <_vfiprintf_r+0x3c0>
   82ce8:	f101 0e02 	add.w	lr, r1, #2
   82cec:	4601      	mov	r1, r0
   82cee:	f10c 0c08 	add.w	ip, ip, #8
   82cf2:	3e10      	subs	r6, #16
   82cf4:	2e10      	cmp	r6, #16
   82cf6:	dd11      	ble.n	82d1c <_vfiprintf_r+0x3e4>
   82cf8:	1c48      	adds	r0, r1, #1
   82cfa:	3210      	adds	r2, #16
   82cfc:	2807      	cmp	r0, #7
   82cfe:	9211      	str	r2, [sp, #68]	; 0x44
   82d00:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82d04:	9010      	str	r0, [sp, #64]	; 0x40
   82d06:	ddef      	ble.n	82ce8 <_vfiprintf_r+0x3b0>
   82d08:	2a00      	cmp	r2, #0
   82d0a:	f040 829b 	bne.w	83244 <_vfiprintf_r+0x90c>
   82d0e:	3e10      	subs	r6, #16
   82d10:	2e10      	cmp	r6, #16
   82d12:	f04f 0e01 	mov.w	lr, #1
   82d16:	4611      	mov	r1, r2
   82d18:	46d4      	mov	ip, sl
   82d1a:	dced      	bgt.n	82cf8 <_vfiprintf_r+0x3c0>
   82d1c:	464c      	mov	r4, r9
   82d1e:	46e1      	mov	r9, ip
   82d20:	4432      	add	r2, r6
   82d22:	f1be 0f07 	cmp.w	lr, #7
   82d26:	9211      	str	r2, [sp, #68]	; 0x44
   82d28:	e889 0060 	stmia.w	r9, {r5, r6}
   82d2c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82d30:	f300 8366 	bgt.w	83400 <_vfiprintf_r+0xac8>
   82d34:	f109 0908 	add.w	r9, r9, #8
   82d38:	f10e 0001 	add.w	r0, lr, #1
   82d3c:	4671      	mov	r1, lr
   82d3e:	e1a8      	b.n	83092 <_vfiprintf_r+0x75a>
   82d40:	9508      	str	r5, [sp, #32]
   82d42:	f013 0220 	ands.w	r2, r3, #32
   82d46:	f040 8389 	bne.w	8345c <_vfiprintf_r+0xb24>
   82d4a:	f013 0110 	ands.w	r1, r3, #16
   82d4e:	f040 8319 	bne.w	83384 <_vfiprintf_r+0xa4c>
   82d52:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82d56:	f000 8315 	beq.w	83384 <_vfiprintf_r+0xa4c>
   82d5a:	9807      	ldr	r0, [sp, #28]
   82d5c:	460a      	mov	r2, r1
   82d5e:	4601      	mov	r1, r0
   82d60:	3104      	adds	r1, #4
   82d62:	8806      	ldrh	r6, [r0, #0]
   82d64:	2700      	movs	r7, #0
   82d66:	9107      	str	r1, [sp, #28]
   82d68:	e71f      	b.n	82baa <_vfiprintf_r+0x272>
   82d6a:	9508      	str	r5, [sp, #32]
   82d6c:	f043 0310 	orr.w	r3, r3, #16
   82d70:	e7e7      	b.n	82d42 <_vfiprintf_r+0x40a>
   82d72:	9508      	str	r5, [sp, #32]
   82d74:	f043 0310 	orr.w	r3, r3, #16
   82d78:	e707      	b.n	82b8a <_vfiprintf_r+0x252>
   82d7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d7e:	f898 2000 	ldrb.w	r2, [r8]
   82d82:	e64b      	b.n	82a1c <_vfiprintf_r+0xe4>
   82d84:	2500      	movs	r5, #0
   82d86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82d8a:	f818 2b01 	ldrb.w	r2, [r8], #1
   82d8e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82d92:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82d96:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82d9a:	2909      	cmp	r1, #9
   82d9c:	d9f5      	bls.n	82d8a <_vfiprintf_r+0x452>
   82d9e:	e63f      	b.n	82a20 <_vfiprintf_r+0xe8>
   82da0:	9508      	str	r5, [sp, #32]
   82da2:	2800      	cmp	r0, #0
   82da4:	f040 8402 	bne.w	835ac <_vfiprintf_r+0xc74>
   82da8:	f043 0310 	orr.w	r3, r3, #16
   82dac:	069e      	lsls	r6, r3, #26
   82dae:	f100 833d 	bmi.w	8342c <_vfiprintf_r+0xaf4>
   82db2:	9907      	ldr	r1, [sp, #28]
   82db4:	06dd      	lsls	r5, r3, #27
   82db6:	460a      	mov	r2, r1
   82db8:	f100 82f0 	bmi.w	8339c <_vfiprintf_r+0xa64>
   82dbc:	0658      	lsls	r0, r3, #25
   82dbe:	f140 82ed 	bpl.w	8339c <_vfiprintf_r+0xa64>
   82dc2:	f9b1 6000 	ldrsh.w	r6, [r1]
   82dc6:	3204      	adds	r2, #4
   82dc8:	17f7      	asrs	r7, r6, #31
   82dca:	4630      	mov	r0, r6
   82dcc:	4639      	mov	r1, r7
   82dce:	9207      	str	r2, [sp, #28]
   82dd0:	2800      	cmp	r0, #0
   82dd2:	f171 0200 	sbcs.w	r2, r1, #0
   82dd6:	f2c0 835a 	blt.w	8348e <_vfiprintf_r+0xb56>
   82dda:	1c61      	adds	r1, r4, #1
   82ddc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82de0:	f04f 0201 	mov.w	r2, #1
   82de4:	f47f aee9 	bne.w	82bba <_vfiprintf_r+0x282>
   82de8:	ea56 0107 	orrs.w	r1, r6, r7
   82dec:	f000 824b 	beq.w	83286 <_vfiprintf_r+0x94e>
   82df0:	9302      	str	r3, [sp, #8]
   82df2:	2a01      	cmp	r2, #1
   82df4:	f000 828a 	beq.w	8330c <_vfiprintf_r+0x9d4>
   82df8:	2a02      	cmp	r2, #2
   82dfa:	f040 825a 	bne.w	832b2 <_vfiprintf_r+0x97a>
   82dfe:	46d3      	mov	fp, sl
   82e00:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82e02:	0933      	lsrs	r3, r6, #4
   82e04:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82e08:	0939      	lsrs	r1, r7, #4
   82e0a:	f006 020f 	and.w	r2, r6, #15
   82e0e:	460f      	mov	r7, r1
   82e10:	461e      	mov	r6, r3
   82e12:	5c83      	ldrb	r3, [r0, r2]
   82e14:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82e18:	ea56 0307 	orrs.w	r3, r6, r7
   82e1c:	d1f1      	bne.n	82e02 <_vfiprintf_r+0x4ca>
   82e1e:	ebaa 030b 	sub.w	r3, sl, fp
   82e22:	9305      	str	r3, [sp, #20]
   82e24:	e6e0      	b.n	82be8 <_vfiprintf_r+0x2b0>
   82e26:	2800      	cmp	r0, #0
   82e28:	f040 83bd 	bne.w	835a6 <_vfiprintf_r+0xc6e>
   82e2c:	0699      	lsls	r1, r3, #26
   82e2e:	f100 8359 	bmi.w	834e4 <_vfiprintf_r+0xbac>
   82e32:	06da      	lsls	r2, r3, #27
   82e34:	f100 80e5 	bmi.w	83002 <_vfiprintf_r+0x6ca>
   82e38:	065b      	lsls	r3, r3, #25
   82e3a:	f140 80e2 	bpl.w	83002 <_vfiprintf_r+0x6ca>
   82e3e:	9a07      	ldr	r2, [sp, #28]
   82e40:	6813      	ldr	r3, [r2, #0]
   82e42:	3204      	adds	r2, #4
   82e44:	9207      	str	r2, [sp, #28]
   82e46:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82e4a:	801a      	strh	r2, [r3, #0]
   82e4c:	e5b1      	b.n	829b2 <_vfiprintf_r+0x7a>
   82e4e:	2278      	movs	r2, #120	; 0x78
   82e50:	2130      	movs	r1, #48	; 0x30
   82e52:	9508      	str	r5, [sp, #32]
   82e54:	9d07      	ldr	r5, [sp, #28]
   82e56:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82e5a:	1d2a      	adds	r2, r5, #4
   82e5c:	9207      	str	r2, [sp, #28]
   82e5e:	4a3c      	ldr	r2, [pc, #240]	; (82f50 <_vfiprintf_r+0x618>)
   82e60:	682e      	ldr	r6, [r5, #0]
   82e62:	920b      	str	r2, [sp, #44]	; 0x2c
   82e64:	f043 0302 	orr.w	r3, r3, #2
   82e68:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82e6c:	2700      	movs	r7, #0
   82e6e:	2202      	movs	r2, #2
   82e70:	e69b      	b.n	82baa <_vfiprintf_r+0x272>
   82e72:	9508      	str	r5, [sp, #32]
   82e74:	2800      	cmp	r0, #0
   82e76:	d099      	beq.n	82dac <_vfiprintf_r+0x474>
   82e78:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e7c:	e796      	b.n	82dac <_vfiprintf_r+0x474>
   82e7e:	f898 2000 	ldrb.w	r2, [r8]
   82e82:	2e00      	cmp	r6, #0
   82e84:	f47f adca 	bne.w	82a1c <_vfiprintf_r+0xe4>
   82e88:	2001      	movs	r0, #1
   82e8a:	2620      	movs	r6, #32
   82e8c:	e5c6      	b.n	82a1c <_vfiprintf_r+0xe4>
   82e8e:	f043 0301 	orr.w	r3, r3, #1
   82e92:	f898 2000 	ldrb.w	r2, [r8]
   82e96:	e5c1      	b.n	82a1c <_vfiprintf_r+0xe4>
   82e98:	9508      	str	r5, [sp, #32]
   82e9a:	2800      	cmp	r0, #0
   82e9c:	f040 8380 	bne.w	835a0 <_vfiprintf_r+0xc68>
   82ea0:	492b      	ldr	r1, [pc, #172]	; (82f50 <_vfiprintf_r+0x618>)
   82ea2:	910b      	str	r1, [sp, #44]	; 0x2c
   82ea4:	069f      	lsls	r7, r3, #26
   82ea6:	f100 82e5 	bmi.w	83474 <_vfiprintf_r+0xb3c>
   82eaa:	9807      	ldr	r0, [sp, #28]
   82eac:	06de      	lsls	r6, r3, #27
   82eae:	4601      	mov	r1, r0
   82eb0:	f100 826f 	bmi.w	83392 <_vfiprintf_r+0xa5a>
   82eb4:	065d      	lsls	r5, r3, #25
   82eb6:	f140 826c 	bpl.w	83392 <_vfiprintf_r+0xa5a>
   82eba:	2700      	movs	r7, #0
   82ebc:	3104      	adds	r1, #4
   82ebe:	8806      	ldrh	r6, [r0, #0]
   82ec0:	9107      	str	r1, [sp, #28]
   82ec2:	07d8      	lsls	r0, r3, #31
   82ec4:	f140 8220 	bpl.w	83308 <_vfiprintf_r+0x9d0>
   82ec8:	ea56 0107 	orrs.w	r1, r6, r7
   82ecc:	f000 821c 	beq.w	83308 <_vfiprintf_r+0x9d0>
   82ed0:	2130      	movs	r1, #48	; 0x30
   82ed2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82ed6:	f043 0302 	orr.w	r3, r3, #2
   82eda:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82ede:	2202      	movs	r2, #2
   82ee0:	e663      	b.n	82baa <_vfiprintf_r+0x272>
   82ee2:	9508      	str	r5, [sp, #32]
   82ee4:	2800      	cmp	r0, #0
   82ee6:	f040 8355 	bne.w	83594 <_vfiprintf_r+0xc5c>
   82eea:	491a      	ldr	r1, [pc, #104]	; (82f54 <_vfiprintf_r+0x61c>)
   82eec:	910b      	str	r1, [sp, #44]	; 0x2c
   82eee:	e7d9      	b.n	82ea4 <_vfiprintf_r+0x56c>
   82ef0:	2201      	movs	r2, #1
   82ef2:	9807      	ldr	r0, [sp, #28]
   82ef4:	4611      	mov	r1, r2
   82ef6:	9201      	str	r2, [sp, #4]
   82ef8:	6802      	ldr	r2, [r0, #0]
   82efa:	f04f 0400 	mov.w	r4, #0
   82efe:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82f02:	4602      	mov	r2, r0
   82f04:	3204      	adds	r2, #4
   82f06:	9508      	str	r5, [sp, #32]
   82f08:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82f0c:	9105      	str	r1, [sp, #20]
   82f0e:	9207      	str	r2, [sp, #28]
   82f10:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82f14:	9302      	str	r3, [sp, #8]
   82f16:	2400      	movs	r4, #0
   82f18:	e66e      	b.n	82bf8 <_vfiprintf_r+0x2c0>
   82f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f1e:	f898 2000 	ldrb.w	r2, [r8]
   82f22:	e57b      	b.n	82a1c <_vfiprintf_r+0xe4>
   82f24:	f898 2000 	ldrb.w	r2, [r8]
   82f28:	2a6c      	cmp	r2, #108	; 0x6c
   82f2a:	bf03      	ittte	eq
   82f2c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82f30:	f043 0320 	orreq.w	r3, r3, #32
   82f34:	f108 0801 	addeq.w	r8, r8, #1
   82f38:	f043 0310 	orrne.w	r3, r3, #16
   82f3c:	e56e      	b.n	82a1c <_vfiprintf_r+0xe4>
   82f3e:	f898 2000 	ldrb.w	r2, [r8]
   82f42:	2001      	movs	r0, #1
   82f44:	262b      	movs	r6, #43	; 0x2b
   82f46:	e569      	b.n	82a1c <_vfiprintf_r+0xe4>
   82f48:	000853fc 	.word	0x000853fc
   82f4c:	0008540c 	.word	0x0008540c
   82f50:	000853e0 	.word	0x000853e0
   82f54:	000853cc 	.word	0x000853cc
   82f58:	f04f 0200 	mov.w	r2, #0
   82f5c:	9907      	ldr	r1, [sp, #28]
   82f5e:	9508      	str	r5, [sp, #32]
   82f60:	f8d1 b000 	ldr.w	fp, [r1]
   82f64:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82f68:	1d0d      	adds	r5, r1, #4
   82f6a:	f1bb 0f00 	cmp.w	fp, #0
   82f6e:	f000 82e4 	beq.w	8353a <_vfiprintf_r+0xc02>
   82f72:	1c67      	adds	r7, r4, #1
   82f74:	f000 82c3 	beq.w	834fe <_vfiprintf_r+0xbc6>
   82f78:	4622      	mov	r2, r4
   82f7a:	2100      	movs	r1, #0
   82f7c:	4658      	mov	r0, fp
   82f7e:	9301      	str	r3, [sp, #4]
   82f80:	f001 fbc6 	bl	84710 <memchr>
   82f84:	9b01      	ldr	r3, [sp, #4]
   82f86:	2800      	cmp	r0, #0
   82f88:	f000 82e8 	beq.w	8355c <_vfiprintf_r+0xc24>
   82f8c:	eba0 020b 	sub.w	r2, r0, fp
   82f90:	9507      	str	r5, [sp, #28]
   82f92:	9205      	str	r2, [sp, #20]
   82f94:	9302      	str	r3, [sp, #8]
   82f96:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82f9a:	2400      	movs	r4, #0
   82f9c:	e624      	b.n	82be8 <_vfiprintf_r+0x2b0>
   82f9e:	f898 2000 	ldrb.w	r2, [r8]
   82fa2:	f108 0701 	add.w	r7, r8, #1
   82fa6:	2a2a      	cmp	r2, #42	; 0x2a
   82fa8:	f000 82e9 	beq.w	8357e <_vfiprintf_r+0xc46>
   82fac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82fb0:	2909      	cmp	r1, #9
   82fb2:	46b8      	mov	r8, r7
   82fb4:	f04f 0400 	mov.w	r4, #0
   82fb8:	f63f ad32 	bhi.w	82a20 <_vfiprintf_r+0xe8>
   82fbc:	f818 2b01 	ldrb.w	r2, [r8], #1
   82fc0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82fc4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82fc8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82fcc:	2909      	cmp	r1, #9
   82fce:	d9f5      	bls.n	82fbc <_vfiprintf_r+0x684>
   82fd0:	e526      	b.n	82a20 <_vfiprintf_r+0xe8>
   82fd2:	f043 0320 	orr.w	r3, r3, #32
   82fd6:	f898 2000 	ldrb.w	r2, [r8]
   82fda:	e51f      	b.n	82a1c <_vfiprintf_r+0xe4>
   82fdc:	9508      	str	r5, [sp, #32]
   82fde:	2800      	cmp	r0, #0
   82fe0:	f040 82db 	bne.w	8359a <_vfiprintf_r+0xc62>
   82fe4:	2a00      	cmp	r2, #0
   82fe6:	f000 80f1 	beq.w	831cc <_vfiprintf_r+0x894>
   82fea:	2101      	movs	r1, #1
   82fec:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82ff0:	f04f 0200 	mov.w	r2, #0
   82ff4:	9101      	str	r1, [sp, #4]
   82ff6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82ffa:	9105      	str	r1, [sp, #20]
   82ffc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83000:	e788      	b.n	82f14 <_vfiprintf_r+0x5dc>
   83002:	9a07      	ldr	r2, [sp, #28]
   83004:	6813      	ldr	r3, [r2, #0]
   83006:	3204      	adds	r2, #4
   83008:	9207      	str	r2, [sp, #28]
   8300a:	9a03      	ldr	r2, [sp, #12]
   8300c:	601a      	str	r2, [r3, #0]
   8300e:	e4d0      	b.n	829b2 <_vfiprintf_r+0x7a>
   83010:	aa0f      	add	r2, sp, #60	; 0x3c
   83012:	9904      	ldr	r1, [sp, #16]
   83014:	4620      	mov	r0, r4
   83016:	f7ff fc4f 	bl	828b8 <__sprint_r.part.0>
   8301a:	2800      	cmp	r0, #0
   8301c:	f040 8143 	bne.w	832a6 <_vfiprintf_r+0x96e>
   83020:	9910      	ldr	r1, [sp, #64]	; 0x40
   83022:	46d6      	mov	lr, sl
   83024:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83026:	f101 0c01 	add.w	ip, r1, #1
   8302a:	e60a      	b.n	82c42 <_vfiprintf_r+0x30a>
   8302c:	aa0f      	add	r2, sp, #60	; 0x3c
   8302e:	9904      	ldr	r1, [sp, #16]
   83030:	9806      	ldr	r0, [sp, #24]
   83032:	f7ff fc41 	bl	828b8 <__sprint_r.part.0>
   83036:	2800      	cmp	r0, #0
   83038:	f040 8135 	bne.w	832a6 <_vfiprintf_r+0x96e>
   8303c:	46d1      	mov	r9, sl
   8303e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83040:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83044:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83046:	1c48      	adds	r0, r1, #1
   83048:	2d00      	cmp	r5, #0
   8304a:	f43f ae24 	beq.w	82c96 <_vfiprintf_r+0x35e>
   8304e:	2101      	movs	r1, #1
   83050:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   83054:	440a      	add	r2, r1
   83056:	2807      	cmp	r0, #7
   83058:	9211      	str	r2, [sp, #68]	; 0x44
   8305a:	9010      	str	r0, [sp, #64]	; 0x40
   8305c:	f8c9 1004 	str.w	r1, [r9, #4]
   83060:	f8c9 5000 	str.w	r5, [r9]
   83064:	f340 8109 	ble.w	8327a <_vfiprintf_r+0x942>
   83068:	2a00      	cmp	r2, #0
   8306a:	f040 81af 	bne.w	833cc <_vfiprintf_r+0xa94>
   8306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83070:	2b00      	cmp	r3, #0
   83072:	f43f ae23 	beq.w	82cbc <_vfiprintf_r+0x384>
   83076:	2202      	movs	r2, #2
   83078:	4608      	mov	r0, r1
   8307a:	46d1      	mov	r9, sl
   8307c:	ab0e      	add	r3, sp, #56	; 0x38
   8307e:	921d      	str	r2, [sp, #116]	; 0x74
   83080:	931c      	str	r3, [sp, #112]	; 0x70
   83082:	4601      	mov	r1, r0
   83084:	f109 0908 	add.w	r9, r9, #8
   83088:	3001      	adds	r0, #1
   8308a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8308c:	2b80      	cmp	r3, #128	; 0x80
   8308e:	f43f ae1c 	beq.w	82cca <_vfiprintf_r+0x392>
   83092:	9b05      	ldr	r3, [sp, #20]
   83094:	1ae4      	subs	r4, r4, r3
   83096:	2c00      	cmp	r4, #0
   83098:	dd2f      	ble.n	830fa <_vfiprintf_r+0x7c2>
   8309a:	2c10      	cmp	r4, #16
   8309c:	f340 8220 	ble.w	834e0 <_vfiprintf_r+0xba8>
   830a0:	46ce      	mov	lr, r9
   830a2:	2610      	movs	r6, #16
   830a4:	4db2      	ldr	r5, [pc, #712]	; (83370 <_vfiprintf_r+0xa38>)
   830a6:	9f06      	ldr	r7, [sp, #24]
   830a8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   830ac:	e006      	b.n	830bc <_vfiprintf_r+0x784>
   830ae:	1c88      	adds	r0, r1, #2
   830b0:	4619      	mov	r1, r3
   830b2:	f10e 0e08 	add.w	lr, lr, #8
   830b6:	3c10      	subs	r4, #16
   830b8:	2c10      	cmp	r4, #16
   830ba:	dd10      	ble.n	830de <_vfiprintf_r+0x7a6>
   830bc:	1c4b      	adds	r3, r1, #1
   830be:	3210      	adds	r2, #16
   830c0:	2b07      	cmp	r3, #7
   830c2:	9211      	str	r2, [sp, #68]	; 0x44
   830c4:	e88e 0060 	stmia.w	lr, {r5, r6}
   830c8:	9310      	str	r3, [sp, #64]	; 0x40
   830ca:	ddf0      	ble.n	830ae <_vfiprintf_r+0x776>
   830cc:	2a00      	cmp	r2, #0
   830ce:	d165      	bne.n	8319c <_vfiprintf_r+0x864>
   830d0:	3c10      	subs	r4, #16
   830d2:	2c10      	cmp	r4, #16
   830d4:	f04f 0001 	mov.w	r0, #1
   830d8:	4611      	mov	r1, r2
   830da:	46d6      	mov	lr, sl
   830dc:	dcee      	bgt.n	830bc <_vfiprintf_r+0x784>
   830de:	46f1      	mov	r9, lr
   830e0:	4422      	add	r2, r4
   830e2:	2807      	cmp	r0, #7
   830e4:	9211      	str	r2, [sp, #68]	; 0x44
   830e6:	f8c9 5000 	str.w	r5, [r9]
   830ea:	f8c9 4004 	str.w	r4, [r9, #4]
   830ee:	9010      	str	r0, [sp, #64]	; 0x40
   830f0:	f300 8085 	bgt.w	831fe <_vfiprintf_r+0x8c6>
   830f4:	f109 0908 	add.w	r9, r9, #8
   830f8:	3001      	adds	r0, #1
   830fa:	9905      	ldr	r1, [sp, #20]
   830fc:	2807      	cmp	r0, #7
   830fe:	440a      	add	r2, r1
   83100:	9211      	str	r2, [sp, #68]	; 0x44
   83102:	f8c9 b000 	str.w	fp, [r9]
   83106:	f8c9 1004 	str.w	r1, [r9, #4]
   8310a:	9010      	str	r0, [sp, #64]	; 0x40
   8310c:	f340 8082 	ble.w	83214 <_vfiprintf_r+0x8dc>
   83110:	2a00      	cmp	r2, #0
   83112:	f040 8118 	bne.w	83346 <_vfiprintf_r+0xa0e>
   83116:	9b02      	ldr	r3, [sp, #8]
   83118:	9210      	str	r2, [sp, #64]	; 0x40
   8311a:	0758      	lsls	r0, r3, #29
   8311c:	d535      	bpl.n	8318a <_vfiprintf_r+0x852>
   8311e:	9b08      	ldr	r3, [sp, #32]
   83120:	9901      	ldr	r1, [sp, #4]
   83122:	1a5c      	subs	r4, r3, r1
   83124:	2c00      	cmp	r4, #0
   83126:	f340 80e7 	ble.w	832f8 <_vfiprintf_r+0x9c0>
   8312a:	46d1      	mov	r9, sl
   8312c:	2c10      	cmp	r4, #16
   8312e:	f340 820d 	ble.w	8354c <_vfiprintf_r+0xc14>
   83132:	2510      	movs	r5, #16
   83134:	9910      	ldr	r1, [sp, #64]	; 0x40
   83136:	4e8f      	ldr	r6, [pc, #572]	; (83374 <_vfiprintf_r+0xa3c>)
   83138:	9f06      	ldr	r7, [sp, #24]
   8313a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8313e:	e006      	b.n	8314e <_vfiprintf_r+0x816>
   83140:	1c88      	adds	r0, r1, #2
   83142:	4619      	mov	r1, r3
   83144:	f109 0908 	add.w	r9, r9, #8
   83148:	3c10      	subs	r4, #16
   8314a:	2c10      	cmp	r4, #16
   8314c:	dd11      	ble.n	83172 <_vfiprintf_r+0x83a>
   8314e:	1c4b      	adds	r3, r1, #1
   83150:	3210      	adds	r2, #16
   83152:	2b07      	cmp	r3, #7
   83154:	9211      	str	r2, [sp, #68]	; 0x44
   83156:	f8c9 6000 	str.w	r6, [r9]
   8315a:	f8c9 5004 	str.w	r5, [r9, #4]
   8315e:	9310      	str	r3, [sp, #64]	; 0x40
   83160:	ddee      	ble.n	83140 <_vfiprintf_r+0x808>
   83162:	bb42      	cbnz	r2, 831b6 <_vfiprintf_r+0x87e>
   83164:	3c10      	subs	r4, #16
   83166:	2c10      	cmp	r4, #16
   83168:	f04f 0001 	mov.w	r0, #1
   8316c:	4611      	mov	r1, r2
   8316e:	46d1      	mov	r9, sl
   83170:	dced      	bgt.n	8314e <_vfiprintf_r+0x816>
   83172:	4422      	add	r2, r4
   83174:	2807      	cmp	r0, #7
   83176:	9211      	str	r2, [sp, #68]	; 0x44
   83178:	f8c9 6000 	str.w	r6, [r9]
   8317c:	f8c9 4004 	str.w	r4, [r9, #4]
   83180:	9010      	str	r0, [sp, #64]	; 0x40
   83182:	dd51      	ble.n	83228 <_vfiprintf_r+0x8f0>
   83184:	2a00      	cmp	r2, #0
   83186:	f040 819a 	bne.w	834be <_vfiprintf_r+0xb86>
   8318a:	9b03      	ldr	r3, [sp, #12]
   8318c:	9a08      	ldr	r2, [sp, #32]
   8318e:	9901      	ldr	r1, [sp, #4]
   83190:	428a      	cmp	r2, r1
   83192:	bfac      	ite	ge
   83194:	189b      	addge	r3, r3, r2
   83196:	185b      	addlt	r3, r3, r1
   83198:	9303      	str	r3, [sp, #12]
   8319a:	e04e      	b.n	8323a <_vfiprintf_r+0x902>
   8319c:	aa0f      	add	r2, sp, #60	; 0x3c
   8319e:	4649      	mov	r1, r9
   831a0:	4638      	mov	r0, r7
   831a2:	f7ff fb89 	bl	828b8 <__sprint_r.part.0>
   831a6:	2800      	cmp	r0, #0
   831a8:	f040 813e 	bne.w	83428 <_vfiprintf_r+0xaf0>
   831ac:	9910      	ldr	r1, [sp, #64]	; 0x40
   831ae:	46d6      	mov	lr, sl
   831b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831b2:	1c48      	adds	r0, r1, #1
   831b4:	e77f      	b.n	830b6 <_vfiprintf_r+0x77e>
   831b6:	aa0f      	add	r2, sp, #60	; 0x3c
   831b8:	4659      	mov	r1, fp
   831ba:	4638      	mov	r0, r7
   831bc:	f7ff fb7c 	bl	828b8 <__sprint_r.part.0>
   831c0:	b960      	cbnz	r0, 831dc <_vfiprintf_r+0x8a4>
   831c2:	9910      	ldr	r1, [sp, #64]	; 0x40
   831c4:	46d1      	mov	r9, sl
   831c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831c8:	1c48      	adds	r0, r1, #1
   831ca:	e7bd      	b.n	83148 <_vfiprintf_r+0x810>
   831cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   831ce:	f8dd b010 	ldr.w	fp, [sp, #16]
   831d2:	2b00      	cmp	r3, #0
   831d4:	f040 81ca 	bne.w	8356c <_vfiprintf_r+0xc34>
   831d8:	2300      	movs	r3, #0
   831da:	9310      	str	r3, [sp, #64]	; 0x40
   831dc:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   831e0:	f013 0f01 	tst.w	r3, #1
   831e4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   831e8:	d102      	bne.n	831f0 <_vfiprintf_r+0x8b8>
   831ea:	059a      	lsls	r2, r3, #22
   831ec:	f140 80dd 	bpl.w	833aa <_vfiprintf_r+0xa72>
   831f0:	065b      	lsls	r3, r3, #25
   831f2:	f53f acad 	bmi.w	82b50 <_vfiprintf_r+0x218>
   831f6:	9803      	ldr	r0, [sp, #12]
   831f8:	b02d      	add	sp, #180	; 0xb4
   831fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   831fe:	2a00      	cmp	r2, #0
   83200:	f040 8105 	bne.w	8340e <_vfiprintf_r+0xad6>
   83204:	2301      	movs	r3, #1
   83206:	46d1      	mov	r9, sl
   83208:	9a05      	ldr	r2, [sp, #20]
   8320a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8320e:	921d      	str	r2, [sp, #116]	; 0x74
   83210:	9211      	str	r2, [sp, #68]	; 0x44
   83212:	9310      	str	r3, [sp, #64]	; 0x40
   83214:	f109 0908 	add.w	r9, r9, #8
   83218:	9b02      	ldr	r3, [sp, #8]
   8321a:	0759      	lsls	r1, r3, #29
   8321c:	d504      	bpl.n	83228 <_vfiprintf_r+0x8f0>
   8321e:	9b08      	ldr	r3, [sp, #32]
   83220:	9901      	ldr	r1, [sp, #4]
   83222:	1a5c      	subs	r4, r3, r1
   83224:	2c00      	cmp	r4, #0
   83226:	dc81      	bgt.n	8312c <_vfiprintf_r+0x7f4>
   83228:	9b03      	ldr	r3, [sp, #12]
   8322a:	9908      	ldr	r1, [sp, #32]
   8322c:	9801      	ldr	r0, [sp, #4]
   8322e:	4281      	cmp	r1, r0
   83230:	bfac      	ite	ge
   83232:	185b      	addge	r3, r3, r1
   83234:	181b      	addlt	r3, r3, r0
   83236:	9303      	str	r3, [sp, #12]
   83238:	bb72      	cbnz	r2, 83298 <_vfiprintf_r+0x960>
   8323a:	2300      	movs	r3, #0
   8323c:	46d1      	mov	r9, sl
   8323e:	9310      	str	r3, [sp, #64]	; 0x40
   83240:	f7ff bbb7 	b.w	829b2 <_vfiprintf_r+0x7a>
   83244:	aa0f      	add	r2, sp, #60	; 0x3c
   83246:	9904      	ldr	r1, [sp, #16]
   83248:	4620      	mov	r0, r4
   8324a:	f7ff fb35 	bl	828b8 <__sprint_r.part.0>
   8324e:	bb50      	cbnz	r0, 832a6 <_vfiprintf_r+0x96e>
   83250:	9910      	ldr	r1, [sp, #64]	; 0x40
   83252:	46d4      	mov	ip, sl
   83254:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83256:	f101 0e01 	add.w	lr, r1, #1
   8325a:	e54a      	b.n	82cf2 <_vfiprintf_r+0x3ba>
   8325c:	2a00      	cmp	r2, #0
   8325e:	f47f aee5 	bne.w	8302c <_vfiprintf_r+0x6f4>
   83262:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   83266:	2900      	cmp	r1, #0
   83268:	f000 811a 	beq.w	834a0 <_vfiprintf_r+0xb68>
   8326c:	2201      	movs	r2, #1
   8326e:	46d1      	mov	r9, sl
   83270:	4610      	mov	r0, r2
   83272:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   83276:	921d      	str	r2, [sp, #116]	; 0x74
   83278:	911c      	str	r1, [sp, #112]	; 0x70
   8327a:	4601      	mov	r1, r0
   8327c:	f109 0908 	add.w	r9, r9, #8
   83280:	3001      	adds	r0, #1
   83282:	e508      	b.n	82c96 <_vfiprintf_r+0x35e>
   83284:	9b02      	ldr	r3, [sp, #8]
   83286:	2a01      	cmp	r2, #1
   83288:	f000 8097 	beq.w	833ba <_vfiprintf_r+0xa82>
   8328c:	2a02      	cmp	r2, #2
   8328e:	d10d      	bne.n	832ac <_vfiprintf_r+0x974>
   83290:	9302      	str	r3, [sp, #8]
   83292:	2600      	movs	r6, #0
   83294:	2700      	movs	r7, #0
   83296:	e5b2      	b.n	82dfe <_vfiprintf_r+0x4c6>
   83298:	aa0f      	add	r2, sp, #60	; 0x3c
   8329a:	9904      	ldr	r1, [sp, #16]
   8329c:	9806      	ldr	r0, [sp, #24]
   8329e:	f7ff fb0b 	bl	828b8 <__sprint_r.part.0>
   832a2:	2800      	cmp	r0, #0
   832a4:	d0c9      	beq.n	8323a <_vfiprintf_r+0x902>
   832a6:	f8dd b010 	ldr.w	fp, [sp, #16]
   832aa:	e797      	b.n	831dc <_vfiprintf_r+0x8a4>
   832ac:	2600      	movs	r6, #0
   832ae:	2700      	movs	r7, #0
   832b0:	9302      	str	r3, [sp, #8]
   832b2:	4651      	mov	r1, sl
   832b4:	e000      	b.n	832b8 <_vfiprintf_r+0x980>
   832b6:	4659      	mov	r1, fp
   832b8:	08f2      	lsrs	r2, r6, #3
   832ba:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   832be:	08f8      	lsrs	r0, r7, #3
   832c0:	f006 0307 	and.w	r3, r6, #7
   832c4:	4607      	mov	r7, r0
   832c6:	4616      	mov	r6, r2
   832c8:	3330      	adds	r3, #48	; 0x30
   832ca:	ea56 0207 	orrs.w	r2, r6, r7
   832ce:	f801 3c01 	strb.w	r3, [r1, #-1]
   832d2:	f101 3bff 	add.w	fp, r1, #4294967295
   832d6:	d1ee      	bne.n	832b6 <_vfiprintf_r+0x97e>
   832d8:	9a02      	ldr	r2, [sp, #8]
   832da:	07d6      	lsls	r6, r2, #31
   832dc:	f57f ad9f 	bpl.w	82e1e <_vfiprintf_r+0x4e6>
   832e0:	2b30      	cmp	r3, #48	; 0x30
   832e2:	f43f ad9c 	beq.w	82e1e <_vfiprintf_r+0x4e6>
   832e6:	2330      	movs	r3, #48	; 0x30
   832e8:	3902      	subs	r1, #2
   832ea:	f80b 3c01 	strb.w	r3, [fp, #-1]
   832ee:	ebaa 0301 	sub.w	r3, sl, r1
   832f2:	9305      	str	r3, [sp, #20]
   832f4:	468b      	mov	fp, r1
   832f6:	e477      	b.n	82be8 <_vfiprintf_r+0x2b0>
   832f8:	9b03      	ldr	r3, [sp, #12]
   832fa:	9a08      	ldr	r2, [sp, #32]
   832fc:	428a      	cmp	r2, r1
   832fe:	bfac      	ite	ge
   83300:	189b      	addge	r3, r3, r2
   83302:	185b      	addlt	r3, r3, r1
   83304:	9303      	str	r3, [sp, #12]
   83306:	e798      	b.n	8323a <_vfiprintf_r+0x902>
   83308:	2202      	movs	r2, #2
   8330a:	e44e      	b.n	82baa <_vfiprintf_r+0x272>
   8330c:	2f00      	cmp	r7, #0
   8330e:	bf08      	it	eq
   83310:	2e0a      	cmpeq	r6, #10
   83312:	d351      	bcc.n	833b8 <_vfiprintf_r+0xa80>
   83314:	46d3      	mov	fp, sl
   83316:	4630      	mov	r0, r6
   83318:	4639      	mov	r1, r7
   8331a:	220a      	movs	r2, #10
   8331c:	2300      	movs	r3, #0
   8331e:	f001 fe85 	bl	8502c <__aeabi_uldivmod>
   83322:	3230      	adds	r2, #48	; 0x30
   83324:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   83328:	4630      	mov	r0, r6
   8332a:	4639      	mov	r1, r7
   8332c:	2300      	movs	r3, #0
   8332e:	220a      	movs	r2, #10
   83330:	f001 fe7c 	bl	8502c <__aeabi_uldivmod>
   83334:	4606      	mov	r6, r0
   83336:	460f      	mov	r7, r1
   83338:	ea56 0307 	orrs.w	r3, r6, r7
   8333c:	d1eb      	bne.n	83316 <_vfiprintf_r+0x9de>
   8333e:	e56e      	b.n	82e1e <_vfiprintf_r+0x4e6>
   83340:	9405      	str	r4, [sp, #20]
   83342:	46d3      	mov	fp, sl
   83344:	e450      	b.n	82be8 <_vfiprintf_r+0x2b0>
   83346:	aa0f      	add	r2, sp, #60	; 0x3c
   83348:	9904      	ldr	r1, [sp, #16]
   8334a:	9806      	ldr	r0, [sp, #24]
   8334c:	f7ff fab4 	bl	828b8 <__sprint_r.part.0>
   83350:	2800      	cmp	r0, #0
   83352:	d1a8      	bne.n	832a6 <_vfiprintf_r+0x96e>
   83354:	46d1      	mov	r9, sl
   83356:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83358:	e75e      	b.n	83218 <_vfiprintf_r+0x8e0>
   8335a:	aa0f      	add	r2, sp, #60	; 0x3c
   8335c:	9904      	ldr	r1, [sp, #16]
   8335e:	9806      	ldr	r0, [sp, #24]
   83360:	f7ff faaa 	bl	828b8 <__sprint_r.part.0>
   83364:	2800      	cmp	r0, #0
   83366:	d19e      	bne.n	832a6 <_vfiprintf_r+0x96e>
   83368:	46d1      	mov	r9, sl
   8336a:	f7ff bbbb 	b.w	82ae4 <_vfiprintf_r+0x1ac>
   8336e:	bf00      	nop
   83370:	0008540c 	.word	0x0008540c
   83374:	000853fc 	.word	0x000853fc
   83378:	3104      	adds	r1, #4
   8337a:	6816      	ldr	r6, [r2, #0]
   8337c:	2700      	movs	r7, #0
   8337e:	2201      	movs	r2, #1
   83380:	9107      	str	r1, [sp, #28]
   83382:	e412      	b.n	82baa <_vfiprintf_r+0x272>
   83384:	9807      	ldr	r0, [sp, #28]
   83386:	2700      	movs	r7, #0
   83388:	4601      	mov	r1, r0
   8338a:	3104      	adds	r1, #4
   8338c:	6806      	ldr	r6, [r0, #0]
   8338e:	9107      	str	r1, [sp, #28]
   83390:	e40b      	b.n	82baa <_vfiprintf_r+0x272>
   83392:	680e      	ldr	r6, [r1, #0]
   83394:	3104      	adds	r1, #4
   83396:	9107      	str	r1, [sp, #28]
   83398:	2700      	movs	r7, #0
   8339a:	e592      	b.n	82ec2 <_vfiprintf_r+0x58a>
   8339c:	6816      	ldr	r6, [r2, #0]
   8339e:	3204      	adds	r2, #4
   833a0:	17f7      	asrs	r7, r6, #31
   833a2:	9207      	str	r2, [sp, #28]
   833a4:	4630      	mov	r0, r6
   833a6:	4639      	mov	r1, r7
   833a8:	e512      	b.n	82dd0 <_vfiprintf_r+0x498>
   833aa:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   833ae:	f000 fe75 	bl	8409c <__retarget_lock_release_recursive>
   833b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   833b6:	e71b      	b.n	831f0 <_vfiprintf_r+0x8b8>
   833b8:	9b02      	ldr	r3, [sp, #8]
   833ba:	9302      	str	r3, [sp, #8]
   833bc:	2301      	movs	r3, #1
   833be:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   833c2:	3630      	adds	r6, #48	; 0x30
   833c4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   833c8:	9305      	str	r3, [sp, #20]
   833ca:	e40d      	b.n	82be8 <_vfiprintf_r+0x2b0>
   833cc:	aa0f      	add	r2, sp, #60	; 0x3c
   833ce:	9904      	ldr	r1, [sp, #16]
   833d0:	9806      	ldr	r0, [sp, #24]
   833d2:	f7ff fa71 	bl	828b8 <__sprint_r.part.0>
   833d6:	2800      	cmp	r0, #0
   833d8:	f47f af65 	bne.w	832a6 <_vfiprintf_r+0x96e>
   833dc:	9910      	ldr	r1, [sp, #64]	; 0x40
   833de:	46d1      	mov	r9, sl
   833e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833e2:	1c48      	adds	r0, r1, #1
   833e4:	e457      	b.n	82c96 <_vfiprintf_r+0x35e>
   833e6:	aa0f      	add	r2, sp, #60	; 0x3c
   833e8:	9904      	ldr	r1, [sp, #16]
   833ea:	9806      	ldr	r0, [sp, #24]
   833ec:	f7ff fa64 	bl	828b8 <__sprint_r.part.0>
   833f0:	2800      	cmp	r0, #0
   833f2:	f47f af58 	bne.w	832a6 <_vfiprintf_r+0x96e>
   833f6:	9910      	ldr	r1, [sp, #64]	; 0x40
   833f8:	46d1      	mov	r9, sl
   833fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833fc:	1c48      	adds	r0, r1, #1
   833fe:	e644      	b.n	8308a <_vfiprintf_r+0x752>
   83400:	2a00      	cmp	r2, #0
   83402:	f040 8087 	bne.w	83514 <_vfiprintf_r+0xbdc>
   83406:	2001      	movs	r0, #1
   83408:	4611      	mov	r1, r2
   8340a:	46d1      	mov	r9, sl
   8340c:	e641      	b.n	83092 <_vfiprintf_r+0x75a>
   8340e:	aa0f      	add	r2, sp, #60	; 0x3c
   83410:	9904      	ldr	r1, [sp, #16]
   83412:	9806      	ldr	r0, [sp, #24]
   83414:	f7ff fa50 	bl	828b8 <__sprint_r.part.0>
   83418:	2800      	cmp	r0, #0
   8341a:	f47f af44 	bne.w	832a6 <_vfiprintf_r+0x96e>
   8341e:	9810      	ldr	r0, [sp, #64]	; 0x40
   83420:	46d1      	mov	r9, sl
   83422:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83424:	3001      	adds	r0, #1
   83426:	e668      	b.n	830fa <_vfiprintf_r+0x7c2>
   83428:	46cb      	mov	fp, r9
   8342a:	e6d7      	b.n	831dc <_vfiprintf_r+0x8a4>
   8342c:	9d07      	ldr	r5, [sp, #28]
   8342e:	3507      	adds	r5, #7
   83430:	f025 0507 	bic.w	r5, r5, #7
   83434:	f105 0208 	add.w	r2, r5, #8
   83438:	e9d5 0100 	ldrd	r0, r1, [r5]
   8343c:	9207      	str	r2, [sp, #28]
   8343e:	4606      	mov	r6, r0
   83440:	460f      	mov	r7, r1
   83442:	e4c5      	b.n	82dd0 <_vfiprintf_r+0x498>
   83444:	9d07      	ldr	r5, [sp, #28]
   83446:	3507      	adds	r5, #7
   83448:	f025 0207 	bic.w	r2, r5, #7
   8344c:	f102 0108 	add.w	r1, r2, #8
   83450:	e9d2 6700 	ldrd	r6, r7, [r2]
   83454:	9107      	str	r1, [sp, #28]
   83456:	2201      	movs	r2, #1
   83458:	f7ff bba7 	b.w	82baa <_vfiprintf_r+0x272>
   8345c:	9d07      	ldr	r5, [sp, #28]
   8345e:	3507      	adds	r5, #7
   83460:	f025 0207 	bic.w	r2, r5, #7
   83464:	f102 0108 	add.w	r1, r2, #8
   83468:	e9d2 6700 	ldrd	r6, r7, [r2]
   8346c:	9107      	str	r1, [sp, #28]
   8346e:	2200      	movs	r2, #0
   83470:	f7ff bb9b 	b.w	82baa <_vfiprintf_r+0x272>
   83474:	9d07      	ldr	r5, [sp, #28]
   83476:	3507      	adds	r5, #7
   83478:	f025 0107 	bic.w	r1, r5, #7
   8347c:	f101 0008 	add.w	r0, r1, #8
   83480:	9007      	str	r0, [sp, #28]
   83482:	e9d1 6700 	ldrd	r6, r7, [r1]
   83486:	e51c      	b.n	82ec2 <_vfiprintf_r+0x58a>
   83488:	46d3      	mov	fp, sl
   8348a:	f7ff bbad 	b.w	82be8 <_vfiprintf_r+0x2b0>
   8348e:	252d      	movs	r5, #45	; 0x2d
   83490:	4276      	negs	r6, r6
   83492:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83496:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8349a:	2201      	movs	r2, #1
   8349c:	f7ff bb8a 	b.w	82bb4 <_vfiprintf_r+0x27c>
   834a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   834a2:	b9b3      	cbnz	r3, 834d2 <_vfiprintf_r+0xb9a>
   834a4:	4611      	mov	r1, r2
   834a6:	2001      	movs	r0, #1
   834a8:	46d1      	mov	r9, sl
   834aa:	e5f2      	b.n	83092 <_vfiprintf_r+0x75a>
   834ac:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   834b0:	f000 fdf4 	bl	8409c <__retarget_lock_release_recursive>
   834b4:	f04f 33ff 	mov.w	r3, #4294967295
   834b8:	9303      	str	r3, [sp, #12]
   834ba:	f7ff bb4c 	b.w	82b56 <_vfiprintf_r+0x21e>
   834be:	aa0f      	add	r2, sp, #60	; 0x3c
   834c0:	9904      	ldr	r1, [sp, #16]
   834c2:	9806      	ldr	r0, [sp, #24]
   834c4:	f7ff f9f8 	bl	828b8 <__sprint_r.part.0>
   834c8:	2800      	cmp	r0, #0
   834ca:	f47f aeec 	bne.w	832a6 <_vfiprintf_r+0x96e>
   834ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   834d0:	e6aa      	b.n	83228 <_vfiprintf_r+0x8f0>
   834d2:	2202      	movs	r2, #2
   834d4:	ab0e      	add	r3, sp, #56	; 0x38
   834d6:	921d      	str	r2, [sp, #116]	; 0x74
   834d8:	931c      	str	r3, [sp, #112]	; 0x70
   834da:	2001      	movs	r0, #1
   834dc:	46d1      	mov	r9, sl
   834de:	e5d0      	b.n	83082 <_vfiprintf_r+0x74a>
   834e0:	4d34      	ldr	r5, [pc, #208]	; (835b4 <_vfiprintf_r+0xc7c>)
   834e2:	e5fd      	b.n	830e0 <_vfiprintf_r+0x7a8>
   834e4:	9a07      	ldr	r2, [sp, #28]
   834e6:	4613      	mov	r3, r2
   834e8:	3304      	adds	r3, #4
   834ea:	9307      	str	r3, [sp, #28]
   834ec:	9b03      	ldr	r3, [sp, #12]
   834ee:	6811      	ldr	r1, [r2, #0]
   834f0:	17dd      	asrs	r5, r3, #31
   834f2:	461a      	mov	r2, r3
   834f4:	462b      	mov	r3, r5
   834f6:	e9c1 2300 	strd	r2, r3, [r1]
   834fa:	f7ff ba5a 	b.w	829b2 <_vfiprintf_r+0x7a>
   834fe:	4658      	mov	r0, fp
   83500:	9507      	str	r5, [sp, #28]
   83502:	9302      	str	r3, [sp, #8]
   83504:	f7ff f978 	bl	827f8 <strlen>
   83508:	2400      	movs	r4, #0
   8350a:	9005      	str	r0, [sp, #20]
   8350c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83510:	f7ff bb6a 	b.w	82be8 <_vfiprintf_r+0x2b0>
   83514:	aa0f      	add	r2, sp, #60	; 0x3c
   83516:	9904      	ldr	r1, [sp, #16]
   83518:	9806      	ldr	r0, [sp, #24]
   8351a:	f7ff f9cd 	bl	828b8 <__sprint_r.part.0>
   8351e:	2800      	cmp	r0, #0
   83520:	f47f aec1 	bne.w	832a6 <_vfiprintf_r+0x96e>
   83524:	9910      	ldr	r1, [sp, #64]	; 0x40
   83526:	46d1      	mov	r9, sl
   83528:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8352a:	1c48      	adds	r0, r1, #1
   8352c:	e5b1      	b.n	83092 <_vfiprintf_r+0x75a>
   8352e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83530:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83532:	3101      	adds	r1, #1
   83534:	4e20      	ldr	r6, [pc, #128]	; (835b8 <_vfiprintf_r+0xc80>)
   83536:	f7ff bb9c 	b.w	82c72 <_vfiprintf_r+0x33a>
   8353a:	2c06      	cmp	r4, #6
   8353c:	bf28      	it	cs
   8353e:	2406      	movcs	r4, #6
   83540:	9507      	str	r5, [sp, #28]
   83542:	9405      	str	r4, [sp, #20]
   83544:	9401      	str	r4, [sp, #4]
   83546:	f8df b074 	ldr.w	fp, [pc, #116]	; 835bc <_vfiprintf_r+0xc84>
   8354a:	e4e3      	b.n	82f14 <_vfiprintf_r+0x5dc>
   8354c:	9810      	ldr	r0, [sp, #64]	; 0x40
   8354e:	4e1a      	ldr	r6, [pc, #104]	; (835b8 <_vfiprintf_r+0xc80>)
   83550:	3001      	adds	r0, #1
   83552:	e60e      	b.n	83172 <_vfiprintf_r+0x83a>
   83554:	4686      	mov	lr, r0
   83556:	4d17      	ldr	r5, [pc, #92]	; (835b4 <_vfiprintf_r+0xc7c>)
   83558:	f7ff bbe2 	b.w	82d20 <_vfiprintf_r+0x3e8>
   8355c:	9405      	str	r4, [sp, #20]
   8355e:	9507      	str	r5, [sp, #28]
   83560:	9302      	str	r3, [sp, #8]
   83562:	4604      	mov	r4, r0
   83564:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83568:	f7ff bb3e 	b.w	82be8 <_vfiprintf_r+0x2b0>
   8356c:	9806      	ldr	r0, [sp, #24]
   8356e:	aa0f      	add	r2, sp, #60	; 0x3c
   83570:	4659      	mov	r1, fp
   83572:	f7ff f9a1 	bl	828b8 <__sprint_r.part.0>
   83576:	2800      	cmp	r0, #0
   83578:	f43f ae2e 	beq.w	831d8 <_vfiprintf_r+0x8a0>
   8357c:	e62e      	b.n	831dc <_vfiprintf_r+0x8a4>
   8357e:	9907      	ldr	r1, [sp, #28]
   83580:	f898 2001 	ldrb.w	r2, [r8, #1]
   83584:	680c      	ldr	r4, [r1, #0]
   83586:	3104      	adds	r1, #4
   83588:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8358c:	46b8      	mov	r8, r7
   8358e:	9107      	str	r1, [sp, #28]
   83590:	f7ff ba44 	b.w	82a1c <_vfiprintf_r+0xe4>
   83594:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83598:	e4a7      	b.n	82eea <_vfiprintf_r+0x5b2>
   8359a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8359e:	e521      	b.n	82fe4 <_vfiprintf_r+0x6ac>
   835a0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835a4:	e47c      	b.n	82ea0 <_vfiprintf_r+0x568>
   835a6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835aa:	e43f      	b.n	82e2c <_vfiprintf_r+0x4f4>
   835ac:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835b0:	f7ff bbfa 	b.w	82da8 <_vfiprintf_r+0x470>
   835b4:	0008540c 	.word	0x0008540c
   835b8:	000853fc 	.word	0x000853fc
   835bc:	000853f4 	.word	0x000853f4

000835c0 <__sbprintf>:
   835c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   835c4:	460c      	mov	r4, r1
   835c6:	f04f 0e00 	mov.w	lr, #0
   835ca:	f44f 6580 	mov.w	r5, #1024	; 0x400
   835ce:	4606      	mov	r6, r0
   835d0:	4617      	mov	r7, r2
   835d2:	4698      	mov	r8, r3
   835d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   835d6:	89e3      	ldrh	r3, [r4, #14]
   835d8:	8989      	ldrh	r1, [r1, #12]
   835da:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   835de:	f021 0102 	bic.w	r1, r1, #2
   835e2:	9219      	str	r2, [sp, #100]	; 0x64
   835e4:	f8ad 300e 	strh.w	r3, [sp, #14]
   835e8:	69e2      	ldr	r2, [r4, #28]
   835ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
   835ec:	f8ad 100c 	strh.w	r1, [sp, #12]
   835f0:	a816      	add	r0, sp, #88	; 0x58
   835f2:	a91a      	add	r1, sp, #104	; 0x68
   835f4:	f8cd e018 	str.w	lr, [sp, #24]
   835f8:	9207      	str	r2, [sp, #28]
   835fa:	9309      	str	r3, [sp, #36]	; 0x24
   835fc:	9100      	str	r1, [sp, #0]
   835fe:	9104      	str	r1, [sp, #16]
   83600:	9502      	str	r5, [sp, #8]
   83602:	9505      	str	r5, [sp, #20]
   83604:	f000 fd44 	bl	84090 <__retarget_lock_init_recursive>
   83608:	4643      	mov	r3, r8
   8360a:	463a      	mov	r2, r7
   8360c:	4669      	mov	r1, sp
   8360e:	4630      	mov	r0, r6
   83610:	f7ff f992 	bl	82938 <_vfiprintf_r>
   83614:	1e05      	subs	r5, r0, #0
   83616:	db07      	blt.n	83628 <__sbprintf+0x68>
   83618:	4630      	mov	r0, r6
   8361a:	4669      	mov	r1, sp
   8361c:	f000 f924 	bl	83868 <_fflush_r>
   83620:	2800      	cmp	r0, #0
   83622:	bf18      	it	ne
   83624:	f04f 35ff 	movne.w	r5, #4294967295
   83628:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8362c:	065b      	lsls	r3, r3, #25
   8362e:	d503      	bpl.n	83638 <__sbprintf+0x78>
   83630:	89a3      	ldrh	r3, [r4, #12]
   83632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83636:	81a3      	strh	r3, [r4, #12]
   83638:	9816      	ldr	r0, [sp, #88]	; 0x58
   8363a:	f000 fd2b 	bl	84094 <__retarget_lock_close_recursive>
   8363e:	4628      	mov	r0, r5
   83640:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083648 <__swsetup_r>:
   83648:	b538      	push	{r3, r4, r5, lr}
   8364a:	4b30      	ldr	r3, [pc, #192]	; (8370c <__swsetup_r+0xc4>)
   8364c:	4605      	mov	r5, r0
   8364e:	6818      	ldr	r0, [r3, #0]
   83650:	460c      	mov	r4, r1
   83652:	b110      	cbz	r0, 8365a <__swsetup_r+0x12>
   83654:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83656:	2b00      	cmp	r3, #0
   83658:	d038      	beq.n	836cc <__swsetup_r+0x84>
   8365a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8365e:	b293      	uxth	r3, r2
   83660:	0718      	lsls	r0, r3, #28
   83662:	d50c      	bpl.n	8367e <__swsetup_r+0x36>
   83664:	6920      	ldr	r0, [r4, #16]
   83666:	b1a8      	cbz	r0, 83694 <__swsetup_r+0x4c>
   83668:	f013 0201 	ands.w	r2, r3, #1
   8366c:	d01e      	beq.n	836ac <__swsetup_r+0x64>
   8366e:	2200      	movs	r2, #0
   83670:	6963      	ldr	r3, [r4, #20]
   83672:	60a2      	str	r2, [r4, #8]
   83674:	425b      	negs	r3, r3
   83676:	61a3      	str	r3, [r4, #24]
   83678:	b1f0      	cbz	r0, 836b8 <__swsetup_r+0x70>
   8367a:	2000      	movs	r0, #0
   8367c:	bd38      	pop	{r3, r4, r5, pc}
   8367e:	06d9      	lsls	r1, r3, #27
   83680:	d53b      	bpl.n	836fa <__swsetup_r+0xb2>
   83682:	0758      	lsls	r0, r3, #29
   83684:	d425      	bmi.n	836d2 <__swsetup_r+0x8a>
   83686:	6920      	ldr	r0, [r4, #16]
   83688:	f042 0308 	orr.w	r3, r2, #8
   8368c:	81a3      	strh	r3, [r4, #12]
   8368e:	b29b      	uxth	r3, r3
   83690:	2800      	cmp	r0, #0
   83692:	d1e9      	bne.n	83668 <__swsetup_r+0x20>
   83694:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83698:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8369c:	d0e4      	beq.n	83668 <__swsetup_r+0x20>
   8369e:	4628      	mov	r0, r5
   836a0:	4621      	mov	r1, r4
   836a2:	f000 fd2b 	bl	840fc <__smakebuf_r>
   836a6:	89a3      	ldrh	r3, [r4, #12]
   836a8:	6920      	ldr	r0, [r4, #16]
   836aa:	e7dd      	b.n	83668 <__swsetup_r+0x20>
   836ac:	0799      	lsls	r1, r3, #30
   836ae:	bf58      	it	pl
   836b0:	6962      	ldrpl	r2, [r4, #20]
   836b2:	60a2      	str	r2, [r4, #8]
   836b4:	2800      	cmp	r0, #0
   836b6:	d1e0      	bne.n	8367a <__swsetup_r+0x32>
   836b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   836bc:	061a      	lsls	r2, r3, #24
   836be:	d5dd      	bpl.n	8367c <__swsetup_r+0x34>
   836c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836c4:	81a3      	strh	r3, [r4, #12]
   836c6:	f04f 30ff 	mov.w	r0, #4294967295
   836ca:	bd38      	pop	{r3, r4, r5, pc}
   836cc:	f000 f924 	bl	83918 <__sinit>
   836d0:	e7c3      	b.n	8365a <__swsetup_r+0x12>
   836d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   836d4:	b151      	cbz	r1, 836ec <__swsetup_r+0xa4>
   836d6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   836da:	4299      	cmp	r1, r3
   836dc:	d004      	beq.n	836e8 <__swsetup_r+0xa0>
   836de:	4628      	mov	r0, r5
   836e0:	f000 fa40 	bl	83b64 <_free_r>
   836e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   836e8:	2300      	movs	r3, #0
   836ea:	6323      	str	r3, [r4, #48]	; 0x30
   836ec:	2300      	movs	r3, #0
   836ee:	6920      	ldr	r0, [r4, #16]
   836f0:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   836f4:	e884 0009 	stmia.w	r4, {r0, r3}
   836f8:	e7c6      	b.n	83688 <__swsetup_r+0x40>
   836fa:	2309      	movs	r3, #9
   836fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83700:	602b      	str	r3, [r5, #0]
   83702:	f04f 30ff 	mov.w	r0, #4294967295
   83706:	81a2      	strh	r2, [r4, #12]
   83708:	bd38      	pop	{r3, r4, r5, pc}
   8370a:	bf00      	nop
   8370c:	2007013c 	.word	0x2007013c

00083710 <register_fini>:
   83710:	4b02      	ldr	r3, [pc, #8]	; (8371c <register_fini+0xc>)
   83712:	b113      	cbz	r3, 8371a <register_fini+0xa>
   83714:	4802      	ldr	r0, [pc, #8]	; (83720 <register_fini+0x10>)
   83716:	f000 b805 	b.w	83724 <atexit>
   8371a:	4770      	bx	lr
   8371c:	00000000 	.word	0x00000000
   83720:	00083991 	.word	0x00083991

00083724 <atexit>:
   83724:	2300      	movs	r3, #0
   83726:	4601      	mov	r1, r0
   83728:	461a      	mov	r2, r3
   8372a:	4618      	mov	r0, r3
   8372c:	f001 bb56 	b.w	84ddc <__register_exitproc>

00083730 <__sflush_r>:
   83730:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83738:	b29a      	uxth	r2, r3
   8373a:	460d      	mov	r5, r1
   8373c:	0711      	lsls	r1, r2, #28
   8373e:	4680      	mov	r8, r0
   83740:	d43a      	bmi.n	837b8 <__sflush_r+0x88>
   83742:	686a      	ldr	r2, [r5, #4]
   83744:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83748:	2a00      	cmp	r2, #0
   8374a:	81ab      	strh	r3, [r5, #12]
   8374c:	dd70      	ble.n	83830 <__sflush_r+0x100>
   8374e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83750:	2c00      	cmp	r4, #0
   83752:	d04a      	beq.n	837ea <__sflush_r+0xba>
   83754:	2200      	movs	r2, #0
   83756:	b29b      	uxth	r3, r3
   83758:	f8d8 6000 	ldr.w	r6, [r8]
   8375c:	f8c8 2000 	str.w	r2, [r8]
   83760:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83764:	d068      	beq.n	83838 <__sflush_r+0x108>
   83766:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83768:	075f      	lsls	r7, r3, #29
   8376a:	d505      	bpl.n	83778 <__sflush_r+0x48>
   8376c:	6869      	ldr	r1, [r5, #4]
   8376e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83770:	1a52      	subs	r2, r2, r1
   83772:	b10b      	cbz	r3, 83778 <__sflush_r+0x48>
   83774:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83776:	1ad2      	subs	r2, r2, r3
   83778:	2300      	movs	r3, #0
   8377a:	69e9      	ldr	r1, [r5, #28]
   8377c:	4640      	mov	r0, r8
   8377e:	47a0      	blx	r4
   83780:	1c44      	adds	r4, r0, #1
   83782:	d03d      	beq.n	83800 <__sflush_r+0xd0>
   83784:	2100      	movs	r1, #0
   83786:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8378a:	692a      	ldr	r2, [r5, #16]
   8378c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83790:	81ab      	strh	r3, [r5, #12]
   83792:	04db      	lsls	r3, r3, #19
   83794:	6069      	str	r1, [r5, #4]
   83796:	602a      	str	r2, [r5, #0]
   83798:	d448      	bmi.n	8382c <__sflush_r+0xfc>
   8379a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8379c:	f8c8 6000 	str.w	r6, [r8]
   837a0:	b319      	cbz	r1, 837ea <__sflush_r+0xba>
   837a2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   837a6:	4299      	cmp	r1, r3
   837a8:	d002      	beq.n	837b0 <__sflush_r+0x80>
   837aa:	4640      	mov	r0, r8
   837ac:	f000 f9da 	bl	83b64 <_free_r>
   837b0:	2000      	movs	r0, #0
   837b2:	6328      	str	r0, [r5, #48]	; 0x30
   837b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837b8:	692e      	ldr	r6, [r5, #16]
   837ba:	b1b6      	cbz	r6, 837ea <__sflush_r+0xba>
   837bc:	0791      	lsls	r1, r2, #30
   837be:	bf18      	it	ne
   837c0:	2300      	movne	r3, #0
   837c2:	682c      	ldr	r4, [r5, #0]
   837c4:	bf08      	it	eq
   837c6:	696b      	ldreq	r3, [r5, #20]
   837c8:	602e      	str	r6, [r5, #0]
   837ca:	1ba4      	subs	r4, r4, r6
   837cc:	60ab      	str	r3, [r5, #8]
   837ce:	e00a      	b.n	837e6 <__sflush_r+0xb6>
   837d0:	4623      	mov	r3, r4
   837d2:	4632      	mov	r2, r6
   837d4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   837d6:	69e9      	ldr	r1, [r5, #28]
   837d8:	4640      	mov	r0, r8
   837da:	47b8      	blx	r7
   837dc:	2800      	cmp	r0, #0
   837de:	eba4 0400 	sub.w	r4, r4, r0
   837e2:	4406      	add	r6, r0
   837e4:	dd04      	ble.n	837f0 <__sflush_r+0xc0>
   837e6:	2c00      	cmp	r4, #0
   837e8:	dcf2      	bgt.n	837d0 <__sflush_r+0xa0>
   837ea:	2000      	movs	r0, #0
   837ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   837f0:	89ab      	ldrh	r3, [r5, #12]
   837f2:	f04f 30ff 	mov.w	r0, #4294967295
   837f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   837fa:	81ab      	strh	r3, [r5, #12]
   837fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83800:	f8d8 4000 	ldr.w	r4, [r8]
   83804:	2c1d      	cmp	r4, #29
   83806:	d8f3      	bhi.n	837f0 <__sflush_r+0xc0>
   83808:	4b16      	ldr	r3, [pc, #88]	; (83864 <__sflush_r+0x134>)
   8380a:	40e3      	lsrs	r3, r4
   8380c:	43db      	mvns	r3, r3
   8380e:	f013 0301 	ands.w	r3, r3, #1
   83812:	d1ed      	bne.n	837f0 <__sflush_r+0xc0>
   83814:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83818:	6929      	ldr	r1, [r5, #16]
   8381a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8381e:	81aa      	strh	r2, [r5, #12]
   83820:	04d2      	lsls	r2, r2, #19
   83822:	606b      	str	r3, [r5, #4]
   83824:	6029      	str	r1, [r5, #0]
   83826:	d5b8      	bpl.n	8379a <__sflush_r+0x6a>
   83828:	2c00      	cmp	r4, #0
   8382a:	d1b6      	bne.n	8379a <__sflush_r+0x6a>
   8382c:	6528      	str	r0, [r5, #80]	; 0x50
   8382e:	e7b4      	b.n	8379a <__sflush_r+0x6a>
   83830:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83832:	2a00      	cmp	r2, #0
   83834:	dc8b      	bgt.n	8374e <__sflush_r+0x1e>
   83836:	e7d8      	b.n	837ea <__sflush_r+0xba>
   83838:	2301      	movs	r3, #1
   8383a:	69e9      	ldr	r1, [r5, #28]
   8383c:	4640      	mov	r0, r8
   8383e:	47a0      	blx	r4
   83840:	1c43      	adds	r3, r0, #1
   83842:	4602      	mov	r2, r0
   83844:	d002      	beq.n	8384c <__sflush_r+0x11c>
   83846:	89ab      	ldrh	r3, [r5, #12]
   83848:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8384a:	e78d      	b.n	83768 <__sflush_r+0x38>
   8384c:	f8d8 3000 	ldr.w	r3, [r8]
   83850:	2b00      	cmp	r3, #0
   83852:	d0f8      	beq.n	83846 <__sflush_r+0x116>
   83854:	2b1d      	cmp	r3, #29
   83856:	d001      	beq.n	8385c <__sflush_r+0x12c>
   83858:	2b16      	cmp	r3, #22
   8385a:	d1c9      	bne.n	837f0 <__sflush_r+0xc0>
   8385c:	f8c8 6000 	str.w	r6, [r8]
   83860:	e7c3      	b.n	837ea <__sflush_r+0xba>
   83862:	bf00      	nop
   83864:	20400001 	.word	0x20400001

00083868 <_fflush_r>:
   83868:	b538      	push	{r3, r4, r5, lr}
   8386a:	460d      	mov	r5, r1
   8386c:	4604      	mov	r4, r0
   8386e:	b108      	cbz	r0, 83874 <_fflush_r+0xc>
   83870:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83872:	b1bb      	cbz	r3, 838a4 <_fflush_r+0x3c>
   83874:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83878:	b188      	cbz	r0, 8389e <_fflush_r+0x36>
   8387a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8387c:	07db      	lsls	r3, r3, #31
   8387e:	d401      	bmi.n	83884 <_fflush_r+0x1c>
   83880:	0581      	lsls	r1, r0, #22
   83882:	d517      	bpl.n	838b4 <_fflush_r+0x4c>
   83884:	4620      	mov	r0, r4
   83886:	4629      	mov	r1, r5
   83888:	f7ff ff52 	bl	83730 <__sflush_r>
   8388c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8388e:	4604      	mov	r4, r0
   83890:	07da      	lsls	r2, r3, #31
   83892:	d402      	bmi.n	8389a <_fflush_r+0x32>
   83894:	89ab      	ldrh	r3, [r5, #12]
   83896:	059b      	lsls	r3, r3, #22
   83898:	d507      	bpl.n	838aa <_fflush_r+0x42>
   8389a:	4620      	mov	r0, r4
   8389c:	bd38      	pop	{r3, r4, r5, pc}
   8389e:	4604      	mov	r4, r0
   838a0:	4620      	mov	r0, r4
   838a2:	bd38      	pop	{r3, r4, r5, pc}
   838a4:	f000 f838 	bl	83918 <__sinit>
   838a8:	e7e4      	b.n	83874 <_fflush_r+0xc>
   838aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
   838ac:	f000 fbf6 	bl	8409c <__retarget_lock_release_recursive>
   838b0:	4620      	mov	r0, r4
   838b2:	bd38      	pop	{r3, r4, r5, pc}
   838b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   838b6:	f000 fbef 	bl	84098 <__retarget_lock_acquire_recursive>
   838ba:	e7e3      	b.n	83884 <_fflush_r+0x1c>

000838bc <_cleanup_r>:
   838bc:	4901      	ldr	r1, [pc, #4]	; (838c4 <_cleanup_r+0x8>)
   838be:	f000 bbb1 	b.w	84024 <_fwalk_reent>
   838c2:	bf00      	nop
   838c4:	00084ec5 	.word	0x00084ec5

000838c8 <std.isra.0>:
   838c8:	2300      	movs	r3, #0
   838ca:	b510      	push	{r4, lr}
   838cc:	4604      	mov	r4, r0
   838ce:	8181      	strh	r1, [r0, #12]
   838d0:	81c2      	strh	r2, [r0, #14]
   838d2:	6003      	str	r3, [r0, #0]
   838d4:	6043      	str	r3, [r0, #4]
   838d6:	6083      	str	r3, [r0, #8]
   838d8:	6643      	str	r3, [r0, #100]	; 0x64
   838da:	6103      	str	r3, [r0, #16]
   838dc:	6143      	str	r3, [r0, #20]
   838de:	6183      	str	r3, [r0, #24]
   838e0:	4619      	mov	r1, r3
   838e2:	2208      	movs	r2, #8
   838e4:	305c      	adds	r0, #92	; 0x5c
   838e6:	f7fe fe69 	bl	825bc <memset>
   838ea:	4807      	ldr	r0, [pc, #28]	; (83908 <std.isra.0+0x40>)
   838ec:	4907      	ldr	r1, [pc, #28]	; (8390c <std.isra.0+0x44>)
   838ee:	4a08      	ldr	r2, [pc, #32]	; (83910 <std.isra.0+0x48>)
   838f0:	4b08      	ldr	r3, [pc, #32]	; (83914 <std.isra.0+0x4c>)
   838f2:	6220      	str	r0, [r4, #32]
   838f4:	61e4      	str	r4, [r4, #28]
   838f6:	6261      	str	r1, [r4, #36]	; 0x24
   838f8:	62a2      	str	r2, [r4, #40]	; 0x28
   838fa:	62e3      	str	r3, [r4, #44]	; 0x2c
   838fc:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83904:	f000 bbc4 	b.w	84090 <__retarget_lock_init_recursive>
   83908:	00084c0d 	.word	0x00084c0d
   8390c:	00084c31 	.word	0x00084c31
   83910:	00084c6d 	.word	0x00084c6d
   83914:	00084c8d 	.word	0x00084c8d

00083918 <__sinit>:
   83918:	b510      	push	{r4, lr}
   8391a:	4604      	mov	r4, r0
   8391c:	4814      	ldr	r0, [pc, #80]	; (83970 <__sinit+0x58>)
   8391e:	f000 fbbb 	bl	84098 <__retarget_lock_acquire_recursive>
   83922:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83924:	b9fa      	cbnz	r2, 83966 <__sinit+0x4e>
   83926:	2003      	movs	r0, #3
   83928:	4912      	ldr	r1, [pc, #72]	; (83974 <__sinit+0x5c>)
   8392a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8392e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83932:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83936:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   8393a:	63e1      	str	r1, [r4, #60]	; 0x3c
   8393c:	6860      	ldr	r0, [r4, #4]
   8393e:	2104      	movs	r1, #4
   83940:	f7ff ffc2 	bl	838c8 <std.isra.0>
   83944:	68a0      	ldr	r0, [r4, #8]
   83946:	2201      	movs	r2, #1
   83948:	2109      	movs	r1, #9
   8394a:	f7ff ffbd 	bl	838c8 <std.isra.0>
   8394e:	68e0      	ldr	r0, [r4, #12]
   83950:	2202      	movs	r2, #2
   83952:	2112      	movs	r1, #18
   83954:	f7ff ffb8 	bl	838c8 <std.isra.0>
   83958:	2301      	movs	r3, #1
   8395a:	4805      	ldr	r0, [pc, #20]	; (83970 <__sinit+0x58>)
   8395c:	63a3      	str	r3, [r4, #56]	; 0x38
   8395e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83962:	f000 bb9b 	b.w	8409c <__retarget_lock_release_recursive>
   83966:	4802      	ldr	r0, [pc, #8]	; (83970 <__sinit+0x58>)
   83968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8396c:	f000 bb96 	b.w	8409c <__retarget_lock_release_recursive>
   83970:	2007ad0c 	.word	0x2007ad0c
   83974:	000838bd 	.word	0x000838bd

00083978 <__sfp_lock_acquire>:
   83978:	4801      	ldr	r0, [pc, #4]	; (83980 <__sfp_lock_acquire+0x8>)
   8397a:	f000 bb8d 	b.w	84098 <__retarget_lock_acquire_recursive>
   8397e:	bf00      	nop
   83980:	2007ad20 	.word	0x2007ad20

00083984 <__sfp_lock_release>:
   83984:	4801      	ldr	r0, [pc, #4]	; (8398c <__sfp_lock_release+0x8>)
   83986:	f000 bb89 	b.w	8409c <__retarget_lock_release_recursive>
   8398a:	bf00      	nop
   8398c:	2007ad20 	.word	0x2007ad20

00083990 <__libc_fini_array>:
   83990:	b538      	push	{r3, r4, r5, lr}
   83992:	4c0a      	ldr	r4, [pc, #40]	; (839bc <__libc_fini_array+0x2c>)
   83994:	4d0a      	ldr	r5, [pc, #40]	; (839c0 <__libc_fini_array+0x30>)
   83996:	1b64      	subs	r4, r4, r5
   83998:	10a4      	asrs	r4, r4, #2
   8399a:	d00a      	beq.n	839b2 <__libc_fini_array+0x22>
   8399c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   839a0:	3b01      	subs	r3, #1
   839a2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   839a6:	3c01      	subs	r4, #1
   839a8:	f855 3904 	ldr.w	r3, [r5], #-4
   839ac:	4798      	blx	r3
   839ae:	2c00      	cmp	r4, #0
   839b0:	d1f9      	bne.n	839a6 <__libc_fini_array+0x16>
   839b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   839b6:	f001 bdc5 	b.w	85544 <_fini>
   839ba:	bf00      	nop
   839bc:	00085554 	.word	0x00085554
   839c0:	00085550 	.word	0x00085550

000839c4 <__fputwc>:
   839c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   839c8:	b083      	sub	sp, #12
   839ca:	4607      	mov	r7, r0
   839cc:	4688      	mov	r8, r1
   839ce:	4614      	mov	r4, r2
   839d0:	f000 fb50 	bl	84074 <__locale_mb_cur_max>
   839d4:	2801      	cmp	r0, #1
   839d6:	d033      	beq.n	83a40 <__fputwc+0x7c>
   839d8:	4642      	mov	r2, r8
   839da:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   839de:	a901      	add	r1, sp, #4
   839e0:	4638      	mov	r0, r7
   839e2:	f001 f9af 	bl	84d44 <_wcrtomb_r>
   839e6:	1c42      	adds	r2, r0, #1
   839e8:	4606      	mov	r6, r0
   839ea:	d022      	beq.n	83a32 <__fputwc+0x6e>
   839ec:	b390      	cbz	r0, 83a54 <__fputwc+0x90>
   839ee:	f89d 1004 	ldrb.w	r1, [sp, #4]
   839f2:	2500      	movs	r5, #0
   839f4:	f10d 0904 	add.w	r9, sp, #4
   839f8:	e008      	b.n	83a0c <__fputwc+0x48>
   839fa:	6823      	ldr	r3, [r4, #0]
   839fc:	1c5a      	adds	r2, r3, #1
   839fe:	6022      	str	r2, [r4, #0]
   83a00:	7019      	strb	r1, [r3, #0]
   83a02:	3501      	adds	r5, #1
   83a04:	42b5      	cmp	r5, r6
   83a06:	d225      	bcs.n	83a54 <__fputwc+0x90>
   83a08:	f815 1009 	ldrb.w	r1, [r5, r9]
   83a0c:	68a3      	ldr	r3, [r4, #8]
   83a0e:	3b01      	subs	r3, #1
   83a10:	2b00      	cmp	r3, #0
   83a12:	60a3      	str	r3, [r4, #8]
   83a14:	daf1      	bge.n	839fa <__fputwc+0x36>
   83a16:	69a2      	ldr	r2, [r4, #24]
   83a18:	4293      	cmp	r3, r2
   83a1a:	db01      	blt.n	83a20 <__fputwc+0x5c>
   83a1c:	290a      	cmp	r1, #10
   83a1e:	d1ec      	bne.n	839fa <__fputwc+0x36>
   83a20:	4622      	mov	r2, r4
   83a22:	4638      	mov	r0, r7
   83a24:	f001 f936 	bl	84c94 <__swbuf_r>
   83a28:	1c43      	adds	r3, r0, #1
   83a2a:	d1ea      	bne.n	83a02 <__fputwc+0x3e>
   83a2c:	b003      	add	sp, #12
   83a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a32:	89a3      	ldrh	r3, [r4, #12]
   83a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a38:	81a3      	strh	r3, [r4, #12]
   83a3a:	b003      	add	sp, #12
   83a3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a40:	f108 33ff 	add.w	r3, r8, #4294967295
   83a44:	2bfe      	cmp	r3, #254	; 0xfe
   83a46:	d8c7      	bhi.n	839d8 <__fputwc+0x14>
   83a48:	fa5f f188 	uxtb.w	r1, r8
   83a4c:	4606      	mov	r6, r0
   83a4e:	f88d 1004 	strb.w	r1, [sp, #4]
   83a52:	e7ce      	b.n	839f2 <__fputwc+0x2e>
   83a54:	4640      	mov	r0, r8
   83a56:	b003      	add	sp, #12
   83a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083a5c <_fputwc_r>:
   83a5c:	b530      	push	{r4, r5, lr}
   83a5e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83a60:	4614      	mov	r4, r2
   83a62:	f013 0f01 	tst.w	r3, #1
   83a66:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83a6a:	b083      	sub	sp, #12
   83a6c:	4605      	mov	r5, r0
   83a6e:	b29a      	uxth	r2, r3
   83a70:	d101      	bne.n	83a76 <_fputwc_r+0x1a>
   83a72:	0590      	lsls	r0, r2, #22
   83a74:	d51c      	bpl.n	83ab0 <_fputwc_r+0x54>
   83a76:	0490      	lsls	r0, r2, #18
   83a78:	d406      	bmi.n	83a88 <_fputwc_r+0x2c>
   83a7a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83a80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83a84:	81a3      	strh	r3, [r4, #12]
   83a86:	6662      	str	r2, [r4, #100]	; 0x64
   83a88:	4628      	mov	r0, r5
   83a8a:	4622      	mov	r2, r4
   83a8c:	f7ff ff9a 	bl	839c4 <__fputwc>
   83a90:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a92:	4605      	mov	r5, r0
   83a94:	07da      	lsls	r2, r3, #31
   83a96:	d402      	bmi.n	83a9e <_fputwc_r+0x42>
   83a98:	89a3      	ldrh	r3, [r4, #12]
   83a9a:	059b      	lsls	r3, r3, #22
   83a9c:	d502      	bpl.n	83aa4 <_fputwc_r+0x48>
   83a9e:	4628      	mov	r0, r5
   83aa0:	b003      	add	sp, #12
   83aa2:	bd30      	pop	{r4, r5, pc}
   83aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83aa6:	f000 faf9 	bl	8409c <__retarget_lock_release_recursive>
   83aaa:	4628      	mov	r0, r5
   83aac:	b003      	add	sp, #12
   83aae:	bd30      	pop	{r4, r5, pc}
   83ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83ab2:	9101      	str	r1, [sp, #4]
   83ab4:	f000 faf0 	bl	84098 <__retarget_lock_acquire_recursive>
   83ab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83abc:	9901      	ldr	r1, [sp, #4]
   83abe:	b29a      	uxth	r2, r3
   83ac0:	e7d9      	b.n	83a76 <_fputwc_r+0x1a>
   83ac2:	bf00      	nop

00083ac4 <_malloc_trim_r>:
   83ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ac6:	460c      	mov	r4, r1
   83ac8:	4f23      	ldr	r7, [pc, #140]	; (83b58 <_malloc_trim_r+0x94>)
   83aca:	4606      	mov	r6, r0
   83acc:	f000 feca 	bl	84864 <__malloc_lock>
   83ad0:	68bb      	ldr	r3, [r7, #8]
   83ad2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83ad6:	685d      	ldr	r5, [r3, #4]
   83ad8:	310f      	adds	r1, #15
   83ada:	f025 0503 	bic.w	r5, r5, #3
   83ade:	4429      	add	r1, r5
   83ae0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83ae4:	f021 010f 	bic.w	r1, r1, #15
   83ae8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83aec:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83af0:	db07      	blt.n	83b02 <_malloc_trim_r+0x3e>
   83af2:	2100      	movs	r1, #0
   83af4:	4630      	mov	r0, r6
   83af6:	f001 f877 	bl	84be8 <_sbrk_r>
   83afa:	68bb      	ldr	r3, [r7, #8]
   83afc:	442b      	add	r3, r5
   83afe:	4298      	cmp	r0, r3
   83b00:	d004      	beq.n	83b0c <_malloc_trim_r+0x48>
   83b02:	4630      	mov	r0, r6
   83b04:	f000 feb4 	bl	84870 <__malloc_unlock>
   83b08:	2000      	movs	r0, #0
   83b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b0c:	4261      	negs	r1, r4
   83b0e:	4630      	mov	r0, r6
   83b10:	f001 f86a 	bl	84be8 <_sbrk_r>
   83b14:	3001      	adds	r0, #1
   83b16:	d00d      	beq.n	83b34 <_malloc_trim_r+0x70>
   83b18:	4b10      	ldr	r3, [pc, #64]	; (83b5c <_malloc_trim_r+0x98>)
   83b1a:	68ba      	ldr	r2, [r7, #8]
   83b1c:	6819      	ldr	r1, [r3, #0]
   83b1e:	1b2d      	subs	r5, r5, r4
   83b20:	f045 0501 	orr.w	r5, r5, #1
   83b24:	4630      	mov	r0, r6
   83b26:	1b09      	subs	r1, r1, r4
   83b28:	6055      	str	r5, [r2, #4]
   83b2a:	6019      	str	r1, [r3, #0]
   83b2c:	f000 fea0 	bl	84870 <__malloc_unlock>
   83b30:	2001      	movs	r0, #1
   83b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b34:	2100      	movs	r1, #0
   83b36:	4630      	mov	r0, r6
   83b38:	f001 f856 	bl	84be8 <_sbrk_r>
   83b3c:	68ba      	ldr	r2, [r7, #8]
   83b3e:	1a83      	subs	r3, r0, r2
   83b40:	2b0f      	cmp	r3, #15
   83b42:	ddde      	ble.n	83b02 <_malloc_trim_r+0x3e>
   83b44:	4c06      	ldr	r4, [pc, #24]	; (83b60 <_malloc_trim_r+0x9c>)
   83b46:	4905      	ldr	r1, [pc, #20]	; (83b5c <_malloc_trim_r+0x98>)
   83b48:	6824      	ldr	r4, [r4, #0]
   83b4a:	f043 0301 	orr.w	r3, r3, #1
   83b4e:	1b00      	subs	r0, r0, r4
   83b50:	6053      	str	r3, [r2, #4]
   83b52:	6008      	str	r0, [r1, #0]
   83b54:	e7d5      	b.n	83b02 <_malloc_trim_r+0x3e>
   83b56:	bf00      	nop
   83b58:	200706d8 	.word	0x200706d8
   83b5c:	2007acc0 	.word	0x2007acc0
   83b60:	20070ae0 	.word	0x20070ae0

00083b64 <_free_r>:
   83b64:	2900      	cmp	r1, #0
   83b66:	d044      	beq.n	83bf2 <_free_r+0x8e>
   83b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b6c:	460d      	mov	r5, r1
   83b6e:	4680      	mov	r8, r0
   83b70:	f000 fe78 	bl	84864 <__malloc_lock>
   83b74:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83b78:	4969      	ldr	r1, [pc, #420]	; (83d20 <_free_r+0x1bc>)
   83b7a:	f1a5 0408 	sub.w	r4, r5, #8
   83b7e:	f027 0301 	bic.w	r3, r7, #1
   83b82:	18e2      	adds	r2, r4, r3
   83b84:	688e      	ldr	r6, [r1, #8]
   83b86:	6850      	ldr	r0, [r2, #4]
   83b88:	42b2      	cmp	r2, r6
   83b8a:	f020 0003 	bic.w	r0, r0, #3
   83b8e:	d05e      	beq.n	83c4e <_free_r+0xea>
   83b90:	07fe      	lsls	r6, r7, #31
   83b92:	6050      	str	r0, [r2, #4]
   83b94:	d40b      	bmi.n	83bae <_free_r+0x4a>
   83b96:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83b9a:	f101 0e08 	add.w	lr, r1, #8
   83b9e:	1be4      	subs	r4, r4, r7
   83ba0:	68a5      	ldr	r5, [r4, #8]
   83ba2:	443b      	add	r3, r7
   83ba4:	4575      	cmp	r5, lr
   83ba6:	d06d      	beq.n	83c84 <_free_r+0x120>
   83ba8:	68e7      	ldr	r7, [r4, #12]
   83baa:	60ef      	str	r7, [r5, #12]
   83bac:	60bd      	str	r5, [r7, #8]
   83bae:	1815      	adds	r5, r2, r0
   83bb0:	686d      	ldr	r5, [r5, #4]
   83bb2:	07ed      	lsls	r5, r5, #31
   83bb4:	d53e      	bpl.n	83c34 <_free_r+0xd0>
   83bb6:	f043 0201 	orr.w	r2, r3, #1
   83bba:	6062      	str	r2, [r4, #4]
   83bbc:	50e3      	str	r3, [r4, r3]
   83bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83bc2:	d217      	bcs.n	83bf4 <_free_r+0x90>
   83bc4:	2201      	movs	r2, #1
   83bc6:	08db      	lsrs	r3, r3, #3
   83bc8:	1098      	asrs	r0, r3, #2
   83bca:	684d      	ldr	r5, [r1, #4]
   83bcc:	4413      	add	r3, r2
   83bce:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83bd2:	4082      	lsls	r2, r0
   83bd4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83bd8:	432a      	orrs	r2, r5
   83bda:	3808      	subs	r0, #8
   83bdc:	60e0      	str	r0, [r4, #12]
   83bde:	60a7      	str	r7, [r4, #8]
   83be0:	604a      	str	r2, [r1, #4]
   83be2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83be6:	60fc      	str	r4, [r7, #12]
   83be8:	4640      	mov	r0, r8
   83bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83bee:	f000 be3f 	b.w	84870 <__malloc_unlock>
   83bf2:	4770      	bx	lr
   83bf4:	0a5a      	lsrs	r2, r3, #9
   83bf6:	2a04      	cmp	r2, #4
   83bf8:	d852      	bhi.n	83ca0 <_free_r+0x13c>
   83bfa:	099a      	lsrs	r2, r3, #6
   83bfc:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83c00:	00ff      	lsls	r7, r7, #3
   83c02:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83c06:	19c8      	adds	r0, r1, r7
   83c08:	59ca      	ldr	r2, [r1, r7]
   83c0a:	3808      	subs	r0, #8
   83c0c:	4290      	cmp	r0, r2
   83c0e:	d04f      	beq.n	83cb0 <_free_r+0x14c>
   83c10:	6851      	ldr	r1, [r2, #4]
   83c12:	f021 0103 	bic.w	r1, r1, #3
   83c16:	428b      	cmp	r3, r1
   83c18:	d232      	bcs.n	83c80 <_free_r+0x11c>
   83c1a:	6892      	ldr	r2, [r2, #8]
   83c1c:	4290      	cmp	r0, r2
   83c1e:	d1f7      	bne.n	83c10 <_free_r+0xac>
   83c20:	68c3      	ldr	r3, [r0, #12]
   83c22:	60a0      	str	r0, [r4, #8]
   83c24:	60e3      	str	r3, [r4, #12]
   83c26:	609c      	str	r4, [r3, #8]
   83c28:	60c4      	str	r4, [r0, #12]
   83c2a:	4640      	mov	r0, r8
   83c2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83c30:	f000 be1e 	b.w	84870 <__malloc_unlock>
   83c34:	6895      	ldr	r5, [r2, #8]
   83c36:	4f3b      	ldr	r7, [pc, #236]	; (83d24 <_free_r+0x1c0>)
   83c38:	4403      	add	r3, r0
   83c3a:	42bd      	cmp	r5, r7
   83c3c:	d040      	beq.n	83cc0 <_free_r+0x15c>
   83c3e:	68d0      	ldr	r0, [r2, #12]
   83c40:	f043 0201 	orr.w	r2, r3, #1
   83c44:	60e8      	str	r0, [r5, #12]
   83c46:	6085      	str	r5, [r0, #8]
   83c48:	6062      	str	r2, [r4, #4]
   83c4a:	50e3      	str	r3, [r4, r3]
   83c4c:	e7b7      	b.n	83bbe <_free_r+0x5a>
   83c4e:	07ff      	lsls	r7, r7, #31
   83c50:	4403      	add	r3, r0
   83c52:	d407      	bmi.n	83c64 <_free_r+0x100>
   83c54:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83c58:	1b64      	subs	r4, r4, r5
   83c5a:	68e2      	ldr	r2, [r4, #12]
   83c5c:	68a0      	ldr	r0, [r4, #8]
   83c5e:	442b      	add	r3, r5
   83c60:	60c2      	str	r2, [r0, #12]
   83c62:	6090      	str	r0, [r2, #8]
   83c64:	4a30      	ldr	r2, [pc, #192]	; (83d28 <_free_r+0x1c4>)
   83c66:	f043 0001 	orr.w	r0, r3, #1
   83c6a:	6812      	ldr	r2, [r2, #0]
   83c6c:	6060      	str	r0, [r4, #4]
   83c6e:	4293      	cmp	r3, r2
   83c70:	608c      	str	r4, [r1, #8]
   83c72:	d3b9      	bcc.n	83be8 <_free_r+0x84>
   83c74:	4b2d      	ldr	r3, [pc, #180]	; (83d2c <_free_r+0x1c8>)
   83c76:	4640      	mov	r0, r8
   83c78:	6819      	ldr	r1, [r3, #0]
   83c7a:	f7ff ff23 	bl	83ac4 <_malloc_trim_r>
   83c7e:	e7b3      	b.n	83be8 <_free_r+0x84>
   83c80:	4610      	mov	r0, r2
   83c82:	e7cd      	b.n	83c20 <_free_r+0xbc>
   83c84:	1811      	adds	r1, r2, r0
   83c86:	6849      	ldr	r1, [r1, #4]
   83c88:	07c9      	lsls	r1, r1, #31
   83c8a:	d444      	bmi.n	83d16 <_free_r+0x1b2>
   83c8c:	6891      	ldr	r1, [r2, #8]
   83c8e:	4403      	add	r3, r0
   83c90:	68d2      	ldr	r2, [r2, #12]
   83c92:	f043 0001 	orr.w	r0, r3, #1
   83c96:	60ca      	str	r2, [r1, #12]
   83c98:	6091      	str	r1, [r2, #8]
   83c9a:	6060      	str	r0, [r4, #4]
   83c9c:	50e3      	str	r3, [r4, r3]
   83c9e:	e7a3      	b.n	83be8 <_free_r+0x84>
   83ca0:	2a14      	cmp	r2, #20
   83ca2:	d816      	bhi.n	83cd2 <_free_r+0x16e>
   83ca4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83ca8:	00ff      	lsls	r7, r7, #3
   83caa:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83cae:	e7aa      	b.n	83c06 <_free_r+0xa2>
   83cb0:	2301      	movs	r3, #1
   83cb2:	10aa      	asrs	r2, r5, #2
   83cb4:	684d      	ldr	r5, [r1, #4]
   83cb6:	4093      	lsls	r3, r2
   83cb8:	432b      	orrs	r3, r5
   83cba:	604b      	str	r3, [r1, #4]
   83cbc:	4603      	mov	r3, r0
   83cbe:	e7b0      	b.n	83c22 <_free_r+0xbe>
   83cc0:	f043 0201 	orr.w	r2, r3, #1
   83cc4:	614c      	str	r4, [r1, #20]
   83cc6:	610c      	str	r4, [r1, #16]
   83cc8:	60e5      	str	r5, [r4, #12]
   83cca:	60a5      	str	r5, [r4, #8]
   83ccc:	6062      	str	r2, [r4, #4]
   83cce:	50e3      	str	r3, [r4, r3]
   83cd0:	e78a      	b.n	83be8 <_free_r+0x84>
   83cd2:	2a54      	cmp	r2, #84	; 0x54
   83cd4:	d806      	bhi.n	83ce4 <_free_r+0x180>
   83cd6:	0b1a      	lsrs	r2, r3, #12
   83cd8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83cdc:	00ff      	lsls	r7, r7, #3
   83cde:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83ce2:	e790      	b.n	83c06 <_free_r+0xa2>
   83ce4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83ce8:	d806      	bhi.n	83cf8 <_free_r+0x194>
   83cea:	0bda      	lsrs	r2, r3, #15
   83cec:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83cf0:	00ff      	lsls	r7, r7, #3
   83cf2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83cf6:	e786      	b.n	83c06 <_free_r+0xa2>
   83cf8:	f240 5054 	movw	r0, #1364	; 0x554
   83cfc:	4282      	cmp	r2, r0
   83cfe:	d806      	bhi.n	83d0e <_free_r+0x1aa>
   83d00:	0c9a      	lsrs	r2, r3, #18
   83d02:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83d06:	00ff      	lsls	r7, r7, #3
   83d08:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83d0c:	e77b      	b.n	83c06 <_free_r+0xa2>
   83d0e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83d12:	257e      	movs	r5, #126	; 0x7e
   83d14:	e777      	b.n	83c06 <_free_r+0xa2>
   83d16:	f043 0101 	orr.w	r1, r3, #1
   83d1a:	6061      	str	r1, [r4, #4]
   83d1c:	6013      	str	r3, [r2, #0]
   83d1e:	e763      	b.n	83be8 <_free_r+0x84>
   83d20:	200706d8 	.word	0x200706d8
   83d24:	200706e0 	.word	0x200706e0
   83d28:	20070ae4 	.word	0x20070ae4
   83d2c:	2007acf0 	.word	0x2007acf0

00083d30 <__sfvwrite_r>:
   83d30:	6893      	ldr	r3, [r2, #8]
   83d32:	2b00      	cmp	r3, #0
   83d34:	d071      	beq.n	83e1a <__sfvwrite_r+0xea>
   83d36:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d3a:	898b      	ldrh	r3, [r1, #12]
   83d3c:	b083      	sub	sp, #12
   83d3e:	460c      	mov	r4, r1
   83d40:	0719      	lsls	r1, r3, #28
   83d42:	9000      	str	r0, [sp, #0]
   83d44:	4616      	mov	r6, r2
   83d46:	d525      	bpl.n	83d94 <__sfvwrite_r+0x64>
   83d48:	6922      	ldr	r2, [r4, #16]
   83d4a:	b31a      	cbz	r2, 83d94 <__sfvwrite_r+0x64>
   83d4c:	f013 0002 	ands.w	r0, r3, #2
   83d50:	6835      	ldr	r5, [r6, #0]
   83d52:	d02b      	beq.n	83dac <__sfvwrite_r+0x7c>
   83d54:	f04f 0900 	mov.w	r9, #0
   83d58:	46b0      	mov	r8, r6
   83d5a:	464f      	mov	r7, r9
   83d5c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 84020 <__sfvwrite_r+0x2f0>
   83d60:	2f00      	cmp	r7, #0
   83d62:	d055      	beq.n	83e10 <__sfvwrite_r+0xe0>
   83d64:	4557      	cmp	r7, sl
   83d66:	463b      	mov	r3, r7
   83d68:	464a      	mov	r2, r9
   83d6a:	bf28      	it	cs
   83d6c:	4653      	movcs	r3, sl
   83d6e:	69e1      	ldr	r1, [r4, #28]
   83d70:	9800      	ldr	r0, [sp, #0]
   83d72:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83d74:	47b0      	blx	r6
   83d76:	2800      	cmp	r0, #0
   83d78:	dd56      	ble.n	83e28 <__sfvwrite_r+0xf8>
   83d7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83d7e:	4481      	add	r9, r0
   83d80:	1a1b      	subs	r3, r3, r0
   83d82:	1a3f      	subs	r7, r7, r0
   83d84:	f8c8 3008 	str.w	r3, [r8, #8]
   83d88:	2b00      	cmp	r3, #0
   83d8a:	d1e9      	bne.n	83d60 <__sfvwrite_r+0x30>
   83d8c:	2000      	movs	r0, #0
   83d8e:	b003      	add	sp, #12
   83d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d94:	4621      	mov	r1, r4
   83d96:	9800      	ldr	r0, [sp, #0]
   83d98:	f7ff fc56 	bl	83648 <__swsetup_r>
   83d9c:	2800      	cmp	r0, #0
   83d9e:	f040 8135 	bne.w	8400c <__sfvwrite_r+0x2dc>
   83da2:	89a3      	ldrh	r3, [r4, #12]
   83da4:	6835      	ldr	r5, [r6, #0]
   83da6:	f013 0002 	ands.w	r0, r3, #2
   83daa:	d1d3      	bne.n	83d54 <__sfvwrite_r+0x24>
   83dac:	f013 0901 	ands.w	r9, r3, #1
   83db0:	d144      	bne.n	83e3c <__sfvwrite_r+0x10c>
   83db2:	464f      	mov	r7, r9
   83db4:	9601      	str	r6, [sp, #4]
   83db6:	b337      	cbz	r7, 83e06 <__sfvwrite_r+0xd6>
   83db8:	059a      	lsls	r2, r3, #22
   83dba:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83dbe:	f140 8085 	bpl.w	83ecc <__sfvwrite_r+0x19c>
   83dc2:	4547      	cmp	r7, r8
   83dc4:	46c3      	mov	fp, r8
   83dc6:	f0c0 80ad 	bcc.w	83f24 <__sfvwrite_r+0x1f4>
   83dca:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83dce:	f040 80ae 	bne.w	83f2e <__sfvwrite_r+0x1fe>
   83dd2:	46ba      	mov	sl, r7
   83dd4:	6820      	ldr	r0, [r4, #0]
   83dd6:	465a      	mov	r2, fp
   83dd8:	4649      	mov	r1, r9
   83dda:	f000 fcdf 	bl	8479c <memmove>
   83dde:	68a2      	ldr	r2, [r4, #8]
   83de0:	6823      	ldr	r3, [r4, #0]
   83de2:	eba2 0208 	sub.w	r2, r2, r8
   83de6:	445b      	add	r3, fp
   83de8:	60a2      	str	r2, [r4, #8]
   83dea:	6023      	str	r3, [r4, #0]
   83dec:	9a01      	ldr	r2, [sp, #4]
   83dee:	44d1      	add	r9, sl
   83df0:	6893      	ldr	r3, [r2, #8]
   83df2:	eba7 070a 	sub.w	r7, r7, sl
   83df6:	eba3 030a 	sub.w	r3, r3, sl
   83dfa:	6093      	str	r3, [r2, #8]
   83dfc:	2b00      	cmp	r3, #0
   83dfe:	d0c5      	beq.n	83d8c <__sfvwrite_r+0x5c>
   83e00:	89a3      	ldrh	r3, [r4, #12]
   83e02:	2f00      	cmp	r7, #0
   83e04:	d1d8      	bne.n	83db8 <__sfvwrite_r+0x88>
   83e06:	f8d5 9000 	ldr.w	r9, [r5]
   83e0a:	686f      	ldr	r7, [r5, #4]
   83e0c:	3508      	adds	r5, #8
   83e0e:	e7d2      	b.n	83db6 <__sfvwrite_r+0x86>
   83e10:	f8d5 9000 	ldr.w	r9, [r5]
   83e14:	686f      	ldr	r7, [r5, #4]
   83e16:	3508      	adds	r5, #8
   83e18:	e7a2      	b.n	83d60 <__sfvwrite_r+0x30>
   83e1a:	2000      	movs	r0, #0
   83e1c:	4770      	bx	lr
   83e1e:	4621      	mov	r1, r4
   83e20:	9800      	ldr	r0, [sp, #0]
   83e22:	f7ff fd21 	bl	83868 <_fflush_r>
   83e26:	b378      	cbz	r0, 83e88 <__sfvwrite_r+0x158>
   83e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e2c:	f04f 30ff 	mov.w	r0, #4294967295
   83e30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e34:	81a3      	strh	r3, [r4, #12]
   83e36:	b003      	add	sp, #12
   83e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e3c:	4681      	mov	r9, r0
   83e3e:	4633      	mov	r3, r6
   83e40:	464e      	mov	r6, r9
   83e42:	46a8      	mov	r8, r5
   83e44:	469a      	mov	sl, r3
   83e46:	464d      	mov	r5, r9
   83e48:	b356      	cbz	r6, 83ea0 <__sfvwrite_r+0x170>
   83e4a:	2800      	cmp	r0, #0
   83e4c:	d032      	beq.n	83eb4 <__sfvwrite_r+0x184>
   83e4e:	45b1      	cmp	r9, r6
   83e50:	46cb      	mov	fp, r9
   83e52:	bf28      	it	cs
   83e54:	46b3      	movcs	fp, r6
   83e56:	6820      	ldr	r0, [r4, #0]
   83e58:	6923      	ldr	r3, [r4, #16]
   83e5a:	465f      	mov	r7, fp
   83e5c:	4298      	cmp	r0, r3
   83e5e:	6962      	ldr	r2, [r4, #20]
   83e60:	d904      	bls.n	83e6c <__sfvwrite_r+0x13c>
   83e62:	68a3      	ldr	r3, [r4, #8]
   83e64:	4413      	add	r3, r2
   83e66:	459b      	cmp	fp, r3
   83e68:	f300 80a8 	bgt.w	83fbc <__sfvwrite_r+0x28c>
   83e6c:	4593      	cmp	fp, r2
   83e6e:	db4d      	blt.n	83f0c <__sfvwrite_r+0x1dc>
   83e70:	4613      	mov	r3, r2
   83e72:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83e74:	462a      	mov	r2, r5
   83e76:	69e1      	ldr	r1, [r4, #28]
   83e78:	9800      	ldr	r0, [sp, #0]
   83e7a:	47b8      	blx	r7
   83e7c:	1e07      	subs	r7, r0, #0
   83e7e:	ddd3      	ble.n	83e28 <__sfvwrite_r+0xf8>
   83e80:	ebb9 0907 	subs.w	r9, r9, r7
   83e84:	d0cb      	beq.n	83e1e <__sfvwrite_r+0xee>
   83e86:	2001      	movs	r0, #1
   83e88:	f8da 3008 	ldr.w	r3, [sl, #8]
   83e8c:	443d      	add	r5, r7
   83e8e:	1bdb      	subs	r3, r3, r7
   83e90:	1bf6      	subs	r6, r6, r7
   83e92:	f8ca 3008 	str.w	r3, [sl, #8]
   83e96:	2b00      	cmp	r3, #0
   83e98:	f43f af78 	beq.w	83d8c <__sfvwrite_r+0x5c>
   83e9c:	2e00      	cmp	r6, #0
   83e9e:	d1d4      	bne.n	83e4a <__sfvwrite_r+0x11a>
   83ea0:	f108 0308 	add.w	r3, r8, #8
   83ea4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83ea8:	4698      	mov	r8, r3
   83eaa:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83eae:	3308      	adds	r3, #8
   83eb0:	2e00      	cmp	r6, #0
   83eb2:	d0f7      	beq.n	83ea4 <__sfvwrite_r+0x174>
   83eb4:	4632      	mov	r2, r6
   83eb6:	210a      	movs	r1, #10
   83eb8:	4628      	mov	r0, r5
   83eba:	f000 fc29 	bl	84710 <memchr>
   83ebe:	2800      	cmp	r0, #0
   83ec0:	f000 80a1 	beq.w	84006 <__sfvwrite_r+0x2d6>
   83ec4:	3001      	adds	r0, #1
   83ec6:	eba0 0905 	sub.w	r9, r0, r5
   83eca:	e7c0      	b.n	83e4e <__sfvwrite_r+0x11e>
   83ecc:	6820      	ldr	r0, [r4, #0]
   83ece:	6923      	ldr	r3, [r4, #16]
   83ed0:	4298      	cmp	r0, r3
   83ed2:	d802      	bhi.n	83eda <__sfvwrite_r+0x1aa>
   83ed4:	6963      	ldr	r3, [r4, #20]
   83ed6:	429f      	cmp	r7, r3
   83ed8:	d25d      	bcs.n	83f96 <__sfvwrite_r+0x266>
   83eda:	45b8      	cmp	r8, r7
   83edc:	bf28      	it	cs
   83ede:	46b8      	movcs	r8, r7
   83ee0:	4649      	mov	r1, r9
   83ee2:	4642      	mov	r2, r8
   83ee4:	f000 fc5a 	bl	8479c <memmove>
   83ee8:	68a3      	ldr	r3, [r4, #8]
   83eea:	6822      	ldr	r2, [r4, #0]
   83eec:	eba3 0308 	sub.w	r3, r3, r8
   83ef0:	4442      	add	r2, r8
   83ef2:	60a3      	str	r3, [r4, #8]
   83ef4:	6022      	str	r2, [r4, #0]
   83ef6:	b10b      	cbz	r3, 83efc <__sfvwrite_r+0x1cc>
   83ef8:	46c2      	mov	sl, r8
   83efa:	e777      	b.n	83dec <__sfvwrite_r+0xbc>
   83efc:	4621      	mov	r1, r4
   83efe:	9800      	ldr	r0, [sp, #0]
   83f00:	f7ff fcb2 	bl	83868 <_fflush_r>
   83f04:	2800      	cmp	r0, #0
   83f06:	d18f      	bne.n	83e28 <__sfvwrite_r+0xf8>
   83f08:	46c2      	mov	sl, r8
   83f0a:	e76f      	b.n	83dec <__sfvwrite_r+0xbc>
   83f0c:	465a      	mov	r2, fp
   83f0e:	4629      	mov	r1, r5
   83f10:	f000 fc44 	bl	8479c <memmove>
   83f14:	68a2      	ldr	r2, [r4, #8]
   83f16:	6823      	ldr	r3, [r4, #0]
   83f18:	eba2 020b 	sub.w	r2, r2, fp
   83f1c:	445b      	add	r3, fp
   83f1e:	60a2      	str	r2, [r4, #8]
   83f20:	6023      	str	r3, [r4, #0]
   83f22:	e7ad      	b.n	83e80 <__sfvwrite_r+0x150>
   83f24:	46b8      	mov	r8, r7
   83f26:	46ba      	mov	sl, r7
   83f28:	46bb      	mov	fp, r7
   83f2a:	6820      	ldr	r0, [r4, #0]
   83f2c:	e753      	b.n	83dd6 <__sfvwrite_r+0xa6>
   83f2e:	6962      	ldr	r2, [r4, #20]
   83f30:	6820      	ldr	r0, [r4, #0]
   83f32:	6921      	ldr	r1, [r4, #16]
   83f34:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83f38:	eba0 0a01 	sub.w	sl, r0, r1
   83f3c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83f40:	f10a 0001 	add.w	r0, sl, #1
   83f44:	ea4f 0868 	mov.w	r8, r8, asr #1
   83f48:	4438      	add	r0, r7
   83f4a:	4540      	cmp	r0, r8
   83f4c:	4642      	mov	r2, r8
   83f4e:	bf84      	itt	hi
   83f50:	4680      	movhi	r8, r0
   83f52:	4642      	movhi	r2, r8
   83f54:	055b      	lsls	r3, r3, #21
   83f56:	d544      	bpl.n	83fe2 <__sfvwrite_r+0x2b2>
   83f58:	4611      	mov	r1, r2
   83f5a:	9800      	ldr	r0, [sp, #0]
   83f5c:	f000 f920 	bl	841a0 <_malloc_r>
   83f60:	4683      	mov	fp, r0
   83f62:	2800      	cmp	r0, #0
   83f64:	d055      	beq.n	84012 <__sfvwrite_r+0x2e2>
   83f66:	4652      	mov	r2, sl
   83f68:	6921      	ldr	r1, [r4, #16]
   83f6a:	f7fe fab1 	bl	824d0 <memcpy>
   83f6e:	89a3      	ldrh	r3, [r4, #12]
   83f70:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83f78:	81a3      	strh	r3, [r4, #12]
   83f7a:	eb0b 000a 	add.w	r0, fp, sl
   83f7e:	eba8 030a 	sub.w	r3, r8, sl
   83f82:	f8c4 b010 	str.w	fp, [r4, #16]
   83f86:	f8c4 8014 	str.w	r8, [r4, #20]
   83f8a:	6020      	str	r0, [r4, #0]
   83f8c:	60a3      	str	r3, [r4, #8]
   83f8e:	46b8      	mov	r8, r7
   83f90:	46ba      	mov	sl, r7
   83f92:	46bb      	mov	fp, r7
   83f94:	e71f      	b.n	83dd6 <__sfvwrite_r+0xa6>
   83f96:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83f9a:	42ba      	cmp	r2, r7
   83f9c:	bf28      	it	cs
   83f9e:	463a      	movcs	r2, r7
   83fa0:	fb92 f2f3 	sdiv	r2, r2, r3
   83fa4:	69e1      	ldr	r1, [r4, #28]
   83fa6:	fb03 f302 	mul.w	r3, r3, r2
   83faa:	9800      	ldr	r0, [sp, #0]
   83fac:	464a      	mov	r2, r9
   83fae:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83fb0:	47b0      	blx	r6
   83fb2:	f1b0 0a00 	subs.w	sl, r0, #0
   83fb6:	f73f af19 	bgt.w	83dec <__sfvwrite_r+0xbc>
   83fba:	e735      	b.n	83e28 <__sfvwrite_r+0xf8>
   83fbc:	461a      	mov	r2, r3
   83fbe:	4629      	mov	r1, r5
   83fc0:	9301      	str	r3, [sp, #4]
   83fc2:	f000 fbeb 	bl	8479c <memmove>
   83fc6:	6822      	ldr	r2, [r4, #0]
   83fc8:	9b01      	ldr	r3, [sp, #4]
   83fca:	4621      	mov	r1, r4
   83fcc:	441a      	add	r2, r3
   83fce:	6022      	str	r2, [r4, #0]
   83fd0:	9800      	ldr	r0, [sp, #0]
   83fd2:	f7ff fc49 	bl	83868 <_fflush_r>
   83fd6:	9b01      	ldr	r3, [sp, #4]
   83fd8:	2800      	cmp	r0, #0
   83fda:	f47f af25 	bne.w	83e28 <__sfvwrite_r+0xf8>
   83fde:	461f      	mov	r7, r3
   83fe0:	e74e      	b.n	83e80 <__sfvwrite_r+0x150>
   83fe2:	9800      	ldr	r0, [sp, #0]
   83fe4:	f000 fc4a 	bl	8487c <_realloc_r>
   83fe8:	4683      	mov	fp, r0
   83fea:	2800      	cmp	r0, #0
   83fec:	d1c5      	bne.n	83f7a <__sfvwrite_r+0x24a>
   83fee:	9d00      	ldr	r5, [sp, #0]
   83ff0:	6921      	ldr	r1, [r4, #16]
   83ff2:	4628      	mov	r0, r5
   83ff4:	f7ff fdb6 	bl	83b64 <_free_r>
   83ff8:	220c      	movs	r2, #12
   83ffa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ffe:	602a      	str	r2, [r5, #0]
   84000:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84004:	e712      	b.n	83e2c <__sfvwrite_r+0xfc>
   84006:	f106 0901 	add.w	r9, r6, #1
   8400a:	e720      	b.n	83e4e <__sfvwrite_r+0x11e>
   8400c:	f04f 30ff 	mov.w	r0, #4294967295
   84010:	e6bd      	b.n	83d8e <__sfvwrite_r+0x5e>
   84012:	220c      	movs	r2, #12
   84014:	9900      	ldr	r1, [sp, #0]
   84016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8401a:	600a      	str	r2, [r1, #0]
   8401c:	e706      	b.n	83e2c <__sfvwrite_r+0xfc>
   8401e:	bf00      	nop
   84020:	7ffffc00 	.word	0x7ffffc00

00084024 <_fwalk_reent>:
   84024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84028:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8402c:	d01e      	beq.n	8406c <_fwalk_reent+0x48>
   8402e:	4688      	mov	r8, r1
   84030:	4607      	mov	r7, r0
   84032:	f04f 0900 	mov.w	r9, #0
   84036:	6875      	ldr	r5, [r6, #4]
   84038:	68b4      	ldr	r4, [r6, #8]
   8403a:	3d01      	subs	r5, #1
   8403c:	d410      	bmi.n	84060 <_fwalk_reent+0x3c>
   8403e:	89a3      	ldrh	r3, [r4, #12]
   84040:	3d01      	subs	r5, #1
   84042:	2b01      	cmp	r3, #1
   84044:	d908      	bls.n	84058 <_fwalk_reent+0x34>
   84046:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8404a:	3301      	adds	r3, #1
   8404c:	d004      	beq.n	84058 <_fwalk_reent+0x34>
   8404e:	4621      	mov	r1, r4
   84050:	4638      	mov	r0, r7
   84052:	47c0      	blx	r8
   84054:	ea49 0900 	orr.w	r9, r9, r0
   84058:	1c6b      	adds	r3, r5, #1
   8405a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8405e:	d1ee      	bne.n	8403e <_fwalk_reent+0x1a>
   84060:	6836      	ldr	r6, [r6, #0]
   84062:	2e00      	cmp	r6, #0
   84064:	d1e7      	bne.n	84036 <_fwalk_reent+0x12>
   84066:	4648      	mov	r0, r9
   84068:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8406c:	46b1      	mov	r9, r6
   8406e:	4648      	mov	r0, r9
   84070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084074 <__locale_mb_cur_max>:
   84074:	4b04      	ldr	r3, [pc, #16]	; (84088 <__locale_mb_cur_max+0x14>)
   84076:	4a05      	ldr	r2, [pc, #20]	; (8408c <__locale_mb_cur_max+0x18>)
   84078:	681b      	ldr	r3, [r3, #0]
   8407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8407c:	2b00      	cmp	r3, #0
   8407e:	bf08      	it	eq
   84080:	4613      	moveq	r3, r2
   84082:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   84086:	4770      	bx	lr
   84088:	2007013c 	.word	0x2007013c
   8408c:	2007056c 	.word	0x2007056c

00084090 <__retarget_lock_init_recursive>:
   84090:	4770      	bx	lr
   84092:	bf00      	nop

00084094 <__retarget_lock_close_recursive>:
   84094:	4770      	bx	lr
   84096:	bf00      	nop

00084098 <__retarget_lock_acquire_recursive>:
   84098:	4770      	bx	lr
   8409a:	bf00      	nop

0008409c <__retarget_lock_release_recursive>:
   8409c:	4770      	bx	lr
   8409e:	bf00      	nop

000840a0 <__swhatbuf_r>:
   840a0:	b570      	push	{r4, r5, r6, lr}
   840a2:	460c      	mov	r4, r1
   840a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   840a8:	b090      	sub	sp, #64	; 0x40
   840aa:	2900      	cmp	r1, #0
   840ac:	4615      	mov	r5, r2
   840ae:	461e      	mov	r6, r3
   840b0:	db14      	blt.n	840dc <__swhatbuf_r+0x3c>
   840b2:	aa01      	add	r2, sp, #4
   840b4:	f000 ff68 	bl	84f88 <_fstat_r>
   840b8:	2800      	cmp	r0, #0
   840ba:	db0f      	blt.n	840dc <__swhatbuf_r+0x3c>
   840bc:	9a02      	ldr	r2, [sp, #8]
   840be:	f44f 6380 	mov.w	r3, #1024	; 0x400
   840c2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   840c6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   840ca:	fab2 f282 	clz	r2, r2
   840ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
   840d2:	0952      	lsrs	r2, r2, #5
   840d4:	6032      	str	r2, [r6, #0]
   840d6:	602b      	str	r3, [r5, #0]
   840d8:	b010      	add	sp, #64	; 0x40
   840da:	bd70      	pop	{r4, r5, r6, pc}
   840dc:	2300      	movs	r3, #0
   840de:	89a2      	ldrh	r2, [r4, #12]
   840e0:	6033      	str	r3, [r6, #0]
   840e2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   840e6:	d004      	beq.n	840f2 <__swhatbuf_r+0x52>
   840e8:	2240      	movs	r2, #64	; 0x40
   840ea:	4618      	mov	r0, r3
   840ec:	602a      	str	r2, [r5, #0]
   840ee:	b010      	add	sp, #64	; 0x40
   840f0:	bd70      	pop	{r4, r5, r6, pc}
   840f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
   840f6:	602b      	str	r3, [r5, #0]
   840f8:	b010      	add	sp, #64	; 0x40
   840fa:	bd70      	pop	{r4, r5, r6, pc}

000840fc <__smakebuf_r>:
   840fc:	898a      	ldrh	r2, [r1, #12]
   840fe:	460b      	mov	r3, r1
   84100:	0792      	lsls	r2, r2, #30
   84102:	d506      	bpl.n	84112 <__smakebuf_r+0x16>
   84104:	2101      	movs	r1, #1
   84106:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8410a:	6159      	str	r1, [r3, #20]
   8410c:	601a      	str	r2, [r3, #0]
   8410e:	611a      	str	r2, [r3, #16]
   84110:	4770      	bx	lr
   84112:	b5f0      	push	{r4, r5, r6, r7, lr}
   84114:	b083      	sub	sp, #12
   84116:	ab01      	add	r3, sp, #4
   84118:	466a      	mov	r2, sp
   8411a:	460c      	mov	r4, r1
   8411c:	4606      	mov	r6, r0
   8411e:	f7ff ffbf 	bl	840a0 <__swhatbuf_r>
   84122:	9900      	ldr	r1, [sp, #0]
   84124:	4605      	mov	r5, r0
   84126:	4630      	mov	r0, r6
   84128:	f000 f83a 	bl	841a0 <_malloc_r>
   8412c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84130:	b1d8      	cbz	r0, 8416a <__smakebuf_r+0x6e>
   84132:	e89d 0006 	ldmia.w	sp, {r1, r2}
   84136:	4f15      	ldr	r7, [pc, #84]	; (8418c <__smakebuf_r+0x90>)
   84138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8413c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8413e:	81a3      	strh	r3, [r4, #12]
   84140:	6020      	str	r0, [r4, #0]
   84142:	6120      	str	r0, [r4, #16]
   84144:	6161      	str	r1, [r4, #20]
   84146:	b91a      	cbnz	r2, 84150 <__smakebuf_r+0x54>
   84148:	432b      	orrs	r3, r5
   8414a:	81a3      	strh	r3, [r4, #12]
   8414c:	b003      	add	sp, #12
   8414e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84150:	4630      	mov	r0, r6
   84152:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84156:	f000 ff2b 	bl	84fb0 <_isatty_r>
   8415a:	b1a0      	cbz	r0, 84186 <__smakebuf_r+0x8a>
   8415c:	89a3      	ldrh	r3, [r4, #12]
   8415e:	f023 0303 	bic.w	r3, r3, #3
   84162:	f043 0301 	orr.w	r3, r3, #1
   84166:	b21b      	sxth	r3, r3
   84168:	e7ee      	b.n	84148 <__smakebuf_r+0x4c>
   8416a:	059a      	lsls	r2, r3, #22
   8416c:	d4ee      	bmi.n	8414c <__smakebuf_r+0x50>
   8416e:	2101      	movs	r1, #1
   84170:	f023 0303 	bic.w	r3, r3, #3
   84174:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84178:	f043 0302 	orr.w	r3, r3, #2
   8417c:	81a3      	strh	r3, [r4, #12]
   8417e:	6161      	str	r1, [r4, #20]
   84180:	6022      	str	r2, [r4, #0]
   84182:	6122      	str	r2, [r4, #16]
   84184:	e7e2      	b.n	8414c <__smakebuf_r+0x50>
   84186:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8418a:	e7dd      	b.n	84148 <__smakebuf_r+0x4c>
   8418c:	000838bd 	.word	0x000838bd

00084190 <malloc>:
   84190:	4b02      	ldr	r3, [pc, #8]	; (8419c <malloc+0xc>)
   84192:	4601      	mov	r1, r0
   84194:	6818      	ldr	r0, [r3, #0]
   84196:	f000 b803 	b.w	841a0 <_malloc_r>
   8419a:	bf00      	nop
   8419c:	2007013c 	.word	0x2007013c

000841a0 <_malloc_r>:
   841a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   841a4:	f101 060b 	add.w	r6, r1, #11
   841a8:	2e16      	cmp	r6, #22
   841aa:	b083      	sub	sp, #12
   841ac:	4605      	mov	r5, r0
   841ae:	f240 809e 	bls.w	842ee <_malloc_r+0x14e>
   841b2:	f036 0607 	bics.w	r6, r6, #7
   841b6:	f100 80bd 	bmi.w	84334 <_malloc_r+0x194>
   841ba:	42b1      	cmp	r1, r6
   841bc:	f200 80ba 	bhi.w	84334 <_malloc_r+0x194>
   841c0:	f000 fb50 	bl	84864 <__malloc_lock>
   841c4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   841c8:	f0c0 8285 	bcc.w	846d6 <_malloc_r+0x536>
   841cc:	0a73      	lsrs	r3, r6, #9
   841ce:	f000 80b8 	beq.w	84342 <_malloc_r+0x1a2>
   841d2:	2b04      	cmp	r3, #4
   841d4:	f200 816c 	bhi.w	844b0 <_malloc_r+0x310>
   841d8:	09b3      	lsrs	r3, r6, #6
   841da:	f103 0039 	add.w	r0, r3, #57	; 0x39
   841de:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   841e2:	00c1      	lsls	r1, r0, #3
   841e4:	4fb8      	ldr	r7, [pc, #736]	; (844c8 <_malloc_r+0x328>)
   841e6:	4439      	add	r1, r7
   841e8:	684c      	ldr	r4, [r1, #4]
   841ea:	3908      	subs	r1, #8
   841ec:	42a1      	cmp	r1, r4
   841ee:	d106      	bne.n	841fe <_malloc_r+0x5e>
   841f0:	e00c      	b.n	8420c <_malloc_r+0x6c>
   841f2:	2a00      	cmp	r2, #0
   841f4:	f280 80ab 	bge.w	8434e <_malloc_r+0x1ae>
   841f8:	68e4      	ldr	r4, [r4, #12]
   841fa:	42a1      	cmp	r1, r4
   841fc:	d006      	beq.n	8420c <_malloc_r+0x6c>
   841fe:	6863      	ldr	r3, [r4, #4]
   84200:	f023 0303 	bic.w	r3, r3, #3
   84204:	1b9a      	subs	r2, r3, r6
   84206:	2a0f      	cmp	r2, #15
   84208:	ddf3      	ble.n	841f2 <_malloc_r+0x52>
   8420a:	4670      	mov	r0, lr
   8420c:	693c      	ldr	r4, [r7, #16]
   8420e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 844dc <_malloc_r+0x33c>
   84212:	4574      	cmp	r4, lr
   84214:	f000 819e 	beq.w	84554 <_malloc_r+0x3b4>
   84218:	6863      	ldr	r3, [r4, #4]
   8421a:	f023 0303 	bic.w	r3, r3, #3
   8421e:	1b9a      	subs	r2, r3, r6
   84220:	2a0f      	cmp	r2, #15
   84222:	f300 8183 	bgt.w	8452c <_malloc_r+0x38c>
   84226:	2a00      	cmp	r2, #0
   84228:	f8c7 e014 	str.w	lr, [r7, #20]
   8422c:	f8c7 e010 	str.w	lr, [r7, #16]
   84230:	f280 8091 	bge.w	84356 <_malloc_r+0x1b6>
   84234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84238:	f080 8154 	bcs.w	844e4 <_malloc_r+0x344>
   8423c:	2201      	movs	r2, #1
   8423e:	08db      	lsrs	r3, r3, #3
   84240:	6879      	ldr	r1, [r7, #4]
   84242:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84246:	4413      	add	r3, r2
   84248:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8424c:	fa02 f20c 	lsl.w	r2, r2, ip
   84250:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   84254:	430a      	orrs	r2, r1
   84256:	f1ac 0108 	sub.w	r1, ip, #8
   8425a:	60e1      	str	r1, [r4, #12]
   8425c:	f8c4 8008 	str.w	r8, [r4, #8]
   84260:	607a      	str	r2, [r7, #4]
   84262:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   84266:	f8c8 400c 	str.w	r4, [r8, #12]
   8426a:	2401      	movs	r4, #1
   8426c:	1083      	asrs	r3, r0, #2
   8426e:	409c      	lsls	r4, r3
   84270:	4294      	cmp	r4, r2
   84272:	d87d      	bhi.n	84370 <_malloc_r+0x1d0>
   84274:	4214      	tst	r4, r2
   84276:	d106      	bne.n	84286 <_malloc_r+0xe6>
   84278:	f020 0003 	bic.w	r0, r0, #3
   8427c:	0064      	lsls	r4, r4, #1
   8427e:	4214      	tst	r4, r2
   84280:	f100 0004 	add.w	r0, r0, #4
   84284:	d0fa      	beq.n	8427c <_malloc_r+0xdc>
   84286:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8428a:	46cc      	mov	ip, r9
   8428c:	4680      	mov	r8, r0
   8428e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84292:	459c      	cmp	ip, r3
   84294:	d107      	bne.n	842a6 <_malloc_r+0x106>
   84296:	e15f      	b.n	84558 <_malloc_r+0x3b8>
   84298:	2a00      	cmp	r2, #0
   8429a:	f280 816d 	bge.w	84578 <_malloc_r+0x3d8>
   8429e:	68db      	ldr	r3, [r3, #12]
   842a0:	459c      	cmp	ip, r3
   842a2:	f000 8159 	beq.w	84558 <_malloc_r+0x3b8>
   842a6:	6859      	ldr	r1, [r3, #4]
   842a8:	f021 0103 	bic.w	r1, r1, #3
   842ac:	1b8a      	subs	r2, r1, r6
   842ae:	2a0f      	cmp	r2, #15
   842b0:	ddf2      	ble.n	84298 <_malloc_r+0xf8>
   842b2:	68dc      	ldr	r4, [r3, #12]
   842b4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   842b8:	f046 0801 	orr.w	r8, r6, #1
   842bc:	4628      	mov	r0, r5
   842be:	441e      	add	r6, r3
   842c0:	f042 0501 	orr.w	r5, r2, #1
   842c4:	f8c3 8004 	str.w	r8, [r3, #4]
   842c8:	f8cc 400c 	str.w	r4, [ip, #12]
   842cc:	f8c4 c008 	str.w	ip, [r4, #8]
   842d0:	617e      	str	r6, [r7, #20]
   842d2:	613e      	str	r6, [r7, #16]
   842d4:	f8c6 e00c 	str.w	lr, [r6, #12]
   842d8:	f8c6 e008 	str.w	lr, [r6, #8]
   842dc:	6075      	str	r5, [r6, #4]
   842de:	505a      	str	r2, [r3, r1]
   842e0:	9300      	str	r3, [sp, #0]
   842e2:	f000 fac5 	bl	84870 <__malloc_unlock>
   842e6:	9b00      	ldr	r3, [sp, #0]
   842e8:	f103 0408 	add.w	r4, r3, #8
   842ec:	e01e      	b.n	8432c <_malloc_r+0x18c>
   842ee:	2910      	cmp	r1, #16
   842f0:	d820      	bhi.n	84334 <_malloc_r+0x194>
   842f2:	f000 fab7 	bl	84864 <__malloc_lock>
   842f6:	2610      	movs	r6, #16
   842f8:	2318      	movs	r3, #24
   842fa:	2002      	movs	r0, #2
   842fc:	4f72      	ldr	r7, [pc, #456]	; (844c8 <_malloc_r+0x328>)
   842fe:	443b      	add	r3, r7
   84300:	685c      	ldr	r4, [r3, #4]
   84302:	f1a3 0208 	sub.w	r2, r3, #8
   84306:	4294      	cmp	r4, r2
   84308:	f000 812f 	beq.w	8456a <_malloc_r+0x3ca>
   8430c:	6863      	ldr	r3, [r4, #4]
   8430e:	68e1      	ldr	r1, [r4, #12]
   84310:	f023 0303 	bic.w	r3, r3, #3
   84314:	4423      	add	r3, r4
   84316:	685a      	ldr	r2, [r3, #4]
   84318:	68a6      	ldr	r6, [r4, #8]
   8431a:	f042 0201 	orr.w	r2, r2, #1
   8431e:	60f1      	str	r1, [r6, #12]
   84320:	4628      	mov	r0, r5
   84322:	608e      	str	r6, [r1, #8]
   84324:	605a      	str	r2, [r3, #4]
   84326:	f000 faa3 	bl	84870 <__malloc_unlock>
   8432a:	3408      	adds	r4, #8
   8432c:	4620      	mov	r0, r4
   8432e:	b003      	add	sp, #12
   84330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84334:	2400      	movs	r4, #0
   84336:	230c      	movs	r3, #12
   84338:	4620      	mov	r0, r4
   8433a:	602b      	str	r3, [r5, #0]
   8433c:	b003      	add	sp, #12
   8433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84342:	2040      	movs	r0, #64	; 0x40
   84344:	f44f 7100 	mov.w	r1, #512	; 0x200
   84348:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8434c:	e74a      	b.n	841e4 <_malloc_r+0x44>
   8434e:	4423      	add	r3, r4
   84350:	685a      	ldr	r2, [r3, #4]
   84352:	68e1      	ldr	r1, [r4, #12]
   84354:	e7e0      	b.n	84318 <_malloc_r+0x178>
   84356:	4423      	add	r3, r4
   84358:	685a      	ldr	r2, [r3, #4]
   8435a:	4628      	mov	r0, r5
   8435c:	f042 0201 	orr.w	r2, r2, #1
   84360:	605a      	str	r2, [r3, #4]
   84362:	3408      	adds	r4, #8
   84364:	f000 fa84 	bl	84870 <__malloc_unlock>
   84368:	4620      	mov	r0, r4
   8436a:	b003      	add	sp, #12
   8436c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84370:	68bc      	ldr	r4, [r7, #8]
   84372:	6863      	ldr	r3, [r4, #4]
   84374:	f023 0803 	bic.w	r8, r3, #3
   84378:	45b0      	cmp	r8, r6
   8437a:	d304      	bcc.n	84386 <_malloc_r+0x1e6>
   8437c:	eba8 0306 	sub.w	r3, r8, r6
   84380:	2b0f      	cmp	r3, #15
   84382:	f300 8085 	bgt.w	84490 <_malloc_r+0x2f0>
   84386:	f8df 9158 	ldr.w	r9, [pc, #344]	; 844e0 <_malloc_r+0x340>
   8438a:	4b50      	ldr	r3, [pc, #320]	; (844cc <_malloc_r+0x32c>)
   8438c:	f8d9 2000 	ldr.w	r2, [r9]
   84390:	681b      	ldr	r3, [r3, #0]
   84392:	3201      	adds	r2, #1
   84394:	4433      	add	r3, r6
   84396:	eb04 0a08 	add.w	sl, r4, r8
   8439a:	f000 8154 	beq.w	84646 <_malloc_r+0x4a6>
   8439e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   843a2:	330f      	adds	r3, #15
   843a4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   843a8:	f02b 0b0f 	bic.w	fp, fp, #15
   843ac:	4659      	mov	r1, fp
   843ae:	4628      	mov	r0, r5
   843b0:	f000 fc1a 	bl	84be8 <_sbrk_r>
   843b4:	1c41      	adds	r1, r0, #1
   843b6:	4602      	mov	r2, r0
   843b8:	f000 80fb 	beq.w	845b2 <_malloc_r+0x412>
   843bc:	4582      	cmp	sl, r0
   843be:	f200 80f6 	bhi.w	845ae <_malloc_r+0x40e>
   843c2:	4b43      	ldr	r3, [pc, #268]	; (844d0 <_malloc_r+0x330>)
   843c4:	6819      	ldr	r1, [r3, #0]
   843c6:	4459      	add	r1, fp
   843c8:	6019      	str	r1, [r3, #0]
   843ca:	f000 814c 	beq.w	84666 <_malloc_r+0x4c6>
   843ce:	f8d9 0000 	ldr.w	r0, [r9]
   843d2:	3001      	adds	r0, #1
   843d4:	bf1b      	ittet	ne
   843d6:	eba2 0a0a 	subne.w	sl, r2, sl
   843da:	4451      	addne	r1, sl
   843dc:	f8c9 2000 	streq.w	r2, [r9]
   843e0:	6019      	strne	r1, [r3, #0]
   843e2:	f012 0107 	ands.w	r1, r2, #7
   843e6:	f000 8114 	beq.w	84612 <_malloc_r+0x472>
   843ea:	f1c1 0008 	rsb	r0, r1, #8
   843ee:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   843f2:	4402      	add	r2, r0
   843f4:	3108      	adds	r1, #8
   843f6:	eb02 090b 	add.w	r9, r2, fp
   843fa:	f3c9 090b 	ubfx	r9, r9, #0, #12
   843fe:	eba1 0909 	sub.w	r9, r1, r9
   84402:	4649      	mov	r1, r9
   84404:	4628      	mov	r0, r5
   84406:	9301      	str	r3, [sp, #4]
   84408:	9200      	str	r2, [sp, #0]
   8440a:	f000 fbed 	bl	84be8 <_sbrk_r>
   8440e:	1c43      	adds	r3, r0, #1
   84410:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84414:	f000 8142 	beq.w	8469c <_malloc_r+0x4fc>
   84418:	1a80      	subs	r0, r0, r2
   8441a:	4448      	add	r0, r9
   8441c:	f040 0001 	orr.w	r0, r0, #1
   84420:	6819      	ldr	r1, [r3, #0]
   84422:	42bc      	cmp	r4, r7
   84424:	4449      	add	r1, r9
   84426:	60ba      	str	r2, [r7, #8]
   84428:	6019      	str	r1, [r3, #0]
   8442a:	6050      	str	r0, [r2, #4]
   8442c:	d017      	beq.n	8445e <_malloc_r+0x2be>
   8442e:	f1b8 0f0f 	cmp.w	r8, #15
   84432:	f240 80fa 	bls.w	8462a <_malloc_r+0x48a>
   84436:	f04f 0c05 	mov.w	ip, #5
   8443a:	6862      	ldr	r2, [r4, #4]
   8443c:	f1a8 000c 	sub.w	r0, r8, #12
   84440:	f020 0007 	bic.w	r0, r0, #7
   84444:	f002 0201 	and.w	r2, r2, #1
   84448:	eb04 0e00 	add.w	lr, r4, r0
   8444c:	4302      	orrs	r2, r0
   8444e:	280f      	cmp	r0, #15
   84450:	6062      	str	r2, [r4, #4]
   84452:	f8ce c004 	str.w	ip, [lr, #4]
   84456:	f8ce c008 	str.w	ip, [lr, #8]
   8445a:	f200 8116 	bhi.w	8468a <_malloc_r+0x4ea>
   8445e:	4b1d      	ldr	r3, [pc, #116]	; (844d4 <_malloc_r+0x334>)
   84460:	68bc      	ldr	r4, [r7, #8]
   84462:	681a      	ldr	r2, [r3, #0]
   84464:	4291      	cmp	r1, r2
   84466:	bf88      	it	hi
   84468:	6019      	strhi	r1, [r3, #0]
   8446a:	4b1b      	ldr	r3, [pc, #108]	; (844d8 <_malloc_r+0x338>)
   8446c:	681a      	ldr	r2, [r3, #0]
   8446e:	4291      	cmp	r1, r2
   84470:	6862      	ldr	r2, [r4, #4]
   84472:	bf88      	it	hi
   84474:	6019      	strhi	r1, [r3, #0]
   84476:	f022 0203 	bic.w	r2, r2, #3
   8447a:	4296      	cmp	r6, r2
   8447c:	eba2 0306 	sub.w	r3, r2, r6
   84480:	d801      	bhi.n	84486 <_malloc_r+0x2e6>
   84482:	2b0f      	cmp	r3, #15
   84484:	dc04      	bgt.n	84490 <_malloc_r+0x2f0>
   84486:	4628      	mov	r0, r5
   84488:	f000 f9f2 	bl	84870 <__malloc_unlock>
   8448c:	2400      	movs	r4, #0
   8448e:	e74d      	b.n	8432c <_malloc_r+0x18c>
   84490:	f046 0201 	orr.w	r2, r6, #1
   84494:	f043 0301 	orr.w	r3, r3, #1
   84498:	4426      	add	r6, r4
   8449a:	6062      	str	r2, [r4, #4]
   8449c:	4628      	mov	r0, r5
   8449e:	60be      	str	r6, [r7, #8]
   844a0:	3408      	adds	r4, #8
   844a2:	6073      	str	r3, [r6, #4]
   844a4:	f000 f9e4 	bl	84870 <__malloc_unlock>
   844a8:	4620      	mov	r0, r4
   844aa:	b003      	add	sp, #12
   844ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844b0:	2b14      	cmp	r3, #20
   844b2:	d970      	bls.n	84596 <_malloc_r+0x3f6>
   844b4:	2b54      	cmp	r3, #84	; 0x54
   844b6:	f200 80a2 	bhi.w	845fe <_malloc_r+0x45e>
   844ba:	0b33      	lsrs	r3, r6, #12
   844bc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   844c0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   844c4:	00c1      	lsls	r1, r0, #3
   844c6:	e68d      	b.n	841e4 <_malloc_r+0x44>
   844c8:	200706d8 	.word	0x200706d8
   844cc:	2007acf0 	.word	0x2007acf0
   844d0:	2007acc0 	.word	0x2007acc0
   844d4:	2007ace8 	.word	0x2007ace8
   844d8:	2007acec 	.word	0x2007acec
   844dc:	200706e0 	.word	0x200706e0
   844e0:	20070ae0 	.word	0x20070ae0
   844e4:	0a5a      	lsrs	r2, r3, #9
   844e6:	2a04      	cmp	r2, #4
   844e8:	d95b      	bls.n	845a2 <_malloc_r+0x402>
   844ea:	2a14      	cmp	r2, #20
   844ec:	f200 80ae 	bhi.w	8464c <_malloc_r+0x4ac>
   844f0:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   844f4:	00c9      	lsls	r1, r1, #3
   844f6:	325b      	adds	r2, #91	; 0x5b
   844f8:	eb07 0c01 	add.w	ip, r7, r1
   844fc:	5879      	ldr	r1, [r7, r1]
   844fe:	f1ac 0c08 	sub.w	ip, ip, #8
   84502:	458c      	cmp	ip, r1
   84504:	f000 8088 	beq.w	84618 <_malloc_r+0x478>
   84508:	684a      	ldr	r2, [r1, #4]
   8450a:	f022 0203 	bic.w	r2, r2, #3
   8450e:	4293      	cmp	r3, r2
   84510:	d273      	bcs.n	845fa <_malloc_r+0x45a>
   84512:	6889      	ldr	r1, [r1, #8]
   84514:	458c      	cmp	ip, r1
   84516:	d1f7      	bne.n	84508 <_malloc_r+0x368>
   84518:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8451c:	687a      	ldr	r2, [r7, #4]
   8451e:	60e3      	str	r3, [r4, #12]
   84520:	f8c4 c008 	str.w	ip, [r4, #8]
   84524:	609c      	str	r4, [r3, #8]
   84526:	f8cc 400c 	str.w	r4, [ip, #12]
   8452a:	e69e      	b.n	8426a <_malloc_r+0xca>
   8452c:	f046 0c01 	orr.w	ip, r6, #1
   84530:	f042 0101 	orr.w	r1, r2, #1
   84534:	4426      	add	r6, r4
   84536:	f8c4 c004 	str.w	ip, [r4, #4]
   8453a:	4628      	mov	r0, r5
   8453c:	617e      	str	r6, [r7, #20]
   8453e:	613e      	str	r6, [r7, #16]
   84540:	f8c6 e00c 	str.w	lr, [r6, #12]
   84544:	f8c6 e008 	str.w	lr, [r6, #8]
   84548:	6071      	str	r1, [r6, #4]
   8454a:	50e2      	str	r2, [r4, r3]
   8454c:	f000 f990 	bl	84870 <__malloc_unlock>
   84550:	3408      	adds	r4, #8
   84552:	e6eb      	b.n	8432c <_malloc_r+0x18c>
   84554:	687a      	ldr	r2, [r7, #4]
   84556:	e688      	b.n	8426a <_malloc_r+0xca>
   84558:	f108 0801 	add.w	r8, r8, #1
   8455c:	f018 0f03 	tst.w	r8, #3
   84560:	f10c 0c08 	add.w	ip, ip, #8
   84564:	f47f ae93 	bne.w	8428e <_malloc_r+0xee>
   84568:	e02d      	b.n	845c6 <_malloc_r+0x426>
   8456a:	68dc      	ldr	r4, [r3, #12]
   8456c:	42a3      	cmp	r3, r4
   8456e:	bf08      	it	eq
   84570:	3002      	addeq	r0, #2
   84572:	f43f ae4b 	beq.w	8420c <_malloc_r+0x6c>
   84576:	e6c9      	b.n	8430c <_malloc_r+0x16c>
   84578:	461c      	mov	r4, r3
   8457a:	4419      	add	r1, r3
   8457c:	684a      	ldr	r2, [r1, #4]
   8457e:	68db      	ldr	r3, [r3, #12]
   84580:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84584:	f042 0201 	orr.w	r2, r2, #1
   84588:	604a      	str	r2, [r1, #4]
   8458a:	4628      	mov	r0, r5
   8458c:	60f3      	str	r3, [r6, #12]
   8458e:	609e      	str	r6, [r3, #8]
   84590:	f000 f96e 	bl	84870 <__malloc_unlock>
   84594:	e6ca      	b.n	8432c <_malloc_r+0x18c>
   84596:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8459a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8459e:	00c1      	lsls	r1, r0, #3
   845a0:	e620      	b.n	841e4 <_malloc_r+0x44>
   845a2:	099a      	lsrs	r2, r3, #6
   845a4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   845a8:	00c9      	lsls	r1, r1, #3
   845aa:	3238      	adds	r2, #56	; 0x38
   845ac:	e7a4      	b.n	844f8 <_malloc_r+0x358>
   845ae:	42bc      	cmp	r4, r7
   845b0:	d054      	beq.n	8465c <_malloc_r+0x4bc>
   845b2:	68bc      	ldr	r4, [r7, #8]
   845b4:	6862      	ldr	r2, [r4, #4]
   845b6:	f022 0203 	bic.w	r2, r2, #3
   845ba:	e75e      	b.n	8447a <_malloc_r+0x2da>
   845bc:	f859 3908 	ldr.w	r3, [r9], #-8
   845c0:	4599      	cmp	r9, r3
   845c2:	f040 8086 	bne.w	846d2 <_malloc_r+0x532>
   845c6:	f010 0f03 	tst.w	r0, #3
   845ca:	f100 30ff 	add.w	r0, r0, #4294967295
   845ce:	d1f5      	bne.n	845bc <_malloc_r+0x41c>
   845d0:	687b      	ldr	r3, [r7, #4]
   845d2:	ea23 0304 	bic.w	r3, r3, r4
   845d6:	607b      	str	r3, [r7, #4]
   845d8:	0064      	lsls	r4, r4, #1
   845da:	429c      	cmp	r4, r3
   845dc:	f63f aec8 	bhi.w	84370 <_malloc_r+0x1d0>
   845e0:	2c00      	cmp	r4, #0
   845e2:	f43f aec5 	beq.w	84370 <_malloc_r+0x1d0>
   845e6:	421c      	tst	r4, r3
   845e8:	4640      	mov	r0, r8
   845ea:	f47f ae4c 	bne.w	84286 <_malloc_r+0xe6>
   845ee:	0064      	lsls	r4, r4, #1
   845f0:	421c      	tst	r4, r3
   845f2:	f100 0004 	add.w	r0, r0, #4
   845f6:	d0fa      	beq.n	845ee <_malloc_r+0x44e>
   845f8:	e645      	b.n	84286 <_malloc_r+0xe6>
   845fa:	468c      	mov	ip, r1
   845fc:	e78c      	b.n	84518 <_malloc_r+0x378>
   845fe:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84602:	d815      	bhi.n	84630 <_malloc_r+0x490>
   84604:	0bf3      	lsrs	r3, r6, #15
   84606:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8460a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8460e:	00c1      	lsls	r1, r0, #3
   84610:	e5e8      	b.n	841e4 <_malloc_r+0x44>
   84612:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84616:	e6ee      	b.n	843f6 <_malloc_r+0x256>
   84618:	2101      	movs	r1, #1
   8461a:	687b      	ldr	r3, [r7, #4]
   8461c:	1092      	asrs	r2, r2, #2
   8461e:	fa01 f202 	lsl.w	r2, r1, r2
   84622:	431a      	orrs	r2, r3
   84624:	607a      	str	r2, [r7, #4]
   84626:	4663      	mov	r3, ip
   84628:	e779      	b.n	8451e <_malloc_r+0x37e>
   8462a:	2301      	movs	r3, #1
   8462c:	6053      	str	r3, [r2, #4]
   8462e:	e72a      	b.n	84486 <_malloc_r+0x2e6>
   84630:	f240 5254 	movw	r2, #1364	; 0x554
   84634:	4293      	cmp	r3, r2
   84636:	d822      	bhi.n	8467e <_malloc_r+0x4de>
   84638:	0cb3      	lsrs	r3, r6, #18
   8463a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8463e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84642:	00c1      	lsls	r1, r0, #3
   84644:	e5ce      	b.n	841e4 <_malloc_r+0x44>
   84646:	f103 0b10 	add.w	fp, r3, #16
   8464a:	e6af      	b.n	843ac <_malloc_r+0x20c>
   8464c:	2a54      	cmp	r2, #84	; 0x54
   8464e:	d829      	bhi.n	846a4 <_malloc_r+0x504>
   84650:	0b1a      	lsrs	r2, r3, #12
   84652:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84656:	00c9      	lsls	r1, r1, #3
   84658:	326e      	adds	r2, #110	; 0x6e
   8465a:	e74d      	b.n	844f8 <_malloc_r+0x358>
   8465c:	4b20      	ldr	r3, [pc, #128]	; (846e0 <_malloc_r+0x540>)
   8465e:	6819      	ldr	r1, [r3, #0]
   84660:	4459      	add	r1, fp
   84662:	6019      	str	r1, [r3, #0]
   84664:	e6b3      	b.n	843ce <_malloc_r+0x22e>
   84666:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8466a:	2800      	cmp	r0, #0
   8466c:	f47f aeaf 	bne.w	843ce <_malloc_r+0x22e>
   84670:	eb08 030b 	add.w	r3, r8, fp
   84674:	68ba      	ldr	r2, [r7, #8]
   84676:	f043 0301 	orr.w	r3, r3, #1
   8467a:	6053      	str	r3, [r2, #4]
   8467c:	e6ef      	b.n	8445e <_malloc_r+0x2be>
   8467e:	207f      	movs	r0, #127	; 0x7f
   84680:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84684:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84688:	e5ac      	b.n	841e4 <_malloc_r+0x44>
   8468a:	f104 0108 	add.w	r1, r4, #8
   8468e:	4628      	mov	r0, r5
   84690:	9300      	str	r3, [sp, #0]
   84692:	f7ff fa67 	bl	83b64 <_free_r>
   84696:	9b00      	ldr	r3, [sp, #0]
   84698:	6819      	ldr	r1, [r3, #0]
   8469a:	e6e0      	b.n	8445e <_malloc_r+0x2be>
   8469c:	2001      	movs	r0, #1
   8469e:	f04f 0900 	mov.w	r9, #0
   846a2:	e6bd      	b.n	84420 <_malloc_r+0x280>
   846a4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   846a8:	d805      	bhi.n	846b6 <_malloc_r+0x516>
   846aa:	0bda      	lsrs	r2, r3, #15
   846ac:	f102 0178 	add.w	r1, r2, #120	; 0x78
   846b0:	00c9      	lsls	r1, r1, #3
   846b2:	3277      	adds	r2, #119	; 0x77
   846b4:	e720      	b.n	844f8 <_malloc_r+0x358>
   846b6:	f240 5154 	movw	r1, #1364	; 0x554
   846ba:	428a      	cmp	r2, r1
   846bc:	d805      	bhi.n	846ca <_malloc_r+0x52a>
   846be:	0c9a      	lsrs	r2, r3, #18
   846c0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   846c4:	00c9      	lsls	r1, r1, #3
   846c6:	327c      	adds	r2, #124	; 0x7c
   846c8:	e716      	b.n	844f8 <_malloc_r+0x358>
   846ca:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   846ce:	227e      	movs	r2, #126	; 0x7e
   846d0:	e712      	b.n	844f8 <_malloc_r+0x358>
   846d2:	687b      	ldr	r3, [r7, #4]
   846d4:	e780      	b.n	845d8 <_malloc_r+0x438>
   846d6:	08f0      	lsrs	r0, r6, #3
   846d8:	f106 0308 	add.w	r3, r6, #8
   846dc:	e60e      	b.n	842fc <_malloc_r+0x15c>
   846de:	bf00      	nop
   846e0:	2007acc0 	.word	0x2007acc0

000846e4 <__ascii_mbtowc>:
   846e4:	b082      	sub	sp, #8
   846e6:	b149      	cbz	r1, 846fc <__ascii_mbtowc+0x18>
   846e8:	b15a      	cbz	r2, 84702 <__ascii_mbtowc+0x1e>
   846ea:	b16b      	cbz	r3, 84708 <__ascii_mbtowc+0x24>
   846ec:	7813      	ldrb	r3, [r2, #0]
   846ee:	600b      	str	r3, [r1, #0]
   846f0:	7812      	ldrb	r2, [r2, #0]
   846f2:	1c10      	adds	r0, r2, #0
   846f4:	bf18      	it	ne
   846f6:	2001      	movne	r0, #1
   846f8:	b002      	add	sp, #8
   846fa:	4770      	bx	lr
   846fc:	a901      	add	r1, sp, #4
   846fe:	2a00      	cmp	r2, #0
   84700:	d1f3      	bne.n	846ea <__ascii_mbtowc+0x6>
   84702:	4610      	mov	r0, r2
   84704:	b002      	add	sp, #8
   84706:	4770      	bx	lr
   84708:	f06f 0001 	mvn.w	r0, #1
   8470c:	e7f4      	b.n	846f8 <__ascii_mbtowc+0x14>
   8470e:	bf00      	nop

00084710 <memchr>:
   84710:	0783      	lsls	r3, r0, #30
   84712:	b470      	push	{r4, r5, r6}
   84714:	b2cd      	uxtb	r5, r1
   84716:	d03d      	beq.n	84794 <memchr+0x84>
   84718:	1e54      	subs	r4, r2, #1
   8471a:	b30a      	cbz	r2, 84760 <memchr+0x50>
   8471c:	7803      	ldrb	r3, [r0, #0]
   8471e:	42ab      	cmp	r3, r5
   84720:	d01f      	beq.n	84762 <memchr+0x52>
   84722:	1c43      	adds	r3, r0, #1
   84724:	e005      	b.n	84732 <memchr+0x22>
   84726:	f114 34ff 	adds.w	r4, r4, #4294967295
   8472a:	d319      	bcc.n	84760 <memchr+0x50>
   8472c:	7802      	ldrb	r2, [r0, #0]
   8472e:	42aa      	cmp	r2, r5
   84730:	d017      	beq.n	84762 <memchr+0x52>
   84732:	f013 0f03 	tst.w	r3, #3
   84736:	4618      	mov	r0, r3
   84738:	f103 0301 	add.w	r3, r3, #1
   8473c:	d1f3      	bne.n	84726 <memchr+0x16>
   8473e:	2c03      	cmp	r4, #3
   84740:	d811      	bhi.n	84766 <memchr+0x56>
   84742:	b34c      	cbz	r4, 84798 <memchr+0x88>
   84744:	7803      	ldrb	r3, [r0, #0]
   84746:	42ab      	cmp	r3, r5
   84748:	d00b      	beq.n	84762 <memchr+0x52>
   8474a:	4404      	add	r4, r0
   8474c:	1c43      	adds	r3, r0, #1
   8474e:	e002      	b.n	84756 <memchr+0x46>
   84750:	7802      	ldrb	r2, [r0, #0]
   84752:	42aa      	cmp	r2, r5
   84754:	d005      	beq.n	84762 <memchr+0x52>
   84756:	429c      	cmp	r4, r3
   84758:	4618      	mov	r0, r3
   8475a:	f103 0301 	add.w	r3, r3, #1
   8475e:	d1f7      	bne.n	84750 <memchr+0x40>
   84760:	2000      	movs	r0, #0
   84762:	bc70      	pop	{r4, r5, r6}
   84764:	4770      	bx	lr
   84766:	0209      	lsls	r1, r1, #8
   84768:	b289      	uxth	r1, r1
   8476a:	4329      	orrs	r1, r5
   8476c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84770:	6803      	ldr	r3, [r0, #0]
   84772:	4606      	mov	r6, r0
   84774:	404b      	eors	r3, r1
   84776:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8477a:	ea22 0303 	bic.w	r3, r2, r3
   8477e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84782:	f100 0004 	add.w	r0, r0, #4
   84786:	d103      	bne.n	84790 <memchr+0x80>
   84788:	3c04      	subs	r4, #4
   8478a:	2c03      	cmp	r4, #3
   8478c:	d8f0      	bhi.n	84770 <memchr+0x60>
   8478e:	e7d8      	b.n	84742 <memchr+0x32>
   84790:	4630      	mov	r0, r6
   84792:	e7d7      	b.n	84744 <memchr+0x34>
   84794:	4614      	mov	r4, r2
   84796:	e7d2      	b.n	8473e <memchr+0x2e>
   84798:	4620      	mov	r0, r4
   8479a:	e7e2      	b.n	84762 <memchr+0x52>

0008479c <memmove>:
   8479c:	4288      	cmp	r0, r1
   8479e:	b5f0      	push	{r4, r5, r6, r7, lr}
   847a0:	d90d      	bls.n	847be <memmove+0x22>
   847a2:	188b      	adds	r3, r1, r2
   847a4:	4298      	cmp	r0, r3
   847a6:	d20a      	bcs.n	847be <memmove+0x22>
   847a8:	1884      	adds	r4, r0, r2
   847aa:	2a00      	cmp	r2, #0
   847ac:	d051      	beq.n	84852 <memmove+0xb6>
   847ae:	4622      	mov	r2, r4
   847b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   847b4:	4299      	cmp	r1, r3
   847b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   847ba:	d1f9      	bne.n	847b0 <memmove+0x14>
   847bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   847be:	2a0f      	cmp	r2, #15
   847c0:	d948      	bls.n	84854 <memmove+0xb8>
   847c2:	ea41 0300 	orr.w	r3, r1, r0
   847c6:	079b      	lsls	r3, r3, #30
   847c8:	d146      	bne.n	84858 <memmove+0xbc>
   847ca:	4615      	mov	r5, r2
   847cc:	f100 0410 	add.w	r4, r0, #16
   847d0:	f101 0310 	add.w	r3, r1, #16
   847d4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   847d8:	3d10      	subs	r5, #16
   847da:	f844 6c10 	str.w	r6, [r4, #-16]
   847de:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   847e2:	2d0f      	cmp	r5, #15
   847e4:	f844 6c0c 	str.w	r6, [r4, #-12]
   847e8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   847ec:	f104 0410 	add.w	r4, r4, #16
   847f0:	f844 6c18 	str.w	r6, [r4, #-24]
   847f4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   847f8:	f103 0310 	add.w	r3, r3, #16
   847fc:	f844 6c14 	str.w	r6, [r4, #-20]
   84800:	d8e8      	bhi.n	847d4 <memmove+0x38>
   84802:	f1a2 0310 	sub.w	r3, r2, #16
   84806:	f023 030f 	bic.w	r3, r3, #15
   8480a:	f002 0e0f 	and.w	lr, r2, #15
   8480e:	3310      	adds	r3, #16
   84810:	f1be 0f03 	cmp.w	lr, #3
   84814:	4419      	add	r1, r3
   84816:	4403      	add	r3, r0
   84818:	d921      	bls.n	8485e <memmove+0xc2>
   8481a:	460e      	mov	r6, r1
   8481c:	4674      	mov	r4, lr
   8481e:	1f1d      	subs	r5, r3, #4
   84820:	f856 7b04 	ldr.w	r7, [r6], #4
   84824:	3c04      	subs	r4, #4
   84826:	2c03      	cmp	r4, #3
   84828:	f845 7f04 	str.w	r7, [r5, #4]!
   8482c:	d8f8      	bhi.n	84820 <memmove+0x84>
   8482e:	f1ae 0404 	sub.w	r4, lr, #4
   84832:	f024 0403 	bic.w	r4, r4, #3
   84836:	3404      	adds	r4, #4
   84838:	4421      	add	r1, r4
   8483a:	4423      	add	r3, r4
   8483c:	f002 0203 	and.w	r2, r2, #3
   84840:	b162      	cbz	r2, 8485c <memmove+0xc0>
   84842:	3b01      	subs	r3, #1
   84844:	440a      	add	r2, r1
   84846:	f811 4b01 	ldrb.w	r4, [r1], #1
   8484a:	428a      	cmp	r2, r1
   8484c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84850:	d1f9      	bne.n	84846 <memmove+0xaa>
   84852:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84854:	4603      	mov	r3, r0
   84856:	e7f3      	b.n	84840 <memmove+0xa4>
   84858:	4603      	mov	r3, r0
   8485a:	e7f2      	b.n	84842 <memmove+0xa6>
   8485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8485e:	4672      	mov	r2, lr
   84860:	e7ee      	b.n	84840 <memmove+0xa4>
   84862:	bf00      	nop

00084864 <__malloc_lock>:
   84864:	4801      	ldr	r0, [pc, #4]	; (8486c <__malloc_lock+0x8>)
   84866:	f7ff bc17 	b.w	84098 <__retarget_lock_acquire_recursive>
   8486a:	bf00      	nop
   8486c:	2007ad10 	.word	0x2007ad10

00084870 <__malloc_unlock>:
   84870:	4801      	ldr	r0, [pc, #4]	; (84878 <__malloc_unlock+0x8>)
   84872:	f7ff bc13 	b.w	8409c <__retarget_lock_release_recursive>
   84876:	bf00      	nop
   84878:	2007ad10 	.word	0x2007ad10

0008487c <_realloc_r>:
   8487c:	2900      	cmp	r1, #0
   8487e:	f000 8094 	beq.w	849aa <_realloc_r+0x12e>
   84882:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84886:	460c      	mov	r4, r1
   84888:	4615      	mov	r5, r2
   8488a:	b083      	sub	sp, #12
   8488c:	4680      	mov	r8, r0
   8488e:	f105 060b 	add.w	r6, r5, #11
   84892:	f7ff ffe7 	bl	84864 <__malloc_lock>
   84896:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8489a:	2e16      	cmp	r6, #22
   8489c:	f02e 0703 	bic.w	r7, lr, #3
   848a0:	f1a4 0908 	sub.w	r9, r4, #8
   848a4:	d83c      	bhi.n	84920 <_realloc_r+0xa4>
   848a6:	2210      	movs	r2, #16
   848a8:	4616      	mov	r6, r2
   848aa:	42b5      	cmp	r5, r6
   848ac:	d83d      	bhi.n	8492a <_realloc_r+0xae>
   848ae:	4297      	cmp	r7, r2
   848b0:	da43      	bge.n	8493a <_realloc_r+0xbe>
   848b2:	4bc6      	ldr	r3, [pc, #792]	; (84bcc <_realloc_r+0x350>)
   848b4:	eb09 0007 	add.w	r0, r9, r7
   848b8:	6899      	ldr	r1, [r3, #8]
   848ba:	4288      	cmp	r0, r1
   848bc:	f000 80c3 	beq.w	84a46 <_realloc_r+0x1ca>
   848c0:	6843      	ldr	r3, [r0, #4]
   848c2:	f023 0101 	bic.w	r1, r3, #1
   848c6:	4401      	add	r1, r0
   848c8:	6849      	ldr	r1, [r1, #4]
   848ca:	07c9      	lsls	r1, r1, #31
   848cc:	d54d      	bpl.n	8496a <_realloc_r+0xee>
   848ce:	f01e 0f01 	tst.w	lr, #1
   848d2:	f000 809b 	beq.w	84a0c <_realloc_r+0x190>
   848d6:	4629      	mov	r1, r5
   848d8:	4640      	mov	r0, r8
   848da:	f7ff fc61 	bl	841a0 <_malloc_r>
   848de:	4605      	mov	r5, r0
   848e0:	2800      	cmp	r0, #0
   848e2:	d03b      	beq.n	8495c <_realloc_r+0xe0>
   848e4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   848e8:	f1a0 0208 	sub.w	r2, r0, #8
   848ec:	f023 0301 	bic.w	r3, r3, #1
   848f0:	444b      	add	r3, r9
   848f2:	429a      	cmp	r2, r3
   848f4:	f000 812b 	beq.w	84b4e <_realloc_r+0x2d2>
   848f8:	1f3a      	subs	r2, r7, #4
   848fa:	2a24      	cmp	r2, #36	; 0x24
   848fc:	f200 8118 	bhi.w	84b30 <_realloc_r+0x2b4>
   84900:	2a13      	cmp	r2, #19
   84902:	f200 80eb 	bhi.w	84adc <_realloc_r+0x260>
   84906:	4603      	mov	r3, r0
   84908:	4622      	mov	r2, r4
   8490a:	6811      	ldr	r1, [r2, #0]
   8490c:	6019      	str	r1, [r3, #0]
   8490e:	6851      	ldr	r1, [r2, #4]
   84910:	6059      	str	r1, [r3, #4]
   84912:	6892      	ldr	r2, [r2, #8]
   84914:	609a      	str	r2, [r3, #8]
   84916:	4621      	mov	r1, r4
   84918:	4640      	mov	r0, r8
   8491a:	f7ff f923 	bl	83b64 <_free_r>
   8491e:	e01d      	b.n	8495c <_realloc_r+0xe0>
   84920:	f026 0607 	bic.w	r6, r6, #7
   84924:	2e00      	cmp	r6, #0
   84926:	4632      	mov	r2, r6
   84928:	dabf      	bge.n	848aa <_realloc_r+0x2e>
   8492a:	2500      	movs	r5, #0
   8492c:	230c      	movs	r3, #12
   8492e:	4628      	mov	r0, r5
   84930:	f8c8 3000 	str.w	r3, [r8]
   84934:	b003      	add	sp, #12
   84936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8493a:	4625      	mov	r5, r4
   8493c:	1bbb      	subs	r3, r7, r6
   8493e:	2b0f      	cmp	r3, #15
   84940:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84944:	d81d      	bhi.n	84982 <_realloc_r+0x106>
   84946:	f002 0201 	and.w	r2, r2, #1
   8494a:	433a      	orrs	r2, r7
   8494c:	eb09 0107 	add.w	r1, r9, r7
   84950:	f8c9 2004 	str.w	r2, [r9, #4]
   84954:	684b      	ldr	r3, [r1, #4]
   84956:	f043 0301 	orr.w	r3, r3, #1
   8495a:	604b      	str	r3, [r1, #4]
   8495c:	4640      	mov	r0, r8
   8495e:	f7ff ff87 	bl	84870 <__malloc_unlock>
   84962:	4628      	mov	r0, r5
   84964:	b003      	add	sp, #12
   84966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8496a:	f023 0303 	bic.w	r3, r3, #3
   8496e:	18f9      	adds	r1, r7, r3
   84970:	4291      	cmp	r1, r2
   84972:	db1d      	blt.n	849b0 <_realloc_r+0x134>
   84974:	68c3      	ldr	r3, [r0, #12]
   84976:	6882      	ldr	r2, [r0, #8]
   84978:	4625      	mov	r5, r4
   8497a:	60d3      	str	r3, [r2, #12]
   8497c:	460f      	mov	r7, r1
   8497e:	609a      	str	r2, [r3, #8]
   84980:	e7dc      	b.n	8493c <_realloc_r+0xc0>
   84982:	f002 0201 	and.w	r2, r2, #1
   84986:	eb09 0106 	add.w	r1, r9, r6
   8498a:	f043 0301 	orr.w	r3, r3, #1
   8498e:	4332      	orrs	r2, r6
   84990:	f8c9 2004 	str.w	r2, [r9, #4]
   84994:	444f      	add	r7, r9
   84996:	604b      	str	r3, [r1, #4]
   84998:	687b      	ldr	r3, [r7, #4]
   8499a:	3108      	adds	r1, #8
   8499c:	f043 0301 	orr.w	r3, r3, #1
   849a0:	607b      	str	r3, [r7, #4]
   849a2:	4640      	mov	r0, r8
   849a4:	f7ff f8de 	bl	83b64 <_free_r>
   849a8:	e7d8      	b.n	8495c <_realloc_r+0xe0>
   849aa:	4611      	mov	r1, r2
   849ac:	f7ff bbf8 	b.w	841a0 <_malloc_r>
   849b0:	f01e 0f01 	tst.w	lr, #1
   849b4:	d18f      	bne.n	848d6 <_realloc_r+0x5a>
   849b6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   849ba:	eba9 0a01 	sub.w	sl, r9, r1
   849be:	f8da 1004 	ldr.w	r1, [sl, #4]
   849c2:	f021 0103 	bic.w	r1, r1, #3
   849c6:	440b      	add	r3, r1
   849c8:	443b      	add	r3, r7
   849ca:	4293      	cmp	r3, r2
   849cc:	db26      	blt.n	84a1c <_realloc_r+0x1a0>
   849ce:	4655      	mov	r5, sl
   849d0:	68c1      	ldr	r1, [r0, #12]
   849d2:	6880      	ldr	r0, [r0, #8]
   849d4:	1f3a      	subs	r2, r7, #4
   849d6:	60c1      	str	r1, [r0, #12]
   849d8:	6088      	str	r0, [r1, #8]
   849da:	f855 0f08 	ldr.w	r0, [r5, #8]!
   849de:	f8da 100c 	ldr.w	r1, [sl, #12]
   849e2:	2a24      	cmp	r2, #36	; 0x24
   849e4:	60c1      	str	r1, [r0, #12]
   849e6:	6088      	str	r0, [r1, #8]
   849e8:	d826      	bhi.n	84a38 <_realloc_r+0x1bc>
   849ea:	2a13      	cmp	r2, #19
   849ec:	f240 8081 	bls.w	84af2 <_realloc_r+0x276>
   849f0:	6821      	ldr	r1, [r4, #0]
   849f2:	2a1b      	cmp	r2, #27
   849f4:	f8ca 1008 	str.w	r1, [sl, #8]
   849f8:	6861      	ldr	r1, [r4, #4]
   849fa:	f8ca 100c 	str.w	r1, [sl, #12]
   849fe:	f200 80ad 	bhi.w	84b5c <_realloc_r+0x2e0>
   84a02:	f104 0008 	add.w	r0, r4, #8
   84a06:	f10a 0210 	add.w	r2, sl, #16
   84a0a:	e074      	b.n	84af6 <_realloc_r+0x27a>
   84a0c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84a10:	eba9 0a03 	sub.w	sl, r9, r3
   84a14:	f8da 1004 	ldr.w	r1, [sl, #4]
   84a18:	f021 0103 	bic.w	r1, r1, #3
   84a1c:	187b      	adds	r3, r7, r1
   84a1e:	4293      	cmp	r3, r2
   84a20:	f6ff af59 	blt.w	848d6 <_realloc_r+0x5a>
   84a24:	4655      	mov	r5, sl
   84a26:	f8da 100c 	ldr.w	r1, [sl, #12]
   84a2a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84a2e:	1f3a      	subs	r2, r7, #4
   84a30:	2a24      	cmp	r2, #36	; 0x24
   84a32:	60c1      	str	r1, [r0, #12]
   84a34:	6088      	str	r0, [r1, #8]
   84a36:	d9d8      	bls.n	849ea <_realloc_r+0x16e>
   84a38:	4621      	mov	r1, r4
   84a3a:	4628      	mov	r0, r5
   84a3c:	461f      	mov	r7, r3
   84a3e:	46d1      	mov	r9, sl
   84a40:	f7ff feac 	bl	8479c <memmove>
   84a44:	e77a      	b.n	8493c <_realloc_r+0xc0>
   84a46:	6841      	ldr	r1, [r0, #4]
   84a48:	f106 0010 	add.w	r0, r6, #16
   84a4c:	f021 0b03 	bic.w	fp, r1, #3
   84a50:	44bb      	add	fp, r7
   84a52:	4583      	cmp	fp, r0
   84a54:	da58      	bge.n	84b08 <_realloc_r+0x28c>
   84a56:	f01e 0f01 	tst.w	lr, #1
   84a5a:	f47f af3c 	bne.w	848d6 <_realloc_r+0x5a>
   84a5e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84a62:	eba9 0a01 	sub.w	sl, r9, r1
   84a66:	f8da 1004 	ldr.w	r1, [sl, #4]
   84a6a:	f021 0103 	bic.w	r1, r1, #3
   84a6e:	448b      	add	fp, r1
   84a70:	4558      	cmp	r0, fp
   84a72:	dcd3      	bgt.n	84a1c <_realloc_r+0x1a0>
   84a74:	4655      	mov	r5, sl
   84a76:	f8da 100c 	ldr.w	r1, [sl, #12]
   84a7a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84a7e:	1f3a      	subs	r2, r7, #4
   84a80:	2a24      	cmp	r2, #36	; 0x24
   84a82:	60c1      	str	r1, [r0, #12]
   84a84:	6088      	str	r0, [r1, #8]
   84a86:	f200 808d 	bhi.w	84ba4 <_realloc_r+0x328>
   84a8a:	2a13      	cmp	r2, #19
   84a8c:	f240 8087 	bls.w	84b9e <_realloc_r+0x322>
   84a90:	6821      	ldr	r1, [r4, #0]
   84a92:	2a1b      	cmp	r2, #27
   84a94:	f8ca 1008 	str.w	r1, [sl, #8]
   84a98:	6861      	ldr	r1, [r4, #4]
   84a9a:	f8ca 100c 	str.w	r1, [sl, #12]
   84a9e:	f200 8088 	bhi.w	84bb2 <_realloc_r+0x336>
   84aa2:	f104 0108 	add.w	r1, r4, #8
   84aa6:	f10a 0210 	add.w	r2, sl, #16
   84aaa:	6808      	ldr	r0, [r1, #0]
   84aac:	6010      	str	r0, [r2, #0]
   84aae:	6848      	ldr	r0, [r1, #4]
   84ab0:	6050      	str	r0, [r2, #4]
   84ab2:	6889      	ldr	r1, [r1, #8]
   84ab4:	6091      	str	r1, [r2, #8]
   84ab6:	ebab 0206 	sub.w	r2, fp, r6
   84aba:	eb0a 0106 	add.w	r1, sl, r6
   84abe:	f042 0201 	orr.w	r2, r2, #1
   84ac2:	6099      	str	r1, [r3, #8]
   84ac4:	604a      	str	r2, [r1, #4]
   84ac6:	f8da 3004 	ldr.w	r3, [sl, #4]
   84aca:	4640      	mov	r0, r8
   84acc:	f003 0301 	and.w	r3, r3, #1
   84ad0:	431e      	orrs	r6, r3
   84ad2:	f8ca 6004 	str.w	r6, [sl, #4]
   84ad6:	f7ff fecb 	bl	84870 <__malloc_unlock>
   84ada:	e742      	b.n	84962 <_realloc_r+0xe6>
   84adc:	6823      	ldr	r3, [r4, #0]
   84ade:	2a1b      	cmp	r2, #27
   84ae0:	6003      	str	r3, [r0, #0]
   84ae2:	6863      	ldr	r3, [r4, #4]
   84ae4:	6043      	str	r3, [r0, #4]
   84ae6:	d827      	bhi.n	84b38 <_realloc_r+0x2bc>
   84ae8:	f100 0308 	add.w	r3, r0, #8
   84aec:	f104 0208 	add.w	r2, r4, #8
   84af0:	e70b      	b.n	8490a <_realloc_r+0x8e>
   84af2:	4620      	mov	r0, r4
   84af4:	462a      	mov	r2, r5
   84af6:	6801      	ldr	r1, [r0, #0]
   84af8:	461f      	mov	r7, r3
   84afa:	6011      	str	r1, [r2, #0]
   84afc:	6841      	ldr	r1, [r0, #4]
   84afe:	46d1      	mov	r9, sl
   84b00:	6051      	str	r1, [r2, #4]
   84b02:	6883      	ldr	r3, [r0, #8]
   84b04:	6093      	str	r3, [r2, #8]
   84b06:	e719      	b.n	8493c <_realloc_r+0xc0>
   84b08:	ebab 0b06 	sub.w	fp, fp, r6
   84b0c:	eb09 0106 	add.w	r1, r9, r6
   84b10:	f04b 0201 	orr.w	r2, fp, #1
   84b14:	6099      	str	r1, [r3, #8]
   84b16:	604a      	str	r2, [r1, #4]
   84b18:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84b1c:	4640      	mov	r0, r8
   84b1e:	f003 0301 	and.w	r3, r3, #1
   84b22:	431e      	orrs	r6, r3
   84b24:	f844 6c04 	str.w	r6, [r4, #-4]
   84b28:	f7ff fea2 	bl	84870 <__malloc_unlock>
   84b2c:	4625      	mov	r5, r4
   84b2e:	e718      	b.n	84962 <_realloc_r+0xe6>
   84b30:	4621      	mov	r1, r4
   84b32:	f7ff fe33 	bl	8479c <memmove>
   84b36:	e6ee      	b.n	84916 <_realloc_r+0x9a>
   84b38:	68a3      	ldr	r3, [r4, #8]
   84b3a:	2a24      	cmp	r2, #36	; 0x24
   84b3c:	6083      	str	r3, [r0, #8]
   84b3e:	68e3      	ldr	r3, [r4, #12]
   84b40:	60c3      	str	r3, [r0, #12]
   84b42:	d018      	beq.n	84b76 <_realloc_r+0x2fa>
   84b44:	f100 0310 	add.w	r3, r0, #16
   84b48:	f104 0210 	add.w	r2, r4, #16
   84b4c:	e6dd      	b.n	8490a <_realloc_r+0x8e>
   84b4e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84b52:	4625      	mov	r5, r4
   84b54:	f023 0303 	bic.w	r3, r3, #3
   84b58:	441f      	add	r7, r3
   84b5a:	e6ef      	b.n	8493c <_realloc_r+0xc0>
   84b5c:	68a1      	ldr	r1, [r4, #8]
   84b5e:	2a24      	cmp	r2, #36	; 0x24
   84b60:	f8ca 1010 	str.w	r1, [sl, #16]
   84b64:	68e1      	ldr	r1, [r4, #12]
   84b66:	f8ca 1014 	str.w	r1, [sl, #20]
   84b6a:	d00d      	beq.n	84b88 <_realloc_r+0x30c>
   84b6c:	f104 0010 	add.w	r0, r4, #16
   84b70:	f10a 0218 	add.w	r2, sl, #24
   84b74:	e7bf      	b.n	84af6 <_realloc_r+0x27a>
   84b76:	6922      	ldr	r2, [r4, #16]
   84b78:	f100 0318 	add.w	r3, r0, #24
   84b7c:	6102      	str	r2, [r0, #16]
   84b7e:	6961      	ldr	r1, [r4, #20]
   84b80:	f104 0218 	add.w	r2, r4, #24
   84b84:	6141      	str	r1, [r0, #20]
   84b86:	e6c0      	b.n	8490a <_realloc_r+0x8e>
   84b88:	6922      	ldr	r2, [r4, #16]
   84b8a:	f104 0018 	add.w	r0, r4, #24
   84b8e:	f8ca 2018 	str.w	r2, [sl, #24]
   84b92:	6961      	ldr	r1, [r4, #20]
   84b94:	f10a 0220 	add.w	r2, sl, #32
   84b98:	f8ca 101c 	str.w	r1, [sl, #28]
   84b9c:	e7ab      	b.n	84af6 <_realloc_r+0x27a>
   84b9e:	4621      	mov	r1, r4
   84ba0:	462a      	mov	r2, r5
   84ba2:	e782      	b.n	84aaa <_realloc_r+0x22e>
   84ba4:	4621      	mov	r1, r4
   84ba6:	4628      	mov	r0, r5
   84ba8:	9301      	str	r3, [sp, #4]
   84baa:	f7ff fdf7 	bl	8479c <memmove>
   84bae:	9b01      	ldr	r3, [sp, #4]
   84bb0:	e781      	b.n	84ab6 <_realloc_r+0x23a>
   84bb2:	68a1      	ldr	r1, [r4, #8]
   84bb4:	2a24      	cmp	r2, #36	; 0x24
   84bb6:	f8ca 1010 	str.w	r1, [sl, #16]
   84bba:	68e1      	ldr	r1, [r4, #12]
   84bbc:	f8ca 1014 	str.w	r1, [sl, #20]
   84bc0:	d006      	beq.n	84bd0 <_realloc_r+0x354>
   84bc2:	f104 0110 	add.w	r1, r4, #16
   84bc6:	f10a 0218 	add.w	r2, sl, #24
   84bca:	e76e      	b.n	84aaa <_realloc_r+0x22e>
   84bcc:	200706d8 	.word	0x200706d8
   84bd0:	6922      	ldr	r2, [r4, #16]
   84bd2:	f104 0118 	add.w	r1, r4, #24
   84bd6:	f8ca 2018 	str.w	r2, [sl, #24]
   84bda:	6960      	ldr	r0, [r4, #20]
   84bdc:	f10a 0220 	add.w	r2, sl, #32
   84be0:	f8ca 001c 	str.w	r0, [sl, #28]
   84be4:	e761      	b.n	84aaa <_realloc_r+0x22e>
   84be6:	bf00      	nop

00084be8 <_sbrk_r>:
   84be8:	b538      	push	{r3, r4, r5, lr}
   84bea:	2300      	movs	r3, #0
   84bec:	4c06      	ldr	r4, [pc, #24]	; (84c08 <_sbrk_r+0x20>)
   84bee:	4605      	mov	r5, r0
   84bf0:	4608      	mov	r0, r1
   84bf2:	6023      	str	r3, [r4, #0]
   84bf4:	f7fd fbf4 	bl	823e0 <_sbrk>
   84bf8:	1c43      	adds	r3, r0, #1
   84bfa:	d000      	beq.n	84bfe <_sbrk_r+0x16>
   84bfc:	bd38      	pop	{r3, r4, r5, pc}
   84bfe:	6823      	ldr	r3, [r4, #0]
   84c00:	2b00      	cmp	r3, #0
   84c02:	d0fb      	beq.n	84bfc <_sbrk_r+0x14>
   84c04:	602b      	str	r3, [r5, #0]
   84c06:	bd38      	pop	{r3, r4, r5, pc}
   84c08:	2007ad24 	.word	0x2007ad24

00084c0c <__sread>:
   84c0c:	b510      	push	{r4, lr}
   84c0e:	460c      	mov	r4, r1
   84c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c14:	f000 f9f4 	bl	85000 <_read_r>
   84c18:	2800      	cmp	r0, #0
   84c1a:	db03      	blt.n	84c24 <__sread+0x18>
   84c1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84c1e:	4403      	add	r3, r0
   84c20:	6523      	str	r3, [r4, #80]	; 0x50
   84c22:	bd10      	pop	{r4, pc}
   84c24:	89a3      	ldrh	r3, [r4, #12]
   84c26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84c2a:	81a3      	strh	r3, [r4, #12]
   84c2c:	bd10      	pop	{r4, pc}
   84c2e:	bf00      	nop

00084c30 <__swrite>:
   84c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c34:	460c      	mov	r4, r1
   84c36:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84c3a:	461f      	mov	r7, r3
   84c3c:	05cb      	lsls	r3, r1, #23
   84c3e:	4616      	mov	r6, r2
   84c40:	4605      	mov	r5, r0
   84c42:	d507      	bpl.n	84c54 <__swrite+0x24>
   84c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c48:	2302      	movs	r3, #2
   84c4a:	2200      	movs	r2, #0
   84c4c:	f000 f9c2 	bl	84fd4 <_lseek_r>
   84c50:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84c54:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84c58:	81a1      	strh	r1, [r4, #12]
   84c5a:	463b      	mov	r3, r7
   84c5c:	4632      	mov	r2, r6
   84c5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c62:	4628      	mov	r0, r5
   84c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84c68:	f000 b8a2 	b.w	84db0 <_write_r>

00084c6c <__sseek>:
   84c6c:	b510      	push	{r4, lr}
   84c6e:	460c      	mov	r4, r1
   84c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c74:	f000 f9ae 	bl	84fd4 <_lseek_r>
   84c78:	89a3      	ldrh	r3, [r4, #12]
   84c7a:	1c42      	adds	r2, r0, #1
   84c7c:	bf0e      	itee	eq
   84c7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84c82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84c86:	6520      	strne	r0, [r4, #80]	; 0x50
   84c88:	81a3      	strh	r3, [r4, #12]
   84c8a:	bd10      	pop	{r4, pc}

00084c8c <__sclose>:
   84c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c90:	f000 b906 	b.w	84ea0 <_close_r>

00084c94 <__swbuf_r>:
   84c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84c96:	460d      	mov	r5, r1
   84c98:	4614      	mov	r4, r2
   84c9a:	4606      	mov	r6, r0
   84c9c:	b110      	cbz	r0, 84ca4 <__swbuf_r+0x10>
   84c9e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ca0:	2b00      	cmp	r3, #0
   84ca2:	d04b      	beq.n	84d3c <__swbuf_r+0xa8>
   84ca4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84ca8:	69a3      	ldr	r3, [r4, #24]
   84caa:	b291      	uxth	r1, r2
   84cac:	0708      	lsls	r0, r1, #28
   84cae:	60a3      	str	r3, [r4, #8]
   84cb0:	d539      	bpl.n	84d26 <__swbuf_r+0x92>
   84cb2:	6923      	ldr	r3, [r4, #16]
   84cb4:	2b00      	cmp	r3, #0
   84cb6:	d036      	beq.n	84d26 <__swbuf_r+0x92>
   84cb8:	b2ed      	uxtb	r5, r5
   84cba:	0489      	lsls	r1, r1, #18
   84cbc:	462f      	mov	r7, r5
   84cbe:	d515      	bpl.n	84cec <__swbuf_r+0x58>
   84cc0:	6822      	ldr	r2, [r4, #0]
   84cc2:	6961      	ldr	r1, [r4, #20]
   84cc4:	1ad3      	subs	r3, r2, r3
   84cc6:	428b      	cmp	r3, r1
   84cc8:	da1c      	bge.n	84d04 <__swbuf_r+0x70>
   84cca:	3301      	adds	r3, #1
   84ccc:	68a1      	ldr	r1, [r4, #8]
   84cce:	1c50      	adds	r0, r2, #1
   84cd0:	3901      	subs	r1, #1
   84cd2:	60a1      	str	r1, [r4, #8]
   84cd4:	6020      	str	r0, [r4, #0]
   84cd6:	7015      	strb	r5, [r2, #0]
   84cd8:	6962      	ldr	r2, [r4, #20]
   84cda:	429a      	cmp	r2, r3
   84cdc:	d01a      	beq.n	84d14 <__swbuf_r+0x80>
   84cde:	89a3      	ldrh	r3, [r4, #12]
   84ce0:	07db      	lsls	r3, r3, #31
   84ce2:	d501      	bpl.n	84ce8 <__swbuf_r+0x54>
   84ce4:	2d0a      	cmp	r5, #10
   84ce6:	d015      	beq.n	84d14 <__swbuf_r+0x80>
   84ce8:	4638      	mov	r0, r7
   84cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84cec:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84cf2:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84cf6:	81a2      	strh	r2, [r4, #12]
   84cf8:	6822      	ldr	r2, [r4, #0]
   84cfa:	6661      	str	r1, [r4, #100]	; 0x64
   84cfc:	6961      	ldr	r1, [r4, #20]
   84cfe:	1ad3      	subs	r3, r2, r3
   84d00:	428b      	cmp	r3, r1
   84d02:	dbe2      	blt.n	84cca <__swbuf_r+0x36>
   84d04:	4621      	mov	r1, r4
   84d06:	4630      	mov	r0, r6
   84d08:	f7fe fdae 	bl	83868 <_fflush_r>
   84d0c:	b940      	cbnz	r0, 84d20 <__swbuf_r+0x8c>
   84d0e:	2301      	movs	r3, #1
   84d10:	6822      	ldr	r2, [r4, #0]
   84d12:	e7db      	b.n	84ccc <__swbuf_r+0x38>
   84d14:	4621      	mov	r1, r4
   84d16:	4630      	mov	r0, r6
   84d18:	f7fe fda6 	bl	83868 <_fflush_r>
   84d1c:	2800      	cmp	r0, #0
   84d1e:	d0e3      	beq.n	84ce8 <__swbuf_r+0x54>
   84d20:	f04f 37ff 	mov.w	r7, #4294967295
   84d24:	e7e0      	b.n	84ce8 <__swbuf_r+0x54>
   84d26:	4621      	mov	r1, r4
   84d28:	4630      	mov	r0, r6
   84d2a:	f7fe fc8d 	bl	83648 <__swsetup_r>
   84d2e:	2800      	cmp	r0, #0
   84d30:	d1f6      	bne.n	84d20 <__swbuf_r+0x8c>
   84d32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84d36:	6923      	ldr	r3, [r4, #16]
   84d38:	b291      	uxth	r1, r2
   84d3a:	e7bd      	b.n	84cb8 <__swbuf_r+0x24>
   84d3c:	f7fe fdec 	bl	83918 <__sinit>
   84d40:	e7b0      	b.n	84ca4 <__swbuf_r+0x10>
   84d42:	bf00      	nop

00084d44 <_wcrtomb_r>:
   84d44:	b5f0      	push	{r4, r5, r6, r7, lr}
   84d46:	4606      	mov	r6, r0
   84d48:	b085      	sub	sp, #20
   84d4a:	461f      	mov	r7, r3
   84d4c:	b189      	cbz	r1, 84d72 <_wcrtomb_r+0x2e>
   84d4e:	4c10      	ldr	r4, [pc, #64]	; (84d90 <_wcrtomb_r+0x4c>)
   84d50:	4d10      	ldr	r5, [pc, #64]	; (84d94 <_wcrtomb_r+0x50>)
   84d52:	6824      	ldr	r4, [r4, #0]
   84d54:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84d56:	2c00      	cmp	r4, #0
   84d58:	bf08      	it	eq
   84d5a:	462c      	moveq	r4, r5
   84d5c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84d60:	47a0      	blx	r4
   84d62:	1c43      	adds	r3, r0, #1
   84d64:	d103      	bne.n	84d6e <_wcrtomb_r+0x2a>
   84d66:	2200      	movs	r2, #0
   84d68:	238a      	movs	r3, #138	; 0x8a
   84d6a:	603a      	str	r2, [r7, #0]
   84d6c:	6033      	str	r3, [r6, #0]
   84d6e:	b005      	add	sp, #20
   84d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84d72:	460c      	mov	r4, r1
   84d74:	4a06      	ldr	r2, [pc, #24]	; (84d90 <_wcrtomb_r+0x4c>)
   84d76:	4d07      	ldr	r5, [pc, #28]	; (84d94 <_wcrtomb_r+0x50>)
   84d78:	6811      	ldr	r1, [r2, #0]
   84d7a:	4622      	mov	r2, r4
   84d7c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84d7e:	a901      	add	r1, sp, #4
   84d80:	2c00      	cmp	r4, #0
   84d82:	bf08      	it	eq
   84d84:	462c      	moveq	r4, r5
   84d86:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84d8a:	47a0      	blx	r4
   84d8c:	e7e9      	b.n	84d62 <_wcrtomb_r+0x1e>
   84d8e:	bf00      	nop
   84d90:	2007013c 	.word	0x2007013c
   84d94:	2007056c 	.word	0x2007056c

00084d98 <__ascii_wctomb>:
   84d98:	b119      	cbz	r1, 84da2 <__ascii_wctomb+0xa>
   84d9a:	2aff      	cmp	r2, #255	; 0xff
   84d9c:	d803      	bhi.n	84da6 <__ascii_wctomb+0xe>
   84d9e:	700a      	strb	r2, [r1, #0]
   84da0:	2101      	movs	r1, #1
   84da2:	4608      	mov	r0, r1
   84da4:	4770      	bx	lr
   84da6:	238a      	movs	r3, #138	; 0x8a
   84da8:	f04f 31ff 	mov.w	r1, #4294967295
   84dac:	6003      	str	r3, [r0, #0]
   84dae:	e7f8      	b.n	84da2 <__ascii_wctomb+0xa>

00084db0 <_write_r>:
   84db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84db2:	460e      	mov	r6, r1
   84db4:	2500      	movs	r5, #0
   84db6:	4c08      	ldr	r4, [pc, #32]	; (84dd8 <_write_r+0x28>)
   84db8:	4611      	mov	r1, r2
   84dba:	4607      	mov	r7, r0
   84dbc:	461a      	mov	r2, r3
   84dbe:	4630      	mov	r0, r6
   84dc0:	6025      	str	r5, [r4, #0]
   84dc2:	f7fb fa69 	bl	80298 <_write>
   84dc6:	1c43      	adds	r3, r0, #1
   84dc8:	d000      	beq.n	84dcc <_write_r+0x1c>
   84dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84dcc:	6823      	ldr	r3, [r4, #0]
   84dce:	2b00      	cmp	r3, #0
   84dd0:	d0fb      	beq.n	84dca <_write_r+0x1a>
   84dd2:	603b      	str	r3, [r7, #0]
   84dd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84dd6:	bf00      	nop
   84dd8:	2007ad24 	.word	0x2007ad24

00084ddc <__register_exitproc>:
   84ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84de0:	4d2c      	ldr	r5, [pc, #176]	; (84e94 <__register_exitproc+0xb8>)
   84de2:	4606      	mov	r6, r0
   84de4:	6828      	ldr	r0, [r5, #0]
   84de6:	4698      	mov	r8, r3
   84de8:	460f      	mov	r7, r1
   84dea:	4691      	mov	r9, r2
   84dec:	f7ff f954 	bl	84098 <__retarget_lock_acquire_recursive>
   84df0:	4b29      	ldr	r3, [pc, #164]	; (84e98 <__register_exitproc+0xbc>)
   84df2:	681c      	ldr	r4, [r3, #0]
   84df4:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84df8:	2b00      	cmp	r3, #0
   84dfa:	d03e      	beq.n	84e7a <__register_exitproc+0x9e>
   84dfc:	685a      	ldr	r2, [r3, #4]
   84dfe:	2a1f      	cmp	r2, #31
   84e00:	dc1c      	bgt.n	84e3c <__register_exitproc+0x60>
   84e02:	f102 0e01 	add.w	lr, r2, #1
   84e06:	b176      	cbz	r6, 84e26 <__register_exitproc+0x4a>
   84e08:	2101      	movs	r1, #1
   84e0a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84e0e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84e12:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84e16:	4091      	lsls	r1, r2
   84e18:	4308      	orrs	r0, r1
   84e1a:	2e02      	cmp	r6, #2
   84e1c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84e20:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84e24:	d023      	beq.n	84e6e <__register_exitproc+0x92>
   84e26:	3202      	adds	r2, #2
   84e28:	f8c3 e004 	str.w	lr, [r3, #4]
   84e2c:	6828      	ldr	r0, [r5, #0]
   84e2e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84e32:	f7ff f933 	bl	8409c <__retarget_lock_release_recursive>
   84e36:	2000      	movs	r0, #0
   84e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84e3c:	4b17      	ldr	r3, [pc, #92]	; (84e9c <__register_exitproc+0xc0>)
   84e3e:	b30b      	cbz	r3, 84e84 <__register_exitproc+0xa8>
   84e40:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84e44:	f7ff f9a4 	bl	84190 <malloc>
   84e48:	4603      	mov	r3, r0
   84e4a:	b1d8      	cbz	r0, 84e84 <__register_exitproc+0xa8>
   84e4c:	2000      	movs	r0, #0
   84e4e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84e52:	f04f 0e01 	mov.w	lr, #1
   84e56:	6058      	str	r0, [r3, #4]
   84e58:	6019      	str	r1, [r3, #0]
   84e5a:	4602      	mov	r2, r0
   84e5c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84e60:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84e64:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84e68:	2e00      	cmp	r6, #0
   84e6a:	d0dc      	beq.n	84e26 <__register_exitproc+0x4a>
   84e6c:	e7cc      	b.n	84e08 <__register_exitproc+0x2c>
   84e6e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84e72:	4301      	orrs	r1, r0
   84e74:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84e78:	e7d5      	b.n	84e26 <__register_exitproc+0x4a>
   84e7a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84e7e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84e82:	e7bb      	b.n	84dfc <__register_exitproc+0x20>
   84e84:	6828      	ldr	r0, [r5, #0]
   84e86:	f7ff f909 	bl	8409c <__retarget_lock_release_recursive>
   84e8a:	f04f 30ff 	mov.w	r0, #4294967295
   84e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84e92:	bf00      	nop
   84e94:	20070568 	.word	0x20070568
   84e98:	000853c8 	.word	0x000853c8
   84e9c:	00084191 	.word	0x00084191

00084ea0 <_close_r>:
   84ea0:	b538      	push	{r3, r4, r5, lr}
   84ea2:	2300      	movs	r3, #0
   84ea4:	4c06      	ldr	r4, [pc, #24]	; (84ec0 <_close_r+0x20>)
   84ea6:	4605      	mov	r5, r0
   84ea8:	4608      	mov	r0, r1
   84eaa:	6023      	str	r3, [r4, #0]
   84eac:	f7fd fab4 	bl	82418 <_close>
   84eb0:	1c43      	adds	r3, r0, #1
   84eb2:	d000      	beq.n	84eb6 <_close_r+0x16>
   84eb4:	bd38      	pop	{r3, r4, r5, pc}
   84eb6:	6823      	ldr	r3, [r4, #0]
   84eb8:	2b00      	cmp	r3, #0
   84eba:	d0fb      	beq.n	84eb4 <_close_r+0x14>
   84ebc:	602b      	str	r3, [r5, #0]
   84ebe:	bd38      	pop	{r3, r4, r5, pc}
   84ec0:	2007ad24 	.word	0x2007ad24

00084ec4 <_fclose_r>:
   84ec4:	b570      	push	{r4, r5, r6, lr}
   84ec6:	b159      	cbz	r1, 84ee0 <_fclose_r+0x1c>
   84ec8:	4605      	mov	r5, r0
   84eca:	460c      	mov	r4, r1
   84ecc:	b110      	cbz	r0, 84ed4 <_fclose_r+0x10>
   84ece:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ed0:	2b00      	cmp	r3, #0
   84ed2:	d03c      	beq.n	84f4e <_fclose_r+0x8a>
   84ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84ed6:	07d8      	lsls	r0, r3, #31
   84ed8:	d505      	bpl.n	84ee6 <_fclose_r+0x22>
   84eda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84ede:	b92b      	cbnz	r3, 84eec <_fclose_r+0x28>
   84ee0:	2600      	movs	r6, #0
   84ee2:	4630      	mov	r0, r6
   84ee4:	bd70      	pop	{r4, r5, r6, pc}
   84ee6:	89a3      	ldrh	r3, [r4, #12]
   84ee8:	0599      	lsls	r1, r3, #22
   84eea:	d53c      	bpl.n	84f66 <_fclose_r+0xa2>
   84eec:	4621      	mov	r1, r4
   84eee:	4628      	mov	r0, r5
   84ef0:	f7fe fc1e 	bl	83730 <__sflush_r>
   84ef4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84ef6:	4606      	mov	r6, r0
   84ef8:	b133      	cbz	r3, 84f08 <_fclose_r+0x44>
   84efa:	69e1      	ldr	r1, [r4, #28]
   84efc:	4628      	mov	r0, r5
   84efe:	4798      	blx	r3
   84f00:	2800      	cmp	r0, #0
   84f02:	bfb8      	it	lt
   84f04:	f04f 36ff 	movlt.w	r6, #4294967295
   84f08:	89a3      	ldrh	r3, [r4, #12]
   84f0a:	061a      	lsls	r2, r3, #24
   84f0c:	d422      	bmi.n	84f54 <_fclose_r+0x90>
   84f0e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84f10:	b141      	cbz	r1, 84f24 <_fclose_r+0x60>
   84f12:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84f16:	4299      	cmp	r1, r3
   84f18:	d002      	beq.n	84f20 <_fclose_r+0x5c>
   84f1a:	4628      	mov	r0, r5
   84f1c:	f7fe fe22 	bl	83b64 <_free_r>
   84f20:	2300      	movs	r3, #0
   84f22:	6323      	str	r3, [r4, #48]	; 0x30
   84f24:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84f26:	b121      	cbz	r1, 84f32 <_fclose_r+0x6e>
   84f28:	4628      	mov	r0, r5
   84f2a:	f7fe fe1b 	bl	83b64 <_free_r>
   84f2e:	2300      	movs	r3, #0
   84f30:	6463      	str	r3, [r4, #68]	; 0x44
   84f32:	f7fe fd21 	bl	83978 <__sfp_lock_acquire>
   84f36:	2200      	movs	r2, #0
   84f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84f3a:	81a2      	strh	r2, [r4, #12]
   84f3c:	07db      	lsls	r3, r3, #31
   84f3e:	d50e      	bpl.n	84f5e <_fclose_r+0x9a>
   84f40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84f42:	f7ff f8a7 	bl	84094 <__retarget_lock_close_recursive>
   84f46:	f7fe fd1d 	bl	83984 <__sfp_lock_release>
   84f4a:	4630      	mov	r0, r6
   84f4c:	bd70      	pop	{r4, r5, r6, pc}
   84f4e:	f7fe fce3 	bl	83918 <__sinit>
   84f52:	e7bf      	b.n	84ed4 <_fclose_r+0x10>
   84f54:	6921      	ldr	r1, [r4, #16]
   84f56:	4628      	mov	r0, r5
   84f58:	f7fe fe04 	bl	83b64 <_free_r>
   84f5c:	e7d7      	b.n	84f0e <_fclose_r+0x4a>
   84f5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84f60:	f7ff f89c 	bl	8409c <__retarget_lock_release_recursive>
   84f64:	e7ec      	b.n	84f40 <_fclose_r+0x7c>
   84f66:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84f68:	f7ff f896 	bl	84098 <__retarget_lock_acquire_recursive>
   84f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84f70:	2b00      	cmp	r3, #0
   84f72:	d1bb      	bne.n	84eec <_fclose_r+0x28>
   84f74:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84f76:	f016 0601 	ands.w	r6, r6, #1
   84f7a:	d1b1      	bne.n	84ee0 <_fclose_r+0x1c>
   84f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84f7e:	f7ff f88d 	bl	8409c <__retarget_lock_release_recursive>
   84f82:	4630      	mov	r0, r6
   84f84:	bd70      	pop	{r4, r5, r6, pc}
   84f86:	bf00      	nop

00084f88 <_fstat_r>:
   84f88:	b570      	push	{r4, r5, r6, lr}
   84f8a:	460d      	mov	r5, r1
   84f8c:	2300      	movs	r3, #0
   84f8e:	4c07      	ldr	r4, [pc, #28]	; (84fac <_fstat_r+0x24>)
   84f90:	4606      	mov	r6, r0
   84f92:	4611      	mov	r1, r2
   84f94:	4628      	mov	r0, r5
   84f96:	6023      	str	r3, [r4, #0]
   84f98:	f7fd fa41 	bl	8241e <_fstat>
   84f9c:	1c43      	adds	r3, r0, #1
   84f9e:	d000      	beq.n	84fa2 <_fstat_r+0x1a>
   84fa0:	bd70      	pop	{r4, r5, r6, pc}
   84fa2:	6823      	ldr	r3, [r4, #0]
   84fa4:	2b00      	cmp	r3, #0
   84fa6:	d0fb      	beq.n	84fa0 <_fstat_r+0x18>
   84fa8:	6033      	str	r3, [r6, #0]
   84faa:	bd70      	pop	{r4, r5, r6, pc}
   84fac:	2007ad24 	.word	0x2007ad24

00084fb0 <_isatty_r>:
   84fb0:	b538      	push	{r3, r4, r5, lr}
   84fb2:	2300      	movs	r3, #0
   84fb4:	4c06      	ldr	r4, [pc, #24]	; (84fd0 <_isatty_r+0x20>)
   84fb6:	4605      	mov	r5, r0
   84fb8:	4608      	mov	r0, r1
   84fba:	6023      	str	r3, [r4, #0]
   84fbc:	f7fd fa34 	bl	82428 <_isatty>
   84fc0:	1c43      	adds	r3, r0, #1
   84fc2:	d000      	beq.n	84fc6 <_isatty_r+0x16>
   84fc4:	bd38      	pop	{r3, r4, r5, pc}
   84fc6:	6823      	ldr	r3, [r4, #0]
   84fc8:	2b00      	cmp	r3, #0
   84fca:	d0fb      	beq.n	84fc4 <_isatty_r+0x14>
   84fcc:	602b      	str	r3, [r5, #0]
   84fce:	bd38      	pop	{r3, r4, r5, pc}
   84fd0:	2007ad24 	.word	0x2007ad24

00084fd4 <_lseek_r>:
   84fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84fd6:	460e      	mov	r6, r1
   84fd8:	2500      	movs	r5, #0
   84fda:	4c08      	ldr	r4, [pc, #32]	; (84ffc <_lseek_r+0x28>)
   84fdc:	4611      	mov	r1, r2
   84fde:	4607      	mov	r7, r0
   84fe0:	461a      	mov	r2, r3
   84fe2:	4630      	mov	r0, r6
   84fe4:	6025      	str	r5, [r4, #0]
   84fe6:	f7fd fa21 	bl	8242c <_lseek>
   84fea:	1c43      	adds	r3, r0, #1
   84fec:	d000      	beq.n	84ff0 <_lseek_r+0x1c>
   84fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84ff0:	6823      	ldr	r3, [r4, #0]
   84ff2:	2b00      	cmp	r3, #0
   84ff4:	d0fb      	beq.n	84fee <_lseek_r+0x1a>
   84ff6:	603b      	str	r3, [r7, #0]
   84ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84ffa:	bf00      	nop
   84ffc:	2007ad24 	.word	0x2007ad24

00085000 <_read_r>:
   85000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85002:	460e      	mov	r6, r1
   85004:	2500      	movs	r5, #0
   85006:	4c08      	ldr	r4, [pc, #32]	; (85028 <_read_r+0x28>)
   85008:	4611      	mov	r1, r2
   8500a:	4607      	mov	r7, r0
   8500c:	461a      	mov	r2, r3
   8500e:	4630      	mov	r0, r6
   85010:	6025      	str	r5, [r4, #0]
   85012:	f7fb f923 	bl	8025c <_read>
   85016:	1c43      	adds	r3, r0, #1
   85018:	d000      	beq.n	8501c <_read_r+0x1c>
   8501a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8501c:	6823      	ldr	r3, [r4, #0]
   8501e:	2b00      	cmp	r3, #0
   85020:	d0fb      	beq.n	8501a <_read_r+0x1a>
   85022:	603b      	str	r3, [r7, #0]
   85024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85026:	bf00      	nop
   85028:	2007ad24 	.word	0x2007ad24

0008502c <__aeabi_uldivmod>:
   8502c:	b953      	cbnz	r3, 85044 <__aeabi_uldivmod+0x18>
   8502e:	b94a      	cbnz	r2, 85044 <__aeabi_uldivmod+0x18>
   85030:	2900      	cmp	r1, #0
   85032:	bf08      	it	eq
   85034:	2800      	cmpeq	r0, #0
   85036:	bf1c      	itt	ne
   85038:	f04f 31ff 	movne.w	r1, #4294967295
   8503c:	f04f 30ff 	movne.w	r0, #4294967295
   85040:	f000 b97a 	b.w	85338 <__aeabi_idiv0>
   85044:	f1ad 0c08 	sub.w	ip, sp, #8
   85048:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8504c:	f000 f806 	bl	8505c <__udivmoddi4>
   85050:	f8dd e004 	ldr.w	lr, [sp, #4]
   85054:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85058:	b004      	add	sp, #16
   8505a:	4770      	bx	lr

0008505c <__udivmoddi4>:
   8505c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85060:	468c      	mov	ip, r1
   85062:	460e      	mov	r6, r1
   85064:	4604      	mov	r4, r0
   85066:	9d08      	ldr	r5, [sp, #32]
   85068:	2b00      	cmp	r3, #0
   8506a:	d150      	bne.n	8510e <__udivmoddi4+0xb2>
   8506c:	428a      	cmp	r2, r1
   8506e:	4617      	mov	r7, r2
   85070:	d96c      	bls.n	8514c <__udivmoddi4+0xf0>
   85072:	fab2 fe82 	clz	lr, r2
   85076:	f1be 0f00 	cmp.w	lr, #0
   8507a:	d00b      	beq.n	85094 <__udivmoddi4+0x38>
   8507c:	f1ce 0c20 	rsb	ip, lr, #32
   85080:	fa01 f60e 	lsl.w	r6, r1, lr
   85084:	fa20 fc0c 	lsr.w	ip, r0, ip
   85088:	fa02 f70e 	lsl.w	r7, r2, lr
   8508c:	ea4c 0c06 	orr.w	ip, ip, r6
   85090:	fa00 f40e 	lsl.w	r4, r0, lr
   85094:	0c3a      	lsrs	r2, r7, #16
   85096:	fbbc f9f2 	udiv	r9, ip, r2
   8509a:	b2bb      	uxth	r3, r7
   8509c:	fb02 cc19 	mls	ip, r2, r9, ip
   850a0:	fb09 fa03 	mul.w	sl, r9, r3
   850a4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   850a8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   850ac:	45b2      	cmp	sl, r6
   850ae:	d90a      	bls.n	850c6 <__udivmoddi4+0x6a>
   850b0:	19f6      	adds	r6, r6, r7
   850b2:	f109 31ff 	add.w	r1, r9, #4294967295
   850b6:	f080 8125 	bcs.w	85304 <__udivmoddi4+0x2a8>
   850ba:	45b2      	cmp	sl, r6
   850bc:	f240 8122 	bls.w	85304 <__udivmoddi4+0x2a8>
   850c0:	f1a9 0902 	sub.w	r9, r9, #2
   850c4:	443e      	add	r6, r7
   850c6:	eba6 060a 	sub.w	r6, r6, sl
   850ca:	fbb6 f0f2 	udiv	r0, r6, r2
   850ce:	fb02 6610 	mls	r6, r2, r0, r6
   850d2:	fb00 f303 	mul.w	r3, r0, r3
   850d6:	b2a4      	uxth	r4, r4
   850d8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   850dc:	42a3      	cmp	r3, r4
   850de:	d909      	bls.n	850f4 <__udivmoddi4+0x98>
   850e0:	19e4      	adds	r4, r4, r7
   850e2:	f100 32ff 	add.w	r2, r0, #4294967295
   850e6:	f080 810b 	bcs.w	85300 <__udivmoddi4+0x2a4>
   850ea:	42a3      	cmp	r3, r4
   850ec:	f240 8108 	bls.w	85300 <__udivmoddi4+0x2a4>
   850f0:	3802      	subs	r0, #2
   850f2:	443c      	add	r4, r7
   850f4:	2100      	movs	r1, #0
   850f6:	1ae4      	subs	r4, r4, r3
   850f8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   850fc:	2d00      	cmp	r5, #0
   850fe:	d062      	beq.n	851c6 <__udivmoddi4+0x16a>
   85100:	2300      	movs	r3, #0
   85102:	fa24 f40e 	lsr.w	r4, r4, lr
   85106:	602c      	str	r4, [r5, #0]
   85108:	606b      	str	r3, [r5, #4]
   8510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8510e:	428b      	cmp	r3, r1
   85110:	d907      	bls.n	85122 <__udivmoddi4+0xc6>
   85112:	2d00      	cmp	r5, #0
   85114:	d055      	beq.n	851c2 <__udivmoddi4+0x166>
   85116:	2100      	movs	r1, #0
   85118:	e885 0041 	stmia.w	r5, {r0, r6}
   8511c:	4608      	mov	r0, r1
   8511e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85122:	fab3 f183 	clz	r1, r3
   85126:	2900      	cmp	r1, #0
   85128:	f040 808f 	bne.w	8524a <__udivmoddi4+0x1ee>
   8512c:	42b3      	cmp	r3, r6
   8512e:	d302      	bcc.n	85136 <__udivmoddi4+0xda>
   85130:	4282      	cmp	r2, r0
   85132:	f200 80fc 	bhi.w	8532e <__udivmoddi4+0x2d2>
   85136:	1a84      	subs	r4, r0, r2
   85138:	eb66 0603 	sbc.w	r6, r6, r3
   8513c:	2001      	movs	r0, #1
   8513e:	46b4      	mov	ip, r6
   85140:	2d00      	cmp	r5, #0
   85142:	d040      	beq.n	851c6 <__udivmoddi4+0x16a>
   85144:	e885 1010 	stmia.w	r5, {r4, ip}
   85148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8514c:	b912      	cbnz	r2, 85154 <__udivmoddi4+0xf8>
   8514e:	2701      	movs	r7, #1
   85150:	fbb7 f7f2 	udiv	r7, r7, r2
   85154:	fab7 fe87 	clz	lr, r7
   85158:	f1be 0f00 	cmp.w	lr, #0
   8515c:	d135      	bne.n	851ca <__udivmoddi4+0x16e>
   8515e:	2101      	movs	r1, #1
   85160:	1bf6      	subs	r6, r6, r7
   85162:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85166:	fa1f f887 	uxth.w	r8, r7
   8516a:	fbb6 f2fc 	udiv	r2, r6, ip
   8516e:	fb0c 6612 	mls	r6, ip, r2, r6
   85172:	fb08 f002 	mul.w	r0, r8, r2
   85176:	0c23      	lsrs	r3, r4, #16
   85178:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8517c:	42b0      	cmp	r0, r6
   8517e:	d907      	bls.n	85190 <__udivmoddi4+0x134>
   85180:	19f6      	adds	r6, r6, r7
   85182:	f102 33ff 	add.w	r3, r2, #4294967295
   85186:	d202      	bcs.n	8518e <__udivmoddi4+0x132>
   85188:	42b0      	cmp	r0, r6
   8518a:	f200 80d2 	bhi.w	85332 <__udivmoddi4+0x2d6>
   8518e:	461a      	mov	r2, r3
   85190:	1a36      	subs	r6, r6, r0
   85192:	fbb6 f0fc 	udiv	r0, r6, ip
   85196:	fb0c 6610 	mls	r6, ip, r0, r6
   8519a:	fb08 f800 	mul.w	r8, r8, r0
   8519e:	b2a3      	uxth	r3, r4
   851a0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   851a4:	45a0      	cmp	r8, r4
   851a6:	d907      	bls.n	851b8 <__udivmoddi4+0x15c>
   851a8:	19e4      	adds	r4, r4, r7
   851aa:	f100 33ff 	add.w	r3, r0, #4294967295
   851ae:	d202      	bcs.n	851b6 <__udivmoddi4+0x15a>
   851b0:	45a0      	cmp	r8, r4
   851b2:	f200 80b9 	bhi.w	85328 <__udivmoddi4+0x2cc>
   851b6:	4618      	mov	r0, r3
   851b8:	eba4 0408 	sub.w	r4, r4, r8
   851bc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   851c0:	e79c      	b.n	850fc <__udivmoddi4+0xa0>
   851c2:	4629      	mov	r1, r5
   851c4:	4628      	mov	r0, r5
   851c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   851ca:	fa07 f70e 	lsl.w	r7, r7, lr
   851ce:	f1ce 0320 	rsb	r3, lr, #32
   851d2:	fa26 f203 	lsr.w	r2, r6, r3
   851d6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   851da:	fbb2 f1fc 	udiv	r1, r2, ip
   851de:	fa1f f887 	uxth.w	r8, r7
   851e2:	fb0c 2211 	mls	r2, ip, r1, r2
   851e6:	fa06 f60e 	lsl.w	r6, r6, lr
   851ea:	fa20 f303 	lsr.w	r3, r0, r3
   851ee:	fb01 f908 	mul.w	r9, r1, r8
   851f2:	4333      	orrs	r3, r6
   851f4:	0c1e      	lsrs	r6, r3, #16
   851f6:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   851fa:	45b1      	cmp	r9, r6
   851fc:	fa00 f40e 	lsl.w	r4, r0, lr
   85200:	d909      	bls.n	85216 <__udivmoddi4+0x1ba>
   85202:	19f6      	adds	r6, r6, r7
   85204:	f101 32ff 	add.w	r2, r1, #4294967295
   85208:	f080 808c 	bcs.w	85324 <__udivmoddi4+0x2c8>
   8520c:	45b1      	cmp	r9, r6
   8520e:	f240 8089 	bls.w	85324 <__udivmoddi4+0x2c8>
   85212:	3902      	subs	r1, #2
   85214:	443e      	add	r6, r7
   85216:	eba6 0609 	sub.w	r6, r6, r9
   8521a:	fbb6 f0fc 	udiv	r0, r6, ip
   8521e:	fb0c 6210 	mls	r2, ip, r0, r6
   85222:	fb00 f908 	mul.w	r9, r0, r8
   85226:	b29e      	uxth	r6, r3
   85228:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8522c:	45b1      	cmp	r9, r6
   8522e:	d907      	bls.n	85240 <__udivmoddi4+0x1e4>
   85230:	19f6      	adds	r6, r6, r7
   85232:	f100 33ff 	add.w	r3, r0, #4294967295
   85236:	d271      	bcs.n	8531c <__udivmoddi4+0x2c0>
   85238:	45b1      	cmp	r9, r6
   8523a:	d96f      	bls.n	8531c <__udivmoddi4+0x2c0>
   8523c:	3802      	subs	r0, #2
   8523e:	443e      	add	r6, r7
   85240:	eba6 0609 	sub.w	r6, r6, r9
   85244:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85248:	e78f      	b.n	8516a <__udivmoddi4+0x10e>
   8524a:	f1c1 0720 	rsb	r7, r1, #32
   8524e:	fa22 f807 	lsr.w	r8, r2, r7
   85252:	408b      	lsls	r3, r1
   85254:	ea48 0303 	orr.w	r3, r8, r3
   85258:	fa26 f407 	lsr.w	r4, r6, r7
   8525c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   85260:	fbb4 f9fe 	udiv	r9, r4, lr
   85264:	fa1f fc83 	uxth.w	ip, r3
   85268:	fb0e 4419 	mls	r4, lr, r9, r4
   8526c:	408e      	lsls	r6, r1
   8526e:	fa20 f807 	lsr.w	r8, r0, r7
   85272:	fb09 fa0c 	mul.w	sl, r9, ip
   85276:	ea48 0806 	orr.w	r8, r8, r6
   8527a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8527e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85282:	45a2      	cmp	sl, r4
   85284:	fa02 f201 	lsl.w	r2, r2, r1
   85288:	fa00 f601 	lsl.w	r6, r0, r1
   8528c:	d908      	bls.n	852a0 <__udivmoddi4+0x244>
   8528e:	18e4      	adds	r4, r4, r3
   85290:	f109 30ff 	add.w	r0, r9, #4294967295
   85294:	d244      	bcs.n	85320 <__udivmoddi4+0x2c4>
   85296:	45a2      	cmp	sl, r4
   85298:	d942      	bls.n	85320 <__udivmoddi4+0x2c4>
   8529a:	f1a9 0902 	sub.w	r9, r9, #2
   8529e:	441c      	add	r4, r3
   852a0:	eba4 040a 	sub.w	r4, r4, sl
   852a4:	fbb4 f0fe 	udiv	r0, r4, lr
   852a8:	fb0e 4410 	mls	r4, lr, r0, r4
   852ac:	fb00 fc0c 	mul.w	ip, r0, ip
   852b0:	fa1f f888 	uxth.w	r8, r8
   852b4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   852b8:	45a4      	cmp	ip, r4
   852ba:	d907      	bls.n	852cc <__udivmoddi4+0x270>
   852bc:	18e4      	adds	r4, r4, r3
   852be:	f100 3eff 	add.w	lr, r0, #4294967295
   852c2:	d229      	bcs.n	85318 <__udivmoddi4+0x2bc>
   852c4:	45a4      	cmp	ip, r4
   852c6:	d927      	bls.n	85318 <__udivmoddi4+0x2bc>
   852c8:	3802      	subs	r0, #2
   852ca:	441c      	add	r4, r3
   852cc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   852d0:	fba0 8902 	umull	r8, r9, r0, r2
   852d4:	eba4 0c0c 	sub.w	ip, r4, ip
   852d8:	45cc      	cmp	ip, r9
   852da:	46c2      	mov	sl, r8
   852dc:	46ce      	mov	lr, r9
   852de:	d315      	bcc.n	8530c <__udivmoddi4+0x2b0>
   852e0:	d012      	beq.n	85308 <__udivmoddi4+0x2ac>
   852e2:	b155      	cbz	r5, 852fa <__udivmoddi4+0x29e>
   852e4:	ebb6 030a 	subs.w	r3, r6, sl
   852e8:	eb6c 060e 	sbc.w	r6, ip, lr
   852ec:	fa06 f707 	lsl.w	r7, r6, r7
   852f0:	40cb      	lsrs	r3, r1
   852f2:	431f      	orrs	r7, r3
   852f4:	40ce      	lsrs	r6, r1
   852f6:	602f      	str	r7, [r5, #0]
   852f8:	606e      	str	r6, [r5, #4]
   852fa:	2100      	movs	r1, #0
   852fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85300:	4610      	mov	r0, r2
   85302:	e6f7      	b.n	850f4 <__udivmoddi4+0x98>
   85304:	4689      	mov	r9, r1
   85306:	e6de      	b.n	850c6 <__udivmoddi4+0x6a>
   85308:	4546      	cmp	r6, r8
   8530a:	d2ea      	bcs.n	852e2 <__udivmoddi4+0x286>
   8530c:	ebb8 0a02 	subs.w	sl, r8, r2
   85310:	eb69 0e03 	sbc.w	lr, r9, r3
   85314:	3801      	subs	r0, #1
   85316:	e7e4      	b.n	852e2 <__udivmoddi4+0x286>
   85318:	4670      	mov	r0, lr
   8531a:	e7d7      	b.n	852cc <__udivmoddi4+0x270>
   8531c:	4618      	mov	r0, r3
   8531e:	e78f      	b.n	85240 <__udivmoddi4+0x1e4>
   85320:	4681      	mov	r9, r0
   85322:	e7bd      	b.n	852a0 <__udivmoddi4+0x244>
   85324:	4611      	mov	r1, r2
   85326:	e776      	b.n	85216 <__udivmoddi4+0x1ba>
   85328:	3802      	subs	r0, #2
   8532a:	443c      	add	r4, r7
   8532c:	e744      	b.n	851b8 <__udivmoddi4+0x15c>
   8532e:	4608      	mov	r0, r1
   85330:	e706      	b.n	85140 <__udivmoddi4+0xe4>
   85332:	3a02      	subs	r2, #2
   85334:	443e      	add	r6, r7
   85336:	e72b      	b.n	85190 <__udivmoddi4+0x134>

00085338 <__aeabi_idiv0>:
   85338:	4770      	bx	lr
   8533a:	bf00      	nop
   8533c:	31525349 	.word	0x31525349
   85340:	00000000 	.word	0x00000000
   85344:	000a7325 	.word	0x000a7325
   85348:	386e6970 	.word	0x386e6970
   8534c:	20534920 	.word	0x20534920
   85350:	48474948 	.word	0x48474948
   85354:	00000000 	.word	0x00000000
   85358:	386e6970 	.word	0x386e6970
   8535c:	20534920 	.word	0x20534920
   85360:	00574f4c 	.word	0x00574f4c
   85364:	32525349 	.word	0x32525349
   85368:	00000000 	.word	0x00000000
   8536c:	374e4950 	.word	0x374e4950
   85370:	20534920 	.word	0x20534920
   85374:	48474948 	.word	0x48474948
   85378:	00000000 	.word	0x00000000
   8537c:	374e4950 	.word	0x374e4950
   85380:	20534920 	.word	0x20534920
   85384:	00574f4c 	.word	0x00574f4c
   85388:	736e6f43 	.word	0x736e6f43
   8538c:	20656c6f 	.word	0x20656c6f
   85390:	64616572 	.word	0x64616572
   85394:	00000a79 	.word	0x00000a79
   85398:	3d3d3d3d 	.word	0x3d3d3d3d
   8539c:	3d3d3d3d 	.word	0x3d3d3d3d
   853a0:	3d3d3d3d 	.word	0x3d3d3d3d
   853a4:	00000a3d 	.word	0x00000a3d
   853a8:	6b736174 	.word	0x6b736174
   853ac:	00000031 	.word	0x00000031
   853b0:	6b736174 	.word	0x6b736174
   853b4:	00000032 	.word	0x00000032
   853b8:	454c4449 	.word	0x454c4449
   853bc:	00000000 	.word	0x00000000
   853c0:	20726d54 	.word	0x20726d54
   853c4:	00637653 	.word	0x00637653

000853c8 <_global_impure_ptr>:
   853c8:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   853d8:	46454443 00000000 33323130 37363534     CDEF....01234567
   853e8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   853f8:	0000296c                                l)..

000853fc <blanks.7217>:
   853fc:	20202020 20202020 20202020 20202020                     

0008540c <zeroes.7218>:
   8540c:	30303030 30303030 30303030 30303030     0000000000000000
   8541c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008542c <_ctype_>:
   8542c:	20202000 20202020 28282020 20282828     .         ((((( 
   8543c:	20202020 20202020 20202020 20202020                     
   8544c:	10108820 10101010 10101010 10101010      ...............
   8545c:	04040410 04040404 10040404 10101010     ................
   8546c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8547c:	01010101 01010101 01010101 10101010     ................
   8548c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8549c:	02020202 02020202 02020202 10101010     ................
   854ac:	00000020 00000000 00000000 00000000      ...............
	...

00085530 <_init>:
   85530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85532:	bf00      	nop
   85534:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85536:	bc08      	pop	{r3}
   85538:	469e      	mov	lr, r3
   8553a:	4770      	bx	lr

0008553c <__init_array_start>:
   8553c:	00083711 	.word	0x00083711

00085540 <__frame_dummy_init_array_entry>:
   85540:	00080119                                ....

00085544 <_fini>:
   85544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85546:	bf00      	nop
   85548:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8554a:	bc08      	pop	{r3}
   8554c:	469e      	mov	lr, r3
   8554e:	4770      	bx	lr

00085550 <__fini_array_start>:
   85550:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <_impure_ptr>:
2007013c:	20070140                                @.. 

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	2007ad00                                ... 

2007056c <__global_locale>:
2007056c:	00000043 00000000 00000000 00000000     C...............
	...
2007058c:	00000043 00000000 00000000 00000000     C...............
	...
200705ac:	00000043 00000000 00000000 00000000     C...............
	...
200705cc:	00000043 00000000 00000000 00000000     C...............
	...
200705ec:	00000043 00000000 00000000 00000000     C...............
	...
2007060c:	00000043 00000000 00000000 00000000     C...............
	...
2007062c:	00000043 00000000 00000000 00000000     C...............
	...
2007064c:	00084d99 000846e5 00000000 0008542c     .M...F......,T..
2007065c:	00085428 00085340 00085340 00085340     (T..@S..@S..@S..
2007066c:	00085340 00085340 00085340 00085340     @S..@S..@S..@S..
2007067c:	00085340 00085340 ffffffff ffffffff     @S..@S..........
2007068c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706b4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d8 <__malloc_av_>:
	...
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 

20070ae0 <__malloc_sbrk_base>:
20070ae0:	ffffffff                                ....

20070ae4 <__malloc_trim_threshold>:
20070ae4:	00020000                                ....

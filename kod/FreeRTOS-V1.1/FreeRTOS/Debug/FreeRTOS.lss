
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005558  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085558  00085558  00015558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  00085560  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a240  20070af0  00086050  00020af0  2**3
                  ALLOC
  4 .stack        00002000  2007ad30  00090290  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b82e  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000410d  00000000  00000000  0003c3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000071ff  00000000  00000000  000404ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ce0  00000000  00000000  000476ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000d40  00000000  00000000  0004838c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001a6fd  00000000  00000000  000490cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0001138c  00000000  00000000  000637c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069902  00000000  00000000  00074b55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002a70  00000000  00000000  000de458  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	30 cd 07 20 79 22 08 00 75 22 08 00 75 22 08 00     0.. y"..u"..u"..
   80010:	75 22 08 00 75 22 08 00 75 22 08 00 00 00 00 00     u"..u"..u"......
	...
   8002c:	f5 07 08 00 75 22 08 00 00 00 00 00 75 08 08 00     ....u"......u...
   8003c:	b1 08 08 00 75 22 08 00 75 22 08 00 75 22 08 00     ....u"..u"..u"..
   8004c:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   8005c:	75 22 08 00 75 22 08 00 75 22 08 00 00 00 00 00     u"..u"..u"......
   8006c:	e9 20 08 00 fd 20 08 00 11 21 08 00 25 21 08 00     . ... ...!..%!..
	...
   80084:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   80094:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   800a4:	00 00 00 00 75 22 08 00 75 22 08 00 75 22 08 00     ....u"..u"..u"..
   800b4:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   800c4:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   800d4:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..
   800e4:	75 22 08 00 75 22 08 00 75 22 08 00 75 22 08 00     u"..u"..u"..u"..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	00085560 	.word	0x00085560

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00085560 	.word	0x00085560
   80154:	20070af4 	.word	0x20070af4
   80158:	00085560 	.word	0x00085560
   8015c:	00000000 	.word	0x00000000

00080160 <my_ISR>:
#include "../initializations/pins_init.h"

int pVal = -1;

void my_ISR(void)
{
   80160:	b508      	push	{r3, lr}
	printf("%s", "gh");
   80162:	4909      	ldr	r1, [pc, #36]	; (80188 <my_ISR+0x28>)
   80164:	4809      	ldr	r0, [pc, #36]	; (8018c <my_ISR+0x2c>)
   80166:	4b0a      	ldr	r3, [pc, #40]	; (80190 <my_ISR+0x30>)
   80168:	4798      	blx	r3
	ioport_set_pin_level(pin11,pVal);
   8016a:	4b0a      	ldr	r3, [pc, #40]	; (80194 <my_ISR+0x34>)
   8016c:	681b      	ldr	r3, [r3, #0]
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   8016e:	b933      	cbnz	r3, 8017e <my_ISR+0x1e>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80170:	2180      	movs	r1, #128	; 0x80
   80172:	4a09      	ldr	r2, [pc, #36]	; (80198 <my_ISR+0x38>)
   80174:	6351      	str	r1, [r2, #52]	; 0x34
	pVal = ~pVal;
   80176:	43db      	mvns	r3, r3
   80178:	4a06      	ldr	r2, [pc, #24]	; (80194 <my_ISR+0x34>)
   8017a:	6013      	str	r3, [r2, #0]
   8017c:	bd08      	pop	{r3, pc}
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8017e:	2180      	movs	r1, #128	; 0x80
   80180:	4a05      	ldr	r2, [pc, #20]	; (80198 <my_ISR+0x38>)
   80182:	6311      	str	r1, [r2, #48]	; 0x30
   80184:	e7f7      	b.n	80176 <my_ISR+0x16>
   80186:	bf00      	nop
   80188:	00085384 	.word	0x00085384
   8018c:	00085388 	.word	0x00085388
   80190:	000824f1 	.word	0x000824f1
   80194:	2007012c 	.word	0x2007012c
   80198:	400e1400 	.word	0x400e1400

0008019c <ISR2>:
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	Pio *port = arch_ioport_pin_to_base(pin);
	ioport_port_mask_t mask = arch_ioport_pin_to_mask(pin);

	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   8019c:	4b05      	ldr	r3, [pc, #20]	; (801b4 <ISR2+0x18>)
   8019e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   801a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
		port->PIO_CODR = mask;
   801a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   801a8:	4b02      	ldr	r3, [pc, #8]	; (801b4 <ISR2+0x18>)
   801aa:	bf14      	ite	ne
   801ac:	635a      	strne	r2, [r3, #52]	; 0x34
	} else {
		port->PIO_SODR = mask;
   801ae:	631a      	streq	r2, [r3, #48]	; 0x30
   801b0:	4770      	bx	lr
   801b2:	bf00      	nop
   801b4:	400e0e00 	.word	0x400e0e00

000801b8 <ISR3>:
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   801b8:	4b05      	ldr	r3, [pc, #20]	; (801d0 <ISR3+0x18>)
   801ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   801bc:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
		port->PIO_CODR = mask;
   801c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   801c4:	4b02      	ldr	r3, [pc, #8]	; (801d0 <ISR3+0x18>)
   801c6:	bf14      	ite	ne
   801c8:	635a      	strne	r2, [r3, #52]	; 0x34
		port->PIO_SODR = mask;
   801ca:	631a      	streq	r2, [r3, #48]	; 0x30
   801cc:	4770      	bx	lr
   801ce:	bf00      	nop
   801d0:	400e1200 	.word	0x400e1200

000801d4 <ISR4>:
	if (port->PIO_PDSR & arch_ioport_pin_to_mask(pin)) {
   801d4:	4b05      	ldr	r3, [pc, #20]	; (801ec <ISR4+0x18>)
   801d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   801d8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
		port->PIO_CODR = mask;
   801dc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   801e0:	4b02      	ldr	r3, [pc, #8]	; (801ec <ISR4+0x18>)
   801e2:	bf14      	ite	ne
   801e4:	635a      	strne	r2, [r3, #52]	; 0x34
		port->PIO_SODR = mask;
   801e6:	631a      	streq	r2, [r3, #48]	; 0x30
   801e8:	4770      	bx	lr
   801ea:	bf00      	nop
   801ec:	400e1200 	.word	0x400e1200

000801f0 <task2>:
* Function: task2
* -------------------
* Performs an action every xTimeT2 milliseconds
*/
void task2(void *pvParamters)
{
   801f0:	b570      	push	{r4, r5, r6, lr}
   801f2:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = xTimeT2/portTICK_RATE_MS; /* set ticks (xTimeT2) in milliseconds */
	xLastWakeTime = xTaskGetTickCount();					/* the count of ticks since vTaskStartScheduler was called */
   801f4:	4b0d      	ldr	r3, [pc, #52]	; (8022c <task2+0x3c>)
   801f6:	4798      	blx	r3
   801f8:	9001      	str	r0, [sp, #4]
	
	while(1) /* the task must be looping infinitely */
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* constant period, independent of execution time */
   801fa:	4e0d      	ldr	r6, [pc, #52]	; (80230 <task2+0x40>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   801fc:	4d0d      	ldr	r5, [pc, #52]	; (80234 <task2+0x44>)
   801fe:	f44f 7480 	mov.w	r4, #256	; 0x100
   80202:	e000      	b.n	80206 <task2+0x16>
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80204:	636c      	str	r4, [r5, #52]	; 0x34
   80206:	2114      	movs	r1, #20
   80208:	a801      	add	r0, sp, #4
   8020a:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8020c:	632c      	str	r4, [r5, #48]	; 0x30
		//vTaskDelay(50);								 /* no constant period, dependent of execution time */
		
		
		/* ----------------------------------- simulate a function/task that is working ----------------------------------- */
		ioport_set_pin_level(pin12, HIGH); /* set pin to HIGH to indicate that the task has entered the running state */
		volatile int j=0;
   8020e:	2300      	movs	r3, #0
   80210:	9300      	str	r3, [sp, #0]
   80212:	f242 7210 	movw	r2, #10000	; 0x2710
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80216:	4808      	ldr	r0, [pc, #32]	; (80238 <task2+0x48>)
   80218:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8021c:	6341      	str	r1, [r0, #52]	; 0x34
		for (int i=0; i < 10000; i++)
		{
			ioport_set_pin_level(pin13, LOW);
			j++;
   8021e:	9b00      	ldr	r3, [sp, #0]
   80220:	3301      	adds	r3, #1
   80222:	9300      	str	r3, [sp, #0]
		for (int i=0; i < 10000; i++)
   80224:	3a01      	subs	r2, #1
   80226:	d1f9      	bne.n	8021c <task2+0x2c>
   80228:	e7ec      	b.n	80204 <task2+0x14>
   8022a:	bf00      	nop
   8022c:	000812c5 	.word	0x000812c5
   80230:	0008150d 	.word	0x0008150d
   80234:	400e1400 	.word	0x400e1400
   80238:	400e1000 	.word	0x400e1000

0008023c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8023c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80240:	b980      	cbnz	r0, 80264 <_read+0x28>
   80242:	460c      	mov	r4, r1
   80244:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80246:	2a00      	cmp	r2, #0
   80248:	dd0f      	ble.n	8026a <_read+0x2e>
   8024a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8024c:	4e08      	ldr	r6, [pc, #32]	; (80270 <_read+0x34>)
   8024e:	4d09      	ldr	r5, [pc, #36]	; (80274 <_read+0x38>)
   80250:	6830      	ldr	r0, [r6, #0]
   80252:	4621      	mov	r1, r4
   80254:	682b      	ldr	r3, [r5, #0]
   80256:	4798      	blx	r3
		ptr++;
   80258:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8025a:	42bc      	cmp	r4, r7
   8025c:	d1f8      	bne.n	80250 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8025e:	4640      	mov	r0, r8
   80260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80264:	f04f 38ff 	mov.w	r8, #4294967295
   80268:	e7f9      	b.n	8025e <_read+0x22>
	for (; len > 0; --len) {
   8026a:	4680      	mov	r8, r0
   8026c:	e7f7      	b.n	8025e <_read+0x22>
   8026e:	bf00      	nop
   80270:	2007ad04 	.word	0x2007ad04
   80274:	2007acfc 	.word	0x2007acfc

00080278 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80278:	3801      	subs	r0, #1
   8027a:	2802      	cmp	r0, #2
   8027c:	d815      	bhi.n	802aa <_write+0x32>
{
   8027e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80282:	460e      	mov	r6, r1
   80284:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80286:	b19a      	cbz	r2, 802b0 <_write+0x38>
   80288:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8028a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 802c4 <_write+0x4c>
   8028e:	4f0c      	ldr	r7, [pc, #48]	; (802c0 <_write+0x48>)
   80290:	f8d8 0000 	ldr.w	r0, [r8]
   80294:	f815 1b01 	ldrb.w	r1, [r5], #1
   80298:	683b      	ldr	r3, [r7, #0]
   8029a:	4798      	blx	r3
   8029c:	2800      	cmp	r0, #0
   8029e:	db0a      	blt.n	802b6 <_write+0x3e>
   802a0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   802a2:	3c01      	subs	r4, #1
   802a4:	d1f4      	bne.n	80290 <_write+0x18>
   802a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   802aa:	f04f 30ff 	mov.w	r0, #4294967295
   802ae:	4770      	bx	lr
	for (; len != 0; --len) {
   802b0:	4610      	mov	r0, r2
   802b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   802b6:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   802ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802be:	bf00      	nop
   802c0:	2007ad00 	.word	0x2007ad00
   802c4:	2007ad04 	.word	0x2007ad04

000802c8 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802c8:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802ca:	23ac      	movs	r3, #172	; 0xac
   802cc:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802ce:	680b      	ldr	r3, [r1, #0]
   802d0:	684a      	ldr	r2, [r1, #4]
   802d2:	fbb3 f3f2 	udiv	r3, r3, r2
   802d6:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802d8:	1e5c      	subs	r4, r3, #1
   802da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802de:	4294      	cmp	r4, r2
   802e0:	d80b      	bhi.n	802fa <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   802e2:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802e4:	688b      	ldr	r3, [r1, #8]
   802e6:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802e8:	f240 2302 	movw	r3, #514	; 0x202
   802ec:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802f0:	2350      	movs	r3, #80	; 0x50
   802f2:	6003      	str	r3, [r0, #0]

	return 0;
   802f4:	2000      	movs	r0, #0
}
   802f6:	bc10      	pop	{r4}
   802f8:	4770      	bx	lr
		return 1;
   802fa:	2001      	movs	r0, #1
   802fc:	e7fb      	b.n	802f6 <uart_init+0x2e>

000802fe <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   802fe:	6943      	ldr	r3, [r0, #20]
   80300:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80304:	bf1a      	itte	ne
   80306:	61c1      	strne	r1, [r0, #28]
	return 0;
   80308:	2000      	movne	r0, #0
		return 1;
   8030a:	2001      	moveq	r0, #1
}
   8030c:	4770      	bx	lr

0008030e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8030e:	6943      	ldr	r3, [r0, #20]
   80310:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80314:	bf1d      	ittte	ne
   80316:	6983      	ldrne	r3, [r0, #24]
   80318:	700b      	strbne	r3, [r1, #0]
	return 0;
   8031a:	2000      	movne	r0, #0
		return 1;
   8031c:	2001      	moveq	r0, #1
}
   8031e:	4770      	bx	lr

00080320 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80320:	6943      	ldr	r3, [r0, #20]
   80322:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80326:	bf1d      	ittte	ne
   80328:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8032c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8032e:	2000      	movne	r0, #0
		return 1;
   80330:	2001      	moveq	r0, #1
}
   80332:	4770      	bx	lr

00080334 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80334:	6943      	ldr	r3, [r0, #20]
   80336:	f013 0f01 	tst.w	r3, #1
   8033a:	d005      	beq.n	80348 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8033c:	6983      	ldr	r3, [r0, #24]
   8033e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80342:	600b      	str	r3, [r1, #0]

	return 0;
   80344:	2000      	movs	r0, #0
   80346:	4770      	bx	lr
		return 1;
   80348:	2001      	movs	r0, #1
}
   8034a:	4770      	bx	lr

0008034c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8034c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8034e:	b083      	sub	sp, #12
   80350:	4604      	mov	r4, r0
   80352:	460d      	mov	r5, r1
	uint32_t val = 0;
   80354:	2300      	movs	r3, #0
   80356:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80358:	4b20      	ldr	r3, [pc, #128]	; (803dc <usart_serial_getchar+0x90>)
   8035a:	4298      	cmp	r0, r3
   8035c:	d00d      	beq.n	8037a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8035e:	4b20      	ldr	r3, [pc, #128]	; (803e0 <usart_serial_getchar+0x94>)
   80360:	4298      	cmp	r0, r3
   80362:	d012      	beq.n	8038a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80364:	4b1f      	ldr	r3, [pc, #124]	; (803e4 <usart_serial_getchar+0x98>)
   80366:	4298      	cmp	r0, r3
   80368:	d019      	beq.n	8039e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8036a:	4b1f      	ldr	r3, [pc, #124]	; (803e8 <usart_serial_getchar+0x9c>)
   8036c:	429c      	cmp	r4, r3
   8036e:	d020      	beq.n	803b2 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80370:	4b1e      	ldr	r3, [pc, #120]	; (803ec <usart_serial_getchar+0xa0>)
   80372:	429c      	cmp	r4, r3
   80374:	d027      	beq.n	803c6 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80376:	b003      	add	sp, #12
   80378:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8037a:	461f      	mov	r7, r3
   8037c:	4e1c      	ldr	r6, [pc, #112]	; (803f0 <usart_serial_getchar+0xa4>)
   8037e:	4629      	mov	r1, r5
   80380:	4638      	mov	r0, r7
   80382:	47b0      	blx	r6
   80384:	2800      	cmp	r0, #0
   80386:	d1fa      	bne.n	8037e <usart_serial_getchar+0x32>
   80388:	e7ef      	b.n	8036a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8038a:	461f      	mov	r7, r3
   8038c:	4e19      	ldr	r6, [pc, #100]	; (803f4 <usart_serial_getchar+0xa8>)
   8038e:	a901      	add	r1, sp, #4
   80390:	4638      	mov	r0, r7
   80392:	47b0      	blx	r6
   80394:	2800      	cmp	r0, #0
   80396:	d1fa      	bne.n	8038e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80398:	9b01      	ldr	r3, [sp, #4]
   8039a:	702b      	strb	r3, [r5, #0]
   8039c:	e7e8      	b.n	80370 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8039e:	461e      	mov	r6, r3
   803a0:	4c14      	ldr	r4, [pc, #80]	; (803f4 <usart_serial_getchar+0xa8>)
   803a2:	a901      	add	r1, sp, #4
   803a4:	4630      	mov	r0, r6
   803a6:	47a0      	blx	r4
   803a8:	2800      	cmp	r0, #0
   803aa:	d1fa      	bne.n	803a2 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   803ac:	9b01      	ldr	r3, [sp, #4]
   803ae:	702b      	strb	r3, [r5, #0]
   803b0:	e7e1      	b.n	80376 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   803b2:	461e      	mov	r6, r3
   803b4:	4c0f      	ldr	r4, [pc, #60]	; (803f4 <usart_serial_getchar+0xa8>)
   803b6:	a901      	add	r1, sp, #4
   803b8:	4630      	mov	r0, r6
   803ba:	47a0      	blx	r4
   803bc:	2800      	cmp	r0, #0
   803be:	d1fa      	bne.n	803b6 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   803c0:	9b01      	ldr	r3, [sp, #4]
   803c2:	702b      	strb	r3, [r5, #0]
   803c4:	e7d7      	b.n	80376 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   803c6:	461e      	mov	r6, r3
   803c8:	4c0a      	ldr	r4, [pc, #40]	; (803f4 <usart_serial_getchar+0xa8>)
   803ca:	a901      	add	r1, sp, #4
   803cc:	4630      	mov	r0, r6
   803ce:	47a0      	blx	r4
   803d0:	2800      	cmp	r0, #0
   803d2:	d1fa      	bne.n	803ca <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   803d4:	9b01      	ldr	r3, [sp, #4]
   803d6:	702b      	strb	r3, [r5, #0]
}
   803d8:	e7cd      	b.n	80376 <usart_serial_getchar+0x2a>
   803da:	bf00      	nop
   803dc:	400e0800 	.word	0x400e0800
   803e0:	40098000 	.word	0x40098000
   803e4:	4009c000 	.word	0x4009c000
   803e8:	400a0000 	.word	0x400a0000
   803ec:	400a4000 	.word	0x400a4000
   803f0:	0008030f 	.word	0x0008030f
   803f4:	00080335 	.word	0x00080335

000803f8 <usart_serial_putchar>:
{
   803f8:	b570      	push	{r4, r5, r6, lr}
   803fa:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   803fc:	4b1e      	ldr	r3, [pc, #120]	; (80478 <usart_serial_putchar+0x80>)
   803fe:	4298      	cmp	r0, r3
   80400:	d00d      	beq.n	8041e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80402:	4b1e      	ldr	r3, [pc, #120]	; (8047c <usart_serial_putchar+0x84>)
   80404:	4298      	cmp	r0, r3
   80406:	d013      	beq.n	80430 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80408:	4b1d      	ldr	r3, [pc, #116]	; (80480 <usart_serial_putchar+0x88>)
   8040a:	4298      	cmp	r0, r3
   8040c:	d019      	beq.n	80442 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   8040e:	4b1d      	ldr	r3, [pc, #116]	; (80484 <usart_serial_putchar+0x8c>)
   80410:	4298      	cmp	r0, r3
   80412:	d01f      	beq.n	80454 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80414:	4b1c      	ldr	r3, [pc, #112]	; (80488 <usart_serial_putchar+0x90>)
   80416:	4298      	cmp	r0, r3
   80418:	d025      	beq.n	80466 <usart_serial_putchar+0x6e>
	return 0;
   8041a:	2000      	movs	r0, #0
}
   8041c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   8041e:	461e      	mov	r6, r3
   80420:	4d1a      	ldr	r5, [pc, #104]	; (8048c <usart_serial_putchar+0x94>)
   80422:	4621      	mov	r1, r4
   80424:	4630      	mov	r0, r6
   80426:	47a8      	blx	r5
   80428:	2800      	cmp	r0, #0
   8042a:	d1fa      	bne.n	80422 <usart_serial_putchar+0x2a>
		return 1;
   8042c:	2001      	movs	r0, #1
   8042e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80430:	461e      	mov	r6, r3
   80432:	4d17      	ldr	r5, [pc, #92]	; (80490 <usart_serial_putchar+0x98>)
   80434:	4621      	mov	r1, r4
   80436:	4630      	mov	r0, r6
   80438:	47a8      	blx	r5
   8043a:	2800      	cmp	r0, #0
   8043c:	d1fa      	bne.n	80434 <usart_serial_putchar+0x3c>
		return 1;
   8043e:	2001      	movs	r0, #1
   80440:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80442:	461e      	mov	r6, r3
   80444:	4d12      	ldr	r5, [pc, #72]	; (80490 <usart_serial_putchar+0x98>)
   80446:	4621      	mov	r1, r4
   80448:	4630      	mov	r0, r6
   8044a:	47a8      	blx	r5
   8044c:	2800      	cmp	r0, #0
   8044e:	d1fa      	bne.n	80446 <usart_serial_putchar+0x4e>
		return 1;
   80450:	2001      	movs	r0, #1
   80452:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80454:	461e      	mov	r6, r3
   80456:	4d0e      	ldr	r5, [pc, #56]	; (80490 <usart_serial_putchar+0x98>)
   80458:	4621      	mov	r1, r4
   8045a:	4630      	mov	r0, r6
   8045c:	47a8      	blx	r5
   8045e:	2800      	cmp	r0, #0
   80460:	d1fa      	bne.n	80458 <usart_serial_putchar+0x60>
		return 1;
   80462:	2001      	movs	r0, #1
   80464:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80466:	461e      	mov	r6, r3
   80468:	4d09      	ldr	r5, [pc, #36]	; (80490 <usart_serial_putchar+0x98>)
   8046a:	4621      	mov	r1, r4
   8046c:	4630      	mov	r0, r6
   8046e:	47a8      	blx	r5
   80470:	2800      	cmp	r0, #0
   80472:	d1fa      	bne.n	8046a <usart_serial_putchar+0x72>
		return 1;
   80474:	2001      	movs	r0, #1
   80476:	bd70      	pop	{r4, r5, r6, pc}
   80478:	400e0800 	.word	0x400e0800
   8047c:	40098000 	.word	0x40098000
   80480:	4009c000 	.word	0x4009c000
   80484:	400a0000 	.word	0x400a0000
   80488:	400a4000 	.word	0x400a4000
   8048c:	000802ff 	.word	0x000802ff
   80490:	00080321 	.word	0x00080321

00080494 <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   80494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sysclk_init();
   80496:	4b1c      	ldr	r3, [pc, #112]	; (80508 <misc_init+0x74>)
   80498:	4798      	blx	r3
	board_init();
   8049a:	4b1c      	ldr	r3, [pc, #112]	; (8050c <misc_init+0x78>)
   8049c:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8049e:	200b      	movs	r0, #11
   804a0:	4c1b      	ldr	r4, [pc, #108]	; (80510 <misc_init+0x7c>)
   804a2:	47a0      	blx	r4
   804a4:	200c      	movs	r0, #12
   804a6:	47a0      	blx	r4
   804a8:	200d      	movs	r0, #13
   804aa:	47a0      	blx	r4
   804ac:	200e      	movs	r0, #14
   804ae:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804b0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 80520 <misc_init+0x8c>
   804b4:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
   804b8:	f8ce c010 	str.w	ip, [lr, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804bc:	f8ce c0a0 	str.w	ip, [lr, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804c0:	4a14      	ldr	r2, [pc, #80]	; (80514 <misc_init+0x80>)
   804c2:	f44f 7780 	mov.w	r7, #256	; 0x100
   804c6:	6117      	str	r7, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804c8:	f8c2 70a0 	str.w	r7, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804cc:	2680      	movs	r6, #128	; 0x80
   804ce:	6116      	str	r6, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804d0:	f8c2 60a0 	str.w	r6, [r2, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804d4:	4c10      	ldr	r4, [pc, #64]	; (80518 <misc_init+0x84>)
   804d6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   804da:	6125      	str	r5, [r4, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804dc:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804e0:	4b0e      	ldr	r3, [pc, #56]	; (8051c <misc_init+0x88>)
   804e2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
   804e6:	6118      	str	r0, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804e8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   804ec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   804f0:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   804f2:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   804f6:	f8ce c034 	str.w	ip, [lr, #52]	; 0x34
   804fa:	6357      	str	r7, [r2, #52]	; 0x34
   804fc:	6356      	str	r6, [r2, #52]	; 0x34
   804fe:	6365      	str	r5, [r4, #52]	; 0x34
   80500:	6358      	str	r0, [r3, #52]	; 0x34
   80502:	6359      	str	r1, [r3, #52]	; 0x34
	ioport_set_pin_level(pin9, LOW);
	ioport_set_pin_level(pin8, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   80504:	2000      	movs	r0, #0
   80506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80508:	00081d09 	.word	0x00081d09
   8050c:	00081d6d 	.word	0x00081d6d
   80510:	00082221 	.word	0x00082221
   80514:	400e1400 	.word	0x400e1400
   80518:	400e0e00 	.word	0x400e0e00
   8051c:	400e1200 	.word	0x400e1200
   80520:	400e1000 	.word	0x400e1000

00080524 <rtos_init>:
* Function: rtos_init
* -------------------
* initializes FreeRTOS by creating a number of tasks and starting the scheduler.
*/
int rtos_init (void)
{
   80524:	b570      	push	{r4, r5, r6, lr}
   80526:	b084      	sub	sp, #16
	/* -------------------------------- Used for testing purposes ------------------------------------- */
	xTaskCreate(task1, (const signed char * const) "task1", TASK_1_STACK_SIZE, NULL, TASK_1_PRIORITY, NULL);
   80528:	2400      	movs	r4, #0
   8052a:	9403      	str	r4, [sp, #12]
   8052c:	9402      	str	r4, [sp, #8]
   8052e:	9401      	str	r4, [sp, #4]
   80530:	2601      	movs	r6, #1
   80532:	9600      	str	r6, [sp, #0]
   80534:	4623      	mov	r3, r4
   80536:	f44f 7200 	mov.w	r2, #512	; 0x200
   8053a:	4909      	ldr	r1, [pc, #36]	; (80560 <rtos_init+0x3c>)
   8053c:	4809      	ldr	r0, [pc, #36]	; (80564 <rtos_init+0x40>)
   8053e:	4d0a      	ldr	r5, [pc, #40]	; (80568 <rtos_init+0x44>)
   80540:	47a8      	blx	r5
	xTaskCreate(task2, (const signed char * const) "task2", TASK_2_STACK_SIZE, NULL, TASK_2_PRIORITY, NULL);
   80542:	9403      	str	r4, [sp, #12]
   80544:	9402      	str	r4, [sp, #8]
   80546:	9401      	str	r4, [sp, #4]
   80548:	9600      	str	r6, [sp, #0]
   8054a:	4623      	mov	r3, r4
   8054c:	f44f 7200 	mov.w	r2, #512	; 0x200
   80550:	4906      	ldr	r1, [pc, #24]	; (8056c <rtos_init+0x48>)
   80552:	4807      	ldr	r0, [pc, #28]	; (80570 <rtos_init+0x4c>)
   80554:	47a8      	blx	r5
	/* ------------------------------------------------------------------------------------------------ */
	
	vTaskStartScheduler();
   80556:	4b07      	ldr	r3, [pc, #28]	; (80574 <rtos_init+0x50>)
   80558:	4798      	blx	r3
	return 0;
}
   8055a:	4620      	mov	r0, r4
   8055c:	b004      	add	sp, #16
   8055e:	bd70      	pop	{r4, r5, r6, pc}
   80560:	000853ac 	.word	0x000853ac
   80564:	000806dd 	.word	0x000806dd
   80568:	00081049 	.word	0x00081049
   8056c:	000853b4 	.word	0x000853b4
   80570:	000801f1 	.word	0x000801f1
   80574:	0008124d 	.word	0x0008124d

00080578 <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   80578:	b530      	push	{r4, r5, lr}
   8057a:	b085      	sub	sp, #20
   8057c:	2008      	movs	r0, #8
   8057e:	4d15      	ldr	r5, [pc, #84]	; (805d4 <console_init+0x5c>)
   80580:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80582:	4c15      	ldr	r4, [pc, #84]	; (805d8 <console_init+0x60>)
   80584:	4b15      	ldr	r3, [pc, #84]	; (805dc <console_init+0x64>)
   80586:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80588:	4a15      	ldr	r2, [pc, #84]	; (805e0 <console_init+0x68>)
   8058a:	4b16      	ldr	r3, [pc, #88]	; (805e4 <console_init+0x6c>)
   8058c:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8058e:	4a16      	ldr	r2, [pc, #88]	; (805e8 <console_init+0x70>)
   80590:	4b16      	ldr	r3, [pc, #88]	; (805ec <console_init+0x74>)
   80592:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80594:	4b16      	ldr	r3, [pc, #88]	; (805f0 <console_init+0x78>)
   80596:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80598:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8059c:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8059e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   805a2:	9303      	str	r3, [sp, #12]
   805a4:	2008      	movs	r0, #8
   805a6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   805a8:	a901      	add	r1, sp, #4
   805aa:	4620      	mov	r0, r4
   805ac:	4b11      	ldr	r3, [pc, #68]	; (805f4 <console_init+0x7c>)
   805ae:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   805b0:	4d11      	ldr	r5, [pc, #68]	; (805f8 <console_init+0x80>)
   805b2:	682b      	ldr	r3, [r5, #0]
   805b4:	2100      	movs	r1, #0
   805b6:	6898      	ldr	r0, [r3, #8]
   805b8:	4c10      	ldr	r4, [pc, #64]	; (805fc <console_init+0x84>)
   805ba:	47a0      	blx	r4
	setbuf(stdin, NULL);
   805bc:	682b      	ldr	r3, [r5, #0]
   805be:	2100      	movs	r1, #0
   805c0:	6858      	ldr	r0, [r3, #4]
   805c2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   805c4:	480e      	ldr	r0, [pc, #56]	; (80600 <console_init+0x88>)
   805c6:	4c0f      	ldr	r4, [pc, #60]	; (80604 <console_init+0x8c>)
   805c8:	47a0      	blx	r4
	printf("=============\n");
   805ca:	480f      	ldr	r0, [pc, #60]	; (80608 <console_init+0x90>)
   805cc:	47a0      	blx	r4
	return 0;
}
   805ce:	2000      	movs	r0, #0
   805d0:	b005      	add	sp, #20
   805d2:	bd30      	pop	{r4, r5, pc}
   805d4:	00082221 	.word	0x00082221
   805d8:	400e0800 	.word	0x400e0800
   805dc:	2007ad04 	.word	0x2007ad04
   805e0:	000803f9 	.word	0x000803f9
   805e4:	2007ad00 	.word	0x2007ad00
   805e8:	0008034d 	.word	0x0008034d
   805ec:	2007acfc 	.word	0x2007acfc
   805f0:	0501bd00 	.word	0x0501bd00
   805f4:	000802c9 	.word	0x000802c9
   805f8:	20070140 	.word	0x20070140
   805fc:	000826a1 	.word	0x000826a1
   80600:	0008538c 	.word	0x0008538c
   80604:	000824f1 	.word	0x000824f1
   80608:	0008539c 	.word	0x0008539c

0008060c <interrupt_init>:

/* author Gustav Dahlman */
int interrupt_init(void) 
{
   8060c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8060e:	b083      	sub	sp, #12
	pmc_enable_periph_clk(ID_PIOA);
   80610:	200b      	movs	r0, #11
   80612:	4b28      	ldr	r3, [pc, #160]	; (806b4 <interrupt_init+0xa8>)
   80614:	4798      	blx	r3
	 
	pio_set_input(PIOA, A0, NULL);
   80616:	4c28      	ldr	r4, [pc, #160]	; (806b8 <interrupt_init+0xac>)
   80618:	2200      	movs	r2, #0
   8061a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   8061e:	4620      	mov	r0, r4
   80620:	4f26      	ldr	r7, [pc, #152]	; (806bc <interrupt_init+0xb0>)
   80622:	47b8      	blx	r7
	pio_handler_set(PIOA, ID_PIOA, A0, PIO_IT_RE_OR_HL, my_ISR);
   80624:	4b26      	ldr	r3, [pc, #152]	; (806c0 <interrupt_init+0xb4>)
   80626:	9300      	str	r3, [sp, #0]
   80628:	2320      	movs	r3, #32
   8062a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   8062e:	210b      	movs	r1, #11
   80630:	4620      	mov	r0, r4
   80632:	4e24      	ldr	r6, [pc, #144]	; (806c4 <interrupt_init+0xb8>)
   80634:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, A0);
   80636:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   8063a:	4620      	mov	r0, r4
   8063c:	4d22      	ldr	r5, [pc, #136]	; (806c8 <interrupt_init+0xbc>)
   8063e:	47a8      	blx	r5
	
	pio_set_input(PIOA, A1, NULL);
   80640:	2200      	movs	r2, #0
   80642:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   80646:	4620      	mov	r0, r4
   80648:	47b8      	blx	r7
	pio_handler_set(PIOA, ID_PIOA, A1, PIO_IT_RE_OR_HL, ISR2);
   8064a:	4b20      	ldr	r3, [pc, #128]	; (806cc <interrupt_init+0xc0>)
   8064c:	9300      	str	r3, [sp, #0]
   8064e:	2320      	movs	r3, #32
   80650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   80654:	210b      	movs	r1, #11
   80656:	4620      	mov	r0, r4
   80658:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, A1);
   8065a:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
   8065e:	4620      	mov	r0, r4
   80660:	47a8      	blx	r5
	
	pio_set_input(PIOA, A2, NULL);
   80662:	2200      	movs	r2, #0
   80664:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80668:	4620      	mov	r0, r4
   8066a:	47b8      	blx	r7
	pio_handler_set(PIOA, ID_PIOA, A2, PIO_IT_RE_OR_HL, ISR3);
   8066c:	4b18      	ldr	r3, [pc, #96]	; (806d0 <interrupt_init+0xc4>)
   8066e:	9300      	str	r3, [sp, #0]
   80670:	2320      	movs	r3, #32
   80672:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80676:	210b      	movs	r1, #11
   80678:	4620      	mov	r0, r4
   8067a:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, A2);
   8067c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80680:	4620      	mov	r0, r4
   80682:	47a8      	blx	r5
	
	pio_set_input(PIOA, A3, NULL);
   80684:	2200      	movs	r2, #0
   80686:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   8068a:	4620      	mov	r0, r4
   8068c:	47b8      	blx	r7
	pio_handler_set(PIOA, ID_PIOA, A3, PIO_IT_RE_OR_HL, ISR4);
   8068e:	4b11      	ldr	r3, [pc, #68]	; (806d4 <interrupt_init+0xc8>)
   80690:	9300      	str	r3, [sp, #0]
   80692:	2320      	movs	r3, #32
   80694:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80698:	210b      	movs	r1, #11
   8069a:	4620      	mov	r0, r4
   8069c:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, A3);
   8069e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   806a2:	4620      	mov	r0, r4
   806a4:	47a8      	blx	r5

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   806a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   806aa:	4b0b      	ldr	r3, [pc, #44]	; (806d8 <interrupt_init+0xcc>)
   806ac:	601a      	str	r2, [r3, #0]
	
	NVIC_EnableIRQ(PIOA_IRQn);
	return 0;
}
   806ae:	2000      	movs	r0, #0
   806b0:	b003      	add	sp, #12
   806b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   806b4:	00082221 	.word	0x00082221
   806b8:	400e0e00 	.word	0x400e0e00
   806bc:	00081e2b 	.word	0x00081e2b
   806c0:	00080161 	.word	0x00080161
   806c4:	00082079 	.word	0x00082079
   806c8:	00081eb1 	.word	0x00081eb1
   806cc:	0008019d 	.word	0x0008019d
   806d0:	000801b9 	.word	0x000801b9
   806d4:	000801d5 	.word	0x000801d5
   806d8:	e000e100 	.word	0xe000e100

000806dc <task1>:
* Function: task1
* -------------------
* Performs an action every xTimeT1 milliseconds
*/
void task1(void *pvParamters)
{
   806dc:	b570      	push	{r4, r5, r6, lr}
   806de:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = xTimeT1/portTICK_RATE_MS; /* set ticks (xTimeT1) in milliseconds */
	xLastWakeTime = xTaskGetTickCount();					/* the count of ticks since vTaskStartScheduler was called */
   806e0:	4b0e      	ldr	r3, [pc, #56]	; (8071c <task1+0x40>)
   806e2:	4798      	blx	r3
   806e4:	9001      	str	r0, [sp, #4]
	
	while (1) /* the task must be looping infinitely */
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement); /* constant period, independent of execution time */
   806e6:	4e0e      	ldr	r6, [pc, #56]	; (80720 <task1+0x44>)
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806e8:	4d0e      	ldr	r5, [pc, #56]	; (80724 <task1+0x48>)
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806ea:	4c0f      	ldr	r4, [pc, #60]	; (80728 <task1+0x4c>)
   806ec:	e002      	b.n	806f4 <task1+0x18>
   806ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   806f2:	636b      	str	r3, [r5, #52]	; 0x34
   806f4:	2132      	movs	r1, #50	; 0x32
   806f6:	a801      	add	r0, sp, #4
   806f8:	47b0      	blx	r6
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   806fa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   806fe:	632b      	str	r3, [r5, #48]	; 0x30
		//vTaskDelay(50);								 /* no constant period, dependent of execution time */ 
		
		
		/* ----------------------------------- simulate a function/task that is working ----------------------------------- */
		ioport_set_pin_level(pin13, HIGH); /* set pin to HIGH to indicate that the task has entered the running state */
		volatile int j=0;
   80700:	2300      	movs	r3, #0
   80702:	9300      	str	r3, [sp, #0]
   80704:	f242 7210 	movw	r2, #10000	; 0x2710
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80708:	f44f 7180 	mov.w	r1, #256	; 0x100
   8070c:	6361      	str	r1, [r4, #52]	; 0x34
		for (int i=0; i < 10000; i++)
		{
			ioport_set_pin_level(pin12, LOW);
			j++;
   8070e:	9b00      	ldr	r3, [sp, #0]
   80710:	3301      	adds	r3, #1
   80712:	9300      	str	r3, [sp, #0]
		for (int i=0; i < 10000; i++)
   80714:	3a01      	subs	r2, #1
   80716:	d1f9      	bne.n	8070c <task1+0x30>
   80718:	e7e9      	b.n	806ee <task1+0x12>
   8071a:	bf00      	nop
   8071c:	000812c5 	.word	0x000812c5
   80720:	0008150d 	.word	0x0008150d
   80724:	400e1000 	.word	0x400e1000
   80728:	400e1400 	.word	0x400e1400

0008072c <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   8072c:	f100 0308 	add.w	r3, r0, #8
   80730:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80732:	f04f 32ff 	mov.w	r2, #4294967295
   80736:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80738:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8073a:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   8073c:	2300      	movs	r3, #0
   8073e:	6003      	str	r3, [r0, #0]
   80740:	4770      	bx	lr

00080742 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80742:	2300      	movs	r3, #0
   80744:	6103      	str	r3, [r0, #16]
   80746:	4770      	bx	lr

00080748 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80748:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8074a:	685a      	ldr	r2, [r3, #4]
   8074c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8074e:	6842      	ldr	r2, [r0, #4]
   80750:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80752:	685a      	ldr	r2, [r3, #4]
   80754:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80756:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80758:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8075a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8075c:	6803      	ldr	r3, [r0, #0]
   8075e:	3301      	adds	r3, #1
   80760:	6003      	str	r3, [r0, #0]
   80762:	4770      	bx	lr

00080764 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80764:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80766:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80768:	f1b4 3fff 	cmp.w	r4, #4294967295
   8076c:	d015      	beq.n	8079a <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8076e:	f100 0308 	add.w	r3, r0, #8
   80772:	68c2      	ldr	r2, [r0, #12]
   80774:	6812      	ldr	r2, [r2, #0]
   80776:	4294      	cmp	r4, r2
   80778:	d304      	bcc.n	80784 <vListInsert+0x20>
   8077a:	685b      	ldr	r3, [r3, #4]
   8077c:	685a      	ldr	r2, [r3, #4]
   8077e:	6812      	ldr	r2, [r2, #0]
   80780:	4294      	cmp	r4, r2
   80782:	d2fa      	bcs.n	8077a <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80784:	685a      	ldr	r2, [r3, #4]
   80786:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80788:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   8078a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   8078c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8078e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80790:	6803      	ldr	r3, [r0, #0]
   80792:	3301      	adds	r3, #1
   80794:	6003      	str	r3, [r0, #0]
}
   80796:	bc10      	pop	{r4}
   80798:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   8079a:	6903      	ldr	r3, [r0, #16]
   8079c:	e7f2      	b.n	80784 <vListInsert+0x20>

0008079e <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8079e:	6843      	ldr	r3, [r0, #4]
   807a0:	6882      	ldr	r2, [r0, #8]
   807a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   807a4:	6883      	ldr	r3, [r0, #8]
   807a6:	6842      	ldr	r2, [r0, #4]
   807a8:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   807aa:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   807ac:	685a      	ldr	r2, [r3, #4]
   807ae:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   807b0:	bf04      	itt	eq
   807b2:	6882      	ldreq	r2, [r0, #8]
   807b4:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   807b6:	2200      	movs	r2, #0
   807b8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   807ba:	681a      	ldr	r2, [r3, #0]
   807bc:	3a01      	subs	r2, #1
   807be:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   807c0:	6818      	ldr	r0, [r3, #0]
}
   807c2:	4770      	bx	lr

000807c4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   807c4:	4803      	ldr	r0, [pc, #12]	; (807d4 <prvPortStartFirstTask+0x10>)
   807c6:	6800      	ldr	r0, [r0, #0]
   807c8:	6800      	ldr	r0, [r0, #0]
   807ca:	f380 8808 	msr	MSP, r0
   807ce:	b662      	cpsie	i
   807d0:	df00      	svc	0
   807d2:	bf00      	nop
   807d4:	e000ed08 	.word	0xe000ed08

000807d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   807d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   807dc:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   807e0:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   807e4:	2300      	movs	r3, #0
   807e6:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   807ea:	f840 2c20 	str.w	r2, [r0, #-32]
}
   807ee:	3840      	subs	r0, #64	; 0x40
   807f0:	4770      	bx	lr
	...

000807f4 <SVC_Handler>:
	__asm volatile (
   807f4:	4b06      	ldr	r3, [pc, #24]	; (80810 <pxCurrentTCBConst2>)
   807f6:	6819      	ldr	r1, [r3, #0]
   807f8:	6808      	ldr	r0, [r1, #0]
   807fa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   807fe:	f380 8809 	msr	PSP, r0
   80802:	f04f 0000 	mov.w	r0, #0
   80806:	f380 8811 	msr	BASEPRI, r0
   8080a:	f04e 0e0d 	orr.w	lr, lr, #13
   8080e:	4770      	bx	lr

00080810 <pxCurrentTCBConst2>:
   80810:	2007ab18 	.word	0x2007ab18

00080814 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80814:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80818:	4b01      	ldr	r3, [pc, #4]	; (80820 <vPortYieldFromISR+0xc>)
   8081a:	601a      	str	r2, [r3, #0]
   8081c:	4770      	bx	lr
   8081e:	bf00      	nop
   80820:	e000ed04 	.word	0xe000ed04

00080824 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80824:	f3ef 8011 	mrs	r0, BASEPRI
   80828:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8082c:	f381 8811 	msr	BASEPRI, r1
   80830:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80832:	2000      	movs	r0, #0

00080834 <vPortEnterCritical>:
{
   80834:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80836:	4b03      	ldr	r3, [pc, #12]	; (80844 <vPortEnterCritical+0x10>)
   80838:	4798      	blx	r3
	uxCriticalNesting++;
   8083a:	4a03      	ldr	r2, [pc, #12]	; (80848 <vPortEnterCritical+0x14>)
   8083c:	6813      	ldr	r3, [r2, #0]
   8083e:	3301      	adds	r3, #1
   80840:	6013      	str	r3, [r2, #0]
   80842:	bd08      	pop	{r3, pc}
   80844:	00080825 	.word	0x00080825
   80848:	20070130 	.word	0x20070130

0008084c <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   8084c:	f380 8811 	msr	BASEPRI, r0
   80850:	4770      	bx	lr
	...

00080854 <vPortExitCritical>:
{
   80854:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80856:	4a05      	ldr	r2, [pc, #20]	; (8086c <vPortExitCritical+0x18>)
   80858:	6813      	ldr	r3, [r2, #0]
   8085a:	3b01      	subs	r3, #1
   8085c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8085e:	b103      	cbz	r3, 80862 <vPortExitCritical+0xe>
   80860:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   80862:	2000      	movs	r0, #0
   80864:	4b02      	ldr	r3, [pc, #8]	; (80870 <vPortExitCritical+0x1c>)
   80866:	4798      	blx	r3
}
   80868:	e7fa      	b.n	80860 <vPortExitCritical+0xc>
   8086a:	bf00      	nop
   8086c:	20070130 	.word	0x20070130
   80870:	0008084d 	.word	0x0008084d

00080874 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80874:	f3ef 8009 	mrs	r0, PSP
   80878:	4b0c      	ldr	r3, [pc, #48]	; (808ac <pxCurrentTCBConst>)
   8087a:	681a      	ldr	r2, [r3, #0]
   8087c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80880:	6010      	str	r0, [r2, #0]
   80882:	e92d 4008 	stmdb	sp!, {r3, lr}
   80886:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   8088a:	f380 8811 	msr	BASEPRI, r0
   8088e:	f000 fec7 	bl	81620 <vTaskSwitchContext>
   80892:	f04f 0000 	mov.w	r0, #0
   80896:	f380 8811 	msr	BASEPRI, r0
   8089a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   8089e:	6819      	ldr	r1, [r3, #0]
   808a0:	6808      	ldr	r0, [r1, #0]
   808a2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   808a6:	f380 8809 	msr	PSP, r0
   808aa:	4770      	bx	lr

000808ac <pxCurrentTCBConst>:
   808ac:	2007ab18 	.word	0x2007ab18

000808b0 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   808b0:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   808b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   808b6:	4b05      	ldr	r3, [pc, #20]	; (808cc <SysTick_Handler+0x1c>)
   808b8:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   808ba:	4b05      	ldr	r3, [pc, #20]	; (808d0 <SysTick_Handler+0x20>)
   808bc:	4798      	blx	r3
	{
		vTaskIncrementTick();
   808be:	4b05      	ldr	r3, [pc, #20]	; (808d4 <SysTick_Handler+0x24>)
   808c0:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   808c2:	2000      	movs	r0, #0
   808c4:	4b04      	ldr	r3, [pc, #16]	; (808d8 <SysTick_Handler+0x28>)
   808c6:	4798      	blx	r3
   808c8:	bd08      	pop	{r3, pc}
   808ca:	bf00      	nop
   808cc:	e000ed04 	.word	0xe000ed04
   808d0:	00080825 	.word	0x00080825
   808d4:	000812e5 	.word	0x000812e5
   808d8:	0008084d 	.word	0x0008084d

000808dc <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   808dc:	4a03      	ldr	r2, [pc, #12]	; (808ec <vPortSetupTimerInterrupt+0x10>)
   808de:	4b04      	ldr	r3, [pc, #16]	; (808f0 <vPortSetupTimerInterrupt+0x14>)
   808e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   808e2:	2207      	movs	r2, #7
   808e4:	3b04      	subs	r3, #4
   808e6:	601a      	str	r2, [r3, #0]
   808e8:	4770      	bx	lr
   808ea:	bf00      	nop
   808ec:	0001481f 	.word	0x0001481f
   808f0:	e000e014 	.word	0xe000e014

000808f4 <xPortStartScheduler>:
{
   808f4:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   808f6:	4b09      	ldr	r3, [pc, #36]	; (8091c <xPortStartScheduler+0x28>)
   808f8:	681a      	ldr	r2, [r3, #0]
   808fa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   808fe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80900:	681a      	ldr	r2, [r3, #0]
   80902:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80906:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80908:	4b05      	ldr	r3, [pc, #20]	; (80920 <xPortStartScheduler+0x2c>)
   8090a:	4798      	blx	r3
	uxCriticalNesting = 0;
   8090c:	2400      	movs	r4, #0
   8090e:	4b05      	ldr	r3, [pc, #20]	; (80924 <xPortStartScheduler+0x30>)
   80910:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80912:	4b05      	ldr	r3, [pc, #20]	; (80928 <xPortStartScheduler+0x34>)
   80914:	4798      	blx	r3
}
   80916:	4620      	mov	r0, r4
   80918:	bd10      	pop	{r4, pc}
   8091a:	bf00      	nop
   8091c:	e000ed20 	.word	0xe000ed20
   80920:	000808dd 	.word	0x000808dd
   80924:	20070130 	.word	0x20070130
   80928:	000807c5 	.word	0x000807c5

0008092c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   8092c:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   8092e:	4a13      	ldr	r2, [pc, #76]	; (8097c <prvInsertBlockIntoFreeList+0x50>)
   80930:	e000      	b.n	80934 <prvInsertBlockIntoFreeList+0x8>
   80932:	461a      	mov	r2, r3
   80934:	6813      	ldr	r3, [r2, #0]
   80936:	4283      	cmp	r3, r0
   80938:	d3fb      	bcc.n	80932 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8093a:	6851      	ldr	r1, [r2, #4]
   8093c:	1854      	adds	r4, r2, r1
   8093e:	42a0      	cmp	r0, r4
   80940:	d009      	beq.n	80956 <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80942:	6841      	ldr	r1, [r0, #4]
   80944:	1844      	adds	r4, r0, r1
   80946:	42a3      	cmp	r3, r4
   80948:	d00a      	beq.n	80960 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   8094a:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   8094c:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8094e:	bf18      	it	ne
   80950:	6010      	strne	r0, [r2, #0]
	}
}
   80952:	bc10      	pop	{r4}
   80954:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80956:	6840      	ldr	r0, [r0, #4]
   80958:	4401      	add	r1, r0
   8095a:	6051      	str	r1, [r2, #4]
   8095c:	4610      	mov	r0, r2
   8095e:	e7f0      	b.n	80942 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80960:	4c07      	ldr	r4, [pc, #28]	; (80980 <prvInsertBlockIntoFreeList+0x54>)
   80962:	6824      	ldr	r4, [r4, #0]
   80964:	42a3      	cmp	r3, r4
   80966:	d006      	beq.n	80976 <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80968:	685b      	ldr	r3, [r3, #4]
   8096a:	4419      	add	r1, r3
   8096c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8096e:	6813      	ldr	r3, [r2, #0]
   80970:	681b      	ldr	r3, [r3, #0]
   80972:	6003      	str	r3, [r0, #0]
   80974:	e7ea      	b.n	8094c <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80976:	6003      	str	r3, [r0, #0]
   80978:	e7e8      	b.n	8094c <prvInsertBlockIntoFreeList+0x20>
   8097a:	bf00      	nop
   8097c:	2007ab10 	.word	0x2007ab10
   80980:	20070b0c 	.word	0x20070b0c

00080984 <pvPortMalloc>:
{
   80984:	b538      	push	{r3, r4, r5, lr}
   80986:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80988:	4b2a      	ldr	r3, [pc, #168]	; (80a34 <pvPortMalloc+0xb0>)
   8098a:	4798      	blx	r3
		if( pxEnd == NULL )
   8098c:	4b2a      	ldr	r3, [pc, #168]	; (80a38 <pvPortMalloc+0xb4>)
   8098e:	681b      	ldr	r3, [r3, #0]
   80990:	b18b      	cbz	r3, 809b6 <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   80992:	2c00      	cmp	r4, #0
   80994:	d047      	beq.n	80a26 <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   80996:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8099a:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8099e:	bf1c      	itt	ne
   809a0:	f022 0207 	bicne.w	r2, r2, #7
   809a4:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   809a6:	1e51      	subs	r1, r2, #1
   809a8:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   809ac:	4299      	cmp	r1, r3
   809ae:	d83c      	bhi.n	80a2a <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   809b0:	4922      	ldr	r1, [pc, #136]	; (80a3c <pvPortMalloc+0xb8>)
   809b2:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   809b4:	e016      	b.n	809e4 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   809b6:	4a21      	ldr	r2, [pc, #132]	; (80a3c <pvPortMalloc+0xb8>)
   809b8:	4b21      	ldr	r3, [pc, #132]	; (80a40 <pvPortMalloc+0xbc>)
   809ba:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   809bc:	2100      	movs	r1, #0
   809be:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   809c0:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   809c4:	1898      	adds	r0, r3, r2
   809c6:	4d1c      	ldr	r5, [pc, #112]	; (80a38 <pvPortMalloc+0xb4>)
   809c8:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   809ca:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   809ce:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   809d0:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   809d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   809d4:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   809d6:	4a1b      	ldr	r2, [pc, #108]	; (80a44 <pvPortMalloc+0xc0>)
   809d8:	6813      	ldr	r3, [r2, #0]
   809da:	3b10      	subs	r3, #16
   809dc:	6013      	str	r3, [r2, #0]
   809de:	e7d8      	b.n	80992 <pvPortMalloc+0xe>
   809e0:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   809e2:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   809e4:	6863      	ldr	r3, [r4, #4]
   809e6:	429a      	cmp	r2, r3
   809e8:	d902      	bls.n	809f0 <pvPortMalloc+0x6c>
   809ea:	6823      	ldr	r3, [r4, #0]
   809ec:	2b00      	cmp	r3, #0
   809ee:	d1f7      	bne.n	809e0 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   809f0:	4b11      	ldr	r3, [pc, #68]	; (80a38 <pvPortMalloc+0xb4>)
   809f2:	681b      	ldr	r3, [r3, #0]
   809f4:	429c      	cmp	r4, r3
   809f6:	d01a      	beq.n	80a2e <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   809f8:	680d      	ldr	r5, [r1, #0]
   809fa:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   809fc:	6823      	ldr	r3, [r4, #0]
   809fe:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80a00:	6863      	ldr	r3, [r4, #4]
   80a02:	1a9b      	subs	r3, r3, r2
   80a04:	2b20      	cmp	r3, #32
   80a06:	d808      	bhi.n	80a1a <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80a08:	4a0e      	ldr	r2, [pc, #56]	; (80a44 <pvPortMalloc+0xc0>)
   80a0a:	6813      	ldr	r3, [r2, #0]
   80a0c:	6861      	ldr	r1, [r4, #4]
   80a0e:	1a5b      	subs	r3, r3, r1
   80a10:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   80a12:	4b0d      	ldr	r3, [pc, #52]	; (80a48 <pvPortMalloc+0xc4>)
   80a14:	4798      	blx	r3
}
   80a16:	4628      	mov	r0, r5
   80a18:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80a1a:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80a1c:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80a1e:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80a20:	4b0a      	ldr	r3, [pc, #40]	; (80a4c <pvPortMalloc+0xc8>)
   80a22:	4798      	blx	r3
   80a24:	e7f0      	b.n	80a08 <pvPortMalloc+0x84>
void *pvReturn = NULL;
   80a26:	2500      	movs	r5, #0
   80a28:	e7f3      	b.n	80a12 <pvPortMalloc+0x8e>
   80a2a:	2500      	movs	r5, #0
   80a2c:	e7f1      	b.n	80a12 <pvPortMalloc+0x8e>
   80a2e:	2500      	movs	r5, #0
   80a30:	e7ef      	b.n	80a12 <pvPortMalloc+0x8e>
   80a32:	bf00      	nop
   80a34:	000812b5 	.word	0x000812b5
   80a38:	20070b0c 	.word	0x20070b0c
   80a3c:	2007ab10 	.word	0x2007ab10
   80a40:	20070b10 	.word	0x20070b10
   80a44:	20070134 	.word	0x20070134
   80a48:	0008140d 	.word	0x0008140d
   80a4c:	0008092d 	.word	0x0008092d

00080a50 <vPortFree>:
	if( pv != NULL )
   80a50:	b180      	cbz	r0, 80a74 <vPortFree+0x24>
{
   80a52:	b510      	push	{r4, lr}
   80a54:	4604      	mov	r4, r0
		vTaskSuspendAll();
   80a56:	4b08      	ldr	r3, [pc, #32]	; (80a78 <vPortFree+0x28>)
   80a58:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   80a5a:	4a08      	ldr	r2, [pc, #32]	; (80a7c <vPortFree+0x2c>)
   80a5c:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80a60:	6811      	ldr	r1, [r2, #0]
   80a62:	440b      	add	r3, r1
   80a64:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80a66:	f1a4 0010 	sub.w	r0, r4, #16
   80a6a:	4b05      	ldr	r3, [pc, #20]	; (80a80 <vPortFree+0x30>)
   80a6c:	4798      	blx	r3
		xTaskResumeAll();
   80a6e:	4b05      	ldr	r3, [pc, #20]	; (80a84 <vPortFree+0x34>)
   80a70:	4798      	blx	r3
   80a72:	bd10      	pop	{r4, pc}
   80a74:	4770      	bx	lr
   80a76:	bf00      	nop
   80a78:	000812b5 	.word	0x000812b5
   80a7c:	20070134 	.word	0x20070134
   80a80:	0008092d 	.word	0x0008092d
   80a84:	0008140d 	.word	0x0008140d

00080a88 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80a88:	b510      	push	{r4, lr}
   80a8a:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80a8c:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a8e:	b95b      	cbnz	r3, 80aa8 <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80a90:	6803      	ldr	r3, [r0, #0]
   80a92:	b11b      	cbz	r3, 80a9c <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   80a94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80a96:	3301      	adds	r3, #1
   80a98:	63a3      	str	r3, [r4, #56]	; 0x38
   80a9a:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80a9c:	6840      	ldr	r0, [r0, #4]
   80a9e:	4b12      	ldr	r3, [pc, #72]	; (80ae8 <prvCopyDataToQueue+0x60>)
   80aa0:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80aa2:	2300      	movs	r3, #0
   80aa4:	6063      	str	r3, [r4, #4]
   80aa6:	e7f5      	b.n	80a94 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   80aa8:	b96a      	cbnz	r2, 80ac6 <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80aaa:	461a      	mov	r2, r3
   80aac:	6880      	ldr	r0, [r0, #8]
   80aae:	4b0f      	ldr	r3, [pc, #60]	; (80aec <prvCopyDataToQueue+0x64>)
   80ab0:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80ab2:	68a3      	ldr	r3, [r4, #8]
   80ab4:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80ab6:	4413      	add	r3, r2
   80ab8:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80aba:	6862      	ldr	r2, [r4, #4]
   80abc:	4293      	cmp	r3, r2
   80abe:	d3e9      	bcc.n	80a94 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80ac0:	6823      	ldr	r3, [r4, #0]
   80ac2:	60a3      	str	r3, [r4, #8]
   80ac4:	e7e6      	b.n	80a94 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80ac6:	461a      	mov	r2, r3
   80ac8:	68c0      	ldr	r0, [r0, #12]
   80aca:	4b08      	ldr	r3, [pc, #32]	; (80aec <prvCopyDataToQueue+0x64>)
   80acc:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80ace:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80ad0:	4252      	negs	r2, r2
   80ad2:	68e3      	ldr	r3, [r4, #12]
   80ad4:	4413      	add	r3, r2
   80ad6:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   80ad8:	6821      	ldr	r1, [r4, #0]
   80ada:	428b      	cmp	r3, r1
   80adc:	d2da      	bcs.n	80a94 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80ade:	6863      	ldr	r3, [r4, #4]
   80ae0:	441a      	add	r2, r3
   80ae2:	60e2      	str	r2, [r4, #12]
   80ae4:	e7d6      	b.n	80a94 <prvCopyDataToQueue+0xc>
   80ae6:	bf00      	nop
   80ae8:	0008194d 	.word	0x0008194d
   80aec:	00082519 	.word	0x00082519

00080af0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80af0:	b538      	push	{r3, r4, r5, lr}
   80af2:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80af4:	6800      	ldr	r0, [r0, #0]
   80af6:	b158      	cbz	r0, 80b10 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   80af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   80afa:	68dc      	ldr	r4, [r3, #12]
   80afc:	4414      	add	r4, r2
   80afe:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80b00:	685d      	ldr	r5, [r3, #4]
   80b02:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80b04:	bf28      	it	cs
   80b06:	60d8      	strcs	r0, [r3, #12]
   80b08:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   80b0a:	68d9      	ldr	r1, [r3, #12]
   80b0c:	4b01      	ldr	r3, [pc, #4]	; (80b14 <prvCopyDataFromQueue+0x24>)
   80b0e:	4798      	blx	r3
   80b10:	bd38      	pop	{r3, r4, r5, pc}
   80b12:	bf00      	nop
   80b14:	00082519 	.word	0x00082519

00080b18 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   80b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80b1a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80b1c:	4b1f      	ldr	r3, [pc, #124]	; (80b9c <prvUnlockQueue+0x84>)
   80b1e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b20:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b22:	2b00      	cmp	r3, #0
   80b24:	dd14      	ble.n	80b50 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b28:	b193      	cbz	r3, 80b50 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b2a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80b2e:	4d1c      	ldr	r5, [pc, #112]	; (80ba0 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80b30:	4f1c      	ldr	r7, [pc, #112]	; (80ba4 <prvUnlockQueue+0x8c>)
   80b32:	e007      	b.n	80b44 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80b34:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b36:	3b01      	subs	r3, #1
   80b38:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80b3a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b3c:	2b00      	cmp	r3, #0
   80b3e:	dd07      	ble.n	80b50 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b42:	b12b      	cbz	r3, 80b50 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b44:	4630      	mov	r0, r6
   80b46:	47a8      	blx	r5
   80b48:	2800      	cmp	r0, #0
   80b4a:	d0f3      	beq.n	80b34 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   80b4c:	47b8      	blx	r7
   80b4e:	e7f1      	b.n	80b34 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   80b50:	f04f 33ff 	mov.w	r3, #4294967295
   80b54:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   80b56:	4b14      	ldr	r3, [pc, #80]	; (80ba8 <prvUnlockQueue+0x90>)
   80b58:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   80b5a:	4b10      	ldr	r3, [pc, #64]	; (80b9c <prvUnlockQueue+0x84>)
   80b5c:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b60:	2b00      	cmp	r3, #0
   80b62:	dd14      	ble.n	80b8e <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b64:	6923      	ldr	r3, [r4, #16]
   80b66:	b193      	cbz	r3, 80b8e <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b68:	f104 0610 	add.w	r6, r4, #16
   80b6c:	4d0c      	ldr	r5, [pc, #48]	; (80ba0 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   80b6e:	4f0d      	ldr	r7, [pc, #52]	; (80ba4 <prvUnlockQueue+0x8c>)
   80b70:	e007      	b.n	80b82 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   80b72:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b74:	3b01      	subs	r3, #1
   80b76:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   80b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80b7a:	2b00      	cmp	r3, #0
   80b7c:	dd07      	ble.n	80b8e <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80b7e:	6923      	ldr	r3, [r4, #16]
   80b80:	b12b      	cbz	r3, 80b8e <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   80b82:	4630      	mov	r0, r6
   80b84:	47a8      	blx	r5
   80b86:	2800      	cmp	r0, #0
   80b88:	d0f3      	beq.n	80b72 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   80b8a:	47b8      	blx	r7
   80b8c:	e7f1      	b.n	80b72 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   80b8e:	f04f 33ff 	mov.w	r3, #4294967295
   80b92:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   80b94:	4b04      	ldr	r3, [pc, #16]	; (80ba8 <prvUnlockQueue+0x90>)
   80b96:	4798      	blx	r3
   80b98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80b9a:	bf00      	nop
   80b9c:	00080835 	.word	0x00080835
   80ba0:	00081765 	.word	0x00081765
   80ba4:	00081895 	.word	0x00081895
   80ba8:	00080855 	.word	0x00080855

00080bac <xQueueGenericReset>:
{
   80bac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80bae:	b308      	cbz	r0, 80bf4 <xQueueGenericReset+0x48>
   80bb0:	460d      	mov	r5, r1
   80bb2:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80bb4:	4b17      	ldr	r3, [pc, #92]	; (80c14 <xQueueGenericReset+0x68>)
   80bb6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   80bb8:	6822      	ldr	r2, [r4, #0]
   80bba:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80bbe:	fb03 f301 	mul.w	r3, r3, r1
   80bc2:	18d0      	adds	r0, r2, r3
   80bc4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   80bc6:	2000      	movs	r0, #0
   80bc8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   80bca:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80bcc:	1a5b      	subs	r3, r3, r1
   80bce:	4413      	add	r3, r2
   80bd0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80bd2:	f04f 33ff 	mov.w	r3, #4294967295
   80bd6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   80bd8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   80bda:	b995      	cbnz	r5, 80c02 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bdc:	6923      	ldr	r3, [r4, #16]
   80bde:	b12b      	cbz	r3, 80bec <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80be0:	f104 0010 	add.w	r0, r4, #16
   80be4:	4b0c      	ldr	r3, [pc, #48]	; (80c18 <xQueueGenericReset+0x6c>)
   80be6:	4798      	blx	r3
   80be8:	2801      	cmp	r0, #1
   80bea:	d007      	beq.n	80bfc <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80bec:	4b0b      	ldr	r3, [pc, #44]	; (80c1c <xQueueGenericReset+0x70>)
   80bee:	4798      	blx	r3
}
   80bf0:	2001      	movs	r0, #1
   80bf2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   80bf4:	4b0a      	ldr	r3, [pc, #40]	; (80c20 <xQueueGenericReset+0x74>)
   80bf6:	4798      	blx	r3
   80bf8:	bf00      	nop
   80bfa:	e7fd      	b.n	80bf8 <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   80bfc:	4b09      	ldr	r3, [pc, #36]	; (80c24 <xQueueGenericReset+0x78>)
   80bfe:	4798      	blx	r3
   80c00:	e7f4      	b.n	80bec <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80c02:	f104 0010 	add.w	r0, r4, #16
   80c06:	4d08      	ldr	r5, [pc, #32]	; (80c28 <xQueueGenericReset+0x7c>)
   80c08:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   80c0a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c0e:	47a8      	blx	r5
   80c10:	e7ec      	b.n	80bec <xQueueGenericReset+0x40>
   80c12:	bf00      	nop
   80c14:	00080835 	.word	0x00080835
   80c18:	00081765 	.word	0x00081765
   80c1c:	00080855 	.word	0x00080855
   80c20:	00080825 	.word	0x00080825
   80c24:	00080815 	.word	0x00080815
   80c28:	0008072d 	.word	0x0008072d

00080c2c <xQueueGenericCreate>:
{
   80c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80c2e:	b1d8      	cbz	r0, 80c68 <xQueueGenericCreate+0x3c>
   80c30:	460d      	mov	r5, r1
   80c32:	4617      	mov	r7, r2
   80c34:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   80c36:	2050      	movs	r0, #80	; 0x50
   80c38:	4b0d      	ldr	r3, [pc, #52]	; (80c70 <xQueueGenericCreate+0x44>)
   80c3a:	4798      	blx	r3
		if( pxNewQueue != NULL )
   80c3c:	4604      	mov	r4, r0
   80c3e:	b198      	cbz	r0, 80c68 <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   80c40:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   80c44:	3001      	adds	r0, #1
   80c46:	4b0a      	ldr	r3, [pc, #40]	; (80c70 <xQueueGenericCreate+0x44>)
   80c48:	4798      	blx	r3
   80c4a:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   80c4c:	b148      	cbz	r0, 80c62 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   80c4e:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   80c50:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   80c52:	2101      	movs	r1, #1
   80c54:	4620      	mov	r0, r4
   80c56:	4b07      	ldr	r3, [pc, #28]	; (80c74 <xQueueGenericCreate+0x48>)
   80c58:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   80c5a:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   80c5e:	4620      	mov	r0, r4
   80c60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   80c62:	4620      	mov	r0, r4
   80c64:	4b04      	ldr	r3, [pc, #16]	; (80c78 <xQueueGenericCreate+0x4c>)
   80c66:	4798      	blx	r3
	configASSERT( xReturn );
   80c68:	4b04      	ldr	r3, [pc, #16]	; (80c7c <xQueueGenericCreate+0x50>)
   80c6a:	4798      	blx	r3
   80c6c:	bf00      	nop
   80c6e:	e7fd      	b.n	80c6c <xQueueGenericCreate+0x40>
   80c70:	00080985 	.word	0x00080985
   80c74:	00080bad 	.word	0x00080bad
   80c78:	00080a51 	.word	0x00080a51
   80c7c:	00080825 	.word	0x00080825

00080c80 <xQueueGenericSend>:
{
   80c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c84:	b085      	sub	sp, #20
   80c86:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80c88:	b148      	cbz	r0, 80c9e <xQueueGenericSend+0x1e>
   80c8a:	4688      	mov	r8, r1
   80c8c:	4699      	mov	r9, r3
   80c8e:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80c90:	b149      	cbz	r1, 80ca6 <xQueueGenericSend+0x26>
   80c92:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80c94:	4e38      	ldr	r6, [pc, #224]	; (80d78 <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   80c96:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80da4 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   80c9a:	4d38      	ldr	r5, [pc, #224]	; (80d7c <xQueueGenericSend+0xfc>)
   80c9c:	e02e      	b.n	80cfc <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   80c9e:	4b38      	ldr	r3, [pc, #224]	; (80d80 <xQueueGenericSend+0x100>)
   80ca0:	4798      	blx	r3
   80ca2:	bf00      	nop
   80ca4:	e7fd      	b.n	80ca2 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ca6:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80ca8:	b11b      	cbz	r3, 80cb2 <xQueueGenericSend+0x32>
   80caa:	4b35      	ldr	r3, [pc, #212]	; (80d80 <xQueueGenericSend+0x100>)
   80cac:	4798      	blx	r3
   80cae:	bf00      	nop
   80cb0:	e7fd      	b.n	80cae <xQueueGenericSend+0x2e>
   80cb2:	2700      	movs	r7, #0
   80cb4:	e7ee      	b.n	80c94 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80cb6:	464a      	mov	r2, r9
   80cb8:	4641      	mov	r1, r8
   80cba:	4620      	mov	r0, r4
   80cbc:	4b31      	ldr	r3, [pc, #196]	; (80d84 <xQueueGenericSend+0x104>)
   80cbe:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80cc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80cc2:	b92b      	cbnz	r3, 80cd0 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   80cc4:	4b2d      	ldr	r3, [pc, #180]	; (80d7c <xQueueGenericSend+0xfc>)
   80cc6:	4798      	blx	r3
				return pdPASS;
   80cc8:	2001      	movs	r0, #1
}
   80cca:	b005      	add	sp, #20
   80ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80cd0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80cd4:	4b2c      	ldr	r3, [pc, #176]	; (80d88 <xQueueGenericSend+0x108>)
   80cd6:	4798      	blx	r3
   80cd8:	2801      	cmp	r0, #1
   80cda:	d1f3      	bne.n	80cc4 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80cdc:	4b2b      	ldr	r3, [pc, #172]	; (80d8c <xQueueGenericSend+0x10c>)
   80cde:	4798      	blx	r3
   80ce0:	e7f0      	b.n	80cc4 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80ce2:	4b26      	ldr	r3, [pc, #152]	; (80d7c <xQueueGenericSend+0xfc>)
   80ce4:	4798      	blx	r3
					return errQUEUE_FULL;
   80ce6:	2000      	movs	r0, #0
   80ce8:	e7ef      	b.n	80cca <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   80cea:	a802      	add	r0, sp, #8
   80cec:	47d0      	blx	sl
   80cee:	e00f      	b.n	80d10 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80cf0:	4620      	mov	r0, r4
   80cf2:	4b27      	ldr	r3, [pc, #156]	; (80d90 <xQueueGenericSend+0x110>)
   80cf4:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80cf6:	4b27      	ldr	r3, [pc, #156]	; (80d94 <xQueueGenericSend+0x114>)
   80cf8:	4798      	blx	r3
   80cfa:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80cfc:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80cfe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80d00:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80d02:	429a      	cmp	r2, r3
   80d04:	d3d7      	bcc.n	80cb6 <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80d06:	9b01      	ldr	r3, [sp, #4]
   80d08:	2b00      	cmp	r3, #0
   80d0a:	d0ea      	beq.n	80ce2 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   80d0c:	2f00      	cmp	r7, #0
   80d0e:	d0ec      	beq.n	80cea <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   80d10:	47a8      	blx	r5
		vTaskSuspendAll();
   80d12:	4b21      	ldr	r3, [pc, #132]	; (80d98 <xQueueGenericSend+0x118>)
   80d14:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80d16:	47b0      	blx	r6
   80d18:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d1e:	bf04      	itt	eq
   80d20:	2300      	moveq	r3, #0
   80d22:	6463      	streq	r3, [r4, #68]	; 0x44
   80d24:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d26:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d2a:	bf04      	itt	eq
   80d2c:	2300      	moveq	r3, #0
   80d2e:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d30:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80d32:	a901      	add	r1, sp, #4
   80d34:	a802      	add	r0, sp, #8
   80d36:	4b19      	ldr	r3, [pc, #100]	; (80d9c <xQueueGenericSend+0x11c>)
   80d38:	4798      	blx	r3
   80d3a:	b9a8      	cbnz	r0, 80d68 <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80d3c:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80d3e:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80d42:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80d44:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80d46:	45bb      	cmp	fp, r7
   80d48:	d1d2      	bne.n	80cf0 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80d4a:	9901      	ldr	r1, [sp, #4]
   80d4c:	f104 0010 	add.w	r0, r4, #16
   80d50:	4b13      	ldr	r3, [pc, #76]	; (80da0 <xQueueGenericSend+0x120>)
   80d52:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80d54:	4620      	mov	r0, r4
   80d56:	4b0e      	ldr	r3, [pc, #56]	; (80d90 <xQueueGenericSend+0x110>)
   80d58:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80d5a:	4b0e      	ldr	r3, [pc, #56]	; (80d94 <xQueueGenericSend+0x114>)
   80d5c:	4798      	blx	r3
   80d5e:	2800      	cmp	r0, #0
   80d60:	d1cb      	bne.n	80cfa <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80d62:	4b0a      	ldr	r3, [pc, #40]	; (80d8c <xQueueGenericSend+0x10c>)
   80d64:	4798      	blx	r3
   80d66:	e7c8      	b.n	80cfa <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80d68:	4620      	mov	r0, r4
   80d6a:	4b09      	ldr	r3, [pc, #36]	; (80d90 <xQueueGenericSend+0x110>)
   80d6c:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80d6e:	4b09      	ldr	r3, [pc, #36]	; (80d94 <xQueueGenericSend+0x114>)
   80d70:	4798      	blx	r3
			return errQUEUE_FULL;
   80d72:	2000      	movs	r0, #0
   80d74:	e7a9      	b.n	80cca <xQueueGenericSend+0x4a>
   80d76:	bf00      	nop
   80d78:	00080835 	.word	0x00080835
   80d7c:	00080855 	.word	0x00080855
   80d80:	00080825 	.word	0x00080825
   80d84:	00080a89 	.word	0x00080a89
   80d88:	00081765 	.word	0x00081765
   80d8c:	00080815 	.word	0x00080815
   80d90:	00080b19 	.word	0x00080b19
   80d94:	0008140d 	.word	0x0008140d
   80d98:	000812b5 	.word	0x000812b5
   80d9c:	00081811 	.word	0x00081811
   80da0:	000816c1 	.word	0x000816c1
   80da4:	000817e9 	.word	0x000817e9

00080da8 <xQueueGenericSendFromISR>:
{
   80da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80dac:	b190      	cbz	r0, 80dd4 <xQueueGenericSendFromISR+0x2c>
   80dae:	460e      	mov	r6, r1
   80db0:	4615      	mov	r5, r2
   80db2:	4698      	mov	r8, r3
   80db4:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80db6:	b189      	cbz	r1, 80ddc <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80db8:	4b1b      	ldr	r3, [pc, #108]	; (80e28 <xQueueGenericSendFromISR+0x80>)
   80dba:	4798      	blx	r3
   80dbc:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80dbe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80dc0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80dc2:	429a      	cmp	r2, r3
   80dc4:	d311      	bcc.n	80dea <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   80dc6:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80dc8:	4638      	mov	r0, r7
   80dca:	4b18      	ldr	r3, [pc, #96]	; (80e2c <xQueueGenericSendFromISR+0x84>)
   80dcc:	4798      	blx	r3
}
   80dce:	4620      	mov	r0, r4
   80dd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80dd4:	4b14      	ldr	r3, [pc, #80]	; (80e28 <xQueueGenericSendFromISR+0x80>)
   80dd6:	4798      	blx	r3
   80dd8:	bf00      	nop
   80dda:	e7fd      	b.n	80dd8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80ddc:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80dde:	2b00      	cmp	r3, #0
   80de0:	d0ea      	beq.n	80db8 <xQueueGenericSendFromISR+0x10>
   80de2:	4b11      	ldr	r3, [pc, #68]	; (80e28 <xQueueGenericSendFromISR+0x80>)
   80de4:	4798      	blx	r3
   80de6:	bf00      	nop
   80de8:	e7fd      	b.n	80de6 <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80dea:	4642      	mov	r2, r8
   80dec:	4631      	mov	r1, r6
   80dee:	4620      	mov	r0, r4
   80df0:	4b0f      	ldr	r3, [pc, #60]	; (80e30 <xQueueGenericSendFromISR+0x88>)
   80df2:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80df4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80df6:	f1b3 3fff 	cmp.w	r3, #4294967295
   80dfa:	d10a      	bne.n	80e12 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80dfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80dfe:	b16b      	cbz	r3, 80e1c <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80e00:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80e04:	4b0b      	ldr	r3, [pc, #44]	; (80e34 <xQueueGenericSendFromISR+0x8c>)
   80e06:	4798      	blx	r3
   80e08:	b150      	cbz	r0, 80e20 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80e0a:	b15d      	cbz	r5, 80e24 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80e0c:	2401      	movs	r4, #1
   80e0e:	602c      	str	r4, [r5, #0]
   80e10:	e7da      	b.n	80dc8 <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80e12:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80e14:	3301      	adds	r3, #1
   80e16:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80e18:	2401      	movs	r4, #1
   80e1a:	e7d5      	b.n	80dc8 <xQueueGenericSendFromISR+0x20>
   80e1c:	2401      	movs	r4, #1
   80e1e:	e7d3      	b.n	80dc8 <xQueueGenericSendFromISR+0x20>
   80e20:	2401      	movs	r4, #1
   80e22:	e7d1      	b.n	80dc8 <xQueueGenericSendFromISR+0x20>
   80e24:	2401      	movs	r4, #1
   80e26:	e7cf      	b.n	80dc8 <xQueueGenericSendFromISR+0x20>
   80e28:	00080825 	.word	0x00080825
   80e2c:	0008084d 	.word	0x0008084d
   80e30:	00080a89 	.word	0x00080a89
   80e34:	00081765 	.word	0x00081765

00080e38 <xQueueGenericReceive>:
{
   80e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80e3c:	b084      	sub	sp, #16
   80e3e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80e40:	b148      	cbz	r0, 80e56 <xQueueGenericReceive+0x1e>
   80e42:	4688      	mov	r8, r1
   80e44:	4699      	mov	r9, r3
   80e46:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e48:	b149      	cbz	r1, 80e5e <xQueueGenericReceive+0x26>
   80e4a:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80e4c:	4e46      	ldr	r6, [pc, #280]	; (80f68 <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80e4e:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80f9c <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80e52:	4d46      	ldr	r5, [pc, #280]	; (80f6c <xQueueGenericReceive+0x134>)
   80e54:	e04b      	b.n	80eee <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80e56:	4b46      	ldr	r3, [pc, #280]	; (80f70 <xQueueGenericReceive+0x138>)
   80e58:	4798      	blx	r3
   80e5a:	bf00      	nop
   80e5c:	e7fd      	b.n	80e5a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80e5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80e60:	b11b      	cbz	r3, 80e6a <xQueueGenericReceive+0x32>
   80e62:	4b43      	ldr	r3, [pc, #268]	; (80f70 <xQueueGenericReceive+0x138>)
   80e64:	4798      	blx	r3
   80e66:	bf00      	nop
   80e68:	e7fd      	b.n	80e66 <xQueueGenericReceive+0x2e>
   80e6a:	2700      	movs	r7, #0
   80e6c:	e7ee      	b.n	80e4c <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80e6e:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80e70:	4641      	mov	r1, r8
   80e72:	4620      	mov	r0, r4
   80e74:	4b3f      	ldr	r3, [pc, #252]	; (80f74 <xQueueGenericReceive+0x13c>)
   80e76:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80e78:	f1b9 0f00 	cmp.w	r9, #0
   80e7c:	d117      	bne.n	80eae <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   80e7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80e80:	3b01      	subs	r3, #1
   80e82:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80e84:	6823      	ldr	r3, [r4, #0]
   80e86:	b913      	cbnz	r3, 80e8e <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80e88:	4b3b      	ldr	r3, [pc, #236]	; (80f78 <xQueueGenericReceive+0x140>)
   80e8a:	4798      	blx	r3
   80e8c:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80e8e:	6923      	ldr	r3, [r4, #16]
   80e90:	b13b      	cbz	r3, 80ea2 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80e92:	f104 0010 	add.w	r0, r4, #16
   80e96:	4b39      	ldr	r3, [pc, #228]	; (80f7c <xQueueGenericReceive+0x144>)
   80e98:	4798      	blx	r3
   80e9a:	2801      	cmp	r0, #1
   80e9c:	d101      	bne.n	80ea2 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80e9e:	4b38      	ldr	r3, [pc, #224]	; (80f80 <xQueueGenericReceive+0x148>)
   80ea0:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80ea2:	4b32      	ldr	r3, [pc, #200]	; (80f6c <xQueueGenericReceive+0x134>)
   80ea4:	4798      	blx	r3
				return pdPASS;
   80ea6:	2001      	movs	r0, #1
}
   80ea8:	b004      	add	sp, #16
   80eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80eae:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80eb2:	2b00      	cmp	r3, #0
   80eb4:	d0f5      	beq.n	80ea2 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80eb6:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80eba:	4b30      	ldr	r3, [pc, #192]	; (80f7c <xQueueGenericReceive+0x144>)
   80ebc:	4798      	blx	r3
   80ebe:	2800      	cmp	r0, #0
   80ec0:	d0ef      	beq.n	80ea2 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80ec2:	4b2f      	ldr	r3, [pc, #188]	; (80f80 <xQueueGenericReceive+0x148>)
   80ec4:	4798      	blx	r3
   80ec6:	e7ec      	b.n	80ea2 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   80ec8:	4b28      	ldr	r3, [pc, #160]	; (80f6c <xQueueGenericReceive+0x134>)
   80eca:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80ecc:	2000      	movs	r0, #0
   80ece:	e7eb      	b.n	80ea8 <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80ed0:	a802      	add	r0, sp, #8
   80ed2:	47d0      	blx	sl
   80ed4:	e014      	b.n	80f00 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   80ed6:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80ed8:	6860      	ldr	r0, [r4, #4]
   80eda:	4b2a      	ldr	r3, [pc, #168]	; (80f84 <xQueueGenericReceive+0x14c>)
   80edc:	4798      	blx	r3
						portEXIT_CRITICAL();
   80ede:	47a8      	blx	r5
   80ee0:	e02c      	b.n	80f3c <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80ee2:	4620      	mov	r0, r4
   80ee4:	4b28      	ldr	r3, [pc, #160]	; (80f88 <xQueueGenericReceive+0x150>)
   80ee6:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80ee8:	4b28      	ldr	r3, [pc, #160]	; (80f8c <xQueueGenericReceive+0x154>)
   80eea:	4798      	blx	r3
   80eec:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80eee:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80ef0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80ef2:	2b00      	cmp	r3, #0
   80ef4:	d1bb      	bne.n	80e6e <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80ef6:	9b01      	ldr	r3, [sp, #4]
   80ef8:	2b00      	cmp	r3, #0
   80efa:	d0e5      	beq.n	80ec8 <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80efc:	2f00      	cmp	r7, #0
   80efe:	d0e7      	beq.n	80ed0 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80f00:	47a8      	blx	r5
		vTaskSuspendAll();
   80f02:	4b23      	ldr	r3, [pc, #140]	; (80f90 <xQueueGenericReceive+0x158>)
   80f04:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80f06:	47b0      	blx	r6
   80f08:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f0e:	bf04      	itt	eq
   80f10:	2300      	moveq	r3, #0
   80f12:	6463      	streq	r3, [r4, #68]	; 0x44
   80f14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80f16:	f1b3 3fff 	cmp.w	r3, #4294967295
   80f1a:	bf04      	itt	eq
   80f1c:	2300      	moveq	r3, #0
   80f1e:	64a3      	streq	r3, [r4, #72]	; 0x48
   80f20:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80f22:	a901      	add	r1, sp, #4
   80f24:	a802      	add	r0, sp, #8
   80f26:	4b1b      	ldr	r3, [pc, #108]	; (80f94 <xQueueGenericReceive+0x15c>)
   80f28:	4798      	blx	r3
   80f2a:	b9b0      	cbnz	r0, 80f5a <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80f2c:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80f2e:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80f30:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80f32:	2f00      	cmp	r7, #0
   80f34:	d1d5      	bne.n	80ee2 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80f36:	6823      	ldr	r3, [r4, #0]
   80f38:	2b00      	cmp	r3, #0
   80f3a:	d0cc      	beq.n	80ed6 <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80f3c:	9901      	ldr	r1, [sp, #4]
   80f3e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80f42:	4b15      	ldr	r3, [pc, #84]	; (80f98 <xQueueGenericReceive+0x160>)
   80f44:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80f46:	4620      	mov	r0, r4
   80f48:	4b0f      	ldr	r3, [pc, #60]	; (80f88 <xQueueGenericReceive+0x150>)
   80f4a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80f4c:	4b0f      	ldr	r3, [pc, #60]	; (80f8c <xQueueGenericReceive+0x154>)
   80f4e:	4798      	blx	r3
   80f50:	2800      	cmp	r0, #0
   80f52:	d1cb      	bne.n	80eec <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80f54:	4b0a      	ldr	r3, [pc, #40]	; (80f80 <xQueueGenericReceive+0x148>)
   80f56:	4798      	blx	r3
   80f58:	e7c8      	b.n	80eec <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80f5a:	4620      	mov	r0, r4
   80f5c:	4b0a      	ldr	r3, [pc, #40]	; (80f88 <xQueueGenericReceive+0x150>)
   80f5e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80f60:	4b0a      	ldr	r3, [pc, #40]	; (80f8c <xQueueGenericReceive+0x154>)
   80f62:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80f64:	2000      	movs	r0, #0
   80f66:	e79f      	b.n	80ea8 <xQueueGenericReceive+0x70>
   80f68:	00080835 	.word	0x00080835
   80f6c:	00080855 	.word	0x00080855
   80f70:	00080825 	.word	0x00080825
   80f74:	00080af1 	.word	0x00080af1
   80f78:	000818a1 	.word	0x000818a1
   80f7c:	00081765 	.word	0x00081765
   80f80:	00080815 	.word	0x00080815
   80f84:	000818cd 	.word	0x000818cd
   80f88:	00080b19 	.word	0x00080b19
   80f8c:	0008140d 	.word	0x0008140d
   80f90:	000812b5 	.word	0x000812b5
   80f94:	00081811 	.word	0x00081811
   80f98:	000816c1 	.word	0x000816c1
   80f9c:	000817e9 	.word	0x000817e9

00080fa0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80fa0:	b538      	push	{r3, r4, r5, lr}
   80fa2:	4604      	mov	r4, r0
   80fa4:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80fa6:	4b0e      	ldr	r3, [pc, #56]	; (80fe0 <vQueueWaitForMessageRestricted+0x40>)
   80fa8:	4798      	blx	r3
   80faa:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80fac:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fb0:	bf04      	itt	eq
   80fb2:	2300      	moveq	r3, #0
   80fb4:	6463      	streq	r3, [r4, #68]	; 0x44
   80fb6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
   80fbc:	bf04      	itt	eq
   80fbe:	2300      	moveq	r3, #0
   80fc0:	64a3      	streq	r3, [r4, #72]	; 0x48
   80fc2:	4b08      	ldr	r3, [pc, #32]	; (80fe4 <vQueueWaitForMessageRestricted+0x44>)
   80fc4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80fc6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80fc8:	b11b      	cbz	r3, 80fd2 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80fca:	4620      	mov	r0, r4
   80fcc:	4b06      	ldr	r3, [pc, #24]	; (80fe8 <vQueueWaitForMessageRestricted+0x48>)
   80fce:	4798      	blx	r3
   80fd0:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80fd2:	4629      	mov	r1, r5
   80fd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80fd8:	4b04      	ldr	r3, [pc, #16]	; (80fec <vQueueWaitForMessageRestricted+0x4c>)
   80fda:	4798      	blx	r3
   80fdc:	e7f5      	b.n	80fca <vQueueWaitForMessageRestricted+0x2a>
   80fde:	bf00      	nop
   80fe0:	00080835 	.word	0x00080835
   80fe4:	00080855 	.word	0x00080855
   80fe8:	00080b19 	.word	0x00080b19
   80fec:	00081721 	.word	0x00081721

00080ff0 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80ff0:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80ff2:	4b0f      	ldr	r3, [pc, #60]	; (81030 <prvAddCurrentTaskToDelayedList+0x40>)
   80ff4:	681b      	ldr	r3, [r3, #0]
   80ff6:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80ff8:	4b0e      	ldr	r3, [pc, #56]	; (81034 <prvAddCurrentTaskToDelayedList+0x44>)
   80ffa:	681b      	ldr	r3, [r3, #0]
   80ffc:	4298      	cmp	r0, r3
   80ffe:	d30e      	bcc.n	8101e <prvAddCurrentTaskToDelayedList+0x2e>
   81000:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81002:	4b0d      	ldr	r3, [pc, #52]	; (81038 <prvAddCurrentTaskToDelayedList+0x48>)
   81004:	6818      	ldr	r0, [r3, #0]
   81006:	4b0a      	ldr	r3, [pc, #40]	; (81030 <prvAddCurrentTaskToDelayedList+0x40>)
   81008:	6819      	ldr	r1, [r3, #0]
   8100a:	3104      	adds	r1, #4
   8100c:	4b0b      	ldr	r3, [pc, #44]	; (8103c <prvAddCurrentTaskToDelayedList+0x4c>)
   8100e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81010:	4b0b      	ldr	r3, [pc, #44]	; (81040 <prvAddCurrentTaskToDelayedList+0x50>)
   81012:	681b      	ldr	r3, [r3, #0]
   81014:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81016:	bf3c      	itt	cc
   81018:	4b09      	ldrcc	r3, [pc, #36]	; (81040 <prvAddCurrentTaskToDelayedList+0x50>)
   8101a:	601c      	strcc	r4, [r3, #0]
   8101c:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8101e:	4b09      	ldr	r3, [pc, #36]	; (81044 <prvAddCurrentTaskToDelayedList+0x54>)
   81020:	6818      	ldr	r0, [r3, #0]
   81022:	4b03      	ldr	r3, [pc, #12]	; (81030 <prvAddCurrentTaskToDelayedList+0x40>)
   81024:	6819      	ldr	r1, [r3, #0]
   81026:	3104      	adds	r1, #4
   81028:	4b04      	ldr	r3, [pc, #16]	; (8103c <prvAddCurrentTaskToDelayedList+0x4c>)
   8102a:	4798      	blx	r3
   8102c:	bd10      	pop	{r4, pc}
   8102e:	bf00      	nop
   81030:	2007ab18 	.word	0x2007ab18
   81034:	2007ac14 	.word	0x2007ac14
   81038:	2007ab1c 	.word	0x2007ab1c
   8103c:	00080765 	.word	0x00080765
   81040:	20070138 	.word	0x20070138
   81044:	2007ab20 	.word	0x2007ab20

00081048 <xTaskGenericCreate>:
{
   81048:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8104c:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   8104e:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   81052:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   81054:	b148      	cbz	r0, 8106a <xTaskGenericCreate+0x22>
   81056:	4688      	mov	r8, r1
   81058:	4615      	mov	r5, r2
   8105a:	469b      	mov	fp, r3
   8105c:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   8105e:	2f04      	cmp	r7, #4
   81060:	d907      	bls.n	81072 <xTaskGenericCreate+0x2a>
   81062:	4b60      	ldr	r3, [pc, #384]	; (811e4 <xTaskGenericCreate+0x19c>)
   81064:	4798      	blx	r3
   81066:	bf00      	nop
   81068:	e7fd      	b.n	81066 <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   8106a:	4b5e      	ldr	r3, [pc, #376]	; (811e4 <xTaskGenericCreate+0x19c>)
   8106c:	4798      	blx	r3
   8106e:	bf00      	nop
   81070:	e7fd      	b.n	8106e <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   81072:	204c      	movs	r0, #76	; 0x4c
   81074:	4b5c      	ldr	r3, [pc, #368]	; (811e8 <xTaskGenericCreate+0x1a0>)
   81076:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81078:	4604      	mov	r4, r0
   8107a:	2800      	cmp	r0, #0
   8107c:	d054      	beq.n	81128 <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8107e:	2e00      	cmp	r6, #0
   81080:	d048      	beq.n	81114 <xTaskGenericCreate+0xcc>
   81082:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   81084:	00aa      	lsls	r2, r5, #2
   81086:	21a5      	movs	r1, #165	; 0xa5
   81088:	4630      	mov	r0, r6
   8108a:	4b58      	ldr	r3, [pc, #352]	; (811ec <xTaskGenericCreate+0x1a4>)
   8108c:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   8108e:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   81092:	3d01      	subs	r5, #1
   81094:	6b23      	ldr	r3, [r4, #48]	; 0x30
   81096:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   8109a:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   8109e:	220a      	movs	r2, #10
   810a0:	4641      	mov	r1, r8
   810a2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   810a6:	4b52      	ldr	r3, [pc, #328]	; (811f0 <xTaskGenericCreate+0x1a8>)
   810a8:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   810aa:	2300      	movs	r3, #0
   810ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   810b0:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   810b2:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   810b4:	f104 0804 	add.w	r8, r4, #4
   810b8:	4640      	mov	r0, r8
   810ba:	4e4e      	ldr	r6, [pc, #312]	; (811f4 <xTaskGenericCreate+0x1ac>)
   810bc:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   810be:	f104 0018 	add.w	r0, r4, #24
   810c2:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   810c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   810c6:	f1c7 0305 	rsb	r3, r7, #5
   810ca:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   810cc:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   810ce:	465a      	mov	r2, fp
   810d0:	4651      	mov	r1, sl
   810d2:	4628      	mov	r0, r5
   810d4:	4b48      	ldr	r3, [pc, #288]	; (811f8 <xTaskGenericCreate+0x1b0>)
   810d6:	4798      	blx	r3
   810d8:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   810da:	f010 0f07 	tst.w	r0, #7
   810de:	d127      	bne.n	81130 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   810e0:	f1b9 0f00 	cmp.w	r9, #0
   810e4:	d001      	beq.n	810ea <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   810e6:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   810ea:	4b44      	ldr	r3, [pc, #272]	; (811fc <xTaskGenericCreate+0x1b4>)
   810ec:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   810ee:	4a44      	ldr	r2, [pc, #272]	; (81200 <xTaskGenericCreate+0x1b8>)
   810f0:	6813      	ldr	r3, [r2, #0]
   810f2:	3301      	adds	r3, #1
   810f4:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   810f6:	4b43      	ldr	r3, [pc, #268]	; (81204 <xTaskGenericCreate+0x1bc>)
   810f8:	681b      	ldr	r3, [r3, #0]
   810fa:	b1eb      	cbz	r3, 81138 <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   810fc:	4b42      	ldr	r3, [pc, #264]	; (81208 <xTaskGenericCreate+0x1c0>)
   810fe:	681b      	ldr	r3, [r3, #0]
   81100:	2b00      	cmp	r3, #0
   81102:	d140      	bne.n	81186 <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81104:	4b3f      	ldr	r3, [pc, #252]	; (81204 <xTaskGenericCreate+0x1bc>)
   81106:	681b      	ldr	r3, [r3, #0]
   81108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8110a:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   8110c:	bf24      	itt	cs
   8110e:	4b3d      	ldrcs	r3, [pc, #244]	; (81204 <xTaskGenericCreate+0x1bc>)
   81110:	601c      	strcs	r4, [r3, #0]
   81112:	e038      	b.n	81186 <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81114:	00a8      	lsls	r0, r5, #2
   81116:	4b34      	ldr	r3, [pc, #208]	; (811e8 <xTaskGenericCreate+0x1a0>)
   81118:	4798      	blx	r3
   8111a:	4606      	mov	r6, r0
   8111c:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   8111e:	2800      	cmp	r0, #0
   81120:	d1b0      	bne.n	81084 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   81122:	4620      	mov	r0, r4
   81124:	4b39      	ldr	r3, [pc, #228]	; (8120c <xTaskGenericCreate+0x1c4>)
   81126:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   81128:	f04f 30ff 	mov.w	r0, #4294967295
}
   8112c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81130:	4b2c      	ldr	r3, [pc, #176]	; (811e4 <xTaskGenericCreate+0x19c>)
   81132:	4798      	blx	r3
   81134:	bf00      	nop
   81136:	e7fd      	b.n	81134 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   81138:	4b32      	ldr	r3, [pc, #200]	; (81204 <xTaskGenericCreate+0x1bc>)
   8113a:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8113c:	6813      	ldr	r3, [r2, #0]
   8113e:	2b01      	cmp	r3, #1
   81140:	d121      	bne.n	81186 <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81142:	4e33      	ldr	r6, [pc, #204]	; (81210 <xTaskGenericCreate+0x1c8>)
   81144:	4630      	mov	r0, r6
   81146:	4d33      	ldr	r5, [pc, #204]	; (81214 <xTaskGenericCreate+0x1cc>)
   81148:	47a8      	blx	r5
   8114a:	f106 0014 	add.w	r0, r6, #20
   8114e:	47a8      	blx	r5
   81150:	f106 0028 	add.w	r0, r6, #40	; 0x28
   81154:	47a8      	blx	r5
   81156:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   8115a:	47a8      	blx	r5
   8115c:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81160:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81162:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 81248 <xTaskGenericCreate+0x200>
   81166:	4648      	mov	r0, r9
   81168:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   8116a:	4e2b      	ldr	r6, [pc, #172]	; (81218 <xTaskGenericCreate+0x1d0>)
   8116c:	4630      	mov	r0, r6
   8116e:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   81170:	482a      	ldr	r0, [pc, #168]	; (8121c <xTaskGenericCreate+0x1d4>)
   81172:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   81174:	482a      	ldr	r0, [pc, #168]	; (81220 <xTaskGenericCreate+0x1d8>)
   81176:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81178:	482a      	ldr	r0, [pc, #168]	; (81224 <xTaskGenericCreate+0x1dc>)
   8117a:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   8117c:	4b2a      	ldr	r3, [pc, #168]	; (81228 <xTaskGenericCreate+0x1e0>)
   8117e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   81182:	4b2a      	ldr	r3, [pc, #168]	; (8122c <xTaskGenericCreate+0x1e4>)
   81184:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81186:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81188:	4b29      	ldr	r3, [pc, #164]	; (81230 <xTaskGenericCreate+0x1e8>)
   8118a:	681b      	ldr	r3, [r3, #0]
   8118c:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8118e:	bf84      	itt	hi
   81190:	4b27      	ldrhi	r3, [pc, #156]	; (81230 <xTaskGenericCreate+0x1e8>)
   81192:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   81194:	4a27      	ldr	r2, [pc, #156]	; (81234 <xTaskGenericCreate+0x1ec>)
   81196:	6813      	ldr	r3, [r2, #0]
   81198:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   8119a:	3301      	adds	r3, #1
   8119c:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   8119e:	4b26      	ldr	r3, [pc, #152]	; (81238 <xTaskGenericCreate+0x1f0>)
   811a0:	681b      	ldr	r3, [r3, #0]
   811a2:	4298      	cmp	r0, r3
   811a4:	bf84      	itt	hi
   811a6:	4b24      	ldrhi	r3, [pc, #144]	; (81238 <xTaskGenericCreate+0x1f0>)
   811a8:	6018      	strhi	r0, [r3, #0]
   811aa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811ae:	4641      	mov	r1, r8
   811b0:	4b17      	ldr	r3, [pc, #92]	; (81210 <xTaskGenericCreate+0x1c8>)
   811b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811b6:	4b21      	ldr	r3, [pc, #132]	; (8123c <xTaskGenericCreate+0x1f4>)
   811b8:	4798      	blx	r3
		taskEXIT_CRITICAL();
   811ba:	4b21      	ldr	r3, [pc, #132]	; (81240 <xTaskGenericCreate+0x1f8>)
   811bc:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   811be:	4b12      	ldr	r3, [pc, #72]	; (81208 <xTaskGenericCreate+0x1c0>)
   811c0:	681b      	ldr	r3, [r3, #0]
   811c2:	b14b      	cbz	r3, 811d8 <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   811c4:	4b0f      	ldr	r3, [pc, #60]	; (81204 <xTaskGenericCreate+0x1bc>)
   811c6:	681b      	ldr	r3, [r3, #0]
   811c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   811ca:	429f      	cmp	r7, r3
   811cc:	d907      	bls.n	811de <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   811ce:	4b1d      	ldr	r3, [pc, #116]	; (81244 <xTaskGenericCreate+0x1fc>)
   811d0:	4798      	blx	r3
   811d2:	2001      	movs	r0, #1
   811d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811d8:	2001      	movs	r0, #1
   811da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811de:	2001      	movs	r0, #1
	return xReturn;
   811e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   811e4:	00080825 	.word	0x00080825
   811e8:	00080985 	.word	0x00080985
   811ec:	00082605 	.word	0x00082605
   811f0:	0008289d 	.word	0x0008289d
   811f4:	00080743 	.word	0x00080743
   811f8:	000807d9 	.word	0x000807d9
   811fc:	00080835 	.word	0x00080835
   81200:	2007ab88 	.word	0x2007ab88
   81204:	2007ab18 	.word	0x2007ab18
   81208:	2007abe8 	.word	0x2007abe8
   8120c:	00080a51 	.word	0x00080a51
   81210:	2007ab24 	.word	0x2007ab24
   81214:	0008072d 	.word	0x0008072d
   81218:	2007abb8 	.word	0x2007abb8
   8121c:	2007abd4 	.word	0x2007abd4
   81220:	2007ac00 	.word	0x2007ac00
   81224:	2007abec 	.word	0x2007abec
   81228:	2007ab1c 	.word	0x2007ab1c
   8122c:	2007ab20 	.word	0x2007ab20
   81230:	2007aba0 	.word	0x2007aba0
   81234:	2007ab94 	.word	0x2007ab94
   81238:	2007ab9c 	.word	0x2007ab9c
   8123c:	00080749 	.word	0x00080749
   81240:	00080855 	.word	0x00080855
   81244:	00080815 	.word	0x00080815
   81248:	2007aba4 	.word	0x2007aba4

0008124c <vTaskStartScheduler>:
{
   8124c:	b510      	push	{r4, lr}
   8124e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81250:	2300      	movs	r3, #0
   81252:	9303      	str	r3, [sp, #12]
   81254:	9302      	str	r3, [sp, #8]
   81256:	9301      	str	r3, [sp, #4]
   81258:	9300      	str	r3, [sp, #0]
   8125a:	2282      	movs	r2, #130	; 0x82
   8125c:	490d      	ldr	r1, [pc, #52]	; (81294 <vTaskStartScheduler+0x48>)
   8125e:	480e      	ldr	r0, [pc, #56]	; (81298 <vTaskStartScheduler+0x4c>)
   81260:	4c0e      	ldr	r4, [pc, #56]	; (8129c <vTaskStartScheduler+0x50>)
   81262:	47a0      	blx	r4
		if( xReturn == pdPASS )
   81264:	2801      	cmp	r0, #1
   81266:	d002      	beq.n	8126e <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   81268:	b180      	cbz	r0, 8128c <vTaskStartScheduler+0x40>
}
   8126a:	b004      	add	sp, #16
   8126c:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   8126e:	4b0c      	ldr	r3, [pc, #48]	; (812a0 <vTaskStartScheduler+0x54>)
   81270:	4798      	blx	r3
	if( xReturn == pdPASS )
   81272:	2801      	cmp	r0, #1
   81274:	d1f8      	bne.n	81268 <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   81276:	4b0b      	ldr	r3, [pc, #44]	; (812a4 <vTaskStartScheduler+0x58>)
   81278:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   8127a:	2201      	movs	r2, #1
   8127c:	4b0a      	ldr	r3, [pc, #40]	; (812a8 <vTaskStartScheduler+0x5c>)
   8127e:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   81280:	2200      	movs	r2, #0
   81282:	4b0a      	ldr	r3, [pc, #40]	; (812ac <vTaskStartScheduler+0x60>)
   81284:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   81286:	4b0a      	ldr	r3, [pc, #40]	; (812b0 <vTaskStartScheduler+0x64>)
   81288:	4798      	blx	r3
   8128a:	e7ee      	b.n	8126a <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   8128c:	4b05      	ldr	r3, [pc, #20]	; (812a4 <vTaskStartScheduler+0x58>)
   8128e:	4798      	blx	r3
   81290:	bf00      	nop
   81292:	e7fd      	b.n	81290 <vTaskStartScheduler+0x44>
   81294:	000853bc 	.word	0x000853bc
   81298:	00081599 	.word	0x00081599
   8129c:	00081049 	.word	0x00081049
   812a0:	00081a45 	.word	0x00081a45
   812a4:	00080825 	.word	0x00080825
   812a8:	2007abe8 	.word	0x2007abe8
   812ac:	2007ac14 	.word	0x2007ac14
   812b0:	000808f5 	.word	0x000808f5

000812b4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   812b4:	4a02      	ldr	r2, [pc, #8]	; (812c0 <vTaskSuspendAll+0xc>)
   812b6:	6813      	ldr	r3, [r2, #0]
   812b8:	3301      	adds	r3, #1
   812ba:	6013      	str	r3, [r2, #0]
   812bc:	4770      	bx	lr
   812be:	bf00      	nop
   812c0:	2007ab90 	.word	0x2007ab90

000812c4 <xTaskGetTickCount>:
{
   812c4:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   812c6:	4b04      	ldr	r3, [pc, #16]	; (812d8 <xTaskGetTickCount+0x14>)
   812c8:	4798      	blx	r3
		xTicks = xTickCount;
   812ca:	4b04      	ldr	r3, [pc, #16]	; (812dc <xTaskGetTickCount+0x18>)
   812cc:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   812ce:	4b04      	ldr	r3, [pc, #16]	; (812e0 <xTaskGetTickCount+0x1c>)
   812d0:	4798      	blx	r3
}
   812d2:	4620      	mov	r0, r4
   812d4:	bd10      	pop	{r4, pc}
   812d6:	bf00      	nop
   812d8:	00080835 	.word	0x00080835
   812dc:	2007ac14 	.word	0x2007ac14
   812e0:	00080855 	.word	0x00080855

000812e4 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   812e4:	4b3d      	ldr	r3, [pc, #244]	; (813dc <vTaskIncrementTick+0xf8>)
   812e6:	681b      	ldr	r3, [r3, #0]
   812e8:	2b00      	cmp	r3, #0
   812ea:	d16f      	bne.n	813cc <vTaskIncrementTick+0xe8>
{
   812ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   812f0:	4b3b      	ldr	r3, [pc, #236]	; (813e0 <vTaskIncrementTick+0xfc>)
   812f2:	681a      	ldr	r2, [r3, #0]
   812f4:	3201      	adds	r2, #1
   812f6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   812f8:	681b      	ldr	r3, [r3, #0]
   812fa:	b9ab      	cbnz	r3, 81328 <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   812fc:	4b39      	ldr	r3, [pc, #228]	; (813e4 <vTaskIncrementTick+0x100>)
   812fe:	681b      	ldr	r3, [r3, #0]
   81300:	681b      	ldr	r3, [r3, #0]
   81302:	2b00      	cmp	r3, #0
   81304:	d128      	bne.n	81358 <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   81306:	4b37      	ldr	r3, [pc, #220]	; (813e4 <vTaskIncrementTick+0x100>)
   81308:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8130a:	4a37      	ldr	r2, [pc, #220]	; (813e8 <vTaskIncrementTick+0x104>)
   8130c:	6810      	ldr	r0, [r2, #0]
   8130e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81310:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81312:	4936      	ldr	r1, [pc, #216]	; (813ec <vTaskIncrementTick+0x108>)
   81314:	680a      	ldr	r2, [r1, #0]
   81316:	3201      	adds	r2, #1
   81318:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8131a:	681b      	ldr	r3, [r3, #0]
   8131c:	681b      	ldr	r3, [r3, #0]
   8131e:	b9fb      	cbnz	r3, 81360 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   81320:	f04f 32ff 	mov.w	r2, #4294967295
   81324:	4b32      	ldr	r3, [pc, #200]	; (813f0 <vTaskIncrementTick+0x10c>)
   81326:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   81328:	4b2d      	ldr	r3, [pc, #180]	; (813e0 <vTaskIncrementTick+0xfc>)
   8132a:	681a      	ldr	r2, [r3, #0]
   8132c:	4b30      	ldr	r3, [pc, #192]	; (813f0 <vTaskIncrementTick+0x10c>)
   8132e:	681b      	ldr	r3, [r3, #0]
   81330:	429a      	cmp	r2, r3
   81332:	d350      	bcc.n	813d6 <vTaskIncrementTick+0xf2>
   81334:	4b2b      	ldr	r3, [pc, #172]	; (813e4 <vTaskIncrementTick+0x100>)
   81336:	681b      	ldr	r3, [r3, #0]
   81338:	681b      	ldr	r3, [r3, #0]
   8133a:	b1cb      	cbz	r3, 81370 <vTaskIncrementTick+0x8c>
   8133c:	4b29      	ldr	r3, [pc, #164]	; (813e4 <vTaskIncrementTick+0x100>)
   8133e:	681b      	ldr	r3, [r3, #0]
   81340:	68db      	ldr	r3, [r3, #12]
   81342:	68dc      	ldr	r4, [r3, #12]
   81344:	6863      	ldr	r3, [r4, #4]
   81346:	4a26      	ldr	r2, [pc, #152]	; (813e0 <vTaskIncrementTick+0xfc>)
   81348:	6812      	ldr	r2, [r2, #0]
   8134a:	4293      	cmp	r3, r2
   8134c:	d816      	bhi.n	8137c <vTaskIncrementTick+0x98>
   8134e:	4e29      	ldr	r6, [pc, #164]	; (813f4 <vTaskIncrementTick+0x110>)
   81350:	4f29      	ldr	r7, [pc, #164]	; (813f8 <vTaskIncrementTick+0x114>)
   81352:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 81408 <vTaskIncrementTick+0x124>
   81356:	e02f      	b.n	813b8 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81358:	4b28      	ldr	r3, [pc, #160]	; (813fc <vTaskIncrementTick+0x118>)
   8135a:	4798      	blx	r3
   8135c:	bf00      	nop
   8135e:	e7fd      	b.n	8135c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81360:	4b20      	ldr	r3, [pc, #128]	; (813e4 <vTaskIncrementTick+0x100>)
   81362:	681b      	ldr	r3, [r3, #0]
   81364:	68db      	ldr	r3, [r3, #12]
   81366:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81368:	685a      	ldr	r2, [r3, #4]
   8136a:	4b21      	ldr	r3, [pc, #132]	; (813f0 <vTaskIncrementTick+0x10c>)
   8136c:	601a      	str	r2, [r3, #0]
   8136e:	e7db      	b.n	81328 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   81370:	f04f 32ff 	mov.w	r2, #4294967295
   81374:	4b1e      	ldr	r3, [pc, #120]	; (813f0 <vTaskIncrementTick+0x10c>)
   81376:	601a      	str	r2, [r3, #0]
   81378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8137c:	4a1c      	ldr	r2, [pc, #112]	; (813f0 <vTaskIncrementTick+0x10c>)
   8137e:	6013      	str	r3, [r2, #0]
   81380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81384:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81386:	683b      	ldr	r3, [r7, #0]
   81388:	4298      	cmp	r0, r3
   8138a:	bf88      	it	hi
   8138c:	6038      	strhi	r0, [r7, #0]
   8138e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81392:	4629      	mov	r1, r5
   81394:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   81398:	4b19      	ldr	r3, [pc, #100]	; (81400 <vTaskIncrementTick+0x11c>)
   8139a:	4798      	blx	r3
   8139c:	4b11      	ldr	r3, [pc, #68]	; (813e4 <vTaskIncrementTick+0x100>)
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	681b      	ldr	r3, [r3, #0]
   813a2:	2b00      	cmp	r3, #0
   813a4:	d0e4      	beq.n	81370 <vTaskIncrementTick+0x8c>
   813a6:	4b0f      	ldr	r3, [pc, #60]	; (813e4 <vTaskIncrementTick+0x100>)
   813a8:	681b      	ldr	r3, [r3, #0]
   813aa:	68db      	ldr	r3, [r3, #12]
   813ac:	68dc      	ldr	r4, [r3, #12]
   813ae:	6863      	ldr	r3, [r4, #4]
   813b0:	4a0b      	ldr	r2, [pc, #44]	; (813e0 <vTaskIncrementTick+0xfc>)
   813b2:	6812      	ldr	r2, [r2, #0]
   813b4:	4293      	cmp	r3, r2
   813b6:	d8e1      	bhi.n	8137c <vTaskIncrementTick+0x98>
   813b8:	1d25      	adds	r5, r4, #4
   813ba:	4628      	mov	r0, r5
   813bc:	47b0      	blx	r6
   813be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   813c0:	2b00      	cmp	r3, #0
   813c2:	d0df      	beq.n	81384 <vTaskIncrementTick+0xa0>
   813c4:	f104 0018 	add.w	r0, r4, #24
   813c8:	47b0      	blx	r6
   813ca:	e7db      	b.n	81384 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   813cc:	4a0d      	ldr	r2, [pc, #52]	; (81404 <vTaskIncrementTick+0x120>)
   813ce:	6813      	ldr	r3, [r2, #0]
   813d0:	3301      	adds	r3, #1
   813d2:	6013      	str	r3, [r2, #0]
}
   813d4:	4770      	bx	lr
   813d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   813da:	bf00      	nop
   813dc:	2007ab90 	.word	0x2007ab90
   813e0:	2007ac14 	.word	0x2007ac14
   813e4:	2007ab1c 	.word	0x2007ab1c
   813e8:	2007ab20 	.word	0x2007ab20
   813ec:	2007abd0 	.word	0x2007abd0
   813f0:	20070138 	.word	0x20070138
   813f4:	0008079f 	.word	0x0008079f
   813f8:	2007ab9c 	.word	0x2007ab9c
   813fc:	00080825 	.word	0x00080825
   81400:	00080749 	.word	0x00080749
   81404:	2007ab8c 	.word	0x2007ab8c
   81408:	2007ab24 	.word	0x2007ab24

0008140c <xTaskResumeAll>:
{
   8140c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   81410:	4b2f      	ldr	r3, [pc, #188]	; (814d0 <xTaskResumeAll+0xc4>)
   81412:	681b      	ldr	r3, [r3, #0]
   81414:	b91b      	cbnz	r3, 8141e <xTaskResumeAll+0x12>
   81416:	4b2f      	ldr	r3, [pc, #188]	; (814d4 <xTaskResumeAll+0xc8>)
   81418:	4798      	blx	r3
   8141a:	bf00      	nop
   8141c:	e7fd      	b.n	8141a <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   8141e:	4b2e      	ldr	r3, [pc, #184]	; (814d8 <xTaskResumeAll+0xcc>)
   81420:	4798      	blx	r3
		--uxSchedulerSuspended;
   81422:	4b2b      	ldr	r3, [pc, #172]	; (814d0 <xTaskResumeAll+0xc4>)
   81424:	681a      	ldr	r2, [r3, #0]
   81426:	3a01      	subs	r2, #1
   81428:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8142a:	681b      	ldr	r3, [r3, #0]
   8142c:	2b00      	cmp	r3, #0
   8142e:	d14d      	bne.n	814cc <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81430:	4b2a      	ldr	r3, [pc, #168]	; (814dc <xTaskResumeAll+0xd0>)
   81432:	681b      	ldr	r3, [r3, #0]
   81434:	b12b      	cbz	r3, 81442 <xTaskResumeAll+0x36>
   81436:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81438:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 81508 <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   8143c:	4f28      	ldr	r7, [pc, #160]	; (814e0 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   8143e:	4e29      	ldr	r6, [pc, #164]	; (814e4 <xTaskResumeAll+0xd8>)
   81440:	e023      	b.n	8148a <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81442:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   81444:	4b28      	ldr	r3, [pc, #160]	; (814e8 <xTaskResumeAll+0xdc>)
   81446:	4798      	blx	r3
}
   81448:	4620      	mov	r0, r4
   8144a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8144e:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81452:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81454:	f105 0018 	add.w	r0, r5, #24
   81458:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8145a:	f105 0904 	add.w	r9, r5, #4
   8145e:	4648      	mov	r0, r9
   81460:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81462:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   81464:	6833      	ldr	r3, [r6, #0]
   81466:	4298      	cmp	r0, r3
   81468:	bf88      	it	hi
   8146a:	6030      	strhi	r0, [r6, #0]
   8146c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81470:	4649      	mov	r1, r9
   81472:	4b1e      	ldr	r3, [pc, #120]	; (814ec <xTaskResumeAll+0xe0>)
   81474:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81478:	4b1d      	ldr	r3, [pc, #116]	; (814f0 <xTaskResumeAll+0xe4>)
   8147a:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8147c:	4b1d      	ldr	r3, [pc, #116]	; (814f4 <xTaskResumeAll+0xe8>)
   8147e:	681b      	ldr	r3, [r3, #0]
   81480:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   81482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   81484:	429a      	cmp	r2, r3
   81486:	bf28      	it	cs
   81488:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8148a:	f8d8 3000 	ldr.w	r3, [r8]
   8148e:	2b00      	cmp	r3, #0
   81490:	d1dd      	bne.n	8144e <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81492:	4b19      	ldr	r3, [pc, #100]	; (814f8 <xTaskResumeAll+0xec>)
   81494:	681b      	ldr	r3, [r3, #0]
   81496:	b193      	cbz	r3, 814be <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81498:	4b17      	ldr	r3, [pc, #92]	; (814f8 <xTaskResumeAll+0xec>)
   8149a:	681b      	ldr	r3, [r3, #0]
   8149c:	b143      	cbz	r3, 814b0 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   8149e:	4d17      	ldr	r5, [pc, #92]	; (814fc <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   814a0:	4c15      	ldr	r4, [pc, #84]	; (814f8 <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   814a2:	47a8      	blx	r5
						--uxMissedTicks;
   814a4:	6823      	ldr	r3, [r4, #0]
   814a6:	3b01      	subs	r3, #1
   814a8:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   814aa:	6823      	ldr	r3, [r4, #0]
   814ac:	2b00      	cmp	r3, #0
   814ae:	d1f8      	bne.n	814a2 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   814b0:	2200      	movs	r2, #0
   814b2:	4b13      	ldr	r3, [pc, #76]	; (81500 <xTaskResumeAll+0xf4>)
   814b4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   814b6:	4b13      	ldr	r3, [pc, #76]	; (81504 <xTaskResumeAll+0xf8>)
   814b8:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   814ba:	2401      	movs	r4, #1
   814bc:	e7c2      	b.n	81444 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   814be:	2c01      	cmp	r4, #1
   814c0:	d0f6      	beq.n	814b0 <xTaskResumeAll+0xa4>
   814c2:	4b0f      	ldr	r3, [pc, #60]	; (81500 <xTaskResumeAll+0xf4>)
   814c4:	681b      	ldr	r3, [r3, #0]
   814c6:	2b01      	cmp	r3, #1
   814c8:	d1bc      	bne.n	81444 <xTaskResumeAll+0x38>
   814ca:	e7f1      	b.n	814b0 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   814cc:	2400      	movs	r4, #0
   814ce:	e7b9      	b.n	81444 <xTaskResumeAll+0x38>
   814d0:	2007ab90 	.word	0x2007ab90
   814d4:	00080825 	.word	0x00080825
   814d8:	00080835 	.word	0x00080835
   814dc:	2007ab88 	.word	0x2007ab88
   814e0:	0008079f 	.word	0x0008079f
   814e4:	2007ab9c 	.word	0x2007ab9c
   814e8:	00080855 	.word	0x00080855
   814ec:	2007ab24 	.word	0x2007ab24
   814f0:	00080749 	.word	0x00080749
   814f4:	2007ab18 	.word	0x2007ab18
   814f8:	2007ab8c 	.word	0x2007ab8c
   814fc:	000812e5 	.word	0x000812e5
   81500:	2007abcc 	.word	0x2007abcc
   81504:	00080815 	.word	0x00080815
   81508:	2007abd4 	.word	0x2007abd4

0008150c <vTaskDelayUntil>:
	{
   8150c:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   8150e:	b130      	cbz	r0, 8151e <vTaskDelayUntil+0x12>
   81510:	460c      	mov	r4, r1
   81512:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81514:	b939      	cbnz	r1, 81526 <vTaskDelayUntil+0x1a>
   81516:	4b18      	ldr	r3, [pc, #96]	; (81578 <vTaskDelayUntil+0x6c>)
   81518:	4798      	blx	r3
   8151a:	bf00      	nop
   8151c:	e7fd      	b.n	8151a <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   8151e:	4b16      	ldr	r3, [pc, #88]	; (81578 <vTaskDelayUntil+0x6c>)
   81520:	4798      	blx	r3
   81522:	bf00      	nop
   81524:	e7fd      	b.n	81522 <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   81526:	4b15      	ldr	r3, [pc, #84]	; (8157c <vTaskDelayUntil+0x70>)
   81528:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8152a:	682b      	ldr	r3, [r5, #0]
   8152c:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   8152e:	4a14      	ldr	r2, [pc, #80]	; (81580 <vTaskDelayUntil+0x74>)
   81530:	6812      	ldr	r2, [r2, #0]
   81532:	4293      	cmp	r3, r2
   81534:	d90a      	bls.n	8154c <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81536:	42a3      	cmp	r3, r4
   81538:	d90e      	bls.n	81558 <vTaskDelayUntil+0x4c>
   8153a:	4b11      	ldr	r3, [pc, #68]	; (81580 <vTaskDelayUntil+0x74>)
   8153c:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   8153e:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   81540:	429c      	cmp	r4, r3
   81542:	d80f      	bhi.n	81564 <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   81544:	4b0f      	ldr	r3, [pc, #60]	; (81584 <vTaskDelayUntil+0x78>)
   81546:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   81548:	b140      	cbz	r0, 8155c <vTaskDelayUntil+0x50>
   8154a:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8154c:	42a3      	cmp	r3, r4
   8154e:	d808      	bhi.n	81562 <vTaskDelayUntil+0x56>
   81550:	4b0b      	ldr	r3, [pc, #44]	; (81580 <vTaskDelayUntil+0x74>)
   81552:	681b      	ldr	r3, [r3, #0]
   81554:	429c      	cmp	r4, r3
   81556:	d804      	bhi.n	81562 <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   81558:	602c      	str	r4, [r5, #0]
   8155a:	e7f3      	b.n	81544 <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   8155c:	4b0a      	ldr	r3, [pc, #40]	; (81588 <vTaskDelayUntil+0x7c>)
   8155e:	4798      	blx	r3
	}
   81560:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   81562:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81564:	4b09      	ldr	r3, [pc, #36]	; (8158c <vTaskDelayUntil+0x80>)
   81566:	6818      	ldr	r0, [r3, #0]
   81568:	3004      	adds	r0, #4
   8156a:	4b09      	ldr	r3, [pc, #36]	; (81590 <vTaskDelayUntil+0x84>)
   8156c:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   8156e:	4620      	mov	r0, r4
   81570:	4b08      	ldr	r3, [pc, #32]	; (81594 <vTaskDelayUntil+0x88>)
   81572:	4798      	blx	r3
   81574:	e7e6      	b.n	81544 <vTaskDelayUntil+0x38>
   81576:	bf00      	nop
   81578:	00080825 	.word	0x00080825
   8157c:	000812b5 	.word	0x000812b5
   81580:	2007ac14 	.word	0x2007ac14
   81584:	0008140d 	.word	0x0008140d
   81588:	00080815 	.word	0x00080815
   8158c:	2007ab18 	.word	0x2007ab18
   81590:	0008079f 	.word	0x0008079f
   81594:	00080ff1 	.word	0x00080ff1

00081598 <prvIdleTask>:
{
   81598:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   8159a:	4d16      	ldr	r5, [pc, #88]	; (815f4 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   8159c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81618 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   815a0:	4e15      	ldr	r6, [pc, #84]	; (815f8 <prvIdleTask+0x60>)
   815a2:	e024      	b.n	815ee <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   815a4:	4b15      	ldr	r3, [pc, #84]	; (815fc <prvIdleTask+0x64>)
   815a6:	681b      	ldr	r3, [r3, #0]
   815a8:	2b01      	cmp	r3, #1
   815aa:	d81e      	bhi.n	815ea <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   815ac:	682b      	ldr	r3, [r5, #0]
   815ae:	2b00      	cmp	r3, #0
   815b0:	d0f8      	beq.n	815a4 <prvIdleTask+0xc>
			vTaskSuspendAll();
   815b2:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   815b4:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   815b6:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   815b8:	2c00      	cmp	r4, #0
   815ba:	d0f7      	beq.n	815ac <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   815bc:	4b10      	ldr	r3, [pc, #64]	; (81600 <prvIdleTask+0x68>)
   815be:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   815c0:	68f3      	ldr	r3, [r6, #12]
   815c2:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   815c4:	1d20      	adds	r0, r4, #4
   815c6:	4b0f      	ldr	r3, [pc, #60]	; (81604 <prvIdleTask+0x6c>)
   815c8:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   815ca:	4a0f      	ldr	r2, [pc, #60]	; (81608 <prvIdleTask+0x70>)
   815cc:	6813      	ldr	r3, [r2, #0]
   815ce:	3b01      	subs	r3, #1
   815d0:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   815d2:	682b      	ldr	r3, [r5, #0]
   815d4:	3b01      	subs	r3, #1
   815d6:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   815d8:	4b0c      	ldr	r3, [pc, #48]	; (8160c <prvIdleTask+0x74>)
   815da:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   815dc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   815de:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8161c <prvIdleTask+0x84>
   815e2:	47c8      	blx	r9
		vPortFree( pxTCB );
   815e4:	4620      	mov	r0, r4
   815e6:	47c8      	blx	r9
   815e8:	e7e0      	b.n	815ac <prvIdleTask+0x14>
				taskYIELD();
   815ea:	4b09      	ldr	r3, [pc, #36]	; (81610 <prvIdleTask+0x78>)
   815ec:	4798      	blx	r3
			xTaskResumeAll();
   815ee:	4f09      	ldr	r7, [pc, #36]	; (81614 <prvIdleTask+0x7c>)
   815f0:	e7dc      	b.n	815ac <prvIdleTask+0x14>
   815f2:	bf00      	nop
   815f4:	2007ab98 	.word	0x2007ab98
   815f8:	2007ac00 	.word	0x2007ac00
   815fc:	2007ab24 	.word	0x2007ab24
   81600:	00080835 	.word	0x00080835
   81604:	0008079f 	.word	0x0008079f
   81608:	2007ab88 	.word	0x2007ab88
   8160c:	00080855 	.word	0x00080855
   81610:	00080815 	.word	0x00080815
   81614:	0008140d 	.word	0x0008140d
   81618:	000812b5 	.word	0x000812b5
   8161c:	00080a51 	.word	0x00080a51

00081620 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81620:	4b21      	ldr	r3, [pc, #132]	; (816a8 <vTaskSwitchContext+0x88>)
   81622:	681b      	ldr	r3, [r3, #0]
   81624:	b9eb      	cbnz	r3, 81662 <vTaskSwitchContext+0x42>
{
   81626:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81628:	4b20      	ldr	r3, [pc, #128]	; (816ac <vTaskSwitchContext+0x8c>)
   8162a:	681b      	ldr	r3, [r3, #0]
   8162c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81630:	009b      	lsls	r3, r3, #2
   81632:	4a1f      	ldr	r2, [pc, #124]	; (816b0 <vTaskSwitchContext+0x90>)
   81634:	58d3      	ldr	r3, [r2, r3]
   81636:	b9c3      	cbnz	r3, 8166a <vTaskSwitchContext+0x4a>
   81638:	4b1c      	ldr	r3, [pc, #112]	; (816ac <vTaskSwitchContext+0x8c>)
   8163a:	681b      	ldr	r3, [r3, #0]
   8163c:	b16b      	cbz	r3, 8165a <vTaskSwitchContext+0x3a>
   8163e:	4a1b      	ldr	r2, [pc, #108]	; (816ac <vTaskSwitchContext+0x8c>)
   81640:	491b      	ldr	r1, [pc, #108]	; (816b0 <vTaskSwitchContext+0x90>)
   81642:	6813      	ldr	r3, [r2, #0]
   81644:	3b01      	subs	r3, #1
   81646:	6013      	str	r3, [r2, #0]
   81648:	6813      	ldr	r3, [r2, #0]
   8164a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8164e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81652:	b953      	cbnz	r3, 8166a <vTaskSwitchContext+0x4a>
   81654:	6813      	ldr	r3, [r2, #0]
   81656:	2b00      	cmp	r3, #0
   81658:	d1f3      	bne.n	81642 <vTaskSwitchContext+0x22>
   8165a:	4b16      	ldr	r3, [pc, #88]	; (816b4 <vTaskSwitchContext+0x94>)
   8165c:	4798      	blx	r3
   8165e:	bf00      	nop
   81660:	e7fd      	b.n	8165e <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   81662:	2201      	movs	r2, #1
   81664:	4b14      	ldr	r3, [pc, #80]	; (816b8 <vTaskSwitchContext+0x98>)
   81666:	601a      	str	r2, [r3, #0]
   81668:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8166a:	4b10      	ldr	r3, [pc, #64]	; (816ac <vTaskSwitchContext+0x8c>)
   8166c:	681b      	ldr	r3, [r3, #0]
   8166e:	4a10      	ldr	r2, [pc, #64]	; (816b0 <vTaskSwitchContext+0x90>)
   81670:	0099      	lsls	r1, r3, #2
   81672:	18c8      	adds	r0, r1, r3
   81674:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81678:	6844      	ldr	r4, [r0, #4]
   8167a:	6864      	ldr	r4, [r4, #4]
   8167c:	6044      	str	r4, [r0, #4]
   8167e:	4419      	add	r1, r3
   81680:	4602      	mov	r2, r0
   81682:	3208      	adds	r2, #8
   81684:	4294      	cmp	r4, r2
   81686:	d009      	beq.n	8169c <vTaskSwitchContext+0x7c>
   81688:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8168c:	4a08      	ldr	r2, [pc, #32]	; (816b0 <vTaskSwitchContext+0x90>)
   8168e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81692:	685b      	ldr	r3, [r3, #4]
   81694:	68da      	ldr	r2, [r3, #12]
   81696:	4b09      	ldr	r3, [pc, #36]	; (816bc <vTaskSwitchContext+0x9c>)
   81698:	601a      	str	r2, [r3, #0]
   8169a:	bd10      	pop	{r4, pc}
   8169c:	6860      	ldr	r0, [r4, #4]
   8169e:	4a04      	ldr	r2, [pc, #16]	; (816b0 <vTaskSwitchContext+0x90>)
   816a0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   816a4:	6050      	str	r0, [r2, #4]
   816a6:	e7ef      	b.n	81688 <vTaskSwitchContext+0x68>
   816a8:	2007ab90 	.word	0x2007ab90
   816ac:	2007ab9c 	.word	0x2007ab9c
   816b0:	2007ab24 	.word	0x2007ab24
   816b4:	00080825 	.word	0x00080825
   816b8:	2007abcc 	.word	0x2007abcc
   816bc:	2007ab18 	.word	0x2007ab18

000816c0 <vTaskPlaceOnEventList>:
{
   816c0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   816c2:	b190      	cbz	r0, 816ea <vTaskPlaceOnEventList+0x2a>
   816c4:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   816c6:	4d0e      	ldr	r5, [pc, #56]	; (81700 <vTaskPlaceOnEventList+0x40>)
   816c8:	6829      	ldr	r1, [r5, #0]
   816ca:	3118      	adds	r1, #24
   816cc:	4b0d      	ldr	r3, [pc, #52]	; (81704 <vTaskPlaceOnEventList+0x44>)
   816ce:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   816d0:	6828      	ldr	r0, [r5, #0]
   816d2:	3004      	adds	r0, #4
   816d4:	4b0c      	ldr	r3, [pc, #48]	; (81708 <vTaskPlaceOnEventList+0x48>)
   816d6:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   816d8:	f1b4 3fff 	cmp.w	r4, #4294967295
   816dc:	d009      	beq.n	816f2 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   816de:	4b0b      	ldr	r3, [pc, #44]	; (8170c <vTaskPlaceOnEventList+0x4c>)
   816e0:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   816e2:	4420      	add	r0, r4
   816e4:	4b0a      	ldr	r3, [pc, #40]	; (81710 <vTaskPlaceOnEventList+0x50>)
   816e6:	4798      	blx	r3
   816e8:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   816ea:	4b0a      	ldr	r3, [pc, #40]	; (81714 <vTaskPlaceOnEventList+0x54>)
   816ec:	4798      	blx	r3
   816ee:	bf00      	nop
   816f0:	e7fd      	b.n	816ee <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   816f2:	6829      	ldr	r1, [r5, #0]
   816f4:	3104      	adds	r1, #4
   816f6:	4808      	ldr	r0, [pc, #32]	; (81718 <vTaskPlaceOnEventList+0x58>)
   816f8:	4b08      	ldr	r3, [pc, #32]	; (8171c <vTaskPlaceOnEventList+0x5c>)
   816fa:	4798      	blx	r3
   816fc:	bd38      	pop	{r3, r4, r5, pc}
   816fe:	bf00      	nop
   81700:	2007ab18 	.word	0x2007ab18
   81704:	00080765 	.word	0x00080765
   81708:	0008079f 	.word	0x0008079f
   8170c:	2007ac14 	.word	0x2007ac14
   81710:	00080ff1 	.word	0x00080ff1
   81714:	00080825 	.word	0x00080825
   81718:	2007abec 	.word	0x2007abec
   8171c:	00080749 	.word	0x00080749

00081720 <vTaskPlaceOnEventListRestricted>:
	{
   81720:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81722:	b178      	cbz	r0, 81744 <vTaskPlaceOnEventListRestricted+0x24>
   81724:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81726:	4c09      	ldr	r4, [pc, #36]	; (8174c <vTaskPlaceOnEventListRestricted+0x2c>)
   81728:	6821      	ldr	r1, [r4, #0]
   8172a:	3118      	adds	r1, #24
   8172c:	4b08      	ldr	r3, [pc, #32]	; (81750 <vTaskPlaceOnEventListRestricted+0x30>)
   8172e:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81730:	6820      	ldr	r0, [r4, #0]
   81732:	3004      	adds	r0, #4
   81734:	4b07      	ldr	r3, [pc, #28]	; (81754 <vTaskPlaceOnEventListRestricted+0x34>)
   81736:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   81738:	4b07      	ldr	r3, [pc, #28]	; (81758 <vTaskPlaceOnEventListRestricted+0x38>)
   8173a:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   8173c:	4428      	add	r0, r5
   8173e:	4b07      	ldr	r3, [pc, #28]	; (8175c <vTaskPlaceOnEventListRestricted+0x3c>)
   81740:	4798      	blx	r3
   81742:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   81744:	4b06      	ldr	r3, [pc, #24]	; (81760 <vTaskPlaceOnEventListRestricted+0x40>)
   81746:	4798      	blx	r3
   81748:	bf00      	nop
   8174a:	e7fd      	b.n	81748 <vTaskPlaceOnEventListRestricted+0x28>
   8174c:	2007ab18 	.word	0x2007ab18
   81750:	00080749 	.word	0x00080749
   81754:	0008079f 	.word	0x0008079f
   81758:	2007ac14 	.word	0x2007ac14
   8175c:	00080ff1 	.word	0x00080ff1
   81760:	00080825 	.word	0x00080825

00081764 <xTaskRemoveFromEventList>:
{
   81764:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81766:	68c3      	ldr	r3, [r0, #12]
   81768:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8176a:	b31c      	cbz	r4, 817b4 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   8176c:	f104 0518 	add.w	r5, r4, #24
   81770:	4628      	mov	r0, r5
   81772:	4b15      	ldr	r3, [pc, #84]	; (817c8 <xTaskRemoveFromEventList+0x64>)
   81774:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81776:	4b15      	ldr	r3, [pc, #84]	; (817cc <xTaskRemoveFromEventList+0x68>)
   81778:	681b      	ldr	r3, [r3, #0]
   8177a:	b9fb      	cbnz	r3, 817bc <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   8177c:	1d25      	adds	r5, r4, #4
   8177e:	4628      	mov	r0, r5
   81780:	4b11      	ldr	r3, [pc, #68]	; (817c8 <xTaskRemoveFromEventList+0x64>)
   81782:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81784:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81786:	4b12      	ldr	r3, [pc, #72]	; (817d0 <xTaskRemoveFromEventList+0x6c>)
   81788:	681b      	ldr	r3, [r3, #0]
   8178a:	4298      	cmp	r0, r3
   8178c:	bf84      	itt	hi
   8178e:	4b10      	ldrhi	r3, [pc, #64]	; (817d0 <xTaskRemoveFromEventList+0x6c>)
   81790:	6018      	strhi	r0, [r3, #0]
   81792:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81796:	4629      	mov	r1, r5
   81798:	4b0e      	ldr	r3, [pc, #56]	; (817d4 <xTaskRemoveFromEventList+0x70>)
   8179a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8179e:	4b0e      	ldr	r3, [pc, #56]	; (817d8 <xTaskRemoveFromEventList+0x74>)
   817a0:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   817a2:	4b0e      	ldr	r3, [pc, #56]	; (817dc <xTaskRemoveFromEventList+0x78>)
   817a4:	681b      	ldr	r3, [r3, #0]
   817a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   817aa:	4298      	cmp	r0, r3
   817ac:	bf34      	ite	cc
   817ae:	2000      	movcc	r0, #0
   817b0:	2001      	movcs	r0, #1
   817b2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   817b4:	4b0a      	ldr	r3, [pc, #40]	; (817e0 <xTaskRemoveFromEventList+0x7c>)
   817b6:	4798      	blx	r3
   817b8:	bf00      	nop
   817ba:	e7fd      	b.n	817b8 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   817bc:	4629      	mov	r1, r5
   817be:	4809      	ldr	r0, [pc, #36]	; (817e4 <xTaskRemoveFromEventList+0x80>)
   817c0:	4b05      	ldr	r3, [pc, #20]	; (817d8 <xTaskRemoveFromEventList+0x74>)
   817c2:	4798      	blx	r3
   817c4:	e7ed      	b.n	817a2 <xTaskRemoveFromEventList+0x3e>
   817c6:	bf00      	nop
   817c8:	0008079f 	.word	0x0008079f
   817cc:	2007ab90 	.word	0x2007ab90
   817d0:	2007ab9c 	.word	0x2007ab9c
   817d4:	2007ab24 	.word	0x2007ab24
   817d8:	00080749 	.word	0x00080749
   817dc:	2007ab18 	.word	0x2007ab18
   817e0:	00080825 	.word	0x00080825
   817e4:	2007abd4 	.word	0x2007abd4

000817e8 <vTaskSetTimeOutState>:
{
   817e8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   817ea:	b130      	cbz	r0, 817fa <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   817ec:	4a05      	ldr	r2, [pc, #20]	; (81804 <vTaskSetTimeOutState+0x1c>)
   817ee:	6812      	ldr	r2, [r2, #0]
   817f0:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   817f2:	4a05      	ldr	r2, [pc, #20]	; (81808 <vTaskSetTimeOutState+0x20>)
   817f4:	6812      	ldr	r2, [r2, #0]
   817f6:	6042      	str	r2, [r0, #4]
   817f8:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   817fa:	4b04      	ldr	r3, [pc, #16]	; (8180c <vTaskSetTimeOutState+0x24>)
   817fc:	4798      	blx	r3
   817fe:	bf00      	nop
   81800:	e7fd      	b.n	817fe <vTaskSetTimeOutState+0x16>
   81802:	bf00      	nop
   81804:	2007abd0 	.word	0x2007abd0
   81808:	2007ac14 	.word	0x2007ac14
   8180c:	00080825 	.word	0x00080825

00081810 <xTaskCheckForTimeOut>:
{
   81810:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   81812:	b1e8      	cbz	r0, 81850 <xTaskCheckForTimeOut+0x40>
   81814:	460d      	mov	r5, r1
   81816:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81818:	b1f1      	cbz	r1, 81858 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   8181a:	4b18      	ldr	r3, [pc, #96]	; (8187c <xTaskCheckForTimeOut+0x6c>)
   8181c:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   8181e:	682b      	ldr	r3, [r5, #0]
   81820:	f1b3 3fff 	cmp.w	r3, #4294967295
   81824:	d026      	beq.n	81874 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81826:	4a16      	ldr	r2, [pc, #88]	; (81880 <xTaskCheckForTimeOut+0x70>)
   81828:	6812      	ldr	r2, [r2, #0]
   8182a:	6821      	ldr	r1, [r4, #0]
   8182c:	4291      	cmp	r1, r2
   8182e:	d004      	beq.n	8183a <xTaskCheckForTimeOut+0x2a>
   81830:	4a14      	ldr	r2, [pc, #80]	; (81884 <xTaskCheckForTimeOut+0x74>)
   81832:	6812      	ldr	r2, [r2, #0]
   81834:	6861      	ldr	r1, [r4, #4]
   81836:	4291      	cmp	r1, r2
   81838:	d91e      	bls.n	81878 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8183a:	4a12      	ldr	r2, [pc, #72]	; (81884 <xTaskCheckForTimeOut+0x74>)
   8183c:	6812      	ldr	r2, [r2, #0]
   8183e:	6861      	ldr	r1, [r4, #4]
   81840:	1a52      	subs	r2, r2, r1
   81842:	4293      	cmp	r3, r2
   81844:	d80c      	bhi.n	81860 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   81846:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81848:	4b0f      	ldr	r3, [pc, #60]	; (81888 <xTaskCheckForTimeOut+0x78>)
   8184a:	4798      	blx	r3
}
   8184c:	4620      	mov	r0, r4
   8184e:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81850:	4b0e      	ldr	r3, [pc, #56]	; (8188c <xTaskCheckForTimeOut+0x7c>)
   81852:	4798      	blx	r3
   81854:	bf00      	nop
   81856:	e7fd      	b.n	81854 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81858:	4b0c      	ldr	r3, [pc, #48]	; (8188c <xTaskCheckForTimeOut+0x7c>)
   8185a:	4798      	blx	r3
   8185c:	bf00      	nop
   8185e:	e7fd      	b.n	8185c <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81860:	4a08      	ldr	r2, [pc, #32]	; (81884 <xTaskCheckForTimeOut+0x74>)
   81862:	6812      	ldr	r2, [r2, #0]
   81864:	1a52      	subs	r2, r2, r1
   81866:	1a9b      	subs	r3, r3, r2
   81868:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   8186a:	4620      	mov	r0, r4
   8186c:	4b08      	ldr	r3, [pc, #32]	; (81890 <xTaskCheckForTimeOut+0x80>)
   8186e:	4798      	blx	r3
			xReturn = pdFALSE;
   81870:	2400      	movs	r4, #0
   81872:	e7e9      	b.n	81848 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81874:	2400      	movs	r4, #0
   81876:	e7e7      	b.n	81848 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81878:	2401      	movs	r4, #1
   8187a:	e7e5      	b.n	81848 <xTaskCheckForTimeOut+0x38>
   8187c:	00080835 	.word	0x00080835
   81880:	2007abd0 	.word	0x2007abd0
   81884:	2007ac14 	.word	0x2007ac14
   81888:	00080855 	.word	0x00080855
   8188c:	00080825 	.word	0x00080825
   81890:	000817e9 	.word	0x000817e9

00081894 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81894:	2201      	movs	r2, #1
   81896:	4b01      	ldr	r3, [pc, #4]	; (8189c <vTaskMissedYield+0x8>)
   81898:	601a      	str	r2, [r3, #0]
   8189a:	4770      	bx	lr
   8189c:	2007abcc 	.word	0x2007abcc

000818a0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   818a0:	4b01      	ldr	r3, [pc, #4]	; (818a8 <xTaskGetCurrentTaskHandle+0x8>)
   818a2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   818a4:	4770      	bx	lr
   818a6:	bf00      	nop
   818a8:	2007ab18 	.word	0x2007ab18

000818ac <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   818ac:	4b05      	ldr	r3, [pc, #20]	; (818c4 <xTaskGetSchedulerState+0x18>)
   818ae:	681b      	ldr	r3, [r3, #0]
   818b0:	b133      	cbz	r3, 818c0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   818b2:	4b05      	ldr	r3, [pc, #20]	; (818c8 <xTaskGetSchedulerState+0x1c>)
   818b4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   818b6:	2b00      	cmp	r3, #0
   818b8:	bf0c      	ite	eq
   818ba:	2001      	moveq	r0, #1
   818bc:	2002      	movne	r0, #2
   818be:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   818c0:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   818c2:	4770      	bx	lr
   818c4:	2007abe8 	.word	0x2007abe8
   818c8:	2007ab90 	.word	0x2007ab90

000818cc <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   818cc:	2800      	cmp	r0, #0
   818ce:	d031      	beq.n	81934 <vTaskPriorityInherit+0x68>
	{
   818d0:	b538      	push	{r3, r4, r5, lr}
   818d2:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   818d4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   818d6:	4918      	ldr	r1, [pc, #96]	; (81938 <vTaskPriorityInherit+0x6c>)
   818d8:	6809      	ldr	r1, [r1, #0]
   818da:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   818dc:	428b      	cmp	r3, r1
   818de:	d211      	bcs.n	81904 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   818e0:	4915      	ldr	r1, [pc, #84]	; (81938 <vTaskPriorityInherit+0x6c>)
   818e2:	6809      	ldr	r1, [r1, #0]
   818e4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   818e6:	f1c1 0105 	rsb	r1, r1, #5
   818ea:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   818ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   818f0:	4912      	ldr	r1, [pc, #72]	; (8193c <vTaskPriorityInherit+0x70>)
   818f2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   818f6:	6941      	ldr	r1, [r0, #20]
   818f8:	4299      	cmp	r1, r3
   818fa:	d004      	beq.n	81906 <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   818fc:	4b0e      	ldr	r3, [pc, #56]	; (81938 <vTaskPriorityInherit+0x6c>)
   818fe:	681b      	ldr	r3, [r3, #0]
   81900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81902:	62c3      	str	r3, [r0, #44]	; 0x2c
   81904:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81906:	1d04      	adds	r4, r0, #4
   81908:	4620      	mov	r0, r4
   8190a:	4b0d      	ldr	r3, [pc, #52]	; (81940 <vTaskPriorityInherit+0x74>)
   8190c:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8190e:	4b0a      	ldr	r3, [pc, #40]	; (81938 <vTaskPriorityInherit+0x6c>)
   81910:	681b      	ldr	r3, [r3, #0]
   81912:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81914:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81916:	4b0b      	ldr	r3, [pc, #44]	; (81944 <vTaskPriorityInherit+0x78>)
   81918:	681b      	ldr	r3, [r3, #0]
   8191a:	4298      	cmp	r0, r3
   8191c:	bf84      	itt	hi
   8191e:	4b09      	ldrhi	r3, [pc, #36]	; (81944 <vTaskPriorityInherit+0x78>)
   81920:	6018      	strhi	r0, [r3, #0]
   81922:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81926:	4621      	mov	r1, r4
   81928:	4b04      	ldr	r3, [pc, #16]	; (8193c <vTaskPriorityInherit+0x70>)
   8192a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   8192e:	4b06      	ldr	r3, [pc, #24]	; (81948 <vTaskPriorityInherit+0x7c>)
   81930:	4798      	blx	r3
   81932:	bd38      	pop	{r3, r4, r5, pc}
   81934:	4770      	bx	lr
   81936:	bf00      	nop
   81938:	2007ab18 	.word	0x2007ab18
   8193c:	2007ab24 	.word	0x2007ab24
   81940:	0008079f 	.word	0x0008079f
   81944:	2007ab9c 	.word	0x2007ab9c
   81948:	00080749 	.word	0x00080749

0008194c <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8194c:	b1e8      	cbz	r0, 8198a <vTaskPriorityDisinherit+0x3e>
	{
   8194e:	b538      	push	{r3, r4, r5, lr}
   81950:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81952:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81954:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81956:	4291      	cmp	r1, r2
   81958:	d016      	beq.n	81988 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8195a:	1d05      	adds	r5, r0, #4
   8195c:	4628      	mov	r0, r5
   8195e:	4b0b      	ldr	r3, [pc, #44]	; (8198c <vTaskPriorityDisinherit+0x40>)
   81960:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81962:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81964:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81966:	f1c0 0305 	rsb	r3, r0, #5
   8196a:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8196c:	4b08      	ldr	r3, [pc, #32]	; (81990 <vTaskPriorityDisinherit+0x44>)
   8196e:	681b      	ldr	r3, [r3, #0]
   81970:	4298      	cmp	r0, r3
   81972:	bf84      	itt	hi
   81974:	4b06      	ldrhi	r3, [pc, #24]	; (81990 <vTaskPriorityDisinherit+0x44>)
   81976:	6018      	strhi	r0, [r3, #0]
   81978:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8197c:	4629      	mov	r1, r5
   8197e:	4b05      	ldr	r3, [pc, #20]	; (81994 <vTaskPriorityDisinherit+0x48>)
   81980:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81984:	4b04      	ldr	r3, [pc, #16]	; (81998 <vTaskPriorityDisinherit+0x4c>)
   81986:	4798      	blx	r3
   81988:	bd38      	pop	{r3, r4, r5, pc}
   8198a:	4770      	bx	lr
   8198c:	0008079f 	.word	0x0008079f
   81990:	2007ab9c 	.word	0x2007ab9c
   81994:	2007ab24 	.word	0x2007ab24
   81998:	00080749 	.word	0x00080749

0008199c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   8199c:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   8199e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   819a0:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   819a2:	4291      	cmp	r1, r2
   819a4:	d80c      	bhi.n	819c0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   819a6:	1ad2      	subs	r2, r2, r3
   819a8:	6983      	ldr	r3, [r0, #24]
   819aa:	429a      	cmp	r2, r3
   819ac:	d301      	bcc.n	819b2 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   819ae:	2001      	movs	r0, #1
   819b0:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   819b2:	1d01      	adds	r1, r0, #4
   819b4:	4b09      	ldr	r3, [pc, #36]	; (819dc <prvInsertTimerInActiveList+0x40>)
   819b6:	6818      	ldr	r0, [r3, #0]
   819b8:	4b09      	ldr	r3, [pc, #36]	; (819e0 <prvInsertTimerInActiveList+0x44>)
   819ba:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   819bc:	2000      	movs	r0, #0
   819be:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   819c0:	429a      	cmp	r2, r3
   819c2:	d201      	bcs.n	819c8 <prvInsertTimerInActiveList+0x2c>
   819c4:	4299      	cmp	r1, r3
   819c6:	d206      	bcs.n	819d6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   819c8:	1d01      	adds	r1, r0, #4
   819ca:	4b06      	ldr	r3, [pc, #24]	; (819e4 <prvInsertTimerInActiveList+0x48>)
   819cc:	6818      	ldr	r0, [r3, #0]
   819ce:	4b04      	ldr	r3, [pc, #16]	; (819e0 <prvInsertTimerInActiveList+0x44>)
   819d0:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   819d2:	2000      	movs	r0, #0
   819d4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   819d6:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   819d8:	bd08      	pop	{r3, pc}
   819da:	bf00      	nop
   819dc:	2007ac1c 	.word	0x2007ac1c
   819e0:	00080765 	.word	0x00080765
   819e4:	2007ac18 	.word	0x2007ac18

000819e8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   819e8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   819ea:	4b0d      	ldr	r3, [pc, #52]	; (81a20 <prvCheckForValidListAndQueue+0x38>)
   819ec:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   819ee:	4b0d      	ldr	r3, [pc, #52]	; (81a24 <prvCheckForValidListAndQueue+0x3c>)
   819f0:	681b      	ldr	r3, [r3, #0]
   819f2:	b113      	cbz	r3, 819fa <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   819f4:	4b0c      	ldr	r3, [pc, #48]	; (81a28 <prvCheckForValidListAndQueue+0x40>)
   819f6:	4798      	blx	r3
   819f8:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   819fa:	4d0c      	ldr	r5, [pc, #48]	; (81a2c <prvCheckForValidListAndQueue+0x44>)
   819fc:	4628      	mov	r0, r5
   819fe:	4e0c      	ldr	r6, [pc, #48]	; (81a30 <prvCheckForValidListAndQueue+0x48>)
   81a00:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81a02:	4c0c      	ldr	r4, [pc, #48]	; (81a34 <prvCheckForValidListAndQueue+0x4c>)
   81a04:	4620      	mov	r0, r4
   81a06:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81a08:	4b0b      	ldr	r3, [pc, #44]	; (81a38 <prvCheckForValidListAndQueue+0x50>)
   81a0a:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81a0c:	4b0b      	ldr	r3, [pc, #44]	; (81a3c <prvCheckForValidListAndQueue+0x54>)
   81a0e:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81a10:	2200      	movs	r2, #0
   81a12:	210c      	movs	r1, #12
   81a14:	2005      	movs	r0, #5
   81a16:	4b0a      	ldr	r3, [pc, #40]	; (81a40 <prvCheckForValidListAndQueue+0x58>)
   81a18:	4798      	blx	r3
   81a1a:	4b02      	ldr	r3, [pc, #8]	; (81a24 <prvCheckForValidListAndQueue+0x3c>)
   81a1c:	6018      	str	r0, [r3, #0]
   81a1e:	e7e9      	b.n	819f4 <prvCheckForValidListAndQueue+0xc>
   81a20:	00080835 	.word	0x00080835
   81a24:	2007ac4c 	.word	0x2007ac4c
   81a28:	00080855 	.word	0x00080855
   81a2c:	2007ac20 	.word	0x2007ac20
   81a30:	0008072d 	.word	0x0008072d
   81a34:	2007ac34 	.word	0x2007ac34
   81a38:	2007ac18 	.word	0x2007ac18
   81a3c:	2007ac1c 	.word	0x2007ac1c
   81a40:	00080c2d 	.word	0x00080c2d

00081a44 <xTimerCreateTimerTask>:
{
   81a44:	b510      	push	{r4, lr}
   81a46:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   81a48:	4b0b      	ldr	r3, [pc, #44]	; (81a78 <xTimerCreateTimerTask+0x34>)
   81a4a:	4798      	blx	r3
	if( xTimerQueue != NULL )
   81a4c:	4b0b      	ldr	r3, [pc, #44]	; (81a7c <xTimerCreateTimerTask+0x38>)
   81a4e:	681b      	ldr	r3, [r3, #0]
   81a50:	b173      	cbz	r3, 81a70 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81a52:	2300      	movs	r3, #0
   81a54:	9303      	str	r3, [sp, #12]
   81a56:	9302      	str	r3, [sp, #8]
   81a58:	9301      	str	r3, [sp, #4]
   81a5a:	2204      	movs	r2, #4
   81a5c:	9200      	str	r2, [sp, #0]
   81a5e:	f44f 7282 	mov.w	r2, #260	; 0x104
   81a62:	4907      	ldr	r1, [pc, #28]	; (81a80 <xTimerCreateTimerTask+0x3c>)
   81a64:	4807      	ldr	r0, [pc, #28]	; (81a84 <xTimerCreateTimerTask+0x40>)
   81a66:	4c08      	ldr	r4, [pc, #32]	; (81a88 <xTimerCreateTimerTask+0x44>)
   81a68:	47a0      	blx	r4
	configASSERT( xReturn );
   81a6a:	b108      	cbz	r0, 81a70 <xTimerCreateTimerTask+0x2c>
}
   81a6c:	b004      	add	sp, #16
   81a6e:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   81a70:	4b06      	ldr	r3, [pc, #24]	; (81a8c <xTimerCreateTimerTask+0x48>)
   81a72:	4798      	blx	r3
   81a74:	bf00      	nop
   81a76:	e7fd      	b.n	81a74 <xTimerCreateTimerTask+0x30>
   81a78:	000819e9 	.word	0x000819e9
   81a7c:	2007ac4c 	.word	0x2007ac4c
   81a80:	000853c4 	.word	0x000853c4
   81a84:	00081b95 	.word	0x00081b95
   81a88:	00081049 	.word	0x00081049
   81a8c:	00080825 	.word	0x00080825

00081a90 <xTimerGenericCommand>:
{
   81a90:	b530      	push	{r4, r5, lr}
   81a92:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   81a94:	4c0f      	ldr	r4, [pc, #60]	; (81ad4 <xTimerGenericCommand+0x44>)
   81a96:	6825      	ldr	r5, [r4, #0]
   81a98:	b1d5      	cbz	r5, 81ad0 <xTimerGenericCommand+0x40>
   81a9a:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81a9c:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81a9e:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81aa0:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81aa2:	b13b      	cbz	r3, 81ab4 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81aa4:	2300      	movs	r3, #0
   81aa6:	4622      	mov	r2, r4
   81aa8:	a901      	add	r1, sp, #4
   81aaa:	4628      	mov	r0, r5
   81aac:	4c0a      	ldr	r4, [pc, #40]	; (81ad8 <xTimerGenericCommand+0x48>)
   81aae:	47a0      	blx	r4
}
   81ab0:	b005      	add	sp, #20
   81ab2:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81ab4:	4b09      	ldr	r3, [pc, #36]	; (81adc <xTimerGenericCommand+0x4c>)
   81ab6:	4798      	blx	r3
   81ab8:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81aba:	f04f 0300 	mov.w	r3, #0
   81abe:	bf0c      	ite	eq
   81ac0:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81ac2:	461a      	movne	r2, r3
   81ac4:	a901      	add	r1, sp, #4
   81ac6:	4803      	ldr	r0, [pc, #12]	; (81ad4 <xTimerGenericCommand+0x44>)
   81ac8:	6800      	ldr	r0, [r0, #0]
   81aca:	4c05      	ldr	r4, [pc, #20]	; (81ae0 <xTimerGenericCommand+0x50>)
   81acc:	47a0      	blx	r4
   81ace:	e7ef      	b.n	81ab0 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   81ad0:	2000      	movs	r0, #0
	return xReturn;
   81ad2:	e7ed      	b.n	81ab0 <xTimerGenericCommand+0x20>
   81ad4:	2007ac4c 	.word	0x2007ac4c
   81ad8:	00080da9 	.word	0x00080da9
   81adc:	000818ad 	.word	0x000818ad
   81ae0:	00080c81 	.word	0x00080c81

00081ae4 <prvSampleTimeNow>:
{
   81ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ae8:	b082      	sub	sp, #8
   81aea:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   81aec:	4b21      	ldr	r3, [pc, #132]	; (81b74 <prvSampleTimeNow+0x90>)
   81aee:	4798      	blx	r3
   81af0:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   81af2:	4b21      	ldr	r3, [pc, #132]	; (81b78 <prvSampleTimeNow+0x94>)
   81af4:	681b      	ldr	r3, [r3, #0]
   81af6:	4298      	cmp	r0, r3
   81af8:	d315      	bcc.n	81b26 <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   81afa:	2300      	movs	r3, #0
   81afc:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   81b00:	4b1d      	ldr	r3, [pc, #116]	; (81b78 <prvSampleTimeNow+0x94>)
   81b02:	f8c3 8000 	str.w	r8, [r3]
}
   81b06:	4640      	mov	r0, r8
   81b08:	b002      	add	sp, #8
   81b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81b0e:	2100      	movs	r1, #0
   81b10:	9100      	str	r1, [sp, #0]
   81b12:	460b      	mov	r3, r1
   81b14:	4652      	mov	r2, sl
   81b16:	4620      	mov	r0, r4
   81b18:	4c18      	ldr	r4, [pc, #96]	; (81b7c <prvSampleTimeNow+0x98>)
   81b1a:	47a0      	blx	r4
				configASSERT( xResult );
   81b1c:	b928      	cbnz	r0, 81b2a <prvSampleTimeNow+0x46>
   81b1e:	4b18      	ldr	r3, [pc, #96]	; (81b80 <prvSampleTimeNow+0x9c>)
   81b20:	4798      	blx	r3
   81b22:	bf00      	nop
   81b24:	e7fd      	b.n	81b22 <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81b26:	4e17      	ldr	r6, [pc, #92]	; (81b84 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b28:	4f17      	ldr	r7, [pc, #92]	; (81b88 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   81b2a:	6833      	ldr	r3, [r6, #0]
   81b2c:	681a      	ldr	r2, [r3, #0]
   81b2e:	b1c2      	cbz	r2, 81b62 <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b30:	68da      	ldr	r2, [r3, #12]
   81b32:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81b36:	68db      	ldr	r3, [r3, #12]
   81b38:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   81b3a:	1d25      	adds	r5, r4, #4
   81b3c:	4628      	mov	r0, r5
   81b3e:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81b42:	4620      	mov	r0, r4
   81b44:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81b46:	69e3      	ldr	r3, [r4, #28]
   81b48:	2b01      	cmp	r3, #1
   81b4a:	d1ee      	bne.n	81b2a <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   81b4c:	69a3      	ldr	r3, [r4, #24]
   81b4e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   81b50:	459a      	cmp	sl, r3
   81b52:	d2dc      	bcs.n	81b0e <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   81b54:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81b56:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81b58:	4629      	mov	r1, r5
   81b5a:	6830      	ldr	r0, [r6, #0]
   81b5c:	4b0b      	ldr	r3, [pc, #44]	; (81b8c <prvSampleTimeNow+0xa8>)
   81b5e:	4798      	blx	r3
   81b60:	e7e3      	b.n	81b2a <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   81b62:	4a0b      	ldr	r2, [pc, #44]	; (81b90 <prvSampleTimeNow+0xac>)
   81b64:	6810      	ldr	r0, [r2, #0]
   81b66:	4907      	ldr	r1, [pc, #28]	; (81b84 <prvSampleTimeNow+0xa0>)
   81b68:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   81b6a:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   81b6c:	2301      	movs	r3, #1
   81b6e:	f8c9 3000 	str.w	r3, [r9]
   81b72:	e7c5      	b.n	81b00 <prvSampleTimeNow+0x1c>
   81b74:	000812c5 	.word	0x000812c5
   81b78:	2007ac48 	.word	0x2007ac48
   81b7c:	00081a91 	.word	0x00081a91
   81b80:	00080825 	.word	0x00080825
   81b84:	2007ac18 	.word	0x2007ac18
   81b88:	0008079f 	.word	0x0008079f
   81b8c:	00080765 	.word	0x00080765
   81b90:	2007ac1c 	.word	0x2007ac1c

00081b94 <prvTimerTask>:
{
   81b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81b98:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81b9a:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81d04 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81b9e:	4b4d      	ldr	r3, [pc, #308]	; (81cd4 <prvTimerTask+0x140>)
   81ba0:	681b      	ldr	r3, [r3, #0]
   81ba2:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81ba4:	2a00      	cmp	r2, #0
   81ba6:	f000 8089 	beq.w	81cbc <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81baa:	68db      	ldr	r3, [r3, #12]
   81bac:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81bae:	4b4a      	ldr	r3, [pc, #296]	; (81cd8 <prvTimerTask+0x144>)
   81bb0:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81bb2:	a803      	add	r0, sp, #12
   81bb4:	4b49      	ldr	r3, [pc, #292]	; (81cdc <prvTimerTask+0x148>)
   81bb6:	4798      	blx	r3
   81bb8:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81bba:	9b03      	ldr	r3, [sp, #12]
   81bbc:	2b00      	cmp	r3, #0
   81bbe:	f040 8086 	bne.w	81cce <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81bc2:	42a8      	cmp	r0, r5
   81bc4:	d20f      	bcs.n	81be6 <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   81bc6:	1ba9      	subs	r1, r5, r6
   81bc8:	4b45      	ldr	r3, [pc, #276]	; (81ce0 <prvTimerTask+0x14c>)
   81bca:	6818      	ldr	r0, [r3, #0]
   81bcc:	4b45      	ldr	r3, [pc, #276]	; (81ce4 <prvTimerTask+0x150>)
   81bce:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81bd0:	4b45      	ldr	r3, [pc, #276]	; (81ce8 <prvTimerTask+0x154>)
   81bd2:	4798      	blx	r3
   81bd4:	b908      	cbnz	r0, 81bda <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   81bd6:	4b45      	ldr	r3, [pc, #276]	; (81cec <prvTimerTask+0x158>)
   81bd8:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81bda:	a802      	add	r0, sp, #8
   81bdc:	4b3f      	ldr	r3, [pc, #252]	; (81cdc <prvTimerTask+0x148>)
   81bde:	4798      	blx	r3
   81be0:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81be2:	4e3f      	ldr	r6, [pc, #252]	; (81ce0 <prvTimerTask+0x14c>)
   81be4:	e036      	b.n	81c54 <prvTimerTask+0xc0>
				xTaskResumeAll();
   81be6:	4b40      	ldr	r3, [pc, #256]	; (81ce8 <prvTimerTask+0x154>)
   81be8:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   81bea:	4b3a      	ldr	r3, [pc, #232]	; (81cd4 <prvTimerTask+0x140>)
   81bec:	681b      	ldr	r3, [r3, #0]
   81bee:	68db      	ldr	r3, [r3, #12]
   81bf0:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81bf2:	1d20      	adds	r0, r4, #4
   81bf4:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81bf6:	69e3      	ldr	r3, [r4, #28]
   81bf8:	2b01      	cmp	r3, #1
   81bfa:	d114      	bne.n	81c26 <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81bfc:	69a1      	ldr	r1, [r4, #24]
   81bfe:	462b      	mov	r3, r5
   81c00:	4632      	mov	r2, r6
   81c02:	4429      	add	r1, r5
   81c04:	4620      	mov	r0, r4
   81c06:	4e3a      	ldr	r6, [pc, #232]	; (81cf0 <prvTimerTask+0x15c>)
   81c08:	47b0      	blx	r6
   81c0a:	2801      	cmp	r0, #1
   81c0c:	d10b      	bne.n	81c26 <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81c0e:	2100      	movs	r1, #0
   81c10:	9100      	str	r1, [sp, #0]
   81c12:	460b      	mov	r3, r1
   81c14:	462a      	mov	r2, r5
   81c16:	4620      	mov	r0, r4
   81c18:	4d36      	ldr	r5, [pc, #216]	; (81cf4 <prvTimerTask+0x160>)
   81c1a:	47a8      	blx	r5
			configASSERT( xResult );
   81c1c:	b918      	cbnz	r0, 81c26 <prvTimerTask+0x92>
   81c1e:	4b36      	ldr	r3, [pc, #216]	; (81cf8 <prvTimerTask+0x164>)
   81c20:	4798      	blx	r3
   81c22:	bf00      	nop
   81c24:	e7fd      	b.n	81c22 <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c28:	4620      	mov	r0, r4
   81c2a:	4798      	blx	r3
   81c2c:	e7d5      	b.n	81bda <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   81c2e:	2500      	movs	r5, #0
   81c30:	e7c9      	b.n	81bc6 <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81c32:	9904      	ldr	r1, [sp, #16]
   81c34:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81c36:	b131      	cbz	r1, 81c46 <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   81c38:	463b      	mov	r3, r7
   81c3a:	463a      	mov	r2, r7
   81c3c:	4439      	add	r1, r7
   81c3e:	4620      	mov	r0, r4
   81c40:	4c2b      	ldr	r4, [pc, #172]	; (81cf0 <prvTimerTask+0x15c>)
   81c42:	47a0      	blx	r4
   81c44:	e006      	b.n	81c54 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   81c46:	4b2c      	ldr	r3, [pc, #176]	; (81cf8 <prvTimerTask+0x164>)
   81c48:	4798      	blx	r3
   81c4a:	bf00      	nop
   81c4c:	e7fd      	b.n	81c4a <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   81c4e:	4620      	mov	r0, r4
   81c50:	4b2a      	ldr	r3, [pc, #168]	; (81cfc <prvTimerTask+0x168>)
   81c52:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81c54:	4d2a      	ldr	r5, [pc, #168]	; (81d00 <prvTimerTask+0x16c>)
   81c56:	2300      	movs	r3, #0
   81c58:	461a      	mov	r2, r3
   81c5a:	a903      	add	r1, sp, #12
   81c5c:	6830      	ldr	r0, [r6, #0]
   81c5e:	47a8      	blx	r5
   81c60:	2800      	cmp	r0, #0
   81c62:	d09c      	beq.n	81b9e <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   81c64:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   81c66:	b11c      	cbz	r4, 81c70 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   81c68:	6963      	ldr	r3, [r4, #20]
   81c6a:	b10b      	cbz	r3, 81c70 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   81c6c:	1d20      	adds	r0, r4, #4
   81c6e:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   81c70:	9b03      	ldr	r3, [sp, #12]
   81c72:	2b02      	cmp	r3, #2
   81c74:	d0dd      	beq.n	81c32 <prvTimerTask+0x9e>
   81c76:	2b03      	cmp	r3, #3
   81c78:	d0e9      	beq.n	81c4e <prvTimerTask+0xba>
   81c7a:	2b00      	cmp	r3, #0
   81c7c:	d1eb      	bne.n	81c56 <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   81c7e:	9904      	ldr	r1, [sp, #16]
   81c80:	69a0      	ldr	r0, [r4, #24]
   81c82:	460b      	mov	r3, r1
   81c84:	463a      	mov	r2, r7
   81c86:	4401      	add	r1, r0
   81c88:	4620      	mov	r0, r4
   81c8a:	4d19      	ldr	r5, [pc, #100]	; (81cf0 <prvTimerTask+0x15c>)
   81c8c:	47a8      	blx	r5
   81c8e:	2801      	cmp	r0, #1
   81c90:	d1e0      	bne.n	81c54 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   81c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c94:	4620      	mov	r0, r4
   81c96:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   81c98:	69e3      	ldr	r3, [r4, #28]
   81c9a:	2b01      	cmp	r3, #1
   81c9c:	d1da      	bne.n	81c54 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81c9e:	69a2      	ldr	r2, [r4, #24]
   81ca0:	2100      	movs	r1, #0
   81ca2:	9100      	str	r1, [sp, #0]
   81ca4:	460b      	mov	r3, r1
   81ca6:	9804      	ldr	r0, [sp, #16]
   81ca8:	4402      	add	r2, r0
   81caa:	4620      	mov	r0, r4
   81cac:	4c11      	ldr	r4, [pc, #68]	; (81cf4 <prvTimerTask+0x160>)
   81cae:	47a0      	blx	r4
						configASSERT( xResult );
   81cb0:	2800      	cmp	r0, #0
   81cb2:	d1cf      	bne.n	81c54 <prvTimerTask+0xc0>
   81cb4:	4b10      	ldr	r3, [pc, #64]	; (81cf8 <prvTimerTask+0x164>)
   81cb6:	4798      	blx	r3
   81cb8:	bf00      	nop
   81cba:	e7fd      	b.n	81cb8 <prvTimerTask+0x124>
	vTaskSuspendAll();
   81cbc:	4b06      	ldr	r3, [pc, #24]	; (81cd8 <prvTimerTask+0x144>)
   81cbe:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81cc0:	a803      	add	r0, sp, #12
   81cc2:	4b06      	ldr	r3, [pc, #24]	; (81cdc <prvTimerTask+0x148>)
   81cc4:	4798      	blx	r3
   81cc6:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81cc8:	9b03      	ldr	r3, [sp, #12]
   81cca:	2b00      	cmp	r3, #0
   81ccc:	d0af      	beq.n	81c2e <prvTimerTask+0x9a>
			xTaskResumeAll();
   81cce:	4b06      	ldr	r3, [pc, #24]	; (81ce8 <prvTimerTask+0x154>)
   81cd0:	4798      	blx	r3
   81cd2:	e782      	b.n	81bda <prvTimerTask+0x46>
   81cd4:	2007ac18 	.word	0x2007ac18
   81cd8:	000812b5 	.word	0x000812b5
   81cdc:	00081ae5 	.word	0x00081ae5
   81ce0:	2007ac4c 	.word	0x2007ac4c
   81ce4:	00080fa1 	.word	0x00080fa1
   81ce8:	0008140d 	.word	0x0008140d
   81cec:	00080815 	.word	0x00080815
   81cf0:	0008199d 	.word	0x0008199d
   81cf4:	00081a91 	.word	0x00081a91
   81cf8:	00080825 	.word	0x00080825
   81cfc:	00080a51 	.word	0x00080a51
   81d00:	00080e39 	.word	0x00080e39
   81d04:	0008079f 	.word	0x0008079f

00081d08 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81d08:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81d0a:	480e      	ldr	r0, [pc, #56]	; (81d44 <sysclk_init+0x3c>)
   81d0c:	4b0e      	ldr	r3, [pc, #56]	; (81d48 <sysclk_init+0x40>)
   81d0e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81d10:	213e      	movs	r1, #62	; 0x3e
   81d12:	2000      	movs	r0, #0
   81d14:	4b0d      	ldr	r3, [pc, #52]	; (81d4c <sysclk_init+0x44>)
   81d16:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81d18:	4c0d      	ldr	r4, [pc, #52]	; (81d50 <sysclk_init+0x48>)
   81d1a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81d1c:	2800      	cmp	r0, #0
   81d1e:	d0fc      	beq.n	81d1a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81d20:	4b0c      	ldr	r3, [pc, #48]	; (81d54 <sysclk_init+0x4c>)
   81d22:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81d24:	4a0c      	ldr	r2, [pc, #48]	; (81d58 <sysclk_init+0x50>)
   81d26:	4b0d      	ldr	r3, [pc, #52]	; (81d5c <sysclk_init+0x54>)
   81d28:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81d2a:	4c0d      	ldr	r4, [pc, #52]	; (81d60 <sysclk_init+0x58>)
   81d2c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81d2e:	2800      	cmp	r0, #0
   81d30:	d0fc      	beq.n	81d2c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81d32:	2010      	movs	r0, #16
   81d34:	4b0b      	ldr	r3, [pc, #44]	; (81d64 <sysclk_init+0x5c>)
   81d36:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81d38:	4b0b      	ldr	r3, [pc, #44]	; (81d68 <sysclk_init+0x60>)
   81d3a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81d3c:	4801      	ldr	r0, [pc, #4]	; (81d44 <sysclk_init+0x3c>)
   81d3e:	4b02      	ldr	r3, [pc, #8]	; (81d48 <sysclk_init+0x40>)
   81d40:	4798      	blx	r3
   81d42:	bd10      	pop	{r4, pc}
   81d44:	0501bd00 	.word	0x0501bd00
   81d48:	200700a5 	.word	0x200700a5
   81d4c:	0008219d 	.word	0x0008219d
   81d50:	000821f1 	.word	0x000821f1
   81d54:	00082201 	.word	0x00082201
   81d58:	200d3f01 	.word	0x200d3f01
   81d5c:	400e0600 	.word	0x400e0600
   81d60:	00082211 	.word	0x00082211
   81d64:	00082139 	.word	0x00082139
   81d68:	00082311 	.word	0x00082311

00081d6c <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81d6c:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81d6e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81d72:	4b16      	ldr	r3, [pc, #88]	; (81dcc <board_init+0x60>)
   81d74:	605a      	str	r2, [r3, #4]
   81d76:	200b      	movs	r0, #11
   81d78:	4c15      	ldr	r4, [pc, #84]	; (81dd0 <board_init+0x64>)
   81d7a:	47a0      	blx	r4
   81d7c:	200c      	movs	r0, #12
   81d7e:	47a0      	blx	r4
   81d80:	200d      	movs	r0, #13
   81d82:	47a0      	blx	r4
   81d84:	200e      	movs	r0, #14
   81d86:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81d88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d8c:	203b      	movs	r0, #59	; 0x3b
   81d8e:	4c11      	ldr	r4, [pc, #68]	; (81dd4 <board_init+0x68>)
   81d90:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81d92:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d96:	2055      	movs	r0, #85	; 0x55
   81d98:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81d9a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81d9e:	2056      	movs	r0, #86	; 0x56
   81da0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81da2:	490d      	ldr	r1, [pc, #52]	; (81dd8 <board_init+0x6c>)
   81da4:	2068      	movs	r0, #104	; 0x68
   81da6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81da8:	490c      	ldr	r1, [pc, #48]	; (81ddc <board_init+0x70>)
   81daa:	205c      	movs	r0, #92	; 0x5c
   81dac:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81dae:	4a0c      	ldr	r2, [pc, #48]	; (81de0 <board_init+0x74>)
   81db0:	f44f 7140 	mov.w	r1, #768	; 0x300
   81db4:	480b      	ldr	r0, [pc, #44]	; (81de4 <board_init+0x78>)
   81db6:	4b0c      	ldr	r3, [pc, #48]	; (81de8 <board_init+0x7c>)
   81db8:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81dba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dbe:	202b      	movs	r0, #43	; 0x2b
   81dc0:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81dc2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81dc6:	202a      	movs	r0, #42	; 0x2a
   81dc8:	47a0      	blx	r4
   81dca:	bd10      	pop	{r4, pc}
   81dcc:	400e1a50 	.word	0x400e1a50
   81dd0:	00082221 	.word	0x00082221
   81dd4:	00081ebd 	.word	0x00081ebd
   81dd8:	28000079 	.word	0x28000079
   81ddc:	28000001 	.word	0x28000001
   81de0:	08000001 	.word	0x08000001
   81de4:	400e0e00 	.word	0x400e0e00
   81de8:	00081f8d 	.word	0x00081f8d

00081dec <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81dec:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81dee:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81df2:	d016      	beq.n	81e22 <pio_set_peripheral+0x36>
   81df4:	d80b      	bhi.n	81e0e <pio_set_peripheral+0x22>
   81df6:	b149      	cbz	r1, 81e0c <pio_set_peripheral+0x20>
   81df8:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81dfc:	d105      	bne.n	81e0a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81dfe:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81e00:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81e02:	400b      	ands	r3, r1
   81e04:	ea23 0302 	bic.w	r3, r3, r2
   81e08:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81e0a:	6042      	str	r2, [r0, #4]
   81e0c:	4770      	bx	lr
	switch (ul_type) {
   81e0e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81e12:	d0fb      	beq.n	81e0c <pio_set_peripheral+0x20>
   81e14:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81e18:	d0f8      	beq.n	81e0c <pio_set_peripheral+0x20>
   81e1a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81e1e:	d1f4      	bne.n	81e0a <pio_set_peripheral+0x1e>
   81e20:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81e22:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81e24:	4313      	orrs	r3, r2
   81e26:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81e28:	e7ef      	b.n	81e0a <pio_set_peripheral+0x1e>

00081e2a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81e2a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e2c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81e30:	bf14      	ite	ne
   81e32:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81e34:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81e36:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81e3a:	bf14      	ite	ne
   81e3c:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81e3e:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81e40:	f012 0f02 	tst.w	r2, #2
   81e44:	d107      	bne.n	81e56 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81e46:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81e4a:	bf18      	it	ne
   81e4c:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81e50:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81e52:	6001      	str	r1, [r0, #0]
   81e54:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81e56:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81e5a:	e7f9      	b.n	81e50 <pio_set_input+0x26>

00081e5c <pio_set_output>:
{
   81e5c:	b410      	push	{r4}
   81e5e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81e60:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81e62:	b944      	cbnz	r4, 81e76 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81e64:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81e66:	b143      	cbz	r3, 81e7a <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   81e68:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   81e6a:	b942      	cbnz	r2, 81e7e <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   81e6c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   81e6e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   81e70:	6001      	str	r1, [r0, #0]
}
   81e72:	bc10      	pop	{r4}
   81e74:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   81e76:	6641      	str	r1, [r0, #100]	; 0x64
   81e78:	e7f5      	b.n	81e66 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   81e7a:	6541      	str	r1, [r0, #84]	; 0x54
   81e7c:	e7f5      	b.n	81e6a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   81e7e:	6301      	str	r1, [r0, #48]	; 0x30
   81e80:	e7f5      	b.n	81e6e <pio_set_output+0x12>

00081e82 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   81e82:	f012 0f10 	tst.w	r2, #16
   81e86:	d010      	beq.n	81eaa <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   81e88:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   81e8c:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   81e90:	bf14      	ite	ne
   81e92:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   81e96:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   81e9a:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   81e9e:	bf14      	ite	ne
   81ea0:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   81ea4:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   81ea8:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   81eaa:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   81eae:	4770      	bx	lr

00081eb0 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   81eb0:	6401      	str	r1, [r0, #64]	; 0x40
   81eb2:	4770      	bx	lr

00081eb4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   81eb4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   81eb6:	4770      	bx	lr

00081eb8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   81eb8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   81eba:	4770      	bx	lr

00081ebc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   81ebc:	b570      	push	{r4, r5, r6, lr}
   81ebe:	b082      	sub	sp, #8
   81ec0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   81ec2:	0943      	lsrs	r3, r0, #5
   81ec4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   81ec8:	f203 7307 	addw	r3, r3, #1799	; 0x707
   81ecc:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   81ece:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   81ed2:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81ed6:	d031      	beq.n	81f3c <pio_configure_pin+0x80>
   81ed8:	d816      	bhi.n	81f08 <pio_configure_pin+0x4c>
   81eda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81ede:	d01b      	beq.n	81f18 <pio_configure_pin+0x5c>
   81ee0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81ee4:	d116      	bne.n	81f14 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   81ee6:	f000 001f 	and.w	r0, r0, #31
   81eea:	2601      	movs	r6, #1
   81eec:	4086      	lsls	r6, r0
   81eee:	4632      	mov	r2, r6
   81ef0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81ef4:	4620      	mov	r0, r4
   81ef6:	4b22      	ldr	r3, [pc, #136]	; (81f80 <pio_configure_pin+0xc4>)
   81ef8:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81efa:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81efe:	bf14      	ite	ne
   81f00:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f02:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81f04:	2001      	movs	r0, #1
   81f06:	e017      	b.n	81f38 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   81f08:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81f0c:	d021      	beq.n	81f52 <pio_configure_pin+0x96>
   81f0e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81f12:	d01e      	beq.n	81f52 <pio_configure_pin+0x96>
		return 0;
   81f14:	2000      	movs	r0, #0
   81f16:	e00f      	b.n	81f38 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   81f18:	f000 001f 	and.w	r0, r0, #31
   81f1c:	2601      	movs	r6, #1
   81f1e:	4086      	lsls	r6, r0
   81f20:	4632      	mov	r2, r6
   81f22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f26:	4620      	mov	r0, r4
   81f28:	4b15      	ldr	r3, [pc, #84]	; (81f80 <pio_configure_pin+0xc4>)
   81f2a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81f2c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81f30:	bf14      	ite	ne
   81f32:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81f34:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   81f36:	2001      	movs	r0, #1
}
   81f38:	b002      	add	sp, #8
   81f3a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   81f3c:	f000 011f 	and.w	r1, r0, #31
   81f40:	2601      	movs	r6, #1
   81f42:	462a      	mov	r2, r5
   81f44:	fa06 f101 	lsl.w	r1, r6, r1
   81f48:	4620      	mov	r0, r4
   81f4a:	4b0e      	ldr	r3, [pc, #56]	; (81f84 <pio_configure_pin+0xc8>)
   81f4c:	4798      	blx	r3
	return 1;
   81f4e:	4630      	mov	r0, r6
		break;
   81f50:	e7f2      	b.n	81f38 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81f52:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81f56:	f000 011f 	and.w	r1, r0, #31
   81f5a:	2601      	movs	r6, #1
   81f5c:	ea05 0306 	and.w	r3, r5, r6
   81f60:	9300      	str	r3, [sp, #0]
   81f62:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81f66:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   81f6a:	bf14      	ite	ne
   81f6c:	2200      	movne	r2, #0
   81f6e:	2201      	moveq	r2, #1
   81f70:	fa06 f101 	lsl.w	r1, r6, r1
   81f74:	4620      	mov	r0, r4
   81f76:	4c04      	ldr	r4, [pc, #16]	; (81f88 <pio_configure_pin+0xcc>)
   81f78:	47a0      	blx	r4
	return 1;
   81f7a:	4630      	mov	r0, r6
		break;
   81f7c:	e7dc      	b.n	81f38 <pio_configure_pin+0x7c>
   81f7e:	bf00      	nop
   81f80:	00081ded 	.word	0x00081ded
   81f84:	00081e2b 	.word	0x00081e2b
   81f88:	00081e5d 	.word	0x00081e5d

00081f8c <pio_configure_pin_group>:
{
   81f8c:	b570      	push	{r4, r5, r6, lr}
   81f8e:	b082      	sub	sp, #8
   81f90:	4605      	mov	r5, r0
   81f92:	460e      	mov	r6, r1
   81f94:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   81f96:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   81f9a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   81f9e:	d027      	beq.n	81ff0 <pio_configure_pin_group+0x64>
   81fa0:	d811      	bhi.n	81fc6 <pio_configure_pin_group+0x3a>
   81fa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   81fa6:	d016      	beq.n	81fd6 <pio_configure_pin_group+0x4a>
   81fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   81fac:	d111      	bne.n	81fd2 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   81fae:	460a      	mov	r2, r1
   81fb0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   81fb4:	4b19      	ldr	r3, [pc, #100]	; (8201c <pio_configure_pin_group+0x90>)
   81fb6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81fb8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81fbc:	bf14      	ite	ne
   81fbe:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fc0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81fc2:	2001      	movs	r0, #1
   81fc4:	e012      	b.n	81fec <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   81fc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   81fca:	d015      	beq.n	81ff8 <pio_configure_pin_group+0x6c>
   81fcc:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   81fd0:	d012      	beq.n	81ff8 <pio_configure_pin_group+0x6c>
		return 0;
   81fd2:	2000      	movs	r0, #0
   81fd4:	e00a      	b.n	81fec <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   81fd6:	460a      	mov	r2, r1
   81fd8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fdc:	4b0f      	ldr	r3, [pc, #60]	; (8201c <pio_configure_pin_group+0x90>)
   81fde:	4798      	blx	r3
	if (ul_pull_up_enable) {
   81fe0:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   81fe4:	bf14      	ite	ne
   81fe6:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fe8:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   81fea:	2001      	movs	r0, #1
}
   81fec:	b002      	add	sp, #8
   81fee:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   81ff0:	4b0b      	ldr	r3, [pc, #44]	; (82020 <pio_configure_pin_group+0x94>)
   81ff2:	4798      	blx	r3
	return 1;
   81ff4:	2001      	movs	r0, #1
		break;
   81ff6:	e7f9      	b.n	81fec <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   81ff8:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   81ffc:	f004 0301 	and.w	r3, r4, #1
   82000:	9300      	str	r3, [sp, #0]
   82002:	f3c4 0380 	ubfx	r3, r4, #2, #1
   82006:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8200a:	bf14      	ite	ne
   8200c:	2200      	movne	r2, #0
   8200e:	2201      	moveq	r2, #1
   82010:	4631      	mov	r1, r6
   82012:	4628      	mov	r0, r5
   82014:	4c03      	ldr	r4, [pc, #12]	; (82024 <pio_configure_pin_group+0x98>)
   82016:	47a0      	blx	r4
	return 1;
   82018:	2001      	movs	r0, #1
		break;
   8201a:	e7e7      	b.n	81fec <pio_configure_pin_group+0x60>
   8201c:	00081ded 	.word	0x00081ded
   82020:	00081e2b 	.word	0x00081e2b
   82024:	00081e5d 	.word	0x00081e5d

00082028 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8202c:	4604      	mov	r4, r0
   8202e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82030:	4b0e      	ldr	r3, [pc, #56]	; (8206c <pio_handler_process+0x44>)
   82032:	4798      	blx	r3
   82034:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   82036:	4620      	mov	r0, r4
   82038:	4b0d      	ldr	r3, [pc, #52]	; (82070 <pio_handler_process+0x48>)
   8203a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   8203c:	4005      	ands	r5, r0
   8203e:	d013      	beq.n	82068 <pio_handler_process+0x40>
   82040:	4c0c      	ldr	r4, [pc, #48]	; (82074 <pio_handler_process+0x4c>)
   82042:	f104 0660 	add.w	r6, r4, #96	; 0x60
   82046:	e003      	b.n	82050 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82048:	42b4      	cmp	r4, r6
   8204a:	d00d      	beq.n	82068 <pio_handler_process+0x40>
   8204c:	3410      	adds	r4, #16
		while (status != 0) {
   8204e:	b15d      	cbz	r5, 82068 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82050:	6820      	ldr	r0, [r4, #0]
   82052:	4540      	cmp	r0, r8
   82054:	d1f8      	bne.n	82048 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82056:	6861      	ldr	r1, [r4, #4]
   82058:	4229      	tst	r1, r5
   8205a:	d0f5      	beq.n	82048 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   8205c:	68e3      	ldr	r3, [r4, #12]
   8205e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82060:	6863      	ldr	r3, [r4, #4]
   82062:	ea25 0503 	bic.w	r5, r5, r3
   82066:	e7ef      	b.n	82048 <pio_handler_process+0x20>
   82068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8206c:	00081eb5 	.word	0x00081eb5
   82070:	00081eb9 	.word	0x00081eb9
   82074:	2007ac50 	.word	0x2007ac50

00082078 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8207a:	4c18      	ldr	r4, [pc, #96]	; (820dc <pio_handler_set+0x64>)
   8207c:	6826      	ldr	r6, [r4, #0]
   8207e:	2e06      	cmp	r6, #6
   82080:	d829      	bhi.n	820d6 <pio_handler_set+0x5e>
   82082:	f04f 0c00 	mov.w	ip, #0
   82086:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82088:	4f15      	ldr	r7, [pc, #84]	; (820e0 <pio_handler_set+0x68>)
   8208a:	e004      	b.n	82096 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   8208c:	3401      	adds	r4, #1
   8208e:	b2e4      	uxtb	r4, r4
   82090:	46a4      	mov	ip, r4
   82092:	42a6      	cmp	r6, r4
   82094:	d309      	bcc.n	820aa <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   82096:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82098:	0125      	lsls	r5, r4, #4
   8209a:	597d      	ldr	r5, [r7, r5]
   8209c:	428d      	cmp	r5, r1
   8209e:	d1f5      	bne.n	8208c <pio_handler_set+0x14>
   820a0:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   820a4:	686d      	ldr	r5, [r5, #4]
   820a6:	4295      	cmp	r5, r2
   820a8:	d1f0      	bne.n	8208c <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   820aa:	4d0d      	ldr	r5, [pc, #52]	; (820e0 <pio_handler_set+0x68>)
   820ac:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   820b0:	eb05 040e 	add.w	r4, r5, lr
   820b4:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   820b8:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   820ba:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   820bc:	9906      	ldr	r1, [sp, #24]
   820be:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   820c0:	3601      	adds	r6, #1
   820c2:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   820c4:	bf04      	itt	eq
   820c6:	4905      	ldreq	r1, [pc, #20]	; (820dc <pio_handler_set+0x64>)
   820c8:	600e      	streq	r6, [r1, #0]
   820ca:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   820cc:	461a      	mov	r2, r3
   820ce:	4b05      	ldr	r3, [pc, #20]	; (820e4 <pio_handler_set+0x6c>)
   820d0:	4798      	blx	r3

	return 0;
   820d2:	2000      	movs	r0, #0
   820d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   820d6:	2001      	movs	r0, #1
}
   820d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   820da:	bf00      	nop
   820dc:	2007acc0 	.word	0x2007acc0
   820e0:	2007ac50 	.word	0x2007ac50
   820e4:	00081e83 	.word	0x00081e83

000820e8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   820e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   820ea:	210b      	movs	r1, #11
   820ec:	4801      	ldr	r0, [pc, #4]	; (820f4 <PIOA_Handler+0xc>)
   820ee:	4b02      	ldr	r3, [pc, #8]	; (820f8 <PIOA_Handler+0x10>)
   820f0:	4798      	blx	r3
   820f2:	bd08      	pop	{r3, pc}
   820f4:	400e0e00 	.word	0x400e0e00
   820f8:	00082029 	.word	0x00082029

000820fc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   820fc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   820fe:	210c      	movs	r1, #12
   82100:	4801      	ldr	r0, [pc, #4]	; (82108 <PIOB_Handler+0xc>)
   82102:	4b02      	ldr	r3, [pc, #8]	; (8210c <PIOB_Handler+0x10>)
   82104:	4798      	blx	r3
   82106:	bd08      	pop	{r3, pc}
   82108:	400e1000 	.word	0x400e1000
   8210c:	00082029 	.word	0x00082029

00082110 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82110:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   82112:	210d      	movs	r1, #13
   82114:	4801      	ldr	r0, [pc, #4]	; (8211c <PIOC_Handler+0xc>)
   82116:	4b02      	ldr	r3, [pc, #8]	; (82120 <PIOC_Handler+0x10>)
   82118:	4798      	blx	r3
   8211a:	bd08      	pop	{r3, pc}
   8211c:	400e1200 	.word	0x400e1200
   82120:	00082029 	.word	0x00082029

00082124 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   82124:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   82126:	210e      	movs	r1, #14
   82128:	4801      	ldr	r0, [pc, #4]	; (82130 <PIOD_Handler+0xc>)
   8212a:	4b02      	ldr	r3, [pc, #8]	; (82134 <PIOD_Handler+0x10>)
   8212c:	4798      	blx	r3
   8212e:	bd08      	pop	{r3, pc}
   82130:	400e1400 	.word	0x400e1400
   82134:	00082029 	.word	0x00082029

00082138 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82138:	4a17      	ldr	r2, [pc, #92]	; (82198 <pmc_switch_mck_to_pllack+0x60>)
   8213a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8213c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82140:	4318      	orrs	r0, r3
   82142:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82144:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82146:	f013 0f08 	tst.w	r3, #8
   8214a:	d10a      	bne.n	82162 <pmc_switch_mck_to_pllack+0x2a>
   8214c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82150:	4911      	ldr	r1, [pc, #68]	; (82198 <pmc_switch_mck_to_pllack+0x60>)
   82152:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82154:	f012 0f08 	tst.w	r2, #8
   82158:	d103      	bne.n	82162 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8215a:	3b01      	subs	r3, #1
   8215c:	d1f9      	bne.n	82152 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8215e:	2001      	movs	r0, #1
   82160:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   82162:	4a0d      	ldr	r2, [pc, #52]	; (82198 <pmc_switch_mck_to_pllack+0x60>)
   82164:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82166:	f023 0303 	bic.w	r3, r3, #3
   8216a:	f043 0302 	orr.w	r3, r3, #2
   8216e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82170:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82172:	f013 0f08 	tst.w	r3, #8
   82176:	d10a      	bne.n	8218e <pmc_switch_mck_to_pllack+0x56>
   82178:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8217c:	4906      	ldr	r1, [pc, #24]	; (82198 <pmc_switch_mck_to_pllack+0x60>)
   8217e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82180:	f012 0f08 	tst.w	r2, #8
   82184:	d105      	bne.n	82192 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82186:	3b01      	subs	r3, #1
   82188:	d1f9      	bne.n	8217e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8218a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8218c:	4770      	bx	lr
	return 0;
   8218e:	2000      	movs	r0, #0
   82190:	4770      	bx	lr
   82192:	2000      	movs	r0, #0
   82194:	4770      	bx	lr
   82196:	bf00      	nop
   82198:	400e0600 	.word	0x400e0600

0008219c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8219c:	b9c8      	cbnz	r0, 821d2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8219e:	4a11      	ldr	r2, [pc, #68]	; (821e4 <pmc_switch_mainck_to_xtal+0x48>)
   821a0:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   821a2:	0209      	lsls	r1, r1, #8
   821a4:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   821a6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   821aa:	f023 0303 	bic.w	r3, r3, #3
   821ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   821b2:	f043 0301 	orr.w	r3, r3, #1
   821b6:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   821b8:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   821ba:	6e93      	ldr	r3, [r2, #104]	; 0x68
   821bc:	f013 0f01 	tst.w	r3, #1
   821c0:	d0fb      	beq.n	821ba <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   821c2:	4a08      	ldr	r2, [pc, #32]	; (821e4 <pmc_switch_mainck_to_xtal+0x48>)
   821c4:	6a13      	ldr	r3, [r2, #32]
   821c6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   821ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   821ce:	6213      	str	r3, [r2, #32]
   821d0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   821d2:	4904      	ldr	r1, [pc, #16]	; (821e4 <pmc_switch_mainck_to_xtal+0x48>)
   821d4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   821d6:	4a04      	ldr	r2, [pc, #16]	; (821e8 <pmc_switch_mainck_to_xtal+0x4c>)
   821d8:	401a      	ands	r2, r3
   821da:	4b04      	ldr	r3, [pc, #16]	; (821ec <pmc_switch_mainck_to_xtal+0x50>)
   821dc:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   821de:	620b      	str	r3, [r1, #32]
   821e0:	4770      	bx	lr
   821e2:	bf00      	nop
   821e4:	400e0600 	.word	0x400e0600
   821e8:	fec8fffc 	.word	0xfec8fffc
   821ec:	01370002 	.word	0x01370002

000821f0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   821f0:	4b02      	ldr	r3, [pc, #8]	; (821fc <pmc_osc_is_ready_mainck+0xc>)
   821f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   821f4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   821f8:	4770      	bx	lr
   821fa:	bf00      	nop
   821fc:	400e0600 	.word	0x400e0600

00082200 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   82200:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   82204:	4b01      	ldr	r3, [pc, #4]	; (8220c <pmc_disable_pllack+0xc>)
   82206:	629a      	str	r2, [r3, #40]	; 0x28
   82208:	4770      	bx	lr
   8220a:	bf00      	nop
   8220c:	400e0600 	.word	0x400e0600

00082210 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82210:	4b02      	ldr	r3, [pc, #8]	; (8221c <pmc_is_locked_pllack+0xc>)
   82212:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   82214:	f000 0002 	and.w	r0, r0, #2
   82218:	4770      	bx	lr
   8221a:	bf00      	nop
   8221c:	400e0600 	.word	0x400e0600

00082220 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82220:	282c      	cmp	r0, #44	; 0x2c
   82222:	d81e      	bhi.n	82262 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   82224:	281f      	cmp	r0, #31
   82226:	d80c      	bhi.n	82242 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82228:	4b11      	ldr	r3, [pc, #68]	; (82270 <pmc_enable_periph_clk+0x50>)
   8222a:	699a      	ldr	r2, [r3, #24]
   8222c:	2301      	movs	r3, #1
   8222e:	4083      	lsls	r3, r0
   82230:	4393      	bics	r3, r2
   82232:	d018      	beq.n	82266 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   82234:	2301      	movs	r3, #1
   82236:	fa03 f000 	lsl.w	r0, r3, r0
   8223a:	4b0d      	ldr	r3, [pc, #52]	; (82270 <pmc_enable_periph_clk+0x50>)
   8223c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8223e:	2000      	movs	r0, #0
   82240:	4770      	bx	lr
		ul_id -= 32;
   82242:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   82244:	4b0a      	ldr	r3, [pc, #40]	; (82270 <pmc_enable_periph_clk+0x50>)
   82246:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8224a:	2301      	movs	r3, #1
   8224c:	4083      	lsls	r3, r0
   8224e:	4393      	bics	r3, r2
   82250:	d00b      	beq.n	8226a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   82252:	2301      	movs	r3, #1
   82254:	fa03 f000 	lsl.w	r0, r3, r0
   82258:	4b05      	ldr	r3, [pc, #20]	; (82270 <pmc_enable_periph_clk+0x50>)
   8225a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   8225e:	2000      	movs	r0, #0
   82260:	4770      	bx	lr
		return 1;
   82262:	2001      	movs	r0, #1
   82264:	4770      	bx	lr
	return 0;
   82266:	2000      	movs	r0, #0
   82268:	4770      	bx	lr
   8226a:	2000      	movs	r0, #0
}
   8226c:	4770      	bx	lr
   8226e:	bf00      	nop
   82270:	400e0600 	.word	0x400e0600

00082274 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   82274:	e7fe      	b.n	82274 <Dummy_Handler>
	...

00082278 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82278:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8227a:	4b1c      	ldr	r3, [pc, #112]	; (822ec <Reset_Handler+0x74>)
   8227c:	4a1c      	ldr	r2, [pc, #112]	; (822f0 <Reset_Handler+0x78>)
   8227e:	429a      	cmp	r2, r3
   82280:	d010      	beq.n	822a4 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   82282:	4b1c      	ldr	r3, [pc, #112]	; (822f4 <Reset_Handler+0x7c>)
   82284:	4a19      	ldr	r2, [pc, #100]	; (822ec <Reset_Handler+0x74>)
   82286:	429a      	cmp	r2, r3
   82288:	d20c      	bcs.n	822a4 <Reset_Handler+0x2c>
   8228a:	3b01      	subs	r3, #1
   8228c:	1a9b      	subs	r3, r3, r2
   8228e:	f023 0303 	bic.w	r3, r3, #3
   82292:	3304      	adds	r3, #4
   82294:	4413      	add	r3, r2
   82296:	4916      	ldr	r1, [pc, #88]	; (822f0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82298:	f851 0b04 	ldr.w	r0, [r1], #4
   8229c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   822a0:	429a      	cmp	r2, r3
   822a2:	d1f9      	bne.n	82298 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   822a4:	4b14      	ldr	r3, [pc, #80]	; (822f8 <Reset_Handler+0x80>)
   822a6:	4a15      	ldr	r2, [pc, #84]	; (822fc <Reset_Handler+0x84>)
   822a8:	429a      	cmp	r2, r3
   822aa:	d20a      	bcs.n	822c2 <Reset_Handler+0x4a>
   822ac:	3b01      	subs	r3, #1
   822ae:	1a9b      	subs	r3, r3, r2
   822b0:	f023 0303 	bic.w	r3, r3, #3
   822b4:	3304      	adds	r3, #4
   822b6:	4413      	add	r3, r2
		*pDest++ = 0;
   822b8:	2100      	movs	r1, #0
   822ba:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   822be:	4293      	cmp	r3, r2
   822c0:	d1fb      	bne.n	822ba <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   822c2:	4b0f      	ldr	r3, [pc, #60]	; (82300 <Reset_Handler+0x88>)
   822c4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   822c8:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   822cc:	490d      	ldr	r1, [pc, #52]	; (82304 <Reset_Handler+0x8c>)
   822ce:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   822d0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   822d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   822d8:	d203      	bcs.n	822e2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   822da:	688b      	ldr	r3, [r1, #8]
   822dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   822e0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   822e2:	4b09      	ldr	r3, [pc, #36]	; (82308 <Reset_Handler+0x90>)
   822e4:	4798      	blx	r3

	/* Branch to main function */
	main();
   822e6:	4b09      	ldr	r3, [pc, #36]	; (8230c <Reset_Handler+0x94>)
   822e8:	4798      	blx	r3
   822ea:	e7fe      	b.n	822ea <Reset_Handler+0x72>
   822ec:	20070000 	.word	0x20070000
   822f0:	00085560 	.word	0x00085560
   822f4:	20070af0 	.word	0x20070af0
   822f8:	2007ad30 	.word	0x2007ad30
   822fc:	20070af0 	.word	0x20070af0
   82300:	00080000 	.word	0x00080000
   82304:	e000ed00 	.word	0xe000ed00
   82308:	000824a1 	.word	0x000824a1
   8230c:	00082479 	.word	0x00082479

00082310 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82310:	4b3d      	ldr	r3, [pc, #244]	; (82408 <SystemCoreClockUpdate+0xf8>)
   82312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82314:	f003 0303 	and.w	r3, r3, #3
   82318:	2b03      	cmp	r3, #3
   8231a:	d80e      	bhi.n	8233a <SystemCoreClockUpdate+0x2a>
   8231c:	e8df f003 	tbb	[pc, r3]
   82320:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82324:	4b39      	ldr	r3, [pc, #228]	; (8240c <SystemCoreClockUpdate+0xfc>)
   82326:	695b      	ldr	r3, [r3, #20]
   82328:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   8232c:	bf14      	ite	ne
   8232e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   82332:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   82336:	4b36      	ldr	r3, [pc, #216]	; (82410 <SystemCoreClockUpdate+0x100>)
   82338:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8233a:	4b33      	ldr	r3, [pc, #204]	; (82408 <SystemCoreClockUpdate+0xf8>)
   8233c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8233e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82342:	2b70      	cmp	r3, #112	; 0x70
   82344:	d057      	beq.n	823f6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82346:	4b30      	ldr	r3, [pc, #192]	; (82408 <SystemCoreClockUpdate+0xf8>)
   82348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8234a:	4931      	ldr	r1, [pc, #196]	; (82410 <SystemCoreClockUpdate+0x100>)
   8234c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82350:	680b      	ldr	r3, [r1, #0]
   82352:	40d3      	lsrs	r3, r2
   82354:	600b      	str	r3, [r1, #0]
   82356:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82358:	4b2b      	ldr	r3, [pc, #172]	; (82408 <SystemCoreClockUpdate+0xf8>)
   8235a:	6a1b      	ldr	r3, [r3, #32]
   8235c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82360:	d003      	beq.n	8236a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82362:	4a2c      	ldr	r2, [pc, #176]	; (82414 <SystemCoreClockUpdate+0x104>)
   82364:	4b2a      	ldr	r3, [pc, #168]	; (82410 <SystemCoreClockUpdate+0x100>)
   82366:	601a      	str	r2, [r3, #0]
   82368:	e7e7      	b.n	8233a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8236a:	4a2b      	ldr	r2, [pc, #172]	; (82418 <SystemCoreClockUpdate+0x108>)
   8236c:	4b28      	ldr	r3, [pc, #160]	; (82410 <SystemCoreClockUpdate+0x100>)
   8236e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82370:	4b25      	ldr	r3, [pc, #148]	; (82408 <SystemCoreClockUpdate+0xf8>)
   82372:	6a1b      	ldr	r3, [r3, #32]
   82374:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82378:	2b10      	cmp	r3, #16
   8237a:	d005      	beq.n	82388 <SystemCoreClockUpdate+0x78>
   8237c:	2b20      	cmp	r3, #32
   8237e:	d1dc      	bne.n	8233a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82380:	4a24      	ldr	r2, [pc, #144]	; (82414 <SystemCoreClockUpdate+0x104>)
   82382:	4b23      	ldr	r3, [pc, #140]	; (82410 <SystemCoreClockUpdate+0x100>)
   82384:	601a      	str	r2, [r3, #0]
				break;
   82386:	e7d8      	b.n	8233a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82388:	4a24      	ldr	r2, [pc, #144]	; (8241c <SystemCoreClockUpdate+0x10c>)
   8238a:	4b21      	ldr	r3, [pc, #132]	; (82410 <SystemCoreClockUpdate+0x100>)
   8238c:	601a      	str	r2, [r3, #0]
				break;
   8238e:	e7d4      	b.n	8233a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82390:	4b1d      	ldr	r3, [pc, #116]	; (82408 <SystemCoreClockUpdate+0xf8>)
   82392:	6a1b      	ldr	r3, [r3, #32]
   82394:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82398:	d00c      	beq.n	823b4 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8239a:	4a1e      	ldr	r2, [pc, #120]	; (82414 <SystemCoreClockUpdate+0x104>)
   8239c:	4b1c      	ldr	r3, [pc, #112]	; (82410 <SystemCoreClockUpdate+0x100>)
   8239e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   823a0:	4b19      	ldr	r3, [pc, #100]	; (82408 <SystemCoreClockUpdate+0xf8>)
   823a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   823a4:	f003 0303 	and.w	r3, r3, #3
   823a8:	2b02      	cmp	r3, #2
   823aa:	d016      	beq.n	823da <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   823ac:	4a1c      	ldr	r2, [pc, #112]	; (82420 <SystemCoreClockUpdate+0x110>)
   823ae:	4b18      	ldr	r3, [pc, #96]	; (82410 <SystemCoreClockUpdate+0x100>)
   823b0:	601a      	str	r2, [r3, #0]
   823b2:	e7c2      	b.n	8233a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   823b4:	4a18      	ldr	r2, [pc, #96]	; (82418 <SystemCoreClockUpdate+0x108>)
   823b6:	4b16      	ldr	r3, [pc, #88]	; (82410 <SystemCoreClockUpdate+0x100>)
   823b8:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   823ba:	4b13      	ldr	r3, [pc, #76]	; (82408 <SystemCoreClockUpdate+0xf8>)
   823bc:	6a1b      	ldr	r3, [r3, #32]
   823be:	f003 0370 	and.w	r3, r3, #112	; 0x70
   823c2:	2b10      	cmp	r3, #16
   823c4:	d005      	beq.n	823d2 <SystemCoreClockUpdate+0xc2>
   823c6:	2b20      	cmp	r3, #32
   823c8:	d1ea      	bne.n	823a0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   823ca:	4a12      	ldr	r2, [pc, #72]	; (82414 <SystemCoreClockUpdate+0x104>)
   823cc:	4b10      	ldr	r3, [pc, #64]	; (82410 <SystemCoreClockUpdate+0x100>)
   823ce:	601a      	str	r2, [r3, #0]
				break;
   823d0:	e7e6      	b.n	823a0 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   823d2:	4a12      	ldr	r2, [pc, #72]	; (8241c <SystemCoreClockUpdate+0x10c>)
   823d4:	4b0e      	ldr	r3, [pc, #56]	; (82410 <SystemCoreClockUpdate+0x100>)
   823d6:	601a      	str	r2, [r3, #0]
				break;
   823d8:	e7e2      	b.n	823a0 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823da:	4a0b      	ldr	r2, [pc, #44]	; (82408 <SystemCoreClockUpdate+0xf8>)
   823dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823de:	6a92      	ldr	r2, [r2, #40]	; 0x28
   823e0:	480b      	ldr	r0, [pc, #44]	; (82410 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   823e2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   823e6:	6803      	ldr	r3, [r0, #0]
   823e8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   823ec:	b2d2      	uxtb	r2, r2
   823ee:	fbb3 f3f2 	udiv	r3, r3, r2
   823f2:	6003      	str	r3, [r0, #0]
   823f4:	e7a1      	b.n	8233a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   823f6:	4a06      	ldr	r2, [pc, #24]	; (82410 <SystemCoreClockUpdate+0x100>)
   823f8:	6813      	ldr	r3, [r2, #0]
   823fa:	490a      	ldr	r1, [pc, #40]	; (82424 <SystemCoreClockUpdate+0x114>)
   823fc:	fba1 1303 	umull	r1, r3, r1, r3
   82400:	085b      	lsrs	r3, r3, #1
   82402:	6013      	str	r3, [r2, #0]
   82404:	4770      	bx	lr
   82406:	bf00      	nop
   82408:	400e0600 	.word	0x400e0600
   8240c:	400e1a10 	.word	0x400e1a10
   82410:	2007013c 	.word	0x2007013c
   82414:	00b71b00 	.word	0x00b71b00
   82418:	003d0900 	.word	0x003d0900
   8241c:	007a1200 	.word	0x007a1200
   82420:	0e4e1c00 	.word	0x0e4e1c00
   82424:	aaaaaaab 	.word	0xaaaaaaab

00082428 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82428:	4b0a      	ldr	r3, [pc, #40]	; (82454 <_sbrk+0x2c>)
   8242a:	681b      	ldr	r3, [r3, #0]
   8242c:	b153      	cbz	r3, 82444 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8242e:	4b09      	ldr	r3, [pc, #36]	; (82454 <_sbrk+0x2c>)
   82430:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   82432:	181a      	adds	r2, r3, r0
   82434:	4908      	ldr	r1, [pc, #32]	; (82458 <_sbrk+0x30>)
   82436:	4291      	cmp	r1, r2
   82438:	db08      	blt.n	8244c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8243a:	4610      	mov	r0, r2
   8243c:	4a05      	ldr	r2, [pc, #20]	; (82454 <_sbrk+0x2c>)
   8243e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82440:	4618      	mov	r0, r3
   82442:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82444:	4a05      	ldr	r2, [pc, #20]	; (8245c <_sbrk+0x34>)
   82446:	4b03      	ldr	r3, [pc, #12]	; (82454 <_sbrk+0x2c>)
   82448:	601a      	str	r2, [r3, #0]
   8244a:	e7f0      	b.n	8242e <_sbrk+0x6>
		return (caddr_t) -1;	
   8244c:	f04f 30ff 	mov.w	r0, #4294967295
}
   82450:	4770      	bx	lr
   82452:	bf00      	nop
   82454:	2007acc4 	.word	0x2007acc4
   82458:	20087ffc 	.word	0x20087ffc
   8245c:	2007cd30 	.word	0x2007cd30

00082460 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82460:	f04f 30ff 	mov.w	r0, #4294967295
   82464:	4770      	bx	lr

00082466 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82466:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8246a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8246c:	2000      	movs	r0, #0
   8246e:	4770      	bx	lr

00082470 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82470:	2001      	movs	r0, #1
   82472:	4770      	bx	lr

00082474 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82474:	2000      	movs	r0, #0
   82476:	4770      	bx	lr

00082478 <main>:
#include "initializations/main_init.h"

int main (void)
{
   82478:	b508      	push	{r3, lr}
	misc_init();
   8247a:	4b05      	ldr	r3, [pc, #20]	; (82490 <main+0x18>)
   8247c:	4798      	blx	r3
	console_init();
   8247e:	4b05      	ldr	r3, [pc, #20]	; (82494 <main+0x1c>)
   82480:	4798      	blx	r3
	interrupt_init();		
   82482:	4b05      	ldr	r3, [pc, #20]	; (82498 <main+0x20>)
   82484:	4798      	blx	r3
	rtos_init();
   82486:	4b05      	ldr	r3, [pc, #20]	; (8249c <main+0x24>)
   82488:	4798      	blx	r3
   8248a:	2000      	movs	r0, #0
   8248c:	bd08      	pop	{r3, pc}
   8248e:	bf00      	nop
   82490:	00080495 	.word	0x00080495
   82494:	00080579 	.word	0x00080579
   82498:	0008060d 	.word	0x0008060d
   8249c:	00080525 	.word	0x00080525

000824a0 <__libc_init_array>:
   824a0:	b570      	push	{r4, r5, r6, lr}
   824a2:	4e0f      	ldr	r6, [pc, #60]	; (824e0 <__libc_init_array+0x40>)
   824a4:	4d0f      	ldr	r5, [pc, #60]	; (824e4 <__libc_init_array+0x44>)
   824a6:	1b76      	subs	r6, r6, r5
   824a8:	10b6      	asrs	r6, r6, #2
   824aa:	bf18      	it	ne
   824ac:	2400      	movne	r4, #0
   824ae:	d005      	beq.n	824bc <__libc_init_array+0x1c>
   824b0:	3401      	adds	r4, #1
   824b2:	f855 3b04 	ldr.w	r3, [r5], #4
   824b6:	4798      	blx	r3
   824b8:	42a6      	cmp	r6, r4
   824ba:	d1f9      	bne.n	824b0 <__libc_init_array+0x10>
   824bc:	4e0a      	ldr	r6, [pc, #40]	; (824e8 <__libc_init_array+0x48>)
   824be:	4d0b      	ldr	r5, [pc, #44]	; (824ec <__libc_init_array+0x4c>)
   824c0:	f003 f838 	bl	85534 <_init>
   824c4:	1b76      	subs	r6, r6, r5
   824c6:	10b6      	asrs	r6, r6, #2
   824c8:	bf18      	it	ne
   824ca:	2400      	movne	r4, #0
   824cc:	d006      	beq.n	824dc <__libc_init_array+0x3c>
   824ce:	3401      	adds	r4, #1
   824d0:	f855 3b04 	ldr.w	r3, [r5], #4
   824d4:	4798      	blx	r3
   824d6:	42a6      	cmp	r6, r4
   824d8:	d1f9      	bne.n	824ce <__libc_init_array+0x2e>
   824da:	bd70      	pop	{r4, r5, r6, pc}
   824dc:	bd70      	pop	{r4, r5, r6, pc}
   824de:	bf00      	nop
   824e0:	00085540 	.word	0x00085540
   824e4:	00085540 	.word	0x00085540
   824e8:	00085548 	.word	0x00085548
   824ec:	00085540 	.word	0x00085540

000824f0 <iprintf>:
   824f0:	b40f      	push	{r0, r1, r2, r3}
   824f2:	b510      	push	{r4, lr}
   824f4:	4b07      	ldr	r3, [pc, #28]	; (82514 <iprintf+0x24>)
   824f6:	b082      	sub	sp, #8
   824f8:	ac04      	add	r4, sp, #16
   824fa:	f854 2b04 	ldr.w	r2, [r4], #4
   824fe:	6818      	ldr	r0, [r3, #0]
   82500:	4623      	mov	r3, r4
   82502:	6881      	ldr	r1, [r0, #8]
   82504:	9401      	str	r4, [sp, #4]
   82506:	f000 fa3b 	bl	82980 <_vfiprintf_r>
   8250a:	b002      	add	sp, #8
   8250c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82510:	b004      	add	sp, #16
   82512:	4770      	bx	lr
   82514:	20070140 	.word	0x20070140

00082518 <memcpy>:
   82518:	4684      	mov	ip, r0
   8251a:	ea41 0300 	orr.w	r3, r1, r0
   8251e:	f013 0303 	ands.w	r3, r3, #3
   82522:	d149      	bne.n	825b8 <memcpy+0xa0>
   82524:	3a40      	subs	r2, #64	; 0x40
   82526:	d323      	bcc.n	82570 <memcpy+0x58>
   82528:	680b      	ldr	r3, [r1, #0]
   8252a:	6003      	str	r3, [r0, #0]
   8252c:	684b      	ldr	r3, [r1, #4]
   8252e:	6043      	str	r3, [r0, #4]
   82530:	688b      	ldr	r3, [r1, #8]
   82532:	6083      	str	r3, [r0, #8]
   82534:	68cb      	ldr	r3, [r1, #12]
   82536:	60c3      	str	r3, [r0, #12]
   82538:	690b      	ldr	r3, [r1, #16]
   8253a:	6103      	str	r3, [r0, #16]
   8253c:	694b      	ldr	r3, [r1, #20]
   8253e:	6143      	str	r3, [r0, #20]
   82540:	698b      	ldr	r3, [r1, #24]
   82542:	6183      	str	r3, [r0, #24]
   82544:	69cb      	ldr	r3, [r1, #28]
   82546:	61c3      	str	r3, [r0, #28]
   82548:	6a0b      	ldr	r3, [r1, #32]
   8254a:	6203      	str	r3, [r0, #32]
   8254c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8254e:	6243      	str	r3, [r0, #36]	; 0x24
   82550:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82552:	6283      	str	r3, [r0, #40]	; 0x28
   82554:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82556:	62c3      	str	r3, [r0, #44]	; 0x2c
   82558:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8255a:	6303      	str	r3, [r0, #48]	; 0x30
   8255c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8255e:	6343      	str	r3, [r0, #52]	; 0x34
   82560:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82562:	6383      	str	r3, [r0, #56]	; 0x38
   82564:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82566:	63c3      	str	r3, [r0, #60]	; 0x3c
   82568:	3040      	adds	r0, #64	; 0x40
   8256a:	3140      	adds	r1, #64	; 0x40
   8256c:	3a40      	subs	r2, #64	; 0x40
   8256e:	d2db      	bcs.n	82528 <memcpy+0x10>
   82570:	3230      	adds	r2, #48	; 0x30
   82572:	d30b      	bcc.n	8258c <memcpy+0x74>
   82574:	680b      	ldr	r3, [r1, #0]
   82576:	6003      	str	r3, [r0, #0]
   82578:	684b      	ldr	r3, [r1, #4]
   8257a:	6043      	str	r3, [r0, #4]
   8257c:	688b      	ldr	r3, [r1, #8]
   8257e:	6083      	str	r3, [r0, #8]
   82580:	68cb      	ldr	r3, [r1, #12]
   82582:	60c3      	str	r3, [r0, #12]
   82584:	3010      	adds	r0, #16
   82586:	3110      	adds	r1, #16
   82588:	3a10      	subs	r2, #16
   8258a:	d2f3      	bcs.n	82574 <memcpy+0x5c>
   8258c:	320c      	adds	r2, #12
   8258e:	d305      	bcc.n	8259c <memcpy+0x84>
   82590:	f851 3b04 	ldr.w	r3, [r1], #4
   82594:	f840 3b04 	str.w	r3, [r0], #4
   82598:	3a04      	subs	r2, #4
   8259a:	d2f9      	bcs.n	82590 <memcpy+0x78>
   8259c:	3204      	adds	r2, #4
   8259e:	d008      	beq.n	825b2 <memcpy+0x9a>
   825a0:	07d2      	lsls	r2, r2, #31
   825a2:	bf1c      	itt	ne
   825a4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   825a8:	f800 3b01 	strbne.w	r3, [r0], #1
   825ac:	d301      	bcc.n	825b2 <memcpy+0x9a>
   825ae:	880b      	ldrh	r3, [r1, #0]
   825b0:	8003      	strh	r3, [r0, #0]
   825b2:	4660      	mov	r0, ip
   825b4:	4770      	bx	lr
   825b6:	bf00      	nop
   825b8:	2a08      	cmp	r2, #8
   825ba:	d313      	bcc.n	825e4 <memcpy+0xcc>
   825bc:	078b      	lsls	r3, r1, #30
   825be:	d0b1      	beq.n	82524 <memcpy+0xc>
   825c0:	f010 0303 	ands.w	r3, r0, #3
   825c4:	d0ae      	beq.n	82524 <memcpy+0xc>
   825c6:	f1c3 0304 	rsb	r3, r3, #4
   825ca:	1ad2      	subs	r2, r2, r3
   825cc:	07db      	lsls	r3, r3, #31
   825ce:	bf1c      	itt	ne
   825d0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   825d4:	f800 3b01 	strbne.w	r3, [r0], #1
   825d8:	d3a4      	bcc.n	82524 <memcpy+0xc>
   825da:	f831 3b02 	ldrh.w	r3, [r1], #2
   825de:	f820 3b02 	strh.w	r3, [r0], #2
   825e2:	e79f      	b.n	82524 <memcpy+0xc>
   825e4:	3a04      	subs	r2, #4
   825e6:	d3d9      	bcc.n	8259c <memcpy+0x84>
   825e8:	3a01      	subs	r2, #1
   825ea:	f811 3b01 	ldrb.w	r3, [r1], #1
   825ee:	f800 3b01 	strb.w	r3, [r0], #1
   825f2:	d2f9      	bcs.n	825e8 <memcpy+0xd0>
   825f4:	780b      	ldrb	r3, [r1, #0]
   825f6:	7003      	strb	r3, [r0, #0]
   825f8:	784b      	ldrb	r3, [r1, #1]
   825fa:	7043      	strb	r3, [r0, #1]
   825fc:	788b      	ldrb	r3, [r1, #2]
   825fe:	7083      	strb	r3, [r0, #2]
   82600:	4660      	mov	r0, ip
   82602:	4770      	bx	lr

00082604 <memset>:
   82604:	b470      	push	{r4, r5, r6}
   82606:	0786      	lsls	r6, r0, #30
   82608:	d046      	beq.n	82698 <memset+0x94>
   8260a:	1e54      	subs	r4, r2, #1
   8260c:	2a00      	cmp	r2, #0
   8260e:	d041      	beq.n	82694 <memset+0x90>
   82610:	b2ca      	uxtb	r2, r1
   82612:	4603      	mov	r3, r0
   82614:	e002      	b.n	8261c <memset+0x18>
   82616:	f114 34ff 	adds.w	r4, r4, #4294967295
   8261a:	d33b      	bcc.n	82694 <memset+0x90>
   8261c:	f803 2b01 	strb.w	r2, [r3], #1
   82620:	079d      	lsls	r5, r3, #30
   82622:	d1f8      	bne.n	82616 <memset+0x12>
   82624:	2c03      	cmp	r4, #3
   82626:	d92e      	bls.n	82686 <memset+0x82>
   82628:	b2cd      	uxtb	r5, r1
   8262a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8262e:	2c0f      	cmp	r4, #15
   82630:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82634:	d919      	bls.n	8266a <memset+0x66>
   82636:	4626      	mov	r6, r4
   82638:	f103 0210 	add.w	r2, r3, #16
   8263c:	3e10      	subs	r6, #16
   8263e:	2e0f      	cmp	r6, #15
   82640:	f842 5c10 	str.w	r5, [r2, #-16]
   82644:	f842 5c0c 	str.w	r5, [r2, #-12]
   82648:	f842 5c08 	str.w	r5, [r2, #-8]
   8264c:	f842 5c04 	str.w	r5, [r2, #-4]
   82650:	f102 0210 	add.w	r2, r2, #16
   82654:	d8f2      	bhi.n	8263c <memset+0x38>
   82656:	f1a4 0210 	sub.w	r2, r4, #16
   8265a:	f022 020f 	bic.w	r2, r2, #15
   8265e:	f004 040f 	and.w	r4, r4, #15
   82662:	3210      	adds	r2, #16
   82664:	2c03      	cmp	r4, #3
   82666:	4413      	add	r3, r2
   82668:	d90d      	bls.n	82686 <memset+0x82>
   8266a:	461e      	mov	r6, r3
   8266c:	4622      	mov	r2, r4
   8266e:	3a04      	subs	r2, #4
   82670:	2a03      	cmp	r2, #3
   82672:	f846 5b04 	str.w	r5, [r6], #4
   82676:	d8fa      	bhi.n	8266e <memset+0x6a>
   82678:	1f22      	subs	r2, r4, #4
   8267a:	f022 0203 	bic.w	r2, r2, #3
   8267e:	3204      	adds	r2, #4
   82680:	4413      	add	r3, r2
   82682:	f004 0403 	and.w	r4, r4, #3
   82686:	b12c      	cbz	r4, 82694 <memset+0x90>
   82688:	b2c9      	uxtb	r1, r1
   8268a:	441c      	add	r4, r3
   8268c:	f803 1b01 	strb.w	r1, [r3], #1
   82690:	429c      	cmp	r4, r3
   82692:	d1fb      	bne.n	8268c <memset+0x88>
   82694:	bc70      	pop	{r4, r5, r6}
   82696:	4770      	bx	lr
   82698:	4614      	mov	r4, r2
   8269a:	4603      	mov	r3, r0
   8269c:	e7c2      	b.n	82624 <memset+0x20>
   8269e:	bf00      	nop

000826a0 <setbuf>:
   826a0:	2900      	cmp	r1, #0
   826a2:	bf0c      	ite	eq
   826a4:	2202      	moveq	r2, #2
   826a6:	2200      	movne	r2, #0
   826a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   826ac:	f000 b800 	b.w	826b0 <setvbuf>

000826b0 <setvbuf>:
   826b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   826b4:	4d61      	ldr	r5, [pc, #388]	; (8283c <setvbuf+0x18c>)
   826b6:	b083      	sub	sp, #12
   826b8:	682d      	ldr	r5, [r5, #0]
   826ba:	4604      	mov	r4, r0
   826bc:	460f      	mov	r7, r1
   826be:	4690      	mov	r8, r2
   826c0:	461e      	mov	r6, r3
   826c2:	b115      	cbz	r5, 826ca <setvbuf+0x1a>
   826c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   826c6:	2b00      	cmp	r3, #0
   826c8:	d064      	beq.n	82794 <setvbuf+0xe4>
   826ca:	f1b8 0f02 	cmp.w	r8, #2
   826ce:	d006      	beq.n	826de <setvbuf+0x2e>
   826d0:	f1b8 0f01 	cmp.w	r8, #1
   826d4:	f200 809f 	bhi.w	82816 <setvbuf+0x166>
   826d8:	2e00      	cmp	r6, #0
   826da:	f2c0 809c 	blt.w	82816 <setvbuf+0x166>
   826de:	6e63      	ldr	r3, [r4, #100]	; 0x64
   826e0:	07d8      	lsls	r0, r3, #31
   826e2:	d534      	bpl.n	8274e <setvbuf+0x9e>
   826e4:	4621      	mov	r1, r4
   826e6:	4628      	mov	r0, r5
   826e8:	f001 f8e2 	bl	838b0 <_fflush_r>
   826ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   826ee:	b141      	cbz	r1, 82702 <setvbuf+0x52>
   826f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   826f4:	4299      	cmp	r1, r3
   826f6:	d002      	beq.n	826fe <setvbuf+0x4e>
   826f8:	4628      	mov	r0, r5
   826fa:	f001 fa57 	bl	83bac <_free_r>
   826fe:	2300      	movs	r3, #0
   82700:	6323      	str	r3, [r4, #48]	; 0x30
   82702:	2200      	movs	r2, #0
   82704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82708:	61a2      	str	r2, [r4, #24]
   8270a:	6062      	str	r2, [r4, #4]
   8270c:	061a      	lsls	r2, r3, #24
   8270e:	d43a      	bmi.n	82786 <setvbuf+0xd6>
   82710:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82714:	f023 0303 	bic.w	r3, r3, #3
   82718:	f1b8 0f02 	cmp.w	r8, #2
   8271c:	81a3      	strh	r3, [r4, #12]
   8271e:	d01d      	beq.n	8275c <setvbuf+0xac>
   82720:	ab01      	add	r3, sp, #4
   82722:	466a      	mov	r2, sp
   82724:	4621      	mov	r1, r4
   82726:	4628      	mov	r0, r5
   82728:	f001 fcde 	bl	840e8 <__swhatbuf_r>
   8272c:	89a3      	ldrh	r3, [r4, #12]
   8272e:	4318      	orrs	r0, r3
   82730:	81a0      	strh	r0, [r4, #12]
   82732:	2e00      	cmp	r6, #0
   82734:	d132      	bne.n	8279c <setvbuf+0xec>
   82736:	9e00      	ldr	r6, [sp, #0]
   82738:	4630      	mov	r0, r6
   8273a:	f001 fd4d 	bl	841d8 <malloc>
   8273e:	4607      	mov	r7, r0
   82740:	2800      	cmp	r0, #0
   82742:	d06b      	beq.n	8281c <setvbuf+0x16c>
   82744:	89a3      	ldrh	r3, [r4, #12]
   82746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8274a:	81a3      	strh	r3, [r4, #12]
   8274c:	e028      	b.n	827a0 <setvbuf+0xf0>
   8274e:	89a3      	ldrh	r3, [r4, #12]
   82750:	0599      	lsls	r1, r3, #22
   82752:	d4c7      	bmi.n	826e4 <setvbuf+0x34>
   82754:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82756:	f001 fcc3 	bl	840e0 <__retarget_lock_acquire_recursive>
   8275a:	e7c3      	b.n	826e4 <setvbuf+0x34>
   8275c:	2500      	movs	r5, #0
   8275e:	2600      	movs	r6, #0
   82760:	2001      	movs	r0, #1
   82762:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82764:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82768:	f043 0302 	orr.w	r3, r3, #2
   8276c:	60a6      	str	r6, [r4, #8]
   8276e:	07ce      	lsls	r6, r1, #31
   82770:	81a3      	strh	r3, [r4, #12]
   82772:	6160      	str	r0, [r4, #20]
   82774:	6022      	str	r2, [r4, #0]
   82776:	6122      	str	r2, [r4, #16]
   82778:	d401      	bmi.n	8277e <setvbuf+0xce>
   8277a:	0598      	lsls	r0, r3, #22
   8277c:	d53e      	bpl.n	827fc <setvbuf+0x14c>
   8277e:	4628      	mov	r0, r5
   82780:	b003      	add	sp, #12
   82782:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82786:	6921      	ldr	r1, [r4, #16]
   82788:	4628      	mov	r0, r5
   8278a:	f001 fa0f 	bl	83bac <_free_r>
   8278e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82792:	e7bd      	b.n	82710 <setvbuf+0x60>
   82794:	4628      	mov	r0, r5
   82796:	f001 f8e3 	bl	83960 <__sinit>
   8279a:	e796      	b.n	826ca <setvbuf+0x1a>
   8279c:	2f00      	cmp	r7, #0
   8279e:	d0cb      	beq.n	82738 <setvbuf+0x88>
   827a0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   827a2:	2b00      	cmp	r3, #0
   827a4:	d033      	beq.n	8280e <setvbuf+0x15e>
   827a6:	9b00      	ldr	r3, [sp, #0]
   827a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   827ac:	429e      	cmp	r6, r3
   827ae:	bf1c      	itt	ne
   827b0:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   827b4:	81a2      	strhne	r2, [r4, #12]
   827b6:	f1b8 0f01 	cmp.w	r8, #1
   827ba:	bf04      	itt	eq
   827bc:	f042 0201 	orreq.w	r2, r2, #1
   827c0:	81a2      	strheq	r2, [r4, #12]
   827c2:	b292      	uxth	r2, r2
   827c4:	f012 0308 	ands.w	r3, r2, #8
   827c8:	6027      	str	r7, [r4, #0]
   827ca:	6127      	str	r7, [r4, #16]
   827cc:	6166      	str	r6, [r4, #20]
   827ce:	d00e      	beq.n	827ee <setvbuf+0x13e>
   827d0:	07d1      	lsls	r1, r2, #31
   827d2:	d51a      	bpl.n	8280a <setvbuf+0x15a>
   827d4:	2300      	movs	r3, #0
   827d6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   827d8:	4276      	negs	r6, r6
   827da:	f015 0501 	ands.w	r5, r5, #1
   827de:	61a6      	str	r6, [r4, #24]
   827e0:	60a3      	str	r3, [r4, #8]
   827e2:	d009      	beq.n	827f8 <setvbuf+0x148>
   827e4:	2500      	movs	r5, #0
   827e6:	4628      	mov	r0, r5
   827e8:	b003      	add	sp, #12
   827ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   827ee:	60a3      	str	r3, [r4, #8]
   827f0:	6e65      	ldr	r5, [r4, #100]	; 0x64
   827f2:	f015 0501 	ands.w	r5, r5, #1
   827f6:	d1f5      	bne.n	827e4 <setvbuf+0x134>
   827f8:	0593      	lsls	r3, r2, #22
   827fa:	d4c0      	bmi.n	8277e <setvbuf+0xce>
   827fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   827fe:	f001 fc71 	bl	840e4 <__retarget_lock_release_recursive>
   82802:	4628      	mov	r0, r5
   82804:	b003      	add	sp, #12
   82806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8280a:	60a6      	str	r6, [r4, #8]
   8280c:	e7f0      	b.n	827f0 <setvbuf+0x140>
   8280e:	4628      	mov	r0, r5
   82810:	f001 f8a6 	bl	83960 <__sinit>
   82814:	e7c7      	b.n	827a6 <setvbuf+0xf6>
   82816:	f04f 35ff 	mov.w	r5, #4294967295
   8281a:	e7b0      	b.n	8277e <setvbuf+0xce>
   8281c:	f8dd 9000 	ldr.w	r9, [sp]
   82820:	45b1      	cmp	r9, r6
   82822:	d004      	beq.n	8282e <setvbuf+0x17e>
   82824:	4648      	mov	r0, r9
   82826:	f001 fcd7 	bl	841d8 <malloc>
   8282a:	4607      	mov	r7, r0
   8282c:	b920      	cbnz	r0, 82838 <setvbuf+0x188>
   8282e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82832:	f04f 35ff 	mov.w	r5, #4294967295
   82836:	e792      	b.n	8275e <setvbuf+0xae>
   82838:	464e      	mov	r6, r9
   8283a:	e783      	b.n	82744 <setvbuf+0x94>
   8283c:	20070140 	.word	0x20070140

00082840 <strlen>:
   82840:	f020 0103 	bic.w	r1, r0, #3
   82844:	f010 0003 	ands.w	r0, r0, #3
   82848:	f1c0 0000 	rsb	r0, r0, #0
   8284c:	f851 3b04 	ldr.w	r3, [r1], #4
   82850:	f100 0c04 	add.w	ip, r0, #4
   82854:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82858:	f06f 0200 	mvn.w	r2, #0
   8285c:	bf1c      	itt	ne
   8285e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82862:	4313      	orrne	r3, r2
   82864:	f04f 0c01 	mov.w	ip, #1
   82868:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8286c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82870:	eba3 020c 	sub.w	r2, r3, ip
   82874:	ea22 0203 	bic.w	r2, r2, r3
   82878:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8287c:	bf04      	itt	eq
   8287e:	f851 3b04 	ldreq.w	r3, [r1], #4
   82882:	3004      	addeq	r0, #4
   82884:	d0f4      	beq.n	82870 <strlen+0x30>
   82886:	f1c2 0100 	rsb	r1, r2, #0
   8288a:	ea02 0201 	and.w	r2, r2, r1
   8288e:	fab2 f282 	clz	r2, r2
   82892:	f1c2 021f 	rsb	r2, r2, #31
   82896:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8289a:	4770      	bx	lr

0008289c <strncpy>:
   8289c:	ea40 0301 	orr.w	r3, r0, r1
   828a0:	f013 0f03 	tst.w	r3, #3
   828a4:	b470      	push	{r4, r5, r6}
   828a6:	4603      	mov	r3, r0
   828a8:	d024      	beq.n	828f4 <strncpy+0x58>
   828aa:	b1a2      	cbz	r2, 828d6 <strncpy+0x3a>
   828ac:	780c      	ldrb	r4, [r1, #0]
   828ae:	3a01      	subs	r2, #1
   828b0:	701c      	strb	r4, [r3, #0]
   828b2:	3101      	adds	r1, #1
   828b4:	3301      	adds	r3, #1
   828b6:	b13c      	cbz	r4, 828c8 <strncpy+0x2c>
   828b8:	b16a      	cbz	r2, 828d6 <strncpy+0x3a>
   828ba:	f811 4b01 	ldrb.w	r4, [r1], #1
   828be:	3a01      	subs	r2, #1
   828c0:	f803 4b01 	strb.w	r4, [r3], #1
   828c4:	2c00      	cmp	r4, #0
   828c6:	d1f7      	bne.n	828b8 <strncpy+0x1c>
   828c8:	b12a      	cbz	r2, 828d6 <strncpy+0x3a>
   828ca:	2100      	movs	r1, #0
   828cc:	441a      	add	r2, r3
   828ce:	f803 1b01 	strb.w	r1, [r3], #1
   828d2:	429a      	cmp	r2, r3
   828d4:	d1fb      	bne.n	828ce <strncpy+0x32>
   828d6:	bc70      	pop	{r4, r5, r6}
   828d8:	4770      	bx	lr
   828da:	460e      	mov	r6, r1
   828dc:	f851 5b04 	ldr.w	r5, [r1], #4
   828e0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   828e4:	ea24 0405 	bic.w	r4, r4, r5
   828e8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   828ec:	d105      	bne.n	828fa <strncpy+0x5e>
   828ee:	3a04      	subs	r2, #4
   828f0:	f843 5b04 	str.w	r5, [r3], #4
   828f4:	2a03      	cmp	r2, #3
   828f6:	d8f0      	bhi.n	828da <strncpy+0x3e>
   828f8:	e7d7      	b.n	828aa <strncpy+0xe>
   828fa:	4631      	mov	r1, r6
   828fc:	e7d6      	b.n	828ac <strncpy+0x10>
   828fe:	bf00      	nop

00082900 <__sprint_r.part.0>:
   82900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82904:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82906:	4693      	mov	fp, r2
   82908:	049c      	lsls	r4, r3, #18
   8290a:	d52f      	bpl.n	8296c <__sprint_r.part.0+0x6c>
   8290c:	6893      	ldr	r3, [r2, #8]
   8290e:	6812      	ldr	r2, [r2, #0]
   82910:	b353      	cbz	r3, 82968 <__sprint_r.part.0+0x68>
   82912:	460e      	mov	r6, r1
   82914:	4607      	mov	r7, r0
   82916:	f102 0908 	add.w	r9, r2, #8
   8291a:	e919 0420 	ldmdb	r9, {r5, sl}
   8291e:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82922:	d017      	beq.n	82954 <__sprint_r.part.0+0x54>
   82924:	2400      	movs	r4, #0
   82926:	3d04      	subs	r5, #4
   82928:	e001      	b.n	8292e <__sprint_r.part.0+0x2e>
   8292a:	45a0      	cmp	r8, r4
   8292c:	d010      	beq.n	82950 <__sprint_r.part.0+0x50>
   8292e:	4632      	mov	r2, r6
   82930:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82934:	4638      	mov	r0, r7
   82936:	f001 f8b5 	bl	83aa4 <_fputwc_r>
   8293a:	1c43      	adds	r3, r0, #1
   8293c:	f104 0401 	add.w	r4, r4, #1
   82940:	d1f3      	bne.n	8292a <__sprint_r.part.0+0x2a>
   82942:	2300      	movs	r3, #0
   82944:	f8cb 3008 	str.w	r3, [fp, #8]
   82948:	f8cb 3004 	str.w	r3, [fp, #4]
   8294c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82950:	f8db 3008 	ldr.w	r3, [fp, #8]
   82954:	f02a 0a03 	bic.w	sl, sl, #3
   82958:	eba3 030a 	sub.w	r3, r3, sl
   8295c:	f8cb 3008 	str.w	r3, [fp, #8]
   82960:	f109 0908 	add.w	r9, r9, #8
   82964:	2b00      	cmp	r3, #0
   82966:	d1d8      	bne.n	8291a <__sprint_r.part.0+0x1a>
   82968:	2000      	movs	r0, #0
   8296a:	e7ea      	b.n	82942 <__sprint_r.part.0+0x42>
   8296c:	f001 fa04 	bl	83d78 <__sfvwrite_r>
   82970:	2300      	movs	r3, #0
   82972:	f8cb 3008 	str.w	r3, [fp, #8]
   82976:	f8cb 3004 	str.w	r3, [fp, #4]
   8297a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8297e:	bf00      	nop

00082980 <_vfiprintf_r>:
   82980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82984:	b0ad      	sub	sp, #180	; 0xb4
   82986:	461d      	mov	r5, r3
   82988:	468b      	mov	fp, r1
   8298a:	4690      	mov	r8, r2
   8298c:	9307      	str	r3, [sp, #28]
   8298e:	9006      	str	r0, [sp, #24]
   82990:	b118      	cbz	r0, 8299a <_vfiprintf_r+0x1a>
   82992:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82994:	2b00      	cmp	r3, #0
   82996:	f000 80f3 	beq.w	82b80 <_vfiprintf_r+0x200>
   8299a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8299e:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   829a2:	07df      	lsls	r7, r3, #31
   829a4:	b281      	uxth	r1, r0
   829a6:	d402      	bmi.n	829ae <_vfiprintf_r+0x2e>
   829a8:	058e      	lsls	r6, r1, #22
   829aa:	f140 80fc 	bpl.w	82ba6 <_vfiprintf_r+0x226>
   829ae:	048c      	lsls	r4, r1, #18
   829b0:	d40a      	bmi.n	829c8 <_vfiprintf_r+0x48>
   829b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   829b6:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   829ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   829be:	f8ab 100c 	strh.w	r1, [fp, #12]
   829c2:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   829c6:	b289      	uxth	r1, r1
   829c8:	0708      	lsls	r0, r1, #28
   829ca:	f140 80b3 	bpl.w	82b34 <_vfiprintf_r+0x1b4>
   829ce:	f8db 3010 	ldr.w	r3, [fp, #16]
   829d2:	2b00      	cmp	r3, #0
   829d4:	f000 80ae 	beq.w	82b34 <_vfiprintf_r+0x1b4>
   829d8:	f001 031a 	and.w	r3, r1, #26
   829dc:	2b0a      	cmp	r3, #10
   829de:	f000 80b5 	beq.w	82b4c <_vfiprintf_r+0x1cc>
   829e2:	2300      	movs	r3, #0
   829e4:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   829e8:	46d1      	mov	r9, sl
   829ea:	930b      	str	r3, [sp, #44]	; 0x2c
   829ec:	9303      	str	r3, [sp, #12]
   829ee:	9311      	str	r3, [sp, #68]	; 0x44
   829f0:	9310      	str	r3, [sp, #64]	; 0x40
   829f2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   829f6:	f8cd b010 	str.w	fp, [sp, #16]
   829fa:	f898 3000 	ldrb.w	r3, [r8]
   829fe:	4644      	mov	r4, r8
   82a00:	b1fb      	cbz	r3, 82a42 <_vfiprintf_r+0xc2>
   82a02:	2b25      	cmp	r3, #37	; 0x25
   82a04:	d102      	bne.n	82a0c <_vfiprintf_r+0x8c>
   82a06:	e01c      	b.n	82a42 <_vfiprintf_r+0xc2>
   82a08:	2b25      	cmp	r3, #37	; 0x25
   82a0a:	d003      	beq.n	82a14 <_vfiprintf_r+0x94>
   82a0c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82a10:	2b00      	cmp	r3, #0
   82a12:	d1f9      	bne.n	82a08 <_vfiprintf_r+0x88>
   82a14:	eba4 0508 	sub.w	r5, r4, r8
   82a18:	b19d      	cbz	r5, 82a42 <_vfiprintf_r+0xc2>
   82a1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a1e:	3301      	adds	r3, #1
   82a20:	442a      	add	r2, r5
   82a22:	2b07      	cmp	r3, #7
   82a24:	f8c9 8000 	str.w	r8, [r9]
   82a28:	f8c9 5004 	str.w	r5, [r9, #4]
   82a2c:	9211      	str	r2, [sp, #68]	; 0x44
   82a2e:	9310      	str	r3, [sp, #64]	; 0x40
   82a30:	dd7a      	ble.n	82b28 <_vfiprintf_r+0x1a8>
   82a32:	2a00      	cmp	r2, #0
   82a34:	f040 84b5 	bne.w	833a2 <_vfiprintf_r+0xa22>
   82a38:	46d1      	mov	r9, sl
   82a3a:	9b03      	ldr	r3, [sp, #12]
   82a3c:	9210      	str	r2, [sp, #64]	; 0x40
   82a3e:	442b      	add	r3, r5
   82a40:	9303      	str	r3, [sp, #12]
   82a42:	7823      	ldrb	r3, [r4, #0]
   82a44:	2b00      	cmp	r3, #0
   82a46:	f000 83e5 	beq.w	83214 <_vfiprintf_r+0x894>
   82a4a:	2000      	movs	r0, #0
   82a4c:	f04f 0300 	mov.w	r3, #0
   82a50:	f104 0801 	add.w	r8, r4, #1
   82a54:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82a58:	7862      	ldrb	r2, [r4, #1]
   82a5a:	4606      	mov	r6, r0
   82a5c:	4605      	mov	r5, r0
   82a5e:	4603      	mov	r3, r0
   82a60:	f04f 34ff 	mov.w	r4, #4294967295
   82a64:	f108 0801 	add.w	r8, r8, #1
   82a68:	f1a2 0120 	sub.w	r1, r2, #32
   82a6c:	2958      	cmp	r1, #88	; 0x58
   82a6e:	f200 82d9 	bhi.w	83024 <_vfiprintf_r+0x6a4>
   82a72:	e8df f011 	tbh	[pc, r1, lsl #1]
   82a76:	0228      	.short	0x0228
   82a78:	02d702d7 	.word	0x02d702d7
   82a7c:	02d70230 	.word	0x02d70230
   82a80:	02d702d7 	.word	0x02d702d7
   82a84:	02d702d7 	.word	0x02d702d7
   82a88:	00a002d7 	.word	0x00a002d7
   82a8c:	02d70288 	.word	0x02d70288
   82a90:	02b800a8 	.word	0x02b800a8
   82a94:	01a602d7 	.word	0x01a602d7
   82a98:	01ab01ab 	.word	0x01ab01ab
   82a9c:	01ab01ab 	.word	0x01ab01ab
   82aa0:	01ab01ab 	.word	0x01ab01ab
   82aa4:	01ab01ab 	.word	0x01ab01ab
   82aa8:	02d701ab 	.word	0x02d701ab
   82aac:	02d702d7 	.word	0x02d702d7
   82ab0:	02d702d7 	.word	0x02d702d7
   82ab4:	02d702d7 	.word	0x02d702d7
   82ab8:	02d702d7 	.word	0x02d702d7
   82abc:	01b902d7 	.word	0x01b902d7
   82ac0:	02d702d7 	.word	0x02d702d7
   82ac4:	02d702d7 	.word	0x02d702d7
   82ac8:	02d702d7 	.word	0x02d702d7
   82acc:	02d702d7 	.word	0x02d702d7
   82ad0:	02d702d7 	.word	0x02d702d7
   82ad4:	02d7019e 	.word	0x02d7019e
   82ad8:	02d702d7 	.word	0x02d702d7
   82adc:	02d702d7 	.word	0x02d702d7
   82ae0:	02d701a2 	.word	0x02d701a2
   82ae4:	025a02d7 	.word	0x025a02d7
   82ae8:	02d702d7 	.word	0x02d702d7
   82aec:	02d702d7 	.word	0x02d702d7
   82af0:	02d702d7 	.word	0x02d702d7
   82af4:	02d702d7 	.word	0x02d702d7
   82af8:	02d702d7 	.word	0x02d702d7
   82afc:	02220261 	.word	0x02220261
   82b00:	02d702d7 	.word	0x02d702d7
   82b04:	027602d7 	.word	0x027602d7
   82b08:	02d70222 	.word	0x02d70222
   82b0c:	027b02d7 	.word	0x027b02d7
   82b10:	01fc02d7 	.word	0x01fc02d7
   82b14:	02100189 	.word	0x02100189
   82b18:	02d702d2 	.word	0x02d702d2
   82b1c:	02d70295 	.word	0x02d70295
   82b20:	02d700ad 	.word	0x02d700ad
   82b24:	023502d7 	.word	0x023502d7
   82b28:	f109 0908 	add.w	r9, r9, #8
   82b2c:	9b03      	ldr	r3, [sp, #12]
   82b2e:	442b      	add	r3, r5
   82b30:	9303      	str	r3, [sp, #12]
   82b32:	e786      	b.n	82a42 <_vfiprintf_r+0xc2>
   82b34:	4659      	mov	r1, fp
   82b36:	9806      	ldr	r0, [sp, #24]
   82b38:	f000 fdaa 	bl	83690 <__swsetup_r>
   82b3c:	bb18      	cbnz	r0, 82b86 <_vfiprintf_r+0x206>
   82b3e:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82b42:	f001 031a 	and.w	r3, r1, #26
   82b46:	2b0a      	cmp	r3, #10
   82b48:	f47f af4b 	bne.w	829e2 <_vfiprintf_r+0x62>
   82b4c:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82b50:	2b00      	cmp	r3, #0
   82b52:	f6ff af46 	blt.w	829e2 <_vfiprintf_r+0x62>
   82b56:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b5a:	07db      	lsls	r3, r3, #31
   82b5c:	d405      	bmi.n	82b6a <_vfiprintf_r+0x1ea>
   82b5e:	058f      	lsls	r7, r1, #22
   82b60:	d403      	bmi.n	82b6a <_vfiprintf_r+0x1ea>
   82b62:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82b66:	f001 fabd 	bl	840e4 <__retarget_lock_release_recursive>
   82b6a:	462b      	mov	r3, r5
   82b6c:	4642      	mov	r2, r8
   82b6e:	4659      	mov	r1, fp
   82b70:	9806      	ldr	r0, [sp, #24]
   82b72:	f000 fd49 	bl	83608 <__sbprintf>
   82b76:	9003      	str	r0, [sp, #12]
   82b78:	9803      	ldr	r0, [sp, #12]
   82b7a:	b02d      	add	sp, #180	; 0xb4
   82b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b80:	f000 feee 	bl	83960 <__sinit>
   82b84:	e709      	b.n	8299a <_vfiprintf_r+0x1a>
   82b86:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82b8a:	07d9      	lsls	r1, r3, #31
   82b8c:	d404      	bmi.n	82b98 <_vfiprintf_r+0x218>
   82b8e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82b92:	059a      	lsls	r2, r3, #22
   82b94:	f140 84ae 	bpl.w	834f4 <_vfiprintf_r+0xb74>
   82b98:	f04f 33ff 	mov.w	r3, #4294967295
   82b9c:	9303      	str	r3, [sp, #12]
   82b9e:	9803      	ldr	r0, [sp, #12]
   82ba0:	b02d      	add	sp, #180	; 0xb4
   82ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ba6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82baa:	f001 fa99 	bl	840e0 <__retarget_lock_acquire_recursive>
   82bae:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82bb2:	b281      	uxth	r1, r0
   82bb4:	e6fb      	b.n	829ae <_vfiprintf_r+0x2e>
   82bb6:	9907      	ldr	r1, [sp, #28]
   82bb8:	460a      	mov	r2, r1
   82bba:	680d      	ldr	r5, [r1, #0]
   82bbc:	3204      	adds	r2, #4
   82bbe:	2d00      	cmp	r5, #0
   82bc0:	9207      	str	r2, [sp, #28]
   82bc2:	da02      	bge.n	82bca <_vfiprintf_r+0x24a>
   82bc4:	426d      	negs	r5, r5
   82bc6:	f043 0304 	orr.w	r3, r3, #4
   82bca:	f898 2000 	ldrb.w	r2, [r8]
   82bce:	e749      	b.n	82a64 <_vfiprintf_r+0xe4>
   82bd0:	9508      	str	r5, [sp, #32]
   82bd2:	069e      	lsls	r6, r3, #26
   82bd4:	f100 845a 	bmi.w	8348c <_vfiprintf_r+0xb0c>
   82bd8:	9907      	ldr	r1, [sp, #28]
   82bda:	06dd      	lsls	r5, r3, #27
   82bdc:	460a      	mov	r2, r1
   82bde:	f100 83ef 	bmi.w	833c0 <_vfiprintf_r+0xa40>
   82be2:	0658      	lsls	r0, r3, #25
   82be4:	f140 83ec 	bpl.w	833c0 <_vfiprintf_r+0xa40>
   82be8:	2700      	movs	r7, #0
   82bea:	2201      	movs	r2, #1
   82bec:	880e      	ldrh	r6, [r1, #0]
   82bee:	3104      	adds	r1, #4
   82bf0:	9107      	str	r1, [sp, #28]
   82bf2:	f04f 0100 	mov.w	r1, #0
   82bf6:	2500      	movs	r5, #0
   82bf8:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82bfc:	1c61      	adds	r1, r4, #1
   82bfe:	f000 8117 	beq.w	82e30 <_vfiprintf_r+0x4b0>
   82c02:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82c06:	9102      	str	r1, [sp, #8]
   82c08:	ea56 0107 	orrs.w	r1, r6, r7
   82c0c:	f040 8115 	bne.w	82e3a <_vfiprintf_r+0x4ba>
   82c10:	2c00      	cmp	r4, #0
   82c12:	f040 835b 	bne.w	832cc <_vfiprintf_r+0x94c>
   82c16:	2a00      	cmp	r2, #0
   82c18:	f040 83b6 	bne.w	83388 <_vfiprintf_r+0xa08>
   82c1c:	f013 0301 	ands.w	r3, r3, #1
   82c20:	9305      	str	r3, [sp, #20]
   82c22:	f000 8455 	beq.w	834d0 <_vfiprintf_r+0xb50>
   82c26:	2330      	movs	r3, #48	; 0x30
   82c28:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82c2c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82c30:	9b05      	ldr	r3, [sp, #20]
   82c32:	42a3      	cmp	r3, r4
   82c34:	bfb8      	it	lt
   82c36:	4623      	movlt	r3, r4
   82c38:	9301      	str	r3, [sp, #4]
   82c3a:	b10d      	cbz	r5, 82c40 <_vfiprintf_r+0x2c0>
   82c3c:	3301      	adds	r3, #1
   82c3e:	9301      	str	r3, [sp, #4]
   82c40:	9b02      	ldr	r3, [sp, #8]
   82c42:	f013 0302 	ands.w	r3, r3, #2
   82c46:	9309      	str	r3, [sp, #36]	; 0x24
   82c48:	d002      	beq.n	82c50 <_vfiprintf_r+0x2d0>
   82c4a:	9b01      	ldr	r3, [sp, #4]
   82c4c:	3302      	adds	r3, #2
   82c4e:	9301      	str	r3, [sp, #4]
   82c50:	9b02      	ldr	r3, [sp, #8]
   82c52:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82c56:	930a      	str	r3, [sp, #40]	; 0x28
   82c58:	f040 8215 	bne.w	83086 <_vfiprintf_r+0x706>
   82c5c:	9b08      	ldr	r3, [sp, #32]
   82c5e:	9a01      	ldr	r2, [sp, #4]
   82c60:	1a9d      	subs	r5, r3, r2
   82c62:	2d00      	cmp	r5, #0
   82c64:	f340 820f 	ble.w	83086 <_vfiprintf_r+0x706>
   82c68:	2d10      	cmp	r5, #16
   82c6a:	f340 8484 	ble.w	83576 <_vfiprintf_r+0xbf6>
   82c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82c70:	46ce      	mov	lr, r9
   82c72:	2710      	movs	r7, #16
   82c74:	46a1      	mov	r9, r4
   82c76:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c78:	4ec5      	ldr	r6, [pc, #788]	; (82f90 <_vfiprintf_r+0x610>)
   82c7a:	4619      	mov	r1, r3
   82c7c:	9c06      	ldr	r4, [sp, #24]
   82c7e:	e007      	b.n	82c90 <_vfiprintf_r+0x310>
   82c80:	f101 0c02 	add.w	ip, r1, #2
   82c84:	4601      	mov	r1, r0
   82c86:	f10e 0e08 	add.w	lr, lr, #8
   82c8a:	3d10      	subs	r5, #16
   82c8c:	2d10      	cmp	r5, #16
   82c8e:	dd11      	ble.n	82cb4 <_vfiprintf_r+0x334>
   82c90:	1c48      	adds	r0, r1, #1
   82c92:	3210      	adds	r2, #16
   82c94:	2807      	cmp	r0, #7
   82c96:	9211      	str	r2, [sp, #68]	; 0x44
   82c98:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82c9c:	9010      	str	r0, [sp, #64]	; 0x40
   82c9e:	ddef      	ble.n	82c80 <_vfiprintf_r+0x300>
   82ca0:	2a00      	cmp	r2, #0
   82ca2:	f040 81d9 	bne.w	83058 <_vfiprintf_r+0x6d8>
   82ca6:	3d10      	subs	r5, #16
   82ca8:	2d10      	cmp	r5, #16
   82caa:	4611      	mov	r1, r2
   82cac:	f04f 0c01 	mov.w	ip, #1
   82cb0:	46d6      	mov	lr, sl
   82cb2:	dced      	bgt.n	82c90 <_vfiprintf_r+0x310>
   82cb4:	464c      	mov	r4, r9
   82cb6:	4661      	mov	r1, ip
   82cb8:	46f1      	mov	r9, lr
   82cba:	442a      	add	r2, r5
   82cbc:	2907      	cmp	r1, #7
   82cbe:	9211      	str	r2, [sp, #68]	; 0x44
   82cc0:	f8c9 6000 	str.w	r6, [r9]
   82cc4:	f8c9 5004 	str.w	r5, [r9, #4]
   82cc8:	9110      	str	r1, [sp, #64]	; 0x40
   82cca:	f300 82eb 	bgt.w	832a4 <_vfiprintf_r+0x924>
   82cce:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82cd2:	f109 0908 	add.w	r9, r9, #8
   82cd6:	1c48      	adds	r0, r1, #1
   82cd8:	2d00      	cmp	r5, #0
   82cda:	f040 81dc 	bne.w	83096 <_vfiprintf_r+0x716>
   82cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82ce0:	2b00      	cmp	r3, #0
   82ce2:	f000 81f6 	beq.w	830d2 <_vfiprintf_r+0x752>
   82ce6:	2102      	movs	r1, #2
   82ce8:	ab0e      	add	r3, sp, #56	; 0x38
   82cea:	440a      	add	r2, r1
   82cec:	2807      	cmp	r0, #7
   82cee:	9211      	str	r2, [sp, #68]	; 0x44
   82cf0:	9010      	str	r0, [sp, #64]	; 0x40
   82cf2:	f8c9 1004 	str.w	r1, [r9, #4]
   82cf6:	f8c9 3000 	str.w	r3, [r9]
   82cfa:	f340 81e6 	ble.w	830ca <_vfiprintf_r+0x74a>
   82cfe:	2a00      	cmp	r2, #0
   82d00:	f040 8395 	bne.w	8342e <_vfiprintf_r+0xaae>
   82d04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82d06:	2001      	movs	r0, #1
   82d08:	2b80      	cmp	r3, #128	; 0x80
   82d0a:	4611      	mov	r1, r2
   82d0c:	46d1      	mov	r9, sl
   82d0e:	f040 81e4 	bne.w	830da <_vfiprintf_r+0x75a>
   82d12:	9b08      	ldr	r3, [sp, #32]
   82d14:	9d01      	ldr	r5, [sp, #4]
   82d16:	1b5e      	subs	r6, r3, r5
   82d18:	2e00      	cmp	r6, #0
   82d1a:	f340 81de 	ble.w	830da <_vfiprintf_r+0x75a>
   82d1e:	2e10      	cmp	r6, #16
   82d20:	f340 843c 	ble.w	8359c <_vfiprintf_r+0xc1c>
   82d24:	46cc      	mov	ip, r9
   82d26:	2710      	movs	r7, #16
   82d28:	46a1      	mov	r9, r4
   82d2a:	4d9a      	ldr	r5, [pc, #616]	; (82f94 <_vfiprintf_r+0x614>)
   82d2c:	9c06      	ldr	r4, [sp, #24]
   82d2e:	e007      	b.n	82d40 <_vfiprintf_r+0x3c0>
   82d30:	f101 0e02 	add.w	lr, r1, #2
   82d34:	4601      	mov	r1, r0
   82d36:	f10c 0c08 	add.w	ip, ip, #8
   82d3a:	3e10      	subs	r6, #16
   82d3c:	2e10      	cmp	r6, #16
   82d3e:	dd11      	ble.n	82d64 <_vfiprintf_r+0x3e4>
   82d40:	1c48      	adds	r0, r1, #1
   82d42:	3210      	adds	r2, #16
   82d44:	2807      	cmp	r0, #7
   82d46:	9211      	str	r2, [sp, #68]	; 0x44
   82d48:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82d4c:	9010      	str	r0, [sp, #64]	; 0x40
   82d4e:	ddef      	ble.n	82d30 <_vfiprintf_r+0x3b0>
   82d50:	2a00      	cmp	r2, #0
   82d52:	f040 829b 	bne.w	8328c <_vfiprintf_r+0x90c>
   82d56:	3e10      	subs	r6, #16
   82d58:	2e10      	cmp	r6, #16
   82d5a:	f04f 0e01 	mov.w	lr, #1
   82d5e:	4611      	mov	r1, r2
   82d60:	46d4      	mov	ip, sl
   82d62:	dced      	bgt.n	82d40 <_vfiprintf_r+0x3c0>
   82d64:	464c      	mov	r4, r9
   82d66:	46e1      	mov	r9, ip
   82d68:	4432      	add	r2, r6
   82d6a:	f1be 0f07 	cmp.w	lr, #7
   82d6e:	9211      	str	r2, [sp, #68]	; 0x44
   82d70:	e889 0060 	stmia.w	r9, {r5, r6}
   82d74:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82d78:	f300 8366 	bgt.w	83448 <_vfiprintf_r+0xac8>
   82d7c:	f109 0908 	add.w	r9, r9, #8
   82d80:	f10e 0001 	add.w	r0, lr, #1
   82d84:	4671      	mov	r1, lr
   82d86:	e1a8      	b.n	830da <_vfiprintf_r+0x75a>
   82d88:	9508      	str	r5, [sp, #32]
   82d8a:	f013 0220 	ands.w	r2, r3, #32
   82d8e:	f040 8389 	bne.w	834a4 <_vfiprintf_r+0xb24>
   82d92:	f013 0110 	ands.w	r1, r3, #16
   82d96:	f040 8319 	bne.w	833cc <_vfiprintf_r+0xa4c>
   82d9a:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82d9e:	f000 8315 	beq.w	833cc <_vfiprintf_r+0xa4c>
   82da2:	9807      	ldr	r0, [sp, #28]
   82da4:	460a      	mov	r2, r1
   82da6:	4601      	mov	r1, r0
   82da8:	3104      	adds	r1, #4
   82daa:	8806      	ldrh	r6, [r0, #0]
   82dac:	2700      	movs	r7, #0
   82dae:	9107      	str	r1, [sp, #28]
   82db0:	e71f      	b.n	82bf2 <_vfiprintf_r+0x272>
   82db2:	9508      	str	r5, [sp, #32]
   82db4:	f043 0310 	orr.w	r3, r3, #16
   82db8:	e7e7      	b.n	82d8a <_vfiprintf_r+0x40a>
   82dba:	9508      	str	r5, [sp, #32]
   82dbc:	f043 0310 	orr.w	r3, r3, #16
   82dc0:	e707      	b.n	82bd2 <_vfiprintf_r+0x252>
   82dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82dc6:	f898 2000 	ldrb.w	r2, [r8]
   82dca:	e64b      	b.n	82a64 <_vfiprintf_r+0xe4>
   82dcc:	2500      	movs	r5, #0
   82dce:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82dd2:	f818 2b01 	ldrb.w	r2, [r8], #1
   82dd6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82dda:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82dde:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82de2:	2909      	cmp	r1, #9
   82de4:	d9f5      	bls.n	82dd2 <_vfiprintf_r+0x452>
   82de6:	e63f      	b.n	82a68 <_vfiprintf_r+0xe8>
   82de8:	9508      	str	r5, [sp, #32]
   82dea:	2800      	cmp	r0, #0
   82dec:	f040 8402 	bne.w	835f4 <_vfiprintf_r+0xc74>
   82df0:	f043 0310 	orr.w	r3, r3, #16
   82df4:	069e      	lsls	r6, r3, #26
   82df6:	f100 833d 	bmi.w	83474 <_vfiprintf_r+0xaf4>
   82dfa:	9907      	ldr	r1, [sp, #28]
   82dfc:	06dd      	lsls	r5, r3, #27
   82dfe:	460a      	mov	r2, r1
   82e00:	f100 82f0 	bmi.w	833e4 <_vfiprintf_r+0xa64>
   82e04:	0658      	lsls	r0, r3, #25
   82e06:	f140 82ed 	bpl.w	833e4 <_vfiprintf_r+0xa64>
   82e0a:	f9b1 6000 	ldrsh.w	r6, [r1]
   82e0e:	3204      	adds	r2, #4
   82e10:	17f7      	asrs	r7, r6, #31
   82e12:	4630      	mov	r0, r6
   82e14:	4639      	mov	r1, r7
   82e16:	9207      	str	r2, [sp, #28]
   82e18:	2800      	cmp	r0, #0
   82e1a:	f171 0200 	sbcs.w	r2, r1, #0
   82e1e:	f2c0 835a 	blt.w	834d6 <_vfiprintf_r+0xb56>
   82e22:	1c61      	adds	r1, r4, #1
   82e24:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82e28:	f04f 0201 	mov.w	r2, #1
   82e2c:	f47f aee9 	bne.w	82c02 <_vfiprintf_r+0x282>
   82e30:	ea56 0107 	orrs.w	r1, r6, r7
   82e34:	f000 824b 	beq.w	832ce <_vfiprintf_r+0x94e>
   82e38:	9302      	str	r3, [sp, #8]
   82e3a:	2a01      	cmp	r2, #1
   82e3c:	f000 828a 	beq.w	83354 <_vfiprintf_r+0x9d4>
   82e40:	2a02      	cmp	r2, #2
   82e42:	f040 825a 	bne.w	832fa <_vfiprintf_r+0x97a>
   82e46:	46d3      	mov	fp, sl
   82e48:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82e4a:	0933      	lsrs	r3, r6, #4
   82e4c:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82e50:	0939      	lsrs	r1, r7, #4
   82e52:	f006 020f 	and.w	r2, r6, #15
   82e56:	460f      	mov	r7, r1
   82e58:	461e      	mov	r6, r3
   82e5a:	5c83      	ldrb	r3, [r0, r2]
   82e5c:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82e60:	ea56 0307 	orrs.w	r3, r6, r7
   82e64:	d1f1      	bne.n	82e4a <_vfiprintf_r+0x4ca>
   82e66:	ebaa 030b 	sub.w	r3, sl, fp
   82e6a:	9305      	str	r3, [sp, #20]
   82e6c:	e6e0      	b.n	82c30 <_vfiprintf_r+0x2b0>
   82e6e:	2800      	cmp	r0, #0
   82e70:	f040 83bd 	bne.w	835ee <_vfiprintf_r+0xc6e>
   82e74:	0699      	lsls	r1, r3, #26
   82e76:	f100 8359 	bmi.w	8352c <_vfiprintf_r+0xbac>
   82e7a:	06da      	lsls	r2, r3, #27
   82e7c:	f100 80e5 	bmi.w	8304a <_vfiprintf_r+0x6ca>
   82e80:	065b      	lsls	r3, r3, #25
   82e82:	f140 80e2 	bpl.w	8304a <_vfiprintf_r+0x6ca>
   82e86:	9a07      	ldr	r2, [sp, #28]
   82e88:	6813      	ldr	r3, [r2, #0]
   82e8a:	3204      	adds	r2, #4
   82e8c:	9207      	str	r2, [sp, #28]
   82e8e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82e92:	801a      	strh	r2, [r3, #0]
   82e94:	e5b1      	b.n	829fa <_vfiprintf_r+0x7a>
   82e96:	2278      	movs	r2, #120	; 0x78
   82e98:	2130      	movs	r1, #48	; 0x30
   82e9a:	9508      	str	r5, [sp, #32]
   82e9c:	9d07      	ldr	r5, [sp, #28]
   82e9e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82ea2:	1d2a      	adds	r2, r5, #4
   82ea4:	9207      	str	r2, [sp, #28]
   82ea6:	4a3c      	ldr	r2, [pc, #240]	; (82f98 <_vfiprintf_r+0x618>)
   82ea8:	682e      	ldr	r6, [r5, #0]
   82eaa:	920b      	str	r2, [sp, #44]	; 0x2c
   82eac:	f043 0302 	orr.w	r3, r3, #2
   82eb0:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82eb4:	2700      	movs	r7, #0
   82eb6:	2202      	movs	r2, #2
   82eb8:	e69b      	b.n	82bf2 <_vfiprintf_r+0x272>
   82eba:	9508      	str	r5, [sp, #32]
   82ebc:	2800      	cmp	r0, #0
   82ebe:	d099      	beq.n	82df4 <_vfiprintf_r+0x474>
   82ec0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82ec4:	e796      	b.n	82df4 <_vfiprintf_r+0x474>
   82ec6:	f898 2000 	ldrb.w	r2, [r8]
   82eca:	2e00      	cmp	r6, #0
   82ecc:	f47f adca 	bne.w	82a64 <_vfiprintf_r+0xe4>
   82ed0:	2001      	movs	r0, #1
   82ed2:	2620      	movs	r6, #32
   82ed4:	e5c6      	b.n	82a64 <_vfiprintf_r+0xe4>
   82ed6:	f043 0301 	orr.w	r3, r3, #1
   82eda:	f898 2000 	ldrb.w	r2, [r8]
   82ede:	e5c1      	b.n	82a64 <_vfiprintf_r+0xe4>
   82ee0:	9508      	str	r5, [sp, #32]
   82ee2:	2800      	cmp	r0, #0
   82ee4:	f040 8380 	bne.w	835e8 <_vfiprintf_r+0xc68>
   82ee8:	492b      	ldr	r1, [pc, #172]	; (82f98 <_vfiprintf_r+0x618>)
   82eea:	910b      	str	r1, [sp, #44]	; 0x2c
   82eec:	069f      	lsls	r7, r3, #26
   82eee:	f100 82e5 	bmi.w	834bc <_vfiprintf_r+0xb3c>
   82ef2:	9807      	ldr	r0, [sp, #28]
   82ef4:	06de      	lsls	r6, r3, #27
   82ef6:	4601      	mov	r1, r0
   82ef8:	f100 826f 	bmi.w	833da <_vfiprintf_r+0xa5a>
   82efc:	065d      	lsls	r5, r3, #25
   82efe:	f140 826c 	bpl.w	833da <_vfiprintf_r+0xa5a>
   82f02:	2700      	movs	r7, #0
   82f04:	3104      	adds	r1, #4
   82f06:	8806      	ldrh	r6, [r0, #0]
   82f08:	9107      	str	r1, [sp, #28]
   82f0a:	07d8      	lsls	r0, r3, #31
   82f0c:	f140 8220 	bpl.w	83350 <_vfiprintf_r+0x9d0>
   82f10:	ea56 0107 	orrs.w	r1, r6, r7
   82f14:	f000 821c 	beq.w	83350 <_vfiprintf_r+0x9d0>
   82f18:	2130      	movs	r1, #48	; 0x30
   82f1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82f1e:	f043 0302 	orr.w	r3, r3, #2
   82f22:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82f26:	2202      	movs	r2, #2
   82f28:	e663      	b.n	82bf2 <_vfiprintf_r+0x272>
   82f2a:	9508      	str	r5, [sp, #32]
   82f2c:	2800      	cmp	r0, #0
   82f2e:	f040 8355 	bne.w	835dc <_vfiprintf_r+0xc5c>
   82f32:	491a      	ldr	r1, [pc, #104]	; (82f9c <_vfiprintf_r+0x61c>)
   82f34:	910b      	str	r1, [sp, #44]	; 0x2c
   82f36:	e7d9      	b.n	82eec <_vfiprintf_r+0x56c>
   82f38:	2201      	movs	r2, #1
   82f3a:	9807      	ldr	r0, [sp, #28]
   82f3c:	4611      	mov	r1, r2
   82f3e:	9201      	str	r2, [sp, #4]
   82f40:	6802      	ldr	r2, [r0, #0]
   82f42:	f04f 0400 	mov.w	r4, #0
   82f46:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   82f4a:	4602      	mov	r2, r0
   82f4c:	3204      	adds	r2, #4
   82f4e:	9508      	str	r5, [sp, #32]
   82f50:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82f54:	9105      	str	r1, [sp, #20]
   82f56:	9207      	str	r2, [sp, #28]
   82f58:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82f5c:	9302      	str	r3, [sp, #8]
   82f5e:	2400      	movs	r4, #0
   82f60:	e66e      	b.n	82c40 <_vfiprintf_r+0x2c0>
   82f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f66:	f898 2000 	ldrb.w	r2, [r8]
   82f6a:	e57b      	b.n	82a64 <_vfiprintf_r+0xe4>
   82f6c:	f898 2000 	ldrb.w	r2, [r8]
   82f70:	2a6c      	cmp	r2, #108	; 0x6c
   82f72:	bf03      	ittte	eq
   82f74:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   82f78:	f043 0320 	orreq.w	r3, r3, #32
   82f7c:	f108 0801 	addeq.w	r8, r8, #1
   82f80:	f043 0310 	orrne.w	r3, r3, #16
   82f84:	e56e      	b.n	82a64 <_vfiprintf_r+0xe4>
   82f86:	f898 2000 	ldrb.w	r2, [r8]
   82f8a:	2001      	movs	r0, #1
   82f8c:	262b      	movs	r6, #43	; 0x2b
   82f8e:	e569      	b.n	82a64 <_vfiprintf_r+0xe4>
   82f90:	00085400 	.word	0x00085400
   82f94:	00085410 	.word	0x00085410
   82f98:	000853e4 	.word	0x000853e4
   82f9c:	000853d0 	.word	0x000853d0
   82fa0:	f04f 0200 	mov.w	r2, #0
   82fa4:	9907      	ldr	r1, [sp, #28]
   82fa6:	9508      	str	r5, [sp, #32]
   82fa8:	f8d1 b000 	ldr.w	fp, [r1]
   82fac:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82fb0:	1d0d      	adds	r5, r1, #4
   82fb2:	f1bb 0f00 	cmp.w	fp, #0
   82fb6:	f000 82e4 	beq.w	83582 <_vfiprintf_r+0xc02>
   82fba:	1c67      	adds	r7, r4, #1
   82fbc:	f000 82c3 	beq.w	83546 <_vfiprintf_r+0xbc6>
   82fc0:	4622      	mov	r2, r4
   82fc2:	2100      	movs	r1, #0
   82fc4:	4658      	mov	r0, fp
   82fc6:	9301      	str	r3, [sp, #4]
   82fc8:	f001 fbc6 	bl	84758 <memchr>
   82fcc:	9b01      	ldr	r3, [sp, #4]
   82fce:	2800      	cmp	r0, #0
   82fd0:	f000 82e8 	beq.w	835a4 <_vfiprintf_r+0xc24>
   82fd4:	eba0 020b 	sub.w	r2, r0, fp
   82fd8:	9507      	str	r5, [sp, #28]
   82fda:	9205      	str	r2, [sp, #20]
   82fdc:	9302      	str	r3, [sp, #8]
   82fde:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82fe2:	2400      	movs	r4, #0
   82fe4:	e624      	b.n	82c30 <_vfiprintf_r+0x2b0>
   82fe6:	f898 2000 	ldrb.w	r2, [r8]
   82fea:	f108 0701 	add.w	r7, r8, #1
   82fee:	2a2a      	cmp	r2, #42	; 0x2a
   82ff0:	f000 82e9 	beq.w	835c6 <_vfiprintf_r+0xc46>
   82ff4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82ff8:	2909      	cmp	r1, #9
   82ffa:	46b8      	mov	r8, r7
   82ffc:	f04f 0400 	mov.w	r4, #0
   83000:	f63f ad32 	bhi.w	82a68 <_vfiprintf_r+0xe8>
   83004:	f818 2b01 	ldrb.w	r2, [r8], #1
   83008:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   8300c:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   83010:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83014:	2909      	cmp	r1, #9
   83016:	d9f5      	bls.n	83004 <_vfiprintf_r+0x684>
   83018:	e526      	b.n	82a68 <_vfiprintf_r+0xe8>
   8301a:	f043 0320 	orr.w	r3, r3, #32
   8301e:	f898 2000 	ldrb.w	r2, [r8]
   83022:	e51f      	b.n	82a64 <_vfiprintf_r+0xe4>
   83024:	9508      	str	r5, [sp, #32]
   83026:	2800      	cmp	r0, #0
   83028:	f040 82db 	bne.w	835e2 <_vfiprintf_r+0xc62>
   8302c:	2a00      	cmp	r2, #0
   8302e:	f000 80f1 	beq.w	83214 <_vfiprintf_r+0x894>
   83032:	2101      	movs	r1, #1
   83034:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83038:	f04f 0200 	mov.w	r2, #0
   8303c:	9101      	str	r1, [sp, #4]
   8303e:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83042:	9105      	str	r1, [sp, #20]
   83044:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83048:	e788      	b.n	82f5c <_vfiprintf_r+0x5dc>
   8304a:	9a07      	ldr	r2, [sp, #28]
   8304c:	6813      	ldr	r3, [r2, #0]
   8304e:	3204      	adds	r2, #4
   83050:	9207      	str	r2, [sp, #28]
   83052:	9a03      	ldr	r2, [sp, #12]
   83054:	601a      	str	r2, [r3, #0]
   83056:	e4d0      	b.n	829fa <_vfiprintf_r+0x7a>
   83058:	aa0f      	add	r2, sp, #60	; 0x3c
   8305a:	9904      	ldr	r1, [sp, #16]
   8305c:	4620      	mov	r0, r4
   8305e:	f7ff fc4f 	bl	82900 <__sprint_r.part.0>
   83062:	2800      	cmp	r0, #0
   83064:	f040 8143 	bne.w	832ee <_vfiprintf_r+0x96e>
   83068:	9910      	ldr	r1, [sp, #64]	; 0x40
   8306a:	46d6      	mov	lr, sl
   8306c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8306e:	f101 0c01 	add.w	ip, r1, #1
   83072:	e60a      	b.n	82c8a <_vfiprintf_r+0x30a>
   83074:	aa0f      	add	r2, sp, #60	; 0x3c
   83076:	9904      	ldr	r1, [sp, #16]
   83078:	9806      	ldr	r0, [sp, #24]
   8307a:	f7ff fc41 	bl	82900 <__sprint_r.part.0>
   8307e:	2800      	cmp	r0, #0
   83080:	f040 8135 	bne.w	832ee <_vfiprintf_r+0x96e>
   83084:	46d1      	mov	r9, sl
   83086:	9910      	ldr	r1, [sp, #64]	; 0x40
   83088:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8308c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8308e:	1c48      	adds	r0, r1, #1
   83090:	2d00      	cmp	r5, #0
   83092:	f43f ae24 	beq.w	82cde <_vfiprintf_r+0x35e>
   83096:	2101      	movs	r1, #1
   83098:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   8309c:	440a      	add	r2, r1
   8309e:	2807      	cmp	r0, #7
   830a0:	9211      	str	r2, [sp, #68]	; 0x44
   830a2:	9010      	str	r0, [sp, #64]	; 0x40
   830a4:	f8c9 1004 	str.w	r1, [r9, #4]
   830a8:	f8c9 5000 	str.w	r5, [r9]
   830ac:	f340 8109 	ble.w	832c2 <_vfiprintf_r+0x942>
   830b0:	2a00      	cmp	r2, #0
   830b2:	f040 81af 	bne.w	83414 <_vfiprintf_r+0xa94>
   830b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   830b8:	2b00      	cmp	r3, #0
   830ba:	f43f ae23 	beq.w	82d04 <_vfiprintf_r+0x384>
   830be:	2202      	movs	r2, #2
   830c0:	4608      	mov	r0, r1
   830c2:	46d1      	mov	r9, sl
   830c4:	ab0e      	add	r3, sp, #56	; 0x38
   830c6:	921d      	str	r2, [sp, #116]	; 0x74
   830c8:	931c      	str	r3, [sp, #112]	; 0x70
   830ca:	4601      	mov	r1, r0
   830cc:	f109 0908 	add.w	r9, r9, #8
   830d0:	3001      	adds	r0, #1
   830d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   830d4:	2b80      	cmp	r3, #128	; 0x80
   830d6:	f43f ae1c 	beq.w	82d12 <_vfiprintf_r+0x392>
   830da:	9b05      	ldr	r3, [sp, #20]
   830dc:	1ae4      	subs	r4, r4, r3
   830de:	2c00      	cmp	r4, #0
   830e0:	dd2f      	ble.n	83142 <_vfiprintf_r+0x7c2>
   830e2:	2c10      	cmp	r4, #16
   830e4:	f340 8220 	ble.w	83528 <_vfiprintf_r+0xba8>
   830e8:	46ce      	mov	lr, r9
   830ea:	2610      	movs	r6, #16
   830ec:	4db2      	ldr	r5, [pc, #712]	; (833b8 <_vfiprintf_r+0xa38>)
   830ee:	9f06      	ldr	r7, [sp, #24]
   830f0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   830f4:	e006      	b.n	83104 <_vfiprintf_r+0x784>
   830f6:	1c88      	adds	r0, r1, #2
   830f8:	4619      	mov	r1, r3
   830fa:	f10e 0e08 	add.w	lr, lr, #8
   830fe:	3c10      	subs	r4, #16
   83100:	2c10      	cmp	r4, #16
   83102:	dd10      	ble.n	83126 <_vfiprintf_r+0x7a6>
   83104:	1c4b      	adds	r3, r1, #1
   83106:	3210      	adds	r2, #16
   83108:	2b07      	cmp	r3, #7
   8310a:	9211      	str	r2, [sp, #68]	; 0x44
   8310c:	e88e 0060 	stmia.w	lr, {r5, r6}
   83110:	9310      	str	r3, [sp, #64]	; 0x40
   83112:	ddf0      	ble.n	830f6 <_vfiprintf_r+0x776>
   83114:	2a00      	cmp	r2, #0
   83116:	d165      	bne.n	831e4 <_vfiprintf_r+0x864>
   83118:	3c10      	subs	r4, #16
   8311a:	2c10      	cmp	r4, #16
   8311c:	f04f 0001 	mov.w	r0, #1
   83120:	4611      	mov	r1, r2
   83122:	46d6      	mov	lr, sl
   83124:	dcee      	bgt.n	83104 <_vfiprintf_r+0x784>
   83126:	46f1      	mov	r9, lr
   83128:	4422      	add	r2, r4
   8312a:	2807      	cmp	r0, #7
   8312c:	9211      	str	r2, [sp, #68]	; 0x44
   8312e:	f8c9 5000 	str.w	r5, [r9]
   83132:	f8c9 4004 	str.w	r4, [r9, #4]
   83136:	9010      	str	r0, [sp, #64]	; 0x40
   83138:	f300 8085 	bgt.w	83246 <_vfiprintf_r+0x8c6>
   8313c:	f109 0908 	add.w	r9, r9, #8
   83140:	3001      	adds	r0, #1
   83142:	9905      	ldr	r1, [sp, #20]
   83144:	2807      	cmp	r0, #7
   83146:	440a      	add	r2, r1
   83148:	9211      	str	r2, [sp, #68]	; 0x44
   8314a:	f8c9 b000 	str.w	fp, [r9]
   8314e:	f8c9 1004 	str.w	r1, [r9, #4]
   83152:	9010      	str	r0, [sp, #64]	; 0x40
   83154:	f340 8082 	ble.w	8325c <_vfiprintf_r+0x8dc>
   83158:	2a00      	cmp	r2, #0
   8315a:	f040 8118 	bne.w	8338e <_vfiprintf_r+0xa0e>
   8315e:	9b02      	ldr	r3, [sp, #8]
   83160:	9210      	str	r2, [sp, #64]	; 0x40
   83162:	0758      	lsls	r0, r3, #29
   83164:	d535      	bpl.n	831d2 <_vfiprintf_r+0x852>
   83166:	9b08      	ldr	r3, [sp, #32]
   83168:	9901      	ldr	r1, [sp, #4]
   8316a:	1a5c      	subs	r4, r3, r1
   8316c:	2c00      	cmp	r4, #0
   8316e:	f340 80e7 	ble.w	83340 <_vfiprintf_r+0x9c0>
   83172:	46d1      	mov	r9, sl
   83174:	2c10      	cmp	r4, #16
   83176:	f340 820d 	ble.w	83594 <_vfiprintf_r+0xc14>
   8317a:	2510      	movs	r5, #16
   8317c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8317e:	4e8f      	ldr	r6, [pc, #572]	; (833bc <_vfiprintf_r+0xa3c>)
   83180:	9f06      	ldr	r7, [sp, #24]
   83182:	f8dd b010 	ldr.w	fp, [sp, #16]
   83186:	e006      	b.n	83196 <_vfiprintf_r+0x816>
   83188:	1c88      	adds	r0, r1, #2
   8318a:	4619      	mov	r1, r3
   8318c:	f109 0908 	add.w	r9, r9, #8
   83190:	3c10      	subs	r4, #16
   83192:	2c10      	cmp	r4, #16
   83194:	dd11      	ble.n	831ba <_vfiprintf_r+0x83a>
   83196:	1c4b      	adds	r3, r1, #1
   83198:	3210      	adds	r2, #16
   8319a:	2b07      	cmp	r3, #7
   8319c:	9211      	str	r2, [sp, #68]	; 0x44
   8319e:	f8c9 6000 	str.w	r6, [r9]
   831a2:	f8c9 5004 	str.w	r5, [r9, #4]
   831a6:	9310      	str	r3, [sp, #64]	; 0x40
   831a8:	ddee      	ble.n	83188 <_vfiprintf_r+0x808>
   831aa:	bb42      	cbnz	r2, 831fe <_vfiprintf_r+0x87e>
   831ac:	3c10      	subs	r4, #16
   831ae:	2c10      	cmp	r4, #16
   831b0:	f04f 0001 	mov.w	r0, #1
   831b4:	4611      	mov	r1, r2
   831b6:	46d1      	mov	r9, sl
   831b8:	dced      	bgt.n	83196 <_vfiprintf_r+0x816>
   831ba:	4422      	add	r2, r4
   831bc:	2807      	cmp	r0, #7
   831be:	9211      	str	r2, [sp, #68]	; 0x44
   831c0:	f8c9 6000 	str.w	r6, [r9]
   831c4:	f8c9 4004 	str.w	r4, [r9, #4]
   831c8:	9010      	str	r0, [sp, #64]	; 0x40
   831ca:	dd51      	ble.n	83270 <_vfiprintf_r+0x8f0>
   831cc:	2a00      	cmp	r2, #0
   831ce:	f040 819a 	bne.w	83506 <_vfiprintf_r+0xb86>
   831d2:	9b03      	ldr	r3, [sp, #12]
   831d4:	9a08      	ldr	r2, [sp, #32]
   831d6:	9901      	ldr	r1, [sp, #4]
   831d8:	428a      	cmp	r2, r1
   831da:	bfac      	ite	ge
   831dc:	189b      	addge	r3, r3, r2
   831de:	185b      	addlt	r3, r3, r1
   831e0:	9303      	str	r3, [sp, #12]
   831e2:	e04e      	b.n	83282 <_vfiprintf_r+0x902>
   831e4:	aa0f      	add	r2, sp, #60	; 0x3c
   831e6:	4649      	mov	r1, r9
   831e8:	4638      	mov	r0, r7
   831ea:	f7ff fb89 	bl	82900 <__sprint_r.part.0>
   831ee:	2800      	cmp	r0, #0
   831f0:	f040 813e 	bne.w	83470 <_vfiprintf_r+0xaf0>
   831f4:	9910      	ldr	r1, [sp, #64]	; 0x40
   831f6:	46d6      	mov	lr, sl
   831f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831fa:	1c48      	adds	r0, r1, #1
   831fc:	e77f      	b.n	830fe <_vfiprintf_r+0x77e>
   831fe:	aa0f      	add	r2, sp, #60	; 0x3c
   83200:	4659      	mov	r1, fp
   83202:	4638      	mov	r0, r7
   83204:	f7ff fb7c 	bl	82900 <__sprint_r.part.0>
   83208:	b960      	cbnz	r0, 83224 <_vfiprintf_r+0x8a4>
   8320a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8320c:	46d1      	mov	r9, sl
   8320e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83210:	1c48      	adds	r0, r1, #1
   83212:	e7bd      	b.n	83190 <_vfiprintf_r+0x810>
   83214:	9b11      	ldr	r3, [sp, #68]	; 0x44
   83216:	f8dd b010 	ldr.w	fp, [sp, #16]
   8321a:	2b00      	cmp	r3, #0
   8321c:	f040 81ca 	bne.w	835b4 <_vfiprintf_r+0xc34>
   83220:	2300      	movs	r3, #0
   83222:	9310      	str	r3, [sp, #64]	; 0x40
   83224:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83228:	f013 0f01 	tst.w	r3, #1
   8322c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83230:	d102      	bne.n	83238 <_vfiprintf_r+0x8b8>
   83232:	059a      	lsls	r2, r3, #22
   83234:	f140 80dd 	bpl.w	833f2 <_vfiprintf_r+0xa72>
   83238:	065b      	lsls	r3, r3, #25
   8323a:	f53f acad 	bmi.w	82b98 <_vfiprintf_r+0x218>
   8323e:	9803      	ldr	r0, [sp, #12]
   83240:	b02d      	add	sp, #180	; 0xb4
   83242:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83246:	2a00      	cmp	r2, #0
   83248:	f040 8105 	bne.w	83456 <_vfiprintf_r+0xad6>
   8324c:	2301      	movs	r3, #1
   8324e:	46d1      	mov	r9, sl
   83250:	9a05      	ldr	r2, [sp, #20]
   83252:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   83256:	921d      	str	r2, [sp, #116]	; 0x74
   83258:	9211      	str	r2, [sp, #68]	; 0x44
   8325a:	9310      	str	r3, [sp, #64]	; 0x40
   8325c:	f109 0908 	add.w	r9, r9, #8
   83260:	9b02      	ldr	r3, [sp, #8]
   83262:	0759      	lsls	r1, r3, #29
   83264:	d504      	bpl.n	83270 <_vfiprintf_r+0x8f0>
   83266:	9b08      	ldr	r3, [sp, #32]
   83268:	9901      	ldr	r1, [sp, #4]
   8326a:	1a5c      	subs	r4, r3, r1
   8326c:	2c00      	cmp	r4, #0
   8326e:	dc81      	bgt.n	83174 <_vfiprintf_r+0x7f4>
   83270:	9b03      	ldr	r3, [sp, #12]
   83272:	9908      	ldr	r1, [sp, #32]
   83274:	9801      	ldr	r0, [sp, #4]
   83276:	4281      	cmp	r1, r0
   83278:	bfac      	ite	ge
   8327a:	185b      	addge	r3, r3, r1
   8327c:	181b      	addlt	r3, r3, r0
   8327e:	9303      	str	r3, [sp, #12]
   83280:	bb72      	cbnz	r2, 832e0 <_vfiprintf_r+0x960>
   83282:	2300      	movs	r3, #0
   83284:	46d1      	mov	r9, sl
   83286:	9310      	str	r3, [sp, #64]	; 0x40
   83288:	f7ff bbb7 	b.w	829fa <_vfiprintf_r+0x7a>
   8328c:	aa0f      	add	r2, sp, #60	; 0x3c
   8328e:	9904      	ldr	r1, [sp, #16]
   83290:	4620      	mov	r0, r4
   83292:	f7ff fb35 	bl	82900 <__sprint_r.part.0>
   83296:	bb50      	cbnz	r0, 832ee <_vfiprintf_r+0x96e>
   83298:	9910      	ldr	r1, [sp, #64]	; 0x40
   8329a:	46d4      	mov	ip, sl
   8329c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8329e:	f101 0e01 	add.w	lr, r1, #1
   832a2:	e54a      	b.n	82d3a <_vfiprintf_r+0x3ba>
   832a4:	2a00      	cmp	r2, #0
   832a6:	f47f aee5 	bne.w	83074 <_vfiprintf_r+0x6f4>
   832aa:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   832ae:	2900      	cmp	r1, #0
   832b0:	f000 811a 	beq.w	834e8 <_vfiprintf_r+0xb68>
   832b4:	2201      	movs	r2, #1
   832b6:	46d1      	mov	r9, sl
   832b8:	4610      	mov	r0, r2
   832ba:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   832be:	921d      	str	r2, [sp, #116]	; 0x74
   832c0:	911c      	str	r1, [sp, #112]	; 0x70
   832c2:	4601      	mov	r1, r0
   832c4:	f109 0908 	add.w	r9, r9, #8
   832c8:	3001      	adds	r0, #1
   832ca:	e508      	b.n	82cde <_vfiprintf_r+0x35e>
   832cc:	9b02      	ldr	r3, [sp, #8]
   832ce:	2a01      	cmp	r2, #1
   832d0:	f000 8097 	beq.w	83402 <_vfiprintf_r+0xa82>
   832d4:	2a02      	cmp	r2, #2
   832d6:	d10d      	bne.n	832f4 <_vfiprintf_r+0x974>
   832d8:	9302      	str	r3, [sp, #8]
   832da:	2600      	movs	r6, #0
   832dc:	2700      	movs	r7, #0
   832de:	e5b2      	b.n	82e46 <_vfiprintf_r+0x4c6>
   832e0:	aa0f      	add	r2, sp, #60	; 0x3c
   832e2:	9904      	ldr	r1, [sp, #16]
   832e4:	9806      	ldr	r0, [sp, #24]
   832e6:	f7ff fb0b 	bl	82900 <__sprint_r.part.0>
   832ea:	2800      	cmp	r0, #0
   832ec:	d0c9      	beq.n	83282 <_vfiprintf_r+0x902>
   832ee:	f8dd b010 	ldr.w	fp, [sp, #16]
   832f2:	e797      	b.n	83224 <_vfiprintf_r+0x8a4>
   832f4:	2600      	movs	r6, #0
   832f6:	2700      	movs	r7, #0
   832f8:	9302      	str	r3, [sp, #8]
   832fa:	4651      	mov	r1, sl
   832fc:	e000      	b.n	83300 <_vfiprintf_r+0x980>
   832fe:	4659      	mov	r1, fp
   83300:	08f2      	lsrs	r2, r6, #3
   83302:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   83306:	08f8      	lsrs	r0, r7, #3
   83308:	f006 0307 	and.w	r3, r6, #7
   8330c:	4607      	mov	r7, r0
   8330e:	4616      	mov	r6, r2
   83310:	3330      	adds	r3, #48	; 0x30
   83312:	ea56 0207 	orrs.w	r2, r6, r7
   83316:	f801 3c01 	strb.w	r3, [r1, #-1]
   8331a:	f101 3bff 	add.w	fp, r1, #4294967295
   8331e:	d1ee      	bne.n	832fe <_vfiprintf_r+0x97e>
   83320:	9a02      	ldr	r2, [sp, #8]
   83322:	07d6      	lsls	r6, r2, #31
   83324:	f57f ad9f 	bpl.w	82e66 <_vfiprintf_r+0x4e6>
   83328:	2b30      	cmp	r3, #48	; 0x30
   8332a:	f43f ad9c 	beq.w	82e66 <_vfiprintf_r+0x4e6>
   8332e:	2330      	movs	r3, #48	; 0x30
   83330:	3902      	subs	r1, #2
   83332:	f80b 3c01 	strb.w	r3, [fp, #-1]
   83336:	ebaa 0301 	sub.w	r3, sl, r1
   8333a:	9305      	str	r3, [sp, #20]
   8333c:	468b      	mov	fp, r1
   8333e:	e477      	b.n	82c30 <_vfiprintf_r+0x2b0>
   83340:	9b03      	ldr	r3, [sp, #12]
   83342:	9a08      	ldr	r2, [sp, #32]
   83344:	428a      	cmp	r2, r1
   83346:	bfac      	ite	ge
   83348:	189b      	addge	r3, r3, r2
   8334a:	185b      	addlt	r3, r3, r1
   8334c:	9303      	str	r3, [sp, #12]
   8334e:	e798      	b.n	83282 <_vfiprintf_r+0x902>
   83350:	2202      	movs	r2, #2
   83352:	e44e      	b.n	82bf2 <_vfiprintf_r+0x272>
   83354:	2f00      	cmp	r7, #0
   83356:	bf08      	it	eq
   83358:	2e0a      	cmpeq	r6, #10
   8335a:	d351      	bcc.n	83400 <_vfiprintf_r+0xa80>
   8335c:	46d3      	mov	fp, sl
   8335e:	4630      	mov	r0, r6
   83360:	4639      	mov	r1, r7
   83362:	220a      	movs	r2, #10
   83364:	2300      	movs	r3, #0
   83366:	f001 fe85 	bl	85074 <__aeabi_uldivmod>
   8336a:	3230      	adds	r2, #48	; 0x30
   8336c:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   83370:	4630      	mov	r0, r6
   83372:	4639      	mov	r1, r7
   83374:	2300      	movs	r3, #0
   83376:	220a      	movs	r2, #10
   83378:	f001 fe7c 	bl	85074 <__aeabi_uldivmod>
   8337c:	4606      	mov	r6, r0
   8337e:	460f      	mov	r7, r1
   83380:	ea56 0307 	orrs.w	r3, r6, r7
   83384:	d1eb      	bne.n	8335e <_vfiprintf_r+0x9de>
   83386:	e56e      	b.n	82e66 <_vfiprintf_r+0x4e6>
   83388:	9405      	str	r4, [sp, #20]
   8338a:	46d3      	mov	fp, sl
   8338c:	e450      	b.n	82c30 <_vfiprintf_r+0x2b0>
   8338e:	aa0f      	add	r2, sp, #60	; 0x3c
   83390:	9904      	ldr	r1, [sp, #16]
   83392:	9806      	ldr	r0, [sp, #24]
   83394:	f7ff fab4 	bl	82900 <__sprint_r.part.0>
   83398:	2800      	cmp	r0, #0
   8339a:	d1a8      	bne.n	832ee <_vfiprintf_r+0x96e>
   8339c:	46d1      	mov	r9, sl
   8339e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833a0:	e75e      	b.n	83260 <_vfiprintf_r+0x8e0>
   833a2:	aa0f      	add	r2, sp, #60	; 0x3c
   833a4:	9904      	ldr	r1, [sp, #16]
   833a6:	9806      	ldr	r0, [sp, #24]
   833a8:	f7ff faaa 	bl	82900 <__sprint_r.part.0>
   833ac:	2800      	cmp	r0, #0
   833ae:	d19e      	bne.n	832ee <_vfiprintf_r+0x96e>
   833b0:	46d1      	mov	r9, sl
   833b2:	f7ff bbbb 	b.w	82b2c <_vfiprintf_r+0x1ac>
   833b6:	bf00      	nop
   833b8:	00085410 	.word	0x00085410
   833bc:	00085400 	.word	0x00085400
   833c0:	3104      	adds	r1, #4
   833c2:	6816      	ldr	r6, [r2, #0]
   833c4:	2700      	movs	r7, #0
   833c6:	2201      	movs	r2, #1
   833c8:	9107      	str	r1, [sp, #28]
   833ca:	e412      	b.n	82bf2 <_vfiprintf_r+0x272>
   833cc:	9807      	ldr	r0, [sp, #28]
   833ce:	2700      	movs	r7, #0
   833d0:	4601      	mov	r1, r0
   833d2:	3104      	adds	r1, #4
   833d4:	6806      	ldr	r6, [r0, #0]
   833d6:	9107      	str	r1, [sp, #28]
   833d8:	e40b      	b.n	82bf2 <_vfiprintf_r+0x272>
   833da:	680e      	ldr	r6, [r1, #0]
   833dc:	3104      	adds	r1, #4
   833de:	9107      	str	r1, [sp, #28]
   833e0:	2700      	movs	r7, #0
   833e2:	e592      	b.n	82f0a <_vfiprintf_r+0x58a>
   833e4:	6816      	ldr	r6, [r2, #0]
   833e6:	3204      	adds	r2, #4
   833e8:	17f7      	asrs	r7, r6, #31
   833ea:	9207      	str	r2, [sp, #28]
   833ec:	4630      	mov	r0, r6
   833ee:	4639      	mov	r1, r7
   833f0:	e512      	b.n	82e18 <_vfiprintf_r+0x498>
   833f2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   833f6:	f000 fe75 	bl	840e4 <__retarget_lock_release_recursive>
   833fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   833fe:	e71b      	b.n	83238 <_vfiprintf_r+0x8b8>
   83400:	9b02      	ldr	r3, [sp, #8]
   83402:	9302      	str	r3, [sp, #8]
   83404:	2301      	movs	r3, #1
   83406:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   8340a:	3630      	adds	r6, #48	; 0x30
   8340c:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83410:	9305      	str	r3, [sp, #20]
   83412:	e40d      	b.n	82c30 <_vfiprintf_r+0x2b0>
   83414:	aa0f      	add	r2, sp, #60	; 0x3c
   83416:	9904      	ldr	r1, [sp, #16]
   83418:	9806      	ldr	r0, [sp, #24]
   8341a:	f7ff fa71 	bl	82900 <__sprint_r.part.0>
   8341e:	2800      	cmp	r0, #0
   83420:	f47f af65 	bne.w	832ee <_vfiprintf_r+0x96e>
   83424:	9910      	ldr	r1, [sp, #64]	; 0x40
   83426:	46d1      	mov	r9, sl
   83428:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8342a:	1c48      	adds	r0, r1, #1
   8342c:	e457      	b.n	82cde <_vfiprintf_r+0x35e>
   8342e:	aa0f      	add	r2, sp, #60	; 0x3c
   83430:	9904      	ldr	r1, [sp, #16]
   83432:	9806      	ldr	r0, [sp, #24]
   83434:	f7ff fa64 	bl	82900 <__sprint_r.part.0>
   83438:	2800      	cmp	r0, #0
   8343a:	f47f af58 	bne.w	832ee <_vfiprintf_r+0x96e>
   8343e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83440:	46d1      	mov	r9, sl
   83442:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83444:	1c48      	adds	r0, r1, #1
   83446:	e644      	b.n	830d2 <_vfiprintf_r+0x752>
   83448:	2a00      	cmp	r2, #0
   8344a:	f040 8087 	bne.w	8355c <_vfiprintf_r+0xbdc>
   8344e:	2001      	movs	r0, #1
   83450:	4611      	mov	r1, r2
   83452:	46d1      	mov	r9, sl
   83454:	e641      	b.n	830da <_vfiprintf_r+0x75a>
   83456:	aa0f      	add	r2, sp, #60	; 0x3c
   83458:	9904      	ldr	r1, [sp, #16]
   8345a:	9806      	ldr	r0, [sp, #24]
   8345c:	f7ff fa50 	bl	82900 <__sprint_r.part.0>
   83460:	2800      	cmp	r0, #0
   83462:	f47f af44 	bne.w	832ee <_vfiprintf_r+0x96e>
   83466:	9810      	ldr	r0, [sp, #64]	; 0x40
   83468:	46d1      	mov	r9, sl
   8346a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8346c:	3001      	adds	r0, #1
   8346e:	e668      	b.n	83142 <_vfiprintf_r+0x7c2>
   83470:	46cb      	mov	fp, r9
   83472:	e6d7      	b.n	83224 <_vfiprintf_r+0x8a4>
   83474:	9d07      	ldr	r5, [sp, #28]
   83476:	3507      	adds	r5, #7
   83478:	f025 0507 	bic.w	r5, r5, #7
   8347c:	f105 0208 	add.w	r2, r5, #8
   83480:	e9d5 0100 	ldrd	r0, r1, [r5]
   83484:	9207      	str	r2, [sp, #28]
   83486:	4606      	mov	r6, r0
   83488:	460f      	mov	r7, r1
   8348a:	e4c5      	b.n	82e18 <_vfiprintf_r+0x498>
   8348c:	9d07      	ldr	r5, [sp, #28]
   8348e:	3507      	adds	r5, #7
   83490:	f025 0207 	bic.w	r2, r5, #7
   83494:	f102 0108 	add.w	r1, r2, #8
   83498:	e9d2 6700 	ldrd	r6, r7, [r2]
   8349c:	9107      	str	r1, [sp, #28]
   8349e:	2201      	movs	r2, #1
   834a0:	f7ff bba7 	b.w	82bf2 <_vfiprintf_r+0x272>
   834a4:	9d07      	ldr	r5, [sp, #28]
   834a6:	3507      	adds	r5, #7
   834a8:	f025 0207 	bic.w	r2, r5, #7
   834ac:	f102 0108 	add.w	r1, r2, #8
   834b0:	e9d2 6700 	ldrd	r6, r7, [r2]
   834b4:	9107      	str	r1, [sp, #28]
   834b6:	2200      	movs	r2, #0
   834b8:	f7ff bb9b 	b.w	82bf2 <_vfiprintf_r+0x272>
   834bc:	9d07      	ldr	r5, [sp, #28]
   834be:	3507      	adds	r5, #7
   834c0:	f025 0107 	bic.w	r1, r5, #7
   834c4:	f101 0008 	add.w	r0, r1, #8
   834c8:	9007      	str	r0, [sp, #28]
   834ca:	e9d1 6700 	ldrd	r6, r7, [r1]
   834ce:	e51c      	b.n	82f0a <_vfiprintf_r+0x58a>
   834d0:	46d3      	mov	fp, sl
   834d2:	f7ff bbad 	b.w	82c30 <_vfiprintf_r+0x2b0>
   834d6:	252d      	movs	r5, #45	; 0x2d
   834d8:	4276      	negs	r6, r6
   834da:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   834de:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   834e2:	2201      	movs	r2, #1
   834e4:	f7ff bb8a 	b.w	82bfc <_vfiprintf_r+0x27c>
   834e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   834ea:	b9b3      	cbnz	r3, 8351a <_vfiprintf_r+0xb9a>
   834ec:	4611      	mov	r1, r2
   834ee:	2001      	movs	r0, #1
   834f0:	46d1      	mov	r9, sl
   834f2:	e5f2      	b.n	830da <_vfiprintf_r+0x75a>
   834f4:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   834f8:	f000 fdf4 	bl	840e4 <__retarget_lock_release_recursive>
   834fc:	f04f 33ff 	mov.w	r3, #4294967295
   83500:	9303      	str	r3, [sp, #12]
   83502:	f7ff bb4c 	b.w	82b9e <_vfiprintf_r+0x21e>
   83506:	aa0f      	add	r2, sp, #60	; 0x3c
   83508:	9904      	ldr	r1, [sp, #16]
   8350a:	9806      	ldr	r0, [sp, #24]
   8350c:	f7ff f9f8 	bl	82900 <__sprint_r.part.0>
   83510:	2800      	cmp	r0, #0
   83512:	f47f aeec 	bne.w	832ee <_vfiprintf_r+0x96e>
   83516:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83518:	e6aa      	b.n	83270 <_vfiprintf_r+0x8f0>
   8351a:	2202      	movs	r2, #2
   8351c:	ab0e      	add	r3, sp, #56	; 0x38
   8351e:	921d      	str	r2, [sp, #116]	; 0x74
   83520:	931c      	str	r3, [sp, #112]	; 0x70
   83522:	2001      	movs	r0, #1
   83524:	46d1      	mov	r9, sl
   83526:	e5d0      	b.n	830ca <_vfiprintf_r+0x74a>
   83528:	4d34      	ldr	r5, [pc, #208]	; (835fc <_vfiprintf_r+0xc7c>)
   8352a:	e5fd      	b.n	83128 <_vfiprintf_r+0x7a8>
   8352c:	9a07      	ldr	r2, [sp, #28]
   8352e:	4613      	mov	r3, r2
   83530:	3304      	adds	r3, #4
   83532:	9307      	str	r3, [sp, #28]
   83534:	9b03      	ldr	r3, [sp, #12]
   83536:	6811      	ldr	r1, [r2, #0]
   83538:	17dd      	asrs	r5, r3, #31
   8353a:	461a      	mov	r2, r3
   8353c:	462b      	mov	r3, r5
   8353e:	e9c1 2300 	strd	r2, r3, [r1]
   83542:	f7ff ba5a 	b.w	829fa <_vfiprintf_r+0x7a>
   83546:	4658      	mov	r0, fp
   83548:	9507      	str	r5, [sp, #28]
   8354a:	9302      	str	r3, [sp, #8]
   8354c:	f7ff f978 	bl	82840 <strlen>
   83550:	2400      	movs	r4, #0
   83552:	9005      	str	r0, [sp, #20]
   83554:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83558:	f7ff bb6a 	b.w	82c30 <_vfiprintf_r+0x2b0>
   8355c:	aa0f      	add	r2, sp, #60	; 0x3c
   8355e:	9904      	ldr	r1, [sp, #16]
   83560:	9806      	ldr	r0, [sp, #24]
   83562:	f7ff f9cd 	bl	82900 <__sprint_r.part.0>
   83566:	2800      	cmp	r0, #0
   83568:	f47f aec1 	bne.w	832ee <_vfiprintf_r+0x96e>
   8356c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8356e:	46d1      	mov	r9, sl
   83570:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83572:	1c48      	adds	r0, r1, #1
   83574:	e5b1      	b.n	830da <_vfiprintf_r+0x75a>
   83576:	9910      	ldr	r1, [sp, #64]	; 0x40
   83578:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8357a:	3101      	adds	r1, #1
   8357c:	4e20      	ldr	r6, [pc, #128]	; (83600 <_vfiprintf_r+0xc80>)
   8357e:	f7ff bb9c 	b.w	82cba <_vfiprintf_r+0x33a>
   83582:	2c06      	cmp	r4, #6
   83584:	bf28      	it	cs
   83586:	2406      	movcs	r4, #6
   83588:	9507      	str	r5, [sp, #28]
   8358a:	9405      	str	r4, [sp, #20]
   8358c:	9401      	str	r4, [sp, #4]
   8358e:	f8df b074 	ldr.w	fp, [pc, #116]	; 83604 <_vfiprintf_r+0xc84>
   83592:	e4e3      	b.n	82f5c <_vfiprintf_r+0x5dc>
   83594:	9810      	ldr	r0, [sp, #64]	; 0x40
   83596:	4e1a      	ldr	r6, [pc, #104]	; (83600 <_vfiprintf_r+0xc80>)
   83598:	3001      	adds	r0, #1
   8359a:	e60e      	b.n	831ba <_vfiprintf_r+0x83a>
   8359c:	4686      	mov	lr, r0
   8359e:	4d17      	ldr	r5, [pc, #92]	; (835fc <_vfiprintf_r+0xc7c>)
   835a0:	f7ff bbe2 	b.w	82d68 <_vfiprintf_r+0x3e8>
   835a4:	9405      	str	r4, [sp, #20]
   835a6:	9507      	str	r5, [sp, #28]
   835a8:	9302      	str	r3, [sp, #8]
   835aa:	4604      	mov	r4, r0
   835ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   835b0:	f7ff bb3e 	b.w	82c30 <_vfiprintf_r+0x2b0>
   835b4:	9806      	ldr	r0, [sp, #24]
   835b6:	aa0f      	add	r2, sp, #60	; 0x3c
   835b8:	4659      	mov	r1, fp
   835ba:	f7ff f9a1 	bl	82900 <__sprint_r.part.0>
   835be:	2800      	cmp	r0, #0
   835c0:	f43f ae2e 	beq.w	83220 <_vfiprintf_r+0x8a0>
   835c4:	e62e      	b.n	83224 <_vfiprintf_r+0x8a4>
   835c6:	9907      	ldr	r1, [sp, #28]
   835c8:	f898 2001 	ldrb.w	r2, [r8, #1]
   835cc:	680c      	ldr	r4, [r1, #0]
   835ce:	3104      	adds	r1, #4
   835d0:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   835d4:	46b8      	mov	r8, r7
   835d6:	9107      	str	r1, [sp, #28]
   835d8:	f7ff ba44 	b.w	82a64 <_vfiprintf_r+0xe4>
   835dc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835e0:	e4a7      	b.n	82f32 <_vfiprintf_r+0x5b2>
   835e2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835e6:	e521      	b.n	8302c <_vfiprintf_r+0x6ac>
   835e8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835ec:	e47c      	b.n	82ee8 <_vfiprintf_r+0x568>
   835ee:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835f2:	e43f      	b.n	82e74 <_vfiprintf_r+0x4f4>
   835f4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   835f8:	f7ff bbfa 	b.w	82df0 <_vfiprintf_r+0x470>
   835fc:	00085410 	.word	0x00085410
   83600:	00085400 	.word	0x00085400
   83604:	000853f8 	.word	0x000853f8

00083608 <__sbprintf>:
   83608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8360c:	460c      	mov	r4, r1
   8360e:	f04f 0e00 	mov.w	lr, #0
   83612:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83616:	4606      	mov	r6, r0
   83618:	4617      	mov	r7, r2
   8361a:	4698      	mov	r8, r3
   8361c:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8361e:	89e3      	ldrh	r3, [r4, #14]
   83620:	8989      	ldrh	r1, [r1, #12]
   83622:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83626:	f021 0102 	bic.w	r1, r1, #2
   8362a:	9219      	str	r2, [sp, #100]	; 0x64
   8362c:	f8ad 300e 	strh.w	r3, [sp, #14]
   83630:	69e2      	ldr	r2, [r4, #28]
   83632:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83634:	f8ad 100c 	strh.w	r1, [sp, #12]
   83638:	a816      	add	r0, sp, #88	; 0x58
   8363a:	a91a      	add	r1, sp, #104	; 0x68
   8363c:	f8cd e018 	str.w	lr, [sp, #24]
   83640:	9207      	str	r2, [sp, #28]
   83642:	9309      	str	r3, [sp, #36]	; 0x24
   83644:	9100      	str	r1, [sp, #0]
   83646:	9104      	str	r1, [sp, #16]
   83648:	9502      	str	r5, [sp, #8]
   8364a:	9505      	str	r5, [sp, #20]
   8364c:	f000 fd44 	bl	840d8 <__retarget_lock_init_recursive>
   83650:	4643      	mov	r3, r8
   83652:	463a      	mov	r2, r7
   83654:	4669      	mov	r1, sp
   83656:	4630      	mov	r0, r6
   83658:	f7ff f992 	bl	82980 <_vfiprintf_r>
   8365c:	1e05      	subs	r5, r0, #0
   8365e:	db07      	blt.n	83670 <__sbprintf+0x68>
   83660:	4630      	mov	r0, r6
   83662:	4669      	mov	r1, sp
   83664:	f000 f924 	bl	838b0 <_fflush_r>
   83668:	2800      	cmp	r0, #0
   8366a:	bf18      	it	ne
   8366c:	f04f 35ff 	movne.w	r5, #4294967295
   83670:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83674:	065b      	lsls	r3, r3, #25
   83676:	d503      	bpl.n	83680 <__sbprintf+0x78>
   83678:	89a3      	ldrh	r3, [r4, #12]
   8367a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8367e:	81a3      	strh	r3, [r4, #12]
   83680:	9816      	ldr	r0, [sp, #88]	; 0x58
   83682:	f000 fd2b 	bl	840dc <__retarget_lock_close_recursive>
   83686:	4628      	mov	r0, r5
   83688:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   8368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083690 <__swsetup_r>:
   83690:	b538      	push	{r3, r4, r5, lr}
   83692:	4b30      	ldr	r3, [pc, #192]	; (83754 <__swsetup_r+0xc4>)
   83694:	4605      	mov	r5, r0
   83696:	6818      	ldr	r0, [r3, #0]
   83698:	460c      	mov	r4, r1
   8369a:	b110      	cbz	r0, 836a2 <__swsetup_r+0x12>
   8369c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8369e:	2b00      	cmp	r3, #0
   836a0:	d038      	beq.n	83714 <__swsetup_r+0x84>
   836a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   836a6:	b293      	uxth	r3, r2
   836a8:	0718      	lsls	r0, r3, #28
   836aa:	d50c      	bpl.n	836c6 <__swsetup_r+0x36>
   836ac:	6920      	ldr	r0, [r4, #16]
   836ae:	b1a8      	cbz	r0, 836dc <__swsetup_r+0x4c>
   836b0:	f013 0201 	ands.w	r2, r3, #1
   836b4:	d01e      	beq.n	836f4 <__swsetup_r+0x64>
   836b6:	2200      	movs	r2, #0
   836b8:	6963      	ldr	r3, [r4, #20]
   836ba:	60a2      	str	r2, [r4, #8]
   836bc:	425b      	negs	r3, r3
   836be:	61a3      	str	r3, [r4, #24]
   836c0:	b1f0      	cbz	r0, 83700 <__swsetup_r+0x70>
   836c2:	2000      	movs	r0, #0
   836c4:	bd38      	pop	{r3, r4, r5, pc}
   836c6:	06d9      	lsls	r1, r3, #27
   836c8:	d53b      	bpl.n	83742 <__swsetup_r+0xb2>
   836ca:	0758      	lsls	r0, r3, #29
   836cc:	d425      	bmi.n	8371a <__swsetup_r+0x8a>
   836ce:	6920      	ldr	r0, [r4, #16]
   836d0:	f042 0308 	orr.w	r3, r2, #8
   836d4:	81a3      	strh	r3, [r4, #12]
   836d6:	b29b      	uxth	r3, r3
   836d8:	2800      	cmp	r0, #0
   836da:	d1e9      	bne.n	836b0 <__swsetup_r+0x20>
   836dc:	f403 7220 	and.w	r2, r3, #640	; 0x280
   836e0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   836e4:	d0e4      	beq.n	836b0 <__swsetup_r+0x20>
   836e6:	4628      	mov	r0, r5
   836e8:	4621      	mov	r1, r4
   836ea:	f000 fd2b 	bl	84144 <__smakebuf_r>
   836ee:	89a3      	ldrh	r3, [r4, #12]
   836f0:	6920      	ldr	r0, [r4, #16]
   836f2:	e7dd      	b.n	836b0 <__swsetup_r+0x20>
   836f4:	0799      	lsls	r1, r3, #30
   836f6:	bf58      	it	pl
   836f8:	6962      	ldrpl	r2, [r4, #20]
   836fa:	60a2      	str	r2, [r4, #8]
   836fc:	2800      	cmp	r0, #0
   836fe:	d1e0      	bne.n	836c2 <__swsetup_r+0x32>
   83700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83704:	061a      	lsls	r2, r3, #24
   83706:	d5dd      	bpl.n	836c4 <__swsetup_r+0x34>
   83708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8370c:	81a3      	strh	r3, [r4, #12]
   8370e:	f04f 30ff 	mov.w	r0, #4294967295
   83712:	bd38      	pop	{r3, r4, r5, pc}
   83714:	f000 f924 	bl	83960 <__sinit>
   83718:	e7c3      	b.n	836a2 <__swsetup_r+0x12>
   8371a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8371c:	b151      	cbz	r1, 83734 <__swsetup_r+0xa4>
   8371e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83722:	4299      	cmp	r1, r3
   83724:	d004      	beq.n	83730 <__swsetup_r+0xa0>
   83726:	4628      	mov	r0, r5
   83728:	f000 fa40 	bl	83bac <_free_r>
   8372c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83730:	2300      	movs	r3, #0
   83732:	6323      	str	r3, [r4, #48]	; 0x30
   83734:	2300      	movs	r3, #0
   83736:	6920      	ldr	r0, [r4, #16]
   83738:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   8373c:	e884 0009 	stmia.w	r4, {r0, r3}
   83740:	e7c6      	b.n	836d0 <__swsetup_r+0x40>
   83742:	2309      	movs	r3, #9
   83744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83748:	602b      	str	r3, [r5, #0]
   8374a:	f04f 30ff 	mov.w	r0, #4294967295
   8374e:	81a2      	strh	r2, [r4, #12]
   83750:	bd38      	pop	{r3, r4, r5, pc}
   83752:	bf00      	nop
   83754:	20070140 	.word	0x20070140

00083758 <register_fini>:
   83758:	4b02      	ldr	r3, [pc, #8]	; (83764 <register_fini+0xc>)
   8375a:	b113      	cbz	r3, 83762 <register_fini+0xa>
   8375c:	4802      	ldr	r0, [pc, #8]	; (83768 <register_fini+0x10>)
   8375e:	f000 b805 	b.w	8376c <atexit>
   83762:	4770      	bx	lr
   83764:	00000000 	.word	0x00000000
   83768:	000839d9 	.word	0x000839d9

0008376c <atexit>:
   8376c:	2300      	movs	r3, #0
   8376e:	4601      	mov	r1, r0
   83770:	461a      	mov	r2, r3
   83772:	4618      	mov	r0, r3
   83774:	f001 bb56 	b.w	84e24 <__register_exitproc>

00083778 <__sflush_r>:
   83778:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8377c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83780:	b29a      	uxth	r2, r3
   83782:	460d      	mov	r5, r1
   83784:	0711      	lsls	r1, r2, #28
   83786:	4680      	mov	r8, r0
   83788:	d43a      	bmi.n	83800 <__sflush_r+0x88>
   8378a:	686a      	ldr	r2, [r5, #4]
   8378c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83790:	2a00      	cmp	r2, #0
   83792:	81ab      	strh	r3, [r5, #12]
   83794:	dd70      	ble.n	83878 <__sflush_r+0x100>
   83796:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83798:	2c00      	cmp	r4, #0
   8379a:	d04a      	beq.n	83832 <__sflush_r+0xba>
   8379c:	2200      	movs	r2, #0
   8379e:	b29b      	uxth	r3, r3
   837a0:	f8d8 6000 	ldr.w	r6, [r8]
   837a4:	f8c8 2000 	str.w	r2, [r8]
   837a8:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   837ac:	d068      	beq.n	83880 <__sflush_r+0x108>
   837ae:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   837b0:	075f      	lsls	r7, r3, #29
   837b2:	d505      	bpl.n	837c0 <__sflush_r+0x48>
   837b4:	6869      	ldr	r1, [r5, #4]
   837b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   837b8:	1a52      	subs	r2, r2, r1
   837ba:	b10b      	cbz	r3, 837c0 <__sflush_r+0x48>
   837bc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   837be:	1ad2      	subs	r2, r2, r3
   837c0:	2300      	movs	r3, #0
   837c2:	69e9      	ldr	r1, [r5, #28]
   837c4:	4640      	mov	r0, r8
   837c6:	47a0      	blx	r4
   837c8:	1c44      	adds	r4, r0, #1
   837ca:	d03d      	beq.n	83848 <__sflush_r+0xd0>
   837cc:	2100      	movs	r1, #0
   837ce:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   837d2:	692a      	ldr	r2, [r5, #16]
   837d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   837d8:	81ab      	strh	r3, [r5, #12]
   837da:	04db      	lsls	r3, r3, #19
   837dc:	6069      	str	r1, [r5, #4]
   837de:	602a      	str	r2, [r5, #0]
   837e0:	d448      	bmi.n	83874 <__sflush_r+0xfc>
   837e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   837e4:	f8c8 6000 	str.w	r6, [r8]
   837e8:	b319      	cbz	r1, 83832 <__sflush_r+0xba>
   837ea:	f105 0340 	add.w	r3, r5, #64	; 0x40
   837ee:	4299      	cmp	r1, r3
   837f0:	d002      	beq.n	837f8 <__sflush_r+0x80>
   837f2:	4640      	mov	r0, r8
   837f4:	f000 f9da 	bl	83bac <_free_r>
   837f8:	2000      	movs	r0, #0
   837fa:	6328      	str	r0, [r5, #48]	; 0x30
   837fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83800:	692e      	ldr	r6, [r5, #16]
   83802:	b1b6      	cbz	r6, 83832 <__sflush_r+0xba>
   83804:	0791      	lsls	r1, r2, #30
   83806:	bf18      	it	ne
   83808:	2300      	movne	r3, #0
   8380a:	682c      	ldr	r4, [r5, #0]
   8380c:	bf08      	it	eq
   8380e:	696b      	ldreq	r3, [r5, #20]
   83810:	602e      	str	r6, [r5, #0]
   83812:	1ba4      	subs	r4, r4, r6
   83814:	60ab      	str	r3, [r5, #8]
   83816:	e00a      	b.n	8382e <__sflush_r+0xb6>
   83818:	4623      	mov	r3, r4
   8381a:	4632      	mov	r2, r6
   8381c:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8381e:	69e9      	ldr	r1, [r5, #28]
   83820:	4640      	mov	r0, r8
   83822:	47b8      	blx	r7
   83824:	2800      	cmp	r0, #0
   83826:	eba4 0400 	sub.w	r4, r4, r0
   8382a:	4406      	add	r6, r0
   8382c:	dd04      	ble.n	83838 <__sflush_r+0xc0>
   8382e:	2c00      	cmp	r4, #0
   83830:	dcf2      	bgt.n	83818 <__sflush_r+0xa0>
   83832:	2000      	movs	r0, #0
   83834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83838:	89ab      	ldrh	r3, [r5, #12]
   8383a:	f04f 30ff 	mov.w	r0, #4294967295
   8383e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83842:	81ab      	strh	r3, [r5, #12]
   83844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83848:	f8d8 4000 	ldr.w	r4, [r8]
   8384c:	2c1d      	cmp	r4, #29
   8384e:	d8f3      	bhi.n	83838 <__sflush_r+0xc0>
   83850:	4b16      	ldr	r3, [pc, #88]	; (838ac <__sflush_r+0x134>)
   83852:	40e3      	lsrs	r3, r4
   83854:	43db      	mvns	r3, r3
   83856:	f013 0301 	ands.w	r3, r3, #1
   8385a:	d1ed      	bne.n	83838 <__sflush_r+0xc0>
   8385c:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83860:	6929      	ldr	r1, [r5, #16]
   83862:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83866:	81aa      	strh	r2, [r5, #12]
   83868:	04d2      	lsls	r2, r2, #19
   8386a:	606b      	str	r3, [r5, #4]
   8386c:	6029      	str	r1, [r5, #0]
   8386e:	d5b8      	bpl.n	837e2 <__sflush_r+0x6a>
   83870:	2c00      	cmp	r4, #0
   83872:	d1b6      	bne.n	837e2 <__sflush_r+0x6a>
   83874:	6528      	str	r0, [r5, #80]	; 0x50
   83876:	e7b4      	b.n	837e2 <__sflush_r+0x6a>
   83878:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8387a:	2a00      	cmp	r2, #0
   8387c:	dc8b      	bgt.n	83796 <__sflush_r+0x1e>
   8387e:	e7d8      	b.n	83832 <__sflush_r+0xba>
   83880:	2301      	movs	r3, #1
   83882:	69e9      	ldr	r1, [r5, #28]
   83884:	4640      	mov	r0, r8
   83886:	47a0      	blx	r4
   83888:	1c43      	adds	r3, r0, #1
   8388a:	4602      	mov	r2, r0
   8388c:	d002      	beq.n	83894 <__sflush_r+0x11c>
   8388e:	89ab      	ldrh	r3, [r5, #12]
   83890:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83892:	e78d      	b.n	837b0 <__sflush_r+0x38>
   83894:	f8d8 3000 	ldr.w	r3, [r8]
   83898:	2b00      	cmp	r3, #0
   8389a:	d0f8      	beq.n	8388e <__sflush_r+0x116>
   8389c:	2b1d      	cmp	r3, #29
   8389e:	d001      	beq.n	838a4 <__sflush_r+0x12c>
   838a0:	2b16      	cmp	r3, #22
   838a2:	d1c9      	bne.n	83838 <__sflush_r+0xc0>
   838a4:	f8c8 6000 	str.w	r6, [r8]
   838a8:	e7c3      	b.n	83832 <__sflush_r+0xba>
   838aa:	bf00      	nop
   838ac:	20400001 	.word	0x20400001

000838b0 <_fflush_r>:
   838b0:	b538      	push	{r3, r4, r5, lr}
   838b2:	460d      	mov	r5, r1
   838b4:	4604      	mov	r4, r0
   838b6:	b108      	cbz	r0, 838bc <_fflush_r+0xc>
   838b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   838ba:	b1bb      	cbz	r3, 838ec <_fflush_r+0x3c>
   838bc:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   838c0:	b188      	cbz	r0, 838e6 <_fflush_r+0x36>
   838c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   838c4:	07db      	lsls	r3, r3, #31
   838c6:	d401      	bmi.n	838cc <_fflush_r+0x1c>
   838c8:	0581      	lsls	r1, r0, #22
   838ca:	d517      	bpl.n	838fc <_fflush_r+0x4c>
   838cc:	4620      	mov	r0, r4
   838ce:	4629      	mov	r1, r5
   838d0:	f7ff ff52 	bl	83778 <__sflush_r>
   838d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   838d6:	4604      	mov	r4, r0
   838d8:	07da      	lsls	r2, r3, #31
   838da:	d402      	bmi.n	838e2 <_fflush_r+0x32>
   838dc:	89ab      	ldrh	r3, [r5, #12]
   838de:	059b      	lsls	r3, r3, #22
   838e0:	d507      	bpl.n	838f2 <_fflush_r+0x42>
   838e2:	4620      	mov	r0, r4
   838e4:	bd38      	pop	{r3, r4, r5, pc}
   838e6:	4604      	mov	r4, r0
   838e8:	4620      	mov	r0, r4
   838ea:	bd38      	pop	{r3, r4, r5, pc}
   838ec:	f000 f838 	bl	83960 <__sinit>
   838f0:	e7e4      	b.n	838bc <_fflush_r+0xc>
   838f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
   838f4:	f000 fbf6 	bl	840e4 <__retarget_lock_release_recursive>
   838f8:	4620      	mov	r0, r4
   838fa:	bd38      	pop	{r3, r4, r5, pc}
   838fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
   838fe:	f000 fbef 	bl	840e0 <__retarget_lock_acquire_recursive>
   83902:	e7e3      	b.n	838cc <_fflush_r+0x1c>

00083904 <_cleanup_r>:
   83904:	4901      	ldr	r1, [pc, #4]	; (8390c <_cleanup_r+0x8>)
   83906:	f000 bbb1 	b.w	8406c <_fwalk_reent>
   8390a:	bf00      	nop
   8390c:	00084f0d 	.word	0x00084f0d

00083910 <std.isra.0>:
   83910:	2300      	movs	r3, #0
   83912:	b510      	push	{r4, lr}
   83914:	4604      	mov	r4, r0
   83916:	8181      	strh	r1, [r0, #12]
   83918:	81c2      	strh	r2, [r0, #14]
   8391a:	6003      	str	r3, [r0, #0]
   8391c:	6043      	str	r3, [r0, #4]
   8391e:	6083      	str	r3, [r0, #8]
   83920:	6643      	str	r3, [r0, #100]	; 0x64
   83922:	6103      	str	r3, [r0, #16]
   83924:	6143      	str	r3, [r0, #20]
   83926:	6183      	str	r3, [r0, #24]
   83928:	4619      	mov	r1, r3
   8392a:	2208      	movs	r2, #8
   8392c:	305c      	adds	r0, #92	; 0x5c
   8392e:	f7fe fe69 	bl	82604 <memset>
   83932:	4807      	ldr	r0, [pc, #28]	; (83950 <std.isra.0+0x40>)
   83934:	4907      	ldr	r1, [pc, #28]	; (83954 <std.isra.0+0x44>)
   83936:	4a08      	ldr	r2, [pc, #32]	; (83958 <std.isra.0+0x48>)
   83938:	4b08      	ldr	r3, [pc, #32]	; (8395c <std.isra.0+0x4c>)
   8393a:	6220      	str	r0, [r4, #32]
   8393c:	61e4      	str	r4, [r4, #28]
   8393e:	6261      	str	r1, [r4, #36]	; 0x24
   83940:	62a2      	str	r2, [r4, #40]	; 0x28
   83942:	62e3      	str	r3, [r4, #44]	; 0x2c
   83944:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8394c:	f000 bbc4 	b.w	840d8 <__retarget_lock_init_recursive>
   83950:	00084c55 	.word	0x00084c55
   83954:	00084c79 	.word	0x00084c79
   83958:	00084cb5 	.word	0x00084cb5
   8395c:	00084cd5 	.word	0x00084cd5

00083960 <__sinit>:
   83960:	b510      	push	{r4, lr}
   83962:	4604      	mov	r4, r0
   83964:	4814      	ldr	r0, [pc, #80]	; (839b8 <__sinit+0x58>)
   83966:	f000 fbbb 	bl	840e0 <__retarget_lock_acquire_recursive>
   8396a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   8396c:	b9fa      	cbnz	r2, 839ae <__sinit+0x4e>
   8396e:	2003      	movs	r0, #3
   83970:	4912      	ldr	r1, [pc, #72]	; (839bc <__sinit+0x5c>)
   83972:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83976:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8397a:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   8397e:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83982:	63e1      	str	r1, [r4, #60]	; 0x3c
   83984:	6860      	ldr	r0, [r4, #4]
   83986:	2104      	movs	r1, #4
   83988:	f7ff ffc2 	bl	83910 <std.isra.0>
   8398c:	68a0      	ldr	r0, [r4, #8]
   8398e:	2201      	movs	r2, #1
   83990:	2109      	movs	r1, #9
   83992:	f7ff ffbd 	bl	83910 <std.isra.0>
   83996:	68e0      	ldr	r0, [r4, #12]
   83998:	2202      	movs	r2, #2
   8399a:	2112      	movs	r1, #18
   8399c:	f7ff ffb8 	bl	83910 <std.isra.0>
   839a0:	2301      	movs	r3, #1
   839a2:	4805      	ldr	r0, [pc, #20]	; (839b8 <__sinit+0x58>)
   839a4:	63a3      	str	r3, [r4, #56]	; 0x38
   839a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   839aa:	f000 bb9b 	b.w	840e4 <__retarget_lock_release_recursive>
   839ae:	4802      	ldr	r0, [pc, #8]	; (839b8 <__sinit+0x58>)
   839b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   839b4:	f000 bb96 	b.w	840e4 <__retarget_lock_release_recursive>
   839b8:	2007ad14 	.word	0x2007ad14
   839bc:	00083905 	.word	0x00083905

000839c0 <__sfp_lock_acquire>:
   839c0:	4801      	ldr	r0, [pc, #4]	; (839c8 <__sfp_lock_acquire+0x8>)
   839c2:	f000 bb8d 	b.w	840e0 <__retarget_lock_acquire_recursive>
   839c6:	bf00      	nop
   839c8:	2007ad28 	.word	0x2007ad28

000839cc <__sfp_lock_release>:
   839cc:	4801      	ldr	r0, [pc, #4]	; (839d4 <__sfp_lock_release+0x8>)
   839ce:	f000 bb89 	b.w	840e4 <__retarget_lock_release_recursive>
   839d2:	bf00      	nop
   839d4:	2007ad28 	.word	0x2007ad28

000839d8 <__libc_fini_array>:
   839d8:	b538      	push	{r3, r4, r5, lr}
   839da:	4c0a      	ldr	r4, [pc, #40]	; (83a04 <__libc_fini_array+0x2c>)
   839dc:	4d0a      	ldr	r5, [pc, #40]	; (83a08 <__libc_fini_array+0x30>)
   839de:	1b64      	subs	r4, r4, r5
   839e0:	10a4      	asrs	r4, r4, #2
   839e2:	d00a      	beq.n	839fa <__libc_fini_array+0x22>
   839e4:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   839e8:	3b01      	subs	r3, #1
   839ea:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   839ee:	3c01      	subs	r4, #1
   839f0:	f855 3904 	ldr.w	r3, [r5], #-4
   839f4:	4798      	blx	r3
   839f6:	2c00      	cmp	r4, #0
   839f8:	d1f9      	bne.n	839ee <__libc_fini_array+0x16>
   839fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   839fe:	f001 bda3 	b.w	85548 <_fini>
   83a02:	bf00      	nop
   83a04:	00085558 	.word	0x00085558
   83a08:	00085554 	.word	0x00085554

00083a0c <__fputwc>:
   83a0c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83a10:	b083      	sub	sp, #12
   83a12:	4607      	mov	r7, r0
   83a14:	4688      	mov	r8, r1
   83a16:	4614      	mov	r4, r2
   83a18:	f000 fb50 	bl	840bc <__locale_mb_cur_max>
   83a1c:	2801      	cmp	r0, #1
   83a1e:	d033      	beq.n	83a88 <__fputwc+0x7c>
   83a20:	4642      	mov	r2, r8
   83a22:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83a26:	a901      	add	r1, sp, #4
   83a28:	4638      	mov	r0, r7
   83a2a:	f001 f9af 	bl	84d8c <_wcrtomb_r>
   83a2e:	1c42      	adds	r2, r0, #1
   83a30:	4606      	mov	r6, r0
   83a32:	d022      	beq.n	83a7a <__fputwc+0x6e>
   83a34:	b390      	cbz	r0, 83a9c <__fputwc+0x90>
   83a36:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83a3a:	2500      	movs	r5, #0
   83a3c:	f10d 0904 	add.w	r9, sp, #4
   83a40:	e008      	b.n	83a54 <__fputwc+0x48>
   83a42:	6823      	ldr	r3, [r4, #0]
   83a44:	1c5a      	adds	r2, r3, #1
   83a46:	6022      	str	r2, [r4, #0]
   83a48:	7019      	strb	r1, [r3, #0]
   83a4a:	3501      	adds	r5, #1
   83a4c:	42b5      	cmp	r5, r6
   83a4e:	d225      	bcs.n	83a9c <__fputwc+0x90>
   83a50:	f815 1009 	ldrb.w	r1, [r5, r9]
   83a54:	68a3      	ldr	r3, [r4, #8]
   83a56:	3b01      	subs	r3, #1
   83a58:	2b00      	cmp	r3, #0
   83a5a:	60a3      	str	r3, [r4, #8]
   83a5c:	daf1      	bge.n	83a42 <__fputwc+0x36>
   83a5e:	69a2      	ldr	r2, [r4, #24]
   83a60:	4293      	cmp	r3, r2
   83a62:	db01      	blt.n	83a68 <__fputwc+0x5c>
   83a64:	290a      	cmp	r1, #10
   83a66:	d1ec      	bne.n	83a42 <__fputwc+0x36>
   83a68:	4622      	mov	r2, r4
   83a6a:	4638      	mov	r0, r7
   83a6c:	f001 f936 	bl	84cdc <__swbuf_r>
   83a70:	1c43      	adds	r3, r0, #1
   83a72:	d1ea      	bne.n	83a4a <__fputwc+0x3e>
   83a74:	b003      	add	sp, #12
   83a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a7a:	89a3      	ldrh	r3, [r4, #12]
   83a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83a80:	81a3      	strh	r3, [r4, #12]
   83a82:	b003      	add	sp, #12
   83a84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83a88:	f108 33ff 	add.w	r3, r8, #4294967295
   83a8c:	2bfe      	cmp	r3, #254	; 0xfe
   83a8e:	d8c7      	bhi.n	83a20 <__fputwc+0x14>
   83a90:	fa5f f188 	uxtb.w	r1, r8
   83a94:	4606      	mov	r6, r0
   83a96:	f88d 1004 	strb.w	r1, [sp, #4]
   83a9a:	e7ce      	b.n	83a3a <__fputwc+0x2e>
   83a9c:	4640      	mov	r0, r8
   83a9e:	b003      	add	sp, #12
   83aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083aa4 <_fputwc_r>:
   83aa4:	b530      	push	{r4, r5, lr}
   83aa6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83aa8:	4614      	mov	r4, r2
   83aaa:	f013 0f01 	tst.w	r3, #1
   83aae:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83ab2:	b083      	sub	sp, #12
   83ab4:	4605      	mov	r5, r0
   83ab6:	b29a      	uxth	r2, r3
   83ab8:	d101      	bne.n	83abe <_fputwc_r+0x1a>
   83aba:	0590      	lsls	r0, r2, #22
   83abc:	d51c      	bpl.n	83af8 <_fputwc_r+0x54>
   83abe:	0490      	lsls	r0, r2, #18
   83ac0:	d406      	bmi.n	83ad0 <_fputwc_r+0x2c>
   83ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83acc:	81a3      	strh	r3, [r4, #12]
   83ace:	6662      	str	r2, [r4, #100]	; 0x64
   83ad0:	4628      	mov	r0, r5
   83ad2:	4622      	mov	r2, r4
   83ad4:	f7ff ff9a 	bl	83a0c <__fputwc>
   83ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83ada:	4605      	mov	r5, r0
   83adc:	07da      	lsls	r2, r3, #31
   83ade:	d402      	bmi.n	83ae6 <_fputwc_r+0x42>
   83ae0:	89a3      	ldrh	r3, [r4, #12]
   83ae2:	059b      	lsls	r3, r3, #22
   83ae4:	d502      	bpl.n	83aec <_fputwc_r+0x48>
   83ae6:	4628      	mov	r0, r5
   83ae8:	b003      	add	sp, #12
   83aea:	bd30      	pop	{r4, r5, pc}
   83aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83aee:	f000 faf9 	bl	840e4 <__retarget_lock_release_recursive>
   83af2:	4628      	mov	r0, r5
   83af4:	b003      	add	sp, #12
   83af6:	bd30      	pop	{r4, r5, pc}
   83af8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83afa:	9101      	str	r1, [sp, #4]
   83afc:	f000 faf0 	bl	840e0 <__retarget_lock_acquire_recursive>
   83b00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b04:	9901      	ldr	r1, [sp, #4]
   83b06:	b29a      	uxth	r2, r3
   83b08:	e7d9      	b.n	83abe <_fputwc_r+0x1a>
   83b0a:	bf00      	nop

00083b0c <_malloc_trim_r>:
   83b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b0e:	460c      	mov	r4, r1
   83b10:	4f23      	ldr	r7, [pc, #140]	; (83ba0 <_malloc_trim_r+0x94>)
   83b12:	4606      	mov	r6, r0
   83b14:	f000 feca 	bl	848ac <__malloc_lock>
   83b18:	68bb      	ldr	r3, [r7, #8]
   83b1a:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83b1e:	685d      	ldr	r5, [r3, #4]
   83b20:	310f      	adds	r1, #15
   83b22:	f025 0503 	bic.w	r5, r5, #3
   83b26:	4429      	add	r1, r5
   83b28:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83b2c:	f021 010f 	bic.w	r1, r1, #15
   83b30:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83b34:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83b38:	db07      	blt.n	83b4a <_malloc_trim_r+0x3e>
   83b3a:	2100      	movs	r1, #0
   83b3c:	4630      	mov	r0, r6
   83b3e:	f001 f877 	bl	84c30 <_sbrk_r>
   83b42:	68bb      	ldr	r3, [r7, #8]
   83b44:	442b      	add	r3, r5
   83b46:	4298      	cmp	r0, r3
   83b48:	d004      	beq.n	83b54 <_malloc_trim_r+0x48>
   83b4a:	4630      	mov	r0, r6
   83b4c:	f000 feb4 	bl	848b8 <__malloc_unlock>
   83b50:	2000      	movs	r0, #0
   83b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b54:	4261      	negs	r1, r4
   83b56:	4630      	mov	r0, r6
   83b58:	f001 f86a 	bl	84c30 <_sbrk_r>
   83b5c:	3001      	adds	r0, #1
   83b5e:	d00d      	beq.n	83b7c <_malloc_trim_r+0x70>
   83b60:	4b10      	ldr	r3, [pc, #64]	; (83ba4 <_malloc_trim_r+0x98>)
   83b62:	68ba      	ldr	r2, [r7, #8]
   83b64:	6819      	ldr	r1, [r3, #0]
   83b66:	1b2d      	subs	r5, r5, r4
   83b68:	f045 0501 	orr.w	r5, r5, #1
   83b6c:	4630      	mov	r0, r6
   83b6e:	1b09      	subs	r1, r1, r4
   83b70:	6055      	str	r5, [r2, #4]
   83b72:	6019      	str	r1, [r3, #0]
   83b74:	f000 fea0 	bl	848b8 <__malloc_unlock>
   83b78:	2001      	movs	r0, #1
   83b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83b7c:	2100      	movs	r1, #0
   83b7e:	4630      	mov	r0, r6
   83b80:	f001 f856 	bl	84c30 <_sbrk_r>
   83b84:	68ba      	ldr	r2, [r7, #8]
   83b86:	1a83      	subs	r3, r0, r2
   83b88:	2b0f      	cmp	r3, #15
   83b8a:	ddde      	ble.n	83b4a <_malloc_trim_r+0x3e>
   83b8c:	4c06      	ldr	r4, [pc, #24]	; (83ba8 <_malloc_trim_r+0x9c>)
   83b8e:	4905      	ldr	r1, [pc, #20]	; (83ba4 <_malloc_trim_r+0x98>)
   83b90:	6824      	ldr	r4, [r4, #0]
   83b92:	f043 0301 	orr.w	r3, r3, #1
   83b96:	1b00      	subs	r0, r0, r4
   83b98:	6053      	str	r3, [r2, #4]
   83b9a:	6008      	str	r0, [r1, #0]
   83b9c:	e7d5      	b.n	83b4a <_malloc_trim_r+0x3e>
   83b9e:	bf00      	nop
   83ba0:	200706e0 	.word	0x200706e0
   83ba4:	2007acc8 	.word	0x2007acc8
   83ba8:	20070ae8 	.word	0x20070ae8

00083bac <_free_r>:
   83bac:	2900      	cmp	r1, #0
   83bae:	d044      	beq.n	83c3a <_free_r+0x8e>
   83bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bb4:	460d      	mov	r5, r1
   83bb6:	4680      	mov	r8, r0
   83bb8:	f000 fe78 	bl	848ac <__malloc_lock>
   83bbc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83bc0:	4969      	ldr	r1, [pc, #420]	; (83d68 <_free_r+0x1bc>)
   83bc2:	f1a5 0408 	sub.w	r4, r5, #8
   83bc6:	f027 0301 	bic.w	r3, r7, #1
   83bca:	18e2      	adds	r2, r4, r3
   83bcc:	688e      	ldr	r6, [r1, #8]
   83bce:	6850      	ldr	r0, [r2, #4]
   83bd0:	42b2      	cmp	r2, r6
   83bd2:	f020 0003 	bic.w	r0, r0, #3
   83bd6:	d05e      	beq.n	83c96 <_free_r+0xea>
   83bd8:	07fe      	lsls	r6, r7, #31
   83bda:	6050      	str	r0, [r2, #4]
   83bdc:	d40b      	bmi.n	83bf6 <_free_r+0x4a>
   83bde:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83be2:	f101 0e08 	add.w	lr, r1, #8
   83be6:	1be4      	subs	r4, r4, r7
   83be8:	68a5      	ldr	r5, [r4, #8]
   83bea:	443b      	add	r3, r7
   83bec:	4575      	cmp	r5, lr
   83bee:	d06d      	beq.n	83ccc <_free_r+0x120>
   83bf0:	68e7      	ldr	r7, [r4, #12]
   83bf2:	60ef      	str	r7, [r5, #12]
   83bf4:	60bd      	str	r5, [r7, #8]
   83bf6:	1815      	adds	r5, r2, r0
   83bf8:	686d      	ldr	r5, [r5, #4]
   83bfa:	07ed      	lsls	r5, r5, #31
   83bfc:	d53e      	bpl.n	83c7c <_free_r+0xd0>
   83bfe:	f043 0201 	orr.w	r2, r3, #1
   83c02:	6062      	str	r2, [r4, #4]
   83c04:	50e3      	str	r3, [r4, r3]
   83c06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83c0a:	d217      	bcs.n	83c3c <_free_r+0x90>
   83c0c:	2201      	movs	r2, #1
   83c0e:	08db      	lsrs	r3, r3, #3
   83c10:	1098      	asrs	r0, r3, #2
   83c12:	684d      	ldr	r5, [r1, #4]
   83c14:	4413      	add	r3, r2
   83c16:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83c1a:	4082      	lsls	r2, r0
   83c1c:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83c20:	432a      	orrs	r2, r5
   83c22:	3808      	subs	r0, #8
   83c24:	60e0      	str	r0, [r4, #12]
   83c26:	60a7      	str	r7, [r4, #8]
   83c28:	604a      	str	r2, [r1, #4]
   83c2a:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83c2e:	60fc      	str	r4, [r7, #12]
   83c30:	4640      	mov	r0, r8
   83c32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83c36:	f000 be3f 	b.w	848b8 <__malloc_unlock>
   83c3a:	4770      	bx	lr
   83c3c:	0a5a      	lsrs	r2, r3, #9
   83c3e:	2a04      	cmp	r2, #4
   83c40:	d852      	bhi.n	83ce8 <_free_r+0x13c>
   83c42:	099a      	lsrs	r2, r3, #6
   83c44:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83c48:	00ff      	lsls	r7, r7, #3
   83c4a:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83c4e:	19c8      	adds	r0, r1, r7
   83c50:	59ca      	ldr	r2, [r1, r7]
   83c52:	3808      	subs	r0, #8
   83c54:	4290      	cmp	r0, r2
   83c56:	d04f      	beq.n	83cf8 <_free_r+0x14c>
   83c58:	6851      	ldr	r1, [r2, #4]
   83c5a:	f021 0103 	bic.w	r1, r1, #3
   83c5e:	428b      	cmp	r3, r1
   83c60:	d232      	bcs.n	83cc8 <_free_r+0x11c>
   83c62:	6892      	ldr	r2, [r2, #8]
   83c64:	4290      	cmp	r0, r2
   83c66:	d1f7      	bne.n	83c58 <_free_r+0xac>
   83c68:	68c3      	ldr	r3, [r0, #12]
   83c6a:	60a0      	str	r0, [r4, #8]
   83c6c:	60e3      	str	r3, [r4, #12]
   83c6e:	609c      	str	r4, [r3, #8]
   83c70:	60c4      	str	r4, [r0, #12]
   83c72:	4640      	mov	r0, r8
   83c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83c78:	f000 be1e 	b.w	848b8 <__malloc_unlock>
   83c7c:	6895      	ldr	r5, [r2, #8]
   83c7e:	4f3b      	ldr	r7, [pc, #236]	; (83d6c <_free_r+0x1c0>)
   83c80:	4403      	add	r3, r0
   83c82:	42bd      	cmp	r5, r7
   83c84:	d040      	beq.n	83d08 <_free_r+0x15c>
   83c86:	68d0      	ldr	r0, [r2, #12]
   83c88:	f043 0201 	orr.w	r2, r3, #1
   83c8c:	60e8      	str	r0, [r5, #12]
   83c8e:	6085      	str	r5, [r0, #8]
   83c90:	6062      	str	r2, [r4, #4]
   83c92:	50e3      	str	r3, [r4, r3]
   83c94:	e7b7      	b.n	83c06 <_free_r+0x5a>
   83c96:	07ff      	lsls	r7, r7, #31
   83c98:	4403      	add	r3, r0
   83c9a:	d407      	bmi.n	83cac <_free_r+0x100>
   83c9c:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83ca0:	1b64      	subs	r4, r4, r5
   83ca2:	68e2      	ldr	r2, [r4, #12]
   83ca4:	68a0      	ldr	r0, [r4, #8]
   83ca6:	442b      	add	r3, r5
   83ca8:	60c2      	str	r2, [r0, #12]
   83caa:	6090      	str	r0, [r2, #8]
   83cac:	4a30      	ldr	r2, [pc, #192]	; (83d70 <_free_r+0x1c4>)
   83cae:	f043 0001 	orr.w	r0, r3, #1
   83cb2:	6812      	ldr	r2, [r2, #0]
   83cb4:	6060      	str	r0, [r4, #4]
   83cb6:	4293      	cmp	r3, r2
   83cb8:	608c      	str	r4, [r1, #8]
   83cba:	d3b9      	bcc.n	83c30 <_free_r+0x84>
   83cbc:	4b2d      	ldr	r3, [pc, #180]	; (83d74 <_free_r+0x1c8>)
   83cbe:	4640      	mov	r0, r8
   83cc0:	6819      	ldr	r1, [r3, #0]
   83cc2:	f7ff ff23 	bl	83b0c <_malloc_trim_r>
   83cc6:	e7b3      	b.n	83c30 <_free_r+0x84>
   83cc8:	4610      	mov	r0, r2
   83cca:	e7cd      	b.n	83c68 <_free_r+0xbc>
   83ccc:	1811      	adds	r1, r2, r0
   83cce:	6849      	ldr	r1, [r1, #4]
   83cd0:	07c9      	lsls	r1, r1, #31
   83cd2:	d444      	bmi.n	83d5e <_free_r+0x1b2>
   83cd4:	6891      	ldr	r1, [r2, #8]
   83cd6:	4403      	add	r3, r0
   83cd8:	68d2      	ldr	r2, [r2, #12]
   83cda:	f043 0001 	orr.w	r0, r3, #1
   83cde:	60ca      	str	r2, [r1, #12]
   83ce0:	6091      	str	r1, [r2, #8]
   83ce2:	6060      	str	r0, [r4, #4]
   83ce4:	50e3      	str	r3, [r4, r3]
   83ce6:	e7a3      	b.n	83c30 <_free_r+0x84>
   83ce8:	2a14      	cmp	r2, #20
   83cea:	d816      	bhi.n	83d1a <_free_r+0x16e>
   83cec:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83cf0:	00ff      	lsls	r7, r7, #3
   83cf2:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83cf6:	e7aa      	b.n	83c4e <_free_r+0xa2>
   83cf8:	2301      	movs	r3, #1
   83cfa:	10aa      	asrs	r2, r5, #2
   83cfc:	684d      	ldr	r5, [r1, #4]
   83cfe:	4093      	lsls	r3, r2
   83d00:	432b      	orrs	r3, r5
   83d02:	604b      	str	r3, [r1, #4]
   83d04:	4603      	mov	r3, r0
   83d06:	e7b0      	b.n	83c6a <_free_r+0xbe>
   83d08:	f043 0201 	orr.w	r2, r3, #1
   83d0c:	614c      	str	r4, [r1, #20]
   83d0e:	610c      	str	r4, [r1, #16]
   83d10:	60e5      	str	r5, [r4, #12]
   83d12:	60a5      	str	r5, [r4, #8]
   83d14:	6062      	str	r2, [r4, #4]
   83d16:	50e3      	str	r3, [r4, r3]
   83d18:	e78a      	b.n	83c30 <_free_r+0x84>
   83d1a:	2a54      	cmp	r2, #84	; 0x54
   83d1c:	d806      	bhi.n	83d2c <_free_r+0x180>
   83d1e:	0b1a      	lsrs	r2, r3, #12
   83d20:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83d24:	00ff      	lsls	r7, r7, #3
   83d26:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83d2a:	e790      	b.n	83c4e <_free_r+0xa2>
   83d2c:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83d30:	d806      	bhi.n	83d40 <_free_r+0x194>
   83d32:	0bda      	lsrs	r2, r3, #15
   83d34:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83d38:	00ff      	lsls	r7, r7, #3
   83d3a:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83d3e:	e786      	b.n	83c4e <_free_r+0xa2>
   83d40:	f240 5054 	movw	r0, #1364	; 0x554
   83d44:	4282      	cmp	r2, r0
   83d46:	d806      	bhi.n	83d56 <_free_r+0x1aa>
   83d48:	0c9a      	lsrs	r2, r3, #18
   83d4a:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83d4e:	00ff      	lsls	r7, r7, #3
   83d50:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83d54:	e77b      	b.n	83c4e <_free_r+0xa2>
   83d56:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83d5a:	257e      	movs	r5, #126	; 0x7e
   83d5c:	e777      	b.n	83c4e <_free_r+0xa2>
   83d5e:	f043 0101 	orr.w	r1, r3, #1
   83d62:	6061      	str	r1, [r4, #4]
   83d64:	6013      	str	r3, [r2, #0]
   83d66:	e763      	b.n	83c30 <_free_r+0x84>
   83d68:	200706e0 	.word	0x200706e0
   83d6c:	200706e8 	.word	0x200706e8
   83d70:	20070aec 	.word	0x20070aec
   83d74:	2007acf8 	.word	0x2007acf8

00083d78 <__sfvwrite_r>:
   83d78:	6893      	ldr	r3, [r2, #8]
   83d7a:	2b00      	cmp	r3, #0
   83d7c:	d071      	beq.n	83e62 <__sfvwrite_r+0xea>
   83d7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83d82:	898b      	ldrh	r3, [r1, #12]
   83d84:	b083      	sub	sp, #12
   83d86:	460c      	mov	r4, r1
   83d88:	0719      	lsls	r1, r3, #28
   83d8a:	9000      	str	r0, [sp, #0]
   83d8c:	4616      	mov	r6, r2
   83d8e:	d525      	bpl.n	83ddc <__sfvwrite_r+0x64>
   83d90:	6922      	ldr	r2, [r4, #16]
   83d92:	b31a      	cbz	r2, 83ddc <__sfvwrite_r+0x64>
   83d94:	f013 0002 	ands.w	r0, r3, #2
   83d98:	6835      	ldr	r5, [r6, #0]
   83d9a:	d02b      	beq.n	83df4 <__sfvwrite_r+0x7c>
   83d9c:	f04f 0900 	mov.w	r9, #0
   83da0:	46b0      	mov	r8, r6
   83da2:	464f      	mov	r7, r9
   83da4:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 84068 <__sfvwrite_r+0x2f0>
   83da8:	2f00      	cmp	r7, #0
   83daa:	d055      	beq.n	83e58 <__sfvwrite_r+0xe0>
   83dac:	4557      	cmp	r7, sl
   83dae:	463b      	mov	r3, r7
   83db0:	464a      	mov	r2, r9
   83db2:	bf28      	it	cs
   83db4:	4653      	movcs	r3, sl
   83db6:	69e1      	ldr	r1, [r4, #28]
   83db8:	9800      	ldr	r0, [sp, #0]
   83dba:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83dbc:	47b0      	blx	r6
   83dbe:	2800      	cmp	r0, #0
   83dc0:	dd56      	ble.n	83e70 <__sfvwrite_r+0xf8>
   83dc2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83dc6:	4481      	add	r9, r0
   83dc8:	1a1b      	subs	r3, r3, r0
   83dca:	1a3f      	subs	r7, r7, r0
   83dcc:	f8c8 3008 	str.w	r3, [r8, #8]
   83dd0:	2b00      	cmp	r3, #0
   83dd2:	d1e9      	bne.n	83da8 <__sfvwrite_r+0x30>
   83dd4:	2000      	movs	r0, #0
   83dd6:	b003      	add	sp, #12
   83dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ddc:	4621      	mov	r1, r4
   83dde:	9800      	ldr	r0, [sp, #0]
   83de0:	f7ff fc56 	bl	83690 <__swsetup_r>
   83de4:	2800      	cmp	r0, #0
   83de6:	f040 8135 	bne.w	84054 <__sfvwrite_r+0x2dc>
   83dea:	89a3      	ldrh	r3, [r4, #12]
   83dec:	6835      	ldr	r5, [r6, #0]
   83dee:	f013 0002 	ands.w	r0, r3, #2
   83df2:	d1d3      	bne.n	83d9c <__sfvwrite_r+0x24>
   83df4:	f013 0901 	ands.w	r9, r3, #1
   83df8:	d144      	bne.n	83e84 <__sfvwrite_r+0x10c>
   83dfa:	464f      	mov	r7, r9
   83dfc:	9601      	str	r6, [sp, #4]
   83dfe:	b337      	cbz	r7, 83e4e <__sfvwrite_r+0xd6>
   83e00:	059a      	lsls	r2, r3, #22
   83e02:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83e06:	f140 8085 	bpl.w	83f14 <__sfvwrite_r+0x19c>
   83e0a:	4547      	cmp	r7, r8
   83e0c:	46c3      	mov	fp, r8
   83e0e:	f0c0 80ad 	bcc.w	83f6c <__sfvwrite_r+0x1f4>
   83e12:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83e16:	f040 80ae 	bne.w	83f76 <__sfvwrite_r+0x1fe>
   83e1a:	46ba      	mov	sl, r7
   83e1c:	6820      	ldr	r0, [r4, #0]
   83e1e:	465a      	mov	r2, fp
   83e20:	4649      	mov	r1, r9
   83e22:	f000 fcdf 	bl	847e4 <memmove>
   83e26:	68a2      	ldr	r2, [r4, #8]
   83e28:	6823      	ldr	r3, [r4, #0]
   83e2a:	eba2 0208 	sub.w	r2, r2, r8
   83e2e:	445b      	add	r3, fp
   83e30:	60a2      	str	r2, [r4, #8]
   83e32:	6023      	str	r3, [r4, #0]
   83e34:	9a01      	ldr	r2, [sp, #4]
   83e36:	44d1      	add	r9, sl
   83e38:	6893      	ldr	r3, [r2, #8]
   83e3a:	eba7 070a 	sub.w	r7, r7, sl
   83e3e:	eba3 030a 	sub.w	r3, r3, sl
   83e42:	6093      	str	r3, [r2, #8]
   83e44:	2b00      	cmp	r3, #0
   83e46:	d0c5      	beq.n	83dd4 <__sfvwrite_r+0x5c>
   83e48:	89a3      	ldrh	r3, [r4, #12]
   83e4a:	2f00      	cmp	r7, #0
   83e4c:	d1d8      	bne.n	83e00 <__sfvwrite_r+0x88>
   83e4e:	f8d5 9000 	ldr.w	r9, [r5]
   83e52:	686f      	ldr	r7, [r5, #4]
   83e54:	3508      	adds	r5, #8
   83e56:	e7d2      	b.n	83dfe <__sfvwrite_r+0x86>
   83e58:	f8d5 9000 	ldr.w	r9, [r5]
   83e5c:	686f      	ldr	r7, [r5, #4]
   83e5e:	3508      	adds	r5, #8
   83e60:	e7a2      	b.n	83da8 <__sfvwrite_r+0x30>
   83e62:	2000      	movs	r0, #0
   83e64:	4770      	bx	lr
   83e66:	4621      	mov	r1, r4
   83e68:	9800      	ldr	r0, [sp, #0]
   83e6a:	f7ff fd21 	bl	838b0 <_fflush_r>
   83e6e:	b378      	cbz	r0, 83ed0 <__sfvwrite_r+0x158>
   83e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e74:	f04f 30ff 	mov.w	r0, #4294967295
   83e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e7c:	81a3      	strh	r3, [r4, #12]
   83e7e:	b003      	add	sp, #12
   83e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83e84:	4681      	mov	r9, r0
   83e86:	4633      	mov	r3, r6
   83e88:	464e      	mov	r6, r9
   83e8a:	46a8      	mov	r8, r5
   83e8c:	469a      	mov	sl, r3
   83e8e:	464d      	mov	r5, r9
   83e90:	b356      	cbz	r6, 83ee8 <__sfvwrite_r+0x170>
   83e92:	2800      	cmp	r0, #0
   83e94:	d032      	beq.n	83efc <__sfvwrite_r+0x184>
   83e96:	45b1      	cmp	r9, r6
   83e98:	46cb      	mov	fp, r9
   83e9a:	bf28      	it	cs
   83e9c:	46b3      	movcs	fp, r6
   83e9e:	6820      	ldr	r0, [r4, #0]
   83ea0:	6923      	ldr	r3, [r4, #16]
   83ea2:	465f      	mov	r7, fp
   83ea4:	4298      	cmp	r0, r3
   83ea6:	6962      	ldr	r2, [r4, #20]
   83ea8:	d904      	bls.n	83eb4 <__sfvwrite_r+0x13c>
   83eaa:	68a3      	ldr	r3, [r4, #8]
   83eac:	4413      	add	r3, r2
   83eae:	459b      	cmp	fp, r3
   83eb0:	f300 80a8 	bgt.w	84004 <__sfvwrite_r+0x28c>
   83eb4:	4593      	cmp	fp, r2
   83eb6:	db4d      	blt.n	83f54 <__sfvwrite_r+0x1dc>
   83eb8:	4613      	mov	r3, r2
   83eba:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83ebc:	462a      	mov	r2, r5
   83ebe:	69e1      	ldr	r1, [r4, #28]
   83ec0:	9800      	ldr	r0, [sp, #0]
   83ec2:	47b8      	blx	r7
   83ec4:	1e07      	subs	r7, r0, #0
   83ec6:	ddd3      	ble.n	83e70 <__sfvwrite_r+0xf8>
   83ec8:	ebb9 0907 	subs.w	r9, r9, r7
   83ecc:	d0cb      	beq.n	83e66 <__sfvwrite_r+0xee>
   83ece:	2001      	movs	r0, #1
   83ed0:	f8da 3008 	ldr.w	r3, [sl, #8]
   83ed4:	443d      	add	r5, r7
   83ed6:	1bdb      	subs	r3, r3, r7
   83ed8:	1bf6      	subs	r6, r6, r7
   83eda:	f8ca 3008 	str.w	r3, [sl, #8]
   83ede:	2b00      	cmp	r3, #0
   83ee0:	f43f af78 	beq.w	83dd4 <__sfvwrite_r+0x5c>
   83ee4:	2e00      	cmp	r6, #0
   83ee6:	d1d4      	bne.n	83e92 <__sfvwrite_r+0x11a>
   83ee8:	f108 0308 	add.w	r3, r8, #8
   83eec:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83ef0:	4698      	mov	r8, r3
   83ef2:	f853 5c08 	ldr.w	r5, [r3, #-8]
   83ef6:	3308      	adds	r3, #8
   83ef8:	2e00      	cmp	r6, #0
   83efa:	d0f7      	beq.n	83eec <__sfvwrite_r+0x174>
   83efc:	4632      	mov	r2, r6
   83efe:	210a      	movs	r1, #10
   83f00:	4628      	mov	r0, r5
   83f02:	f000 fc29 	bl	84758 <memchr>
   83f06:	2800      	cmp	r0, #0
   83f08:	f000 80a1 	beq.w	8404e <__sfvwrite_r+0x2d6>
   83f0c:	3001      	adds	r0, #1
   83f0e:	eba0 0905 	sub.w	r9, r0, r5
   83f12:	e7c0      	b.n	83e96 <__sfvwrite_r+0x11e>
   83f14:	6820      	ldr	r0, [r4, #0]
   83f16:	6923      	ldr	r3, [r4, #16]
   83f18:	4298      	cmp	r0, r3
   83f1a:	d802      	bhi.n	83f22 <__sfvwrite_r+0x1aa>
   83f1c:	6963      	ldr	r3, [r4, #20]
   83f1e:	429f      	cmp	r7, r3
   83f20:	d25d      	bcs.n	83fde <__sfvwrite_r+0x266>
   83f22:	45b8      	cmp	r8, r7
   83f24:	bf28      	it	cs
   83f26:	46b8      	movcs	r8, r7
   83f28:	4649      	mov	r1, r9
   83f2a:	4642      	mov	r2, r8
   83f2c:	f000 fc5a 	bl	847e4 <memmove>
   83f30:	68a3      	ldr	r3, [r4, #8]
   83f32:	6822      	ldr	r2, [r4, #0]
   83f34:	eba3 0308 	sub.w	r3, r3, r8
   83f38:	4442      	add	r2, r8
   83f3a:	60a3      	str	r3, [r4, #8]
   83f3c:	6022      	str	r2, [r4, #0]
   83f3e:	b10b      	cbz	r3, 83f44 <__sfvwrite_r+0x1cc>
   83f40:	46c2      	mov	sl, r8
   83f42:	e777      	b.n	83e34 <__sfvwrite_r+0xbc>
   83f44:	4621      	mov	r1, r4
   83f46:	9800      	ldr	r0, [sp, #0]
   83f48:	f7ff fcb2 	bl	838b0 <_fflush_r>
   83f4c:	2800      	cmp	r0, #0
   83f4e:	d18f      	bne.n	83e70 <__sfvwrite_r+0xf8>
   83f50:	46c2      	mov	sl, r8
   83f52:	e76f      	b.n	83e34 <__sfvwrite_r+0xbc>
   83f54:	465a      	mov	r2, fp
   83f56:	4629      	mov	r1, r5
   83f58:	f000 fc44 	bl	847e4 <memmove>
   83f5c:	68a2      	ldr	r2, [r4, #8]
   83f5e:	6823      	ldr	r3, [r4, #0]
   83f60:	eba2 020b 	sub.w	r2, r2, fp
   83f64:	445b      	add	r3, fp
   83f66:	60a2      	str	r2, [r4, #8]
   83f68:	6023      	str	r3, [r4, #0]
   83f6a:	e7ad      	b.n	83ec8 <__sfvwrite_r+0x150>
   83f6c:	46b8      	mov	r8, r7
   83f6e:	46ba      	mov	sl, r7
   83f70:	46bb      	mov	fp, r7
   83f72:	6820      	ldr	r0, [r4, #0]
   83f74:	e753      	b.n	83e1e <__sfvwrite_r+0xa6>
   83f76:	6962      	ldr	r2, [r4, #20]
   83f78:	6820      	ldr	r0, [r4, #0]
   83f7a:	6921      	ldr	r1, [r4, #16]
   83f7c:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83f80:	eba0 0a01 	sub.w	sl, r0, r1
   83f84:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   83f88:	f10a 0001 	add.w	r0, sl, #1
   83f8c:	ea4f 0868 	mov.w	r8, r8, asr #1
   83f90:	4438      	add	r0, r7
   83f92:	4540      	cmp	r0, r8
   83f94:	4642      	mov	r2, r8
   83f96:	bf84      	itt	hi
   83f98:	4680      	movhi	r8, r0
   83f9a:	4642      	movhi	r2, r8
   83f9c:	055b      	lsls	r3, r3, #21
   83f9e:	d544      	bpl.n	8402a <__sfvwrite_r+0x2b2>
   83fa0:	4611      	mov	r1, r2
   83fa2:	9800      	ldr	r0, [sp, #0]
   83fa4:	f000 f920 	bl	841e8 <_malloc_r>
   83fa8:	4683      	mov	fp, r0
   83faa:	2800      	cmp	r0, #0
   83fac:	d055      	beq.n	8405a <__sfvwrite_r+0x2e2>
   83fae:	4652      	mov	r2, sl
   83fb0:	6921      	ldr	r1, [r4, #16]
   83fb2:	f7fe fab1 	bl	82518 <memcpy>
   83fb6:	89a3      	ldrh	r3, [r4, #12]
   83fb8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83fc0:	81a3      	strh	r3, [r4, #12]
   83fc2:	eb0b 000a 	add.w	r0, fp, sl
   83fc6:	eba8 030a 	sub.w	r3, r8, sl
   83fca:	f8c4 b010 	str.w	fp, [r4, #16]
   83fce:	f8c4 8014 	str.w	r8, [r4, #20]
   83fd2:	6020      	str	r0, [r4, #0]
   83fd4:	60a3      	str	r3, [r4, #8]
   83fd6:	46b8      	mov	r8, r7
   83fd8:	46ba      	mov	sl, r7
   83fda:	46bb      	mov	fp, r7
   83fdc:	e71f      	b.n	83e1e <__sfvwrite_r+0xa6>
   83fde:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83fe2:	42ba      	cmp	r2, r7
   83fe4:	bf28      	it	cs
   83fe6:	463a      	movcs	r2, r7
   83fe8:	fb92 f2f3 	sdiv	r2, r2, r3
   83fec:	69e1      	ldr	r1, [r4, #28]
   83fee:	fb03 f302 	mul.w	r3, r3, r2
   83ff2:	9800      	ldr	r0, [sp, #0]
   83ff4:	464a      	mov	r2, r9
   83ff6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83ff8:	47b0      	blx	r6
   83ffa:	f1b0 0a00 	subs.w	sl, r0, #0
   83ffe:	f73f af19 	bgt.w	83e34 <__sfvwrite_r+0xbc>
   84002:	e735      	b.n	83e70 <__sfvwrite_r+0xf8>
   84004:	461a      	mov	r2, r3
   84006:	4629      	mov	r1, r5
   84008:	9301      	str	r3, [sp, #4]
   8400a:	f000 fbeb 	bl	847e4 <memmove>
   8400e:	6822      	ldr	r2, [r4, #0]
   84010:	9b01      	ldr	r3, [sp, #4]
   84012:	4621      	mov	r1, r4
   84014:	441a      	add	r2, r3
   84016:	6022      	str	r2, [r4, #0]
   84018:	9800      	ldr	r0, [sp, #0]
   8401a:	f7ff fc49 	bl	838b0 <_fflush_r>
   8401e:	9b01      	ldr	r3, [sp, #4]
   84020:	2800      	cmp	r0, #0
   84022:	f47f af25 	bne.w	83e70 <__sfvwrite_r+0xf8>
   84026:	461f      	mov	r7, r3
   84028:	e74e      	b.n	83ec8 <__sfvwrite_r+0x150>
   8402a:	9800      	ldr	r0, [sp, #0]
   8402c:	f000 fc4a 	bl	848c4 <_realloc_r>
   84030:	4683      	mov	fp, r0
   84032:	2800      	cmp	r0, #0
   84034:	d1c5      	bne.n	83fc2 <__sfvwrite_r+0x24a>
   84036:	9d00      	ldr	r5, [sp, #0]
   84038:	6921      	ldr	r1, [r4, #16]
   8403a:	4628      	mov	r0, r5
   8403c:	f7ff fdb6 	bl	83bac <_free_r>
   84040:	220c      	movs	r2, #12
   84042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84046:	602a      	str	r2, [r5, #0]
   84048:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8404c:	e712      	b.n	83e74 <__sfvwrite_r+0xfc>
   8404e:	f106 0901 	add.w	r9, r6, #1
   84052:	e720      	b.n	83e96 <__sfvwrite_r+0x11e>
   84054:	f04f 30ff 	mov.w	r0, #4294967295
   84058:	e6bd      	b.n	83dd6 <__sfvwrite_r+0x5e>
   8405a:	220c      	movs	r2, #12
   8405c:	9900      	ldr	r1, [sp, #0]
   8405e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84062:	600a      	str	r2, [r1, #0]
   84064:	e706      	b.n	83e74 <__sfvwrite_r+0xfc>
   84066:	bf00      	nop
   84068:	7ffffc00 	.word	0x7ffffc00

0008406c <_fwalk_reent>:
   8406c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84070:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   84074:	d01e      	beq.n	840b4 <_fwalk_reent+0x48>
   84076:	4688      	mov	r8, r1
   84078:	4607      	mov	r7, r0
   8407a:	f04f 0900 	mov.w	r9, #0
   8407e:	6875      	ldr	r5, [r6, #4]
   84080:	68b4      	ldr	r4, [r6, #8]
   84082:	3d01      	subs	r5, #1
   84084:	d410      	bmi.n	840a8 <_fwalk_reent+0x3c>
   84086:	89a3      	ldrh	r3, [r4, #12]
   84088:	3d01      	subs	r5, #1
   8408a:	2b01      	cmp	r3, #1
   8408c:	d908      	bls.n	840a0 <_fwalk_reent+0x34>
   8408e:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   84092:	3301      	adds	r3, #1
   84094:	d004      	beq.n	840a0 <_fwalk_reent+0x34>
   84096:	4621      	mov	r1, r4
   84098:	4638      	mov	r0, r7
   8409a:	47c0      	blx	r8
   8409c:	ea49 0900 	orr.w	r9, r9, r0
   840a0:	1c6b      	adds	r3, r5, #1
   840a2:	f104 0468 	add.w	r4, r4, #104	; 0x68
   840a6:	d1ee      	bne.n	84086 <_fwalk_reent+0x1a>
   840a8:	6836      	ldr	r6, [r6, #0]
   840aa:	2e00      	cmp	r6, #0
   840ac:	d1e7      	bne.n	8407e <_fwalk_reent+0x12>
   840ae:	4648      	mov	r0, r9
   840b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   840b4:	46b1      	mov	r9, r6
   840b6:	4648      	mov	r0, r9
   840b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000840bc <__locale_mb_cur_max>:
   840bc:	4b04      	ldr	r3, [pc, #16]	; (840d0 <__locale_mb_cur_max+0x14>)
   840be:	4a05      	ldr	r2, [pc, #20]	; (840d4 <__locale_mb_cur_max+0x18>)
   840c0:	681b      	ldr	r3, [r3, #0]
   840c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   840c4:	2b00      	cmp	r3, #0
   840c6:	bf08      	it	eq
   840c8:	4613      	moveq	r3, r2
   840ca:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   840ce:	4770      	bx	lr
   840d0:	20070140 	.word	0x20070140
   840d4:	20070574 	.word	0x20070574

000840d8 <__retarget_lock_init_recursive>:
   840d8:	4770      	bx	lr
   840da:	bf00      	nop

000840dc <__retarget_lock_close_recursive>:
   840dc:	4770      	bx	lr
   840de:	bf00      	nop

000840e0 <__retarget_lock_acquire_recursive>:
   840e0:	4770      	bx	lr
   840e2:	bf00      	nop

000840e4 <__retarget_lock_release_recursive>:
   840e4:	4770      	bx	lr
   840e6:	bf00      	nop

000840e8 <__swhatbuf_r>:
   840e8:	b570      	push	{r4, r5, r6, lr}
   840ea:	460c      	mov	r4, r1
   840ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   840f0:	b090      	sub	sp, #64	; 0x40
   840f2:	2900      	cmp	r1, #0
   840f4:	4615      	mov	r5, r2
   840f6:	461e      	mov	r6, r3
   840f8:	db14      	blt.n	84124 <__swhatbuf_r+0x3c>
   840fa:	aa01      	add	r2, sp, #4
   840fc:	f000 ff68 	bl	84fd0 <_fstat_r>
   84100:	2800      	cmp	r0, #0
   84102:	db0f      	blt.n	84124 <__swhatbuf_r+0x3c>
   84104:	9a02      	ldr	r2, [sp, #8]
   84106:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8410a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   8410e:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   84112:	fab2 f282 	clz	r2, r2
   84116:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8411a:	0952      	lsrs	r2, r2, #5
   8411c:	6032      	str	r2, [r6, #0]
   8411e:	602b      	str	r3, [r5, #0]
   84120:	b010      	add	sp, #64	; 0x40
   84122:	bd70      	pop	{r4, r5, r6, pc}
   84124:	2300      	movs	r3, #0
   84126:	89a2      	ldrh	r2, [r4, #12]
   84128:	6033      	str	r3, [r6, #0]
   8412a:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   8412e:	d004      	beq.n	8413a <__swhatbuf_r+0x52>
   84130:	2240      	movs	r2, #64	; 0x40
   84132:	4618      	mov	r0, r3
   84134:	602a      	str	r2, [r5, #0]
   84136:	b010      	add	sp, #64	; 0x40
   84138:	bd70      	pop	{r4, r5, r6, pc}
   8413a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8413e:	602b      	str	r3, [r5, #0]
   84140:	b010      	add	sp, #64	; 0x40
   84142:	bd70      	pop	{r4, r5, r6, pc}

00084144 <__smakebuf_r>:
   84144:	898a      	ldrh	r2, [r1, #12]
   84146:	460b      	mov	r3, r1
   84148:	0792      	lsls	r2, r2, #30
   8414a:	d506      	bpl.n	8415a <__smakebuf_r+0x16>
   8414c:	2101      	movs	r1, #1
   8414e:	f103 0243 	add.w	r2, r3, #67	; 0x43
   84152:	6159      	str	r1, [r3, #20]
   84154:	601a      	str	r2, [r3, #0]
   84156:	611a      	str	r2, [r3, #16]
   84158:	4770      	bx	lr
   8415a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8415c:	b083      	sub	sp, #12
   8415e:	ab01      	add	r3, sp, #4
   84160:	466a      	mov	r2, sp
   84162:	460c      	mov	r4, r1
   84164:	4606      	mov	r6, r0
   84166:	f7ff ffbf 	bl	840e8 <__swhatbuf_r>
   8416a:	9900      	ldr	r1, [sp, #0]
   8416c:	4605      	mov	r5, r0
   8416e:	4630      	mov	r0, r6
   84170:	f000 f83a 	bl	841e8 <_malloc_r>
   84174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84178:	b1d8      	cbz	r0, 841b2 <__smakebuf_r+0x6e>
   8417a:	e89d 0006 	ldmia.w	sp, {r1, r2}
   8417e:	4f15      	ldr	r7, [pc, #84]	; (841d4 <__smakebuf_r+0x90>)
   84180:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84184:	63f7      	str	r7, [r6, #60]	; 0x3c
   84186:	81a3      	strh	r3, [r4, #12]
   84188:	6020      	str	r0, [r4, #0]
   8418a:	6120      	str	r0, [r4, #16]
   8418c:	6161      	str	r1, [r4, #20]
   8418e:	b91a      	cbnz	r2, 84198 <__smakebuf_r+0x54>
   84190:	432b      	orrs	r3, r5
   84192:	81a3      	strh	r3, [r4, #12]
   84194:	b003      	add	sp, #12
   84196:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84198:	4630      	mov	r0, r6
   8419a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8419e:	f000 ff2b 	bl	84ff8 <_isatty_r>
   841a2:	b1a0      	cbz	r0, 841ce <__smakebuf_r+0x8a>
   841a4:	89a3      	ldrh	r3, [r4, #12]
   841a6:	f023 0303 	bic.w	r3, r3, #3
   841aa:	f043 0301 	orr.w	r3, r3, #1
   841ae:	b21b      	sxth	r3, r3
   841b0:	e7ee      	b.n	84190 <__smakebuf_r+0x4c>
   841b2:	059a      	lsls	r2, r3, #22
   841b4:	d4ee      	bmi.n	84194 <__smakebuf_r+0x50>
   841b6:	2101      	movs	r1, #1
   841b8:	f023 0303 	bic.w	r3, r3, #3
   841bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   841c0:	f043 0302 	orr.w	r3, r3, #2
   841c4:	81a3      	strh	r3, [r4, #12]
   841c6:	6161      	str	r1, [r4, #20]
   841c8:	6022      	str	r2, [r4, #0]
   841ca:	6122      	str	r2, [r4, #16]
   841cc:	e7e2      	b.n	84194 <__smakebuf_r+0x50>
   841ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841d2:	e7dd      	b.n	84190 <__smakebuf_r+0x4c>
   841d4:	00083905 	.word	0x00083905

000841d8 <malloc>:
   841d8:	4b02      	ldr	r3, [pc, #8]	; (841e4 <malloc+0xc>)
   841da:	4601      	mov	r1, r0
   841dc:	6818      	ldr	r0, [r3, #0]
   841de:	f000 b803 	b.w	841e8 <_malloc_r>
   841e2:	bf00      	nop
   841e4:	20070140 	.word	0x20070140

000841e8 <_malloc_r>:
   841e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   841ec:	f101 060b 	add.w	r6, r1, #11
   841f0:	2e16      	cmp	r6, #22
   841f2:	b083      	sub	sp, #12
   841f4:	4605      	mov	r5, r0
   841f6:	f240 809e 	bls.w	84336 <_malloc_r+0x14e>
   841fa:	f036 0607 	bics.w	r6, r6, #7
   841fe:	f100 80bd 	bmi.w	8437c <_malloc_r+0x194>
   84202:	42b1      	cmp	r1, r6
   84204:	f200 80ba 	bhi.w	8437c <_malloc_r+0x194>
   84208:	f000 fb50 	bl	848ac <__malloc_lock>
   8420c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84210:	f0c0 8285 	bcc.w	8471e <_malloc_r+0x536>
   84214:	0a73      	lsrs	r3, r6, #9
   84216:	f000 80b8 	beq.w	8438a <_malloc_r+0x1a2>
   8421a:	2b04      	cmp	r3, #4
   8421c:	f200 816c 	bhi.w	844f8 <_malloc_r+0x310>
   84220:	09b3      	lsrs	r3, r6, #6
   84222:	f103 0039 	add.w	r0, r3, #57	; 0x39
   84226:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   8422a:	00c1      	lsls	r1, r0, #3
   8422c:	4fb8      	ldr	r7, [pc, #736]	; (84510 <_malloc_r+0x328>)
   8422e:	4439      	add	r1, r7
   84230:	684c      	ldr	r4, [r1, #4]
   84232:	3908      	subs	r1, #8
   84234:	42a1      	cmp	r1, r4
   84236:	d106      	bne.n	84246 <_malloc_r+0x5e>
   84238:	e00c      	b.n	84254 <_malloc_r+0x6c>
   8423a:	2a00      	cmp	r2, #0
   8423c:	f280 80ab 	bge.w	84396 <_malloc_r+0x1ae>
   84240:	68e4      	ldr	r4, [r4, #12]
   84242:	42a1      	cmp	r1, r4
   84244:	d006      	beq.n	84254 <_malloc_r+0x6c>
   84246:	6863      	ldr	r3, [r4, #4]
   84248:	f023 0303 	bic.w	r3, r3, #3
   8424c:	1b9a      	subs	r2, r3, r6
   8424e:	2a0f      	cmp	r2, #15
   84250:	ddf3      	ble.n	8423a <_malloc_r+0x52>
   84252:	4670      	mov	r0, lr
   84254:	693c      	ldr	r4, [r7, #16]
   84256:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84524 <_malloc_r+0x33c>
   8425a:	4574      	cmp	r4, lr
   8425c:	f000 819e 	beq.w	8459c <_malloc_r+0x3b4>
   84260:	6863      	ldr	r3, [r4, #4]
   84262:	f023 0303 	bic.w	r3, r3, #3
   84266:	1b9a      	subs	r2, r3, r6
   84268:	2a0f      	cmp	r2, #15
   8426a:	f300 8183 	bgt.w	84574 <_malloc_r+0x38c>
   8426e:	2a00      	cmp	r2, #0
   84270:	f8c7 e014 	str.w	lr, [r7, #20]
   84274:	f8c7 e010 	str.w	lr, [r7, #16]
   84278:	f280 8091 	bge.w	8439e <_malloc_r+0x1b6>
   8427c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84280:	f080 8154 	bcs.w	8452c <_malloc_r+0x344>
   84284:	2201      	movs	r2, #1
   84286:	08db      	lsrs	r3, r3, #3
   84288:	6879      	ldr	r1, [r7, #4]
   8428a:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   8428e:	4413      	add	r3, r2
   84290:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   84294:	fa02 f20c 	lsl.w	r2, r2, ip
   84298:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   8429c:	430a      	orrs	r2, r1
   8429e:	f1ac 0108 	sub.w	r1, ip, #8
   842a2:	60e1      	str	r1, [r4, #12]
   842a4:	f8c4 8008 	str.w	r8, [r4, #8]
   842a8:	607a      	str	r2, [r7, #4]
   842aa:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   842ae:	f8c8 400c 	str.w	r4, [r8, #12]
   842b2:	2401      	movs	r4, #1
   842b4:	1083      	asrs	r3, r0, #2
   842b6:	409c      	lsls	r4, r3
   842b8:	4294      	cmp	r4, r2
   842ba:	d87d      	bhi.n	843b8 <_malloc_r+0x1d0>
   842bc:	4214      	tst	r4, r2
   842be:	d106      	bne.n	842ce <_malloc_r+0xe6>
   842c0:	f020 0003 	bic.w	r0, r0, #3
   842c4:	0064      	lsls	r4, r4, #1
   842c6:	4214      	tst	r4, r2
   842c8:	f100 0004 	add.w	r0, r0, #4
   842cc:	d0fa      	beq.n	842c4 <_malloc_r+0xdc>
   842ce:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   842d2:	46cc      	mov	ip, r9
   842d4:	4680      	mov	r8, r0
   842d6:	f8dc 300c 	ldr.w	r3, [ip, #12]
   842da:	459c      	cmp	ip, r3
   842dc:	d107      	bne.n	842ee <_malloc_r+0x106>
   842de:	e15f      	b.n	845a0 <_malloc_r+0x3b8>
   842e0:	2a00      	cmp	r2, #0
   842e2:	f280 816d 	bge.w	845c0 <_malloc_r+0x3d8>
   842e6:	68db      	ldr	r3, [r3, #12]
   842e8:	459c      	cmp	ip, r3
   842ea:	f000 8159 	beq.w	845a0 <_malloc_r+0x3b8>
   842ee:	6859      	ldr	r1, [r3, #4]
   842f0:	f021 0103 	bic.w	r1, r1, #3
   842f4:	1b8a      	subs	r2, r1, r6
   842f6:	2a0f      	cmp	r2, #15
   842f8:	ddf2      	ble.n	842e0 <_malloc_r+0xf8>
   842fa:	68dc      	ldr	r4, [r3, #12]
   842fc:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84300:	f046 0801 	orr.w	r8, r6, #1
   84304:	4628      	mov	r0, r5
   84306:	441e      	add	r6, r3
   84308:	f042 0501 	orr.w	r5, r2, #1
   8430c:	f8c3 8004 	str.w	r8, [r3, #4]
   84310:	f8cc 400c 	str.w	r4, [ip, #12]
   84314:	f8c4 c008 	str.w	ip, [r4, #8]
   84318:	617e      	str	r6, [r7, #20]
   8431a:	613e      	str	r6, [r7, #16]
   8431c:	f8c6 e00c 	str.w	lr, [r6, #12]
   84320:	f8c6 e008 	str.w	lr, [r6, #8]
   84324:	6075      	str	r5, [r6, #4]
   84326:	505a      	str	r2, [r3, r1]
   84328:	9300      	str	r3, [sp, #0]
   8432a:	f000 fac5 	bl	848b8 <__malloc_unlock>
   8432e:	9b00      	ldr	r3, [sp, #0]
   84330:	f103 0408 	add.w	r4, r3, #8
   84334:	e01e      	b.n	84374 <_malloc_r+0x18c>
   84336:	2910      	cmp	r1, #16
   84338:	d820      	bhi.n	8437c <_malloc_r+0x194>
   8433a:	f000 fab7 	bl	848ac <__malloc_lock>
   8433e:	2610      	movs	r6, #16
   84340:	2318      	movs	r3, #24
   84342:	2002      	movs	r0, #2
   84344:	4f72      	ldr	r7, [pc, #456]	; (84510 <_malloc_r+0x328>)
   84346:	443b      	add	r3, r7
   84348:	685c      	ldr	r4, [r3, #4]
   8434a:	f1a3 0208 	sub.w	r2, r3, #8
   8434e:	4294      	cmp	r4, r2
   84350:	f000 812f 	beq.w	845b2 <_malloc_r+0x3ca>
   84354:	6863      	ldr	r3, [r4, #4]
   84356:	68e1      	ldr	r1, [r4, #12]
   84358:	f023 0303 	bic.w	r3, r3, #3
   8435c:	4423      	add	r3, r4
   8435e:	685a      	ldr	r2, [r3, #4]
   84360:	68a6      	ldr	r6, [r4, #8]
   84362:	f042 0201 	orr.w	r2, r2, #1
   84366:	60f1      	str	r1, [r6, #12]
   84368:	4628      	mov	r0, r5
   8436a:	608e      	str	r6, [r1, #8]
   8436c:	605a      	str	r2, [r3, #4]
   8436e:	f000 faa3 	bl	848b8 <__malloc_unlock>
   84372:	3408      	adds	r4, #8
   84374:	4620      	mov	r0, r4
   84376:	b003      	add	sp, #12
   84378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8437c:	2400      	movs	r4, #0
   8437e:	230c      	movs	r3, #12
   84380:	4620      	mov	r0, r4
   84382:	602b      	str	r3, [r5, #0]
   84384:	b003      	add	sp, #12
   84386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8438a:	2040      	movs	r0, #64	; 0x40
   8438c:	f44f 7100 	mov.w	r1, #512	; 0x200
   84390:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   84394:	e74a      	b.n	8422c <_malloc_r+0x44>
   84396:	4423      	add	r3, r4
   84398:	685a      	ldr	r2, [r3, #4]
   8439a:	68e1      	ldr	r1, [r4, #12]
   8439c:	e7e0      	b.n	84360 <_malloc_r+0x178>
   8439e:	4423      	add	r3, r4
   843a0:	685a      	ldr	r2, [r3, #4]
   843a2:	4628      	mov	r0, r5
   843a4:	f042 0201 	orr.w	r2, r2, #1
   843a8:	605a      	str	r2, [r3, #4]
   843aa:	3408      	adds	r4, #8
   843ac:	f000 fa84 	bl	848b8 <__malloc_unlock>
   843b0:	4620      	mov	r0, r4
   843b2:	b003      	add	sp, #12
   843b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843b8:	68bc      	ldr	r4, [r7, #8]
   843ba:	6863      	ldr	r3, [r4, #4]
   843bc:	f023 0803 	bic.w	r8, r3, #3
   843c0:	45b0      	cmp	r8, r6
   843c2:	d304      	bcc.n	843ce <_malloc_r+0x1e6>
   843c4:	eba8 0306 	sub.w	r3, r8, r6
   843c8:	2b0f      	cmp	r3, #15
   843ca:	f300 8085 	bgt.w	844d8 <_malloc_r+0x2f0>
   843ce:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84528 <_malloc_r+0x340>
   843d2:	4b50      	ldr	r3, [pc, #320]	; (84514 <_malloc_r+0x32c>)
   843d4:	f8d9 2000 	ldr.w	r2, [r9]
   843d8:	681b      	ldr	r3, [r3, #0]
   843da:	3201      	adds	r2, #1
   843dc:	4433      	add	r3, r6
   843de:	eb04 0a08 	add.w	sl, r4, r8
   843e2:	f000 8154 	beq.w	8468e <_malloc_r+0x4a6>
   843e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   843ea:	330f      	adds	r3, #15
   843ec:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   843f0:	f02b 0b0f 	bic.w	fp, fp, #15
   843f4:	4659      	mov	r1, fp
   843f6:	4628      	mov	r0, r5
   843f8:	f000 fc1a 	bl	84c30 <_sbrk_r>
   843fc:	1c41      	adds	r1, r0, #1
   843fe:	4602      	mov	r2, r0
   84400:	f000 80fb 	beq.w	845fa <_malloc_r+0x412>
   84404:	4582      	cmp	sl, r0
   84406:	f200 80f6 	bhi.w	845f6 <_malloc_r+0x40e>
   8440a:	4b43      	ldr	r3, [pc, #268]	; (84518 <_malloc_r+0x330>)
   8440c:	6819      	ldr	r1, [r3, #0]
   8440e:	4459      	add	r1, fp
   84410:	6019      	str	r1, [r3, #0]
   84412:	f000 814c 	beq.w	846ae <_malloc_r+0x4c6>
   84416:	f8d9 0000 	ldr.w	r0, [r9]
   8441a:	3001      	adds	r0, #1
   8441c:	bf1b      	ittet	ne
   8441e:	eba2 0a0a 	subne.w	sl, r2, sl
   84422:	4451      	addne	r1, sl
   84424:	f8c9 2000 	streq.w	r2, [r9]
   84428:	6019      	strne	r1, [r3, #0]
   8442a:	f012 0107 	ands.w	r1, r2, #7
   8442e:	f000 8114 	beq.w	8465a <_malloc_r+0x472>
   84432:	f1c1 0008 	rsb	r0, r1, #8
   84436:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   8443a:	4402      	add	r2, r0
   8443c:	3108      	adds	r1, #8
   8443e:	eb02 090b 	add.w	r9, r2, fp
   84442:	f3c9 090b 	ubfx	r9, r9, #0, #12
   84446:	eba1 0909 	sub.w	r9, r1, r9
   8444a:	4649      	mov	r1, r9
   8444c:	4628      	mov	r0, r5
   8444e:	9301      	str	r3, [sp, #4]
   84450:	9200      	str	r2, [sp, #0]
   84452:	f000 fbed 	bl	84c30 <_sbrk_r>
   84456:	1c43      	adds	r3, r0, #1
   84458:	e89d 000c 	ldmia.w	sp, {r2, r3}
   8445c:	f000 8142 	beq.w	846e4 <_malloc_r+0x4fc>
   84460:	1a80      	subs	r0, r0, r2
   84462:	4448      	add	r0, r9
   84464:	f040 0001 	orr.w	r0, r0, #1
   84468:	6819      	ldr	r1, [r3, #0]
   8446a:	42bc      	cmp	r4, r7
   8446c:	4449      	add	r1, r9
   8446e:	60ba      	str	r2, [r7, #8]
   84470:	6019      	str	r1, [r3, #0]
   84472:	6050      	str	r0, [r2, #4]
   84474:	d017      	beq.n	844a6 <_malloc_r+0x2be>
   84476:	f1b8 0f0f 	cmp.w	r8, #15
   8447a:	f240 80fa 	bls.w	84672 <_malloc_r+0x48a>
   8447e:	f04f 0c05 	mov.w	ip, #5
   84482:	6862      	ldr	r2, [r4, #4]
   84484:	f1a8 000c 	sub.w	r0, r8, #12
   84488:	f020 0007 	bic.w	r0, r0, #7
   8448c:	f002 0201 	and.w	r2, r2, #1
   84490:	eb04 0e00 	add.w	lr, r4, r0
   84494:	4302      	orrs	r2, r0
   84496:	280f      	cmp	r0, #15
   84498:	6062      	str	r2, [r4, #4]
   8449a:	f8ce c004 	str.w	ip, [lr, #4]
   8449e:	f8ce c008 	str.w	ip, [lr, #8]
   844a2:	f200 8116 	bhi.w	846d2 <_malloc_r+0x4ea>
   844a6:	4b1d      	ldr	r3, [pc, #116]	; (8451c <_malloc_r+0x334>)
   844a8:	68bc      	ldr	r4, [r7, #8]
   844aa:	681a      	ldr	r2, [r3, #0]
   844ac:	4291      	cmp	r1, r2
   844ae:	bf88      	it	hi
   844b0:	6019      	strhi	r1, [r3, #0]
   844b2:	4b1b      	ldr	r3, [pc, #108]	; (84520 <_malloc_r+0x338>)
   844b4:	681a      	ldr	r2, [r3, #0]
   844b6:	4291      	cmp	r1, r2
   844b8:	6862      	ldr	r2, [r4, #4]
   844ba:	bf88      	it	hi
   844bc:	6019      	strhi	r1, [r3, #0]
   844be:	f022 0203 	bic.w	r2, r2, #3
   844c2:	4296      	cmp	r6, r2
   844c4:	eba2 0306 	sub.w	r3, r2, r6
   844c8:	d801      	bhi.n	844ce <_malloc_r+0x2e6>
   844ca:	2b0f      	cmp	r3, #15
   844cc:	dc04      	bgt.n	844d8 <_malloc_r+0x2f0>
   844ce:	4628      	mov	r0, r5
   844d0:	f000 f9f2 	bl	848b8 <__malloc_unlock>
   844d4:	2400      	movs	r4, #0
   844d6:	e74d      	b.n	84374 <_malloc_r+0x18c>
   844d8:	f046 0201 	orr.w	r2, r6, #1
   844dc:	f043 0301 	orr.w	r3, r3, #1
   844e0:	4426      	add	r6, r4
   844e2:	6062      	str	r2, [r4, #4]
   844e4:	4628      	mov	r0, r5
   844e6:	60be      	str	r6, [r7, #8]
   844e8:	3408      	adds	r4, #8
   844ea:	6073      	str	r3, [r6, #4]
   844ec:	f000 f9e4 	bl	848b8 <__malloc_unlock>
   844f0:	4620      	mov	r0, r4
   844f2:	b003      	add	sp, #12
   844f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844f8:	2b14      	cmp	r3, #20
   844fa:	d970      	bls.n	845de <_malloc_r+0x3f6>
   844fc:	2b54      	cmp	r3, #84	; 0x54
   844fe:	f200 80a2 	bhi.w	84646 <_malloc_r+0x45e>
   84502:	0b33      	lsrs	r3, r6, #12
   84504:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84508:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   8450c:	00c1      	lsls	r1, r0, #3
   8450e:	e68d      	b.n	8422c <_malloc_r+0x44>
   84510:	200706e0 	.word	0x200706e0
   84514:	2007acf8 	.word	0x2007acf8
   84518:	2007acc8 	.word	0x2007acc8
   8451c:	2007acf0 	.word	0x2007acf0
   84520:	2007acf4 	.word	0x2007acf4
   84524:	200706e8 	.word	0x200706e8
   84528:	20070ae8 	.word	0x20070ae8
   8452c:	0a5a      	lsrs	r2, r3, #9
   8452e:	2a04      	cmp	r2, #4
   84530:	d95b      	bls.n	845ea <_malloc_r+0x402>
   84532:	2a14      	cmp	r2, #20
   84534:	f200 80ae 	bhi.w	84694 <_malloc_r+0x4ac>
   84538:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   8453c:	00c9      	lsls	r1, r1, #3
   8453e:	325b      	adds	r2, #91	; 0x5b
   84540:	eb07 0c01 	add.w	ip, r7, r1
   84544:	5879      	ldr	r1, [r7, r1]
   84546:	f1ac 0c08 	sub.w	ip, ip, #8
   8454a:	458c      	cmp	ip, r1
   8454c:	f000 8088 	beq.w	84660 <_malloc_r+0x478>
   84550:	684a      	ldr	r2, [r1, #4]
   84552:	f022 0203 	bic.w	r2, r2, #3
   84556:	4293      	cmp	r3, r2
   84558:	d273      	bcs.n	84642 <_malloc_r+0x45a>
   8455a:	6889      	ldr	r1, [r1, #8]
   8455c:	458c      	cmp	ip, r1
   8455e:	d1f7      	bne.n	84550 <_malloc_r+0x368>
   84560:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84564:	687a      	ldr	r2, [r7, #4]
   84566:	60e3      	str	r3, [r4, #12]
   84568:	f8c4 c008 	str.w	ip, [r4, #8]
   8456c:	609c      	str	r4, [r3, #8]
   8456e:	f8cc 400c 	str.w	r4, [ip, #12]
   84572:	e69e      	b.n	842b2 <_malloc_r+0xca>
   84574:	f046 0c01 	orr.w	ip, r6, #1
   84578:	f042 0101 	orr.w	r1, r2, #1
   8457c:	4426      	add	r6, r4
   8457e:	f8c4 c004 	str.w	ip, [r4, #4]
   84582:	4628      	mov	r0, r5
   84584:	617e      	str	r6, [r7, #20]
   84586:	613e      	str	r6, [r7, #16]
   84588:	f8c6 e00c 	str.w	lr, [r6, #12]
   8458c:	f8c6 e008 	str.w	lr, [r6, #8]
   84590:	6071      	str	r1, [r6, #4]
   84592:	50e2      	str	r2, [r4, r3]
   84594:	f000 f990 	bl	848b8 <__malloc_unlock>
   84598:	3408      	adds	r4, #8
   8459a:	e6eb      	b.n	84374 <_malloc_r+0x18c>
   8459c:	687a      	ldr	r2, [r7, #4]
   8459e:	e688      	b.n	842b2 <_malloc_r+0xca>
   845a0:	f108 0801 	add.w	r8, r8, #1
   845a4:	f018 0f03 	tst.w	r8, #3
   845a8:	f10c 0c08 	add.w	ip, ip, #8
   845ac:	f47f ae93 	bne.w	842d6 <_malloc_r+0xee>
   845b0:	e02d      	b.n	8460e <_malloc_r+0x426>
   845b2:	68dc      	ldr	r4, [r3, #12]
   845b4:	42a3      	cmp	r3, r4
   845b6:	bf08      	it	eq
   845b8:	3002      	addeq	r0, #2
   845ba:	f43f ae4b 	beq.w	84254 <_malloc_r+0x6c>
   845be:	e6c9      	b.n	84354 <_malloc_r+0x16c>
   845c0:	461c      	mov	r4, r3
   845c2:	4419      	add	r1, r3
   845c4:	684a      	ldr	r2, [r1, #4]
   845c6:	68db      	ldr	r3, [r3, #12]
   845c8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   845cc:	f042 0201 	orr.w	r2, r2, #1
   845d0:	604a      	str	r2, [r1, #4]
   845d2:	4628      	mov	r0, r5
   845d4:	60f3      	str	r3, [r6, #12]
   845d6:	609e      	str	r6, [r3, #8]
   845d8:	f000 f96e 	bl	848b8 <__malloc_unlock>
   845dc:	e6ca      	b.n	84374 <_malloc_r+0x18c>
   845de:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   845e2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   845e6:	00c1      	lsls	r1, r0, #3
   845e8:	e620      	b.n	8422c <_malloc_r+0x44>
   845ea:	099a      	lsrs	r2, r3, #6
   845ec:	f102 0139 	add.w	r1, r2, #57	; 0x39
   845f0:	00c9      	lsls	r1, r1, #3
   845f2:	3238      	adds	r2, #56	; 0x38
   845f4:	e7a4      	b.n	84540 <_malloc_r+0x358>
   845f6:	42bc      	cmp	r4, r7
   845f8:	d054      	beq.n	846a4 <_malloc_r+0x4bc>
   845fa:	68bc      	ldr	r4, [r7, #8]
   845fc:	6862      	ldr	r2, [r4, #4]
   845fe:	f022 0203 	bic.w	r2, r2, #3
   84602:	e75e      	b.n	844c2 <_malloc_r+0x2da>
   84604:	f859 3908 	ldr.w	r3, [r9], #-8
   84608:	4599      	cmp	r9, r3
   8460a:	f040 8086 	bne.w	8471a <_malloc_r+0x532>
   8460e:	f010 0f03 	tst.w	r0, #3
   84612:	f100 30ff 	add.w	r0, r0, #4294967295
   84616:	d1f5      	bne.n	84604 <_malloc_r+0x41c>
   84618:	687b      	ldr	r3, [r7, #4]
   8461a:	ea23 0304 	bic.w	r3, r3, r4
   8461e:	607b      	str	r3, [r7, #4]
   84620:	0064      	lsls	r4, r4, #1
   84622:	429c      	cmp	r4, r3
   84624:	f63f aec8 	bhi.w	843b8 <_malloc_r+0x1d0>
   84628:	2c00      	cmp	r4, #0
   8462a:	f43f aec5 	beq.w	843b8 <_malloc_r+0x1d0>
   8462e:	421c      	tst	r4, r3
   84630:	4640      	mov	r0, r8
   84632:	f47f ae4c 	bne.w	842ce <_malloc_r+0xe6>
   84636:	0064      	lsls	r4, r4, #1
   84638:	421c      	tst	r4, r3
   8463a:	f100 0004 	add.w	r0, r0, #4
   8463e:	d0fa      	beq.n	84636 <_malloc_r+0x44e>
   84640:	e645      	b.n	842ce <_malloc_r+0xe6>
   84642:	468c      	mov	ip, r1
   84644:	e78c      	b.n	84560 <_malloc_r+0x378>
   84646:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8464a:	d815      	bhi.n	84678 <_malloc_r+0x490>
   8464c:	0bf3      	lsrs	r3, r6, #15
   8464e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84652:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84656:	00c1      	lsls	r1, r0, #3
   84658:	e5e8      	b.n	8422c <_malloc_r+0x44>
   8465a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   8465e:	e6ee      	b.n	8443e <_malloc_r+0x256>
   84660:	2101      	movs	r1, #1
   84662:	687b      	ldr	r3, [r7, #4]
   84664:	1092      	asrs	r2, r2, #2
   84666:	fa01 f202 	lsl.w	r2, r1, r2
   8466a:	431a      	orrs	r2, r3
   8466c:	607a      	str	r2, [r7, #4]
   8466e:	4663      	mov	r3, ip
   84670:	e779      	b.n	84566 <_malloc_r+0x37e>
   84672:	2301      	movs	r3, #1
   84674:	6053      	str	r3, [r2, #4]
   84676:	e72a      	b.n	844ce <_malloc_r+0x2e6>
   84678:	f240 5254 	movw	r2, #1364	; 0x554
   8467c:	4293      	cmp	r3, r2
   8467e:	d822      	bhi.n	846c6 <_malloc_r+0x4de>
   84680:	0cb3      	lsrs	r3, r6, #18
   84682:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84686:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8468a:	00c1      	lsls	r1, r0, #3
   8468c:	e5ce      	b.n	8422c <_malloc_r+0x44>
   8468e:	f103 0b10 	add.w	fp, r3, #16
   84692:	e6af      	b.n	843f4 <_malloc_r+0x20c>
   84694:	2a54      	cmp	r2, #84	; 0x54
   84696:	d829      	bhi.n	846ec <_malloc_r+0x504>
   84698:	0b1a      	lsrs	r2, r3, #12
   8469a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8469e:	00c9      	lsls	r1, r1, #3
   846a0:	326e      	adds	r2, #110	; 0x6e
   846a2:	e74d      	b.n	84540 <_malloc_r+0x358>
   846a4:	4b20      	ldr	r3, [pc, #128]	; (84728 <_malloc_r+0x540>)
   846a6:	6819      	ldr	r1, [r3, #0]
   846a8:	4459      	add	r1, fp
   846aa:	6019      	str	r1, [r3, #0]
   846ac:	e6b3      	b.n	84416 <_malloc_r+0x22e>
   846ae:	f3ca 000b 	ubfx	r0, sl, #0, #12
   846b2:	2800      	cmp	r0, #0
   846b4:	f47f aeaf 	bne.w	84416 <_malloc_r+0x22e>
   846b8:	eb08 030b 	add.w	r3, r8, fp
   846bc:	68ba      	ldr	r2, [r7, #8]
   846be:	f043 0301 	orr.w	r3, r3, #1
   846c2:	6053      	str	r3, [r2, #4]
   846c4:	e6ef      	b.n	844a6 <_malloc_r+0x2be>
   846c6:	207f      	movs	r0, #127	; 0x7f
   846c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   846cc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   846d0:	e5ac      	b.n	8422c <_malloc_r+0x44>
   846d2:	f104 0108 	add.w	r1, r4, #8
   846d6:	4628      	mov	r0, r5
   846d8:	9300      	str	r3, [sp, #0]
   846da:	f7ff fa67 	bl	83bac <_free_r>
   846de:	9b00      	ldr	r3, [sp, #0]
   846e0:	6819      	ldr	r1, [r3, #0]
   846e2:	e6e0      	b.n	844a6 <_malloc_r+0x2be>
   846e4:	2001      	movs	r0, #1
   846e6:	f04f 0900 	mov.w	r9, #0
   846ea:	e6bd      	b.n	84468 <_malloc_r+0x280>
   846ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   846f0:	d805      	bhi.n	846fe <_malloc_r+0x516>
   846f2:	0bda      	lsrs	r2, r3, #15
   846f4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   846f8:	00c9      	lsls	r1, r1, #3
   846fa:	3277      	adds	r2, #119	; 0x77
   846fc:	e720      	b.n	84540 <_malloc_r+0x358>
   846fe:	f240 5154 	movw	r1, #1364	; 0x554
   84702:	428a      	cmp	r2, r1
   84704:	d805      	bhi.n	84712 <_malloc_r+0x52a>
   84706:	0c9a      	lsrs	r2, r3, #18
   84708:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   8470c:	00c9      	lsls	r1, r1, #3
   8470e:	327c      	adds	r2, #124	; 0x7c
   84710:	e716      	b.n	84540 <_malloc_r+0x358>
   84712:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84716:	227e      	movs	r2, #126	; 0x7e
   84718:	e712      	b.n	84540 <_malloc_r+0x358>
   8471a:	687b      	ldr	r3, [r7, #4]
   8471c:	e780      	b.n	84620 <_malloc_r+0x438>
   8471e:	08f0      	lsrs	r0, r6, #3
   84720:	f106 0308 	add.w	r3, r6, #8
   84724:	e60e      	b.n	84344 <_malloc_r+0x15c>
   84726:	bf00      	nop
   84728:	2007acc8 	.word	0x2007acc8

0008472c <__ascii_mbtowc>:
   8472c:	b082      	sub	sp, #8
   8472e:	b149      	cbz	r1, 84744 <__ascii_mbtowc+0x18>
   84730:	b15a      	cbz	r2, 8474a <__ascii_mbtowc+0x1e>
   84732:	b16b      	cbz	r3, 84750 <__ascii_mbtowc+0x24>
   84734:	7813      	ldrb	r3, [r2, #0]
   84736:	600b      	str	r3, [r1, #0]
   84738:	7812      	ldrb	r2, [r2, #0]
   8473a:	1c10      	adds	r0, r2, #0
   8473c:	bf18      	it	ne
   8473e:	2001      	movne	r0, #1
   84740:	b002      	add	sp, #8
   84742:	4770      	bx	lr
   84744:	a901      	add	r1, sp, #4
   84746:	2a00      	cmp	r2, #0
   84748:	d1f3      	bne.n	84732 <__ascii_mbtowc+0x6>
   8474a:	4610      	mov	r0, r2
   8474c:	b002      	add	sp, #8
   8474e:	4770      	bx	lr
   84750:	f06f 0001 	mvn.w	r0, #1
   84754:	e7f4      	b.n	84740 <__ascii_mbtowc+0x14>
   84756:	bf00      	nop

00084758 <memchr>:
   84758:	0783      	lsls	r3, r0, #30
   8475a:	b470      	push	{r4, r5, r6}
   8475c:	b2cd      	uxtb	r5, r1
   8475e:	d03d      	beq.n	847dc <memchr+0x84>
   84760:	1e54      	subs	r4, r2, #1
   84762:	b30a      	cbz	r2, 847a8 <memchr+0x50>
   84764:	7803      	ldrb	r3, [r0, #0]
   84766:	42ab      	cmp	r3, r5
   84768:	d01f      	beq.n	847aa <memchr+0x52>
   8476a:	1c43      	adds	r3, r0, #1
   8476c:	e005      	b.n	8477a <memchr+0x22>
   8476e:	f114 34ff 	adds.w	r4, r4, #4294967295
   84772:	d319      	bcc.n	847a8 <memchr+0x50>
   84774:	7802      	ldrb	r2, [r0, #0]
   84776:	42aa      	cmp	r2, r5
   84778:	d017      	beq.n	847aa <memchr+0x52>
   8477a:	f013 0f03 	tst.w	r3, #3
   8477e:	4618      	mov	r0, r3
   84780:	f103 0301 	add.w	r3, r3, #1
   84784:	d1f3      	bne.n	8476e <memchr+0x16>
   84786:	2c03      	cmp	r4, #3
   84788:	d811      	bhi.n	847ae <memchr+0x56>
   8478a:	b34c      	cbz	r4, 847e0 <memchr+0x88>
   8478c:	7803      	ldrb	r3, [r0, #0]
   8478e:	42ab      	cmp	r3, r5
   84790:	d00b      	beq.n	847aa <memchr+0x52>
   84792:	4404      	add	r4, r0
   84794:	1c43      	adds	r3, r0, #1
   84796:	e002      	b.n	8479e <memchr+0x46>
   84798:	7802      	ldrb	r2, [r0, #0]
   8479a:	42aa      	cmp	r2, r5
   8479c:	d005      	beq.n	847aa <memchr+0x52>
   8479e:	429c      	cmp	r4, r3
   847a0:	4618      	mov	r0, r3
   847a2:	f103 0301 	add.w	r3, r3, #1
   847a6:	d1f7      	bne.n	84798 <memchr+0x40>
   847a8:	2000      	movs	r0, #0
   847aa:	bc70      	pop	{r4, r5, r6}
   847ac:	4770      	bx	lr
   847ae:	0209      	lsls	r1, r1, #8
   847b0:	b289      	uxth	r1, r1
   847b2:	4329      	orrs	r1, r5
   847b4:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   847b8:	6803      	ldr	r3, [r0, #0]
   847ba:	4606      	mov	r6, r0
   847bc:	404b      	eors	r3, r1
   847be:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   847c2:	ea22 0303 	bic.w	r3, r2, r3
   847c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   847ca:	f100 0004 	add.w	r0, r0, #4
   847ce:	d103      	bne.n	847d8 <memchr+0x80>
   847d0:	3c04      	subs	r4, #4
   847d2:	2c03      	cmp	r4, #3
   847d4:	d8f0      	bhi.n	847b8 <memchr+0x60>
   847d6:	e7d8      	b.n	8478a <memchr+0x32>
   847d8:	4630      	mov	r0, r6
   847da:	e7d7      	b.n	8478c <memchr+0x34>
   847dc:	4614      	mov	r4, r2
   847de:	e7d2      	b.n	84786 <memchr+0x2e>
   847e0:	4620      	mov	r0, r4
   847e2:	e7e2      	b.n	847aa <memchr+0x52>

000847e4 <memmove>:
   847e4:	4288      	cmp	r0, r1
   847e6:	b5f0      	push	{r4, r5, r6, r7, lr}
   847e8:	d90d      	bls.n	84806 <memmove+0x22>
   847ea:	188b      	adds	r3, r1, r2
   847ec:	4298      	cmp	r0, r3
   847ee:	d20a      	bcs.n	84806 <memmove+0x22>
   847f0:	1884      	adds	r4, r0, r2
   847f2:	2a00      	cmp	r2, #0
   847f4:	d051      	beq.n	8489a <memmove+0xb6>
   847f6:	4622      	mov	r2, r4
   847f8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   847fc:	4299      	cmp	r1, r3
   847fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84802:	d1f9      	bne.n	847f8 <memmove+0x14>
   84804:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84806:	2a0f      	cmp	r2, #15
   84808:	d948      	bls.n	8489c <memmove+0xb8>
   8480a:	ea41 0300 	orr.w	r3, r1, r0
   8480e:	079b      	lsls	r3, r3, #30
   84810:	d146      	bne.n	848a0 <memmove+0xbc>
   84812:	4615      	mov	r5, r2
   84814:	f100 0410 	add.w	r4, r0, #16
   84818:	f101 0310 	add.w	r3, r1, #16
   8481c:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84820:	3d10      	subs	r5, #16
   84822:	f844 6c10 	str.w	r6, [r4, #-16]
   84826:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8482a:	2d0f      	cmp	r5, #15
   8482c:	f844 6c0c 	str.w	r6, [r4, #-12]
   84830:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84834:	f104 0410 	add.w	r4, r4, #16
   84838:	f844 6c18 	str.w	r6, [r4, #-24]
   8483c:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84840:	f103 0310 	add.w	r3, r3, #16
   84844:	f844 6c14 	str.w	r6, [r4, #-20]
   84848:	d8e8      	bhi.n	8481c <memmove+0x38>
   8484a:	f1a2 0310 	sub.w	r3, r2, #16
   8484e:	f023 030f 	bic.w	r3, r3, #15
   84852:	f002 0e0f 	and.w	lr, r2, #15
   84856:	3310      	adds	r3, #16
   84858:	f1be 0f03 	cmp.w	lr, #3
   8485c:	4419      	add	r1, r3
   8485e:	4403      	add	r3, r0
   84860:	d921      	bls.n	848a6 <memmove+0xc2>
   84862:	460e      	mov	r6, r1
   84864:	4674      	mov	r4, lr
   84866:	1f1d      	subs	r5, r3, #4
   84868:	f856 7b04 	ldr.w	r7, [r6], #4
   8486c:	3c04      	subs	r4, #4
   8486e:	2c03      	cmp	r4, #3
   84870:	f845 7f04 	str.w	r7, [r5, #4]!
   84874:	d8f8      	bhi.n	84868 <memmove+0x84>
   84876:	f1ae 0404 	sub.w	r4, lr, #4
   8487a:	f024 0403 	bic.w	r4, r4, #3
   8487e:	3404      	adds	r4, #4
   84880:	4421      	add	r1, r4
   84882:	4423      	add	r3, r4
   84884:	f002 0203 	and.w	r2, r2, #3
   84888:	b162      	cbz	r2, 848a4 <memmove+0xc0>
   8488a:	3b01      	subs	r3, #1
   8488c:	440a      	add	r2, r1
   8488e:	f811 4b01 	ldrb.w	r4, [r1], #1
   84892:	428a      	cmp	r2, r1
   84894:	f803 4f01 	strb.w	r4, [r3, #1]!
   84898:	d1f9      	bne.n	8488e <memmove+0xaa>
   8489a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8489c:	4603      	mov	r3, r0
   8489e:	e7f3      	b.n	84888 <memmove+0xa4>
   848a0:	4603      	mov	r3, r0
   848a2:	e7f2      	b.n	8488a <memmove+0xa6>
   848a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   848a6:	4672      	mov	r2, lr
   848a8:	e7ee      	b.n	84888 <memmove+0xa4>
   848aa:	bf00      	nop

000848ac <__malloc_lock>:
   848ac:	4801      	ldr	r0, [pc, #4]	; (848b4 <__malloc_lock+0x8>)
   848ae:	f7ff bc17 	b.w	840e0 <__retarget_lock_acquire_recursive>
   848b2:	bf00      	nop
   848b4:	2007ad18 	.word	0x2007ad18

000848b8 <__malloc_unlock>:
   848b8:	4801      	ldr	r0, [pc, #4]	; (848c0 <__malloc_unlock+0x8>)
   848ba:	f7ff bc13 	b.w	840e4 <__retarget_lock_release_recursive>
   848be:	bf00      	nop
   848c0:	2007ad18 	.word	0x2007ad18

000848c4 <_realloc_r>:
   848c4:	2900      	cmp	r1, #0
   848c6:	f000 8094 	beq.w	849f2 <_realloc_r+0x12e>
   848ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   848ce:	460c      	mov	r4, r1
   848d0:	4615      	mov	r5, r2
   848d2:	b083      	sub	sp, #12
   848d4:	4680      	mov	r8, r0
   848d6:	f105 060b 	add.w	r6, r5, #11
   848da:	f7ff ffe7 	bl	848ac <__malloc_lock>
   848de:	f854 ec04 	ldr.w	lr, [r4, #-4]
   848e2:	2e16      	cmp	r6, #22
   848e4:	f02e 0703 	bic.w	r7, lr, #3
   848e8:	f1a4 0908 	sub.w	r9, r4, #8
   848ec:	d83c      	bhi.n	84968 <_realloc_r+0xa4>
   848ee:	2210      	movs	r2, #16
   848f0:	4616      	mov	r6, r2
   848f2:	42b5      	cmp	r5, r6
   848f4:	d83d      	bhi.n	84972 <_realloc_r+0xae>
   848f6:	4297      	cmp	r7, r2
   848f8:	da43      	bge.n	84982 <_realloc_r+0xbe>
   848fa:	4bc6      	ldr	r3, [pc, #792]	; (84c14 <_realloc_r+0x350>)
   848fc:	eb09 0007 	add.w	r0, r9, r7
   84900:	6899      	ldr	r1, [r3, #8]
   84902:	4288      	cmp	r0, r1
   84904:	f000 80c3 	beq.w	84a8e <_realloc_r+0x1ca>
   84908:	6843      	ldr	r3, [r0, #4]
   8490a:	f023 0101 	bic.w	r1, r3, #1
   8490e:	4401      	add	r1, r0
   84910:	6849      	ldr	r1, [r1, #4]
   84912:	07c9      	lsls	r1, r1, #31
   84914:	d54d      	bpl.n	849b2 <_realloc_r+0xee>
   84916:	f01e 0f01 	tst.w	lr, #1
   8491a:	f000 809b 	beq.w	84a54 <_realloc_r+0x190>
   8491e:	4629      	mov	r1, r5
   84920:	4640      	mov	r0, r8
   84922:	f7ff fc61 	bl	841e8 <_malloc_r>
   84926:	4605      	mov	r5, r0
   84928:	2800      	cmp	r0, #0
   8492a:	d03b      	beq.n	849a4 <_realloc_r+0xe0>
   8492c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84930:	f1a0 0208 	sub.w	r2, r0, #8
   84934:	f023 0301 	bic.w	r3, r3, #1
   84938:	444b      	add	r3, r9
   8493a:	429a      	cmp	r2, r3
   8493c:	f000 812b 	beq.w	84b96 <_realloc_r+0x2d2>
   84940:	1f3a      	subs	r2, r7, #4
   84942:	2a24      	cmp	r2, #36	; 0x24
   84944:	f200 8118 	bhi.w	84b78 <_realloc_r+0x2b4>
   84948:	2a13      	cmp	r2, #19
   8494a:	f200 80eb 	bhi.w	84b24 <_realloc_r+0x260>
   8494e:	4603      	mov	r3, r0
   84950:	4622      	mov	r2, r4
   84952:	6811      	ldr	r1, [r2, #0]
   84954:	6019      	str	r1, [r3, #0]
   84956:	6851      	ldr	r1, [r2, #4]
   84958:	6059      	str	r1, [r3, #4]
   8495a:	6892      	ldr	r2, [r2, #8]
   8495c:	609a      	str	r2, [r3, #8]
   8495e:	4621      	mov	r1, r4
   84960:	4640      	mov	r0, r8
   84962:	f7ff f923 	bl	83bac <_free_r>
   84966:	e01d      	b.n	849a4 <_realloc_r+0xe0>
   84968:	f026 0607 	bic.w	r6, r6, #7
   8496c:	2e00      	cmp	r6, #0
   8496e:	4632      	mov	r2, r6
   84970:	dabf      	bge.n	848f2 <_realloc_r+0x2e>
   84972:	2500      	movs	r5, #0
   84974:	230c      	movs	r3, #12
   84976:	4628      	mov	r0, r5
   84978:	f8c8 3000 	str.w	r3, [r8]
   8497c:	b003      	add	sp, #12
   8497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84982:	4625      	mov	r5, r4
   84984:	1bbb      	subs	r3, r7, r6
   84986:	2b0f      	cmp	r3, #15
   84988:	f8d9 2004 	ldr.w	r2, [r9, #4]
   8498c:	d81d      	bhi.n	849ca <_realloc_r+0x106>
   8498e:	f002 0201 	and.w	r2, r2, #1
   84992:	433a      	orrs	r2, r7
   84994:	eb09 0107 	add.w	r1, r9, r7
   84998:	f8c9 2004 	str.w	r2, [r9, #4]
   8499c:	684b      	ldr	r3, [r1, #4]
   8499e:	f043 0301 	orr.w	r3, r3, #1
   849a2:	604b      	str	r3, [r1, #4]
   849a4:	4640      	mov	r0, r8
   849a6:	f7ff ff87 	bl	848b8 <__malloc_unlock>
   849aa:	4628      	mov	r0, r5
   849ac:	b003      	add	sp, #12
   849ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   849b2:	f023 0303 	bic.w	r3, r3, #3
   849b6:	18f9      	adds	r1, r7, r3
   849b8:	4291      	cmp	r1, r2
   849ba:	db1d      	blt.n	849f8 <_realloc_r+0x134>
   849bc:	68c3      	ldr	r3, [r0, #12]
   849be:	6882      	ldr	r2, [r0, #8]
   849c0:	4625      	mov	r5, r4
   849c2:	60d3      	str	r3, [r2, #12]
   849c4:	460f      	mov	r7, r1
   849c6:	609a      	str	r2, [r3, #8]
   849c8:	e7dc      	b.n	84984 <_realloc_r+0xc0>
   849ca:	f002 0201 	and.w	r2, r2, #1
   849ce:	eb09 0106 	add.w	r1, r9, r6
   849d2:	f043 0301 	orr.w	r3, r3, #1
   849d6:	4332      	orrs	r2, r6
   849d8:	f8c9 2004 	str.w	r2, [r9, #4]
   849dc:	444f      	add	r7, r9
   849de:	604b      	str	r3, [r1, #4]
   849e0:	687b      	ldr	r3, [r7, #4]
   849e2:	3108      	adds	r1, #8
   849e4:	f043 0301 	orr.w	r3, r3, #1
   849e8:	607b      	str	r3, [r7, #4]
   849ea:	4640      	mov	r0, r8
   849ec:	f7ff f8de 	bl	83bac <_free_r>
   849f0:	e7d8      	b.n	849a4 <_realloc_r+0xe0>
   849f2:	4611      	mov	r1, r2
   849f4:	f7ff bbf8 	b.w	841e8 <_malloc_r>
   849f8:	f01e 0f01 	tst.w	lr, #1
   849fc:	d18f      	bne.n	8491e <_realloc_r+0x5a>
   849fe:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84a02:	eba9 0a01 	sub.w	sl, r9, r1
   84a06:	f8da 1004 	ldr.w	r1, [sl, #4]
   84a0a:	f021 0103 	bic.w	r1, r1, #3
   84a0e:	440b      	add	r3, r1
   84a10:	443b      	add	r3, r7
   84a12:	4293      	cmp	r3, r2
   84a14:	db26      	blt.n	84a64 <_realloc_r+0x1a0>
   84a16:	4655      	mov	r5, sl
   84a18:	68c1      	ldr	r1, [r0, #12]
   84a1a:	6880      	ldr	r0, [r0, #8]
   84a1c:	1f3a      	subs	r2, r7, #4
   84a1e:	60c1      	str	r1, [r0, #12]
   84a20:	6088      	str	r0, [r1, #8]
   84a22:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84a26:	f8da 100c 	ldr.w	r1, [sl, #12]
   84a2a:	2a24      	cmp	r2, #36	; 0x24
   84a2c:	60c1      	str	r1, [r0, #12]
   84a2e:	6088      	str	r0, [r1, #8]
   84a30:	d826      	bhi.n	84a80 <_realloc_r+0x1bc>
   84a32:	2a13      	cmp	r2, #19
   84a34:	f240 8081 	bls.w	84b3a <_realloc_r+0x276>
   84a38:	6821      	ldr	r1, [r4, #0]
   84a3a:	2a1b      	cmp	r2, #27
   84a3c:	f8ca 1008 	str.w	r1, [sl, #8]
   84a40:	6861      	ldr	r1, [r4, #4]
   84a42:	f8ca 100c 	str.w	r1, [sl, #12]
   84a46:	f200 80ad 	bhi.w	84ba4 <_realloc_r+0x2e0>
   84a4a:	f104 0008 	add.w	r0, r4, #8
   84a4e:	f10a 0210 	add.w	r2, sl, #16
   84a52:	e074      	b.n	84b3e <_realloc_r+0x27a>
   84a54:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84a58:	eba9 0a03 	sub.w	sl, r9, r3
   84a5c:	f8da 1004 	ldr.w	r1, [sl, #4]
   84a60:	f021 0103 	bic.w	r1, r1, #3
   84a64:	187b      	adds	r3, r7, r1
   84a66:	4293      	cmp	r3, r2
   84a68:	f6ff af59 	blt.w	8491e <_realloc_r+0x5a>
   84a6c:	4655      	mov	r5, sl
   84a6e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84a72:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84a76:	1f3a      	subs	r2, r7, #4
   84a78:	2a24      	cmp	r2, #36	; 0x24
   84a7a:	60c1      	str	r1, [r0, #12]
   84a7c:	6088      	str	r0, [r1, #8]
   84a7e:	d9d8      	bls.n	84a32 <_realloc_r+0x16e>
   84a80:	4621      	mov	r1, r4
   84a82:	4628      	mov	r0, r5
   84a84:	461f      	mov	r7, r3
   84a86:	46d1      	mov	r9, sl
   84a88:	f7ff feac 	bl	847e4 <memmove>
   84a8c:	e77a      	b.n	84984 <_realloc_r+0xc0>
   84a8e:	6841      	ldr	r1, [r0, #4]
   84a90:	f106 0010 	add.w	r0, r6, #16
   84a94:	f021 0b03 	bic.w	fp, r1, #3
   84a98:	44bb      	add	fp, r7
   84a9a:	4583      	cmp	fp, r0
   84a9c:	da58      	bge.n	84b50 <_realloc_r+0x28c>
   84a9e:	f01e 0f01 	tst.w	lr, #1
   84aa2:	f47f af3c 	bne.w	8491e <_realloc_r+0x5a>
   84aa6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84aaa:	eba9 0a01 	sub.w	sl, r9, r1
   84aae:	f8da 1004 	ldr.w	r1, [sl, #4]
   84ab2:	f021 0103 	bic.w	r1, r1, #3
   84ab6:	448b      	add	fp, r1
   84ab8:	4558      	cmp	r0, fp
   84aba:	dcd3      	bgt.n	84a64 <_realloc_r+0x1a0>
   84abc:	4655      	mov	r5, sl
   84abe:	f8da 100c 	ldr.w	r1, [sl, #12]
   84ac2:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84ac6:	1f3a      	subs	r2, r7, #4
   84ac8:	2a24      	cmp	r2, #36	; 0x24
   84aca:	60c1      	str	r1, [r0, #12]
   84acc:	6088      	str	r0, [r1, #8]
   84ace:	f200 808d 	bhi.w	84bec <_realloc_r+0x328>
   84ad2:	2a13      	cmp	r2, #19
   84ad4:	f240 8087 	bls.w	84be6 <_realloc_r+0x322>
   84ad8:	6821      	ldr	r1, [r4, #0]
   84ada:	2a1b      	cmp	r2, #27
   84adc:	f8ca 1008 	str.w	r1, [sl, #8]
   84ae0:	6861      	ldr	r1, [r4, #4]
   84ae2:	f8ca 100c 	str.w	r1, [sl, #12]
   84ae6:	f200 8088 	bhi.w	84bfa <_realloc_r+0x336>
   84aea:	f104 0108 	add.w	r1, r4, #8
   84aee:	f10a 0210 	add.w	r2, sl, #16
   84af2:	6808      	ldr	r0, [r1, #0]
   84af4:	6010      	str	r0, [r2, #0]
   84af6:	6848      	ldr	r0, [r1, #4]
   84af8:	6050      	str	r0, [r2, #4]
   84afa:	6889      	ldr	r1, [r1, #8]
   84afc:	6091      	str	r1, [r2, #8]
   84afe:	ebab 0206 	sub.w	r2, fp, r6
   84b02:	eb0a 0106 	add.w	r1, sl, r6
   84b06:	f042 0201 	orr.w	r2, r2, #1
   84b0a:	6099      	str	r1, [r3, #8]
   84b0c:	604a      	str	r2, [r1, #4]
   84b0e:	f8da 3004 	ldr.w	r3, [sl, #4]
   84b12:	4640      	mov	r0, r8
   84b14:	f003 0301 	and.w	r3, r3, #1
   84b18:	431e      	orrs	r6, r3
   84b1a:	f8ca 6004 	str.w	r6, [sl, #4]
   84b1e:	f7ff fecb 	bl	848b8 <__malloc_unlock>
   84b22:	e742      	b.n	849aa <_realloc_r+0xe6>
   84b24:	6823      	ldr	r3, [r4, #0]
   84b26:	2a1b      	cmp	r2, #27
   84b28:	6003      	str	r3, [r0, #0]
   84b2a:	6863      	ldr	r3, [r4, #4]
   84b2c:	6043      	str	r3, [r0, #4]
   84b2e:	d827      	bhi.n	84b80 <_realloc_r+0x2bc>
   84b30:	f100 0308 	add.w	r3, r0, #8
   84b34:	f104 0208 	add.w	r2, r4, #8
   84b38:	e70b      	b.n	84952 <_realloc_r+0x8e>
   84b3a:	4620      	mov	r0, r4
   84b3c:	462a      	mov	r2, r5
   84b3e:	6801      	ldr	r1, [r0, #0]
   84b40:	461f      	mov	r7, r3
   84b42:	6011      	str	r1, [r2, #0]
   84b44:	6841      	ldr	r1, [r0, #4]
   84b46:	46d1      	mov	r9, sl
   84b48:	6051      	str	r1, [r2, #4]
   84b4a:	6883      	ldr	r3, [r0, #8]
   84b4c:	6093      	str	r3, [r2, #8]
   84b4e:	e719      	b.n	84984 <_realloc_r+0xc0>
   84b50:	ebab 0b06 	sub.w	fp, fp, r6
   84b54:	eb09 0106 	add.w	r1, r9, r6
   84b58:	f04b 0201 	orr.w	r2, fp, #1
   84b5c:	6099      	str	r1, [r3, #8]
   84b5e:	604a      	str	r2, [r1, #4]
   84b60:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84b64:	4640      	mov	r0, r8
   84b66:	f003 0301 	and.w	r3, r3, #1
   84b6a:	431e      	orrs	r6, r3
   84b6c:	f844 6c04 	str.w	r6, [r4, #-4]
   84b70:	f7ff fea2 	bl	848b8 <__malloc_unlock>
   84b74:	4625      	mov	r5, r4
   84b76:	e718      	b.n	849aa <_realloc_r+0xe6>
   84b78:	4621      	mov	r1, r4
   84b7a:	f7ff fe33 	bl	847e4 <memmove>
   84b7e:	e6ee      	b.n	8495e <_realloc_r+0x9a>
   84b80:	68a3      	ldr	r3, [r4, #8]
   84b82:	2a24      	cmp	r2, #36	; 0x24
   84b84:	6083      	str	r3, [r0, #8]
   84b86:	68e3      	ldr	r3, [r4, #12]
   84b88:	60c3      	str	r3, [r0, #12]
   84b8a:	d018      	beq.n	84bbe <_realloc_r+0x2fa>
   84b8c:	f100 0310 	add.w	r3, r0, #16
   84b90:	f104 0210 	add.w	r2, r4, #16
   84b94:	e6dd      	b.n	84952 <_realloc_r+0x8e>
   84b96:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84b9a:	4625      	mov	r5, r4
   84b9c:	f023 0303 	bic.w	r3, r3, #3
   84ba0:	441f      	add	r7, r3
   84ba2:	e6ef      	b.n	84984 <_realloc_r+0xc0>
   84ba4:	68a1      	ldr	r1, [r4, #8]
   84ba6:	2a24      	cmp	r2, #36	; 0x24
   84ba8:	f8ca 1010 	str.w	r1, [sl, #16]
   84bac:	68e1      	ldr	r1, [r4, #12]
   84bae:	f8ca 1014 	str.w	r1, [sl, #20]
   84bb2:	d00d      	beq.n	84bd0 <_realloc_r+0x30c>
   84bb4:	f104 0010 	add.w	r0, r4, #16
   84bb8:	f10a 0218 	add.w	r2, sl, #24
   84bbc:	e7bf      	b.n	84b3e <_realloc_r+0x27a>
   84bbe:	6922      	ldr	r2, [r4, #16]
   84bc0:	f100 0318 	add.w	r3, r0, #24
   84bc4:	6102      	str	r2, [r0, #16]
   84bc6:	6961      	ldr	r1, [r4, #20]
   84bc8:	f104 0218 	add.w	r2, r4, #24
   84bcc:	6141      	str	r1, [r0, #20]
   84bce:	e6c0      	b.n	84952 <_realloc_r+0x8e>
   84bd0:	6922      	ldr	r2, [r4, #16]
   84bd2:	f104 0018 	add.w	r0, r4, #24
   84bd6:	f8ca 2018 	str.w	r2, [sl, #24]
   84bda:	6961      	ldr	r1, [r4, #20]
   84bdc:	f10a 0220 	add.w	r2, sl, #32
   84be0:	f8ca 101c 	str.w	r1, [sl, #28]
   84be4:	e7ab      	b.n	84b3e <_realloc_r+0x27a>
   84be6:	4621      	mov	r1, r4
   84be8:	462a      	mov	r2, r5
   84bea:	e782      	b.n	84af2 <_realloc_r+0x22e>
   84bec:	4621      	mov	r1, r4
   84bee:	4628      	mov	r0, r5
   84bf0:	9301      	str	r3, [sp, #4]
   84bf2:	f7ff fdf7 	bl	847e4 <memmove>
   84bf6:	9b01      	ldr	r3, [sp, #4]
   84bf8:	e781      	b.n	84afe <_realloc_r+0x23a>
   84bfa:	68a1      	ldr	r1, [r4, #8]
   84bfc:	2a24      	cmp	r2, #36	; 0x24
   84bfe:	f8ca 1010 	str.w	r1, [sl, #16]
   84c02:	68e1      	ldr	r1, [r4, #12]
   84c04:	f8ca 1014 	str.w	r1, [sl, #20]
   84c08:	d006      	beq.n	84c18 <_realloc_r+0x354>
   84c0a:	f104 0110 	add.w	r1, r4, #16
   84c0e:	f10a 0218 	add.w	r2, sl, #24
   84c12:	e76e      	b.n	84af2 <_realloc_r+0x22e>
   84c14:	200706e0 	.word	0x200706e0
   84c18:	6922      	ldr	r2, [r4, #16]
   84c1a:	f104 0118 	add.w	r1, r4, #24
   84c1e:	f8ca 2018 	str.w	r2, [sl, #24]
   84c22:	6960      	ldr	r0, [r4, #20]
   84c24:	f10a 0220 	add.w	r2, sl, #32
   84c28:	f8ca 001c 	str.w	r0, [sl, #28]
   84c2c:	e761      	b.n	84af2 <_realloc_r+0x22e>
   84c2e:	bf00      	nop

00084c30 <_sbrk_r>:
   84c30:	b538      	push	{r3, r4, r5, lr}
   84c32:	2300      	movs	r3, #0
   84c34:	4c06      	ldr	r4, [pc, #24]	; (84c50 <_sbrk_r+0x20>)
   84c36:	4605      	mov	r5, r0
   84c38:	4608      	mov	r0, r1
   84c3a:	6023      	str	r3, [r4, #0]
   84c3c:	f7fd fbf4 	bl	82428 <_sbrk>
   84c40:	1c43      	adds	r3, r0, #1
   84c42:	d000      	beq.n	84c46 <_sbrk_r+0x16>
   84c44:	bd38      	pop	{r3, r4, r5, pc}
   84c46:	6823      	ldr	r3, [r4, #0]
   84c48:	2b00      	cmp	r3, #0
   84c4a:	d0fb      	beq.n	84c44 <_sbrk_r+0x14>
   84c4c:	602b      	str	r3, [r5, #0]
   84c4e:	bd38      	pop	{r3, r4, r5, pc}
   84c50:	2007ad2c 	.word	0x2007ad2c

00084c54 <__sread>:
   84c54:	b510      	push	{r4, lr}
   84c56:	460c      	mov	r4, r1
   84c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84c5c:	f000 f9f4 	bl	85048 <_read_r>
   84c60:	2800      	cmp	r0, #0
   84c62:	db03      	blt.n	84c6c <__sread+0x18>
   84c64:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84c66:	4403      	add	r3, r0
   84c68:	6523      	str	r3, [r4, #80]	; 0x50
   84c6a:	bd10      	pop	{r4, pc}
   84c6c:	89a3      	ldrh	r3, [r4, #12]
   84c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84c72:	81a3      	strh	r3, [r4, #12]
   84c74:	bd10      	pop	{r4, pc}
   84c76:	bf00      	nop

00084c78 <__swrite>:
   84c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84c7c:	460c      	mov	r4, r1
   84c7e:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84c82:	461f      	mov	r7, r3
   84c84:	05cb      	lsls	r3, r1, #23
   84c86:	4616      	mov	r6, r2
   84c88:	4605      	mov	r5, r0
   84c8a:	d507      	bpl.n	84c9c <__swrite+0x24>
   84c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84c90:	2302      	movs	r3, #2
   84c92:	2200      	movs	r2, #0
   84c94:	f000 f9c2 	bl	8501c <_lseek_r>
   84c98:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84c9c:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84ca0:	81a1      	strh	r1, [r4, #12]
   84ca2:	463b      	mov	r3, r7
   84ca4:	4632      	mov	r2, r6
   84ca6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84caa:	4628      	mov	r0, r5
   84cac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84cb0:	f000 b8a2 	b.w	84df8 <_write_r>

00084cb4 <__sseek>:
   84cb4:	b510      	push	{r4, lr}
   84cb6:	460c      	mov	r4, r1
   84cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84cbc:	f000 f9ae 	bl	8501c <_lseek_r>
   84cc0:	89a3      	ldrh	r3, [r4, #12]
   84cc2:	1c42      	adds	r2, r0, #1
   84cc4:	bf0e      	itee	eq
   84cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84cce:	6520      	strne	r0, [r4, #80]	; 0x50
   84cd0:	81a3      	strh	r3, [r4, #12]
   84cd2:	bd10      	pop	{r4, pc}

00084cd4 <__sclose>:
   84cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84cd8:	f000 b906 	b.w	84ee8 <_close_r>

00084cdc <__swbuf_r>:
   84cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84cde:	460d      	mov	r5, r1
   84ce0:	4614      	mov	r4, r2
   84ce2:	4606      	mov	r6, r0
   84ce4:	b110      	cbz	r0, 84cec <__swbuf_r+0x10>
   84ce6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84ce8:	2b00      	cmp	r3, #0
   84cea:	d04b      	beq.n	84d84 <__swbuf_r+0xa8>
   84cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84cf0:	69a3      	ldr	r3, [r4, #24]
   84cf2:	b291      	uxth	r1, r2
   84cf4:	0708      	lsls	r0, r1, #28
   84cf6:	60a3      	str	r3, [r4, #8]
   84cf8:	d539      	bpl.n	84d6e <__swbuf_r+0x92>
   84cfa:	6923      	ldr	r3, [r4, #16]
   84cfc:	2b00      	cmp	r3, #0
   84cfe:	d036      	beq.n	84d6e <__swbuf_r+0x92>
   84d00:	b2ed      	uxtb	r5, r5
   84d02:	0489      	lsls	r1, r1, #18
   84d04:	462f      	mov	r7, r5
   84d06:	d515      	bpl.n	84d34 <__swbuf_r+0x58>
   84d08:	6822      	ldr	r2, [r4, #0]
   84d0a:	6961      	ldr	r1, [r4, #20]
   84d0c:	1ad3      	subs	r3, r2, r3
   84d0e:	428b      	cmp	r3, r1
   84d10:	da1c      	bge.n	84d4c <__swbuf_r+0x70>
   84d12:	3301      	adds	r3, #1
   84d14:	68a1      	ldr	r1, [r4, #8]
   84d16:	1c50      	adds	r0, r2, #1
   84d18:	3901      	subs	r1, #1
   84d1a:	60a1      	str	r1, [r4, #8]
   84d1c:	6020      	str	r0, [r4, #0]
   84d1e:	7015      	strb	r5, [r2, #0]
   84d20:	6962      	ldr	r2, [r4, #20]
   84d22:	429a      	cmp	r2, r3
   84d24:	d01a      	beq.n	84d5c <__swbuf_r+0x80>
   84d26:	89a3      	ldrh	r3, [r4, #12]
   84d28:	07db      	lsls	r3, r3, #31
   84d2a:	d501      	bpl.n	84d30 <__swbuf_r+0x54>
   84d2c:	2d0a      	cmp	r5, #10
   84d2e:	d015      	beq.n	84d5c <__swbuf_r+0x80>
   84d30:	4638      	mov	r0, r7
   84d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84d34:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84d36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84d3a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84d3e:	81a2      	strh	r2, [r4, #12]
   84d40:	6822      	ldr	r2, [r4, #0]
   84d42:	6661      	str	r1, [r4, #100]	; 0x64
   84d44:	6961      	ldr	r1, [r4, #20]
   84d46:	1ad3      	subs	r3, r2, r3
   84d48:	428b      	cmp	r3, r1
   84d4a:	dbe2      	blt.n	84d12 <__swbuf_r+0x36>
   84d4c:	4621      	mov	r1, r4
   84d4e:	4630      	mov	r0, r6
   84d50:	f7fe fdae 	bl	838b0 <_fflush_r>
   84d54:	b940      	cbnz	r0, 84d68 <__swbuf_r+0x8c>
   84d56:	2301      	movs	r3, #1
   84d58:	6822      	ldr	r2, [r4, #0]
   84d5a:	e7db      	b.n	84d14 <__swbuf_r+0x38>
   84d5c:	4621      	mov	r1, r4
   84d5e:	4630      	mov	r0, r6
   84d60:	f7fe fda6 	bl	838b0 <_fflush_r>
   84d64:	2800      	cmp	r0, #0
   84d66:	d0e3      	beq.n	84d30 <__swbuf_r+0x54>
   84d68:	f04f 37ff 	mov.w	r7, #4294967295
   84d6c:	e7e0      	b.n	84d30 <__swbuf_r+0x54>
   84d6e:	4621      	mov	r1, r4
   84d70:	4630      	mov	r0, r6
   84d72:	f7fe fc8d 	bl	83690 <__swsetup_r>
   84d76:	2800      	cmp	r0, #0
   84d78:	d1f6      	bne.n	84d68 <__swbuf_r+0x8c>
   84d7a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84d7e:	6923      	ldr	r3, [r4, #16]
   84d80:	b291      	uxth	r1, r2
   84d82:	e7bd      	b.n	84d00 <__swbuf_r+0x24>
   84d84:	f7fe fdec 	bl	83960 <__sinit>
   84d88:	e7b0      	b.n	84cec <__swbuf_r+0x10>
   84d8a:	bf00      	nop

00084d8c <_wcrtomb_r>:
   84d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   84d8e:	4606      	mov	r6, r0
   84d90:	b085      	sub	sp, #20
   84d92:	461f      	mov	r7, r3
   84d94:	b189      	cbz	r1, 84dba <_wcrtomb_r+0x2e>
   84d96:	4c10      	ldr	r4, [pc, #64]	; (84dd8 <_wcrtomb_r+0x4c>)
   84d98:	4d10      	ldr	r5, [pc, #64]	; (84ddc <_wcrtomb_r+0x50>)
   84d9a:	6824      	ldr	r4, [r4, #0]
   84d9c:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84d9e:	2c00      	cmp	r4, #0
   84da0:	bf08      	it	eq
   84da2:	462c      	moveq	r4, r5
   84da4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84da8:	47a0      	blx	r4
   84daa:	1c43      	adds	r3, r0, #1
   84dac:	d103      	bne.n	84db6 <_wcrtomb_r+0x2a>
   84dae:	2200      	movs	r2, #0
   84db0:	238a      	movs	r3, #138	; 0x8a
   84db2:	603a      	str	r2, [r7, #0]
   84db4:	6033      	str	r3, [r6, #0]
   84db6:	b005      	add	sp, #20
   84db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84dba:	460c      	mov	r4, r1
   84dbc:	4a06      	ldr	r2, [pc, #24]	; (84dd8 <_wcrtomb_r+0x4c>)
   84dbe:	4d07      	ldr	r5, [pc, #28]	; (84ddc <_wcrtomb_r+0x50>)
   84dc0:	6811      	ldr	r1, [r2, #0]
   84dc2:	4622      	mov	r2, r4
   84dc4:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84dc6:	a901      	add	r1, sp, #4
   84dc8:	2c00      	cmp	r4, #0
   84dca:	bf08      	it	eq
   84dcc:	462c      	moveq	r4, r5
   84dce:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84dd2:	47a0      	blx	r4
   84dd4:	e7e9      	b.n	84daa <_wcrtomb_r+0x1e>
   84dd6:	bf00      	nop
   84dd8:	20070140 	.word	0x20070140
   84ddc:	20070574 	.word	0x20070574

00084de0 <__ascii_wctomb>:
   84de0:	b119      	cbz	r1, 84dea <__ascii_wctomb+0xa>
   84de2:	2aff      	cmp	r2, #255	; 0xff
   84de4:	d803      	bhi.n	84dee <__ascii_wctomb+0xe>
   84de6:	700a      	strb	r2, [r1, #0]
   84de8:	2101      	movs	r1, #1
   84dea:	4608      	mov	r0, r1
   84dec:	4770      	bx	lr
   84dee:	238a      	movs	r3, #138	; 0x8a
   84df0:	f04f 31ff 	mov.w	r1, #4294967295
   84df4:	6003      	str	r3, [r0, #0]
   84df6:	e7f8      	b.n	84dea <__ascii_wctomb+0xa>

00084df8 <_write_r>:
   84df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84dfa:	460e      	mov	r6, r1
   84dfc:	2500      	movs	r5, #0
   84dfe:	4c08      	ldr	r4, [pc, #32]	; (84e20 <_write_r+0x28>)
   84e00:	4611      	mov	r1, r2
   84e02:	4607      	mov	r7, r0
   84e04:	461a      	mov	r2, r3
   84e06:	4630      	mov	r0, r6
   84e08:	6025      	str	r5, [r4, #0]
   84e0a:	f7fb fa35 	bl	80278 <_write>
   84e0e:	1c43      	adds	r3, r0, #1
   84e10:	d000      	beq.n	84e14 <_write_r+0x1c>
   84e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e14:	6823      	ldr	r3, [r4, #0]
   84e16:	2b00      	cmp	r3, #0
   84e18:	d0fb      	beq.n	84e12 <_write_r+0x1a>
   84e1a:	603b      	str	r3, [r7, #0]
   84e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e1e:	bf00      	nop
   84e20:	2007ad2c 	.word	0x2007ad2c

00084e24 <__register_exitproc>:
   84e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84e28:	4d2c      	ldr	r5, [pc, #176]	; (84edc <__register_exitproc+0xb8>)
   84e2a:	4606      	mov	r6, r0
   84e2c:	6828      	ldr	r0, [r5, #0]
   84e2e:	4698      	mov	r8, r3
   84e30:	460f      	mov	r7, r1
   84e32:	4691      	mov	r9, r2
   84e34:	f7ff f954 	bl	840e0 <__retarget_lock_acquire_recursive>
   84e38:	4b29      	ldr	r3, [pc, #164]	; (84ee0 <__register_exitproc+0xbc>)
   84e3a:	681c      	ldr	r4, [r3, #0]
   84e3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84e40:	2b00      	cmp	r3, #0
   84e42:	d03e      	beq.n	84ec2 <__register_exitproc+0x9e>
   84e44:	685a      	ldr	r2, [r3, #4]
   84e46:	2a1f      	cmp	r2, #31
   84e48:	dc1c      	bgt.n	84e84 <__register_exitproc+0x60>
   84e4a:	f102 0e01 	add.w	lr, r2, #1
   84e4e:	b176      	cbz	r6, 84e6e <__register_exitproc+0x4a>
   84e50:	2101      	movs	r1, #1
   84e52:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84e56:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84e5a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84e5e:	4091      	lsls	r1, r2
   84e60:	4308      	orrs	r0, r1
   84e62:	2e02      	cmp	r6, #2
   84e64:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84e68:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84e6c:	d023      	beq.n	84eb6 <__register_exitproc+0x92>
   84e6e:	3202      	adds	r2, #2
   84e70:	f8c3 e004 	str.w	lr, [r3, #4]
   84e74:	6828      	ldr	r0, [r5, #0]
   84e76:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84e7a:	f7ff f933 	bl	840e4 <__retarget_lock_release_recursive>
   84e7e:	2000      	movs	r0, #0
   84e80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84e84:	4b17      	ldr	r3, [pc, #92]	; (84ee4 <__register_exitproc+0xc0>)
   84e86:	b30b      	cbz	r3, 84ecc <__register_exitproc+0xa8>
   84e88:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84e8c:	f7ff f9a4 	bl	841d8 <malloc>
   84e90:	4603      	mov	r3, r0
   84e92:	b1d8      	cbz	r0, 84ecc <__register_exitproc+0xa8>
   84e94:	2000      	movs	r0, #0
   84e96:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84e9a:	f04f 0e01 	mov.w	lr, #1
   84e9e:	6058      	str	r0, [r3, #4]
   84ea0:	6019      	str	r1, [r3, #0]
   84ea2:	4602      	mov	r2, r0
   84ea4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84ea8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84eac:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84eb0:	2e00      	cmp	r6, #0
   84eb2:	d0dc      	beq.n	84e6e <__register_exitproc+0x4a>
   84eb4:	e7cc      	b.n	84e50 <__register_exitproc+0x2c>
   84eb6:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84eba:	4301      	orrs	r1, r0
   84ebc:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84ec0:	e7d5      	b.n	84e6e <__register_exitproc+0x4a>
   84ec2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84ec6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84eca:	e7bb      	b.n	84e44 <__register_exitproc+0x20>
   84ecc:	6828      	ldr	r0, [r5, #0]
   84ece:	f7ff f909 	bl	840e4 <__retarget_lock_release_recursive>
   84ed2:	f04f 30ff 	mov.w	r0, #4294967295
   84ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84eda:	bf00      	nop
   84edc:	20070570 	.word	0x20070570
   84ee0:	000853cc 	.word	0x000853cc
   84ee4:	000841d9 	.word	0x000841d9

00084ee8 <_close_r>:
   84ee8:	b538      	push	{r3, r4, r5, lr}
   84eea:	2300      	movs	r3, #0
   84eec:	4c06      	ldr	r4, [pc, #24]	; (84f08 <_close_r+0x20>)
   84eee:	4605      	mov	r5, r0
   84ef0:	4608      	mov	r0, r1
   84ef2:	6023      	str	r3, [r4, #0]
   84ef4:	f7fd fab4 	bl	82460 <_close>
   84ef8:	1c43      	adds	r3, r0, #1
   84efa:	d000      	beq.n	84efe <_close_r+0x16>
   84efc:	bd38      	pop	{r3, r4, r5, pc}
   84efe:	6823      	ldr	r3, [r4, #0]
   84f00:	2b00      	cmp	r3, #0
   84f02:	d0fb      	beq.n	84efc <_close_r+0x14>
   84f04:	602b      	str	r3, [r5, #0]
   84f06:	bd38      	pop	{r3, r4, r5, pc}
   84f08:	2007ad2c 	.word	0x2007ad2c

00084f0c <_fclose_r>:
   84f0c:	b570      	push	{r4, r5, r6, lr}
   84f0e:	b159      	cbz	r1, 84f28 <_fclose_r+0x1c>
   84f10:	4605      	mov	r5, r0
   84f12:	460c      	mov	r4, r1
   84f14:	b110      	cbz	r0, 84f1c <_fclose_r+0x10>
   84f16:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84f18:	2b00      	cmp	r3, #0
   84f1a:	d03c      	beq.n	84f96 <_fclose_r+0x8a>
   84f1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84f1e:	07d8      	lsls	r0, r3, #31
   84f20:	d505      	bpl.n	84f2e <_fclose_r+0x22>
   84f22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84f26:	b92b      	cbnz	r3, 84f34 <_fclose_r+0x28>
   84f28:	2600      	movs	r6, #0
   84f2a:	4630      	mov	r0, r6
   84f2c:	bd70      	pop	{r4, r5, r6, pc}
   84f2e:	89a3      	ldrh	r3, [r4, #12]
   84f30:	0599      	lsls	r1, r3, #22
   84f32:	d53c      	bpl.n	84fae <_fclose_r+0xa2>
   84f34:	4621      	mov	r1, r4
   84f36:	4628      	mov	r0, r5
   84f38:	f7fe fc1e 	bl	83778 <__sflush_r>
   84f3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84f3e:	4606      	mov	r6, r0
   84f40:	b133      	cbz	r3, 84f50 <_fclose_r+0x44>
   84f42:	69e1      	ldr	r1, [r4, #28]
   84f44:	4628      	mov	r0, r5
   84f46:	4798      	blx	r3
   84f48:	2800      	cmp	r0, #0
   84f4a:	bfb8      	it	lt
   84f4c:	f04f 36ff 	movlt.w	r6, #4294967295
   84f50:	89a3      	ldrh	r3, [r4, #12]
   84f52:	061a      	lsls	r2, r3, #24
   84f54:	d422      	bmi.n	84f9c <_fclose_r+0x90>
   84f56:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84f58:	b141      	cbz	r1, 84f6c <_fclose_r+0x60>
   84f5a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84f5e:	4299      	cmp	r1, r3
   84f60:	d002      	beq.n	84f68 <_fclose_r+0x5c>
   84f62:	4628      	mov	r0, r5
   84f64:	f7fe fe22 	bl	83bac <_free_r>
   84f68:	2300      	movs	r3, #0
   84f6a:	6323      	str	r3, [r4, #48]	; 0x30
   84f6c:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84f6e:	b121      	cbz	r1, 84f7a <_fclose_r+0x6e>
   84f70:	4628      	mov	r0, r5
   84f72:	f7fe fe1b 	bl	83bac <_free_r>
   84f76:	2300      	movs	r3, #0
   84f78:	6463      	str	r3, [r4, #68]	; 0x44
   84f7a:	f7fe fd21 	bl	839c0 <__sfp_lock_acquire>
   84f7e:	2200      	movs	r2, #0
   84f80:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84f82:	81a2      	strh	r2, [r4, #12]
   84f84:	07db      	lsls	r3, r3, #31
   84f86:	d50e      	bpl.n	84fa6 <_fclose_r+0x9a>
   84f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84f8a:	f7ff f8a7 	bl	840dc <__retarget_lock_close_recursive>
   84f8e:	f7fe fd1d 	bl	839cc <__sfp_lock_release>
   84f92:	4630      	mov	r0, r6
   84f94:	bd70      	pop	{r4, r5, r6, pc}
   84f96:	f7fe fce3 	bl	83960 <__sinit>
   84f9a:	e7bf      	b.n	84f1c <_fclose_r+0x10>
   84f9c:	6921      	ldr	r1, [r4, #16]
   84f9e:	4628      	mov	r0, r5
   84fa0:	f7fe fe04 	bl	83bac <_free_r>
   84fa4:	e7d7      	b.n	84f56 <_fclose_r+0x4a>
   84fa6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84fa8:	f7ff f89c 	bl	840e4 <__retarget_lock_release_recursive>
   84fac:	e7ec      	b.n	84f88 <_fclose_r+0x7c>
   84fae:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84fb0:	f7ff f896 	bl	840e0 <__retarget_lock_acquire_recursive>
   84fb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84fb8:	2b00      	cmp	r3, #0
   84fba:	d1bb      	bne.n	84f34 <_fclose_r+0x28>
   84fbc:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84fbe:	f016 0601 	ands.w	r6, r6, #1
   84fc2:	d1b1      	bne.n	84f28 <_fclose_r+0x1c>
   84fc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84fc6:	f7ff f88d 	bl	840e4 <__retarget_lock_release_recursive>
   84fca:	4630      	mov	r0, r6
   84fcc:	bd70      	pop	{r4, r5, r6, pc}
   84fce:	bf00      	nop

00084fd0 <_fstat_r>:
   84fd0:	b570      	push	{r4, r5, r6, lr}
   84fd2:	460d      	mov	r5, r1
   84fd4:	2300      	movs	r3, #0
   84fd6:	4c07      	ldr	r4, [pc, #28]	; (84ff4 <_fstat_r+0x24>)
   84fd8:	4606      	mov	r6, r0
   84fda:	4611      	mov	r1, r2
   84fdc:	4628      	mov	r0, r5
   84fde:	6023      	str	r3, [r4, #0]
   84fe0:	f7fd fa41 	bl	82466 <_fstat>
   84fe4:	1c43      	adds	r3, r0, #1
   84fe6:	d000      	beq.n	84fea <_fstat_r+0x1a>
   84fe8:	bd70      	pop	{r4, r5, r6, pc}
   84fea:	6823      	ldr	r3, [r4, #0]
   84fec:	2b00      	cmp	r3, #0
   84fee:	d0fb      	beq.n	84fe8 <_fstat_r+0x18>
   84ff0:	6033      	str	r3, [r6, #0]
   84ff2:	bd70      	pop	{r4, r5, r6, pc}
   84ff4:	2007ad2c 	.word	0x2007ad2c

00084ff8 <_isatty_r>:
   84ff8:	b538      	push	{r3, r4, r5, lr}
   84ffa:	2300      	movs	r3, #0
   84ffc:	4c06      	ldr	r4, [pc, #24]	; (85018 <_isatty_r+0x20>)
   84ffe:	4605      	mov	r5, r0
   85000:	4608      	mov	r0, r1
   85002:	6023      	str	r3, [r4, #0]
   85004:	f7fd fa34 	bl	82470 <_isatty>
   85008:	1c43      	adds	r3, r0, #1
   8500a:	d000      	beq.n	8500e <_isatty_r+0x16>
   8500c:	bd38      	pop	{r3, r4, r5, pc}
   8500e:	6823      	ldr	r3, [r4, #0]
   85010:	2b00      	cmp	r3, #0
   85012:	d0fb      	beq.n	8500c <_isatty_r+0x14>
   85014:	602b      	str	r3, [r5, #0]
   85016:	bd38      	pop	{r3, r4, r5, pc}
   85018:	2007ad2c 	.word	0x2007ad2c

0008501c <_lseek_r>:
   8501c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8501e:	460e      	mov	r6, r1
   85020:	2500      	movs	r5, #0
   85022:	4c08      	ldr	r4, [pc, #32]	; (85044 <_lseek_r+0x28>)
   85024:	4611      	mov	r1, r2
   85026:	4607      	mov	r7, r0
   85028:	461a      	mov	r2, r3
   8502a:	4630      	mov	r0, r6
   8502c:	6025      	str	r5, [r4, #0]
   8502e:	f7fd fa21 	bl	82474 <_lseek>
   85032:	1c43      	adds	r3, r0, #1
   85034:	d000      	beq.n	85038 <_lseek_r+0x1c>
   85036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85038:	6823      	ldr	r3, [r4, #0]
   8503a:	2b00      	cmp	r3, #0
   8503c:	d0fb      	beq.n	85036 <_lseek_r+0x1a>
   8503e:	603b      	str	r3, [r7, #0]
   85040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85042:	bf00      	nop
   85044:	2007ad2c 	.word	0x2007ad2c

00085048 <_read_r>:
   85048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8504a:	460e      	mov	r6, r1
   8504c:	2500      	movs	r5, #0
   8504e:	4c08      	ldr	r4, [pc, #32]	; (85070 <_read_r+0x28>)
   85050:	4611      	mov	r1, r2
   85052:	4607      	mov	r7, r0
   85054:	461a      	mov	r2, r3
   85056:	4630      	mov	r0, r6
   85058:	6025      	str	r5, [r4, #0]
   8505a:	f7fb f8ef 	bl	8023c <_read>
   8505e:	1c43      	adds	r3, r0, #1
   85060:	d000      	beq.n	85064 <_read_r+0x1c>
   85062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85064:	6823      	ldr	r3, [r4, #0]
   85066:	2b00      	cmp	r3, #0
   85068:	d0fb      	beq.n	85062 <_read_r+0x1a>
   8506a:	603b      	str	r3, [r7, #0]
   8506c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8506e:	bf00      	nop
   85070:	2007ad2c 	.word	0x2007ad2c

00085074 <__aeabi_uldivmod>:
   85074:	b953      	cbnz	r3, 8508c <__aeabi_uldivmod+0x18>
   85076:	b94a      	cbnz	r2, 8508c <__aeabi_uldivmod+0x18>
   85078:	2900      	cmp	r1, #0
   8507a:	bf08      	it	eq
   8507c:	2800      	cmpeq	r0, #0
   8507e:	bf1c      	itt	ne
   85080:	f04f 31ff 	movne.w	r1, #4294967295
   85084:	f04f 30ff 	movne.w	r0, #4294967295
   85088:	f000 b97a 	b.w	85380 <__aeabi_idiv0>
   8508c:	f1ad 0c08 	sub.w	ip, sp, #8
   85090:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   85094:	f000 f806 	bl	850a4 <__udivmoddi4>
   85098:	f8dd e004 	ldr.w	lr, [sp, #4]
   8509c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   850a0:	b004      	add	sp, #16
   850a2:	4770      	bx	lr

000850a4 <__udivmoddi4>:
   850a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   850a8:	468c      	mov	ip, r1
   850aa:	460e      	mov	r6, r1
   850ac:	4604      	mov	r4, r0
   850ae:	9d08      	ldr	r5, [sp, #32]
   850b0:	2b00      	cmp	r3, #0
   850b2:	d150      	bne.n	85156 <__udivmoddi4+0xb2>
   850b4:	428a      	cmp	r2, r1
   850b6:	4617      	mov	r7, r2
   850b8:	d96c      	bls.n	85194 <__udivmoddi4+0xf0>
   850ba:	fab2 fe82 	clz	lr, r2
   850be:	f1be 0f00 	cmp.w	lr, #0
   850c2:	d00b      	beq.n	850dc <__udivmoddi4+0x38>
   850c4:	f1ce 0c20 	rsb	ip, lr, #32
   850c8:	fa01 f60e 	lsl.w	r6, r1, lr
   850cc:	fa20 fc0c 	lsr.w	ip, r0, ip
   850d0:	fa02 f70e 	lsl.w	r7, r2, lr
   850d4:	ea4c 0c06 	orr.w	ip, ip, r6
   850d8:	fa00 f40e 	lsl.w	r4, r0, lr
   850dc:	0c3a      	lsrs	r2, r7, #16
   850de:	fbbc f9f2 	udiv	r9, ip, r2
   850e2:	b2bb      	uxth	r3, r7
   850e4:	fb02 cc19 	mls	ip, r2, r9, ip
   850e8:	fb09 fa03 	mul.w	sl, r9, r3
   850ec:	ea4f 4814 	mov.w	r8, r4, lsr #16
   850f0:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   850f4:	45b2      	cmp	sl, r6
   850f6:	d90a      	bls.n	8510e <__udivmoddi4+0x6a>
   850f8:	19f6      	adds	r6, r6, r7
   850fa:	f109 31ff 	add.w	r1, r9, #4294967295
   850fe:	f080 8125 	bcs.w	8534c <__udivmoddi4+0x2a8>
   85102:	45b2      	cmp	sl, r6
   85104:	f240 8122 	bls.w	8534c <__udivmoddi4+0x2a8>
   85108:	f1a9 0902 	sub.w	r9, r9, #2
   8510c:	443e      	add	r6, r7
   8510e:	eba6 060a 	sub.w	r6, r6, sl
   85112:	fbb6 f0f2 	udiv	r0, r6, r2
   85116:	fb02 6610 	mls	r6, r2, r0, r6
   8511a:	fb00 f303 	mul.w	r3, r0, r3
   8511e:	b2a4      	uxth	r4, r4
   85120:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   85124:	42a3      	cmp	r3, r4
   85126:	d909      	bls.n	8513c <__udivmoddi4+0x98>
   85128:	19e4      	adds	r4, r4, r7
   8512a:	f100 32ff 	add.w	r2, r0, #4294967295
   8512e:	f080 810b 	bcs.w	85348 <__udivmoddi4+0x2a4>
   85132:	42a3      	cmp	r3, r4
   85134:	f240 8108 	bls.w	85348 <__udivmoddi4+0x2a4>
   85138:	3802      	subs	r0, #2
   8513a:	443c      	add	r4, r7
   8513c:	2100      	movs	r1, #0
   8513e:	1ae4      	subs	r4, r4, r3
   85140:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85144:	2d00      	cmp	r5, #0
   85146:	d062      	beq.n	8520e <__udivmoddi4+0x16a>
   85148:	2300      	movs	r3, #0
   8514a:	fa24 f40e 	lsr.w	r4, r4, lr
   8514e:	602c      	str	r4, [r5, #0]
   85150:	606b      	str	r3, [r5, #4]
   85152:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85156:	428b      	cmp	r3, r1
   85158:	d907      	bls.n	8516a <__udivmoddi4+0xc6>
   8515a:	2d00      	cmp	r5, #0
   8515c:	d055      	beq.n	8520a <__udivmoddi4+0x166>
   8515e:	2100      	movs	r1, #0
   85160:	e885 0041 	stmia.w	r5, {r0, r6}
   85164:	4608      	mov	r0, r1
   85166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8516a:	fab3 f183 	clz	r1, r3
   8516e:	2900      	cmp	r1, #0
   85170:	f040 808f 	bne.w	85292 <__udivmoddi4+0x1ee>
   85174:	42b3      	cmp	r3, r6
   85176:	d302      	bcc.n	8517e <__udivmoddi4+0xda>
   85178:	4282      	cmp	r2, r0
   8517a:	f200 80fc 	bhi.w	85376 <__udivmoddi4+0x2d2>
   8517e:	1a84      	subs	r4, r0, r2
   85180:	eb66 0603 	sbc.w	r6, r6, r3
   85184:	2001      	movs	r0, #1
   85186:	46b4      	mov	ip, r6
   85188:	2d00      	cmp	r5, #0
   8518a:	d040      	beq.n	8520e <__udivmoddi4+0x16a>
   8518c:	e885 1010 	stmia.w	r5, {r4, ip}
   85190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85194:	b912      	cbnz	r2, 8519c <__udivmoddi4+0xf8>
   85196:	2701      	movs	r7, #1
   85198:	fbb7 f7f2 	udiv	r7, r7, r2
   8519c:	fab7 fe87 	clz	lr, r7
   851a0:	f1be 0f00 	cmp.w	lr, #0
   851a4:	d135      	bne.n	85212 <__udivmoddi4+0x16e>
   851a6:	2101      	movs	r1, #1
   851a8:	1bf6      	subs	r6, r6, r7
   851aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   851ae:	fa1f f887 	uxth.w	r8, r7
   851b2:	fbb6 f2fc 	udiv	r2, r6, ip
   851b6:	fb0c 6612 	mls	r6, ip, r2, r6
   851ba:	fb08 f002 	mul.w	r0, r8, r2
   851be:	0c23      	lsrs	r3, r4, #16
   851c0:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   851c4:	42b0      	cmp	r0, r6
   851c6:	d907      	bls.n	851d8 <__udivmoddi4+0x134>
   851c8:	19f6      	adds	r6, r6, r7
   851ca:	f102 33ff 	add.w	r3, r2, #4294967295
   851ce:	d202      	bcs.n	851d6 <__udivmoddi4+0x132>
   851d0:	42b0      	cmp	r0, r6
   851d2:	f200 80d2 	bhi.w	8537a <__udivmoddi4+0x2d6>
   851d6:	461a      	mov	r2, r3
   851d8:	1a36      	subs	r6, r6, r0
   851da:	fbb6 f0fc 	udiv	r0, r6, ip
   851de:	fb0c 6610 	mls	r6, ip, r0, r6
   851e2:	fb08 f800 	mul.w	r8, r8, r0
   851e6:	b2a3      	uxth	r3, r4
   851e8:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   851ec:	45a0      	cmp	r8, r4
   851ee:	d907      	bls.n	85200 <__udivmoddi4+0x15c>
   851f0:	19e4      	adds	r4, r4, r7
   851f2:	f100 33ff 	add.w	r3, r0, #4294967295
   851f6:	d202      	bcs.n	851fe <__udivmoddi4+0x15a>
   851f8:	45a0      	cmp	r8, r4
   851fa:	f200 80b9 	bhi.w	85370 <__udivmoddi4+0x2cc>
   851fe:	4618      	mov	r0, r3
   85200:	eba4 0408 	sub.w	r4, r4, r8
   85204:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85208:	e79c      	b.n	85144 <__udivmoddi4+0xa0>
   8520a:	4629      	mov	r1, r5
   8520c:	4628      	mov	r0, r5
   8520e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85212:	fa07 f70e 	lsl.w	r7, r7, lr
   85216:	f1ce 0320 	rsb	r3, lr, #32
   8521a:	fa26 f203 	lsr.w	r2, r6, r3
   8521e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85222:	fbb2 f1fc 	udiv	r1, r2, ip
   85226:	fa1f f887 	uxth.w	r8, r7
   8522a:	fb0c 2211 	mls	r2, ip, r1, r2
   8522e:	fa06 f60e 	lsl.w	r6, r6, lr
   85232:	fa20 f303 	lsr.w	r3, r0, r3
   85236:	fb01 f908 	mul.w	r9, r1, r8
   8523a:	4333      	orrs	r3, r6
   8523c:	0c1e      	lsrs	r6, r3, #16
   8523e:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85242:	45b1      	cmp	r9, r6
   85244:	fa00 f40e 	lsl.w	r4, r0, lr
   85248:	d909      	bls.n	8525e <__udivmoddi4+0x1ba>
   8524a:	19f6      	adds	r6, r6, r7
   8524c:	f101 32ff 	add.w	r2, r1, #4294967295
   85250:	f080 808c 	bcs.w	8536c <__udivmoddi4+0x2c8>
   85254:	45b1      	cmp	r9, r6
   85256:	f240 8089 	bls.w	8536c <__udivmoddi4+0x2c8>
   8525a:	3902      	subs	r1, #2
   8525c:	443e      	add	r6, r7
   8525e:	eba6 0609 	sub.w	r6, r6, r9
   85262:	fbb6 f0fc 	udiv	r0, r6, ip
   85266:	fb0c 6210 	mls	r2, ip, r0, r6
   8526a:	fb00 f908 	mul.w	r9, r0, r8
   8526e:	b29e      	uxth	r6, r3
   85270:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   85274:	45b1      	cmp	r9, r6
   85276:	d907      	bls.n	85288 <__udivmoddi4+0x1e4>
   85278:	19f6      	adds	r6, r6, r7
   8527a:	f100 33ff 	add.w	r3, r0, #4294967295
   8527e:	d271      	bcs.n	85364 <__udivmoddi4+0x2c0>
   85280:	45b1      	cmp	r9, r6
   85282:	d96f      	bls.n	85364 <__udivmoddi4+0x2c0>
   85284:	3802      	subs	r0, #2
   85286:	443e      	add	r6, r7
   85288:	eba6 0609 	sub.w	r6, r6, r9
   8528c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85290:	e78f      	b.n	851b2 <__udivmoddi4+0x10e>
   85292:	f1c1 0720 	rsb	r7, r1, #32
   85296:	fa22 f807 	lsr.w	r8, r2, r7
   8529a:	408b      	lsls	r3, r1
   8529c:	ea48 0303 	orr.w	r3, r8, r3
   852a0:	fa26 f407 	lsr.w	r4, r6, r7
   852a4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   852a8:	fbb4 f9fe 	udiv	r9, r4, lr
   852ac:	fa1f fc83 	uxth.w	ip, r3
   852b0:	fb0e 4419 	mls	r4, lr, r9, r4
   852b4:	408e      	lsls	r6, r1
   852b6:	fa20 f807 	lsr.w	r8, r0, r7
   852ba:	fb09 fa0c 	mul.w	sl, r9, ip
   852be:	ea48 0806 	orr.w	r8, r8, r6
   852c2:	ea4f 4618 	mov.w	r6, r8, lsr #16
   852c6:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   852ca:	45a2      	cmp	sl, r4
   852cc:	fa02 f201 	lsl.w	r2, r2, r1
   852d0:	fa00 f601 	lsl.w	r6, r0, r1
   852d4:	d908      	bls.n	852e8 <__udivmoddi4+0x244>
   852d6:	18e4      	adds	r4, r4, r3
   852d8:	f109 30ff 	add.w	r0, r9, #4294967295
   852dc:	d244      	bcs.n	85368 <__udivmoddi4+0x2c4>
   852de:	45a2      	cmp	sl, r4
   852e0:	d942      	bls.n	85368 <__udivmoddi4+0x2c4>
   852e2:	f1a9 0902 	sub.w	r9, r9, #2
   852e6:	441c      	add	r4, r3
   852e8:	eba4 040a 	sub.w	r4, r4, sl
   852ec:	fbb4 f0fe 	udiv	r0, r4, lr
   852f0:	fb0e 4410 	mls	r4, lr, r0, r4
   852f4:	fb00 fc0c 	mul.w	ip, r0, ip
   852f8:	fa1f f888 	uxth.w	r8, r8
   852fc:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85300:	45a4      	cmp	ip, r4
   85302:	d907      	bls.n	85314 <__udivmoddi4+0x270>
   85304:	18e4      	adds	r4, r4, r3
   85306:	f100 3eff 	add.w	lr, r0, #4294967295
   8530a:	d229      	bcs.n	85360 <__udivmoddi4+0x2bc>
   8530c:	45a4      	cmp	ip, r4
   8530e:	d927      	bls.n	85360 <__udivmoddi4+0x2bc>
   85310:	3802      	subs	r0, #2
   85312:	441c      	add	r4, r3
   85314:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85318:	fba0 8902 	umull	r8, r9, r0, r2
   8531c:	eba4 0c0c 	sub.w	ip, r4, ip
   85320:	45cc      	cmp	ip, r9
   85322:	46c2      	mov	sl, r8
   85324:	46ce      	mov	lr, r9
   85326:	d315      	bcc.n	85354 <__udivmoddi4+0x2b0>
   85328:	d012      	beq.n	85350 <__udivmoddi4+0x2ac>
   8532a:	b155      	cbz	r5, 85342 <__udivmoddi4+0x29e>
   8532c:	ebb6 030a 	subs.w	r3, r6, sl
   85330:	eb6c 060e 	sbc.w	r6, ip, lr
   85334:	fa06 f707 	lsl.w	r7, r6, r7
   85338:	40cb      	lsrs	r3, r1
   8533a:	431f      	orrs	r7, r3
   8533c:	40ce      	lsrs	r6, r1
   8533e:	602f      	str	r7, [r5, #0]
   85340:	606e      	str	r6, [r5, #4]
   85342:	2100      	movs	r1, #0
   85344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85348:	4610      	mov	r0, r2
   8534a:	e6f7      	b.n	8513c <__udivmoddi4+0x98>
   8534c:	4689      	mov	r9, r1
   8534e:	e6de      	b.n	8510e <__udivmoddi4+0x6a>
   85350:	4546      	cmp	r6, r8
   85352:	d2ea      	bcs.n	8532a <__udivmoddi4+0x286>
   85354:	ebb8 0a02 	subs.w	sl, r8, r2
   85358:	eb69 0e03 	sbc.w	lr, r9, r3
   8535c:	3801      	subs	r0, #1
   8535e:	e7e4      	b.n	8532a <__udivmoddi4+0x286>
   85360:	4670      	mov	r0, lr
   85362:	e7d7      	b.n	85314 <__udivmoddi4+0x270>
   85364:	4618      	mov	r0, r3
   85366:	e78f      	b.n	85288 <__udivmoddi4+0x1e4>
   85368:	4681      	mov	r9, r0
   8536a:	e7bd      	b.n	852e8 <__udivmoddi4+0x244>
   8536c:	4611      	mov	r1, r2
   8536e:	e776      	b.n	8525e <__udivmoddi4+0x1ba>
   85370:	3802      	subs	r0, #2
   85372:	443c      	add	r4, r7
   85374:	e744      	b.n	85200 <__udivmoddi4+0x15c>
   85376:	4608      	mov	r0, r1
   85378:	e706      	b.n	85188 <__udivmoddi4+0xe4>
   8537a:	3a02      	subs	r2, #2
   8537c:	443e      	add	r6, r7
   8537e:	e72b      	b.n	851d8 <__udivmoddi4+0x134>

00085380 <__aeabi_idiv0>:
   85380:	4770      	bx	lr
   85382:	bf00      	nop
   85384:	00006867 	.word	0x00006867
   85388:	00007325 	.word	0x00007325
   8538c:	736e6f43 	.word	0x736e6f43
   85390:	20656c6f 	.word	0x20656c6f
   85394:	64616572 	.word	0x64616572
   85398:	00000a79 	.word	0x00000a79
   8539c:	3d3d3d3d 	.word	0x3d3d3d3d
   853a0:	3d3d3d3d 	.word	0x3d3d3d3d
   853a4:	3d3d3d3d 	.word	0x3d3d3d3d
   853a8:	00000a3d 	.word	0x00000a3d
   853ac:	6b736174 	.word	0x6b736174
   853b0:	00000031 	.word	0x00000031
   853b4:	6b736174 	.word	0x6b736174
   853b8:	00000032 	.word	0x00000032
   853bc:	454c4449 	.word	0x454c4449
   853c0:	00000000 	.word	0x00000000
   853c4:	20726d54 	.word	0x20726d54
   853c8:	00637653 	.word	0x00637653

000853cc <_global_impure_ptr>:
   853cc:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   853dc:	46454443 00000000 33323130 37363534     CDEF....01234567
   853ec:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   853fc:	0000296c                                l)..

00085400 <blanks.7217>:
   85400:	20202020 20202020 20202020 20202020                     

00085410 <zeroes.7218>:
   85410:	30303030 30303030 30303030 30303030     0000000000000000
   85420:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00085430 <_ctype_>:
   85430:	20202000 20202020 28282020 20282828     .         ((((( 
   85440:	20202020 20202020 20202020 20202020                     
   85450:	10108820 10101010 10101010 10101010      ...............
   85460:	04040410 04040404 10040404 10101010     ................
   85470:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85480:	01010101 01010101 01010101 10101010     ................
   85490:	42421010 42424242 02020202 02020202     ..BBBBBB........
   854a0:	02020202 02020202 02020202 10101010     ................
   854b0:	00000020 00000000 00000000 00000000      ...............
	...

00085534 <_init>:
   85534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85536:	bf00      	nop
   85538:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8553a:	bc08      	pop	{r3}
   8553c:	469e      	mov	lr, r3
   8553e:	4770      	bx	lr

00085540 <__init_array_start>:
   85540:	00083759 	.word	0x00083759

00085544 <__frame_dummy_init_array_entry>:
   85544:	00080119                                ....

00085548 <_fini>:
   85548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8554a:	bf00      	nop
   8554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8554e:	bc08      	pop	{r3}
   85550:	469e      	mov	lr, r3
   85552:	4770      	bx	lr

00085554 <__fini_array_start>:
   85554:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <pVal>:
2007012c:	ffffffff                                ....

20070130 <uxCriticalNesting>:
20070130:	aaaaaaaa                                ....

20070134 <xFreeBytesRemaining>:
20070134:	0000a000                                ....

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	2007ad08                                ... 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00084de1 0008472d 00000000 00085430     .M..-G......0T..
20070664:	0008542c 000853c0 000853c0 000853c0     ,T...S...S...S..
20070674:	000853c0 000853c0 000853c0 000853c0     .S...S...S...S..
20070684:	000853c0 000853c0 ffffffff ffffffff     .S...S..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....


I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056c4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000856c4  000856c4  000156c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b18  20070000  000856cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a304  20070b18  000861e8  00020b18  2**3
                  ALLOC
  4 .stack        00002004  2007ae1c  000904ec  00020b18  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b18  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b41  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001e988  00000000  00000000  00020b9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00004ae8  00000000  00000000  0003f522  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000081b1  00000000  00000000  0004400a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000e58  00000000  00000000  0004c1bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000e58  00000000  00000000  0004d013  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  0001aa90  00000000  00000000  0004de6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00014fe6  00000000  00000000  000688fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a672  00000000  00000000  0007d8e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002e40  00000000  00000000  000e7f54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	20 ce 07 20 71 23 08 00 6d 23 08 00 6d 23 08 00      .. q#..m#..m#..
   80010:	6d 23 08 00 6d 23 08 00 6d 23 08 00 00 00 00 00     m#..m#..m#......
	...
   8002c:	59 05 08 00 6d 23 08 00 00 00 00 00 d9 05 08 00     Y...m#..........
   8003c:	15 06 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     ....m#..m#..m#..
   8004c:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..
   8005c:	6d 23 08 00 6d 23 08 00 6d 23 08 00 00 00 00 00     m#..m#..m#......
   8006c:	e1 21 08 00 f5 21 08 00 09 22 08 00 1d 22 08 00     .!...!..."..."..
	...
   80084:	b1 1c 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     ....m#..m#..m#..
   80094:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..
   800a4:	00 00 00 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     ....m#..m#..m#..
   800b4:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..
   800c4:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..
   800d4:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..
   800e4:	6d 23 08 00 6d 23 08 00 6d 23 08 00 6d 23 08 00     m#..m#..m#..m#..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b18 	.word	0x20070b18
   80110:	00000000 	.word	0x00000000
   80114:	000856cc 	.word	0x000856cc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000856cc 	.word	0x000856cc
   80154:	20070b1c 	.word	0x20070b1c
   80158:	000856cc 	.word	0x000856cc
   8015c:	00000000 	.word	0x00000000

00080160 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80160:	b5f0      	push	{r4, r5, r6, r7, lr}
   80162:	b083      	sub	sp, #12
   80164:	4604      	mov	r4, r0
   80166:	460d      	mov	r5, r1
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b20      	ldr	r3, [pc, #128]	; (801f0 <usart_serial_getchar+0x90>)
   8016e:	4298      	cmp	r0, r3
   80170:	d00d      	beq.n	8018e <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80172:	4b20      	ldr	r3, [pc, #128]	; (801f4 <usart_serial_getchar+0x94>)
   80174:	4298      	cmp	r0, r3
   80176:	d012      	beq.n	8019e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80178:	4b1f      	ldr	r3, [pc, #124]	; (801f8 <usart_serial_getchar+0x98>)
   8017a:	4298      	cmp	r0, r3
   8017c:	d019      	beq.n	801b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8017e:	4b1f      	ldr	r3, [pc, #124]	; (801fc <usart_serial_getchar+0x9c>)
   80180:	429c      	cmp	r4, r3
   80182:	d020      	beq.n	801c6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80184:	4b1e      	ldr	r3, [pc, #120]	; (80200 <usart_serial_getchar+0xa0>)
   80186:	429c      	cmp	r4, r3
   80188:	d027      	beq.n	801da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8018a:	b003      	add	sp, #12
   8018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8018e:	461f      	mov	r7, r3
   80190:	4e1c      	ldr	r6, [pc, #112]	; (80204 <usart_serial_getchar+0xa4>)
   80192:	4629      	mov	r1, r5
   80194:	4638      	mov	r0, r7
   80196:	47b0      	blx	r6
   80198:	2800      	cmp	r0, #0
   8019a:	d1fa      	bne.n	80192 <usart_serial_getchar+0x32>
   8019c:	e7ef      	b.n	8017e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8019e:	461f      	mov	r7, r3
   801a0:	4e19      	ldr	r6, [pc, #100]	; (80208 <usart_serial_getchar+0xa8>)
   801a2:	a901      	add	r1, sp, #4
   801a4:	4638      	mov	r0, r7
   801a6:	47b0      	blx	r6
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	702b      	strb	r3, [r5, #0]
   801b0:	e7e8      	b.n	80184 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   801b2:	461e      	mov	r6, r3
   801b4:	4c14      	ldr	r4, [pc, #80]	; (80208 <usart_serial_getchar+0xa8>)
   801b6:	a901      	add	r1, sp, #4
   801b8:	4630      	mov	r0, r6
   801ba:	47a0      	blx	r4
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   801c0:	9b01      	ldr	r3, [sp, #4]
   801c2:	702b      	strb	r3, [r5, #0]
   801c4:	e7e1      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801c6:	461e      	mov	r6, r3
   801c8:	4c0f      	ldr	r4, [pc, #60]	; (80208 <usart_serial_getchar+0xa8>)
   801ca:	a901      	add	r1, sp, #4
   801cc:	4630      	mov	r0, r6
   801ce:	47a0      	blx	r4
   801d0:	2800      	cmp	r0, #0
   801d2:	d1fa      	bne.n	801ca <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   801d4:	9b01      	ldr	r3, [sp, #4]
   801d6:	702b      	strb	r3, [r5, #0]
   801d8:	e7d7      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801da:	461e      	mov	r6, r3
   801dc:	4c0a      	ldr	r4, [pc, #40]	; (80208 <usart_serial_getchar+0xa8>)
   801de:	a901      	add	r1, sp, #4
   801e0:	4630      	mov	r0, r6
   801e2:	47a0      	blx	r4
   801e4:	2800      	cmp	r0, #0
   801e6:	d1fa      	bne.n	801de <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   801e8:	9b01      	ldr	r3, [sp, #4]
   801ea:	702b      	strb	r3, [r5, #0]
}
   801ec:	e7cd      	b.n	8018a <usart_serial_getchar+0x2a>
   801ee:	bf00      	nop
   801f0:	400e0800 	.word	0x400e0800
   801f4:	40098000 	.word	0x40098000
   801f8:	4009c000 	.word	0x4009c000
   801fc:	400a0000 	.word	0x400a0000
   80200:	400a4000 	.word	0x400a4000
   80204:	00081e6f 	.word	0x00081e6f
   80208:	00081c99 	.word	0x00081c99

0008020c <usart_serial_putchar>:
{
   8020c:	b570      	push	{r4, r5, r6, lr}
   8020e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80210:	4b1e      	ldr	r3, [pc, #120]	; (8028c <usart_serial_putchar+0x80>)
   80212:	4298      	cmp	r0, r3
   80214:	d00d      	beq.n	80232 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80216:	4b1e      	ldr	r3, [pc, #120]	; (80290 <usart_serial_putchar+0x84>)
   80218:	4298      	cmp	r0, r3
   8021a:	d013      	beq.n	80244 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8021c:	4b1d      	ldr	r3, [pc, #116]	; (80294 <usart_serial_putchar+0x88>)
   8021e:	4298      	cmp	r0, r3
   80220:	d019      	beq.n	80256 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80222:	4b1d      	ldr	r3, [pc, #116]	; (80298 <usart_serial_putchar+0x8c>)
   80224:	4298      	cmp	r0, r3
   80226:	d01f      	beq.n	80268 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80228:	4b1c      	ldr	r3, [pc, #112]	; (8029c <usart_serial_putchar+0x90>)
   8022a:	4298      	cmp	r0, r3
   8022c:	d025      	beq.n	8027a <usart_serial_putchar+0x6e>
	return 0;
   8022e:	2000      	movs	r0, #0
}
   80230:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80232:	461e      	mov	r6, r3
   80234:	4d1a      	ldr	r5, [pc, #104]	; (802a0 <usart_serial_putchar+0x94>)
   80236:	4621      	mov	r1, r4
   80238:	4630      	mov	r0, r6
   8023a:	47a8      	blx	r5
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_putchar+0x2a>
		return 1;
   80240:	2001      	movs	r0, #1
   80242:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80244:	461e      	mov	r6, r3
   80246:	4d17      	ldr	r5, [pc, #92]	; (802a4 <usart_serial_putchar+0x98>)
   80248:	4621      	mov	r1, r4
   8024a:	4630      	mov	r0, r6
   8024c:	47a8      	blx	r5
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_putchar+0x3c>
		return 1;
   80252:	2001      	movs	r0, #1
   80254:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80256:	461e      	mov	r6, r3
   80258:	4d12      	ldr	r5, [pc, #72]	; (802a4 <usart_serial_putchar+0x98>)
   8025a:	4621      	mov	r1, r4
   8025c:	4630      	mov	r0, r6
   8025e:	47a8      	blx	r5
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_putchar+0x4e>
		return 1;
   80264:	2001      	movs	r0, #1
   80266:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80268:	461e      	mov	r6, r3
   8026a:	4d0e      	ldr	r5, [pc, #56]	; (802a4 <usart_serial_putchar+0x98>)
   8026c:	4621      	mov	r1, r4
   8026e:	4630      	mov	r0, r6
   80270:	47a8      	blx	r5
   80272:	2800      	cmp	r0, #0
   80274:	d1fa      	bne.n	8026c <usart_serial_putchar+0x60>
		return 1;
   80276:	2001      	movs	r0, #1
   80278:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8027a:	461e      	mov	r6, r3
   8027c:	4d09      	ldr	r5, [pc, #36]	; (802a4 <usart_serial_putchar+0x98>)
   8027e:	4621      	mov	r1, r4
   80280:	4630      	mov	r0, r6
   80282:	47a8      	blx	r5
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_putchar+0x72>
		return 1;
   80288:	2001      	movs	r0, #1
   8028a:	bd70      	pop	{r4, r5, r6, pc}
   8028c:	400e0800 	.word	0x400e0800
   80290:	40098000 	.word	0x40098000
   80294:	4009c000 	.word	0x4009c000
   80298:	400a0000 	.word	0x400a0000
   8029c:	400a4000 	.word	0x400a4000
   802a0:	00081e5f 	.word	0x00081e5f
   802a4:	00081c85 	.word	0x00081c85

000802a8 <console_init>:
#include "console.h"
#include <asf.h>

int console_init(void)
{
   802a8:	b530      	push	{r4, r5, lr}
   802aa:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802ac:	2008      	movs	r0, #8
   802ae:	4d15      	ldr	r5, [pc, #84]	; (80304 <console_init+0x5c>)
   802b0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802b2:	4c15      	ldr	r4, [pc, #84]	; (80308 <console_init+0x60>)
   802b4:	4b15      	ldr	r3, [pc, #84]	; (8030c <console_init+0x64>)
   802b6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802b8:	4a15      	ldr	r2, [pc, #84]	; (80310 <console_init+0x68>)
   802ba:	4b16      	ldr	r3, [pc, #88]	; (80314 <console_init+0x6c>)
   802bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802be:	4a16      	ldr	r2, [pc, #88]	; (80318 <console_init+0x70>)
   802c0:	4b16      	ldr	r3, [pc, #88]	; (8031c <console_init+0x74>)
   802c2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802c4:	4b16      	ldr	r3, [pc, #88]	; (80320 <console_init+0x78>)
   802c6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802cc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802d2:	9303      	str	r3, [sp, #12]
   802d4:	2008      	movs	r0, #8
   802d6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   802d8:	a901      	add	r1, sp, #4
   802da:	4620      	mov	r0, r4
   802dc:	4b11      	ldr	r3, [pc, #68]	; (80324 <console_init+0x7c>)
   802de:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802e0:	4d11      	ldr	r5, [pc, #68]	; (80328 <console_init+0x80>)
   802e2:	682b      	ldr	r3, [r5, #0]
   802e4:	2100      	movs	r1, #0
   802e6:	6898      	ldr	r0, [r3, #8]
   802e8:	4c10      	ldr	r4, [pc, #64]	; (8032c <console_init+0x84>)
   802ea:	47a0      	blx	r4
	setbuf(stdin, NULL);
   802ec:	682b      	ldr	r3, [r5, #0]
   802ee:	2100      	movs	r1, #0
   802f0:	6858      	ldr	r0, [r3, #4]
   802f2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   802f4:	480e      	ldr	r0, [pc, #56]	; (80330 <console_init+0x88>)
   802f6:	4c0f      	ldr	r4, [pc, #60]	; (80334 <console_init+0x8c>)
   802f8:	47a0      	blx	r4
	printf("=============\n");
   802fa:	480f      	ldr	r0, [pc, #60]	; (80338 <console_init+0x90>)
   802fc:	47a0      	blx	r4
	return 0;
   802fe:	2000      	movs	r0, #0
   80300:	b005      	add	sp, #20
   80302:	bd30      	pop	{r4, r5, pc}
   80304:	00082319 	.word	0x00082319
   80308:	400e0800 	.word	0x400e0800
   8030c:	2007adf0 	.word	0x2007adf0
   80310:	0008020d 	.word	0x0008020d
   80314:	2007adec 	.word	0x2007adec
   80318:	00080161 	.word	0x00080161
   8031c:	2007ade8 	.word	0x2007ade8
   80320:	0501bd00 	.word	0x0501bd00
   80324:	00081e29 	.word	0x00081e29
   80328:	2007016c 	.word	0x2007016c
   8032c:	000827d9 	.word	0x000827d9
   80330:	000854bc 	.word	0x000854bc
   80334:	00082629 	.word	0x00082629
   80338:	000854cc 	.word	0x000854cc

0008033c <init_twi>:
/*
*  Setup the Arduino due card as the master on pin 20 and 21 (SDA, SCL) with a fixed transfer rate.
*  The function returns 1 if the master was successfully initialized else 0.
*/
uint8_t init_twi(void)
{
   8033c:	b500      	push	{lr}
   8033e:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_DEF_SPEED;
   80340:	4b09      	ldr	r3, [pc, #36]	; (80368 <init_twi+0x2c>)
   80342:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   80344:	4b09      	ldr	r3, [pc, #36]	; (8036c <init_twi+0x30>)
   80346:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   80348:	2300      	movs	r3, #0
   8034a:	f88d 300d 	strb.w	r3, [sp, #13]
   8034e:	2017      	movs	r0, #23
   80350:	4b07      	ldr	r3, [pc, #28]	; (80370 <init_twi+0x34>)
   80352:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80354:	a901      	add	r1, sp, #4
   80356:	4807      	ldr	r0, [pc, #28]	; (80374 <init_twi+0x38>)
   80358:	4b07      	ldr	r3, [pc, #28]	; (80378 <init_twi+0x3c>)
   8035a:	4798      	blx	r3
	return twi_master_setup(TWI_PORT, &opt) == TWI_SUCCESS;
}
   8035c:	fab0 f080 	clz	r0, r0
   80360:	0940      	lsrs	r0, r0, #5
   80362:	b005      	add	sp, #20
   80364:	f85d fb04 	ldr.w	pc, [sp], #4
   80368:	000186a0 	.word	0x000186a0
   8036c:	0501bd00 	.word	0x0501bd00
   80370:	00082319 	.word	0x00082319
   80374:	40090000 	.word	0x40090000
   80378:	00081b61 	.word	0x00081b61

0008037c <read_package>:
		return DATA_NOT_SENT;
}


uint8_t read_package(uint8_t slave)
{
   8037c:	b508      	push	{r3, lr}
	if (slave == TWI_SLAVE_ADR_PAB)
   8037e:	2808      	cmp	r0, #8
		return (twi_master_read(TWI_PORT, &packet_rec_pab) == TWI_SUCCESS);
   80380:	bf0c      	ite	eq
   80382:	4904      	ldreq	r1, [pc, #16]	; (80394 <read_package+0x18>)
	else
		return (twi_master_read(TWI_PORT, &packet_rec_pos) == TWI_SUCCESS);
   80384:	4904      	ldrne	r1, [pc, #16]	; (80398 <read_package+0x1c>)
   80386:	4805      	ldr	r0, [pc, #20]	; (8039c <read_package+0x20>)
   80388:	4b05      	ldr	r3, [pc, #20]	; (803a0 <read_package+0x24>)
   8038a:	4798      	blx	r3
   8038c:	fab0 f080 	clz	r0, r0
   80390:	0940      	lsrs	r0, r0, #5
}
   80392:	bd08      	pop	{r3, pc}
   80394:	2007012c 	.word	0x2007012c
   80398:	20070140 	.word	0x20070140
   8039c:	40090000 	.word	0x40090000
   803a0:	00081bc5 	.word	0x00081bc5

000803a4 <taskPOS>:
int posY;				// Y-coordinates for ARLO-robot
int disposalX;			// X-coordinates for the disposal area
int disposalY;			// Y-coordinates for the disposal area

void taskPOS(void *pvParamters)
{
   803a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803a8:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	portTickType xTimeIncrement = xTimeT1/portTICK_RATE_MS;
	xLastWakeTime = xTaskGetTickCount();
   803aa:	4b29      	ldr	r3, [pc, #164]	; (80450 <taskPOS+0xac>)
   803ac:	4798      	blx	r3
   803ae:	9001      	str	r0, [sp, #4]
	
	printf("taskPOS\n");
   803b0:	4828      	ldr	r0, [pc, #160]	; (80454 <taskPOS+0xb0>)
   803b2:	4b29      	ldr	r3, [pc, #164]	; (80458 <taskPOS+0xb4>)
   803b4:	4798      	blx	r3
	uint8_t cnt = 0;
   803b6:	2400      	movs	r4, #0
	while (1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   803b8:	4e28      	ldr	r6, [pc, #160]	; (8045c <taskPOS+0xb8>)
		
		if (read_package(TWI_SLAVE_ADR_POS)==DATA_READ)
   803ba:	4d29      	ldr	r5, [pc, #164]	; (80460 <taskPOS+0xbc>)
			//xSemaphoreGive(semaphorePAB);
			
		}
		else
		{
			printf("Couldn't read position\n");
   803bc:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8048c <taskPOS+0xe8>
   803c0:	e01d      	b.n	803fe <taskPOS+0x5a>
			disposalX=2*rec_data_pos[0];
   803c2:	4b28      	ldr	r3, [pc, #160]	; (80464 <taskPOS+0xc0>)
   803c4:	781a      	ldrb	r2, [r3, #0]
   803c6:	0052      	lsls	r2, r2, #1
   803c8:	4927      	ldr	r1, [pc, #156]	; (80468 <taskPOS+0xc4>)
   803ca:	600a      	str	r2, [r1, #0]
			disposalY=2*rec_data_pos[1];
   803cc:	785a      	ldrb	r2, [r3, #1]
   803ce:	0052      	lsls	r2, r2, #1
   803d0:	4926      	ldr	r1, [pc, #152]	; (8046c <taskPOS+0xc8>)
   803d2:	600a      	str	r2, [r1, #0]
			posX=2*rec_data_pos[8];
   803d4:	7a19      	ldrb	r1, [r3, #8]
   803d6:	0048      	lsls	r0, r1, #1
   803d8:	4a25      	ldr	r2, [pc, #148]	; (80470 <taskPOS+0xcc>)
   803da:	6010      	str	r0, [r2, #0]
			posY=2*rec_data_pos[9];
   803dc:	7a5b      	ldrb	r3, [r3, #9]
   803de:	005b      	lsls	r3, r3, #1
   803e0:	4a24      	ldr	r2, [pc, #144]	; (80474 <taskPOS+0xd0>)
   803e2:	6013      	str	r3, [r2, #0]
			if(cnt == 255)
   803e4:	2cff      	cmp	r4, #255	; 0xff
   803e6:	d015      	beq.n	80414 <taskPOS+0x70>
			if(cnt%8 == 0)
   803e8:	f014 0f07 	tst.w	r4, #7
   803ec:	d013      	beq.n	80416 <taskPOS+0x72>
			cnt++;
   803ee:	3401      	adds	r4, #1
   803f0:	b2e4      	uxtb	r4, r4
			if(target==kub)
   803f2:	4b21      	ldr	r3, [pc, #132]	; (80478 <taskPOS+0xd4>)
   803f4:	681b      	ldr	r3, [r3, #0]
   803f6:	2b01      	cmp	r3, #1
   803f8:	d015      	beq.n	80426 <taskPOS+0x82>
			else if(target==vinglas)
   803fa:	2b02      	cmp	r3, #2
   803fc:	d01d      	beq.n	8043a <taskPOS+0x96>
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   803fe:	21fa      	movs	r1, #250	; 0xfa
   80400:	a801      	add	r0, sp, #4
   80402:	47b0      	blx	r6
		if (read_package(TWI_SLAVE_ADR_POS)==DATA_READ)
   80404:	2010      	movs	r0, #16
   80406:	47a8      	blx	r5
   80408:	2801      	cmp	r0, #1
   8040a:	d0da      	beq.n	803c2 <taskPOS+0x1e>
			printf("Couldn't read position\n");
   8040c:	4640      	mov	r0, r8
   8040e:	4b12      	ldr	r3, [pc, #72]	; (80458 <taskPOS+0xb4>)
   80410:	4798      	blx	r3
   80412:	e7f4      	b.n	803fe <taskPOS+0x5a>
				cnt = 0;
   80414:	2400      	movs	r4, #0
				printf("xpos %i\n",rec_data_pos[8]);
   80416:	4819      	ldr	r0, [pc, #100]	; (8047c <taskPOS+0xd8>)
   80418:	4f0f      	ldr	r7, [pc, #60]	; (80458 <taskPOS+0xb4>)
   8041a:	47b8      	blx	r7
				printf("ypos %i\n",rec_data_pos[9]);
   8041c:	4b11      	ldr	r3, [pc, #68]	; (80464 <taskPOS+0xc0>)
   8041e:	7a59      	ldrb	r1, [r3, #9]
   80420:	4817      	ldr	r0, [pc, #92]	; (80480 <taskPOS+0xdc>)
   80422:	47b8      	blx	r7
   80424:	e7e3      	b.n	803ee <taskPOS+0x4a>
				pickupX=2*rec_data_pos[2];
   80426:	4a0f      	ldr	r2, [pc, #60]	; (80464 <taskPOS+0xc0>)
   80428:	7893      	ldrb	r3, [r2, #2]
   8042a:	005b      	lsls	r3, r3, #1
   8042c:	4915      	ldr	r1, [pc, #84]	; (80484 <taskPOS+0xe0>)
   8042e:	600b      	str	r3, [r1, #0]
				pickupY=2*rec_data_pos[3];
   80430:	78d3      	ldrb	r3, [r2, #3]
   80432:	005b      	lsls	r3, r3, #1
   80434:	4a14      	ldr	r2, [pc, #80]	; (80488 <taskPOS+0xe4>)
   80436:	6013      	str	r3, [r2, #0]
   80438:	e7e1      	b.n	803fe <taskPOS+0x5a>
				pickupX=2*rec_data_pos[6];
   8043a:	4a0a      	ldr	r2, [pc, #40]	; (80464 <taskPOS+0xc0>)
   8043c:	7993      	ldrb	r3, [r2, #6]
   8043e:	005b      	lsls	r3, r3, #1
   80440:	4910      	ldr	r1, [pc, #64]	; (80484 <taskPOS+0xe0>)
   80442:	600b      	str	r3, [r1, #0]
				pickupY=2*rec_data_pos[7];
   80444:	79d3      	ldrb	r3, [r2, #7]
   80446:	005b      	lsls	r3, r3, #1
   80448:	4a0f      	ldr	r2, [pc, #60]	; (80488 <taskPOS+0xe4>)
   8044a:	6013      	str	r3, [r2, #0]
   8044c:	e7d7      	b.n	803fe <taskPOS+0x5a>
   8044e:	bf00      	nop
   80450:	00081029 	.word	0x00081029
   80454:	000854dc 	.word	0x000854dc
   80458:	00082629 	.word	0x00082629
   8045c:	00081271 	.word	0x00081271
   80460:	0008037d 	.word	0x0008037d
   80464:	20070b38 	.word	0x20070b38
   80468:	2007add4 	.word	0x2007add4
   8046c:	2007add8 	.word	0x2007add8
   80470:	2007addc 	.word	0x2007addc
   80474:	2007add0 	.word	0x2007add0
   80478:	20070154 	.word	0x20070154
   8047c:	000854e8 	.word	0x000854e8
   80480:	000854f4 	.word	0x000854f4
   80484:	2007ade4 	.word	0x2007ade4
   80488:	2007ade0 	.word	0x2007ade0
   8048c:	00085500 	.word	0x00085500

00080490 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80490:	f100 0308 	add.w	r3, r0, #8
   80494:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80496:	f04f 32ff 	mov.w	r2, #4294967295
   8049a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   8049c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   8049e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   804a0:	2300      	movs	r3, #0
   804a2:	6003      	str	r3, [r0, #0]
   804a4:	4770      	bx	lr

000804a6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   804a6:	2300      	movs	r3, #0
   804a8:	6103      	str	r3, [r0, #16]
   804aa:	4770      	bx	lr

000804ac <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   804ac:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   804ae:	685a      	ldr	r2, [r3, #4]
   804b0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   804b2:	6842      	ldr	r2, [r0, #4]
   804b4:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   804b6:	685a      	ldr	r2, [r3, #4]
   804b8:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   804ba:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   804bc:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804be:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804c0:	6803      	ldr	r3, [r0, #0]
   804c2:	3301      	adds	r3, #1
   804c4:	6003      	str	r3, [r0, #0]
   804c6:	4770      	bx	lr

000804c8 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   804c8:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   804ca:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   804cc:	f1b4 3fff 	cmp.w	r4, #4294967295
   804d0:	d015      	beq.n	804fe <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   804d2:	f100 0308 	add.w	r3, r0, #8
   804d6:	68c2      	ldr	r2, [r0, #12]
   804d8:	6812      	ldr	r2, [r2, #0]
   804da:	4294      	cmp	r4, r2
   804dc:	d304      	bcc.n	804e8 <vListInsert+0x20>
   804de:	685b      	ldr	r3, [r3, #4]
   804e0:	685a      	ldr	r2, [r3, #4]
   804e2:	6812      	ldr	r2, [r2, #0]
   804e4:	4294      	cmp	r4, r2
   804e6:	d2fa      	bcs.n	804de <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   804e8:	685a      	ldr	r2, [r3, #4]
   804ea:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   804ec:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   804ee:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   804f0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   804f2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   804f4:	6803      	ldr	r3, [r0, #0]
   804f6:	3301      	adds	r3, #1
   804f8:	6003      	str	r3, [r0, #0]
}
   804fa:	bc10      	pop	{r4}
   804fc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   804fe:	6903      	ldr	r3, [r0, #16]
   80500:	e7f2      	b.n	804e8 <vListInsert+0x20>

00080502 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80502:	6843      	ldr	r3, [r0, #4]
   80504:	6882      	ldr	r2, [r0, #8]
   80506:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80508:	6883      	ldr	r3, [r0, #8]
   8050a:	6842      	ldr	r2, [r0, #4]
   8050c:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   8050e:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80510:	685a      	ldr	r2, [r3, #4]
   80512:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80514:	bf04      	itt	eq
   80516:	6882      	ldreq	r2, [r0, #8]
   80518:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8051a:	2200      	movs	r2, #0
   8051c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   8051e:	681a      	ldr	r2, [r3, #0]
   80520:	3a01      	subs	r2, #1
   80522:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80524:	6818      	ldr	r0, [r3, #0]
}
   80526:	4770      	bx	lr

00080528 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80528:	4803      	ldr	r0, [pc, #12]	; (80538 <prvPortStartFirstTask+0x10>)
   8052a:	6800      	ldr	r0, [r0, #0]
   8052c:	6800      	ldr	r0, [r0, #0]
   8052e:	f380 8808 	msr	MSP, r0
   80532:	b662      	cpsie	i
   80534:	df00      	svc	0
   80536:	bf00      	nop
   80538:	e000ed08 	.word	0xe000ed08

0008053c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   8053c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80540:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80544:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   80548:	2300      	movs	r3, #0
   8054a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   8054e:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80552:	3840      	subs	r0, #64	; 0x40
   80554:	4770      	bx	lr
	...

00080558 <SVC_Handler>:
	__asm volatile (
   80558:	4b06      	ldr	r3, [pc, #24]	; (80574 <pxCurrentTCBConst2>)
   8055a:	6819      	ldr	r1, [r3, #0]
   8055c:	6808      	ldr	r0, [r1, #0]
   8055e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80562:	f380 8809 	msr	PSP, r0
   80566:	f04f 0000 	mov.w	r0, #0
   8056a:	f380 8811 	msr	BASEPRI, r0
   8056e:	f04e 0e0d 	orr.w	lr, lr, #13
   80572:	4770      	bx	lr

00080574 <pxCurrentTCBConst2>:
   80574:	2007ab50 	.word	0x2007ab50

00080578 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80578:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8057c:	4b01      	ldr	r3, [pc, #4]	; (80584 <vPortYieldFromISR+0xc>)
   8057e:	601a      	str	r2, [r3, #0]
   80580:	4770      	bx	lr
   80582:	bf00      	nop
   80584:	e000ed04 	.word	0xe000ed04

00080588 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80588:	f3ef 8011 	mrs	r0, BASEPRI
   8058c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80590:	f381 8811 	msr	BASEPRI, r1
   80594:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80596:	2000      	movs	r0, #0

00080598 <vPortEnterCritical>:
{
   80598:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   8059a:	4b03      	ldr	r3, [pc, #12]	; (805a8 <vPortEnterCritical+0x10>)
   8059c:	4798      	blx	r3
	uxCriticalNesting++;
   8059e:	4a03      	ldr	r2, [pc, #12]	; (805ac <vPortEnterCritical+0x14>)
   805a0:	6813      	ldr	r3, [r2, #0]
   805a2:	3301      	adds	r3, #1
   805a4:	6013      	str	r3, [r2, #0]
   805a6:	bd08      	pop	{r3, pc}
   805a8:	00080589 	.word	0x00080589
   805ac:	20070158 	.word	0x20070158

000805b0 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   805b0:	f380 8811 	msr	BASEPRI, r0
   805b4:	4770      	bx	lr
	...

000805b8 <vPortExitCritical>:
{
   805b8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   805ba:	4a05      	ldr	r2, [pc, #20]	; (805d0 <vPortExitCritical+0x18>)
   805bc:	6813      	ldr	r3, [r2, #0]
   805be:	3b01      	subs	r3, #1
   805c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   805c2:	b103      	cbz	r3, 805c6 <vPortExitCritical+0xe>
   805c4:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   805c6:	2000      	movs	r0, #0
   805c8:	4b02      	ldr	r3, [pc, #8]	; (805d4 <vPortExitCritical+0x1c>)
   805ca:	4798      	blx	r3
}
   805cc:	e7fa      	b.n	805c4 <vPortExitCritical+0xc>
   805ce:	bf00      	nop
   805d0:	20070158 	.word	0x20070158
   805d4:	000805b1 	.word	0x000805b1

000805d8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   805d8:	f3ef 8009 	mrs	r0, PSP
   805dc:	4b0c      	ldr	r3, [pc, #48]	; (80610 <pxCurrentTCBConst>)
   805de:	681a      	ldr	r2, [r3, #0]
   805e0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   805e4:	6010      	str	r0, [r2, #0]
   805e6:	e92d 4008 	stmdb	sp!, {r3, lr}
   805ea:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   805ee:	f380 8811 	msr	BASEPRI, r0
   805f2:	f000 fec7 	bl	81384 <vTaskSwitchContext>
   805f6:	f04f 0000 	mov.w	r0, #0
   805fa:	f380 8811 	msr	BASEPRI, r0
   805fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80602:	6819      	ldr	r1, [r3, #0]
   80604:	6808      	ldr	r0, [r1, #0]
   80606:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8060a:	f380 8809 	msr	PSP, r0
   8060e:	4770      	bx	lr

00080610 <pxCurrentTCBConst>:
   80610:	2007ab50 	.word	0x2007ab50

00080614 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80614:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8061a:	4b05      	ldr	r3, [pc, #20]	; (80630 <SysTick_Handler+0x1c>)
   8061c:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   8061e:	4b05      	ldr	r3, [pc, #20]	; (80634 <SysTick_Handler+0x20>)
   80620:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80622:	4b05      	ldr	r3, [pc, #20]	; (80638 <SysTick_Handler+0x24>)
   80624:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80626:	2000      	movs	r0, #0
   80628:	4b04      	ldr	r3, [pc, #16]	; (8063c <SysTick_Handler+0x28>)
   8062a:	4798      	blx	r3
   8062c:	bd08      	pop	{r3, pc}
   8062e:	bf00      	nop
   80630:	e000ed04 	.word	0xe000ed04
   80634:	00080589 	.word	0x00080589
   80638:	00081049 	.word	0x00081049
   8063c:	000805b1 	.word	0x000805b1

00080640 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80640:	4a03      	ldr	r2, [pc, #12]	; (80650 <vPortSetupTimerInterrupt+0x10>)
   80642:	4b04      	ldr	r3, [pc, #16]	; (80654 <vPortSetupTimerInterrupt+0x14>)
   80644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80646:	2207      	movs	r2, #7
   80648:	3b04      	subs	r3, #4
   8064a:	601a      	str	r2, [r3, #0]
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop
   80650:	0001481f 	.word	0x0001481f
   80654:	e000e014 	.word	0xe000e014

00080658 <xPortStartScheduler>:
{
   80658:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   8065a:	4b09      	ldr	r3, [pc, #36]	; (80680 <xPortStartScheduler+0x28>)
   8065c:	681a      	ldr	r2, [r3, #0]
   8065e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80662:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80664:	681a      	ldr	r2, [r3, #0]
   80666:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   8066a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   8066c:	4b05      	ldr	r3, [pc, #20]	; (80684 <xPortStartScheduler+0x2c>)
   8066e:	4798      	blx	r3
	uxCriticalNesting = 0;
   80670:	2400      	movs	r4, #0
   80672:	4b05      	ldr	r3, [pc, #20]	; (80688 <xPortStartScheduler+0x30>)
   80674:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80676:	4b05      	ldr	r3, [pc, #20]	; (8068c <xPortStartScheduler+0x34>)
   80678:	4798      	blx	r3
}
   8067a:	4620      	mov	r0, r4
   8067c:	bd10      	pop	{r4, pc}
   8067e:	bf00      	nop
   80680:	e000ed20 	.word	0xe000ed20
   80684:	00080641 	.word	0x00080641
   80688:	20070158 	.word	0x20070158
   8068c:	00080529 	.word	0x00080529

00080690 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80690:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80692:	4a13      	ldr	r2, [pc, #76]	; (806e0 <prvInsertBlockIntoFreeList+0x50>)
   80694:	e000      	b.n	80698 <prvInsertBlockIntoFreeList+0x8>
   80696:	461a      	mov	r2, r3
   80698:	6813      	ldr	r3, [r2, #0]
   8069a:	4283      	cmp	r3, r0
   8069c:	d3fb      	bcc.n	80696 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   8069e:	6851      	ldr	r1, [r2, #4]
   806a0:	1854      	adds	r4, r2, r1
   806a2:	42a0      	cmp	r0, r4
   806a4:	d009      	beq.n	806ba <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   806a6:	6841      	ldr	r1, [r0, #4]
   806a8:	1844      	adds	r4, r0, r1
   806aa:	42a3      	cmp	r3, r4
   806ac:	d00a      	beq.n	806c4 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   806ae:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   806b0:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   806b2:	bf18      	it	ne
   806b4:	6010      	strne	r0, [r2, #0]
	}
}
   806b6:	bc10      	pop	{r4}
   806b8:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   806ba:	6840      	ldr	r0, [r0, #4]
   806bc:	4401      	add	r1, r0
   806be:	6051      	str	r1, [r2, #4]
   806c0:	4610      	mov	r0, r2
   806c2:	e7f0      	b.n	806a6 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   806c4:	4c07      	ldr	r4, [pc, #28]	; (806e4 <prvInsertBlockIntoFreeList+0x54>)
   806c6:	6824      	ldr	r4, [r4, #0]
   806c8:	42a3      	cmp	r3, r4
   806ca:	d006      	beq.n	806da <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   806cc:	685b      	ldr	r3, [r3, #4]
   806ce:	4419      	add	r1, r3
   806d0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   806d2:	6813      	ldr	r3, [r2, #0]
   806d4:	681b      	ldr	r3, [r3, #0]
   806d6:	6003      	str	r3, [r0, #0]
   806d8:	e7ea      	b.n	806b0 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   806da:	6003      	str	r3, [r0, #0]
   806dc:	e7e8      	b.n	806b0 <prvInsertBlockIntoFreeList+0x20>
   806de:	bf00      	nop
   806e0:	2007ab48 	.word	0x2007ab48
   806e4:	20070b44 	.word	0x20070b44

000806e8 <pvPortMalloc>:
{
   806e8:	b538      	push	{r3, r4, r5, lr}
   806ea:	4604      	mov	r4, r0
	vTaskSuspendAll();
   806ec:	4b2a      	ldr	r3, [pc, #168]	; (80798 <pvPortMalloc+0xb0>)
   806ee:	4798      	blx	r3
		if( pxEnd == NULL )
   806f0:	4b2a      	ldr	r3, [pc, #168]	; (8079c <pvPortMalloc+0xb4>)
   806f2:	681b      	ldr	r3, [r3, #0]
   806f4:	b18b      	cbz	r3, 8071a <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   806f6:	2c00      	cmp	r4, #0
   806f8:	d047      	beq.n	8078a <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   806fa:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   806fe:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80702:	bf1c      	itt	ne
   80704:	f022 0207 	bicne.w	r2, r2, #7
   80708:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   8070a:	1e51      	subs	r1, r2, #1
   8070c:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80710:	4299      	cmp	r1, r3
   80712:	d83c      	bhi.n	8078e <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   80714:	4922      	ldr	r1, [pc, #136]	; (807a0 <pvPortMalloc+0xb8>)
   80716:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80718:	e016      	b.n	80748 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8071a:	4a21      	ldr	r2, [pc, #132]	; (807a0 <pvPortMalloc+0xb8>)
   8071c:	4b21      	ldr	r3, [pc, #132]	; (807a4 <pvPortMalloc+0xbc>)
   8071e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80720:	2100      	movs	r1, #0
   80722:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   80724:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80728:	1898      	adds	r0, r3, r2
   8072a:	4d1c      	ldr	r5, [pc, #112]	; (8079c <pvPortMalloc+0xb4>)
   8072c:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   8072e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80732:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80734:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80736:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80738:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8073a:	4a1b      	ldr	r2, [pc, #108]	; (807a8 <pvPortMalloc+0xc0>)
   8073c:	6813      	ldr	r3, [r2, #0]
   8073e:	3b10      	subs	r3, #16
   80740:	6013      	str	r3, [r2, #0]
   80742:	e7d8      	b.n	806f6 <pvPortMalloc+0xe>
   80744:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   80746:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80748:	6863      	ldr	r3, [r4, #4]
   8074a:	429a      	cmp	r2, r3
   8074c:	d902      	bls.n	80754 <pvPortMalloc+0x6c>
   8074e:	6823      	ldr	r3, [r4, #0]
   80750:	2b00      	cmp	r3, #0
   80752:	d1f7      	bne.n	80744 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   80754:	4b11      	ldr	r3, [pc, #68]	; (8079c <pvPortMalloc+0xb4>)
   80756:	681b      	ldr	r3, [r3, #0]
   80758:	429c      	cmp	r4, r3
   8075a:	d01a      	beq.n	80792 <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8075c:	680d      	ldr	r5, [r1, #0]
   8075e:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80760:	6823      	ldr	r3, [r4, #0]
   80762:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80764:	6863      	ldr	r3, [r4, #4]
   80766:	1a9b      	subs	r3, r3, r2
   80768:	2b20      	cmp	r3, #32
   8076a:	d808      	bhi.n	8077e <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8076c:	4a0e      	ldr	r2, [pc, #56]	; (807a8 <pvPortMalloc+0xc0>)
   8076e:	6813      	ldr	r3, [r2, #0]
   80770:	6861      	ldr	r1, [r4, #4]
   80772:	1a5b      	subs	r3, r3, r1
   80774:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   80776:	4b0d      	ldr	r3, [pc, #52]	; (807ac <pvPortMalloc+0xc4>)
   80778:	4798      	blx	r3
}
   8077a:	4628      	mov	r0, r5
   8077c:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8077e:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80780:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80782:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80784:	4b0a      	ldr	r3, [pc, #40]	; (807b0 <pvPortMalloc+0xc8>)
   80786:	4798      	blx	r3
   80788:	e7f0      	b.n	8076c <pvPortMalloc+0x84>
void *pvReturn = NULL;
   8078a:	2500      	movs	r5, #0
   8078c:	e7f3      	b.n	80776 <pvPortMalloc+0x8e>
   8078e:	2500      	movs	r5, #0
   80790:	e7f1      	b.n	80776 <pvPortMalloc+0x8e>
   80792:	2500      	movs	r5, #0
   80794:	e7ef      	b.n	80776 <pvPortMalloc+0x8e>
   80796:	bf00      	nop
   80798:	00081019 	.word	0x00081019
   8079c:	20070b44 	.word	0x20070b44
   807a0:	2007ab48 	.word	0x2007ab48
   807a4:	20070b48 	.word	0x20070b48
   807a8:	2007015c 	.word	0x2007015c
   807ac:	00081171 	.word	0x00081171
   807b0:	00080691 	.word	0x00080691

000807b4 <vPortFree>:
	if( pv != NULL )
   807b4:	b180      	cbz	r0, 807d8 <vPortFree+0x24>
{
   807b6:	b510      	push	{r4, lr}
   807b8:	4604      	mov	r4, r0
		vTaskSuspendAll();
   807ba:	4b08      	ldr	r3, [pc, #32]	; (807dc <vPortFree+0x28>)
   807bc:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   807be:	4a08      	ldr	r2, [pc, #32]	; (807e0 <vPortFree+0x2c>)
   807c0:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   807c4:	6811      	ldr	r1, [r2, #0]
   807c6:	440b      	add	r3, r1
   807c8:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   807ca:	f1a4 0010 	sub.w	r0, r4, #16
   807ce:	4b05      	ldr	r3, [pc, #20]	; (807e4 <vPortFree+0x30>)
   807d0:	4798      	blx	r3
		xTaskResumeAll();
   807d2:	4b05      	ldr	r3, [pc, #20]	; (807e8 <vPortFree+0x34>)
   807d4:	4798      	blx	r3
   807d6:	bd10      	pop	{r4, pc}
   807d8:	4770      	bx	lr
   807da:	bf00      	nop
   807dc:	00081019 	.word	0x00081019
   807e0:	2007015c 	.word	0x2007015c
   807e4:	00080691 	.word	0x00080691
   807e8:	00081171 	.word	0x00081171

000807ec <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   807ec:	b510      	push	{r4, lr}
   807ee:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   807f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   807f2:	b95b      	cbnz	r3, 8080c <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   807f4:	6803      	ldr	r3, [r0, #0]
   807f6:	b11b      	cbz	r3, 80800 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   807f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   807fa:	3301      	adds	r3, #1
   807fc:	63a3      	str	r3, [r4, #56]	; 0x38
   807fe:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80800:	6840      	ldr	r0, [r0, #4]
   80802:	4b12      	ldr	r3, [pc, #72]	; (8084c <prvCopyDataToQueue+0x60>)
   80804:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80806:	2300      	movs	r3, #0
   80808:	6063      	str	r3, [r4, #4]
   8080a:	e7f5      	b.n	807f8 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   8080c:	b96a      	cbnz	r2, 8082a <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8080e:	461a      	mov	r2, r3
   80810:	6880      	ldr	r0, [r0, #8]
   80812:	4b0f      	ldr	r3, [pc, #60]	; (80850 <prvCopyDataToQueue+0x64>)
   80814:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80816:	68a3      	ldr	r3, [r4, #8]
   80818:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8081a:	4413      	add	r3, r2
   8081c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   8081e:	6862      	ldr	r2, [r4, #4]
   80820:	4293      	cmp	r3, r2
   80822:	d3e9      	bcc.n	807f8 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80824:	6823      	ldr	r3, [r4, #0]
   80826:	60a3      	str	r3, [r4, #8]
   80828:	e7e6      	b.n	807f8 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   8082a:	461a      	mov	r2, r3
   8082c:	68c0      	ldr	r0, [r0, #12]
   8082e:	4b08      	ldr	r3, [pc, #32]	; (80850 <prvCopyDataToQueue+0x64>)
   80830:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   80832:	6c22      	ldr	r2, [r4, #64]	; 0x40
   80834:	4252      	negs	r2, r2
   80836:	68e3      	ldr	r3, [r4, #12]
   80838:	4413      	add	r3, r2
   8083a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8083c:	6821      	ldr	r1, [r4, #0]
   8083e:	428b      	cmp	r3, r1
   80840:	d2da      	bcs.n	807f8 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   80842:	6863      	ldr	r3, [r4, #4]
   80844:	441a      	add	r2, r3
   80846:	60e2      	str	r2, [r4, #12]
   80848:	e7d6      	b.n	807f8 <prvCopyDataToQueue+0xc>
   8084a:	bf00      	nop
   8084c:	000816b1 	.word	0x000816b1
   80850:	00082651 	.word	0x00082651

00080854 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   80854:	b538      	push	{r3, r4, r5, lr}
   80856:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   80858:	6800      	ldr	r0, [r0, #0]
   8085a:	b158      	cbz	r0, 80874 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   8085c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8085e:	68dc      	ldr	r4, [r3, #12]
   80860:	4414      	add	r4, r2
   80862:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   80864:	685d      	ldr	r5, [r3, #4]
   80866:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   80868:	bf28      	it	cs
   8086a:	60d8      	strcs	r0, [r3, #12]
   8086c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8086e:	68d9      	ldr	r1, [r3, #12]
   80870:	4b01      	ldr	r3, [pc, #4]	; (80878 <prvCopyDataFromQueue+0x24>)
   80872:	4798      	blx	r3
   80874:	bd38      	pop	{r3, r4, r5, pc}
   80876:	bf00      	nop
   80878:	00082651 	.word	0x00082651

0008087c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   8087c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8087e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   80880:	4b1f      	ldr	r3, [pc, #124]	; (80900 <prvUnlockQueue+0x84>)
   80882:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   80884:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80886:	2b00      	cmp	r3, #0
   80888:	dd14      	ble.n	808b4 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8088a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8088c:	b193      	cbz	r3, 808b4 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8088e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   80892:	4d1c      	ldr	r5, [pc, #112]	; (80904 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   80894:	4f1c      	ldr	r7, [pc, #112]	; (80908 <prvUnlockQueue+0x8c>)
   80896:	e007      	b.n	808a8 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   80898:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8089a:	3b01      	subs	r3, #1
   8089c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8089e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   808a0:	2b00      	cmp	r3, #0
   808a2:	dd07      	ble.n	808b4 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   808a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   808a6:	b12b      	cbz	r3, 808b4 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   808a8:	4630      	mov	r0, r6
   808aa:	47a8      	blx	r5
   808ac:	2800      	cmp	r0, #0
   808ae:	d0f3      	beq.n	80898 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   808b0:	47b8      	blx	r7
   808b2:	e7f1      	b.n	80898 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   808b4:	f04f 33ff 	mov.w	r3, #4294967295
   808b8:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   808ba:	4b14      	ldr	r3, [pc, #80]	; (8090c <prvUnlockQueue+0x90>)
   808bc:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   808be:	4b10      	ldr	r3, [pc, #64]	; (80900 <prvUnlockQueue+0x84>)
   808c0:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   808c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808c4:	2b00      	cmp	r3, #0
   808c6:	dd14      	ble.n	808f2 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   808c8:	6923      	ldr	r3, [r4, #16]
   808ca:	b193      	cbz	r3, 808f2 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   808cc:	f104 0610 	add.w	r6, r4, #16
   808d0:	4d0c      	ldr	r5, [pc, #48]	; (80904 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   808d2:	4f0d      	ldr	r7, [pc, #52]	; (80908 <prvUnlockQueue+0x8c>)
   808d4:	e007      	b.n	808e6 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   808d6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808d8:	3b01      	subs	r3, #1
   808da:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   808dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
   808de:	2b00      	cmp	r3, #0
   808e0:	dd07      	ble.n	808f2 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   808e2:	6923      	ldr	r3, [r4, #16]
   808e4:	b12b      	cbz	r3, 808f2 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   808e6:	4630      	mov	r0, r6
   808e8:	47a8      	blx	r5
   808ea:	2800      	cmp	r0, #0
   808ec:	d0f3      	beq.n	808d6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   808ee:	47b8      	blx	r7
   808f0:	e7f1      	b.n	808d6 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   808f2:	f04f 33ff 	mov.w	r3, #4294967295
   808f6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   808f8:	4b04      	ldr	r3, [pc, #16]	; (8090c <prvUnlockQueue+0x90>)
   808fa:	4798      	blx	r3
   808fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   808fe:	bf00      	nop
   80900:	00080599 	.word	0x00080599
   80904:	000814c9 	.word	0x000814c9
   80908:	000815f9 	.word	0x000815f9
   8090c:	000805b9 	.word	0x000805b9

00080910 <xQueueGenericReset>:
{
   80910:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   80912:	b308      	cbz	r0, 80958 <xQueueGenericReset+0x48>
   80914:	460d      	mov	r5, r1
   80916:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   80918:	4b17      	ldr	r3, [pc, #92]	; (80978 <xQueueGenericReset+0x68>)
   8091a:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   8091c:	6822      	ldr	r2, [r4, #0]
   8091e:	6c21      	ldr	r1, [r4, #64]	; 0x40
   80920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80922:	fb03 f301 	mul.w	r3, r3, r1
   80926:	18d0      	adds	r0, r2, r3
   80928:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   8092a:	2000      	movs	r0, #0
   8092c:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8092e:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   80930:	1a5b      	subs	r3, r3, r1
   80932:	4413      	add	r3, r2
   80934:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   80936:	f04f 33ff 	mov.w	r3, #4294967295
   8093a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8093c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   8093e:	b995      	cbnz	r5, 80966 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80940:	6923      	ldr	r3, [r4, #16]
   80942:	b12b      	cbz	r3, 80950 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80944:	f104 0010 	add.w	r0, r4, #16
   80948:	4b0c      	ldr	r3, [pc, #48]	; (8097c <xQueueGenericReset+0x6c>)
   8094a:	4798      	blx	r3
   8094c:	2801      	cmp	r0, #1
   8094e:	d007      	beq.n	80960 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   80950:	4b0b      	ldr	r3, [pc, #44]	; (80980 <xQueueGenericReset+0x70>)
   80952:	4798      	blx	r3
}
   80954:	2001      	movs	r0, #1
   80956:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   80958:	4b0a      	ldr	r3, [pc, #40]	; (80984 <xQueueGenericReset+0x74>)
   8095a:	4798      	blx	r3
   8095c:	bf00      	nop
   8095e:	e7fd      	b.n	8095c <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   80960:	4b09      	ldr	r3, [pc, #36]	; (80988 <xQueueGenericReset+0x78>)
   80962:	4798      	blx	r3
   80964:	e7f4      	b.n	80950 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   80966:	f104 0010 	add.w	r0, r4, #16
   8096a:	4d08      	ldr	r5, [pc, #32]	; (8098c <xQueueGenericReset+0x7c>)
   8096c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8096e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80972:	47a8      	blx	r5
   80974:	e7ec      	b.n	80950 <xQueueGenericReset+0x40>
   80976:	bf00      	nop
   80978:	00080599 	.word	0x00080599
   8097c:	000814c9 	.word	0x000814c9
   80980:	000805b9 	.word	0x000805b9
   80984:	00080589 	.word	0x00080589
   80988:	00080579 	.word	0x00080579
   8098c:	00080491 	.word	0x00080491

00080990 <xQueueGenericCreate>:
{
   80990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   80992:	b1d8      	cbz	r0, 809cc <xQueueGenericCreate+0x3c>
   80994:	460d      	mov	r5, r1
   80996:	4617      	mov	r7, r2
   80998:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8099a:	2050      	movs	r0, #80	; 0x50
   8099c:	4b0d      	ldr	r3, [pc, #52]	; (809d4 <xQueueGenericCreate+0x44>)
   8099e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   809a0:	4604      	mov	r4, r0
   809a2:	b198      	cbz	r0, 809cc <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   809a4:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   809a8:	3001      	adds	r0, #1
   809aa:	4b0a      	ldr	r3, [pc, #40]	; (809d4 <xQueueGenericCreate+0x44>)
   809ac:	4798      	blx	r3
   809ae:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   809b0:	b148      	cbz	r0, 809c6 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   809b2:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   809b4:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   809b6:	2101      	movs	r1, #1
   809b8:	4620      	mov	r0, r4
   809ba:	4b07      	ldr	r3, [pc, #28]	; (809d8 <xQueueGenericCreate+0x48>)
   809bc:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   809be:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   809c2:	4620      	mov	r0, r4
   809c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   809c6:	4620      	mov	r0, r4
   809c8:	4b04      	ldr	r3, [pc, #16]	; (809dc <xQueueGenericCreate+0x4c>)
   809ca:	4798      	blx	r3
	configASSERT( xReturn );
   809cc:	4b04      	ldr	r3, [pc, #16]	; (809e0 <xQueueGenericCreate+0x50>)
   809ce:	4798      	blx	r3
   809d0:	bf00      	nop
   809d2:	e7fd      	b.n	809d0 <xQueueGenericCreate+0x40>
   809d4:	000806e9 	.word	0x000806e9
   809d8:	00080911 	.word	0x00080911
   809dc:	000807b5 	.word	0x000807b5
   809e0:	00080589 	.word	0x00080589

000809e4 <xQueueGenericSend>:
{
   809e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   809e8:	b085      	sub	sp, #20
   809ea:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   809ec:	b148      	cbz	r0, 80a02 <xQueueGenericSend+0x1e>
   809ee:	4688      	mov	r8, r1
   809f0:	4699      	mov	r9, r3
   809f2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   809f4:	b149      	cbz	r1, 80a0a <xQueueGenericSend+0x26>
   809f6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   809f8:	4e38      	ldr	r6, [pc, #224]	; (80adc <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   809fa:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80b08 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   809fe:	4d38      	ldr	r5, [pc, #224]	; (80ae0 <xQueueGenericSend+0xfc>)
   80a00:	e02e      	b.n	80a60 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   80a02:	4b38      	ldr	r3, [pc, #224]	; (80ae4 <xQueueGenericSend+0x100>)
   80a04:	4798      	blx	r3
   80a06:	bf00      	nop
   80a08:	e7fd      	b.n	80a06 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80a0a:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80a0c:	b11b      	cbz	r3, 80a16 <xQueueGenericSend+0x32>
   80a0e:	4b35      	ldr	r3, [pc, #212]	; (80ae4 <xQueueGenericSend+0x100>)
   80a10:	4798      	blx	r3
   80a12:	bf00      	nop
   80a14:	e7fd      	b.n	80a12 <xQueueGenericSend+0x2e>
   80a16:	2700      	movs	r7, #0
   80a18:	e7ee      	b.n	809f8 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80a1a:	464a      	mov	r2, r9
   80a1c:	4641      	mov	r1, r8
   80a1e:	4620      	mov	r0, r4
   80a20:	4b31      	ldr	r3, [pc, #196]	; (80ae8 <xQueueGenericSend+0x104>)
   80a22:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80a24:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80a26:	b92b      	cbnz	r3, 80a34 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   80a28:	4b2d      	ldr	r3, [pc, #180]	; (80ae0 <xQueueGenericSend+0xfc>)
   80a2a:	4798      	blx	r3
				return pdPASS;
   80a2c:	2001      	movs	r0, #1
}
   80a2e:	b005      	add	sp, #20
   80a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   80a34:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80a38:	4b2c      	ldr	r3, [pc, #176]	; (80aec <xQueueGenericSend+0x108>)
   80a3a:	4798      	blx	r3
   80a3c:	2801      	cmp	r0, #1
   80a3e:	d1f3      	bne.n	80a28 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   80a40:	4b2b      	ldr	r3, [pc, #172]	; (80af0 <xQueueGenericSend+0x10c>)
   80a42:	4798      	blx	r3
   80a44:	e7f0      	b.n	80a28 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   80a46:	4b26      	ldr	r3, [pc, #152]	; (80ae0 <xQueueGenericSend+0xfc>)
   80a48:	4798      	blx	r3
					return errQUEUE_FULL;
   80a4a:	2000      	movs	r0, #0
   80a4c:	e7ef      	b.n	80a2e <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   80a4e:	a802      	add	r0, sp, #8
   80a50:	47d0      	blx	sl
   80a52:	e00f      	b.n	80a74 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   80a54:	4620      	mov	r0, r4
   80a56:	4b27      	ldr	r3, [pc, #156]	; (80af4 <xQueueGenericSend+0x110>)
   80a58:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80a5a:	4b27      	ldr	r3, [pc, #156]	; (80af8 <xQueueGenericSend+0x114>)
   80a5c:	4798      	blx	r3
   80a5e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80a60:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80a62:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80a64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80a66:	429a      	cmp	r2, r3
   80a68:	d3d7      	bcc.n	80a1a <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80a6a:	9b01      	ldr	r3, [sp, #4]
   80a6c:	2b00      	cmp	r3, #0
   80a6e:	d0ea      	beq.n	80a46 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   80a70:	2f00      	cmp	r7, #0
   80a72:	d0ec      	beq.n	80a4e <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   80a74:	47a8      	blx	r5
		vTaskSuspendAll();
   80a76:	4b21      	ldr	r3, [pc, #132]	; (80afc <xQueueGenericSend+0x118>)
   80a78:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80a7a:	47b0      	blx	r6
   80a7c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a82:	bf04      	itt	eq
   80a84:	2300      	moveq	r3, #0
   80a86:	6463      	streq	r3, [r4, #68]	; 0x44
   80a88:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80a8e:	bf04      	itt	eq
   80a90:	2300      	moveq	r3, #0
   80a92:	64a3      	streq	r3, [r4, #72]	; 0x48
   80a94:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80a96:	a901      	add	r1, sp, #4
   80a98:	a802      	add	r0, sp, #8
   80a9a:	4b19      	ldr	r3, [pc, #100]	; (80b00 <xQueueGenericSend+0x11c>)
   80a9c:	4798      	blx	r3
   80a9e:	b9a8      	cbnz	r0, 80acc <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   80aa0:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   80aa2:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   80aa6:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   80aa8:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   80aaa:	45bb      	cmp	fp, r7
   80aac:	d1d2      	bne.n	80a54 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   80aae:	9901      	ldr	r1, [sp, #4]
   80ab0:	f104 0010 	add.w	r0, r4, #16
   80ab4:	4b13      	ldr	r3, [pc, #76]	; (80b04 <xQueueGenericSend+0x120>)
   80ab6:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80ab8:	4620      	mov	r0, r4
   80aba:	4b0e      	ldr	r3, [pc, #56]	; (80af4 <xQueueGenericSend+0x110>)
   80abc:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80abe:	4b0e      	ldr	r3, [pc, #56]	; (80af8 <xQueueGenericSend+0x114>)
   80ac0:	4798      	blx	r3
   80ac2:	2800      	cmp	r0, #0
   80ac4:	d1cb      	bne.n	80a5e <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   80ac6:	4b0a      	ldr	r3, [pc, #40]	; (80af0 <xQueueGenericSend+0x10c>)
   80ac8:	4798      	blx	r3
   80aca:	e7c8      	b.n	80a5e <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   80acc:	4620      	mov	r0, r4
   80ace:	4b09      	ldr	r3, [pc, #36]	; (80af4 <xQueueGenericSend+0x110>)
   80ad0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80ad2:	4b09      	ldr	r3, [pc, #36]	; (80af8 <xQueueGenericSend+0x114>)
   80ad4:	4798      	blx	r3
			return errQUEUE_FULL;
   80ad6:	2000      	movs	r0, #0
   80ad8:	e7a9      	b.n	80a2e <xQueueGenericSend+0x4a>
   80ada:	bf00      	nop
   80adc:	00080599 	.word	0x00080599
   80ae0:	000805b9 	.word	0x000805b9
   80ae4:	00080589 	.word	0x00080589
   80ae8:	000807ed 	.word	0x000807ed
   80aec:	000814c9 	.word	0x000814c9
   80af0:	00080579 	.word	0x00080579
   80af4:	0008087d 	.word	0x0008087d
   80af8:	00081171 	.word	0x00081171
   80afc:	00081019 	.word	0x00081019
   80b00:	00081575 	.word	0x00081575
   80b04:	00081425 	.word	0x00081425
   80b08:	0008154d 	.word	0x0008154d

00080b0c <xQueueGenericSendFromISR>:
{
   80b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   80b10:	b190      	cbz	r0, 80b38 <xQueueGenericSendFromISR+0x2c>
   80b12:	460e      	mov	r6, r1
   80b14:	4615      	mov	r5, r2
   80b16:	4698      	mov	r8, r3
   80b18:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b1a:	b189      	cbz	r1, 80b40 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80b1c:	4b1b      	ldr	r3, [pc, #108]	; (80b8c <xQueueGenericSendFromISR+0x80>)
   80b1e:	4798      	blx	r3
   80b20:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   80b22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   80b24:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   80b26:	429a      	cmp	r2, r3
   80b28:	d311      	bcc.n	80b4e <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   80b2a:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80b2c:	4638      	mov	r0, r7
   80b2e:	4b18      	ldr	r3, [pc, #96]	; (80b90 <xQueueGenericSendFromISR+0x84>)
   80b30:	4798      	blx	r3
}
   80b32:	4620      	mov	r0, r4
   80b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   80b38:	4b14      	ldr	r3, [pc, #80]	; (80b8c <xQueueGenericSendFromISR+0x80>)
   80b3a:	4798      	blx	r3
   80b3c:	bf00      	nop
   80b3e:	e7fd      	b.n	80b3c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80b40:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80b42:	2b00      	cmp	r3, #0
   80b44:	d0ea      	beq.n	80b1c <xQueueGenericSendFromISR+0x10>
   80b46:	4b11      	ldr	r3, [pc, #68]	; (80b8c <xQueueGenericSendFromISR+0x80>)
   80b48:	4798      	blx	r3
   80b4a:	bf00      	nop
   80b4c:	e7fd      	b.n	80b4a <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   80b4e:	4642      	mov	r2, r8
   80b50:	4631      	mov	r1, r6
   80b52:	4620      	mov	r0, r4
   80b54:	4b0f      	ldr	r3, [pc, #60]	; (80b94 <xQueueGenericSendFromISR+0x88>)
   80b56:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   80b58:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80b5e:	d10a      	bne.n	80b76 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80b62:	b16b      	cbz	r3, 80b80 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80b64:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80b68:	4b0b      	ldr	r3, [pc, #44]	; (80b98 <xQueueGenericSendFromISR+0x8c>)
   80b6a:	4798      	blx	r3
   80b6c:	b150      	cbz	r0, 80b84 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   80b6e:	b15d      	cbz	r5, 80b88 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   80b70:	2401      	movs	r4, #1
   80b72:	602c      	str	r4, [r5, #0]
   80b74:	e7da      	b.n	80b2c <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   80b76:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80b78:	3301      	adds	r3, #1
   80b7a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   80b7c:	2401      	movs	r4, #1
   80b7e:	e7d5      	b.n	80b2c <xQueueGenericSendFromISR+0x20>
   80b80:	2401      	movs	r4, #1
   80b82:	e7d3      	b.n	80b2c <xQueueGenericSendFromISR+0x20>
   80b84:	2401      	movs	r4, #1
   80b86:	e7d1      	b.n	80b2c <xQueueGenericSendFromISR+0x20>
   80b88:	2401      	movs	r4, #1
   80b8a:	e7cf      	b.n	80b2c <xQueueGenericSendFromISR+0x20>
   80b8c:	00080589 	.word	0x00080589
   80b90:	000805b1 	.word	0x000805b1
   80b94:	000807ed 	.word	0x000807ed
   80b98:	000814c9 	.word	0x000814c9

00080b9c <xQueueGenericReceive>:
{
   80b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80ba0:	b084      	sub	sp, #16
   80ba2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   80ba4:	b148      	cbz	r0, 80bba <xQueueGenericReceive+0x1e>
   80ba6:	4688      	mov	r8, r1
   80ba8:	4699      	mov	r9, r3
   80baa:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80bac:	b149      	cbz	r1, 80bc2 <xQueueGenericReceive+0x26>
   80bae:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   80bb0:	4e46      	ldr	r6, [pc, #280]	; (80ccc <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   80bb2:	f8df a14c 	ldr.w	sl, [pc, #332]	; 80d00 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   80bb6:	4d46      	ldr	r5, [pc, #280]	; (80cd0 <xQueueGenericReceive+0x134>)
   80bb8:	e04b      	b.n	80c52 <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   80bba:	4b46      	ldr	r3, [pc, #280]	; (80cd4 <xQueueGenericReceive+0x138>)
   80bbc:	4798      	blx	r3
   80bbe:	bf00      	nop
   80bc0:	e7fd      	b.n	80bbe <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   80bc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80bc4:	b11b      	cbz	r3, 80bce <xQueueGenericReceive+0x32>
   80bc6:	4b43      	ldr	r3, [pc, #268]	; (80cd4 <xQueueGenericReceive+0x138>)
   80bc8:	4798      	blx	r3
   80bca:	bf00      	nop
   80bcc:	e7fd      	b.n	80bca <xQueueGenericReceive+0x2e>
   80bce:	2700      	movs	r7, #0
   80bd0:	e7ee      	b.n	80bb0 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   80bd2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   80bd4:	4641      	mov	r1, r8
   80bd6:	4620      	mov	r0, r4
   80bd8:	4b3f      	ldr	r3, [pc, #252]	; (80cd8 <xQueueGenericReceive+0x13c>)
   80bda:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   80bdc:	f1b9 0f00 	cmp.w	r9, #0
   80be0:	d117      	bne.n	80c12 <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   80be2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80be4:	3b01      	subs	r3, #1
   80be6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80be8:	6823      	ldr	r3, [r4, #0]
   80bea:	b913      	cbnz	r3, 80bf2 <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   80bec:	4b3b      	ldr	r3, [pc, #236]	; (80cdc <xQueueGenericReceive+0x140>)
   80bee:	4798      	blx	r3
   80bf0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   80bf2:	6923      	ldr	r3, [r4, #16]
   80bf4:	b13b      	cbz	r3, 80c06 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   80bf6:	f104 0010 	add.w	r0, r4, #16
   80bfa:	4b39      	ldr	r3, [pc, #228]	; (80ce0 <xQueueGenericReceive+0x144>)
   80bfc:	4798      	blx	r3
   80bfe:	2801      	cmp	r0, #1
   80c00:	d101      	bne.n	80c06 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80c02:	4b38      	ldr	r3, [pc, #224]	; (80ce4 <xQueueGenericReceive+0x148>)
   80c04:	4798      	blx	r3
				taskEXIT_CRITICAL();
   80c06:	4b32      	ldr	r3, [pc, #200]	; (80cd0 <xQueueGenericReceive+0x134>)
   80c08:	4798      	blx	r3
				return pdPASS;
   80c0a:	2001      	movs	r0, #1
}
   80c0c:	b004      	add	sp, #16
   80c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   80c12:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   80c14:	6a63      	ldr	r3, [r4, #36]	; 0x24
   80c16:	2b00      	cmp	r3, #0
   80c18:	d0f5      	beq.n	80c06 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   80c1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80c1e:	4b30      	ldr	r3, [pc, #192]	; (80ce0 <xQueueGenericReceive+0x144>)
   80c20:	4798      	blx	r3
   80c22:	2800      	cmp	r0, #0
   80c24:	d0ef      	beq.n	80c06 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   80c26:	4b2f      	ldr	r3, [pc, #188]	; (80ce4 <xQueueGenericReceive+0x148>)
   80c28:	4798      	blx	r3
   80c2a:	e7ec      	b.n	80c06 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   80c2c:	4b28      	ldr	r3, [pc, #160]	; (80cd0 <xQueueGenericReceive+0x134>)
   80c2e:	4798      	blx	r3
					return errQUEUE_EMPTY;
   80c30:	2000      	movs	r0, #0
   80c32:	e7eb      	b.n	80c0c <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   80c34:	a802      	add	r0, sp, #8
   80c36:	47d0      	blx	sl
   80c38:	e014      	b.n	80c64 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   80c3a:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   80c3c:	6860      	ldr	r0, [r4, #4]
   80c3e:	4b2a      	ldr	r3, [pc, #168]	; (80ce8 <xQueueGenericReceive+0x14c>)
   80c40:	4798      	blx	r3
						portEXIT_CRITICAL();
   80c42:	47a8      	blx	r5
   80c44:	e02c      	b.n	80ca0 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   80c46:	4620      	mov	r0, r4
   80c48:	4b28      	ldr	r3, [pc, #160]	; (80cec <xQueueGenericReceive+0x150>)
   80c4a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   80c4c:	4b28      	ldr	r3, [pc, #160]	; (80cf0 <xQueueGenericReceive+0x154>)
   80c4e:	4798      	blx	r3
   80c50:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   80c52:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   80c54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80c56:	2b00      	cmp	r3, #0
   80c58:	d1bb      	bne.n	80bd2 <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   80c5a:	9b01      	ldr	r3, [sp, #4]
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d0e5      	beq.n	80c2c <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   80c60:	2f00      	cmp	r7, #0
   80c62:	d0e7      	beq.n	80c34 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   80c64:	47a8      	blx	r5
		vTaskSuspendAll();
   80c66:	4b23      	ldr	r3, [pc, #140]	; (80cf4 <xQueueGenericReceive+0x158>)
   80c68:	4798      	blx	r3
		prvLockQueue( pxQueue );
   80c6a:	47b0      	blx	r6
   80c6c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c72:	bf04      	itt	eq
   80c74:	2300      	moveq	r3, #0
   80c76:	6463      	streq	r3, [r4, #68]	; 0x44
   80c78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
   80c7e:	bf04      	itt	eq
   80c80:	2300      	moveq	r3, #0
   80c82:	64a3      	streq	r3, [r4, #72]	; 0x48
   80c84:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   80c86:	a901      	add	r1, sp, #4
   80c88:	a802      	add	r0, sp, #8
   80c8a:	4b1b      	ldr	r3, [pc, #108]	; (80cf8 <xQueueGenericReceive+0x15c>)
   80c8c:	4798      	blx	r3
   80c8e:	b9b0      	cbnz	r0, 80cbe <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   80c90:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   80c92:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   80c94:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   80c96:	2f00      	cmp	r7, #0
   80c98:	d1d5      	bne.n	80c46 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80c9a:	6823      	ldr	r3, [r4, #0]
   80c9c:	2b00      	cmp	r3, #0
   80c9e:	d0cc      	beq.n	80c3a <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80ca0:	9901      	ldr	r1, [sp, #4]
   80ca2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80ca6:	4b15      	ldr	r3, [pc, #84]	; (80cfc <xQueueGenericReceive+0x160>)
   80ca8:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   80caa:	4620      	mov	r0, r4
   80cac:	4b0f      	ldr	r3, [pc, #60]	; (80cec <xQueueGenericReceive+0x150>)
   80cae:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   80cb0:	4b0f      	ldr	r3, [pc, #60]	; (80cf0 <xQueueGenericReceive+0x154>)
   80cb2:	4798      	blx	r3
   80cb4:	2800      	cmp	r0, #0
   80cb6:	d1cb      	bne.n	80c50 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   80cb8:	4b0a      	ldr	r3, [pc, #40]	; (80ce4 <xQueueGenericReceive+0x148>)
   80cba:	4798      	blx	r3
   80cbc:	e7c8      	b.n	80c50 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   80cbe:	4620      	mov	r0, r4
   80cc0:	4b0a      	ldr	r3, [pc, #40]	; (80cec <xQueueGenericReceive+0x150>)
   80cc2:	4798      	blx	r3
			( void ) xTaskResumeAll();
   80cc4:	4b0a      	ldr	r3, [pc, #40]	; (80cf0 <xQueueGenericReceive+0x154>)
   80cc6:	4798      	blx	r3
			return errQUEUE_EMPTY;
   80cc8:	2000      	movs	r0, #0
   80cca:	e79f      	b.n	80c0c <xQueueGenericReceive+0x70>
   80ccc:	00080599 	.word	0x00080599
   80cd0:	000805b9 	.word	0x000805b9
   80cd4:	00080589 	.word	0x00080589
   80cd8:	00080855 	.word	0x00080855
   80cdc:	00081605 	.word	0x00081605
   80ce0:	000814c9 	.word	0x000814c9
   80ce4:	00080579 	.word	0x00080579
   80ce8:	00081631 	.word	0x00081631
   80cec:	0008087d 	.word	0x0008087d
   80cf0:	00081171 	.word	0x00081171
   80cf4:	00081019 	.word	0x00081019
   80cf8:	00081575 	.word	0x00081575
   80cfc:	00081425 	.word	0x00081425
   80d00:	0008154d 	.word	0x0008154d

00080d04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   80d04:	b538      	push	{r3, r4, r5, lr}
   80d06:	4604      	mov	r4, r0
   80d08:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   80d0a:	4b0e      	ldr	r3, [pc, #56]	; (80d44 <vQueueWaitForMessageRestricted+0x40>)
   80d0c:	4798      	blx	r3
   80d0e:	6c63      	ldr	r3, [r4, #68]	; 0x44
   80d10:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d14:	bf04      	itt	eq
   80d16:	2300      	moveq	r3, #0
   80d18:	6463      	streq	r3, [r4, #68]	; 0x44
   80d1a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   80d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
   80d20:	bf04      	itt	eq
   80d22:	2300      	moveq	r3, #0
   80d24:	64a3      	streq	r3, [r4, #72]	; 0x48
   80d26:	4b08      	ldr	r3, [pc, #32]	; (80d48 <vQueueWaitForMessageRestricted+0x44>)
   80d28:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   80d2a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   80d2c:	b11b      	cbz	r3, 80d36 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   80d2e:	4620      	mov	r0, r4
   80d30:	4b06      	ldr	r3, [pc, #24]	; (80d4c <vQueueWaitForMessageRestricted+0x48>)
   80d32:	4798      	blx	r3
   80d34:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   80d36:	4629      	mov	r1, r5
   80d38:	f104 0024 	add.w	r0, r4, #36	; 0x24
   80d3c:	4b04      	ldr	r3, [pc, #16]	; (80d50 <vQueueWaitForMessageRestricted+0x4c>)
   80d3e:	4798      	blx	r3
   80d40:	e7f5      	b.n	80d2e <vQueueWaitForMessageRestricted+0x2a>
   80d42:	bf00      	nop
   80d44:	00080599 	.word	0x00080599
   80d48:	000805b9 	.word	0x000805b9
   80d4c:	0008087d 	.word	0x0008087d
   80d50:	00081485 	.word	0x00081485

00080d54 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   80d54:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   80d56:	4b0f      	ldr	r3, [pc, #60]	; (80d94 <prvAddCurrentTaskToDelayedList+0x40>)
   80d58:	681b      	ldr	r3, [r3, #0]
   80d5a:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   80d5c:	4b0e      	ldr	r3, [pc, #56]	; (80d98 <prvAddCurrentTaskToDelayedList+0x44>)
   80d5e:	681b      	ldr	r3, [r3, #0]
   80d60:	4298      	cmp	r0, r3
   80d62:	d30e      	bcc.n	80d82 <prvAddCurrentTaskToDelayedList+0x2e>
   80d64:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80d66:	4b0d      	ldr	r3, [pc, #52]	; (80d9c <prvAddCurrentTaskToDelayedList+0x48>)
   80d68:	6818      	ldr	r0, [r3, #0]
   80d6a:	4b0a      	ldr	r3, [pc, #40]	; (80d94 <prvAddCurrentTaskToDelayedList+0x40>)
   80d6c:	6819      	ldr	r1, [r3, #0]
   80d6e:	3104      	adds	r1, #4
   80d70:	4b0b      	ldr	r3, [pc, #44]	; (80da0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80d72:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   80d74:	4b0b      	ldr	r3, [pc, #44]	; (80da4 <prvAddCurrentTaskToDelayedList+0x50>)
   80d76:	681b      	ldr	r3, [r3, #0]
   80d78:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   80d7a:	bf3c      	itt	cc
   80d7c:	4b09      	ldrcc	r3, [pc, #36]	; (80da4 <prvAddCurrentTaskToDelayedList+0x50>)
   80d7e:	601c      	strcc	r4, [r3, #0]
   80d80:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   80d82:	4b09      	ldr	r3, [pc, #36]	; (80da8 <prvAddCurrentTaskToDelayedList+0x54>)
   80d84:	6818      	ldr	r0, [r3, #0]
   80d86:	4b03      	ldr	r3, [pc, #12]	; (80d94 <prvAddCurrentTaskToDelayedList+0x40>)
   80d88:	6819      	ldr	r1, [r3, #0]
   80d8a:	3104      	adds	r1, #4
   80d8c:	4b04      	ldr	r3, [pc, #16]	; (80da0 <prvAddCurrentTaskToDelayedList+0x4c>)
   80d8e:	4798      	blx	r3
   80d90:	bd10      	pop	{r4, pc}
   80d92:	bf00      	nop
   80d94:	2007ab50 	.word	0x2007ab50
   80d98:	2007ac4c 	.word	0x2007ac4c
   80d9c:	2007ab54 	.word	0x2007ab54
   80da0:	000804c9 	.word	0x000804c9
   80da4:	20070160 	.word	0x20070160
   80da8:	2007ab58 	.word	0x2007ab58

00080dac <xTaskGenericCreate>:
{
   80dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80db0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   80db2:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   80db6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   80db8:	b148      	cbz	r0, 80dce <xTaskGenericCreate+0x22>
   80dba:	4688      	mov	r8, r1
   80dbc:	4615      	mov	r5, r2
   80dbe:	469b      	mov	fp, r3
   80dc0:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   80dc2:	2f04      	cmp	r7, #4
   80dc4:	d907      	bls.n	80dd6 <xTaskGenericCreate+0x2a>
   80dc6:	4b60      	ldr	r3, [pc, #384]	; (80f48 <xTaskGenericCreate+0x19c>)
   80dc8:	4798      	blx	r3
   80dca:	bf00      	nop
   80dcc:	e7fd      	b.n	80dca <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   80dce:	4b5e      	ldr	r3, [pc, #376]	; (80f48 <xTaskGenericCreate+0x19c>)
   80dd0:	4798      	blx	r3
   80dd2:	bf00      	nop
   80dd4:	e7fd      	b.n	80dd2 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   80dd6:	204c      	movs	r0, #76	; 0x4c
   80dd8:	4b5c      	ldr	r3, [pc, #368]	; (80f4c <xTaskGenericCreate+0x1a0>)
   80dda:	4798      	blx	r3

	if( pxNewTCB != NULL )
   80ddc:	4604      	mov	r4, r0
   80dde:	2800      	cmp	r0, #0
   80de0:	d054      	beq.n	80e8c <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80de2:	2e00      	cmp	r6, #0
   80de4:	d048      	beq.n	80e78 <xTaskGenericCreate+0xcc>
   80de6:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   80de8:	00aa      	lsls	r2, r5, #2
   80dea:	21a5      	movs	r1, #165	; 0xa5
   80dec:	4630      	mov	r0, r6
   80dee:	4b58      	ldr	r3, [pc, #352]	; (80f50 <xTaskGenericCreate+0x1a4>)
   80df0:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   80df2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   80df6:	3d01      	subs	r5, #1
   80df8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   80dfa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   80dfe:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   80e02:	220a      	movs	r2, #10
   80e04:	4641      	mov	r1, r8
   80e06:	f104 0034 	add.w	r0, r4, #52	; 0x34
   80e0a:	4b52      	ldr	r3, [pc, #328]	; (80f54 <xTaskGenericCreate+0x1a8>)
   80e0c:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   80e0e:	2300      	movs	r3, #0
   80e10:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   80e14:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   80e16:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   80e18:	f104 0804 	add.w	r8, r4, #4
   80e1c:	4640      	mov	r0, r8
   80e1e:	4e4e      	ldr	r6, [pc, #312]	; (80f58 <xTaskGenericCreate+0x1ac>)
   80e20:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   80e22:	f104 0018 	add.w	r0, r4, #24
   80e26:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   80e28:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   80e2a:	f1c7 0305 	rsb	r3, r7, #5
   80e2e:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   80e30:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   80e32:	465a      	mov	r2, fp
   80e34:	4651      	mov	r1, sl
   80e36:	4628      	mov	r0, r5
   80e38:	4b48      	ldr	r3, [pc, #288]	; (80f5c <xTaskGenericCreate+0x1b0>)
   80e3a:	4798      	blx	r3
   80e3c:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80e3e:	f010 0f07 	tst.w	r0, #7
   80e42:	d127      	bne.n	80e94 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   80e44:	f1b9 0f00 	cmp.w	r9, #0
   80e48:	d001      	beq.n	80e4e <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   80e4a:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   80e4e:	4b44      	ldr	r3, [pc, #272]	; (80f60 <xTaskGenericCreate+0x1b4>)
   80e50:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   80e52:	4a44      	ldr	r2, [pc, #272]	; (80f64 <xTaskGenericCreate+0x1b8>)
   80e54:	6813      	ldr	r3, [r2, #0]
   80e56:	3301      	adds	r3, #1
   80e58:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   80e5a:	4b43      	ldr	r3, [pc, #268]	; (80f68 <xTaskGenericCreate+0x1bc>)
   80e5c:	681b      	ldr	r3, [r3, #0]
   80e5e:	b1eb      	cbz	r3, 80e9c <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   80e60:	4b42      	ldr	r3, [pc, #264]	; (80f6c <xTaskGenericCreate+0x1c0>)
   80e62:	681b      	ldr	r3, [r3, #0]
   80e64:	2b00      	cmp	r3, #0
   80e66:	d140      	bne.n	80eea <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   80e68:	4b3f      	ldr	r3, [pc, #252]	; (80f68 <xTaskGenericCreate+0x1bc>)
   80e6a:	681b      	ldr	r3, [r3, #0]
   80e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80e6e:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   80e70:	bf24      	itt	cs
   80e72:	4b3d      	ldrcs	r3, [pc, #244]	; (80f68 <xTaskGenericCreate+0x1bc>)
   80e74:	601c      	strcs	r4, [r3, #0]
   80e76:	e038      	b.n	80eea <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   80e78:	00a8      	lsls	r0, r5, #2
   80e7a:	4b34      	ldr	r3, [pc, #208]	; (80f4c <xTaskGenericCreate+0x1a0>)
   80e7c:	4798      	blx	r3
   80e7e:	4606      	mov	r6, r0
   80e80:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   80e82:	2800      	cmp	r0, #0
   80e84:	d1b0      	bne.n	80de8 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   80e86:	4620      	mov	r0, r4
   80e88:	4b39      	ldr	r3, [pc, #228]	; (80f70 <xTaskGenericCreate+0x1c4>)
   80e8a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   80e8c:	f04f 30ff 	mov.w	r0, #4294967295
}
   80e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   80e94:	4b2c      	ldr	r3, [pc, #176]	; (80f48 <xTaskGenericCreate+0x19c>)
   80e96:	4798      	blx	r3
   80e98:	bf00      	nop
   80e9a:	e7fd      	b.n	80e98 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   80e9c:	4b32      	ldr	r3, [pc, #200]	; (80f68 <xTaskGenericCreate+0x1bc>)
   80e9e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   80ea0:	6813      	ldr	r3, [r2, #0]
   80ea2:	2b01      	cmp	r3, #1
   80ea4:	d121      	bne.n	80eea <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   80ea6:	4e33      	ldr	r6, [pc, #204]	; (80f74 <xTaskGenericCreate+0x1c8>)
   80ea8:	4630      	mov	r0, r6
   80eaa:	4d33      	ldr	r5, [pc, #204]	; (80f78 <xTaskGenericCreate+0x1cc>)
   80eac:	47a8      	blx	r5
   80eae:	f106 0014 	add.w	r0, r6, #20
   80eb2:	47a8      	blx	r5
   80eb4:	f106 0028 	add.w	r0, r6, #40	; 0x28
   80eb8:	47a8      	blx	r5
   80eba:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   80ebe:	47a8      	blx	r5
   80ec0:	f106 0050 	add.w	r0, r6, #80	; 0x50
   80ec4:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   80ec6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80fac <xTaskGenericCreate+0x200>
   80eca:	4648      	mov	r0, r9
   80ecc:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   80ece:	4e2b      	ldr	r6, [pc, #172]	; (80f7c <xTaskGenericCreate+0x1d0>)
   80ed0:	4630      	mov	r0, r6
   80ed2:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   80ed4:	482a      	ldr	r0, [pc, #168]	; (80f80 <xTaskGenericCreate+0x1d4>)
   80ed6:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   80ed8:	482a      	ldr	r0, [pc, #168]	; (80f84 <xTaskGenericCreate+0x1d8>)
   80eda:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   80edc:	482a      	ldr	r0, [pc, #168]	; (80f88 <xTaskGenericCreate+0x1dc>)
   80ede:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   80ee0:	4b2a      	ldr	r3, [pc, #168]	; (80f8c <xTaskGenericCreate+0x1e0>)
   80ee2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   80ee6:	4b2a      	ldr	r3, [pc, #168]	; (80f90 <xTaskGenericCreate+0x1e4>)
   80ee8:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   80eea:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80eec:	4b29      	ldr	r3, [pc, #164]	; (80f94 <xTaskGenericCreate+0x1e8>)
   80eee:	681b      	ldr	r3, [r3, #0]
   80ef0:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   80ef2:	bf84      	itt	hi
   80ef4:	4b27      	ldrhi	r3, [pc, #156]	; (80f94 <xTaskGenericCreate+0x1e8>)
   80ef6:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   80ef8:	4a27      	ldr	r2, [pc, #156]	; (80f98 <xTaskGenericCreate+0x1ec>)
   80efa:	6813      	ldr	r3, [r2, #0]
   80efc:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   80efe:	3301      	adds	r3, #1
   80f00:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   80f02:	4b26      	ldr	r3, [pc, #152]	; (80f9c <xTaskGenericCreate+0x1f0>)
   80f04:	681b      	ldr	r3, [r3, #0]
   80f06:	4298      	cmp	r0, r3
   80f08:	bf84      	itt	hi
   80f0a:	4b24      	ldrhi	r3, [pc, #144]	; (80f9c <xTaskGenericCreate+0x1f0>)
   80f0c:	6018      	strhi	r0, [r3, #0]
   80f0e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80f12:	4641      	mov	r1, r8
   80f14:	4b17      	ldr	r3, [pc, #92]	; (80f74 <xTaskGenericCreate+0x1c8>)
   80f16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   80f1a:	4b21      	ldr	r3, [pc, #132]	; (80fa0 <xTaskGenericCreate+0x1f4>)
   80f1c:	4798      	blx	r3
		taskEXIT_CRITICAL();
   80f1e:	4b21      	ldr	r3, [pc, #132]	; (80fa4 <xTaskGenericCreate+0x1f8>)
   80f20:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   80f22:	4b12      	ldr	r3, [pc, #72]	; (80f6c <xTaskGenericCreate+0x1c0>)
   80f24:	681b      	ldr	r3, [r3, #0]
   80f26:	b14b      	cbz	r3, 80f3c <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   80f28:	4b0f      	ldr	r3, [pc, #60]	; (80f68 <xTaskGenericCreate+0x1bc>)
   80f2a:	681b      	ldr	r3, [r3, #0]
   80f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   80f2e:	429f      	cmp	r7, r3
   80f30:	d907      	bls.n	80f42 <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   80f32:	4b1d      	ldr	r3, [pc, #116]	; (80fa8 <xTaskGenericCreate+0x1fc>)
   80f34:	4798      	blx	r3
   80f36:	2001      	movs	r0, #1
   80f38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f3c:	2001      	movs	r0, #1
   80f3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f42:	2001      	movs	r0, #1
	return xReturn;
   80f44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80f48:	00080589 	.word	0x00080589
   80f4c:	000806e9 	.word	0x000806e9
   80f50:	0008273d 	.word	0x0008273d
   80f54:	000829d5 	.word	0x000829d5
   80f58:	000804a7 	.word	0x000804a7
   80f5c:	0008053d 	.word	0x0008053d
   80f60:	00080599 	.word	0x00080599
   80f64:	2007abc0 	.word	0x2007abc0
   80f68:	2007ab50 	.word	0x2007ab50
   80f6c:	2007ac20 	.word	0x2007ac20
   80f70:	000807b5 	.word	0x000807b5
   80f74:	2007ab5c 	.word	0x2007ab5c
   80f78:	00080491 	.word	0x00080491
   80f7c:	2007abf0 	.word	0x2007abf0
   80f80:	2007ac0c 	.word	0x2007ac0c
   80f84:	2007ac38 	.word	0x2007ac38
   80f88:	2007ac24 	.word	0x2007ac24
   80f8c:	2007ab54 	.word	0x2007ab54
   80f90:	2007ab58 	.word	0x2007ab58
   80f94:	2007abd8 	.word	0x2007abd8
   80f98:	2007abcc 	.word	0x2007abcc
   80f9c:	2007abd4 	.word	0x2007abd4
   80fa0:	000804ad 	.word	0x000804ad
   80fa4:	000805b9 	.word	0x000805b9
   80fa8:	00080579 	.word	0x00080579
   80fac:	2007abdc 	.word	0x2007abdc

00080fb0 <vTaskStartScheduler>:
{
   80fb0:	b510      	push	{r4, lr}
   80fb2:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   80fb4:	2300      	movs	r3, #0
   80fb6:	9303      	str	r3, [sp, #12]
   80fb8:	9302      	str	r3, [sp, #8]
   80fba:	9301      	str	r3, [sp, #4]
   80fbc:	9300      	str	r3, [sp, #0]
   80fbe:	2282      	movs	r2, #130	; 0x82
   80fc0:	490d      	ldr	r1, [pc, #52]	; (80ff8 <vTaskStartScheduler+0x48>)
   80fc2:	480e      	ldr	r0, [pc, #56]	; (80ffc <vTaskStartScheduler+0x4c>)
   80fc4:	4c0e      	ldr	r4, [pc, #56]	; (81000 <vTaskStartScheduler+0x50>)
   80fc6:	47a0      	blx	r4
		if( xReturn == pdPASS )
   80fc8:	2801      	cmp	r0, #1
   80fca:	d002      	beq.n	80fd2 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   80fcc:	b180      	cbz	r0, 80ff0 <vTaskStartScheduler+0x40>
}
   80fce:	b004      	add	sp, #16
   80fd0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   80fd2:	4b0c      	ldr	r3, [pc, #48]	; (81004 <vTaskStartScheduler+0x54>)
   80fd4:	4798      	blx	r3
	if( xReturn == pdPASS )
   80fd6:	2801      	cmp	r0, #1
   80fd8:	d1f8      	bne.n	80fcc <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   80fda:	4b0b      	ldr	r3, [pc, #44]	; (81008 <vTaskStartScheduler+0x58>)
   80fdc:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   80fde:	2201      	movs	r2, #1
   80fe0:	4b0a      	ldr	r3, [pc, #40]	; (8100c <vTaskStartScheduler+0x5c>)
   80fe2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   80fe4:	2200      	movs	r2, #0
   80fe6:	4b0a      	ldr	r3, [pc, #40]	; (81010 <vTaskStartScheduler+0x60>)
   80fe8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   80fea:	4b0a      	ldr	r3, [pc, #40]	; (81014 <vTaskStartScheduler+0x64>)
   80fec:	4798      	blx	r3
   80fee:	e7ee      	b.n	80fce <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   80ff0:	4b05      	ldr	r3, [pc, #20]	; (81008 <vTaskStartScheduler+0x58>)
   80ff2:	4798      	blx	r3
   80ff4:	bf00      	nop
   80ff6:	e7fd      	b.n	80ff4 <vTaskStartScheduler+0x44>
   80ff8:	00085518 	.word	0x00085518
   80ffc:	000812fd 	.word	0x000812fd
   81000:	00080dad 	.word	0x00080dad
   81004:	000817a9 	.word	0x000817a9
   81008:	00080589 	.word	0x00080589
   8100c:	2007ac20 	.word	0x2007ac20
   81010:	2007ac4c 	.word	0x2007ac4c
   81014:	00080659 	.word	0x00080659

00081018 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   81018:	4a02      	ldr	r2, [pc, #8]	; (81024 <vTaskSuspendAll+0xc>)
   8101a:	6813      	ldr	r3, [r2, #0]
   8101c:	3301      	adds	r3, #1
   8101e:	6013      	str	r3, [r2, #0]
   81020:	4770      	bx	lr
   81022:	bf00      	nop
   81024:	2007abc8 	.word	0x2007abc8

00081028 <xTaskGetTickCount>:
{
   81028:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   8102a:	4b04      	ldr	r3, [pc, #16]	; (8103c <xTaskGetTickCount+0x14>)
   8102c:	4798      	blx	r3
		xTicks = xTickCount;
   8102e:	4b04      	ldr	r3, [pc, #16]	; (81040 <xTaskGetTickCount+0x18>)
   81030:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   81032:	4b04      	ldr	r3, [pc, #16]	; (81044 <xTaskGetTickCount+0x1c>)
   81034:	4798      	blx	r3
}
   81036:	4620      	mov	r0, r4
   81038:	bd10      	pop	{r4, pc}
   8103a:	bf00      	nop
   8103c:	00080599 	.word	0x00080599
   81040:	2007ac4c 	.word	0x2007ac4c
   81044:	000805b9 	.word	0x000805b9

00081048 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81048:	4b3d      	ldr	r3, [pc, #244]	; (81140 <vTaskIncrementTick+0xf8>)
   8104a:	681b      	ldr	r3, [r3, #0]
   8104c:	2b00      	cmp	r3, #0
   8104e:	d16f      	bne.n	81130 <vTaskIncrementTick+0xe8>
{
   81050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   81054:	4b3b      	ldr	r3, [pc, #236]	; (81144 <vTaskIncrementTick+0xfc>)
   81056:	681a      	ldr	r2, [r3, #0]
   81058:	3201      	adds	r2, #1
   8105a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8105c:	681b      	ldr	r3, [r3, #0]
   8105e:	b9ab      	cbnz	r3, 8108c <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81060:	4b39      	ldr	r3, [pc, #228]	; (81148 <vTaskIncrementTick+0x100>)
   81062:	681b      	ldr	r3, [r3, #0]
   81064:	681b      	ldr	r3, [r3, #0]
   81066:	2b00      	cmp	r3, #0
   81068:	d128      	bne.n	810bc <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   8106a:	4b37      	ldr	r3, [pc, #220]	; (81148 <vTaskIncrementTick+0x100>)
   8106c:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8106e:	4a37      	ldr	r2, [pc, #220]	; (8114c <vTaskIncrementTick+0x104>)
   81070:	6810      	ldr	r0, [r2, #0]
   81072:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81074:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81076:	4936      	ldr	r1, [pc, #216]	; (81150 <vTaskIncrementTick+0x108>)
   81078:	680a      	ldr	r2, [r1, #0]
   8107a:	3201      	adds	r2, #1
   8107c:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8107e:	681b      	ldr	r3, [r3, #0]
   81080:	681b      	ldr	r3, [r3, #0]
   81082:	b9fb      	cbnz	r3, 810c4 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   81084:	f04f 32ff 	mov.w	r2, #4294967295
   81088:	4b32      	ldr	r3, [pc, #200]	; (81154 <vTaskIncrementTick+0x10c>)
   8108a:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   8108c:	4b2d      	ldr	r3, [pc, #180]	; (81144 <vTaskIncrementTick+0xfc>)
   8108e:	681a      	ldr	r2, [r3, #0]
   81090:	4b30      	ldr	r3, [pc, #192]	; (81154 <vTaskIncrementTick+0x10c>)
   81092:	681b      	ldr	r3, [r3, #0]
   81094:	429a      	cmp	r2, r3
   81096:	d350      	bcc.n	8113a <vTaskIncrementTick+0xf2>
   81098:	4b2b      	ldr	r3, [pc, #172]	; (81148 <vTaskIncrementTick+0x100>)
   8109a:	681b      	ldr	r3, [r3, #0]
   8109c:	681b      	ldr	r3, [r3, #0]
   8109e:	b1cb      	cbz	r3, 810d4 <vTaskIncrementTick+0x8c>
   810a0:	4b29      	ldr	r3, [pc, #164]	; (81148 <vTaskIncrementTick+0x100>)
   810a2:	681b      	ldr	r3, [r3, #0]
   810a4:	68db      	ldr	r3, [r3, #12]
   810a6:	68dc      	ldr	r4, [r3, #12]
   810a8:	6863      	ldr	r3, [r4, #4]
   810aa:	4a26      	ldr	r2, [pc, #152]	; (81144 <vTaskIncrementTick+0xfc>)
   810ac:	6812      	ldr	r2, [r2, #0]
   810ae:	4293      	cmp	r3, r2
   810b0:	d816      	bhi.n	810e0 <vTaskIncrementTick+0x98>
   810b2:	4e29      	ldr	r6, [pc, #164]	; (81158 <vTaskIncrementTick+0x110>)
   810b4:	4f29      	ldr	r7, [pc, #164]	; (8115c <vTaskIncrementTick+0x114>)
   810b6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 8116c <vTaskIncrementTick+0x124>
   810ba:	e02f      	b.n	8111c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   810bc:	4b28      	ldr	r3, [pc, #160]	; (81160 <vTaskIncrementTick+0x118>)
   810be:	4798      	blx	r3
   810c0:	bf00      	nop
   810c2:	e7fd      	b.n	810c0 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   810c4:	4b20      	ldr	r3, [pc, #128]	; (81148 <vTaskIncrementTick+0x100>)
   810c6:	681b      	ldr	r3, [r3, #0]
   810c8:	68db      	ldr	r3, [r3, #12]
   810ca:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   810cc:	685a      	ldr	r2, [r3, #4]
   810ce:	4b21      	ldr	r3, [pc, #132]	; (81154 <vTaskIncrementTick+0x10c>)
   810d0:	601a      	str	r2, [r3, #0]
   810d2:	e7db      	b.n	8108c <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   810d4:	f04f 32ff 	mov.w	r2, #4294967295
   810d8:	4b1e      	ldr	r3, [pc, #120]	; (81154 <vTaskIncrementTick+0x10c>)
   810da:	601a      	str	r2, [r3, #0]
   810dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810e0:	4a1c      	ldr	r2, [pc, #112]	; (81154 <vTaskIncrementTick+0x10c>)
   810e2:	6013      	str	r3, [r2, #0]
   810e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   810e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   810ea:	683b      	ldr	r3, [r7, #0]
   810ec:	4298      	cmp	r0, r3
   810ee:	bf88      	it	hi
   810f0:	6038      	strhi	r0, [r7, #0]
   810f2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   810f6:	4629      	mov	r1, r5
   810f8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   810fc:	4b19      	ldr	r3, [pc, #100]	; (81164 <vTaskIncrementTick+0x11c>)
   810fe:	4798      	blx	r3
   81100:	4b11      	ldr	r3, [pc, #68]	; (81148 <vTaskIncrementTick+0x100>)
   81102:	681b      	ldr	r3, [r3, #0]
   81104:	681b      	ldr	r3, [r3, #0]
   81106:	2b00      	cmp	r3, #0
   81108:	d0e4      	beq.n	810d4 <vTaskIncrementTick+0x8c>
   8110a:	4b0f      	ldr	r3, [pc, #60]	; (81148 <vTaskIncrementTick+0x100>)
   8110c:	681b      	ldr	r3, [r3, #0]
   8110e:	68db      	ldr	r3, [r3, #12]
   81110:	68dc      	ldr	r4, [r3, #12]
   81112:	6863      	ldr	r3, [r4, #4]
   81114:	4a0b      	ldr	r2, [pc, #44]	; (81144 <vTaskIncrementTick+0xfc>)
   81116:	6812      	ldr	r2, [r2, #0]
   81118:	4293      	cmp	r3, r2
   8111a:	d8e1      	bhi.n	810e0 <vTaskIncrementTick+0x98>
   8111c:	1d25      	adds	r5, r4, #4
   8111e:	4628      	mov	r0, r5
   81120:	47b0      	blx	r6
   81122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81124:	2b00      	cmp	r3, #0
   81126:	d0df      	beq.n	810e8 <vTaskIncrementTick+0xa0>
   81128:	f104 0018 	add.w	r0, r4, #24
   8112c:	47b0      	blx	r6
   8112e:	e7db      	b.n	810e8 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   81130:	4a0d      	ldr	r2, [pc, #52]	; (81168 <vTaskIncrementTick+0x120>)
   81132:	6813      	ldr	r3, [r2, #0]
   81134:	3301      	adds	r3, #1
   81136:	6013      	str	r3, [r2, #0]
}
   81138:	4770      	bx	lr
   8113a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8113e:	bf00      	nop
   81140:	2007abc8 	.word	0x2007abc8
   81144:	2007ac4c 	.word	0x2007ac4c
   81148:	2007ab54 	.word	0x2007ab54
   8114c:	2007ab58 	.word	0x2007ab58
   81150:	2007ac08 	.word	0x2007ac08
   81154:	20070160 	.word	0x20070160
   81158:	00080503 	.word	0x00080503
   8115c:	2007abd4 	.word	0x2007abd4
   81160:	00080589 	.word	0x00080589
   81164:	000804ad 	.word	0x000804ad
   81168:	2007abc4 	.word	0x2007abc4
   8116c:	2007ab5c 	.word	0x2007ab5c

00081170 <xTaskResumeAll>:
{
   81170:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   81174:	4b2f      	ldr	r3, [pc, #188]	; (81234 <xTaskResumeAll+0xc4>)
   81176:	681b      	ldr	r3, [r3, #0]
   81178:	b91b      	cbnz	r3, 81182 <xTaskResumeAll+0x12>
   8117a:	4b2f      	ldr	r3, [pc, #188]	; (81238 <xTaskResumeAll+0xc8>)
   8117c:	4798      	blx	r3
   8117e:	bf00      	nop
   81180:	e7fd      	b.n	8117e <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   81182:	4b2e      	ldr	r3, [pc, #184]	; (8123c <xTaskResumeAll+0xcc>)
   81184:	4798      	blx	r3
		--uxSchedulerSuspended;
   81186:	4b2b      	ldr	r3, [pc, #172]	; (81234 <xTaskResumeAll+0xc4>)
   81188:	681a      	ldr	r2, [r3, #0]
   8118a:	3a01      	subs	r2, #1
   8118c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8118e:	681b      	ldr	r3, [r3, #0]
   81190:	2b00      	cmp	r3, #0
   81192:	d14d      	bne.n	81230 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81194:	4b2a      	ldr	r3, [pc, #168]	; (81240 <xTaskResumeAll+0xd0>)
   81196:	681b      	ldr	r3, [r3, #0]
   81198:	b12b      	cbz	r3, 811a6 <xTaskResumeAll+0x36>
   8119a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8119c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8126c <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   811a0:	4f28      	ldr	r7, [pc, #160]	; (81244 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   811a2:	4e29      	ldr	r6, [pc, #164]	; (81248 <xTaskResumeAll+0xd8>)
   811a4:	e023      	b.n	811ee <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   811a6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   811a8:	4b28      	ldr	r3, [pc, #160]	; (8124c <xTaskResumeAll+0xdc>)
   811aa:	4798      	blx	r3
}
   811ac:	4620      	mov	r0, r4
   811ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   811b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   811b6:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   811b8:	f105 0018 	add.w	r0, r5, #24
   811bc:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   811be:	f105 0904 	add.w	r9, r5, #4
   811c2:	4648      	mov	r0, r9
   811c4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   811c6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   811c8:	6833      	ldr	r3, [r6, #0]
   811ca:	4298      	cmp	r0, r3
   811cc:	bf88      	it	hi
   811ce:	6030      	strhi	r0, [r6, #0]
   811d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   811d4:	4649      	mov	r1, r9
   811d6:	4b1e      	ldr	r3, [pc, #120]	; (81250 <xTaskResumeAll+0xe0>)
   811d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   811dc:	4b1d      	ldr	r3, [pc, #116]	; (81254 <xTaskResumeAll+0xe4>)
   811de:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   811e0:	4b1d      	ldr	r3, [pc, #116]	; (81258 <xTaskResumeAll+0xe8>)
   811e2:	681b      	ldr	r3, [r3, #0]
   811e4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   811e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   811e8:	429a      	cmp	r2, r3
   811ea:	bf28      	it	cs
   811ec:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   811ee:	f8d8 3000 	ldr.w	r3, [r8]
   811f2:	2b00      	cmp	r3, #0
   811f4:	d1dd      	bne.n	811b2 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   811f6:	4b19      	ldr	r3, [pc, #100]	; (8125c <xTaskResumeAll+0xec>)
   811f8:	681b      	ldr	r3, [r3, #0]
   811fa:	b193      	cbz	r3, 81222 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   811fc:	4b17      	ldr	r3, [pc, #92]	; (8125c <xTaskResumeAll+0xec>)
   811fe:	681b      	ldr	r3, [r3, #0]
   81200:	b143      	cbz	r3, 81214 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   81202:	4d17      	ldr	r5, [pc, #92]	; (81260 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81204:	4c15      	ldr	r4, [pc, #84]	; (8125c <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   81206:	47a8      	blx	r5
						--uxMissedTicks;
   81208:	6823      	ldr	r3, [r4, #0]
   8120a:	3b01      	subs	r3, #1
   8120c:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   8120e:	6823      	ldr	r3, [r4, #0]
   81210:	2b00      	cmp	r3, #0
   81212:	d1f8      	bne.n	81206 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   81214:	2200      	movs	r2, #0
   81216:	4b13      	ldr	r3, [pc, #76]	; (81264 <xTaskResumeAll+0xf4>)
   81218:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   8121a:	4b13      	ldr	r3, [pc, #76]	; (81268 <xTaskResumeAll+0xf8>)
   8121c:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   8121e:	2401      	movs	r4, #1
   81220:	e7c2      	b.n	811a8 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81222:	2c01      	cmp	r4, #1
   81224:	d0f6      	beq.n	81214 <xTaskResumeAll+0xa4>
   81226:	4b0f      	ldr	r3, [pc, #60]	; (81264 <xTaskResumeAll+0xf4>)
   81228:	681b      	ldr	r3, [r3, #0]
   8122a:	2b01      	cmp	r3, #1
   8122c:	d1bc      	bne.n	811a8 <xTaskResumeAll+0x38>
   8122e:	e7f1      	b.n	81214 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81230:	2400      	movs	r4, #0
   81232:	e7b9      	b.n	811a8 <xTaskResumeAll+0x38>
   81234:	2007abc8 	.word	0x2007abc8
   81238:	00080589 	.word	0x00080589
   8123c:	00080599 	.word	0x00080599
   81240:	2007abc0 	.word	0x2007abc0
   81244:	00080503 	.word	0x00080503
   81248:	2007abd4 	.word	0x2007abd4
   8124c:	000805b9 	.word	0x000805b9
   81250:	2007ab5c 	.word	0x2007ab5c
   81254:	000804ad 	.word	0x000804ad
   81258:	2007ab50 	.word	0x2007ab50
   8125c:	2007abc4 	.word	0x2007abc4
   81260:	00081049 	.word	0x00081049
   81264:	2007ac04 	.word	0x2007ac04
   81268:	00080579 	.word	0x00080579
   8126c:	2007ac0c 	.word	0x2007ac0c

00081270 <vTaskDelayUntil>:
	{
   81270:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxPreviousWakeTime );
   81272:	b130      	cbz	r0, 81282 <vTaskDelayUntil+0x12>
   81274:	460c      	mov	r4, r1
   81276:	4605      	mov	r5, r0
		configASSERT( ( xTimeIncrement > 0U ) );
   81278:	b939      	cbnz	r1, 8128a <vTaskDelayUntil+0x1a>
   8127a:	4b18      	ldr	r3, [pc, #96]	; (812dc <vTaskDelayUntil+0x6c>)
   8127c:	4798      	blx	r3
   8127e:	bf00      	nop
   81280:	e7fd      	b.n	8127e <vTaskDelayUntil+0xe>
		configASSERT( pxPreviousWakeTime );
   81282:	4b16      	ldr	r3, [pc, #88]	; (812dc <vTaskDelayUntil+0x6c>)
   81284:	4798      	blx	r3
   81286:	bf00      	nop
   81288:	e7fd      	b.n	81286 <vTaskDelayUntil+0x16>
		vTaskSuspendAll();
   8128a:	4b15      	ldr	r3, [pc, #84]	; (812e0 <vTaskDelayUntil+0x70>)
   8128c:	4798      	blx	r3
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8128e:	682b      	ldr	r3, [r5, #0]
   81290:	441c      	add	r4, r3
			if( xTickCount < *pxPreviousWakeTime )
   81292:	4a14      	ldr	r2, [pc, #80]	; (812e4 <vTaskDelayUntil+0x74>)
   81294:	6812      	ldr	r2, [r2, #0]
   81296:	4293      	cmp	r3, r2
   81298:	d90a      	bls.n	812b0 <vTaskDelayUntil+0x40>
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8129a:	42a3      	cmp	r3, r4
   8129c:	d90e      	bls.n	812bc <vTaskDelayUntil+0x4c>
   8129e:	4b11      	ldr	r3, [pc, #68]	; (812e4 <vTaskDelayUntil+0x74>)
   812a0:	681b      	ldr	r3, [r3, #0]
			*pxPreviousWakeTime = xTimeToWake;
   812a2:	602c      	str	r4, [r5, #0]
			if( xShouldDelay != pdFALSE )
   812a4:	429c      	cmp	r4, r3
   812a6:	d80f      	bhi.n	812c8 <vTaskDelayUntil+0x58>
		xAlreadyYielded = xTaskResumeAll();
   812a8:	4b0f      	ldr	r3, [pc, #60]	; (812e8 <vTaskDelayUntil+0x78>)
   812aa:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
   812ac:	b140      	cbz	r0, 812c0 <vTaskDelayUntil+0x50>
   812ae:	bd38      	pop	{r3, r4, r5, pc}
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   812b0:	42a3      	cmp	r3, r4
   812b2:	d808      	bhi.n	812c6 <vTaskDelayUntil+0x56>
   812b4:	4b0b      	ldr	r3, [pc, #44]	; (812e4 <vTaskDelayUntil+0x74>)
   812b6:	681b      	ldr	r3, [r3, #0]
   812b8:	429c      	cmp	r4, r3
   812ba:	d804      	bhi.n	812c6 <vTaskDelayUntil+0x56>
			*pxPreviousWakeTime = xTimeToWake;
   812bc:	602c      	str	r4, [r5, #0]
   812be:	e7f3      	b.n	812a8 <vTaskDelayUntil+0x38>
			portYIELD_WITHIN_API();
   812c0:	4b0a      	ldr	r3, [pc, #40]	; (812ec <vTaskDelayUntil+0x7c>)
   812c2:	4798      	blx	r3
	}
   812c4:	bd38      	pop	{r3, r4, r5, pc}
			*pxPreviousWakeTime = xTimeToWake;
   812c6:	602c      	str	r4, [r5, #0]
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   812c8:	4b09      	ldr	r3, [pc, #36]	; (812f0 <vTaskDelayUntil+0x80>)
   812ca:	6818      	ldr	r0, [r3, #0]
   812cc:	3004      	adds	r0, #4
   812ce:	4b09      	ldr	r3, [pc, #36]	; (812f4 <vTaskDelayUntil+0x84>)
   812d0:	4798      	blx	r3
				prvAddCurrentTaskToDelayedList( xTimeToWake );
   812d2:	4620      	mov	r0, r4
   812d4:	4b08      	ldr	r3, [pc, #32]	; (812f8 <vTaskDelayUntil+0x88>)
   812d6:	4798      	blx	r3
   812d8:	e7e6      	b.n	812a8 <vTaskDelayUntil+0x38>
   812da:	bf00      	nop
   812dc:	00080589 	.word	0x00080589
   812e0:	00081019 	.word	0x00081019
   812e4:	2007ac4c 	.word	0x2007ac4c
   812e8:	00081171 	.word	0x00081171
   812ec:	00080579 	.word	0x00080579
   812f0:	2007ab50 	.word	0x2007ab50
   812f4:	00080503 	.word	0x00080503
   812f8:	00080d55 	.word	0x00080d55

000812fc <prvIdleTask>:
{
   812fc:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   812fe:	4d16      	ldr	r5, [pc, #88]	; (81358 <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   81300:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8137c <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81304:	4e15      	ldr	r6, [pc, #84]	; (8135c <prvIdleTask+0x60>)
   81306:	e024      	b.n	81352 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81308:	4b15      	ldr	r3, [pc, #84]	; (81360 <prvIdleTask+0x64>)
   8130a:	681b      	ldr	r3, [r3, #0]
   8130c:	2b01      	cmp	r3, #1
   8130e:	d81e      	bhi.n	8134e <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81310:	682b      	ldr	r3, [r5, #0]
   81312:	2b00      	cmp	r3, #0
   81314:	d0f8      	beq.n	81308 <prvIdleTask+0xc>
			vTaskSuspendAll();
   81316:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81318:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   8131a:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   8131c:	2c00      	cmp	r4, #0
   8131e:	d0f7      	beq.n	81310 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81320:	4b10      	ldr	r3, [pc, #64]	; (81364 <prvIdleTask+0x68>)
   81322:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81324:	68f3      	ldr	r3, [r6, #12]
   81326:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81328:	1d20      	adds	r0, r4, #4
   8132a:	4b0f      	ldr	r3, [pc, #60]	; (81368 <prvIdleTask+0x6c>)
   8132c:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   8132e:	4a0f      	ldr	r2, [pc, #60]	; (8136c <prvIdleTask+0x70>)
   81330:	6813      	ldr	r3, [r2, #0]
   81332:	3b01      	subs	r3, #1
   81334:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81336:	682b      	ldr	r3, [r5, #0]
   81338:	3b01      	subs	r3, #1
   8133a:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   8133c:	4b0c      	ldr	r3, [pc, #48]	; (81370 <prvIdleTask+0x74>)
   8133e:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81340:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81342:	f8df 903c 	ldr.w	r9, [pc, #60]	; 81380 <prvIdleTask+0x84>
   81346:	47c8      	blx	r9
		vPortFree( pxTCB );
   81348:	4620      	mov	r0, r4
   8134a:	47c8      	blx	r9
   8134c:	e7e0      	b.n	81310 <prvIdleTask+0x14>
				taskYIELD();
   8134e:	4b09      	ldr	r3, [pc, #36]	; (81374 <prvIdleTask+0x78>)
   81350:	4798      	blx	r3
			xTaskResumeAll();
   81352:	4f09      	ldr	r7, [pc, #36]	; (81378 <prvIdleTask+0x7c>)
   81354:	e7dc      	b.n	81310 <prvIdleTask+0x14>
   81356:	bf00      	nop
   81358:	2007abd0 	.word	0x2007abd0
   8135c:	2007ac38 	.word	0x2007ac38
   81360:	2007ab5c 	.word	0x2007ab5c
   81364:	00080599 	.word	0x00080599
   81368:	00080503 	.word	0x00080503
   8136c:	2007abc0 	.word	0x2007abc0
   81370:	000805b9 	.word	0x000805b9
   81374:	00080579 	.word	0x00080579
   81378:	00081171 	.word	0x00081171
   8137c:	00081019 	.word	0x00081019
   81380:	000807b5 	.word	0x000807b5

00081384 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81384:	4b21      	ldr	r3, [pc, #132]	; (8140c <vTaskSwitchContext+0x88>)
   81386:	681b      	ldr	r3, [r3, #0]
   81388:	b9eb      	cbnz	r3, 813c6 <vTaskSwitchContext+0x42>
{
   8138a:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   8138c:	4b20      	ldr	r3, [pc, #128]	; (81410 <vTaskSwitchContext+0x8c>)
   8138e:	681b      	ldr	r3, [r3, #0]
   81390:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81394:	009b      	lsls	r3, r3, #2
   81396:	4a1f      	ldr	r2, [pc, #124]	; (81414 <vTaskSwitchContext+0x90>)
   81398:	58d3      	ldr	r3, [r2, r3]
   8139a:	b9c3      	cbnz	r3, 813ce <vTaskSwitchContext+0x4a>
   8139c:	4b1c      	ldr	r3, [pc, #112]	; (81410 <vTaskSwitchContext+0x8c>)
   8139e:	681b      	ldr	r3, [r3, #0]
   813a0:	b16b      	cbz	r3, 813be <vTaskSwitchContext+0x3a>
   813a2:	4a1b      	ldr	r2, [pc, #108]	; (81410 <vTaskSwitchContext+0x8c>)
   813a4:	491b      	ldr	r1, [pc, #108]	; (81414 <vTaskSwitchContext+0x90>)
   813a6:	6813      	ldr	r3, [r2, #0]
   813a8:	3b01      	subs	r3, #1
   813aa:	6013      	str	r3, [r2, #0]
   813ac:	6813      	ldr	r3, [r2, #0]
   813ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   813b6:	b953      	cbnz	r3, 813ce <vTaskSwitchContext+0x4a>
   813b8:	6813      	ldr	r3, [r2, #0]
   813ba:	2b00      	cmp	r3, #0
   813bc:	d1f3      	bne.n	813a6 <vTaskSwitchContext+0x22>
   813be:	4b16      	ldr	r3, [pc, #88]	; (81418 <vTaskSwitchContext+0x94>)
   813c0:	4798      	blx	r3
   813c2:	bf00      	nop
   813c4:	e7fd      	b.n	813c2 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   813c6:	2201      	movs	r2, #1
   813c8:	4b14      	ldr	r3, [pc, #80]	; (8141c <vTaskSwitchContext+0x98>)
   813ca:	601a      	str	r2, [r3, #0]
   813cc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   813ce:	4b10      	ldr	r3, [pc, #64]	; (81410 <vTaskSwitchContext+0x8c>)
   813d0:	681b      	ldr	r3, [r3, #0]
   813d2:	4a10      	ldr	r2, [pc, #64]	; (81414 <vTaskSwitchContext+0x90>)
   813d4:	0099      	lsls	r1, r3, #2
   813d6:	18c8      	adds	r0, r1, r3
   813d8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   813dc:	6844      	ldr	r4, [r0, #4]
   813de:	6864      	ldr	r4, [r4, #4]
   813e0:	6044      	str	r4, [r0, #4]
   813e2:	4419      	add	r1, r3
   813e4:	4602      	mov	r2, r0
   813e6:	3208      	adds	r2, #8
   813e8:	4294      	cmp	r4, r2
   813ea:	d009      	beq.n	81400 <vTaskSwitchContext+0x7c>
   813ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   813f0:	4a08      	ldr	r2, [pc, #32]	; (81414 <vTaskSwitchContext+0x90>)
   813f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   813f6:	685b      	ldr	r3, [r3, #4]
   813f8:	68da      	ldr	r2, [r3, #12]
   813fa:	4b09      	ldr	r3, [pc, #36]	; (81420 <vTaskSwitchContext+0x9c>)
   813fc:	601a      	str	r2, [r3, #0]
   813fe:	bd10      	pop	{r4, pc}
   81400:	6860      	ldr	r0, [r4, #4]
   81402:	4a04      	ldr	r2, [pc, #16]	; (81414 <vTaskSwitchContext+0x90>)
   81404:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81408:	6050      	str	r0, [r2, #4]
   8140a:	e7ef      	b.n	813ec <vTaskSwitchContext+0x68>
   8140c:	2007abc8 	.word	0x2007abc8
   81410:	2007abd4 	.word	0x2007abd4
   81414:	2007ab5c 	.word	0x2007ab5c
   81418:	00080589 	.word	0x00080589
   8141c:	2007ac04 	.word	0x2007ac04
   81420:	2007ab50 	.word	0x2007ab50

00081424 <vTaskPlaceOnEventList>:
{
   81424:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   81426:	b190      	cbz	r0, 8144e <vTaskPlaceOnEventList+0x2a>
   81428:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8142a:	4d0e      	ldr	r5, [pc, #56]	; (81464 <vTaskPlaceOnEventList+0x40>)
   8142c:	6829      	ldr	r1, [r5, #0]
   8142e:	3118      	adds	r1, #24
   81430:	4b0d      	ldr	r3, [pc, #52]	; (81468 <vTaskPlaceOnEventList+0x44>)
   81432:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81434:	6828      	ldr	r0, [r5, #0]
   81436:	3004      	adds	r0, #4
   81438:	4b0c      	ldr	r3, [pc, #48]	; (8146c <vTaskPlaceOnEventList+0x48>)
   8143a:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   8143c:	f1b4 3fff 	cmp.w	r4, #4294967295
   81440:	d009      	beq.n	81456 <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   81442:	4b0b      	ldr	r3, [pc, #44]	; (81470 <vTaskPlaceOnEventList+0x4c>)
   81444:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81446:	4420      	add	r0, r4
   81448:	4b0a      	ldr	r3, [pc, #40]	; (81474 <vTaskPlaceOnEventList+0x50>)
   8144a:	4798      	blx	r3
   8144c:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   8144e:	4b0a      	ldr	r3, [pc, #40]	; (81478 <vTaskPlaceOnEventList+0x54>)
   81450:	4798      	blx	r3
   81452:	bf00      	nop
   81454:	e7fd      	b.n	81452 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81456:	6829      	ldr	r1, [r5, #0]
   81458:	3104      	adds	r1, #4
   8145a:	4808      	ldr	r0, [pc, #32]	; (8147c <vTaskPlaceOnEventList+0x58>)
   8145c:	4b08      	ldr	r3, [pc, #32]	; (81480 <vTaskPlaceOnEventList+0x5c>)
   8145e:	4798      	blx	r3
   81460:	bd38      	pop	{r3, r4, r5, pc}
   81462:	bf00      	nop
   81464:	2007ab50 	.word	0x2007ab50
   81468:	000804c9 	.word	0x000804c9
   8146c:	00080503 	.word	0x00080503
   81470:	2007ac4c 	.word	0x2007ac4c
   81474:	00080d55 	.word	0x00080d55
   81478:	00080589 	.word	0x00080589
   8147c:	2007ac24 	.word	0x2007ac24
   81480:	000804ad 	.word	0x000804ad

00081484 <vTaskPlaceOnEventListRestricted>:
	{
   81484:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81486:	b178      	cbz	r0, 814a8 <vTaskPlaceOnEventListRestricted+0x24>
   81488:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   8148a:	4c09      	ldr	r4, [pc, #36]	; (814b0 <vTaskPlaceOnEventListRestricted+0x2c>)
   8148c:	6821      	ldr	r1, [r4, #0]
   8148e:	3118      	adds	r1, #24
   81490:	4b08      	ldr	r3, [pc, #32]	; (814b4 <vTaskPlaceOnEventListRestricted+0x30>)
   81492:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81494:	6820      	ldr	r0, [r4, #0]
   81496:	3004      	adds	r0, #4
   81498:	4b07      	ldr	r3, [pc, #28]	; (814b8 <vTaskPlaceOnEventListRestricted+0x34>)
   8149a:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   8149c:	4b07      	ldr	r3, [pc, #28]	; (814bc <vTaskPlaceOnEventListRestricted+0x38>)
   8149e:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   814a0:	4428      	add	r0, r5
   814a2:	4b07      	ldr	r3, [pc, #28]	; (814c0 <vTaskPlaceOnEventListRestricted+0x3c>)
   814a4:	4798      	blx	r3
   814a6:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   814a8:	4b06      	ldr	r3, [pc, #24]	; (814c4 <vTaskPlaceOnEventListRestricted+0x40>)
   814aa:	4798      	blx	r3
   814ac:	bf00      	nop
   814ae:	e7fd      	b.n	814ac <vTaskPlaceOnEventListRestricted+0x28>
   814b0:	2007ab50 	.word	0x2007ab50
   814b4:	000804ad 	.word	0x000804ad
   814b8:	00080503 	.word	0x00080503
   814bc:	2007ac4c 	.word	0x2007ac4c
   814c0:	00080d55 	.word	0x00080d55
   814c4:	00080589 	.word	0x00080589

000814c8 <xTaskRemoveFromEventList>:
{
   814c8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   814ca:	68c3      	ldr	r3, [r0, #12]
   814cc:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   814ce:	b31c      	cbz	r4, 81518 <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   814d0:	f104 0518 	add.w	r5, r4, #24
   814d4:	4628      	mov	r0, r5
   814d6:	4b15      	ldr	r3, [pc, #84]	; (8152c <xTaskRemoveFromEventList+0x64>)
   814d8:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   814da:	4b15      	ldr	r3, [pc, #84]	; (81530 <xTaskRemoveFromEventList+0x68>)
   814dc:	681b      	ldr	r3, [r3, #0]
   814de:	b9fb      	cbnz	r3, 81520 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   814e0:	1d25      	adds	r5, r4, #4
   814e2:	4628      	mov	r0, r5
   814e4:	4b11      	ldr	r3, [pc, #68]	; (8152c <xTaskRemoveFromEventList+0x64>)
   814e6:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   814e8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   814ea:	4b12      	ldr	r3, [pc, #72]	; (81534 <xTaskRemoveFromEventList+0x6c>)
   814ec:	681b      	ldr	r3, [r3, #0]
   814ee:	4298      	cmp	r0, r3
   814f0:	bf84      	itt	hi
   814f2:	4b10      	ldrhi	r3, [pc, #64]	; (81534 <xTaskRemoveFromEventList+0x6c>)
   814f4:	6018      	strhi	r0, [r3, #0]
   814f6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   814fa:	4629      	mov	r1, r5
   814fc:	4b0e      	ldr	r3, [pc, #56]	; (81538 <xTaskRemoveFromEventList+0x70>)
   814fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81502:	4b0e      	ldr	r3, [pc, #56]	; (8153c <xTaskRemoveFromEventList+0x74>)
   81504:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81506:	4b0e      	ldr	r3, [pc, #56]	; (81540 <xTaskRemoveFromEventList+0x78>)
   81508:	681b      	ldr	r3, [r3, #0]
   8150a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   8150c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   8150e:	4298      	cmp	r0, r3
   81510:	bf34      	ite	cc
   81512:	2000      	movcc	r0, #0
   81514:	2001      	movcs	r0, #1
   81516:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81518:	4b0a      	ldr	r3, [pc, #40]	; (81544 <xTaskRemoveFromEventList+0x7c>)
   8151a:	4798      	blx	r3
   8151c:	bf00      	nop
   8151e:	e7fd      	b.n	8151c <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81520:	4629      	mov	r1, r5
   81522:	4809      	ldr	r0, [pc, #36]	; (81548 <xTaskRemoveFromEventList+0x80>)
   81524:	4b05      	ldr	r3, [pc, #20]	; (8153c <xTaskRemoveFromEventList+0x74>)
   81526:	4798      	blx	r3
   81528:	e7ed      	b.n	81506 <xTaskRemoveFromEventList+0x3e>
   8152a:	bf00      	nop
   8152c:	00080503 	.word	0x00080503
   81530:	2007abc8 	.word	0x2007abc8
   81534:	2007abd4 	.word	0x2007abd4
   81538:	2007ab5c 	.word	0x2007ab5c
   8153c:	000804ad 	.word	0x000804ad
   81540:	2007ab50 	.word	0x2007ab50
   81544:	00080589 	.word	0x00080589
   81548:	2007ac0c 	.word	0x2007ac0c

0008154c <vTaskSetTimeOutState>:
{
   8154c:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   8154e:	b130      	cbz	r0, 8155e <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81550:	4a05      	ldr	r2, [pc, #20]	; (81568 <vTaskSetTimeOutState+0x1c>)
   81552:	6812      	ldr	r2, [r2, #0]
   81554:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81556:	4a05      	ldr	r2, [pc, #20]	; (8156c <vTaskSetTimeOutState+0x20>)
   81558:	6812      	ldr	r2, [r2, #0]
   8155a:	6042      	str	r2, [r0, #4]
   8155c:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   8155e:	4b04      	ldr	r3, [pc, #16]	; (81570 <vTaskSetTimeOutState+0x24>)
   81560:	4798      	blx	r3
   81562:	bf00      	nop
   81564:	e7fd      	b.n	81562 <vTaskSetTimeOutState+0x16>
   81566:	bf00      	nop
   81568:	2007ac08 	.word	0x2007ac08
   8156c:	2007ac4c 	.word	0x2007ac4c
   81570:	00080589 	.word	0x00080589

00081574 <xTaskCheckForTimeOut>:
{
   81574:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   81576:	b1e8      	cbz	r0, 815b4 <xTaskCheckForTimeOut+0x40>
   81578:	460d      	mov	r5, r1
   8157a:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   8157c:	b1f1      	cbz	r1, 815bc <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   8157e:	4b18      	ldr	r3, [pc, #96]	; (815e0 <xTaskCheckForTimeOut+0x6c>)
   81580:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   81582:	682b      	ldr	r3, [r5, #0]
   81584:	f1b3 3fff 	cmp.w	r3, #4294967295
   81588:	d026      	beq.n	815d8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8158a:	4a16      	ldr	r2, [pc, #88]	; (815e4 <xTaskCheckForTimeOut+0x70>)
   8158c:	6812      	ldr	r2, [r2, #0]
   8158e:	6821      	ldr	r1, [r4, #0]
   81590:	4291      	cmp	r1, r2
   81592:	d004      	beq.n	8159e <xTaskCheckForTimeOut+0x2a>
   81594:	4a14      	ldr	r2, [pc, #80]	; (815e8 <xTaskCheckForTimeOut+0x74>)
   81596:	6812      	ldr	r2, [r2, #0]
   81598:	6861      	ldr	r1, [r4, #4]
   8159a:	4291      	cmp	r1, r2
   8159c:	d91e      	bls.n	815dc <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8159e:	4a12      	ldr	r2, [pc, #72]	; (815e8 <xTaskCheckForTimeOut+0x74>)
   815a0:	6812      	ldr	r2, [r2, #0]
   815a2:	6861      	ldr	r1, [r4, #4]
   815a4:	1a52      	subs	r2, r2, r1
   815a6:	4293      	cmp	r3, r2
   815a8:	d80c      	bhi.n	815c4 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   815aa:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   815ac:	4b0f      	ldr	r3, [pc, #60]	; (815ec <xTaskCheckForTimeOut+0x78>)
   815ae:	4798      	blx	r3
}
   815b0:	4620      	mov	r0, r4
   815b2:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   815b4:	4b0e      	ldr	r3, [pc, #56]	; (815f0 <xTaskCheckForTimeOut+0x7c>)
   815b6:	4798      	blx	r3
   815b8:	bf00      	nop
   815ba:	e7fd      	b.n	815b8 <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   815bc:	4b0c      	ldr	r3, [pc, #48]	; (815f0 <xTaskCheckForTimeOut+0x7c>)
   815be:	4798      	blx	r3
   815c0:	bf00      	nop
   815c2:	e7fd      	b.n	815c0 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   815c4:	4a08      	ldr	r2, [pc, #32]	; (815e8 <xTaskCheckForTimeOut+0x74>)
   815c6:	6812      	ldr	r2, [r2, #0]
   815c8:	1a52      	subs	r2, r2, r1
   815ca:	1a9b      	subs	r3, r3, r2
   815cc:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   815ce:	4620      	mov	r0, r4
   815d0:	4b08      	ldr	r3, [pc, #32]	; (815f4 <xTaskCheckForTimeOut+0x80>)
   815d2:	4798      	blx	r3
			xReturn = pdFALSE;
   815d4:	2400      	movs	r4, #0
   815d6:	e7e9      	b.n	815ac <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   815d8:	2400      	movs	r4, #0
   815da:	e7e7      	b.n	815ac <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   815dc:	2401      	movs	r4, #1
   815de:	e7e5      	b.n	815ac <xTaskCheckForTimeOut+0x38>
   815e0:	00080599 	.word	0x00080599
   815e4:	2007ac08 	.word	0x2007ac08
   815e8:	2007ac4c 	.word	0x2007ac4c
   815ec:	000805b9 	.word	0x000805b9
   815f0:	00080589 	.word	0x00080589
   815f4:	0008154d 	.word	0x0008154d

000815f8 <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   815f8:	2201      	movs	r2, #1
   815fa:	4b01      	ldr	r3, [pc, #4]	; (81600 <vTaskMissedYield+0x8>)
   815fc:	601a      	str	r2, [r3, #0]
   815fe:	4770      	bx	lr
   81600:	2007ac04 	.word	0x2007ac04

00081604 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81604:	4b01      	ldr	r3, [pc, #4]	; (8160c <xTaskGetCurrentTaskHandle+0x8>)
   81606:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81608:	4770      	bx	lr
   8160a:	bf00      	nop
   8160c:	2007ab50 	.word	0x2007ab50

00081610 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81610:	4b05      	ldr	r3, [pc, #20]	; (81628 <xTaskGetSchedulerState+0x18>)
   81612:	681b      	ldr	r3, [r3, #0]
   81614:	b133      	cbz	r3, 81624 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81616:	4b05      	ldr	r3, [pc, #20]	; (8162c <xTaskGetSchedulerState+0x1c>)
   81618:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   8161a:	2b00      	cmp	r3, #0
   8161c:	bf0c      	ite	eq
   8161e:	2001      	moveq	r0, #1
   81620:	2002      	movne	r0, #2
   81622:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81624:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   81626:	4770      	bx	lr
   81628:	2007ac20 	.word	0x2007ac20
   8162c:	2007abc8 	.word	0x2007abc8

00081630 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81630:	2800      	cmp	r0, #0
   81632:	d031      	beq.n	81698 <vTaskPriorityInherit+0x68>
	{
   81634:	b538      	push	{r3, r4, r5, lr}
   81636:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81638:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   8163a:	4918      	ldr	r1, [pc, #96]	; (8169c <vTaskPriorityInherit+0x6c>)
   8163c:	6809      	ldr	r1, [r1, #0]
   8163e:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81640:	428b      	cmp	r3, r1
   81642:	d211      	bcs.n	81668 <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81644:	4915      	ldr	r1, [pc, #84]	; (8169c <vTaskPriorityInherit+0x6c>)
   81646:	6809      	ldr	r1, [r1, #0]
   81648:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   8164a:	f1c1 0105 	rsb	r1, r1, #5
   8164e:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81654:	4912      	ldr	r1, [pc, #72]	; (816a0 <vTaskPriorityInherit+0x70>)
   81656:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8165a:	6941      	ldr	r1, [r0, #20]
   8165c:	4299      	cmp	r1, r3
   8165e:	d004      	beq.n	8166a <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81660:	4b0e      	ldr	r3, [pc, #56]	; (8169c <vTaskPriorityInherit+0x6c>)
   81662:	681b      	ldr	r3, [r3, #0]
   81664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81666:	62c3      	str	r3, [r0, #44]	; 0x2c
   81668:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8166a:	1d04      	adds	r4, r0, #4
   8166c:	4620      	mov	r0, r4
   8166e:	4b0d      	ldr	r3, [pc, #52]	; (816a4 <vTaskPriorityInherit+0x74>)
   81670:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81672:	4b0a      	ldr	r3, [pc, #40]	; (8169c <vTaskPriorityInherit+0x6c>)
   81674:	681b      	ldr	r3, [r3, #0]
   81676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81678:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   8167a:	4b0b      	ldr	r3, [pc, #44]	; (816a8 <vTaskPriorityInherit+0x78>)
   8167c:	681b      	ldr	r3, [r3, #0]
   8167e:	4298      	cmp	r0, r3
   81680:	bf84      	itt	hi
   81682:	4b09      	ldrhi	r3, [pc, #36]	; (816a8 <vTaskPriorityInherit+0x78>)
   81684:	6018      	strhi	r0, [r3, #0]
   81686:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   8168a:	4621      	mov	r1, r4
   8168c:	4b04      	ldr	r3, [pc, #16]	; (816a0 <vTaskPriorityInherit+0x70>)
   8168e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81692:	4b06      	ldr	r3, [pc, #24]	; (816ac <vTaskPriorityInherit+0x7c>)
   81694:	4798      	blx	r3
   81696:	bd38      	pop	{r3, r4, r5, pc}
   81698:	4770      	bx	lr
   8169a:	bf00      	nop
   8169c:	2007ab50 	.word	0x2007ab50
   816a0:	2007ab5c 	.word	0x2007ab5c
   816a4:	00080503 	.word	0x00080503
   816a8:	2007abd4 	.word	0x2007abd4
   816ac:	000804ad 	.word	0x000804ad

000816b0 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   816b0:	b1e8      	cbz	r0, 816ee <vTaskPriorityDisinherit+0x3e>
	{
   816b2:	b538      	push	{r3, r4, r5, lr}
   816b4:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   816b6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   816b8:	6c82      	ldr	r2, [r0, #72]	; 0x48
   816ba:	4291      	cmp	r1, r2
   816bc:	d016      	beq.n	816ec <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   816be:	1d05      	adds	r5, r0, #4
   816c0:	4628      	mov	r0, r5
   816c2:	4b0b      	ldr	r3, [pc, #44]	; (816f0 <vTaskPriorityDisinherit+0x40>)
   816c4:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   816c6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   816c8:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   816ca:	f1c0 0305 	rsb	r3, r0, #5
   816ce:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   816d0:	4b08      	ldr	r3, [pc, #32]	; (816f4 <vTaskPriorityDisinherit+0x44>)
   816d2:	681b      	ldr	r3, [r3, #0]
   816d4:	4298      	cmp	r0, r3
   816d6:	bf84      	itt	hi
   816d8:	4b06      	ldrhi	r3, [pc, #24]	; (816f4 <vTaskPriorityDisinherit+0x44>)
   816da:	6018      	strhi	r0, [r3, #0]
   816dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   816e0:	4629      	mov	r1, r5
   816e2:	4b05      	ldr	r3, [pc, #20]	; (816f8 <vTaskPriorityDisinherit+0x48>)
   816e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   816e8:	4b04      	ldr	r3, [pc, #16]	; (816fc <vTaskPriorityDisinherit+0x4c>)
   816ea:	4798      	blx	r3
   816ec:	bd38      	pop	{r3, r4, r5, pc}
   816ee:	4770      	bx	lr
   816f0:	00080503 	.word	0x00080503
   816f4:	2007abd4 	.word	0x2007abd4
   816f8:	2007ab5c 	.word	0x2007ab5c
   816fc:	000804ad 	.word	0x000804ad

00081700 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81700:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81702:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81704:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81706:	4291      	cmp	r1, r2
   81708:	d80c      	bhi.n	81724 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   8170a:	1ad2      	subs	r2, r2, r3
   8170c:	6983      	ldr	r3, [r0, #24]
   8170e:	429a      	cmp	r2, r3
   81710:	d301      	bcc.n	81716 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81712:	2001      	movs	r0, #1
   81714:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81716:	1d01      	adds	r1, r0, #4
   81718:	4b09      	ldr	r3, [pc, #36]	; (81740 <prvInsertTimerInActiveList+0x40>)
   8171a:	6818      	ldr	r0, [r3, #0]
   8171c:	4b09      	ldr	r3, [pc, #36]	; (81744 <prvInsertTimerInActiveList+0x44>)
   8171e:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81720:	2000      	movs	r0, #0
   81722:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81724:	429a      	cmp	r2, r3
   81726:	d201      	bcs.n	8172c <prvInsertTimerInActiveList+0x2c>
   81728:	4299      	cmp	r1, r3
   8172a:	d206      	bcs.n	8173a <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   8172c:	1d01      	adds	r1, r0, #4
   8172e:	4b06      	ldr	r3, [pc, #24]	; (81748 <prvInsertTimerInActiveList+0x48>)
   81730:	6818      	ldr	r0, [r3, #0]
   81732:	4b04      	ldr	r3, [pc, #16]	; (81744 <prvInsertTimerInActiveList+0x44>)
   81734:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81736:	2000      	movs	r0, #0
   81738:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   8173a:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   8173c:	bd08      	pop	{r3, pc}
   8173e:	bf00      	nop
   81740:	2007ac54 	.word	0x2007ac54
   81744:	000804c9 	.word	0x000804c9
   81748:	2007ac50 	.word	0x2007ac50

0008174c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   8174c:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   8174e:	4b0d      	ldr	r3, [pc, #52]	; (81784 <prvCheckForValidListAndQueue+0x38>)
   81750:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81752:	4b0d      	ldr	r3, [pc, #52]	; (81788 <prvCheckForValidListAndQueue+0x3c>)
   81754:	681b      	ldr	r3, [r3, #0]
   81756:	b113      	cbz	r3, 8175e <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   81758:	4b0c      	ldr	r3, [pc, #48]	; (8178c <prvCheckForValidListAndQueue+0x40>)
   8175a:	4798      	blx	r3
   8175c:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   8175e:	4d0c      	ldr	r5, [pc, #48]	; (81790 <prvCheckForValidListAndQueue+0x44>)
   81760:	4628      	mov	r0, r5
   81762:	4e0c      	ldr	r6, [pc, #48]	; (81794 <prvCheckForValidListAndQueue+0x48>)
   81764:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81766:	4c0c      	ldr	r4, [pc, #48]	; (81798 <prvCheckForValidListAndQueue+0x4c>)
   81768:	4620      	mov	r0, r4
   8176a:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   8176c:	4b0b      	ldr	r3, [pc, #44]	; (8179c <prvCheckForValidListAndQueue+0x50>)
   8176e:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81770:	4b0b      	ldr	r3, [pc, #44]	; (817a0 <prvCheckForValidListAndQueue+0x54>)
   81772:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81774:	2200      	movs	r2, #0
   81776:	210c      	movs	r1, #12
   81778:	2005      	movs	r0, #5
   8177a:	4b0a      	ldr	r3, [pc, #40]	; (817a4 <prvCheckForValidListAndQueue+0x58>)
   8177c:	4798      	blx	r3
   8177e:	4b02      	ldr	r3, [pc, #8]	; (81788 <prvCheckForValidListAndQueue+0x3c>)
   81780:	6018      	str	r0, [r3, #0]
   81782:	e7e9      	b.n	81758 <prvCheckForValidListAndQueue+0xc>
   81784:	00080599 	.word	0x00080599
   81788:	2007ac84 	.word	0x2007ac84
   8178c:	000805b9 	.word	0x000805b9
   81790:	2007ac58 	.word	0x2007ac58
   81794:	00080491 	.word	0x00080491
   81798:	2007ac6c 	.word	0x2007ac6c
   8179c:	2007ac50 	.word	0x2007ac50
   817a0:	2007ac54 	.word	0x2007ac54
   817a4:	00080991 	.word	0x00080991

000817a8 <xTimerCreateTimerTask>:
{
   817a8:	b510      	push	{r4, lr}
   817aa:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   817ac:	4b0b      	ldr	r3, [pc, #44]	; (817dc <xTimerCreateTimerTask+0x34>)
   817ae:	4798      	blx	r3
	if( xTimerQueue != NULL )
   817b0:	4b0b      	ldr	r3, [pc, #44]	; (817e0 <xTimerCreateTimerTask+0x38>)
   817b2:	681b      	ldr	r3, [r3, #0]
   817b4:	b173      	cbz	r3, 817d4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   817b6:	2300      	movs	r3, #0
   817b8:	9303      	str	r3, [sp, #12]
   817ba:	9302      	str	r3, [sp, #8]
   817bc:	9301      	str	r3, [sp, #4]
   817be:	2204      	movs	r2, #4
   817c0:	9200      	str	r2, [sp, #0]
   817c2:	f44f 7282 	mov.w	r2, #260	; 0x104
   817c6:	4907      	ldr	r1, [pc, #28]	; (817e4 <xTimerCreateTimerTask+0x3c>)
   817c8:	4807      	ldr	r0, [pc, #28]	; (817e8 <xTimerCreateTimerTask+0x40>)
   817ca:	4c08      	ldr	r4, [pc, #32]	; (817ec <xTimerCreateTimerTask+0x44>)
   817cc:	47a0      	blx	r4
	configASSERT( xReturn );
   817ce:	b108      	cbz	r0, 817d4 <xTimerCreateTimerTask+0x2c>
}
   817d0:	b004      	add	sp, #16
   817d2:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   817d4:	4b06      	ldr	r3, [pc, #24]	; (817f0 <xTimerCreateTimerTask+0x48>)
   817d6:	4798      	blx	r3
   817d8:	bf00      	nop
   817da:	e7fd      	b.n	817d8 <xTimerCreateTimerTask+0x30>
   817dc:	0008174d 	.word	0x0008174d
   817e0:	2007ac84 	.word	0x2007ac84
   817e4:	00085520 	.word	0x00085520
   817e8:	000818f9 	.word	0x000818f9
   817ec:	00080dad 	.word	0x00080dad
   817f0:	00080589 	.word	0x00080589

000817f4 <xTimerGenericCommand>:
{
   817f4:	b530      	push	{r4, r5, lr}
   817f6:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   817f8:	4c0f      	ldr	r4, [pc, #60]	; (81838 <xTimerGenericCommand+0x44>)
   817fa:	6825      	ldr	r5, [r4, #0]
   817fc:	b1d5      	cbz	r5, 81834 <xTimerGenericCommand+0x40>
   817fe:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   81800:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81802:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81804:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   81806:	b13b      	cbz	r3, 81818 <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81808:	2300      	movs	r3, #0
   8180a:	4622      	mov	r2, r4
   8180c:	a901      	add	r1, sp, #4
   8180e:	4628      	mov	r0, r5
   81810:	4c0a      	ldr	r4, [pc, #40]	; (8183c <xTimerGenericCommand+0x48>)
   81812:	47a0      	blx	r4
}
   81814:	b005      	add	sp, #20
   81816:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81818:	4b09      	ldr	r3, [pc, #36]	; (81840 <xTimerGenericCommand+0x4c>)
   8181a:	4798      	blx	r3
   8181c:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   8181e:	f04f 0300 	mov.w	r3, #0
   81822:	bf0c      	ite	eq
   81824:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81826:	461a      	movne	r2, r3
   81828:	a901      	add	r1, sp, #4
   8182a:	4803      	ldr	r0, [pc, #12]	; (81838 <xTimerGenericCommand+0x44>)
   8182c:	6800      	ldr	r0, [r0, #0]
   8182e:	4c05      	ldr	r4, [pc, #20]	; (81844 <xTimerGenericCommand+0x50>)
   81830:	47a0      	blx	r4
   81832:	e7ef      	b.n	81814 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   81834:	2000      	movs	r0, #0
	return xReturn;
   81836:	e7ed      	b.n	81814 <xTimerGenericCommand+0x20>
   81838:	2007ac84 	.word	0x2007ac84
   8183c:	00080b0d 	.word	0x00080b0d
   81840:	00081611 	.word	0x00081611
   81844:	000809e5 	.word	0x000809e5

00081848 <prvSampleTimeNow>:
{
   81848:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8184c:	b082      	sub	sp, #8
   8184e:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   81850:	4b21      	ldr	r3, [pc, #132]	; (818d8 <prvSampleTimeNow+0x90>)
   81852:	4798      	blx	r3
   81854:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   81856:	4b21      	ldr	r3, [pc, #132]	; (818dc <prvSampleTimeNow+0x94>)
   81858:	681b      	ldr	r3, [r3, #0]
   8185a:	4298      	cmp	r0, r3
   8185c:	d315      	bcc.n	8188a <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   8185e:	2300      	movs	r3, #0
   81860:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   81864:	4b1d      	ldr	r3, [pc, #116]	; (818dc <prvSampleTimeNow+0x94>)
   81866:	f8c3 8000 	str.w	r8, [r3]
}
   8186a:	4640      	mov	r0, r8
   8186c:	b002      	add	sp, #8
   8186e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81872:	2100      	movs	r1, #0
   81874:	9100      	str	r1, [sp, #0]
   81876:	460b      	mov	r3, r1
   81878:	4652      	mov	r2, sl
   8187a:	4620      	mov	r0, r4
   8187c:	4c18      	ldr	r4, [pc, #96]	; (818e0 <prvSampleTimeNow+0x98>)
   8187e:	47a0      	blx	r4
				configASSERT( xResult );
   81880:	b928      	cbnz	r0, 8188e <prvSampleTimeNow+0x46>
   81882:	4b18      	ldr	r3, [pc, #96]	; (818e4 <prvSampleTimeNow+0x9c>)
   81884:	4798      	blx	r3
   81886:	bf00      	nop
   81888:	e7fd      	b.n	81886 <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8188a:	4e17      	ldr	r6, [pc, #92]	; (818e8 <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8188c:	4f17      	ldr	r7, [pc, #92]	; (818ec <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   8188e:	6833      	ldr	r3, [r6, #0]
   81890:	681a      	ldr	r2, [r3, #0]
   81892:	b1c2      	cbz	r2, 818c6 <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   81894:	68da      	ldr	r2, [r3, #12]
   81896:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8189a:	68db      	ldr	r3, [r3, #12]
   8189c:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   8189e:	1d25      	adds	r5, r4, #4
   818a0:	4628      	mov	r0, r5
   818a2:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   818a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   818a6:	4620      	mov	r0, r4
   818a8:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   818aa:	69e3      	ldr	r3, [r4, #28]
   818ac:	2b01      	cmp	r3, #1
   818ae:	d1ee      	bne.n	8188e <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   818b0:	69a3      	ldr	r3, [r4, #24]
   818b2:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   818b4:	459a      	cmp	sl, r3
   818b6:	d2dc      	bcs.n	81872 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   818b8:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   818ba:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   818bc:	4629      	mov	r1, r5
   818be:	6830      	ldr	r0, [r6, #0]
   818c0:	4b0b      	ldr	r3, [pc, #44]	; (818f0 <prvSampleTimeNow+0xa8>)
   818c2:	4798      	blx	r3
   818c4:	e7e3      	b.n	8188e <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   818c6:	4a0b      	ldr	r2, [pc, #44]	; (818f4 <prvSampleTimeNow+0xac>)
   818c8:	6810      	ldr	r0, [r2, #0]
   818ca:	4907      	ldr	r1, [pc, #28]	; (818e8 <prvSampleTimeNow+0xa0>)
   818cc:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   818ce:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   818d0:	2301      	movs	r3, #1
   818d2:	f8c9 3000 	str.w	r3, [r9]
   818d6:	e7c5      	b.n	81864 <prvSampleTimeNow+0x1c>
   818d8:	00081029 	.word	0x00081029
   818dc:	2007ac80 	.word	0x2007ac80
   818e0:	000817f5 	.word	0x000817f5
   818e4:	00080589 	.word	0x00080589
   818e8:	2007ac50 	.word	0x2007ac50
   818ec:	00080503 	.word	0x00080503
   818f0:	000804c9 	.word	0x000804c9
   818f4:	2007ac54 	.word	0x2007ac54

000818f8 <prvTimerTask>:
{
   818f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   818fc:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   818fe:	f8df 8168 	ldr.w	r8, [pc, #360]	; 81a68 <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   81902:	4b4d      	ldr	r3, [pc, #308]	; (81a38 <prvTimerTask+0x140>)
   81904:	681b      	ldr	r3, [r3, #0]
   81906:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   81908:	2a00      	cmp	r2, #0
   8190a:	f000 8089 	beq.w	81a20 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8190e:	68db      	ldr	r3, [r3, #12]
   81910:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   81912:	4b4a      	ldr	r3, [pc, #296]	; (81a3c <prvTimerTask+0x144>)
   81914:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81916:	a803      	add	r0, sp, #12
   81918:	4b49      	ldr	r3, [pc, #292]	; (81a40 <prvTimerTask+0x148>)
   8191a:	4798      	blx	r3
   8191c:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   8191e:	9b03      	ldr	r3, [sp, #12]
   81920:	2b00      	cmp	r3, #0
   81922:	f040 8086 	bne.w	81a32 <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   81926:	42a8      	cmp	r0, r5
   81928:	d20f      	bcs.n	8194a <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8192a:	1ba9      	subs	r1, r5, r6
   8192c:	4b45      	ldr	r3, [pc, #276]	; (81a44 <prvTimerTask+0x14c>)
   8192e:	6818      	ldr	r0, [r3, #0]
   81930:	4b45      	ldr	r3, [pc, #276]	; (81a48 <prvTimerTask+0x150>)
   81932:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81934:	4b45      	ldr	r3, [pc, #276]	; (81a4c <prvTimerTask+0x154>)
   81936:	4798      	blx	r3
   81938:	b908      	cbnz	r0, 8193e <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   8193a:	4b45      	ldr	r3, [pc, #276]	; (81a50 <prvTimerTask+0x158>)
   8193c:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8193e:	a802      	add	r0, sp, #8
   81940:	4b3f      	ldr	r3, [pc, #252]	; (81a40 <prvTimerTask+0x148>)
   81942:	4798      	blx	r3
   81944:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   81946:	4e3f      	ldr	r6, [pc, #252]	; (81a44 <prvTimerTask+0x14c>)
   81948:	e036      	b.n	819b8 <prvTimerTask+0xc0>
				xTaskResumeAll();
   8194a:	4b40      	ldr	r3, [pc, #256]	; (81a4c <prvTimerTask+0x154>)
   8194c:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   8194e:	4b3a      	ldr	r3, [pc, #232]	; (81a38 <prvTimerTask+0x140>)
   81950:	681b      	ldr	r3, [r3, #0]
   81952:	68db      	ldr	r3, [r3, #12]
   81954:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   81956:	1d20      	adds	r0, r4, #4
   81958:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8195a:	69e3      	ldr	r3, [r4, #28]
   8195c:	2b01      	cmp	r3, #1
   8195e:	d114      	bne.n	8198a <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   81960:	69a1      	ldr	r1, [r4, #24]
   81962:	462b      	mov	r3, r5
   81964:	4632      	mov	r2, r6
   81966:	4429      	add	r1, r5
   81968:	4620      	mov	r0, r4
   8196a:	4e3a      	ldr	r6, [pc, #232]	; (81a54 <prvTimerTask+0x15c>)
   8196c:	47b0      	blx	r6
   8196e:	2801      	cmp	r0, #1
   81970:	d10b      	bne.n	8198a <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   81972:	2100      	movs	r1, #0
   81974:	9100      	str	r1, [sp, #0]
   81976:	460b      	mov	r3, r1
   81978:	462a      	mov	r2, r5
   8197a:	4620      	mov	r0, r4
   8197c:	4d36      	ldr	r5, [pc, #216]	; (81a58 <prvTimerTask+0x160>)
   8197e:	47a8      	blx	r5
			configASSERT( xResult );
   81980:	b918      	cbnz	r0, 8198a <prvTimerTask+0x92>
   81982:	4b36      	ldr	r3, [pc, #216]	; (81a5c <prvTimerTask+0x164>)
   81984:	4798      	blx	r3
   81986:	bf00      	nop
   81988:	e7fd      	b.n	81986 <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8198a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8198c:	4620      	mov	r0, r4
   8198e:	4798      	blx	r3
   81990:	e7d5      	b.n	8193e <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   81992:	2500      	movs	r5, #0
   81994:	e7c9      	b.n	8192a <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   81996:	9904      	ldr	r1, [sp, #16]
   81998:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8199a:	b131      	cbz	r1, 819aa <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   8199c:	463b      	mov	r3, r7
   8199e:	463a      	mov	r2, r7
   819a0:	4439      	add	r1, r7
   819a2:	4620      	mov	r0, r4
   819a4:	4c2b      	ldr	r4, [pc, #172]	; (81a54 <prvTimerTask+0x15c>)
   819a6:	47a0      	blx	r4
   819a8:	e006      	b.n	819b8 <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   819aa:	4b2c      	ldr	r3, [pc, #176]	; (81a5c <prvTimerTask+0x164>)
   819ac:	4798      	blx	r3
   819ae:	bf00      	nop
   819b0:	e7fd      	b.n	819ae <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   819b2:	4620      	mov	r0, r4
   819b4:	4b2a      	ldr	r3, [pc, #168]	; (81a60 <prvTimerTask+0x168>)
   819b6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   819b8:	4d2a      	ldr	r5, [pc, #168]	; (81a64 <prvTimerTask+0x16c>)
   819ba:	2300      	movs	r3, #0
   819bc:	461a      	mov	r2, r3
   819be:	a903      	add	r1, sp, #12
   819c0:	6830      	ldr	r0, [r6, #0]
   819c2:	47a8      	blx	r5
   819c4:	2800      	cmp	r0, #0
   819c6:	d09c      	beq.n	81902 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   819c8:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   819ca:	b11c      	cbz	r4, 819d4 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   819cc:	6963      	ldr	r3, [r4, #20]
   819ce:	b10b      	cbz	r3, 819d4 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   819d0:	1d20      	adds	r0, r4, #4
   819d2:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   819d4:	9b03      	ldr	r3, [sp, #12]
   819d6:	2b02      	cmp	r3, #2
   819d8:	d0dd      	beq.n	81996 <prvTimerTask+0x9e>
   819da:	2b03      	cmp	r3, #3
   819dc:	d0e9      	beq.n	819b2 <prvTimerTask+0xba>
   819de:	2b00      	cmp	r3, #0
   819e0:	d1eb      	bne.n	819ba <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   819e2:	9904      	ldr	r1, [sp, #16]
   819e4:	69a0      	ldr	r0, [r4, #24]
   819e6:	460b      	mov	r3, r1
   819e8:	463a      	mov	r2, r7
   819ea:	4401      	add	r1, r0
   819ec:	4620      	mov	r0, r4
   819ee:	4d19      	ldr	r5, [pc, #100]	; (81a54 <prvTimerTask+0x15c>)
   819f0:	47a8      	blx	r5
   819f2:	2801      	cmp	r0, #1
   819f4:	d1e0      	bne.n	819b8 <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   819f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   819f8:	4620      	mov	r0, r4
   819fa:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   819fc:	69e3      	ldr	r3, [r4, #28]
   819fe:	2b01      	cmp	r3, #1
   81a00:	d1da      	bne.n	819b8 <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   81a02:	69a2      	ldr	r2, [r4, #24]
   81a04:	2100      	movs	r1, #0
   81a06:	9100      	str	r1, [sp, #0]
   81a08:	460b      	mov	r3, r1
   81a0a:	9804      	ldr	r0, [sp, #16]
   81a0c:	4402      	add	r2, r0
   81a0e:	4620      	mov	r0, r4
   81a10:	4c11      	ldr	r4, [pc, #68]	; (81a58 <prvTimerTask+0x160>)
   81a12:	47a0      	blx	r4
						configASSERT( xResult );
   81a14:	2800      	cmp	r0, #0
   81a16:	d1cf      	bne.n	819b8 <prvTimerTask+0xc0>
   81a18:	4b10      	ldr	r3, [pc, #64]	; (81a5c <prvTimerTask+0x164>)
   81a1a:	4798      	blx	r3
   81a1c:	bf00      	nop
   81a1e:	e7fd      	b.n	81a1c <prvTimerTask+0x124>
	vTaskSuspendAll();
   81a20:	4b06      	ldr	r3, [pc, #24]	; (81a3c <prvTimerTask+0x144>)
   81a22:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   81a24:	a803      	add	r0, sp, #12
   81a26:	4b06      	ldr	r3, [pc, #24]	; (81a40 <prvTimerTask+0x148>)
   81a28:	4798      	blx	r3
   81a2a:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   81a2c:	9b03      	ldr	r3, [sp, #12]
   81a2e:	2b00      	cmp	r3, #0
   81a30:	d0af      	beq.n	81992 <prvTimerTask+0x9a>
			xTaskResumeAll();
   81a32:	4b06      	ldr	r3, [pc, #24]	; (81a4c <prvTimerTask+0x154>)
   81a34:	4798      	blx	r3
   81a36:	e782      	b.n	8193e <prvTimerTask+0x46>
   81a38:	2007ac50 	.word	0x2007ac50
   81a3c:	00081019 	.word	0x00081019
   81a40:	00081849 	.word	0x00081849
   81a44:	2007ac84 	.word	0x2007ac84
   81a48:	00080d05 	.word	0x00080d05
   81a4c:	00081171 	.word	0x00081171
   81a50:	00080579 	.word	0x00080579
   81a54:	00081701 	.word	0x00081701
   81a58:	000817f5 	.word	0x000817f5
   81a5c:	00080589 	.word	0x00080589
   81a60:	000807b5 	.word	0x000807b5
   81a64:	00080b9d 	.word	0x00080b9d
   81a68:	00080503 	.word	0x00080503

00081a6c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   81a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   81a70:	b980      	cbnz	r0, 81a94 <_read+0x28>
   81a72:	460c      	mov	r4, r1
   81a74:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   81a76:	2a00      	cmp	r2, #0
   81a78:	dd0f      	ble.n	81a9a <_read+0x2e>
   81a7a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   81a7c:	4e08      	ldr	r6, [pc, #32]	; (81aa0 <_read+0x34>)
   81a7e:	4d09      	ldr	r5, [pc, #36]	; (81aa4 <_read+0x38>)
   81a80:	6830      	ldr	r0, [r6, #0]
   81a82:	4621      	mov	r1, r4
   81a84:	682b      	ldr	r3, [r5, #0]
   81a86:	4798      	blx	r3
		ptr++;
   81a88:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   81a8a:	42bc      	cmp	r4, r7
   81a8c:	d1f8      	bne.n	81a80 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   81a8e:	4640      	mov	r0, r8
   81a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81a94:	f04f 38ff 	mov.w	r8, #4294967295
   81a98:	e7f9      	b.n	81a8e <_read+0x22>
	for (; len > 0; --len) {
   81a9a:	4680      	mov	r8, r0
   81a9c:	e7f7      	b.n	81a8e <_read+0x22>
   81a9e:	bf00      	nop
   81aa0:	2007adf0 	.word	0x2007adf0
   81aa4:	2007ade8 	.word	0x2007ade8

00081aa8 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   81aa8:	4b2a      	ldr	r3, [pc, #168]	; (81b54 <twi_set_speed+0xac>)
   81aaa:	4299      	cmp	r1, r3
   81aac:	d849      	bhi.n	81b42 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   81aae:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   81ab2:	4299      	cmp	r1, r3
   81ab4:	d92b      	bls.n	81b0e <twi_set_speed+0x66>
{
   81ab6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81ab8:	4c27      	ldr	r4, [pc, #156]	; (81b58 <twi_set_speed+0xb0>)
   81aba:	fba4 3402 	umull	r3, r4, r4, r2
   81abe:	0ba4      	lsrs	r4, r4, #14
   81ac0:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81ac2:	4b26      	ldr	r3, [pc, #152]	; (81b5c <twi_set_speed+0xb4>)
   81ac4:	440b      	add	r3, r1
   81ac6:	009b      	lsls	r3, r3, #2
   81ac8:	fbb2 f2f3 	udiv	r2, r2, r3
   81acc:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81ace:	2cff      	cmp	r4, #255	; 0xff
   81ad0:	d939      	bls.n	81b46 <twi_set_speed+0x9e>
   81ad2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   81ad4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   81ad6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81ad8:	2cff      	cmp	r4, #255	; 0xff
   81ada:	d90d      	bls.n	81af8 <twi_set_speed+0x50>
   81adc:	2907      	cmp	r1, #7
   81ade:	d1f9      	bne.n	81ad4 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   81ae0:	0213      	lsls	r3, r2, #8
   81ae2:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   81ae4:	0409      	lsls	r1, r1, #16
   81ae6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   81aea:	430b      	orrs	r3, r1
   81aec:	b2e4      	uxtb	r4, r4
   81aee:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   81af0:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   81af2:	2000      	movs	r0, #0
}
   81af4:	bc10      	pop	{r4}
   81af6:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81af8:	2aff      	cmp	r2, #255	; 0xff
   81afa:	d9f1      	bls.n	81ae0 <twi_set_speed+0x38>
   81afc:	2906      	cmp	r1, #6
   81afe:	d8ef      	bhi.n	81ae0 <twi_set_speed+0x38>
			ckdiv++;
   81b00:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   81b02:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81b04:	2aff      	cmp	r2, #255	; 0xff
   81b06:	d9eb      	bls.n	81ae0 <twi_set_speed+0x38>
   81b08:	2906      	cmp	r1, #6
   81b0a:	d9f9      	bls.n	81b00 <twi_set_speed+0x58>
   81b0c:	e7e8      	b.n	81ae0 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   81b0e:	0049      	lsls	r1, r1, #1
   81b10:	fbb2 f2f1 	udiv	r2, r2, r1
   81b14:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81b16:	2aff      	cmp	r2, #255	; 0xff
   81b18:	d911      	bls.n	81b3e <twi_set_speed+0x96>
   81b1a:	2300      	movs	r3, #0
			ckdiv++;
   81b1c:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   81b1e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81b20:	2aff      	cmp	r2, #255	; 0xff
   81b22:	d901      	bls.n	81b28 <twi_set_speed+0x80>
   81b24:	2b07      	cmp	r3, #7
   81b26:	d1f9      	bne.n	81b1c <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81b28:	0211      	lsls	r1, r2, #8
   81b2a:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   81b2c:	041b      	lsls	r3, r3, #16
   81b2e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   81b32:	430b      	orrs	r3, r1
   81b34:	b2d2      	uxtb	r2, r2
   81b36:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   81b38:	6102      	str	r2, [r0, #16]
	return PASS;
   81b3a:	2000      	movs	r0, #0
   81b3c:	4770      	bx	lr
	uint32_t ckdiv = 0;
   81b3e:	2300      	movs	r3, #0
   81b40:	e7f2      	b.n	81b28 <twi_set_speed+0x80>
		return FAIL;
   81b42:	2001      	movs	r0, #1
   81b44:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81b46:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   81b48:	bf88      	it	hi
   81b4a:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   81b4c:	d8d8      	bhi.n	81b00 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   81b4e:	2100      	movs	r1, #0
   81b50:	e7c6      	b.n	81ae0 <twi_set_speed+0x38>
   81b52:	bf00      	nop
   81b54:	00061a80 	.word	0x00061a80
   81b58:	057619f1 	.word	0x057619f1
   81b5c:	3ffd1200 	.word	0x3ffd1200

00081b60 <twi_master_init>:
{
   81b60:	b538      	push	{r3, r4, r5, lr}
   81b62:	4604      	mov	r4, r0
   81b64:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   81b66:	f04f 33ff 	mov.w	r3, #4294967295
   81b6a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   81b6c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   81b6e:	2380      	movs	r3, #128	; 0x80
   81b70:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   81b72:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   81b74:	2308      	movs	r3, #8
   81b76:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   81b78:	2320      	movs	r3, #32
   81b7a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   81b7c:	2304      	movs	r3, #4
   81b7e:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   81b80:	680a      	ldr	r2, [r1, #0]
   81b82:	6849      	ldr	r1, [r1, #4]
   81b84:	4b05      	ldr	r3, [pc, #20]	; (81b9c <twi_master_init+0x3c>)
   81b86:	4798      	blx	r3
   81b88:	2801      	cmp	r0, #1
   81b8a:	bf14      	ite	ne
   81b8c:	2000      	movne	r0, #0
   81b8e:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   81b90:	7a6b      	ldrb	r3, [r5, #9]
   81b92:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   81b94:	bf04      	itt	eq
   81b96:	2340      	moveq	r3, #64	; 0x40
   81b98:	6023      	streq	r3, [r4, #0]
}
   81b9a:	bd38      	pop	{r3, r4, r5, pc}
   81b9c:	00081aa9 	.word	0x00081aa9

00081ba0 <twi_mk_addr>:
	if (len == 0)
   81ba0:	460a      	mov	r2, r1
   81ba2:	b159      	cbz	r1, 81bbc <twi_mk_addr+0x1c>
	val = addr[0];
   81ba4:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   81ba6:	2901      	cmp	r1, #1
		val |= addr[1];
   81ba8:	bfc4      	itt	gt
   81baa:	7841      	ldrbgt	r1, [r0, #1]
   81bac:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
   81bb0:	2a02      	cmp	r2, #2
   81bb2:	dd04      	ble.n	81bbe <twi_mk_addr+0x1e>
		val |= addr[2];
   81bb4:	7882      	ldrb	r2, [r0, #2]
   81bb6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   81bba:	e000      	b.n	81bbe <twi_mk_addr+0x1e>
		return 0;
   81bbc:	2300      	movs	r3, #0
}
   81bbe:	4618      	mov	r0, r3
   81bc0:	4770      	bx	lr
	...

00081bc4 <twi_master_read>:
{
   81bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
   81bc6:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
   81bc8:	2c00      	cmp	r4, #0
   81bca:	d04f      	beq.n	81c6c <twi_master_read+0xa8>
   81bcc:	460b      	mov	r3, r1
   81bce:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
   81bd0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
   81bd2:	2000      	movs	r0, #0
   81bd4:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   81bd6:	684a      	ldr	r2, [r1, #4]
   81bd8:	0212      	lsls	r2, r2, #8
   81bda:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   81bde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   81be2:	7c09      	ldrb	r1, [r1, #16]
   81be4:	0409      	lsls	r1, r1, #16
   81be6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
   81bea:	430a      	orrs	r2, r1
   81bec:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
   81bee:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   81bf0:	6859      	ldr	r1, [r3, #4]
   81bf2:	4618      	mov	r0, r3
   81bf4:	4b22      	ldr	r3, [pc, #136]	; (81c80 <twi_master_read+0xbc>)
   81bf6:	4798      	blx	r3
   81bf8:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
   81bfa:	2c01      	cmp	r4, #1
   81bfc:	d00f      	beq.n	81c1e <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
   81bfe:	2301      	movs	r3, #1
   81c00:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   81c02:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
   81c04:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   81c06:	f413 7f80 	tst.w	r3, #256	; 0x100
   81c0a:	d136      	bne.n	81c7a <twi_master_read+0xb6>
   81c0c:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
   81c10:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
   81c14:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
   81c18:	f04f 0c02 	mov.w	ip, #2
   81c1c:	e019      	b.n	81c52 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   81c1e:	2303      	movs	r3, #3
   81c20:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   81c22:	2001      	movs	r0, #1
   81c24:	e7ee      	b.n	81c04 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
   81c26:	460a      	mov	r2, r1
   81c28:	4670      	mov	r0, lr
   81c2a:	e00c      	b.n	81c46 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
   81c2c:	b908      	cbnz	r0, 81c32 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
   81c2e:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
   81c32:	f013 0f02 	tst.w	r3, #2
   81c36:	d0f6      	beq.n	81c26 <twi_master_read+0x62>
   81c38:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
   81c3a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   81c3c:	7033      	strb	r3, [r6, #0]
		cnt--;
   81c3e:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   81c40:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
   81c42:	463a      	mov	r2, r7
	while (cnt > 0) {
   81c44:	b164      	cbz	r4, 81c60 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
   81c46:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   81c48:	f413 7f80 	tst.w	r3, #256	; 0x100
   81c4c:	d111      	bne.n	81c72 <twi_master_read+0xae>
		if (!timeout--) {
   81c4e:	1e51      	subs	r1, r2, #1
   81c50:	b18a      	cbz	r2, 81c76 <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
   81c52:	2c01      	cmp	r4, #1
   81c54:	d0ea      	beq.n	81c2c <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
   81c56:	f013 0f02 	tst.w	r3, #2
   81c5a:	d1ee      	bne.n	81c3a <twi_master_read+0x76>
   81c5c:	460a      	mov	r2, r1
   81c5e:	e7f1      	b.n	81c44 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   81c60:	6a2b      	ldr	r3, [r5, #32]
   81c62:	f013 0f01 	tst.w	r3, #1
   81c66:	d0fb      	beq.n	81c60 <twi_master_read+0x9c>
	p_twi->TWI_SR;
   81c68:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
   81c6a:	e000      	b.n	81c6e <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
   81c6c:	2401      	movs	r4, #1
}
   81c6e:	4620      	mov	r0, r4
   81c70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
   81c72:	2405      	movs	r4, #5
   81c74:	e7fb      	b.n	81c6e <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
   81c76:	2409      	movs	r4, #9
   81c78:	e7f9      	b.n	81c6e <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
   81c7a:	2405      	movs	r4, #5
   81c7c:	e7f7      	b.n	81c6e <twi_master_read+0xaa>
   81c7e:	bf00      	nop
   81c80:	00081ba1 	.word	0x00081ba1

00081c84 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   81c84:	6943      	ldr	r3, [r0, #20]
   81c86:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   81c8a:	bf1d      	ittte	ne
   81c8c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   81c90:	61c1      	strne	r1, [r0, #28]
	return 0;
   81c92:	2000      	movne	r0, #0
		return 1;
   81c94:	2001      	moveq	r0, #1
}
   81c96:	4770      	bx	lr

00081c98 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   81c98:	6943      	ldr	r3, [r0, #20]
   81c9a:	f013 0f01 	tst.w	r3, #1
   81c9e:	d005      	beq.n	81cac <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   81ca0:	6983      	ldr	r3, [r0, #24]
   81ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   81ca6:	600b      	str	r3, [r1, #0]

	return 0;
   81ca8:	2000      	movs	r0, #0
   81caa:	4770      	bx	lr
		return 1;
   81cac:	2001      	movs	r0, #1
}
   81cae:	4770      	bx	lr

00081cb0 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   81cb0:	b500      	push	{lr}
   81cb2:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   81cb4:	2201      	movs	r2, #1
   81cb6:	f10d 0107 	add.w	r1, sp, #7
   81cba:	4810      	ldr	r0, [pc, #64]	; (81cfc <USART0_Handler+0x4c>)
   81cbc:	4b10      	ldr	r3, [pc, #64]	; (81d00 <USART0_Handler+0x50>)
   81cbe:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   81cc0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   81cc2:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   81cc6:	2200      	movs	r2, #0
   81cc8:	4b0e      	ldr	r3, [pc, #56]	; (81d04 <USART0_Handler+0x54>)
   81cca:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   81ccc:	4b0e      	ldr	r3, [pc, #56]	; (81d08 <USART0_Handler+0x58>)
   81cce:	781b      	ldrb	r3, [r3, #0]
   81cd0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81cd4:	4a0d      	ldr	r2, [pc, #52]	; (81d0c <USART0_Handler+0x5c>)
   81cd6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   81cd8:	2b9b      	cmp	r3, #155	; 0x9b
   81cda:	d00b      	beq.n	81cf4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   81cdc:	3301      	adds	r3, #1
   81cde:	4a0a      	ldr	r2, [pc, #40]	; (81d08 <USART0_Handler+0x58>)
   81ce0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   81ce2:	2201      	movs	r2, #1
   81ce4:	4b07      	ldr	r3, [pc, #28]	; (81d04 <USART0_Handler+0x54>)
   81ce6:	701a      	strb	r2, [r3, #0]
   81ce8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   81cec:	b662      	cpsie	i
}
   81cee:	b003      	add	sp, #12
   81cf0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   81cf4:	2200      	movs	r2, #0
   81cf6:	4b04      	ldr	r3, [pc, #16]	; (81d08 <USART0_Handler+0x58>)
   81cf8:	701a      	strb	r2, [r3, #0]
   81cfa:	e7f2      	b.n	81ce2 <USART0_Handler+0x32>
   81cfc:	40098000 	.word	0x40098000
   81d00:	00081d61 	.word	0x00081d61
   81d04:	20070164 	.word	0x20070164
   81d08:	2007ad24 	.word	0x2007ad24
   81d0c:	2007ac88 	.word	0x2007ac88

00081d10 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   81d10:	3801      	subs	r0, #1
   81d12:	2802      	cmp	r0, #2
   81d14:	d815      	bhi.n	81d42 <_write+0x32>
{
   81d16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81d1a:	460e      	mov	r6, r1
   81d1c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   81d1e:	b19a      	cbz	r2, 81d48 <_write+0x38>
   81d20:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   81d22:	f8df 8038 	ldr.w	r8, [pc, #56]	; 81d5c <_write+0x4c>
   81d26:	4f0c      	ldr	r7, [pc, #48]	; (81d58 <_write+0x48>)
   81d28:	f8d8 0000 	ldr.w	r0, [r8]
   81d2c:	f815 1b01 	ldrb.w	r1, [r5], #1
   81d30:	683b      	ldr	r3, [r7, #0]
   81d32:	4798      	blx	r3
   81d34:	2800      	cmp	r0, #0
   81d36:	db0a      	blt.n	81d4e <_write+0x3e>
   81d38:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   81d3a:	3c01      	subs	r4, #1
   81d3c:	d1f4      	bne.n	81d28 <_write+0x18>
   81d3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   81d42:	f04f 30ff 	mov.w	r0, #4294967295
   81d46:	4770      	bx	lr
	for (; len != 0; --len) {
   81d48:	4610      	mov	r0, r2
   81d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   81d4e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   81d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81d56:	bf00      	nop
   81d58:	2007adec 	.word	0x2007adec
   81d5c:	2007adf0 	.word	0x2007adf0

00081d60 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   81d60:	2a00      	cmp	r2, #0
   81d62:	d051      	beq.n	81e08 <usart_serial_read_packet+0xa8>
{
   81d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81d68:	b083      	sub	sp, #12
   81d6a:	4605      	mov	r5, r0
   81d6c:	460c      	mov	r4, r1
   81d6e:	4692      	mov	sl, r2
   81d70:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   81d72:	4f26      	ldr	r7, [pc, #152]	; (81e0c <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   81d74:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 81e20 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   81d78:	4e25      	ldr	r6, [pc, #148]	; (81e10 <usart_serial_read_packet+0xb0>)
   81d7a:	e01d      	b.n	81db8 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   81d7c:	4621      	mov	r1, r4
   81d7e:	4638      	mov	r0, r7
   81d80:	47c8      	blx	r9
   81d82:	2800      	cmp	r0, #0
   81d84:	d1fa      	bne.n	81d7c <usart_serial_read_packet+0x1c>
   81d86:	e021      	b.n	81dcc <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   81d88:	469b      	mov	fp, r3
   81d8a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 81e24 <usart_serial_read_packet+0xc4>
   81d8e:	a901      	add	r1, sp, #4
   81d90:	4658      	mov	r0, fp
   81d92:	47c0      	blx	r8
   81d94:	2800      	cmp	r0, #0
   81d96:	d1fa      	bne.n	81d8e <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   81d98:	9b01      	ldr	r3, [sp, #4]
   81d9a:	7023      	strb	r3, [r4, #0]
   81d9c:	e019      	b.n	81dd2 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   81d9e:	469b      	mov	fp, r3
   81da0:	f8df 8080 	ldr.w	r8, [pc, #128]	; 81e24 <usart_serial_read_packet+0xc4>
   81da4:	a901      	add	r1, sp, #4
   81da6:	4658      	mov	r0, fp
   81da8:	47c0      	blx	r8
   81daa:	2800      	cmp	r0, #0
   81dac:	d1fa      	bne.n	81da4 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   81dae:	9b01      	ldr	r3, [sp, #4]
   81db0:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   81db2:	3401      	adds	r4, #1
	while (len) {
   81db4:	4554      	cmp	r4, sl
   81db6:	d023      	beq.n	81e00 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   81db8:	2300      	movs	r3, #0
   81dba:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   81dbc:	42bd      	cmp	r5, r7
   81dbe:	d0dd      	beq.n	81d7c <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   81dc0:	4b14      	ldr	r3, [pc, #80]	; (81e14 <usart_serial_read_packet+0xb4>)
   81dc2:	429d      	cmp	r5, r3
   81dc4:	d0e0      	beq.n	81d88 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   81dc6:	4b14      	ldr	r3, [pc, #80]	; (81e18 <usart_serial_read_packet+0xb8>)
   81dc8:	429d      	cmp	r5, r3
   81dca:	d0e8      	beq.n	81d9e <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   81dcc:	4b13      	ldr	r3, [pc, #76]	; (81e1c <usart_serial_read_packet+0xbc>)
   81dce:	429d      	cmp	r5, r3
   81dd0:	d00b      	beq.n	81dea <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   81dd2:	42b5      	cmp	r5, r6
   81dd4:	d1ed      	bne.n	81db2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81dd6:	f8df 804c 	ldr.w	r8, [pc, #76]	; 81e24 <usart_serial_read_packet+0xc4>
   81dda:	a901      	add	r1, sp, #4
   81ddc:	4630      	mov	r0, r6
   81dde:	47c0      	blx	r8
   81de0:	2800      	cmp	r0, #0
   81de2:	d1fa      	bne.n	81dda <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   81de4:	9b01      	ldr	r3, [sp, #4]
   81de6:	7023      	strb	r3, [r4, #0]
   81de8:	e7e3      	b.n	81db2 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   81dea:	469b      	mov	fp, r3
   81dec:	f8df 8034 	ldr.w	r8, [pc, #52]	; 81e24 <usart_serial_read_packet+0xc4>
   81df0:	a901      	add	r1, sp, #4
   81df2:	4658      	mov	r0, fp
   81df4:	47c0      	blx	r8
   81df6:	2800      	cmp	r0, #0
   81df8:	d1fa      	bne.n	81df0 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   81dfa:	9b01      	ldr	r3, [sp, #4]
   81dfc:	7023      	strb	r3, [r4, #0]
   81dfe:	e7d8      	b.n	81db2 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   81e00:	2000      	movs	r0, #0
   81e02:	b003      	add	sp, #12
   81e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e08:	2000      	movs	r0, #0
   81e0a:	4770      	bx	lr
   81e0c:	400e0800 	.word	0x400e0800
   81e10:	400a4000 	.word	0x400a4000
   81e14:	40098000 	.word	0x40098000
   81e18:	4009c000 	.word	0x4009c000
   81e1c:	400a0000 	.word	0x400a0000
   81e20:	00081e6f 	.word	0x00081e6f
   81e24:	00081c99 	.word	0x00081c99

00081e28 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   81e28:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   81e2a:	23ac      	movs	r3, #172	; 0xac
   81e2c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81e2e:	680b      	ldr	r3, [r1, #0]
   81e30:	684a      	ldr	r2, [r1, #4]
   81e32:	fbb3 f3f2 	udiv	r3, r3, r2
   81e36:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   81e38:	1e5c      	subs	r4, r3, #1
   81e3a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   81e3e:	4294      	cmp	r4, r2
   81e40:	d80b      	bhi.n	81e5a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   81e42:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   81e44:	688b      	ldr	r3, [r1, #8]
   81e46:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   81e48:	f240 2302 	movw	r3, #514	; 0x202
   81e4c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   81e50:	2350      	movs	r3, #80	; 0x50
   81e52:	6003      	str	r3, [r0, #0]

	return 0;
   81e54:	2000      	movs	r0, #0
}
   81e56:	bc10      	pop	{r4}
   81e58:	4770      	bx	lr
		return 1;
   81e5a:	2001      	movs	r0, #1
   81e5c:	e7fb      	b.n	81e56 <uart_init+0x2e>

00081e5e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   81e5e:	6943      	ldr	r3, [r0, #20]
   81e60:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   81e64:	bf1a      	itte	ne
   81e66:	61c1      	strne	r1, [r0, #28]
	return 0;
   81e68:	2000      	movne	r0, #0
		return 1;
   81e6a:	2001      	moveq	r0, #1
}
   81e6c:	4770      	bx	lr

00081e6e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   81e6e:	6943      	ldr	r3, [r0, #20]
   81e70:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   81e74:	bf1d      	ittte	ne
   81e76:	6983      	ldrne	r3, [r0, #24]
   81e78:	700b      	strbne	r3, [r1, #0]
	return 0;
   81e7a:	2000      	movne	r0, #0
		return 1;
   81e7c:	2001      	moveq	r0, #1
}
   81e7e:	4770      	bx	lr

00081e80 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   81e80:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   81e82:	480e      	ldr	r0, [pc, #56]	; (81ebc <sysclk_init+0x3c>)
   81e84:	4b0e      	ldr	r3, [pc, #56]	; (81ec0 <sysclk_init+0x40>)
   81e86:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81e88:	213e      	movs	r1, #62	; 0x3e
   81e8a:	2000      	movs	r0, #0
   81e8c:	4b0d      	ldr	r3, [pc, #52]	; (81ec4 <sysclk_init+0x44>)
   81e8e:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81e90:	4c0d      	ldr	r4, [pc, #52]	; (81ec8 <sysclk_init+0x48>)
   81e92:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81e94:	2800      	cmp	r0, #0
   81e96:	d0fc      	beq.n	81e92 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   81e98:	4b0c      	ldr	r3, [pc, #48]	; (81ecc <sysclk_init+0x4c>)
   81e9a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   81e9c:	4a0c      	ldr	r2, [pc, #48]	; (81ed0 <sysclk_init+0x50>)
   81e9e:	4b0d      	ldr	r3, [pc, #52]	; (81ed4 <sysclk_init+0x54>)
   81ea0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   81ea2:	4c0d      	ldr	r4, [pc, #52]	; (81ed8 <sysclk_init+0x58>)
   81ea4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   81ea6:	2800      	cmp	r0, #0
   81ea8:	d0fc      	beq.n	81ea4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81eaa:	2010      	movs	r0, #16
   81eac:	4b0b      	ldr	r3, [pc, #44]	; (81edc <sysclk_init+0x5c>)
   81eae:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   81eb0:	4b0b      	ldr	r3, [pc, #44]	; (81ee0 <sysclk_init+0x60>)
   81eb2:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   81eb4:	4801      	ldr	r0, [pc, #4]	; (81ebc <sysclk_init+0x3c>)
   81eb6:	4b02      	ldr	r3, [pc, #8]	; (81ec0 <sysclk_init+0x40>)
   81eb8:	4798      	blx	r3
   81eba:	bd10      	pop	{r4, pc}
   81ebc:	0501bd00 	.word	0x0501bd00
   81ec0:	200700a5 	.word	0x200700a5
   81ec4:	00082295 	.word	0x00082295
   81ec8:	000822e9 	.word	0x000822e9
   81ecc:	000822f9 	.word	0x000822f9
   81ed0:	200d3f01 	.word	0x200d3f01
   81ed4:	400e0600 	.word	0x400e0600
   81ed8:	00082309 	.word	0x00082309
   81edc:	00082231 	.word	0x00082231
   81ee0:	00082409 	.word	0x00082409

00081ee4 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   81ee4:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   81ee6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   81eea:	4b1e      	ldr	r3, [pc, #120]	; (81f64 <board_init+0x80>)
   81eec:	605a      	str	r2, [r3, #4]
   81eee:	200b      	movs	r0, #11
   81ef0:	4c1d      	ldr	r4, [pc, #116]	; (81f68 <board_init+0x84>)
   81ef2:	47a0      	blx	r4
   81ef4:	200c      	movs	r0, #12
   81ef6:	47a0      	blx	r4
   81ef8:	200d      	movs	r0, #13
   81efa:	47a0      	blx	r4
   81efc:	200e      	movs	r0, #14
   81efe:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   81f00:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f04:	203b      	movs	r0, #59	; 0x3b
   81f06:	4c19      	ldr	r4, [pc, #100]	; (81f6c <board_init+0x88>)
   81f08:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   81f0a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f0e:	2055      	movs	r0, #85	; 0x55
   81f10:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   81f12:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   81f16:	2056      	movs	r0, #86	; 0x56
   81f18:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   81f1a:	4915      	ldr	r1, [pc, #84]	; (81f70 <board_init+0x8c>)
   81f1c:	2068      	movs	r0, #104	; 0x68
   81f1e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   81f20:	4914      	ldr	r1, [pc, #80]	; (81f74 <board_init+0x90>)
   81f22:	205c      	movs	r0, #92	; 0x5c
   81f24:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   81f26:	4a14      	ldr	r2, [pc, #80]	; (81f78 <board_init+0x94>)
   81f28:	f44f 7140 	mov.w	r1, #768	; 0x300
   81f2c:	4813      	ldr	r0, [pc, #76]	; (81f7c <board_init+0x98>)
   81f2e:	4b14      	ldr	r3, [pc, #80]	; (81f80 <board_init+0x9c>)
   81f30:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   81f32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f36:	2011      	movs	r0, #17
   81f38:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   81f3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f3e:	2012      	movs	r0, #18
   81f40:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   81f42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f46:	202c      	movs	r0, #44	; 0x2c
   81f48:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   81f4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f4e:	202d      	movs	r0, #45	; 0x2d
   81f50:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   81f52:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f56:	202b      	movs	r0, #43	; 0x2b
   81f58:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   81f5a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f5e:	202a      	movs	r0, #42	; 0x2a
   81f60:	47a0      	blx	r4
   81f62:	bd10      	pop	{r4, pc}
   81f64:	400e1a50 	.word	0x400e1a50
   81f68:	00082319 	.word	0x00082319
   81f6c:	00082025 	.word	0x00082025
   81f70:	28000079 	.word	0x28000079
   81f74:	28000001 	.word	0x28000001
   81f78:	08000001 	.word	0x08000001
   81f7c:	400e0e00 	.word	0x400e0e00
   81f80:	000820f5 	.word	0x000820f5

00081f84 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   81f84:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   81f86:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81f8a:	d016      	beq.n	81fba <pio_set_peripheral+0x36>
   81f8c:	d80b      	bhi.n	81fa6 <pio_set_peripheral+0x22>
   81f8e:	b149      	cbz	r1, 81fa4 <pio_set_peripheral+0x20>
   81f90:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   81f94:	d105      	bne.n	81fa2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81f96:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81f98:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81f9a:	400b      	ands	r3, r1
   81f9c:	ea23 0302 	bic.w	r3, r3, r2
   81fa0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81fa2:	6042      	str	r2, [r0, #4]
   81fa4:	4770      	bx	lr
	switch (ul_type) {
   81fa6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81faa:	d0fb      	beq.n	81fa4 <pio_set_peripheral+0x20>
   81fac:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   81fb0:	d0f8      	beq.n	81fa4 <pio_set_peripheral+0x20>
   81fb2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81fb6:	d1f4      	bne.n	81fa2 <pio_set_peripheral+0x1e>
   81fb8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   81fba:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81fbc:	4313      	orrs	r3, r2
   81fbe:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81fc0:	e7ef      	b.n	81fa2 <pio_set_peripheral+0x1e>

00081fc2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   81fc2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81fc4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81fc8:	bf14      	ite	ne
   81fca:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   81fcc:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81fce:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   81fd2:	bf14      	ite	ne
   81fd4:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   81fd6:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   81fd8:	f012 0f02 	tst.w	r2, #2
   81fdc:	d107      	bne.n	81fee <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   81fde:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81fe2:	bf18      	it	ne
   81fe4:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   81fe8:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   81fea:	6001      	str	r1, [r0, #0]
   81fec:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   81fee:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   81ff2:	e7f9      	b.n	81fe8 <pio_set_input+0x26>

00081ff4 <pio_set_output>:
{
   81ff4:	b410      	push	{r4}
   81ff6:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   81ff8:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   81ffa:	b944      	cbnz	r4, 8200e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   81ffc:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   81ffe:	b143      	cbz	r3, 82012 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82000:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82002:	b942      	cbnz	r2, 82016 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82004:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82006:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82008:	6001      	str	r1, [r0, #0]
}
   8200a:	bc10      	pop	{r4}
   8200c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8200e:	6641      	str	r1, [r0, #100]	; 0x64
   82010:	e7f5      	b.n	81ffe <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82012:	6541      	str	r1, [r0, #84]	; 0x54
   82014:	e7f5      	b.n	82002 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82016:	6301      	str	r1, [r0, #48]	; 0x30
   82018:	e7f5      	b.n	82006 <pio_set_output+0x12>

0008201a <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8201a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8201c:	4770      	bx	lr

0008201e <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   8201e:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82020:	4770      	bx	lr
	...

00082024 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82024:	b570      	push	{r4, r5, r6, lr}
   82026:	b082      	sub	sp, #8
   82028:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8202a:	0943      	lsrs	r3, r0, #5
   8202c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82030:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82034:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82036:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8203a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8203e:	d031      	beq.n	820a4 <pio_configure_pin+0x80>
   82040:	d816      	bhi.n	82070 <pio_configure_pin+0x4c>
   82042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   82046:	d01b      	beq.n	82080 <pio_configure_pin+0x5c>
   82048:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8204c:	d116      	bne.n	8207c <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8204e:	f000 001f 	and.w	r0, r0, #31
   82052:	2601      	movs	r6, #1
   82054:	4086      	lsls	r6, r0
   82056:	4632      	mov	r2, r6
   82058:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8205c:	4620      	mov	r0, r4
   8205e:	4b22      	ldr	r3, [pc, #136]	; (820e8 <pio_configure_pin+0xc4>)
   82060:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82062:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82066:	bf14      	ite	ne
   82068:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8206a:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8206c:	2001      	movs	r0, #1
   8206e:	e017      	b.n	820a0 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   82070:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82074:	d021      	beq.n	820ba <pio_configure_pin+0x96>
   82076:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8207a:	d01e      	beq.n	820ba <pio_configure_pin+0x96>
		return 0;
   8207c:	2000      	movs	r0, #0
   8207e:	e00f      	b.n	820a0 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   82080:	f000 001f 	and.w	r0, r0, #31
   82084:	2601      	movs	r6, #1
   82086:	4086      	lsls	r6, r0
   82088:	4632      	mov	r2, r6
   8208a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8208e:	4620      	mov	r0, r4
   82090:	4b15      	ldr	r3, [pc, #84]	; (820e8 <pio_configure_pin+0xc4>)
   82092:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82094:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   82098:	bf14      	ite	ne
   8209a:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8209c:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8209e:	2001      	movs	r0, #1
}
   820a0:	b002      	add	sp, #8
   820a2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   820a4:	f000 011f 	and.w	r1, r0, #31
   820a8:	2601      	movs	r6, #1
   820aa:	462a      	mov	r2, r5
   820ac:	fa06 f101 	lsl.w	r1, r6, r1
   820b0:	4620      	mov	r0, r4
   820b2:	4b0e      	ldr	r3, [pc, #56]	; (820ec <pio_configure_pin+0xc8>)
   820b4:	4798      	blx	r3
	return 1;
   820b6:	4630      	mov	r0, r6
		break;
   820b8:	e7f2      	b.n	820a0 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   820ba:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   820be:	f000 011f 	and.w	r1, r0, #31
   820c2:	2601      	movs	r6, #1
   820c4:	ea05 0306 	and.w	r3, r5, r6
   820c8:	9300      	str	r3, [sp, #0]
   820ca:	f3c5 0380 	ubfx	r3, r5, #2, #1
   820ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   820d2:	bf14      	ite	ne
   820d4:	2200      	movne	r2, #0
   820d6:	2201      	moveq	r2, #1
   820d8:	fa06 f101 	lsl.w	r1, r6, r1
   820dc:	4620      	mov	r0, r4
   820de:	4c04      	ldr	r4, [pc, #16]	; (820f0 <pio_configure_pin+0xcc>)
   820e0:	47a0      	blx	r4
	return 1;
   820e2:	4630      	mov	r0, r6
		break;
   820e4:	e7dc      	b.n	820a0 <pio_configure_pin+0x7c>
   820e6:	bf00      	nop
   820e8:	00081f85 	.word	0x00081f85
   820ec:	00081fc3 	.word	0x00081fc3
   820f0:	00081ff5 	.word	0x00081ff5

000820f4 <pio_configure_pin_group>:
{
   820f4:	b570      	push	{r4, r5, r6, lr}
   820f6:	b082      	sub	sp, #8
   820f8:	4605      	mov	r5, r0
   820fa:	460e      	mov	r6, r1
   820fc:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   820fe:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82102:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82106:	d027      	beq.n	82158 <pio_configure_pin_group+0x64>
   82108:	d811      	bhi.n	8212e <pio_configure_pin_group+0x3a>
   8210a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8210e:	d016      	beq.n	8213e <pio_configure_pin_group+0x4a>
   82110:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82114:	d111      	bne.n	8213a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82116:	460a      	mov	r2, r1
   82118:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8211c:	4b19      	ldr	r3, [pc, #100]	; (82184 <pio_configure_pin_group+0x90>)
   8211e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82120:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82124:	bf14      	ite	ne
   82126:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82128:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8212a:	2001      	movs	r0, #1
   8212c:	e012      	b.n	82154 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8212e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82132:	d015      	beq.n	82160 <pio_configure_pin_group+0x6c>
   82134:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82138:	d012      	beq.n	82160 <pio_configure_pin_group+0x6c>
		return 0;
   8213a:	2000      	movs	r0, #0
   8213c:	e00a      	b.n	82154 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8213e:	460a      	mov	r2, r1
   82140:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82144:	4b0f      	ldr	r3, [pc, #60]	; (82184 <pio_configure_pin_group+0x90>)
   82146:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82148:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   8214c:	bf14      	ite	ne
   8214e:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82150:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   82152:	2001      	movs	r0, #1
}
   82154:	b002      	add	sp, #8
   82156:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   82158:	4b0b      	ldr	r3, [pc, #44]	; (82188 <pio_configure_pin_group+0x94>)
   8215a:	4798      	blx	r3
	return 1;
   8215c:	2001      	movs	r0, #1
		break;
   8215e:	e7f9      	b.n	82154 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   82160:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   82164:	f004 0301 	and.w	r3, r4, #1
   82168:	9300      	str	r3, [sp, #0]
   8216a:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8216e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82172:	bf14      	ite	ne
   82174:	2200      	movne	r2, #0
   82176:	2201      	moveq	r2, #1
   82178:	4631      	mov	r1, r6
   8217a:	4628      	mov	r0, r5
   8217c:	4c03      	ldr	r4, [pc, #12]	; (8218c <pio_configure_pin_group+0x98>)
   8217e:	47a0      	blx	r4
	return 1;
   82180:	2001      	movs	r0, #1
		break;
   82182:	e7e7      	b.n	82154 <pio_configure_pin_group+0x60>
   82184:	00081f85 	.word	0x00081f85
   82188:	00081fc3 	.word	0x00081fc3
   8218c:	00081ff5 	.word	0x00081ff5

00082190 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82190:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82194:	4604      	mov	r4, r0
   82196:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82198:	4b0e      	ldr	r3, [pc, #56]	; (821d4 <pio_handler_process+0x44>)
   8219a:	4798      	blx	r3
   8219c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8219e:	4620      	mov	r0, r4
   821a0:	4b0d      	ldr	r3, [pc, #52]	; (821d8 <pio_handler_process+0x48>)
   821a2:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   821a4:	4005      	ands	r5, r0
   821a6:	d013      	beq.n	821d0 <pio_handler_process+0x40>
   821a8:	4c0c      	ldr	r4, [pc, #48]	; (821dc <pio_handler_process+0x4c>)
   821aa:	f104 0660 	add.w	r6, r4, #96	; 0x60
   821ae:	e003      	b.n	821b8 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   821b0:	42b4      	cmp	r4, r6
   821b2:	d00d      	beq.n	821d0 <pio_handler_process+0x40>
   821b4:	3410      	adds	r4, #16
		while (status != 0) {
   821b6:	b15d      	cbz	r5, 821d0 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   821b8:	6820      	ldr	r0, [r4, #0]
   821ba:	4540      	cmp	r0, r8
   821bc:	d1f8      	bne.n	821b0 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   821be:	6861      	ldr	r1, [r4, #4]
   821c0:	4229      	tst	r1, r5
   821c2:	d0f5      	beq.n	821b0 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   821c4:	68e3      	ldr	r3, [r4, #12]
   821c6:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   821c8:	6863      	ldr	r3, [r4, #4]
   821ca:	ea25 0503 	bic.w	r5, r5, r3
   821ce:	e7ef      	b.n	821b0 <pio_handler_process+0x20>
   821d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   821d4:	0008201b 	.word	0x0008201b
   821d8:	0008201f 	.word	0x0008201f
   821dc:	2007ad28 	.word	0x2007ad28

000821e0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   821e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   821e2:	210b      	movs	r1, #11
   821e4:	4801      	ldr	r0, [pc, #4]	; (821ec <PIOA_Handler+0xc>)
   821e6:	4b02      	ldr	r3, [pc, #8]	; (821f0 <PIOA_Handler+0x10>)
   821e8:	4798      	blx	r3
   821ea:	bd08      	pop	{r3, pc}
   821ec:	400e0e00 	.word	0x400e0e00
   821f0:	00082191 	.word	0x00082191

000821f4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   821f4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   821f6:	210c      	movs	r1, #12
   821f8:	4801      	ldr	r0, [pc, #4]	; (82200 <PIOB_Handler+0xc>)
   821fa:	4b02      	ldr	r3, [pc, #8]	; (82204 <PIOB_Handler+0x10>)
   821fc:	4798      	blx	r3
   821fe:	bd08      	pop	{r3, pc}
   82200:	400e1000 	.word	0x400e1000
   82204:	00082191 	.word	0x00082191

00082208 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   82208:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8220a:	210d      	movs	r1, #13
   8220c:	4801      	ldr	r0, [pc, #4]	; (82214 <PIOC_Handler+0xc>)
   8220e:	4b02      	ldr	r3, [pc, #8]	; (82218 <PIOC_Handler+0x10>)
   82210:	4798      	blx	r3
   82212:	bd08      	pop	{r3, pc}
   82214:	400e1200 	.word	0x400e1200
   82218:	00082191 	.word	0x00082191

0008221c <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   8221c:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8221e:	210e      	movs	r1, #14
   82220:	4801      	ldr	r0, [pc, #4]	; (82228 <PIOD_Handler+0xc>)
   82222:	4b02      	ldr	r3, [pc, #8]	; (8222c <PIOD_Handler+0x10>)
   82224:	4798      	blx	r3
   82226:	bd08      	pop	{r3, pc}
   82228:	400e1400 	.word	0x400e1400
   8222c:	00082191 	.word	0x00082191

00082230 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82230:	4a17      	ldr	r2, [pc, #92]	; (82290 <pmc_switch_mck_to_pllack+0x60>)
   82232:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82238:	4318      	orrs	r0, r3
   8223a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8223c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8223e:	f013 0f08 	tst.w	r3, #8
   82242:	d10a      	bne.n	8225a <pmc_switch_mck_to_pllack+0x2a>
   82244:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82248:	4911      	ldr	r1, [pc, #68]	; (82290 <pmc_switch_mck_to_pllack+0x60>)
   8224a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8224c:	f012 0f08 	tst.w	r2, #8
   82250:	d103      	bne.n	8225a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82252:	3b01      	subs	r3, #1
   82254:	d1f9      	bne.n	8224a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82256:	2001      	movs	r0, #1
   82258:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8225a:	4a0d      	ldr	r2, [pc, #52]	; (82290 <pmc_switch_mck_to_pllack+0x60>)
   8225c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8225e:	f023 0303 	bic.w	r3, r3, #3
   82262:	f043 0302 	orr.w	r3, r3, #2
   82266:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82268:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8226a:	f013 0f08 	tst.w	r3, #8
   8226e:	d10a      	bne.n	82286 <pmc_switch_mck_to_pllack+0x56>
   82270:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82274:	4906      	ldr	r1, [pc, #24]	; (82290 <pmc_switch_mck_to_pllack+0x60>)
   82276:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82278:	f012 0f08 	tst.w	r2, #8
   8227c:	d105      	bne.n	8228a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8227e:	3b01      	subs	r3, #1
   82280:	d1f9      	bne.n	82276 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82282:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82284:	4770      	bx	lr
	return 0;
   82286:	2000      	movs	r0, #0
   82288:	4770      	bx	lr
   8228a:	2000      	movs	r0, #0
   8228c:	4770      	bx	lr
   8228e:	bf00      	nop
   82290:	400e0600 	.word	0x400e0600

00082294 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82294:	b9c8      	cbnz	r0, 822ca <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82296:	4a11      	ldr	r2, [pc, #68]	; (822dc <pmc_switch_mainck_to_xtal+0x48>)
   82298:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8229a:	0209      	lsls	r1, r1, #8
   8229c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8229e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   822a2:	f023 0303 	bic.w	r3, r3, #3
   822a6:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   822aa:	f043 0301 	orr.w	r3, r3, #1
   822ae:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   822b0:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   822b2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   822b4:	f013 0f01 	tst.w	r3, #1
   822b8:	d0fb      	beq.n	822b2 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   822ba:	4a08      	ldr	r2, [pc, #32]	; (822dc <pmc_switch_mainck_to_xtal+0x48>)
   822bc:	6a13      	ldr	r3, [r2, #32]
   822be:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   822c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   822c6:	6213      	str	r3, [r2, #32]
   822c8:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   822ca:	4904      	ldr	r1, [pc, #16]	; (822dc <pmc_switch_mainck_to_xtal+0x48>)
   822cc:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   822ce:	4a04      	ldr	r2, [pc, #16]	; (822e0 <pmc_switch_mainck_to_xtal+0x4c>)
   822d0:	401a      	ands	r2, r3
   822d2:	4b04      	ldr	r3, [pc, #16]	; (822e4 <pmc_switch_mainck_to_xtal+0x50>)
   822d4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   822d6:	620b      	str	r3, [r1, #32]
   822d8:	4770      	bx	lr
   822da:	bf00      	nop
   822dc:	400e0600 	.word	0x400e0600
   822e0:	fec8fffc 	.word	0xfec8fffc
   822e4:	01370002 	.word	0x01370002

000822e8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   822e8:	4b02      	ldr	r3, [pc, #8]	; (822f4 <pmc_osc_is_ready_mainck+0xc>)
   822ea:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   822ec:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   822f0:	4770      	bx	lr
   822f2:	bf00      	nop
   822f4:	400e0600 	.word	0x400e0600

000822f8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   822f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   822fc:	4b01      	ldr	r3, [pc, #4]	; (82304 <pmc_disable_pllack+0xc>)
   822fe:	629a      	str	r2, [r3, #40]	; 0x28
   82300:	4770      	bx	lr
   82302:	bf00      	nop
   82304:	400e0600 	.word	0x400e0600

00082308 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   82308:	4b02      	ldr	r3, [pc, #8]	; (82314 <pmc_is_locked_pllack+0xc>)
   8230a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   8230c:	f000 0002 	and.w	r0, r0, #2
   82310:	4770      	bx	lr
   82312:	bf00      	nop
   82314:	400e0600 	.word	0x400e0600

00082318 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   82318:	282c      	cmp	r0, #44	; 0x2c
   8231a:	d81e      	bhi.n	8235a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   8231c:	281f      	cmp	r0, #31
   8231e:	d80c      	bhi.n	8233a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   82320:	4b11      	ldr	r3, [pc, #68]	; (82368 <pmc_enable_periph_clk+0x50>)
   82322:	699a      	ldr	r2, [r3, #24]
   82324:	2301      	movs	r3, #1
   82326:	4083      	lsls	r3, r0
   82328:	4393      	bics	r3, r2
   8232a:	d018      	beq.n	8235e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   8232c:	2301      	movs	r3, #1
   8232e:	fa03 f000 	lsl.w	r0, r3, r0
   82332:	4b0d      	ldr	r3, [pc, #52]	; (82368 <pmc_enable_periph_clk+0x50>)
   82334:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82336:	2000      	movs	r0, #0
   82338:	4770      	bx	lr
		ul_id -= 32;
   8233a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8233c:	4b0a      	ldr	r3, [pc, #40]	; (82368 <pmc_enable_periph_clk+0x50>)
   8233e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82342:	2301      	movs	r3, #1
   82344:	4083      	lsls	r3, r0
   82346:	4393      	bics	r3, r2
   82348:	d00b      	beq.n	82362 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8234a:	2301      	movs	r3, #1
   8234c:	fa03 f000 	lsl.w	r0, r3, r0
   82350:	4b05      	ldr	r3, [pc, #20]	; (82368 <pmc_enable_periph_clk+0x50>)
   82352:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82356:	2000      	movs	r0, #0
   82358:	4770      	bx	lr
		return 1;
   8235a:	2001      	movs	r0, #1
   8235c:	4770      	bx	lr
	return 0;
   8235e:	2000      	movs	r0, #0
   82360:	4770      	bx	lr
   82362:	2000      	movs	r0, #0
}
   82364:	4770      	bx	lr
   82366:	bf00      	nop
   82368:	400e0600 	.word	0x400e0600

0008236c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8236c:	e7fe      	b.n	8236c <Dummy_Handler>
	...

00082370 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82370:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82372:	4b1c      	ldr	r3, [pc, #112]	; (823e4 <Reset_Handler+0x74>)
   82374:	4a1c      	ldr	r2, [pc, #112]	; (823e8 <Reset_Handler+0x78>)
   82376:	429a      	cmp	r2, r3
   82378:	d010      	beq.n	8239c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8237a:	4b1c      	ldr	r3, [pc, #112]	; (823ec <Reset_Handler+0x7c>)
   8237c:	4a19      	ldr	r2, [pc, #100]	; (823e4 <Reset_Handler+0x74>)
   8237e:	429a      	cmp	r2, r3
   82380:	d20c      	bcs.n	8239c <Reset_Handler+0x2c>
   82382:	3b01      	subs	r3, #1
   82384:	1a9b      	subs	r3, r3, r2
   82386:	f023 0303 	bic.w	r3, r3, #3
   8238a:	3304      	adds	r3, #4
   8238c:	4413      	add	r3, r2
   8238e:	4916      	ldr	r1, [pc, #88]	; (823e8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82390:	f851 0b04 	ldr.w	r0, [r1], #4
   82394:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82398:	429a      	cmp	r2, r3
   8239a:	d1f9      	bne.n	82390 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8239c:	4b14      	ldr	r3, [pc, #80]	; (823f0 <Reset_Handler+0x80>)
   8239e:	4a15      	ldr	r2, [pc, #84]	; (823f4 <Reset_Handler+0x84>)
   823a0:	429a      	cmp	r2, r3
   823a2:	d20a      	bcs.n	823ba <Reset_Handler+0x4a>
   823a4:	3b01      	subs	r3, #1
   823a6:	1a9b      	subs	r3, r3, r2
   823a8:	f023 0303 	bic.w	r3, r3, #3
   823ac:	3304      	adds	r3, #4
   823ae:	4413      	add	r3, r2
		*pDest++ = 0;
   823b0:	2100      	movs	r1, #0
   823b2:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   823b6:	4293      	cmp	r3, r2
   823b8:	d1fb      	bne.n	823b2 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   823ba:	4b0f      	ldr	r3, [pc, #60]	; (823f8 <Reset_Handler+0x88>)
   823bc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   823c0:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   823c4:	490d      	ldr	r1, [pc, #52]	; (823fc <Reset_Handler+0x8c>)
   823c6:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   823c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   823cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   823d0:	d203      	bcs.n	823da <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   823d2:	688b      	ldr	r3, [r1, #8]
   823d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   823d8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   823da:	4b09      	ldr	r3, [pc, #36]	; (82400 <Reset_Handler+0x90>)
   823dc:	4798      	blx	r3

	/* Branch to main function */
	main();
   823de:	4b09      	ldr	r3, [pc, #36]	; (82404 <Reset_Handler+0x94>)
   823e0:	4798      	blx	r3
   823e2:	e7fe      	b.n	823e2 <Reset_Handler+0x72>
   823e4:	20070000 	.word	0x20070000
   823e8:	000856cc 	.word	0x000856cc
   823ec:	20070b18 	.word	0x20070b18
   823f0:	2007ae1c 	.word	0x2007ae1c
   823f4:	20070b18 	.word	0x20070b18
   823f8:	00080000 	.word	0x00080000
   823fc:	e000ed00 	.word	0xe000ed00
   82400:	000825d9 	.word	0x000825d9
   82404:	00082571 	.word	0x00082571

00082408 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82408:	4b3d      	ldr	r3, [pc, #244]	; (82500 <SystemCoreClockUpdate+0xf8>)
   8240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8240c:	f003 0303 	and.w	r3, r3, #3
   82410:	2b03      	cmp	r3, #3
   82412:	d80e      	bhi.n	82432 <SystemCoreClockUpdate+0x2a>
   82414:	e8df f003 	tbb	[pc, r3]
   82418:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8241c:	4b39      	ldr	r3, [pc, #228]	; (82504 <SystemCoreClockUpdate+0xfc>)
   8241e:	695b      	ldr	r3, [r3, #20]
   82420:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   82424:	bf14      	ite	ne
   82426:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8242a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8242e:	4b36      	ldr	r3, [pc, #216]	; (82508 <SystemCoreClockUpdate+0x100>)
   82430:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82432:	4b33      	ldr	r3, [pc, #204]	; (82500 <SystemCoreClockUpdate+0xf8>)
   82434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82436:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8243a:	2b70      	cmp	r3, #112	; 0x70
   8243c:	d057      	beq.n	824ee <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8243e:	4b30      	ldr	r3, [pc, #192]	; (82500 <SystemCoreClockUpdate+0xf8>)
   82440:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82442:	4931      	ldr	r1, [pc, #196]	; (82508 <SystemCoreClockUpdate+0x100>)
   82444:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82448:	680b      	ldr	r3, [r1, #0]
   8244a:	40d3      	lsrs	r3, r2
   8244c:	600b      	str	r3, [r1, #0]
   8244e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82450:	4b2b      	ldr	r3, [pc, #172]	; (82500 <SystemCoreClockUpdate+0xf8>)
   82452:	6a1b      	ldr	r3, [r3, #32]
   82454:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82458:	d003      	beq.n	82462 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8245a:	4a2c      	ldr	r2, [pc, #176]	; (8250c <SystemCoreClockUpdate+0x104>)
   8245c:	4b2a      	ldr	r3, [pc, #168]	; (82508 <SystemCoreClockUpdate+0x100>)
   8245e:	601a      	str	r2, [r3, #0]
   82460:	e7e7      	b.n	82432 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82462:	4a2b      	ldr	r2, [pc, #172]	; (82510 <SystemCoreClockUpdate+0x108>)
   82464:	4b28      	ldr	r3, [pc, #160]	; (82508 <SystemCoreClockUpdate+0x100>)
   82466:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82468:	4b25      	ldr	r3, [pc, #148]	; (82500 <SystemCoreClockUpdate+0xf8>)
   8246a:	6a1b      	ldr	r3, [r3, #32]
   8246c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82470:	2b10      	cmp	r3, #16
   82472:	d005      	beq.n	82480 <SystemCoreClockUpdate+0x78>
   82474:	2b20      	cmp	r3, #32
   82476:	d1dc      	bne.n	82432 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82478:	4a24      	ldr	r2, [pc, #144]	; (8250c <SystemCoreClockUpdate+0x104>)
   8247a:	4b23      	ldr	r3, [pc, #140]	; (82508 <SystemCoreClockUpdate+0x100>)
   8247c:	601a      	str	r2, [r3, #0]
				break;
   8247e:	e7d8      	b.n	82432 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82480:	4a24      	ldr	r2, [pc, #144]	; (82514 <SystemCoreClockUpdate+0x10c>)
   82482:	4b21      	ldr	r3, [pc, #132]	; (82508 <SystemCoreClockUpdate+0x100>)
   82484:	601a      	str	r2, [r3, #0]
				break;
   82486:	e7d4      	b.n	82432 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82488:	4b1d      	ldr	r3, [pc, #116]	; (82500 <SystemCoreClockUpdate+0xf8>)
   8248a:	6a1b      	ldr	r3, [r3, #32]
   8248c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82490:	d00c      	beq.n	824ac <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82492:	4a1e      	ldr	r2, [pc, #120]	; (8250c <SystemCoreClockUpdate+0x104>)
   82494:	4b1c      	ldr	r3, [pc, #112]	; (82508 <SystemCoreClockUpdate+0x100>)
   82496:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82498:	4b19      	ldr	r3, [pc, #100]	; (82500 <SystemCoreClockUpdate+0xf8>)
   8249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8249c:	f003 0303 	and.w	r3, r3, #3
   824a0:	2b02      	cmp	r3, #2
   824a2:	d016      	beq.n	824d2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   824a4:	4a1c      	ldr	r2, [pc, #112]	; (82518 <SystemCoreClockUpdate+0x110>)
   824a6:	4b18      	ldr	r3, [pc, #96]	; (82508 <SystemCoreClockUpdate+0x100>)
   824a8:	601a      	str	r2, [r3, #0]
   824aa:	e7c2      	b.n	82432 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   824ac:	4a18      	ldr	r2, [pc, #96]	; (82510 <SystemCoreClockUpdate+0x108>)
   824ae:	4b16      	ldr	r3, [pc, #88]	; (82508 <SystemCoreClockUpdate+0x100>)
   824b0:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   824b2:	4b13      	ldr	r3, [pc, #76]	; (82500 <SystemCoreClockUpdate+0xf8>)
   824b4:	6a1b      	ldr	r3, [r3, #32]
   824b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   824ba:	2b10      	cmp	r3, #16
   824bc:	d005      	beq.n	824ca <SystemCoreClockUpdate+0xc2>
   824be:	2b20      	cmp	r3, #32
   824c0:	d1ea      	bne.n	82498 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   824c2:	4a12      	ldr	r2, [pc, #72]	; (8250c <SystemCoreClockUpdate+0x104>)
   824c4:	4b10      	ldr	r3, [pc, #64]	; (82508 <SystemCoreClockUpdate+0x100>)
   824c6:	601a      	str	r2, [r3, #0]
				break;
   824c8:	e7e6      	b.n	82498 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   824ca:	4a12      	ldr	r2, [pc, #72]	; (82514 <SystemCoreClockUpdate+0x10c>)
   824cc:	4b0e      	ldr	r3, [pc, #56]	; (82508 <SystemCoreClockUpdate+0x100>)
   824ce:	601a      	str	r2, [r3, #0]
				break;
   824d0:	e7e2      	b.n	82498 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824d2:	4a0b      	ldr	r2, [pc, #44]	; (82500 <SystemCoreClockUpdate+0xf8>)
   824d4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   824d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   824d8:	480b      	ldr	r0, [pc, #44]	; (82508 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   824da:	f3c1 410a 	ubfx	r1, r1, #16, #11
   824de:	6803      	ldr	r3, [r0, #0]
   824e0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   824e4:	b2d2      	uxtb	r2, r2
   824e6:	fbb3 f3f2 	udiv	r3, r3, r2
   824ea:	6003      	str	r3, [r0, #0]
   824ec:	e7a1      	b.n	82432 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   824ee:	4a06      	ldr	r2, [pc, #24]	; (82508 <SystemCoreClockUpdate+0x100>)
   824f0:	6813      	ldr	r3, [r2, #0]
   824f2:	490a      	ldr	r1, [pc, #40]	; (8251c <SystemCoreClockUpdate+0x114>)
   824f4:	fba1 1303 	umull	r1, r3, r1, r3
   824f8:	085b      	lsrs	r3, r3, #1
   824fa:	6013      	str	r3, [r2, #0]
   824fc:	4770      	bx	lr
   824fe:	bf00      	nop
   82500:	400e0600 	.word	0x400e0600
   82504:	400e1a10 	.word	0x400e1a10
   82508:	20070168 	.word	0x20070168
   8250c:	00b71b00 	.word	0x00b71b00
   82510:	003d0900 	.word	0x003d0900
   82514:	007a1200 	.word	0x007a1200
   82518:	0e4e1c00 	.word	0x0e4e1c00
   8251c:	aaaaaaab 	.word	0xaaaaaaab

00082520 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   82520:	4b0a      	ldr	r3, [pc, #40]	; (8254c <_sbrk+0x2c>)
   82522:	681b      	ldr	r3, [r3, #0]
   82524:	b153      	cbz	r3, 8253c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   82526:	4b09      	ldr	r3, [pc, #36]	; (8254c <_sbrk+0x2c>)
   82528:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8252a:	181a      	adds	r2, r3, r0
   8252c:	4908      	ldr	r1, [pc, #32]	; (82550 <_sbrk+0x30>)
   8252e:	4291      	cmp	r1, r2
   82530:	db08      	blt.n	82544 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82532:	4610      	mov	r0, r2
   82534:	4a05      	ldr	r2, [pc, #20]	; (8254c <_sbrk+0x2c>)
   82536:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82538:	4618      	mov	r0, r3
   8253a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   8253c:	4a05      	ldr	r2, [pc, #20]	; (82554 <_sbrk+0x34>)
   8253e:	4b03      	ldr	r3, [pc, #12]	; (8254c <_sbrk+0x2c>)
   82540:	601a      	str	r2, [r3, #0]
   82542:	e7f0      	b.n	82526 <_sbrk+0x6>
		return (caddr_t) -1;	
   82544:	f04f 30ff 	mov.w	r0, #4294967295
}
   82548:	4770      	bx	lr
   8254a:	bf00      	nop
   8254c:	2007ad98 	.word	0x2007ad98
   82550:	20087ffc 	.word	0x20087ffc
   82554:	2007ce20 	.word	0x2007ce20

00082558 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82558:	f04f 30ff 	mov.w	r0, #4294967295
   8255c:	4770      	bx	lr

0008255e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8255e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82562:	604b      	str	r3, [r1, #4]

	return 0;
}
   82564:	2000      	movs	r0, #0
   82566:	4770      	bx	lr

00082568 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82568:	2001      	movs	r0, #1
   8256a:	4770      	bx	lr

0008256c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   8256c:	2000      	movs	r0, #0
   8256e:	4770      	bx	lr

00082570 <main>:
#include "tasks/taskPAB.h"
#include "tasks/taskPOS.h"
#include "console/console.h"

int main (void)
{
   82570:	b510      	push	{r4, lr}
   82572:	b084      	sub	sp, #16
	sysclk_init();
   82574:	4b0e      	ldr	r3, [pc, #56]	; (825b0 <main+0x40>)
   82576:	4798      	blx	r3
	board_init();
   82578:	4b0e      	ldr	r3, [pc, #56]	; (825b4 <main+0x44>)
   8257a:	4798      	blx	r3
	console_init();
   8257c:	4b0e      	ldr	r3, [pc, #56]	; (825b8 <main+0x48>)
   8257e:	4798      	blx	r3
	printf("startup");
   82580:	480e      	ldr	r0, [pc, #56]	; (825bc <main+0x4c>)
   82582:	4b0f      	ldr	r3, [pc, #60]	; (825c0 <main+0x50>)
   82584:	4798      	blx	r3
	if(init_twi())
   82586:	4b0f      	ldr	r3, [pc, #60]	; (825c4 <main+0x54>)
   82588:	4798      	blx	r3
   8258a:	b910      	cbnz	r0, 82592 <main+0x22>
	{
		xTaskCreate(taskPOS, (const signed char * const) "taskPOS", TASK_POS_STACK_SIZE, NULL, TASK_POS_PRIORITY, NULL);
		//xTaskCreate(taskPAB, (const signed char * const) "taskPAB", TASK_PAB_STACK_SIZE, NULL, TASK_PAB_PRIORITY, NULL);
		vTaskStartScheduler();
	}
}
   8258c:	2000      	movs	r0, #0
   8258e:	b004      	add	sp, #16
   82590:	bd10      	pop	{r4, pc}
		xTaskCreate(taskPOS, (const signed char * const) "taskPOS", TASK_POS_STACK_SIZE, NULL, TASK_POS_PRIORITY, NULL);
   82592:	2300      	movs	r3, #0
   82594:	9303      	str	r3, [sp, #12]
   82596:	9302      	str	r3, [sp, #8]
   82598:	9301      	str	r3, [sp, #4]
   8259a:	2202      	movs	r2, #2
   8259c:	9200      	str	r2, [sp, #0]
   8259e:	f44f 7200 	mov.w	r2, #512	; 0x200
   825a2:	4909      	ldr	r1, [pc, #36]	; (825c8 <main+0x58>)
   825a4:	4809      	ldr	r0, [pc, #36]	; (825cc <main+0x5c>)
   825a6:	4c0a      	ldr	r4, [pc, #40]	; (825d0 <main+0x60>)
   825a8:	47a0      	blx	r4
		vTaskStartScheduler();
   825aa:	4b0a      	ldr	r3, [pc, #40]	; (825d4 <main+0x64>)
   825ac:	4798      	blx	r3
   825ae:	e7ed      	b.n	8258c <main+0x1c>
   825b0:	00081e81 	.word	0x00081e81
   825b4:	00081ee5 	.word	0x00081ee5
   825b8:	000802a9 	.word	0x000802a9
   825bc:	00085528 	.word	0x00085528
   825c0:	00082629 	.word	0x00082629
   825c4:	0008033d 	.word	0x0008033d
   825c8:	00085530 	.word	0x00085530
   825cc:	000803a5 	.word	0x000803a5
   825d0:	00080dad 	.word	0x00080dad
   825d4:	00080fb1 	.word	0x00080fb1

000825d8 <__libc_init_array>:
   825d8:	b570      	push	{r4, r5, r6, lr}
   825da:	4e0f      	ldr	r6, [pc, #60]	; (82618 <__libc_init_array+0x40>)
   825dc:	4d0f      	ldr	r5, [pc, #60]	; (8261c <__libc_init_array+0x44>)
   825de:	1b76      	subs	r6, r6, r5
   825e0:	10b6      	asrs	r6, r6, #2
   825e2:	bf18      	it	ne
   825e4:	2400      	movne	r4, #0
   825e6:	d005      	beq.n	825f4 <__libc_init_array+0x1c>
   825e8:	3401      	adds	r4, #1
   825ea:	f855 3b04 	ldr.w	r3, [r5], #4
   825ee:	4798      	blx	r3
   825f0:	42a6      	cmp	r6, r4
   825f2:	d1f9      	bne.n	825e8 <__libc_init_array+0x10>
   825f4:	4e0a      	ldr	r6, [pc, #40]	; (82620 <__libc_init_array+0x48>)
   825f6:	4d0b      	ldr	r5, [pc, #44]	; (82624 <__libc_init_array+0x4c>)
   825f8:	f003 f852 	bl	856a0 <_init>
   825fc:	1b76      	subs	r6, r6, r5
   825fe:	10b6      	asrs	r6, r6, #2
   82600:	bf18      	it	ne
   82602:	2400      	movne	r4, #0
   82604:	d006      	beq.n	82614 <__libc_init_array+0x3c>
   82606:	3401      	adds	r4, #1
   82608:	f855 3b04 	ldr.w	r3, [r5], #4
   8260c:	4798      	blx	r3
   8260e:	42a6      	cmp	r6, r4
   82610:	d1f9      	bne.n	82606 <__libc_init_array+0x2e>
   82612:	bd70      	pop	{r4, r5, r6, pc}
   82614:	bd70      	pop	{r4, r5, r6, pc}
   82616:	bf00      	nop
   82618:	000856ac 	.word	0x000856ac
   8261c:	000856ac 	.word	0x000856ac
   82620:	000856b4 	.word	0x000856b4
   82624:	000856ac 	.word	0x000856ac

00082628 <iprintf>:
   82628:	b40f      	push	{r0, r1, r2, r3}
   8262a:	b510      	push	{r4, lr}
   8262c:	4b07      	ldr	r3, [pc, #28]	; (8264c <iprintf+0x24>)
   8262e:	b082      	sub	sp, #8
   82630:	ac04      	add	r4, sp, #16
   82632:	f854 2b04 	ldr.w	r2, [r4], #4
   82636:	6818      	ldr	r0, [r3, #0]
   82638:	4623      	mov	r3, r4
   8263a:	6881      	ldr	r1, [r0, #8]
   8263c:	9401      	str	r4, [sp, #4]
   8263e:	f000 fa3b 	bl	82ab8 <_vfiprintf_r>
   82642:	b002      	add	sp, #8
   82644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82648:	b004      	add	sp, #16
   8264a:	4770      	bx	lr
   8264c:	2007016c 	.word	0x2007016c

00082650 <memcpy>:
   82650:	4684      	mov	ip, r0
   82652:	ea41 0300 	orr.w	r3, r1, r0
   82656:	f013 0303 	ands.w	r3, r3, #3
   8265a:	d149      	bne.n	826f0 <memcpy+0xa0>
   8265c:	3a40      	subs	r2, #64	; 0x40
   8265e:	d323      	bcc.n	826a8 <memcpy+0x58>
   82660:	680b      	ldr	r3, [r1, #0]
   82662:	6003      	str	r3, [r0, #0]
   82664:	684b      	ldr	r3, [r1, #4]
   82666:	6043      	str	r3, [r0, #4]
   82668:	688b      	ldr	r3, [r1, #8]
   8266a:	6083      	str	r3, [r0, #8]
   8266c:	68cb      	ldr	r3, [r1, #12]
   8266e:	60c3      	str	r3, [r0, #12]
   82670:	690b      	ldr	r3, [r1, #16]
   82672:	6103      	str	r3, [r0, #16]
   82674:	694b      	ldr	r3, [r1, #20]
   82676:	6143      	str	r3, [r0, #20]
   82678:	698b      	ldr	r3, [r1, #24]
   8267a:	6183      	str	r3, [r0, #24]
   8267c:	69cb      	ldr	r3, [r1, #28]
   8267e:	61c3      	str	r3, [r0, #28]
   82680:	6a0b      	ldr	r3, [r1, #32]
   82682:	6203      	str	r3, [r0, #32]
   82684:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82686:	6243      	str	r3, [r0, #36]	; 0x24
   82688:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8268a:	6283      	str	r3, [r0, #40]	; 0x28
   8268c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8268e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82690:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82692:	6303      	str	r3, [r0, #48]	; 0x30
   82694:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82696:	6343      	str	r3, [r0, #52]	; 0x34
   82698:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8269a:	6383      	str	r3, [r0, #56]	; 0x38
   8269c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8269e:	63c3      	str	r3, [r0, #60]	; 0x3c
   826a0:	3040      	adds	r0, #64	; 0x40
   826a2:	3140      	adds	r1, #64	; 0x40
   826a4:	3a40      	subs	r2, #64	; 0x40
   826a6:	d2db      	bcs.n	82660 <memcpy+0x10>
   826a8:	3230      	adds	r2, #48	; 0x30
   826aa:	d30b      	bcc.n	826c4 <memcpy+0x74>
   826ac:	680b      	ldr	r3, [r1, #0]
   826ae:	6003      	str	r3, [r0, #0]
   826b0:	684b      	ldr	r3, [r1, #4]
   826b2:	6043      	str	r3, [r0, #4]
   826b4:	688b      	ldr	r3, [r1, #8]
   826b6:	6083      	str	r3, [r0, #8]
   826b8:	68cb      	ldr	r3, [r1, #12]
   826ba:	60c3      	str	r3, [r0, #12]
   826bc:	3010      	adds	r0, #16
   826be:	3110      	adds	r1, #16
   826c0:	3a10      	subs	r2, #16
   826c2:	d2f3      	bcs.n	826ac <memcpy+0x5c>
   826c4:	320c      	adds	r2, #12
   826c6:	d305      	bcc.n	826d4 <memcpy+0x84>
   826c8:	f851 3b04 	ldr.w	r3, [r1], #4
   826cc:	f840 3b04 	str.w	r3, [r0], #4
   826d0:	3a04      	subs	r2, #4
   826d2:	d2f9      	bcs.n	826c8 <memcpy+0x78>
   826d4:	3204      	adds	r2, #4
   826d6:	d008      	beq.n	826ea <memcpy+0x9a>
   826d8:	07d2      	lsls	r2, r2, #31
   826da:	bf1c      	itt	ne
   826dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   826e0:	f800 3b01 	strbne.w	r3, [r0], #1
   826e4:	d301      	bcc.n	826ea <memcpy+0x9a>
   826e6:	880b      	ldrh	r3, [r1, #0]
   826e8:	8003      	strh	r3, [r0, #0]
   826ea:	4660      	mov	r0, ip
   826ec:	4770      	bx	lr
   826ee:	bf00      	nop
   826f0:	2a08      	cmp	r2, #8
   826f2:	d313      	bcc.n	8271c <memcpy+0xcc>
   826f4:	078b      	lsls	r3, r1, #30
   826f6:	d0b1      	beq.n	8265c <memcpy+0xc>
   826f8:	f010 0303 	ands.w	r3, r0, #3
   826fc:	d0ae      	beq.n	8265c <memcpy+0xc>
   826fe:	f1c3 0304 	rsb	r3, r3, #4
   82702:	1ad2      	subs	r2, r2, r3
   82704:	07db      	lsls	r3, r3, #31
   82706:	bf1c      	itt	ne
   82708:	f811 3b01 	ldrbne.w	r3, [r1], #1
   8270c:	f800 3b01 	strbne.w	r3, [r0], #1
   82710:	d3a4      	bcc.n	8265c <memcpy+0xc>
   82712:	f831 3b02 	ldrh.w	r3, [r1], #2
   82716:	f820 3b02 	strh.w	r3, [r0], #2
   8271a:	e79f      	b.n	8265c <memcpy+0xc>
   8271c:	3a04      	subs	r2, #4
   8271e:	d3d9      	bcc.n	826d4 <memcpy+0x84>
   82720:	3a01      	subs	r2, #1
   82722:	f811 3b01 	ldrb.w	r3, [r1], #1
   82726:	f800 3b01 	strb.w	r3, [r0], #1
   8272a:	d2f9      	bcs.n	82720 <memcpy+0xd0>
   8272c:	780b      	ldrb	r3, [r1, #0]
   8272e:	7003      	strb	r3, [r0, #0]
   82730:	784b      	ldrb	r3, [r1, #1]
   82732:	7043      	strb	r3, [r0, #1]
   82734:	788b      	ldrb	r3, [r1, #2]
   82736:	7083      	strb	r3, [r0, #2]
   82738:	4660      	mov	r0, ip
   8273a:	4770      	bx	lr

0008273c <memset>:
   8273c:	b470      	push	{r4, r5, r6}
   8273e:	0786      	lsls	r6, r0, #30
   82740:	d046      	beq.n	827d0 <memset+0x94>
   82742:	1e54      	subs	r4, r2, #1
   82744:	2a00      	cmp	r2, #0
   82746:	d041      	beq.n	827cc <memset+0x90>
   82748:	b2ca      	uxtb	r2, r1
   8274a:	4603      	mov	r3, r0
   8274c:	e002      	b.n	82754 <memset+0x18>
   8274e:	f114 34ff 	adds.w	r4, r4, #4294967295
   82752:	d33b      	bcc.n	827cc <memset+0x90>
   82754:	f803 2b01 	strb.w	r2, [r3], #1
   82758:	079d      	lsls	r5, r3, #30
   8275a:	d1f8      	bne.n	8274e <memset+0x12>
   8275c:	2c03      	cmp	r4, #3
   8275e:	d92e      	bls.n	827be <memset+0x82>
   82760:	b2cd      	uxtb	r5, r1
   82762:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82766:	2c0f      	cmp	r4, #15
   82768:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8276c:	d919      	bls.n	827a2 <memset+0x66>
   8276e:	4626      	mov	r6, r4
   82770:	f103 0210 	add.w	r2, r3, #16
   82774:	3e10      	subs	r6, #16
   82776:	2e0f      	cmp	r6, #15
   82778:	f842 5c10 	str.w	r5, [r2, #-16]
   8277c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82780:	f842 5c08 	str.w	r5, [r2, #-8]
   82784:	f842 5c04 	str.w	r5, [r2, #-4]
   82788:	f102 0210 	add.w	r2, r2, #16
   8278c:	d8f2      	bhi.n	82774 <memset+0x38>
   8278e:	f1a4 0210 	sub.w	r2, r4, #16
   82792:	f022 020f 	bic.w	r2, r2, #15
   82796:	f004 040f 	and.w	r4, r4, #15
   8279a:	3210      	adds	r2, #16
   8279c:	2c03      	cmp	r4, #3
   8279e:	4413      	add	r3, r2
   827a0:	d90d      	bls.n	827be <memset+0x82>
   827a2:	461e      	mov	r6, r3
   827a4:	4622      	mov	r2, r4
   827a6:	3a04      	subs	r2, #4
   827a8:	2a03      	cmp	r2, #3
   827aa:	f846 5b04 	str.w	r5, [r6], #4
   827ae:	d8fa      	bhi.n	827a6 <memset+0x6a>
   827b0:	1f22      	subs	r2, r4, #4
   827b2:	f022 0203 	bic.w	r2, r2, #3
   827b6:	3204      	adds	r2, #4
   827b8:	4413      	add	r3, r2
   827ba:	f004 0403 	and.w	r4, r4, #3
   827be:	b12c      	cbz	r4, 827cc <memset+0x90>
   827c0:	b2c9      	uxtb	r1, r1
   827c2:	441c      	add	r4, r3
   827c4:	f803 1b01 	strb.w	r1, [r3], #1
   827c8:	429c      	cmp	r4, r3
   827ca:	d1fb      	bne.n	827c4 <memset+0x88>
   827cc:	bc70      	pop	{r4, r5, r6}
   827ce:	4770      	bx	lr
   827d0:	4614      	mov	r4, r2
   827d2:	4603      	mov	r3, r0
   827d4:	e7c2      	b.n	8275c <memset+0x20>
   827d6:	bf00      	nop

000827d8 <setbuf>:
   827d8:	2900      	cmp	r1, #0
   827da:	bf0c      	ite	eq
   827dc:	2202      	moveq	r2, #2
   827de:	2200      	movne	r2, #0
   827e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   827e4:	f000 b800 	b.w	827e8 <setvbuf>

000827e8 <setvbuf>:
   827e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   827ec:	4d61      	ldr	r5, [pc, #388]	; (82974 <setvbuf+0x18c>)
   827ee:	b083      	sub	sp, #12
   827f0:	682d      	ldr	r5, [r5, #0]
   827f2:	4604      	mov	r4, r0
   827f4:	460f      	mov	r7, r1
   827f6:	4690      	mov	r8, r2
   827f8:	461e      	mov	r6, r3
   827fa:	b115      	cbz	r5, 82802 <setvbuf+0x1a>
   827fc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   827fe:	2b00      	cmp	r3, #0
   82800:	d064      	beq.n	828cc <setvbuf+0xe4>
   82802:	f1b8 0f02 	cmp.w	r8, #2
   82806:	d006      	beq.n	82816 <setvbuf+0x2e>
   82808:	f1b8 0f01 	cmp.w	r8, #1
   8280c:	f200 809f 	bhi.w	8294e <setvbuf+0x166>
   82810:	2e00      	cmp	r6, #0
   82812:	f2c0 809c 	blt.w	8294e <setvbuf+0x166>
   82816:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82818:	07d8      	lsls	r0, r3, #31
   8281a:	d534      	bpl.n	82886 <setvbuf+0x9e>
   8281c:	4621      	mov	r1, r4
   8281e:	4628      	mov	r0, r5
   82820:	f001 f8e2 	bl	839e8 <_fflush_r>
   82824:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82826:	b141      	cbz	r1, 8283a <setvbuf+0x52>
   82828:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8282c:	4299      	cmp	r1, r3
   8282e:	d002      	beq.n	82836 <setvbuf+0x4e>
   82830:	4628      	mov	r0, r5
   82832:	f001 fa57 	bl	83ce4 <_free_r>
   82836:	2300      	movs	r3, #0
   82838:	6323      	str	r3, [r4, #48]	; 0x30
   8283a:	2200      	movs	r2, #0
   8283c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82840:	61a2      	str	r2, [r4, #24]
   82842:	6062      	str	r2, [r4, #4]
   82844:	061a      	lsls	r2, r3, #24
   82846:	d43a      	bmi.n	828be <setvbuf+0xd6>
   82848:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8284c:	f023 0303 	bic.w	r3, r3, #3
   82850:	f1b8 0f02 	cmp.w	r8, #2
   82854:	81a3      	strh	r3, [r4, #12]
   82856:	d01d      	beq.n	82894 <setvbuf+0xac>
   82858:	ab01      	add	r3, sp, #4
   8285a:	466a      	mov	r2, sp
   8285c:	4621      	mov	r1, r4
   8285e:	4628      	mov	r0, r5
   82860:	f001 fcde 	bl	84220 <__swhatbuf_r>
   82864:	89a3      	ldrh	r3, [r4, #12]
   82866:	4318      	orrs	r0, r3
   82868:	81a0      	strh	r0, [r4, #12]
   8286a:	2e00      	cmp	r6, #0
   8286c:	d132      	bne.n	828d4 <setvbuf+0xec>
   8286e:	9e00      	ldr	r6, [sp, #0]
   82870:	4630      	mov	r0, r6
   82872:	f001 fd4d 	bl	84310 <malloc>
   82876:	4607      	mov	r7, r0
   82878:	2800      	cmp	r0, #0
   8287a:	d06b      	beq.n	82954 <setvbuf+0x16c>
   8287c:	89a3      	ldrh	r3, [r4, #12]
   8287e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82882:	81a3      	strh	r3, [r4, #12]
   82884:	e028      	b.n	828d8 <setvbuf+0xf0>
   82886:	89a3      	ldrh	r3, [r4, #12]
   82888:	0599      	lsls	r1, r3, #22
   8288a:	d4c7      	bmi.n	8281c <setvbuf+0x34>
   8288c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8288e:	f001 fcc3 	bl	84218 <__retarget_lock_acquire_recursive>
   82892:	e7c3      	b.n	8281c <setvbuf+0x34>
   82894:	2500      	movs	r5, #0
   82896:	2600      	movs	r6, #0
   82898:	2001      	movs	r0, #1
   8289a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8289c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   828a0:	f043 0302 	orr.w	r3, r3, #2
   828a4:	60a6      	str	r6, [r4, #8]
   828a6:	07ce      	lsls	r6, r1, #31
   828a8:	81a3      	strh	r3, [r4, #12]
   828aa:	6160      	str	r0, [r4, #20]
   828ac:	6022      	str	r2, [r4, #0]
   828ae:	6122      	str	r2, [r4, #16]
   828b0:	d401      	bmi.n	828b6 <setvbuf+0xce>
   828b2:	0598      	lsls	r0, r3, #22
   828b4:	d53e      	bpl.n	82934 <setvbuf+0x14c>
   828b6:	4628      	mov	r0, r5
   828b8:	b003      	add	sp, #12
   828ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   828be:	6921      	ldr	r1, [r4, #16]
   828c0:	4628      	mov	r0, r5
   828c2:	f001 fa0f 	bl	83ce4 <_free_r>
   828c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   828ca:	e7bd      	b.n	82848 <setvbuf+0x60>
   828cc:	4628      	mov	r0, r5
   828ce:	f001 f8e3 	bl	83a98 <__sinit>
   828d2:	e796      	b.n	82802 <setvbuf+0x1a>
   828d4:	2f00      	cmp	r7, #0
   828d6:	d0cb      	beq.n	82870 <setvbuf+0x88>
   828d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   828da:	2b00      	cmp	r3, #0
   828dc:	d033      	beq.n	82946 <setvbuf+0x15e>
   828de:	9b00      	ldr	r3, [sp, #0]
   828e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   828e4:	429e      	cmp	r6, r3
   828e6:	bf1c      	itt	ne
   828e8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   828ec:	81a2      	strhne	r2, [r4, #12]
   828ee:	f1b8 0f01 	cmp.w	r8, #1
   828f2:	bf04      	itt	eq
   828f4:	f042 0201 	orreq.w	r2, r2, #1
   828f8:	81a2      	strheq	r2, [r4, #12]
   828fa:	b292      	uxth	r2, r2
   828fc:	f012 0308 	ands.w	r3, r2, #8
   82900:	6027      	str	r7, [r4, #0]
   82902:	6127      	str	r7, [r4, #16]
   82904:	6166      	str	r6, [r4, #20]
   82906:	d00e      	beq.n	82926 <setvbuf+0x13e>
   82908:	07d1      	lsls	r1, r2, #31
   8290a:	d51a      	bpl.n	82942 <setvbuf+0x15a>
   8290c:	2300      	movs	r3, #0
   8290e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82910:	4276      	negs	r6, r6
   82912:	f015 0501 	ands.w	r5, r5, #1
   82916:	61a6      	str	r6, [r4, #24]
   82918:	60a3      	str	r3, [r4, #8]
   8291a:	d009      	beq.n	82930 <setvbuf+0x148>
   8291c:	2500      	movs	r5, #0
   8291e:	4628      	mov	r0, r5
   82920:	b003      	add	sp, #12
   82922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82926:	60a3      	str	r3, [r4, #8]
   82928:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8292a:	f015 0501 	ands.w	r5, r5, #1
   8292e:	d1f5      	bne.n	8291c <setvbuf+0x134>
   82930:	0593      	lsls	r3, r2, #22
   82932:	d4c0      	bmi.n	828b6 <setvbuf+0xce>
   82934:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82936:	f001 fc71 	bl	8421c <__retarget_lock_release_recursive>
   8293a:	4628      	mov	r0, r5
   8293c:	b003      	add	sp, #12
   8293e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82942:	60a6      	str	r6, [r4, #8]
   82944:	e7f0      	b.n	82928 <setvbuf+0x140>
   82946:	4628      	mov	r0, r5
   82948:	f001 f8a6 	bl	83a98 <__sinit>
   8294c:	e7c7      	b.n	828de <setvbuf+0xf6>
   8294e:	f04f 35ff 	mov.w	r5, #4294967295
   82952:	e7b0      	b.n	828b6 <setvbuf+0xce>
   82954:	f8dd 9000 	ldr.w	r9, [sp]
   82958:	45b1      	cmp	r9, r6
   8295a:	d004      	beq.n	82966 <setvbuf+0x17e>
   8295c:	4648      	mov	r0, r9
   8295e:	f001 fcd7 	bl	84310 <malloc>
   82962:	4607      	mov	r7, r0
   82964:	b920      	cbnz	r0, 82970 <setvbuf+0x188>
   82966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8296a:	f04f 35ff 	mov.w	r5, #4294967295
   8296e:	e792      	b.n	82896 <setvbuf+0xae>
   82970:	464e      	mov	r6, r9
   82972:	e783      	b.n	8287c <setvbuf+0x94>
   82974:	2007016c 	.word	0x2007016c

00082978 <strlen>:
   82978:	f020 0103 	bic.w	r1, r0, #3
   8297c:	f010 0003 	ands.w	r0, r0, #3
   82980:	f1c0 0000 	rsb	r0, r0, #0
   82984:	f851 3b04 	ldr.w	r3, [r1], #4
   82988:	f100 0c04 	add.w	ip, r0, #4
   8298c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82990:	f06f 0200 	mvn.w	r2, #0
   82994:	bf1c      	itt	ne
   82996:	fa22 f20c 	lsrne.w	r2, r2, ip
   8299a:	4313      	orrne	r3, r2
   8299c:	f04f 0c01 	mov.w	ip, #1
   829a0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   829a4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   829a8:	eba3 020c 	sub.w	r2, r3, ip
   829ac:	ea22 0203 	bic.w	r2, r2, r3
   829b0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   829b4:	bf04      	itt	eq
   829b6:	f851 3b04 	ldreq.w	r3, [r1], #4
   829ba:	3004      	addeq	r0, #4
   829bc:	d0f4      	beq.n	829a8 <strlen+0x30>
   829be:	f1c2 0100 	rsb	r1, r2, #0
   829c2:	ea02 0201 	and.w	r2, r2, r1
   829c6:	fab2 f282 	clz	r2, r2
   829ca:	f1c2 021f 	rsb	r2, r2, #31
   829ce:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   829d2:	4770      	bx	lr

000829d4 <strncpy>:
   829d4:	ea40 0301 	orr.w	r3, r0, r1
   829d8:	f013 0f03 	tst.w	r3, #3
   829dc:	b470      	push	{r4, r5, r6}
   829de:	4603      	mov	r3, r0
   829e0:	d024      	beq.n	82a2c <strncpy+0x58>
   829e2:	b1a2      	cbz	r2, 82a0e <strncpy+0x3a>
   829e4:	780c      	ldrb	r4, [r1, #0]
   829e6:	3a01      	subs	r2, #1
   829e8:	701c      	strb	r4, [r3, #0]
   829ea:	3101      	adds	r1, #1
   829ec:	3301      	adds	r3, #1
   829ee:	b13c      	cbz	r4, 82a00 <strncpy+0x2c>
   829f0:	b16a      	cbz	r2, 82a0e <strncpy+0x3a>
   829f2:	f811 4b01 	ldrb.w	r4, [r1], #1
   829f6:	3a01      	subs	r2, #1
   829f8:	f803 4b01 	strb.w	r4, [r3], #1
   829fc:	2c00      	cmp	r4, #0
   829fe:	d1f7      	bne.n	829f0 <strncpy+0x1c>
   82a00:	b12a      	cbz	r2, 82a0e <strncpy+0x3a>
   82a02:	2100      	movs	r1, #0
   82a04:	441a      	add	r2, r3
   82a06:	f803 1b01 	strb.w	r1, [r3], #1
   82a0a:	429a      	cmp	r2, r3
   82a0c:	d1fb      	bne.n	82a06 <strncpy+0x32>
   82a0e:	bc70      	pop	{r4, r5, r6}
   82a10:	4770      	bx	lr
   82a12:	460e      	mov	r6, r1
   82a14:	f851 5b04 	ldr.w	r5, [r1], #4
   82a18:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   82a1c:	ea24 0405 	bic.w	r4, r4, r5
   82a20:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   82a24:	d105      	bne.n	82a32 <strncpy+0x5e>
   82a26:	3a04      	subs	r2, #4
   82a28:	f843 5b04 	str.w	r5, [r3], #4
   82a2c:	2a03      	cmp	r2, #3
   82a2e:	d8f0      	bhi.n	82a12 <strncpy+0x3e>
   82a30:	e7d7      	b.n	829e2 <strncpy+0xe>
   82a32:	4631      	mov	r1, r6
   82a34:	e7d6      	b.n	829e4 <strncpy+0x10>
   82a36:	bf00      	nop

00082a38 <__sprint_r.part.0>:
   82a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82a3c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82a3e:	4693      	mov	fp, r2
   82a40:	049c      	lsls	r4, r3, #18
   82a42:	d52f      	bpl.n	82aa4 <__sprint_r.part.0+0x6c>
   82a44:	6893      	ldr	r3, [r2, #8]
   82a46:	6812      	ldr	r2, [r2, #0]
   82a48:	b353      	cbz	r3, 82aa0 <__sprint_r.part.0+0x68>
   82a4a:	460e      	mov	r6, r1
   82a4c:	4607      	mov	r7, r0
   82a4e:	f102 0908 	add.w	r9, r2, #8
   82a52:	e919 0420 	ldmdb	r9, {r5, sl}
   82a56:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82a5a:	d017      	beq.n	82a8c <__sprint_r.part.0+0x54>
   82a5c:	2400      	movs	r4, #0
   82a5e:	3d04      	subs	r5, #4
   82a60:	e001      	b.n	82a66 <__sprint_r.part.0+0x2e>
   82a62:	45a0      	cmp	r8, r4
   82a64:	d010      	beq.n	82a88 <__sprint_r.part.0+0x50>
   82a66:	4632      	mov	r2, r6
   82a68:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82a6c:	4638      	mov	r0, r7
   82a6e:	f001 f8b5 	bl	83bdc <_fputwc_r>
   82a72:	1c43      	adds	r3, r0, #1
   82a74:	f104 0401 	add.w	r4, r4, #1
   82a78:	d1f3      	bne.n	82a62 <__sprint_r.part.0+0x2a>
   82a7a:	2300      	movs	r3, #0
   82a7c:	f8cb 3008 	str.w	r3, [fp, #8]
   82a80:	f8cb 3004 	str.w	r3, [fp, #4]
   82a84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a88:	f8db 3008 	ldr.w	r3, [fp, #8]
   82a8c:	f02a 0a03 	bic.w	sl, sl, #3
   82a90:	eba3 030a 	sub.w	r3, r3, sl
   82a94:	f8cb 3008 	str.w	r3, [fp, #8]
   82a98:	f109 0908 	add.w	r9, r9, #8
   82a9c:	2b00      	cmp	r3, #0
   82a9e:	d1d8      	bne.n	82a52 <__sprint_r.part.0+0x1a>
   82aa0:	2000      	movs	r0, #0
   82aa2:	e7ea      	b.n	82a7a <__sprint_r.part.0+0x42>
   82aa4:	f001 fa04 	bl	83eb0 <__sfvwrite_r>
   82aa8:	2300      	movs	r3, #0
   82aaa:	f8cb 3008 	str.w	r3, [fp, #8]
   82aae:	f8cb 3004 	str.w	r3, [fp, #4]
   82ab2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ab6:	bf00      	nop

00082ab8 <_vfiprintf_r>:
   82ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82abc:	b0ad      	sub	sp, #180	; 0xb4
   82abe:	461d      	mov	r5, r3
   82ac0:	468b      	mov	fp, r1
   82ac2:	4690      	mov	r8, r2
   82ac4:	9307      	str	r3, [sp, #28]
   82ac6:	9006      	str	r0, [sp, #24]
   82ac8:	b118      	cbz	r0, 82ad2 <_vfiprintf_r+0x1a>
   82aca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82acc:	2b00      	cmp	r3, #0
   82ace:	f000 80f3 	beq.w	82cb8 <_vfiprintf_r+0x200>
   82ad2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82ad6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82ada:	07df      	lsls	r7, r3, #31
   82adc:	b281      	uxth	r1, r0
   82ade:	d402      	bmi.n	82ae6 <_vfiprintf_r+0x2e>
   82ae0:	058e      	lsls	r6, r1, #22
   82ae2:	f140 80fc 	bpl.w	82cde <_vfiprintf_r+0x226>
   82ae6:	048c      	lsls	r4, r1, #18
   82ae8:	d40a      	bmi.n	82b00 <_vfiprintf_r+0x48>
   82aea:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82aee:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82af2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82af6:	f8ab 100c 	strh.w	r1, [fp, #12]
   82afa:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82afe:	b289      	uxth	r1, r1
   82b00:	0708      	lsls	r0, r1, #28
   82b02:	f140 80b3 	bpl.w	82c6c <_vfiprintf_r+0x1b4>
   82b06:	f8db 3010 	ldr.w	r3, [fp, #16]
   82b0a:	2b00      	cmp	r3, #0
   82b0c:	f000 80ae 	beq.w	82c6c <_vfiprintf_r+0x1b4>
   82b10:	f001 031a 	and.w	r3, r1, #26
   82b14:	2b0a      	cmp	r3, #10
   82b16:	f000 80b5 	beq.w	82c84 <_vfiprintf_r+0x1cc>
   82b1a:	2300      	movs	r3, #0
   82b1c:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82b20:	46d1      	mov	r9, sl
   82b22:	930b      	str	r3, [sp, #44]	; 0x2c
   82b24:	9303      	str	r3, [sp, #12]
   82b26:	9311      	str	r3, [sp, #68]	; 0x44
   82b28:	9310      	str	r3, [sp, #64]	; 0x40
   82b2a:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82b2e:	f8cd b010 	str.w	fp, [sp, #16]
   82b32:	f898 3000 	ldrb.w	r3, [r8]
   82b36:	4644      	mov	r4, r8
   82b38:	b1fb      	cbz	r3, 82b7a <_vfiprintf_r+0xc2>
   82b3a:	2b25      	cmp	r3, #37	; 0x25
   82b3c:	d102      	bne.n	82b44 <_vfiprintf_r+0x8c>
   82b3e:	e01c      	b.n	82b7a <_vfiprintf_r+0xc2>
   82b40:	2b25      	cmp	r3, #37	; 0x25
   82b42:	d003      	beq.n	82b4c <_vfiprintf_r+0x94>
   82b44:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82b48:	2b00      	cmp	r3, #0
   82b4a:	d1f9      	bne.n	82b40 <_vfiprintf_r+0x88>
   82b4c:	eba4 0508 	sub.w	r5, r4, r8
   82b50:	b19d      	cbz	r5, 82b7a <_vfiprintf_r+0xc2>
   82b52:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82b54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82b56:	3301      	adds	r3, #1
   82b58:	442a      	add	r2, r5
   82b5a:	2b07      	cmp	r3, #7
   82b5c:	f8c9 8000 	str.w	r8, [r9]
   82b60:	f8c9 5004 	str.w	r5, [r9, #4]
   82b64:	9211      	str	r2, [sp, #68]	; 0x44
   82b66:	9310      	str	r3, [sp, #64]	; 0x40
   82b68:	dd7a      	ble.n	82c60 <_vfiprintf_r+0x1a8>
   82b6a:	2a00      	cmp	r2, #0
   82b6c:	f040 84b5 	bne.w	834da <_vfiprintf_r+0xa22>
   82b70:	46d1      	mov	r9, sl
   82b72:	9b03      	ldr	r3, [sp, #12]
   82b74:	9210      	str	r2, [sp, #64]	; 0x40
   82b76:	442b      	add	r3, r5
   82b78:	9303      	str	r3, [sp, #12]
   82b7a:	7823      	ldrb	r3, [r4, #0]
   82b7c:	2b00      	cmp	r3, #0
   82b7e:	f000 83e5 	beq.w	8334c <_vfiprintf_r+0x894>
   82b82:	2000      	movs	r0, #0
   82b84:	f04f 0300 	mov.w	r3, #0
   82b88:	f104 0801 	add.w	r8, r4, #1
   82b8c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   82b90:	7862      	ldrb	r2, [r4, #1]
   82b92:	4606      	mov	r6, r0
   82b94:	4605      	mov	r5, r0
   82b96:	4603      	mov	r3, r0
   82b98:	f04f 34ff 	mov.w	r4, #4294967295
   82b9c:	f108 0801 	add.w	r8, r8, #1
   82ba0:	f1a2 0120 	sub.w	r1, r2, #32
   82ba4:	2958      	cmp	r1, #88	; 0x58
   82ba6:	f200 82d9 	bhi.w	8315c <_vfiprintf_r+0x6a4>
   82baa:	e8df f011 	tbh	[pc, r1, lsl #1]
   82bae:	0228      	.short	0x0228
   82bb0:	02d702d7 	.word	0x02d702d7
   82bb4:	02d70230 	.word	0x02d70230
   82bb8:	02d702d7 	.word	0x02d702d7
   82bbc:	02d702d7 	.word	0x02d702d7
   82bc0:	00a002d7 	.word	0x00a002d7
   82bc4:	02d70288 	.word	0x02d70288
   82bc8:	02b800a8 	.word	0x02b800a8
   82bcc:	01a602d7 	.word	0x01a602d7
   82bd0:	01ab01ab 	.word	0x01ab01ab
   82bd4:	01ab01ab 	.word	0x01ab01ab
   82bd8:	01ab01ab 	.word	0x01ab01ab
   82bdc:	01ab01ab 	.word	0x01ab01ab
   82be0:	02d701ab 	.word	0x02d701ab
   82be4:	02d702d7 	.word	0x02d702d7
   82be8:	02d702d7 	.word	0x02d702d7
   82bec:	02d702d7 	.word	0x02d702d7
   82bf0:	02d702d7 	.word	0x02d702d7
   82bf4:	01b902d7 	.word	0x01b902d7
   82bf8:	02d702d7 	.word	0x02d702d7
   82bfc:	02d702d7 	.word	0x02d702d7
   82c00:	02d702d7 	.word	0x02d702d7
   82c04:	02d702d7 	.word	0x02d702d7
   82c08:	02d702d7 	.word	0x02d702d7
   82c0c:	02d7019e 	.word	0x02d7019e
   82c10:	02d702d7 	.word	0x02d702d7
   82c14:	02d702d7 	.word	0x02d702d7
   82c18:	02d701a2 	.word	0x02d701a2
   82c1c:	025a02d7 	.word	0x025a02d7
   82c20:	02d702d7 	.word	0x02d702d7
   82c24:	02d702d7 	.word	0x02d702d7
   82c28:	02d702d7 	.word	0x02d702d7
   82c2c:	02d702d7 	.word	0x02d702d7
   82c30:	02d702d7 	.word	0x02d702d7
   82c34:	02220261 	.word	0x02220261
   82c38:	02d702d7 	.word	0x02d702d7
   82c3c:	027602d7 	.word	0x027602d7
   82c40:	02d70222 	.word	0x02d70222
   82c44:	027b02d7 	.word	0x027b02d7
   82c48:	01fc02d7 	.word	0x01fc02d7
   82c4c:	02100189 	.word	0x02100189
   82c50:	02d702d2 	.word	0x02d702d2
   82c54:	02d70295 	.word	0x02d70295
   82c58:	02d700ad 	.word	0x02d700ad
   82c5c:	023502d7 	.word	0x023502d7
   82c60:	f109 0908 	add.w	r9, r9, #8
   82c64:	9b03      	ldr	r3, [sp, #12]
   82c66:	442b      	add	r3, r5
   82c68:	9303      	str	r3, [sp, #12]
   82c6a:	e786      	b.n	82b7a <_vfiprintf_r+0xc2>
   82c6c:	4659      	mov	r1, fp
   82c6e:	9806      	ldr	r0, [sp, #24]
   82c70:	f000 fdaa 	bl	837c8 <__swsetup_r>
   82c74:	bb18      	cbnz	r0, 82cbe <_vfiprintf_r+0x206>
   82c76:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82c7a:	f001 031a 	and.w	r3, r1, #26
   82c7e:	2b0a      	cmp	r3, #10
   82c80:	f47f af4b 	bne.w	82b1a <_vfiprintf_r+0x62>
   82c84:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82c88:	2b00      	cmp	r3, #0
   82c8a:	f6ff af46 	blt.w	82b1a <_vfiprintf_r+0x62>
   82c8e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82c92:	07db      	lsls	r3, r3, #31
   82c94:	d405      	bmi.n	82ca2 <_vfiprintf_r+0x1ea>
   82c96:	058f      	lsls	r7, r1, #22
   82c98:	d403      	bmi.n	82ca2 <_vfiprintf_r+0x1ea>
   82c9a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82c9e:	f001 fabd 	bl	8421c <__retarget_lock_release_recursive>
   82ca2:	462b      	mov	r3, r5
   82ca4:	4642      	mov	r2, r8
   82ca6:	4659      	mov	r1, fp
   82ca8:	9806      	ldr	r0, [sp, #24]
   82caa:	f000 fd49 	bl	83740 <__sbprintf>
   82cae:	9003      	str	r0, [sp, #12]
   82cb0:	9803      	ldr	r0, [sp, #12]
   82cb2:	b02d      	add	sp, #180	; 0xb4
   82cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cb8:	f000 feee 	bl	83a98 <__sinit>
   82cbc:	e709      	b.n	82ad2 <_vfiprintf_r+0x1a>
   82cbe:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82cc2:	07d9      	lsls	r1, r3, #31
   82cc4:	d404      	bmi.n	82cd0 <_vfiprintf_r+0x218>
   82cc6:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82cca:	059a      	lsls	r2, r3, #22
   82ccc:	f140 84ae 	bpl.w	8362c <_vfiprintf_r+0xb74>
   82cd0:	f04f 33ff 	mov.w	r3, #4294967295
   82cd4:	9303      	str	r3, [sp, #12]
   82cd6:	9803      	ldr	r0, [sp, #12]
   82cd8:	b02d      	add	sp, #180	; 0xb4
   82cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cde:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82ce2:	f001 fa99 	bl	84218 <__retarget_lock_acquire_recursive>
   82ce6:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82cea:	b281      	uxth	r1, r0
   82cec:	e6fb      	b.n	82ae6 <_vfiprintf_r+0x2e>
   82cee:	9907      	ldr	r1, [sp, #28]
   82cf0:	460a      	mov	r2, r1
   82cf2:	680d      	ldr	r5, [r1, #0]
   82cf4:	3204      	adds	r2, #4
   82cf6:	2d00      	cmp	r5, #0
   82cf8:	9207      	str	r2, [sp, #28]
   82cfa:	da02      	bge.n	82d02 <_vfiprintf_r+0x24a>
   82cfc:	426d      	negs	r5, r5
   82cfe:	f043 0304 	orr.w	r3, r3, #4
   82d02:	f898 2000 	ldrb.w	r2, [r8]
   82d06:	e749      	b.n	82b9c <_vfiprintf_r+0xe4>
   82d08:	9508      	str	r5, [sp, #32]
   82d0a:	069e      	lsls	r6, r3, #26
   82d0c:	f100 845a 	bmi.w	835c4 <_vfiprintf_r+0xb0c>
   82d10:	9907      	ldr	r1, [sp, #28]
   82d12:	06dd      	lsls	r5, r3, #27
   82d14:	460a      	mov	r2, r1
   82d16:	f100 83ef 	bmi.w	834f8 <_vfiprintf_r+0xa40>
   82d1a:	0658      	lsls	r0, r3, #25
   82d1c:	f140 83ec 	bpl.w	834f8 <_vfiprintf_r+0xa40>
   82d20:	2700      	movs	r7, #0
   82d22:	2201      	movs	r2, #1
   82d24:	880e      	ldrh	r6, [r1, #0]
   82d26:	3104      	adds	r1, #4
   82d28:	9107      	str	r1, [sp, #28]
   82d2a:	f04f 0100 	mov.w	r1, #0
   82d2e:	2500      	movs	r5, #0
   82d30:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82d34:	1c61      	adds	r1, r4, #1
   82d36:	f000 8117 	beq.w	82f68 <_vfiprintf_r+0x4b0>
   82d3a:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   82d3e:	9102      	str	r1, [sp, #8]
   82d40:	ea56 0107 	orrs.w	r1, r6, r7
   82d44:	f040 8115 	bne.w	82f72 <_vfiprintf_r+0x4ba>
   82d48:	2c00      	cmp	r4, #0
   82d4a:	f040 835b 	bne.w	83404 <_vfiprintf_r+0x94c>
   82d4e:	2a00      	cmp	r2, #0
   82d50:	f040 83b6 	bne.w	834c0 <_vfiprintf_r+0xa08>
   82d54:	f013 0301 	ands.w	r3, r3, #1
   82d58:	9305      	str	r3, [sp, #20]
   82d5a:	f000 8455 	beq.w	83608 <_vfiprintf_r+0xb50>
   82d5e:	2330      	movs	r3, #48	; 0x30
   82d60:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82d64:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82d68:	9b05      	ldr	r3, [sp, #20]
   82d6a:	42a3      	cmp	r3, r4
   82d6c:	bfb8      	it	lt
   82d6e:	4623      	movlt	r3, r4
   82d70:	9301      	str	r3, [sp, #4]
   82d72:	b10d      	cbz	r5, 82d78 <_vfiprintf_r+0x2c0>
   82d74:	3301      	adds	r3, #1
   82d76:	9301      	str	r3, [sp, #4]
   82d78:	9b02      	ldr	r3, [sp, #8]
   82d7a:	f013 0302 	ands.w	r3, r3, #2
   82d7e:	9309      	str	r3, [sp, #36]	; 0x24
   82d80:	d002      	beq.n	82d88 <_vfiprintf_r+0x2d0>
   82d82:	9b01      	ldr	r3, [sp, #4]
   82d84:	3302      	adds	r3, #2
   82d86:	9301      	str	r3, [sp, #4]
   82d88:	9b02      	ldr	r3, [sp, #8]
   82d8a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   82d8e:	930a      	str	r3, [sp, #40]	; 0x28
   82d90:	f040 8215 	bne.w	831be <_vfiprintf_r+0x706>
   82d94:	9b08      	ldr	r3, [sp, #32]
   82d96:	9a01      	ldr	r2, [sp, #4]
   82d98:	1a9d      	subs	r5, r3, r2
   82d9a:	2d00      	cmp	r5, #0
   82d9c:	f340 820f 	ble.w	831be <_vfiprintf_r+0x706>
   82da0:	2d10      	cmp	r5, #16
   82da2:	f340 8484 	ble.w	836ae <_vfiprintf_r+0xbf6>
   82da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82da8:	46ce      	mov	lr, r9
   82daa:	2710      	movs	r7, #16
   82dac:	46a1      	mov	r9, r4
   82dae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82db0:	4ec5      	ldr	r6, [pc, #788]	; (830c8 <_vfiprintf_r+0x610>)
   82db2:	4619      	mov	r1, r3
   82db4:	9c06      	ldr	r4, [sp, #24]
   82db6:	e007      	b.n	82dc8 <_vfiprintf_r+0x310>
   82db8:	f101 0c02 	add.w	ip, r1, #2
   82dbc:	4601      	mov	r1, r0
   82dbe:	f10e 0e08 	add.w	lr, lr, #8
   82dc2:	3d10      	subs	r5, #16
   82dc4:	2d10      	cmp	r5, #16
   82dc6:	dd11      	ble.n	82dec <_vfiprintf_r+0x334>
   82dc8:	1c48      	adds	r0, r1, #1
   82dca:	3210      	adds	r2, #16
   82dcc:	2807      	cmp	r0, #7
   82dce:	9211      	str	r2, [sp, #68]	; 0x44
   82dd0:	e88e 00c0 	stmia.w	lr, {r6, r7}
   82dd4:	9010      	str	r0, [sp, #64]	; 0x40
   82dd6:	ddef      	ble.n	82db8 <_vfiprintf_r+0x300>
   82dd8:	2a00      	cmp	r2, #0
   82dda:	f040 81d9 	bne.w	83190 <_vfiprintf_r+0x6d8>
   82dde:	3d10      	subs	r5, #16
   82de0:	2d10      	cmp	r5, #16
   82de2:	4611      	mov	r1, r2
   82de4:	f04f 0c01 	mov.w	ip, #1
   82de8:	46d6      	mov	lr, sl
   82dea:	dced      	bgt.n	82dc8 <_vfiprintf_r+0x310>
   82dec:	464c      	mov	r4, r9
   82dee:	4661      	mov	r1, ip
   82df0:	46f1      	mov	r9, lr
   82df2:	442a      	add	r2, r5
   82df4:	2907      	cmp	r1, #7
   82df6:	9211      	str	r2, [sp, #68]	; 0x44
   82df8:	f8c9 6000 	str.w	r6, [r9]
   82dfc:	f8c9 5004 	str.w	r5, [r9, #4]
   82e00:	9110      	str	r1, [sp, #64]	; 0x40
   82e02:	f300 82eb 	bgt.w	833dc <_vfiprintf_r+0x924>
   82e06:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82e0a:	f109 0908 	add.w	r9, r9, #8
   82e0e:	1c48      	adds	r0, r1, #1
   82e10:	2d00      	cmp	r5, #0
   82e12:	f040 81dc 	bne.w	831ce <_vfiprintf_r+0x716>
   82e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82e18:	2b00      	cmp	r3, #0
   82e1a:	f000 81f6 	beq.w	8320a <_vfiprintf_r+0x752>
   82e1e:	2102      	movs	r1, #2
   82e20:	ab0e      	add	r3, sp, #56	; 0x38
   82e22:	440a      	add	r2, r1
   82e24:	2807      	cmp	r0, #7
   82e26:	9211      	str	r2, [sp, #68]	; 0x44
   82e28:	9010      	str	r0, [sp, #64]	; 0x40
   82e2a:	f8c9 1004 	str.w	r1, [r9, #4]
   82e2e:	f8c9 3000 	str.w	r3, [r9]
   82e32:	f340 81e6 	ble.w	83202 <_vfiprintf_r+0x74a>
   82e36:	2a00      	cmp	r2, #0
   82e38:	f040 8395 	bne.w	83566 <_vfiprintf_r+0xaae>
   82e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82e3e:	2001      	movs	r0, #1
   82e40:	2b80      	cmp	r3, #128	; 0x80
   82e42:	4611      	mov	r1, r2
   82e44:	46d1      	mov	r9, sl
   82e46:	f040 81e4 	bne.w	83212 <_vfiprintf_r+0x75a>
   82e4a:	9b08      	ldr	r3, [sp, #32]
   82e4c:	9d01      	ldr	r5, [sp, #4]
   82e4e:	1b5e      	subs	r6, r3, r5
   82e50:	2e00      	cmp	r6, #0
   82e52:	f340 81de 	ble.w	83212 <_vfiprintf_r+0x75a>
   82e56:	2e10      	cmp	r6, #16
   82e58:	f340 843c 	ble.w	836d4 <_vfiprintf_r+0xc1c>
   82e5c:	46cc      	mov	ip, r9
   82e5e:	2710      	movs	r7, #16
   82e60:	46a1      	mov	r9, r4
   82e62:	4d9a      	ldr	r5, [pc, #616]	; (830cc <_vfiprintf_r+0x614>)
   82e64:	9c06      	ldr	r4, [sp, #24]
   82e66:	e007      	b.n	82e78 <_vfiprintf_r+0x3c0>
   82e68:	f101 0e02 	add.w	lr, r1, #2
   82e6c:	4601      	mov	r1, r0
   82e6e:	f10c 0c08 	add.w	ip, ip, #8
   82e72:	3e10      	subs	r6, #16
   82e74:	2e10      	cmp	r6, #16
   82e76:	dd11      	ble.n	82e9c <_vfiprintf_r+0x3e4>
   82e78:	1c48      	adds	r0, r1, #1
   82e7a:	3210      	adds	r2, #16
   82e7c:	2807      	cmp	r0, #7
   82e7e:	9211      	str	r2, [sp, #68]	; 0x44
   82e80:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82e84:	9010      	str	r0, [sp, #64]	; 0x40
   82e86:	ddef      	ble.n	82e68 <_vfiprintf_r+0x3b0>
   82e88:	2a00      	cmp	r2, #0
   82e8a:	f040 829b 	bne.w	833c4 <_vfiprintf_r+0x90c>
   82e8e:	3e10      	subs	r6, #16
   82e90:	2e10      	cmp	r6, #16
   82e92:	f04f 0e01 	mov.w	lr, #1
   82e96:	4611      	mov	r1, r2
   82e98:	46d4      	mov	ip, sl
   82e9a:	dced      	bgt.n	82e78 <_vfiprintf_r+0x3c0>
   82e9c:	464c      	mov	r4, r9
   82e9e:	46e1      	mov	r9, ip
   82ea0:	4432      	add	r2, r6
   82ea2:	f1be 0f07 	cmp.w	lr, #7
   82ea6:	9211      	str	r2, [sp, #68]	; 0x44
   82ea8:	e889 0060 	stmia.w	r9, {r5, r6}
   82eac:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   82eb0:	f300 8366 	bgt.w	83580 <_vfiprintf_r+0xac8>
   82eb4:	f109 0908 	add.w	r9, r9, #8
   82eb8:	f10e 0001 	add.w	r0, lr, #1
   82ebc:	4671      	mov	r1, lr
   82ebe:	e1a8      	b.n	83212 <_vfiprintf_r+0x75a>
   82ec0:	9508      	str	r5, [sp, #32]
   82ec2:	f013 0220 	ands.w	r2, r3, #32
   82ec6:	f040 8389 	bne.w	835dc <_vfiprintf_r+0xb24>
   82eca:	f013 0110 	ands.w	r1, r3, #16
   82ece:	f040 8319 	bne.w	83504 <_vfiprintf_r+0xa4c>
   82ed2:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82ed6:	f000 8315 	beq.w	83504 <_vfiprintf_r+0xa4c>
   82eda:	9807      	ldr	r0, [sp, #28]
   82edc:	460a      	mov	r2, r1
   82ede:	4601      	mov	r1, r0
   82ee0:	3104      	adds	r1, #4
   82ee2:	8806      	ldrh	r6, [r0, #0]
   82ee4:	2700      	movs	r7, #0
   82ee6:	9107      	str	r1, [sp, #28]
   82ee8:	e71f      	b.n	82d2a <_vfiprintf_r+0x272>
   82eea:	9508      	str	r5, [sp, #32]
   82eec:	f043 0310 	orr.w	r3, r3, #16
   82ef0:	e7e7      	b.n	82ec2 <_vfiprintf_r+0x40a>
   82ef2:	9508      	str	r5, [sp, #32]
   82ef4:	f043 0310 	orr.w	r3, r3, #16
   82ef8:	e707      	b.n	82d0a <_vfiprintf_r+0x252>
   82efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82efe:	f898 2000 	ldrb.w	r2, [r8]
   82f02:	e64b      	b.n	82b9c <_vfiprintf_r+0xe4>
   82f04:	2500      	movs	r5, #0
   82f06:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f0a:	f818 2b01 	ldrb.w	r2, [r8], #1
   82f0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   82f12:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82f16:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82f1a:	2909      	cmp	r1, #9
   82f1c:	d9f5      	bls.n	82f0a <_vfiprintf_r+0x452>
   82f1e:	e63f      	b.n	82ba0 <_vfiprintf_r+0xe8>
   82f20:	9508      	str	r5, [sp, #32]
   82f22:	2800      	cmp	r0, #0
   82f24:	f040 8402 	bne.w	8372c <_vfiprintf_r+0xc74>
   82f28:	f043 0310 	orr.w	r3, r3, #16
   82f2c:	069e      	lsls	r6, r3, #26
   82f2e:	f100 833d 	bmi.w	835ac <_vfiprintf_r+0xaf4>
   82f32:	9907      	ldr	r1, [sp, #28]
   82f34:	06dd      	lsls	r5, r3, #27
   82f36:	460a      	mov	r2, r1
   82f38:	f100 82f0 	bmi.w	8351c <_vfiprintf_r+0xa64>
   82f3c:	0658      	lsls	r0, r3, #25
   82f3e:	f140 82ed 	bpl.w	8351c <_vfiprintf_r+0xa64>
   82f42:	f9b1 6000 	ldrsh.w	r6, [r1]
   82f46:	3204      	adds	r2, #4
   82f48:	17f7      	asrs	r7, r6, #31
   82f4a:	4630      	mov	r0, r6
   82f4c:	4639      	mov	r1, r7
   82f4e:	9207      	str	r2, [sp, #28]
   82f50:	2800      	cmp	r0, #0
   82f52:	f171 0200 	sbcs.w	r2, r1, #0
   82f56:	f2c0 835a 	blt.w	8360e <_vfiprintf_r+0xb56>
   82f5a:	1c61      	adds	r1, r4, #1
   82f5c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82f60:	f04f 0201 	mov.w	r2, #1
   82f64:	f47f aee9 	bne.w	82d3a <_vfiprintf_r+0x282>
   82f68:	ea56 0107 	orrs.w	r1, r6, r7
   82f6c:	f000 824b 	beq.w	83406 <_vfiprintf_r+0x94e>
   82f70:	9302      	str	r3, [sp, #8]
   82f72:	2a01      	cmp	r2, #1
   82f74:	f000 828a 	beq.w	8348c <_vfiprintf_r+0x9d4>
   82f78:	2a02      	cmp	r2, #2
   82f7a:	f040 825a 	bne.w	83432 <_vfiprintf_r+0x97a>
   82f7e:	46d3      	mov	fp, sl
   82f80:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82f82:	0933      	lsrs	r3, r6, #4
   82f84:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82f88:	0939      	lsrs	r1, r7, #4
   82f8a:	f006 020f 	and.w	r2, r6, #15
   82f8e:	460f      	mov	r7, r1
   82f90:	461e      	mov	r6, r3
   82f92:	5c83      	ldrb	r3, [r0, r2]
   82f94:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82f98:	ea56 0307 	orrs.w	r3, r6, r7
   82f9c:	d1f1      	bne.n	82f82 <_vfiprintf_r+0x4ca>
   82f9e:	ebaa 030b 	sub.w	r3, sl, fp
   82fa2:	9305      	str	r3, [sp, #20]
   82fa4:	e6e0      	b.n	82d68 <_vfiprintf_r+0x2b0>
   82fa6:	2800      	cmp	r0, #0
   82fa8:	f040 83bd 	bne.w	83726 <_vfiprintf_r+0xc6e>
   82fac:	0699      	lsls	r1, r3, #26
   82fae:	f100 8359 	bmi.w	83664 <_vfiprintf_r+0xbac>
   82fb2:	06da      	lsls	r2, r3, #27
   82fb4:	f100 80e5 	bmi.w	83182 <_vfiprintf_r+0x6ca>
   82fb8:	065b      	lsls	r3, r3, #25
   82fba:	f140 80e2 	bpl.w	83182 <_vfiprintf_r+0x6ca>
   82fbe:	9a07      	ldr	r2, [sp, #28]
   82fc0:	6813      	ldr	r3, [r2, #0]
   82fc2:	3204      	adds	r2, #4
   82fc4:	9207      	str	r2, [sp, #28]
   82fc6:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82fca:	801a      	strh	r2, [r3, #0]
   82fcc:	e5b1      	b.n	82b32 <_vfiprintf_r+0x7a>
   82fce:	2278      	movs	r2, #120	; 0x78
   82fd0:	2130      	movs	r1, #48	; 0x30
   82fd2:	9508      	str	r5, [sp, #32]
   82fd4:	9d07      	ldr	r5, [sp, #28]
   82fd6:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82fda:	1d2a      	adds	r2, r5, #4
   82fdc:	9207      	str	r2, [sp, #28]
   82fde:	4a3c      	ldr	r2, [pc, #240]	; (830d0 <_vfiprintf_r+0x618>)
   82fe0:	682e      	ldr	r6, [r5, #0]
   82fe2:	920b      	str	r2, [sp, #44]	; 0x2c
   82fe4:	f043 0302 	orr.w	r3, r3, #2
   82fe8:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82fec:	2700      	movs	r7, #0
   82fee:	2202      	movs	r2, #2
   82ff0:	e69b      	b.n	82d2a <_vfiprintf_r+0x272>
   82ff2:	9508      	str	r5, [sp, #32]
   82ff4:	2800      	cmp	r0, #0
   82ff6:	d099      	beq.n	82f2c <_vfiprintf_r+0x474>
   82ff8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82ffc:	e796      	b.n	82f2c <_vfiprintf_r+0x474>
   82ffe:	f898 2000 	ldrb.w	r2, [r8]
   83002:	2e00      	cmp	r6, #0
   83004:	f47f adca 	bne.w	82b9c <_vfiprintf_r+0xe4>
   83008:	2001      	movs	r0, #1
   8300a:	2620      	movs	r6, #32
   8300c:	e5c6      	b.n	82b9c <_vfiprintf_r+0xe4>
   8300e:	f043 0301 	orr.w	r3, r3, #1
   83012:	f898 2000 	ldrb.w	r2, [r8]
   83016:	e5c1      	b.n	82b9c <_vfiprintf_r+0xe4>
   83018:	9508      	str	r5, [sp, #32]
   8301a:	2800      	cmp	r0, #0
   8301c:	f040 8380 	bne.w	83720 <_vfiprintf_r+0xc68>
   83020:	492b      	ldr	r1, [pc, #172]	; (830d0 <_vfiprintf_r+0x618>)
   83022:	910b      	str	r1, [sp, #44]	; 0x2c
   83024:	069f      	lsls	r7, r3, #26
   83026:	f100 82e5 	bmi.w	835f4 <_vfiprintf_r+0xb3c>
   8302a:	9807      	ldr	r0, [sp, #28]
   8302c:	06de      	lsls	r6, r3, #27
   8302e:	4601      	mov	r1, r0
   83030:	f100 826f 	bmi.w	83512 <_vfiprintf_r+0xa5a>
   83034:	065d      	lsls	r5, r3, #25
   83036:	f140 826c 	bpl.w	83512 <_vfiprintf_r+0xa5a>
   8303a:	2700      	movs	r7, #0
   8303c:	3104      	adds	r1, #4
   8303e:	8806      	ldrh	r6, [r0, #0]
   83040:	9107      	str	r1, [sp, #28]
   83042:	07d8      	lsls	r0, r3, #31
   83044:	f140 8220 	bpl.w	83488 <_vfiprintf_r+0x9d0>
   83048:	ea56 0107 	orrs.w	r1, r6, r7
   8304c:	f000 821c 	beq.w	83488 <_vfiprintf_r+0x9d0>
   83050:	2130      	movs	r1, #48	; 0x30
   83052:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   83056:	f043 0302 	orr.w	r3, r3, #2
   8305a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8305e:	2202      	movs	r2, #2
   83060:	e663      	b.n	82d2a <_vfiprintf_r+0x272>
   83062:	9508      	str	r5, [sp, #32]
   83064:	2800      	cmp	r0, #0
   83066:	f040 8355 	bne.w	83714 <_vfiprintf_r+0xc5c>
   8306a:	491a      	ldr	r1, [pc, #104]	; (830d4 <_vfiprintf_r+0x61c>)
   8306c:	910b      	str	r1, [sp, #44]	; 0x2c
   8306e:	e7d9      	b.n	83024 <_vfiprintf_r+0x56c>
   83070:	2201      	movs	r2, #1
   83072:	9807      	ldr	r0, [sp, #28]
   83074:	4611      	mov	r1, r2
   83076:	9201      	str	r2, [sp, #4]
   83078:	6802      	ldr	r2, [r0, #0]
   8307a:	f04f 0400 	mov.w	r4, #0
   8307e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83082:	4602      	mov	r2, r0
   83084:	3204      	adds	r2, #4
   83086:	9508      	str	r5, [sp, #32]
   83088:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8308c:	9105      	str	r1, [sp, #20]
   8308e:	9207      	str	r2, [sp, #28]
   83090:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83094:	9302      	str	r3, [sp, #8]
   83096:	2400      	movs	r4, #0
   83098:	e66e      	b.n	82d78 <_vfiprintf_r+0x2c0>
   8309a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8309e:	f898 2000 	ldrb.w	r2, [r8]
   830a2:	e57b      	b.n	82b9c <_vfiprintf_r+0xe4>
   830a4:	f898 2000 	ldrb.w	r2, [r8]
   830a8:	2a6c      	cmp	r2, #108	; 0x6c
   830aa:	bf03      	ittte	eq
   830ac:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   830b0:	f043 0320 	orreq.w	r3, r3, #32
   830b4:	f108 0801 	addeq.w	r8, r8, #1
   830b8:	f043 0310 	orrne.w	r3, r3, #16
   830bc:	e56e      	b.n	82b9c <_vfiprintf_r+0xe4>
   830be:	f898 2000 	ldrb.w	r2, [r8]
   830c2:	2001      	movs	r0, #1
   830c4:	262b      	movs	r6, #43	; 0x2b
   830c6:	e569      	b.n	82b9c <_vfiprintf_r+0xe4>
   830c8:	0008556c 	.word	0x0008556c
   830cc:	0008557c 	.word	0x0008557c
   830d0:	00085550 	.word	0x00085550
   830d4:	0008553c 	.word	0x0008553c
   830d8:	f04f 0200 	mov.w	r2, #0
   830dc:	9907      	ldr	r1, [sp, #28]
   830de:	9508      	str	r5, [sp, #32]
   830e0:	f8d1 b000 	ldr.w	fp, [r1]
   830e4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   830e8:	1d0d      	adds	r5, r1, #4
   830ea:	f1bb 0f00 	cmp.w	fp, #0
   830ee:	f000 82e4 	beq.w	836ba <_vfiprintf_r+0xc02>
   830f2:	1c67      	adds	r7, r4, #1
   830f4:	f000 82c3 	beq.w	8367e <_vfiprintf_r+0xbc6>
   830f8:	4622      	mov	r2, r4
   830fa:	2100      	movs	r1, #0
   830fc:	4658      	mov	r0, fp
   830fe:	9301      	str	r3, [sp, #4]
   83100:	f001 fbc6 	bl	84890 <memchr>
   83104:	9b01      	ldr	r3, [sp, #4]
   83106:	2800      	cmp	r0, #0
   83108:	f000 82e8 	beq.w	836dc <_vfiprintf_r+0xc24>
   8310c:	eba0 020b 	sub.w	r2, r0, fp
   83110:	9507      	str	r5, [sp, #28]
   83112:	9205      	str	r2, [sp, #20]
   83114:	9302      	str	r3, [sp, #8]
   83116:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8311a:	2400      	movs	r4, #0
   8311c:	e624      	b.n	82d68 <_vfiprintf_r+0x2b0>
   8311e:	f898 2000 	ldrb.w	r2, [r8]
   83122:	f108 0701 	add.w	r7, r8, #1
   83126:	2a2a      	cmp	r2, #42	; 0x2a
   83128:	f000 82e9 	beq.w	836fe <_vfiprintf_r+0xc46>
   8312c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   83130:	2909      	cmp	r1, #9
   83132:	46b8      	mov	r8, r7
   83134:	f04f 0400 	mov.w	r4, #0
   83138:	f63f ad32 	bhi.w	82ba0 <_vfiprintf_r+0xe8>
   8313c:	f818 2b01 	ldrb.w	r2, [r8], #1
   83140:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   83144:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   83148:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8314c:	2909      	cmp	r1, #9
   8314e:	d9f5      	bls.n	8313c <_vfiprintf_r+0x684>
   83150:	e526      	b.n	82ba0 <_vfiprintf_r+0xe8>
   83152:	f043 0320 	orr.w	r3, r3, #32
   83156:	f898 2000 	ldrb.w	r2, [r8]
   8315a:	e51f      	b.n	82b9c <_vfiprintf_r+0xe4>
   8315c:	9508      	str	r5, [sp, #32]
   8315e:	2800      	cmp	r0, #0
   83160:	f040 82db 	bne.w	8371a <_vfiprintf_r+0xc62>
   83164:	2a00      	cmp	r2, #0
   83166:	f000 80f1 	beq.w	8334c <_vfiprintf_r+0x894>
   8316a:	2101      	movs	r1, #1
   8316c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83170:	f04f 0200 	mov.w	r2, #0
   83174:	9101      	str	r1, [sp, #4]
   83176:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8317a:	9105      	str	r1, [sp, #20]
   8317c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83180:	e788      	b.n	83094 <_vfiprintf_r+0x5dc>
   83182:	9a07      	ldr	r2, [sp, #28]
   83184:	6813      	ldr	r3, [r2, #0]
   83186:	3204      	adds	r2, #4
   83188:	9207      	str	r2, [sp, #28]
   8318a:	9a03      	ldr	r2, [sp, #12]
   8318c:	601a      	str	r2, [r3, #0]
   8318e:	e4d0      	b.n	82b32 <_vfiprintf_r+0x7a>
   83190:	aa0f      	add	r2, sp, #60	; 0x3c
   83192:	9904      	ldr	r1, [sp, #16]
   83194:	4620      	mov	r0, r4
   83196:	f7ff fc4f 	bl	82a38 <__sprint_r.part.0>
   8319a:	2800      	cmp	r0, #0
   8319c:	f040 8143 	bne.w	83426 <_vfiprintf_r+0x96e>
   831a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   831a2:	46d6      	mov	lr, sl
   831a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831a6:	f101 0c01 	add.w	ip, r1, #1
   831aa:	e60a      	b.n	82dc2 <_vfiprintf_r+0x30a>
   831ac:	aa0f      	add	r2, sp, #60	; 0x3c
   831ae:	9904      	ldr	r1, [sp, #16]
   831b0:	9806      	ldr	r0, [sp, #24]
   831b2:	f7ff fc41 	bl	82a38 <__sprint_r.part.0>
   831b6:	2800      	cmp	r0, #0
   831b8:	f040 8135 	bne.w	83426 <_vfiprintf_r+0x96e>
   831bc:	46d1      	mov	r9, sl
   831be:	9910      	ldr	r1, [sp, #64]	; 0x40
   831c0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   831c4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   831c6:	1c48      	adds	r0, r1, #1
   831c8:	2d00      	cmp	r5, #0
   831ca:	f43f ae24 	beq.w	82e16 <_vfiprintf_r+0x35e>
   831ce:	2101      	movs	r1, #1
   831d0:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   831d4:	440a      	add	r2, r1
   831d6:	2807      	cmp	r0, #7
   831d8:	9211      	str	r2, [sp, #68]	; 0x44
   831da:	9010      	str	r0, [sp, #64]	; 0x40
   831dc:	f8c9 1004 	str.w	r1, [r9, #4]
   831e0:	f8c9 5000 	str.w	r5, [r9]
   831e4:	f340 8109 	ble.w	833fa <_vfiprintf_r+0x942>
   831e8:	2a00      	cmp	r2, #0
   831ea:	f040 81af 	bne.w	8354c <_vfiprintf_r+0xa94>
   831ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   831f0:	2b00      	cmp	r3, #0
   831f2:	f43f ae23 	beq.w	82e3c <_vfiprintf_r+0x384>
   831f6:	2202      	movs	r2, #2
   831f8:	4608      	mov	r0, r1
   831fa:	46d1      	mov	r9, sl
   831fc:	ab0e      	add	r3, sp, #56	; 0x38
   831fe:	921d      	str	r2, [sp, #116]	; 0x74
   83200:	931c      	str	r3, [sp, #112]	; 0x70
   83202:	4601      	mov	r1, r0
   83204:	f109 0908 	add.w	r9, r9, #8
   83208:	3001      	adds	r0, #1
   8320a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8320c:	2b80      	cmp	r3, #128	; 0x80
   8320e:	f43f ae1c 	beq.w	82e4a <_vfiprintf_r+0x392>
   83212:	9b05      	ldr	r3, [sp, #20]
   83214:	1ae4      	subs	r4, r4, r3
   83216:	2c00      	cmp	r4, #0
   83218:	dd2f      	ble.n	8327a <_vfiprintf_r+0x7c2>
   8321a:	2c10      	cmp	r4, #16
   8321c:	f340 8220 	ble.w	83660 <_vfiprintf_r+0xba8>
   83220:	46ce      	mov	lr, r9
   83222:	2610      	movs	r6, #16
   83224:	4db2      	ldr	r5, [pc, #712]	; (834f0 <_vfiprintf_r+0xa38>)
   83226:	9f06      	ldr	r7, [sp, #24]
   83228:	f8dd 9010 	ldr.w	r9, [sp, #16]
   8322c:	e006      	b.n	8323c <_vfiprintf_r+0x784>
   8322e:	1c88      	adds	r0, r1, #2
   83230:	4619      	mov	r1, r3
   83232:	f10e 0e08 	add.w	lr, lr, #8
   83236:	3c10      	subs	r4, #16
   83238:	2c10      	cmp	r4, #16
   8323a:	dd10      	ble.n	8325e <_vfiprintf_r+0x7a6>
   8323c:	1c4b      	adds	r3, r1, #1
   8323e:	3210      	adds	r2, #16
   83240:	2b07      	cmp	r3, #7
   83242:	9211      	str	r2, [sp, #68]	; 0x44
   83244:	e88e 0060 	stmia.w	lr, {r5, r6}
   83248:	9310      	str	r3, [sp, #64]	; 0x40
   8324a:	ddf0      	ble.n	8322e <_vfiprintf_r+0x776>
   8324c:	2a00      	cmp	r2, #0
   8324e:	d165      	bne.n	8331c <_vfiprintf_r+0x864>
   83250:	3c10      	subs	r4, #16
   83252:	2c10      	cmp	r4, #16
   83254:	f04f 0001 	mov.w	r0, #1
   83258:	4611      	mov	r1, r2
   8325a:	46d6      	mov	lr, sl
   8325c:	dcee      	bgt.n	8323c <_vfiprintf_r+0x784>
   8325e:	46f1      	mov	r9, lr
   83260:	4422      	add	r2, r4
   83262:	2807      	cmp	r0, #7
   83264:	9211      	str	r2, [sp, #68]	; 0x44
   83266:	f8c9 5000 	str.w	r5, [r9]
   8326a:	f8c9 4004 	str.w	r4, [r9, #4]
   8326e:	9010      	str	r0, [sp, #64]	; 0x40
   83270:	f300 8085 	bgt.w	8337e <_vfiprintf_r+0x8c6>
   83274:	f109 0908 	add.w	r9, r9, #8
   83278:	3001      	adds	r0, #1
   8327a:	9905      	ldr	r1, [sp, #20]
   8327c:	2807      	cmp	r0, #7
   8327e:	440a      	add	r2, r1
   83280:	9211      	str	r2, [sp, #68]	; 0x44
   83282:	f8c9 b000 	str.w	fp, [r9]
   83286:	f8c9 1004 	str.w	r1, [r9, #4]
   8328a:	9010      	str	r0, [sp, #64]	; 0x40
   8328c:	f340 8082 	ble.w	83394 <_vfiprintf_r+0x8dc>
   83290:	2a00      	cmp	r2, #0
   83292:	f040 8118 	bne.w	834c6 <_vfiprintf_r+0xa0e>
   83296:	9b02      	ldr	r3, [sp, #8]
   83298:	9210      	str	r2, [sp, #64]	; 0x40
   8329a:	0758      	lsls	r0, r3, #29
   8329c:	d535      	bpl.n	8330a <_vfiprintf_r+0x852>
   8329e:	9b08      	ldr	r3, [sp, #32]
   832a0:	9901      	ldr	r1, [sp, #4]
   832a2:	1a5c      	subs	r4, r3, r1
   832a4:	2c00      	cmp	r4, #0
   832a6:	f340 80e7 	ble.w	83478 <_vfiprintf_r+0x9c0>
   832aa:	46d1      	mov	r9, sl
   832ac:	2c10      	cmp	r4, #16
   832ae:	f340 820d 	ble.w	836cc <_vfiprintf_r+0xc14>
   832b2:	2510      	movs	r5, #16
   832b4:	9910      	ldr	r1, [sp, #64]	; 0x40
   832b6:	4e8f      	ldr	r6, [pc, #572]	; (834f4 <_vfiprintf_r+0xa3c>)
   832b8:	9f06      	ldr	r7, [sp, #24]
   832ba:	f8dd b010 	ldr.w	fp, [sp, #16]
   832be:	e006      	b.n	832ce <_vfiprintf_r+0x816>
   832c0:	1c88      	adds	r0, r1, #2
   832c2:	4619      	mov	r1, r3
   832c4:	f109 0908 	add.w	r9, r9, #8
   832c8:	3c10      	subs	r4, #16
   832ca:	2c10      	cmp	r4, #16
   832cc:	dd11      	ble.n	832f2 <_vfiprintf_r+0x83a>
   832ce:	1c4b      	adds	r3, r1, #1
   832d0:	3210      	adds	r2, #16
   832d2:	2b07      	cmp	r3, #7
   832d4:	9211      	str	r2, [sp, #68]	; 0x44
   832d6:	f8c9 6000 	str.w	r6, [r9]
   832da:	f8c9 5004 	str.w	r5, [r9, #4]
   832de:	9310      	str	r3, [sp, #64]	; 0x40
   832e0:	ddee      	ble.n	832c0 <_vfiprintf_r+0x808>
   832e2:	bb42      	cbnz	r2, 83336 <_vfiprintf_r+0x87e>
   832e4:	3c10      	subs	r4, #16
   832e6:	2c10      	cmp	r4, #16
   832e8:	f04f 0001 	mov.w	r0, #1
   832ec:	4611      	mov	r1, r2
   832ee:	46d1      	mov	r9, sl
   832f0:	dced      	bgt.n	832ce <_vfiprintf_r+0x816>
   832f2:	4422      	add	r2, r4
   832f4:	2807      	cmp	r0, #7
   832f6:	9211      	str	r2, [sp, #68]	; 0x44
   832f8:	f8c9 6000 	str.w	r6, [r9]
   832fc:	f8c9 4004 	str.w	r4, [r9, #4]
   83300:	9010      	str	r0, [sp, #64]	; 0x40
   83302:	dd51      	ble.n	833a8 <_vfiprintf_r+0x8f0>
   83304:	2a00      	cmp	r2, #0
   83306:	f040 819a 	bne.w	8363e <_vfiprintf_r+0xb86>
   8330a:	9b03      	ldr	r3, [sp, #12]
   8330c:	9a08      	ldr	r2, [sp, #32]
   8330e:	9901      	ldr	r1, [sp, #4]
   83310:	428a      	cmp	r2, r1
   83312:	bfac      	ite	ge
   83314:	189b      	addge	r3, r3, r2
   83316:	185b      	addlt	r3, r3, r1
   83318:	9303      	str	r3, [sp, #12]
   8331a:	e04e      	b.n	833ba <_vfiprintf_r+0x902>
   8331c:	aa0f      	add	r2, sp, #60	; 0x3c
   8331e:	4649      	mov	r1, r9
   83320:	4638      	mov	r0, r7
   83322:	f7ff fb89 	bl	82a38 <__sprint_r.part.0>
   83326:	2800      	cmp	r0, #0
   83328:	f040 813e 	bne.w	835a8 <_vfiprintf_r+0xaf0>
   8332c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8332e:	46d6      	mov	lr, sl
   83330:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83332:	1c48      	adds	r0, r1, #1
   83334:	e77f      	b.n	83236 <_vfiprintf_r+0x77e>
   83336:	aa0f      	add	r2, sp, #60	; 0x3c
   83338:	4659      	mov	r1, fp
   8333a:	4638      	mov	r0, r7
   8333c:	f7ff fb7c 	bl	82a38 <__sprint_r.part.0>
   83340:	b960      	cbnz	r0, 8335c <_vfiprintf_r+0x8a4>
   83342:	9910      	ldr	r1, [sp, #64]	; 0x40
   83344:	46d1      	mov	r9, sl
   83346:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83348:	1c48      	adds	r0, r1, #1
   8334a:	e7bd      	b.n	832c8 <_vfiprintf_r+0x810>
   8334c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8334e:	f8dd b010 	ldr.w	fp, [sp, #16]
   83352:	2b00      	cmp	r3, #0
   83354:	f040 81ca 	bne.w	836ec <_vfiprintf_r+0xc34>
   83358:	2300      	movs	r3, #0
   8335a:	9310      	str	r3, [sp, #64]	; 0x40
   8335c:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83360:	f013 0f01 	tst.w	r3, #1
   83364:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83368:	d102      	bne.n	83370 <_vfiprintf_r+0x8b8>
   8336a:	059a      	lsls	r2, r3, #22
   8336c:	f140 80dd 	bpl.w	8352a <_vfiprintf_r+0xa72>
   83370:	065b      	lsls	r3, r3, #25
   83372:	f53f acad 	bmi.w	82cd0 <_vfiprintf_r+0x218>
   83376:	9803      	ldr	r0, [sp, #12]
   83378:	b02d      	add	sp, #180	; 0xb4
   8337a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8337e:	2a00      	cmp	r2, #0
   83380:	f040 8105 	bne.w	8358e <_vfiprintf_r+0xad6>
   83384:	2301      	movs	r3, #1
   83386:	46d1      	mov	r9, sl
   83388:	9a05      	ldr	r2, [sp, #20]
   8338a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8338e:	921d      	str	r2, [sp, #116]	; 0x74
   83390:	9211      	str	r2, [sp, #68]	; 0x44
   83392:	9310      	str	r3, [sp, #64]	; 0x40
   83394:	f109 0908 	add.w	r9, r9, #8
   83398:	9b02      	ldr	r3, [sp, #8]
   8339a:	0759      	lsls	r1, r3, #29
   8339c:	d504      	bpl.n	833a8 <_vfiprintf_r+0x8f0>
   8339e:	9b08      	ldr	r3, [sp, #32]
   833a0:	9901      	ldr	r1, [sp, #4]
   833a2:	1a5c      	subs	r4, r3, r1
   833a4:	2c00      	cmp	r4, #0
   833a6:	dc81      	bgt.n	832ac <_vfiprintf_r+0x7f4>
   833a8:	9b03      	ldr	r3, [sp, #12]
   833aa:	9908      	ldr	r1, [sp, #32]
   833ac:	9801      	ldr	r0, [sp, #4]
   833ae:	4281      	cmp	r1, r0
   833b0:	bfac      	ite	ge
   833b2:	185b      	addge	r3, r3, r1
   833b4:	181b      	addlt	r3, r3, r0
   833b6:	9303      	str	r3, [sp, #12]
   833b8:	bb72      	cbnz	r2, 83418 <_vfiprintf_r+0x960>
   833ba:	2300      	movs	r3, #0
   833bc:	46d1      	mov	r9, sl
   833be:	9310      	str	r3, [sp, #64]	; 0x40
   833c0:	f7ff bbb7 	b.w	82b32 <_vfiprintf_r+0x7a>
   833c4:	aa0f      	add	r2, sp, #60	; 0x3c
   833c6:	9904      	ldr	r1, [sp, #16]
   833c8:	4620      	mov	r0, r4
   833ca:	f7ff fb35 	bl	82a38 <__sprint_r.part.0>
   833ce:	bb50      	cbnz	r0, 83426 <_vfiprintf_r+0x96e>
   833d0:	9910      	ldr	r1, [sp, #64]	; 0x40
   833d2:	46d4      	mov	ip, sl
   833d4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   833d6:	f101 0e01 	add.w	lr, r1, #1
   833da:	e54a      	b.n	82e72 <_vfiprintf_r+0x3ba>
   833dc:	2a00      	cmp	r2, #0
   833de:	f47f aee5 	bne.w	831ac <_vfiprintf_r+0x6f4>
   833e2:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   833e6:	2900      	cmp	r1, #0
   833e8:	f000 811a 	beq.w	83620 <_vfiprintf_r+0xb68>
   833ec:	2201      	movs	r2, #1
   833ee:	46d1      	mov	r9, sl
   833f0:	4610      	mov	r0, r2
   833f2:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   833f6:	921d      	str	r2, [sp, #116]	; 0x74
   833f8:	911c      	str	r1, [sp, #112]	; 0x70
   833fa:	4601      	mov	r1, r0
   833fc:	f109 0908 	add.w	r9, r9, #8
   83400:	3001      	adds	r0, #1
   83402:	e508      	b.n	82e16 <_vfiprintf_r+0x35e>
   83404:	9b02      	ldr	r3, [sp, #8]
   83406:	2a01      	cmp	r2, #1
   83408:	f000 8097 	beq.w	8353a <_vfiprintf_r+0xa82>
   8340c:	2a02      	cmp	r2, #2
   8340e:	d10d      	bne.n	8342c <_vfiprintf_r+0x974>
   83410:	9302      	str	r3, [sp, #8]
   83412:	2600      	movs	r6, #0
   83414:	2700      	movs	r7, #0
   83416:	e5b2      	b.n	82f7e <_vfiprintf_r+0x4c6>
   83418:	aa0f      	add	r2, sp, #60	; 0x3c
   8341a:	9904      	ldr	r1, [sp, #16]
   8341c:	9806      	ldr	r0, [sp, #24]
   8341e:	f7ff fb0b 	bl	82a38 <__sprint_r.part.0>
   83422:	2800      	cmp	r0, #0
   83424:	d0c9      	beq.n	833ba <_vfiprintf_r+0x902>
   83426:	f8dd b010 	ldr.w	fp, [sp, #16]
   8342a:	e797      	b.n	8335c <_vfiprintf_r+0x8a4>
   8342c:	2600      	movs	r6, #0
   8342e:	2700      	movs	r7, #0
   83430:	9302      	str	r3, [sp, #8]
   83432:	4651      	mov	r1, sl
   83434:	e000      	b.n	83438 <_vfiprintf_r+0x980>
   83436:	4659      	mov	r1, fp
   83438:	08f2      	lsrs	r2, r6, #3
   8343a:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   8343e:	08f8      	lsrs	r0, r7, #3
   83440:	f006 0307 	and.w	r3, r6, #7
   83444:	4607      	mov	r7, r0
   83446:	4616      	mov	r6, r2
   83448:	3330      	adds	r3, #48	; 0x30
   8344a:	ea56 0207 	orrs.w	r2, r6, r7
   8344e:	f801 3c01 	strb.w	r3, [r1, #-1]
   83452:	f101 3bff 	add.w	fp, r1, #4294967295
   83456:	d1ee      	bne.n	83436 <_vfiprintf_r+0x97e>
   83458:	9a02      	ldr	r2, [sp, #8]
   8345a:	07d6      	lsls	r6, r2, #31
   8345c:	f57f ad9f 	bpl.w	82f9e <_vfiprintf_r+0x4e6>
   83460:	2b30      	cmp	r3, #48	; 0x30
   83462:	f43f ad9c 	beq.w	82f9e <_vfiprintf_r+0x4e6>
   83466:	2330      	movs	r3, #48	; 0x30
   83468:	3902      	subs	r1, #2
   8346a:	f80b 3c01 	strb.w	r3, [fp, #-1]
   8346e:	ebaa 0301 	sub.w	r3, sl, r1
   83472:	9305      	str	r3, [sp, #20]
   83474:	468b      	mov	fp, r1
   83476:	e477      	b.n	82d68 <_vfiprintf_r+0x2b0>
   83478:	9b03      	ldr	r3, [sp, #12]
   8347a:	9a08      	ldr	r2, [sp, #32]
   8347c:	428a      	cmp	r2, r1
   8347e:	bfac      	ite	ge
   83480:	189b      	addge	r3, r3, r2
   83482:	185b      	addlt	r3, r3, r1
   83484:	9303      	str	r3, [sp, #12]
   83486:	e798      	b.n	833ba <_vfiprintf_r+0x902>
   83488:	2202      	movs	r2, #2
   8348a:	e44e      	b.n	82d2a <_vfiprintf_r+0x272>
   8348c:	2f00      	cmp	r7, #0
   8348e:	bf08      	it	eq
   83490:	2e0a      	cmpeq	r6, #10
   83492:	d351      	bcc.n	83538 <_vfiprintf_r+0xa80>
   83494:	46d3      	mov	fp, sl
   83496:	4630      	mov	r0, r6
   83498:	4639      	mov	r1, r7
   8349a:	220a      	movs	r2, #10
   8349c:	2300      	movs	r3, #0
   8349e:	f001 fe85 	bl	851ac <__aeabi_uldivmod>
   834a2:	3230      	adds	r2, #48	; 0x30
   834a4:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   834a8:	4630      	mov	r0, r6
   834aa:	4639      	mov	r1, r7
   834ac:	2300      	movs	r3, #0
   834ae:	220a      	movs	r2, #10
   834b0:	f001 fe7c 	bl	851ac <__aeabi_uldivmod>
   834b4:	4606      	mov	r6, r0
   834b6:	460f      	mov	r7, r1
   834b8:	ea56 0307 	orrs.w	r3, r6, r7
   834bc:	d1eb      	bne.n	83496 <_vfiprintf_r+0x9de>
   834be:	e56e      	b.n	82f9e <_vfiprintf_r+0x4e6>
   834c0:	9405      	str	r4, [sp, #20]
   834c2:	46d3      	mov	fp, sl
   834c4:	e450      	b.n	82d68 <_vfiprintf_r+0x2b0>
   834c6:	aa0f      	add	r2, sp, #60	; 0x3c
   834c8:	9904      	ldr	r1, [sp, #16]
   834ca:	9806      	ldr	r0, [sp, #24]
   834cc:	f7ff fab4 	bl	82a38 <__sprint_r.part.0>
   834d0:	2800      	cmp	r0, #0
   834d2:	d1a8      	bne.n	83426 <_vfiprintf_r+0x96e>
   834d4:	46d1      	mov	r9, sl
   834d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   834d8:	e75e      	b.n	83398 <_vfiprintf_r+0x8e0>
   834da:	aa0f      	add	r2, sp, #60	; 0x3c
   834dc:	9904      	ldr	r1, [sp, #16]
   834de:	9806      	ldr	r0, [sp, #24]
   834e0:	f7ff faaa 	bl	82a38 <__sprint_r.part.0>
   834e4:	2800      	cmp	r0, #0
   834e6:	d19e      	bne.n	83426 <_vfiprintf_r+0x96e>
   834e8:	46d1      	mov	r9, sl
   834ea:	f7ff bbbb 	b.w	82c64 <_vfiprintf_r+0x1ac>
   834ee:	bf00      	nop
   834f0:	0008557c 	.word	0x0008557c
   834f4:	0008556c 	.word	0x0008556c
   834f8:	3104      	adds	r1, #4
   834fa:	6816      	ldr	r6, [r2, #0]
   834fc:	2700      	movs	r7, #0
   834fe:	2201      	movs	r2, #1
   83500:	9107      	str	r1, [sp, #28]
   83502:	e412      	b.n	82d2a <_vfiprintf_r+0x272>
   83504:	9807      	ldr	r0, [sp, #28]
   83506:	2700      	movs	r7, #0
   83508:	4601      	mov	r1, r0
   8350a:	3104      	adds	r1, #4
   8350c:	6806      	ldr	r6, [r0, #0]
   8350e:	9107      	str	r1, [sp, #28]
   83510:	e40b      	b.n	82d2a <_vfiprintf_r+0x272>
   83512:	680e      	ldr	r6, [r1, #0]
   83514:	3104      	adds	r1, #4
   83516:	9107      	str	r1, [sp, #28]
   83518:	2700      	movs	r7, #0
   8351a:	e592      	b.n	83042 <_vfiprintf_r+0x58a>
   8351c:	6816      	ldr	r6, [r2, #0]
   8351e:	3204      	adds	r2, #4
   83520:	17f7      	asrs	r7, r6, #31
   83522:	9207      	str	r2, [sp, #28]
   83524:	4630      	mov	r0, r6
   83526:	4639      	mov	r1, r7
   83528:	e512      	b.n	82f50 <_vfiprintf_r+0x498>
   8352a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8352e:	f000 fe75 	bl	8421c <__retarget_lock_release_recursive>
   83532:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   83536:	e71b      	b.n	83370 <_vfiprintf_r+0x8b8>
   83538:	9b02      	ldr	r3, [sp, #8]
   8353a:	9302      	str	r3, [sp, #8]
   8353c:	2301      	movs	r3, #1
   8353e:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   83542:	3630      	adds	r6, #48	; 0x30
   83544:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   83548:	9305      	str	r3, [sp, #20]
   8354a:	e40d      	b.n	82d68 <_vfiprintf_r+0x2b0>
   8354c:	aa0f      	add	r2, sp, #60	; 0x3c
   8354e:	9904      	ldr	r1, [sp, #16]
   83550:	9806      	ldr	r0, [sp, #24]
   83552:	f7ff fa71 	bl	82a38 <__sprint_r.part.0>
   83556:	2800      	cmp	r0, #0
   83558:	f47f af65 	bne.w	83426 <_vfiprintf_r+0x96e>
   8355c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8355e:	46d1      	mov	r9, sl
   83560:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83562:	1c48      	adds	r0, r1, #1
   83564:	e457      	b.n	82e16 <_vfiprintf_r+0x35e>
   83566:	aa0f      	add	r2, sp, #60	; 0x3c
   83568:	9904      	ldr	r1, [sp, #16]
   8356a:	9806      	ldr	r0, [sp, #24]
   8356c:	f7ff fa64 	bl	82a38 <__sprint_r.part.0>
   83570:	2800      	cmp	r0, #0
   83572:	f47f af58 	bne.w	83426 <_vfiprintf_r+0x96e>
   83576:	9910      	ldr	r1, [sp, #64]	; 0x40
   83578:	46d1      	mov	r9, sl
   8357a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8357c:	1c48      	adds	r0, r1, #1
   8357e:	e644      	b.n	8320a <_vfiprintf_r+0x752>
   83580:	2a00      	cmp	r2, #0
   83582:	f040 8087 	bne.w	83694 <_vfiprintf_r+0xbdc>
   83586:	2001      	movs	r0, #1
   83588:	4611      	mov	r1, r2
   8358a:	46d1      	mov	r9, sl
   8358c:	e641      	b.n	83212 <_vfiprintf_r+0x75a>
   8358e:	aa0f      	add	r2, sp, #60	; 0x3c
   83590:	9904      	ldr	r1, [sp, #16]
   83592:	9806      	ldr	r0, [sp, #24]
   83594:	f7ff fa50 	bl	82a38 <__sprint_r.part.0>
   83598:	2800      	cmp	r0, #0
   8359a:	f47f af44 	bne.w	83426 <_vfiprintf_r+0x96e>
   8359e:	9810      	ldr	r0, [sp, #64]	; 0x40
   835a0:	46d1      	mov	r9, sl
   835a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   835a4:	3001      	adds	r0, #1
   835a6:	e668      	b.n	8327a <_vfiprintf_r+0x7c2>
   835a8:	46cb      	mov	fp, r9
   835aa:	e6d7      	b.n	8335c <_vfiprintf_r+0x8a4>
   835ac:	9d07      	ldr	r5, [sp, #28]
   835ae:	3507      	adds	r5, #7
   835b0:	f025 0507 	bic.w	r5, r5, #7
   835b4:	f105 0208 	add.w	r2, r5, #8
   835b8:	e9d5 0100 	ldrd	r0, r1, [r5]
   835bc:	9207      	str	r2, [sp, #28]
   835be:	4606      	mov	r6, r0
   835c0:	460f      	mov	r7, r1
   835c2:	e4c5      	b.n	82f50 <_vfiprintf_r+0x498>
   835c4:	9d07      	ldr	r5, [sp, #28]
   835c6:	3507      	adds	r5, #7
   835c8:	f025 0207 	bic.w	r2, r5, #7
   835cc:	f102 0108 	add.w	r1, r2, #8
   835d0:	e9d2 6700 	ldrd	r6, r7, [r2]
   835d4:	9107      	str	r1, [sp, #28]
   835d6:	2201      	movs	r2, #1
   835d8:	f7ff bba7 	b.w	82d2a <_vfiprintf_r+0x272>
   835dc:	9d07      	ldr	r5, [sp, #28]
   835de:	3507      	adds	r5, #7
   835e0:	f025 0207 	bic.w	r2, r5, #7
   835e4:	f102 0108 	add.w	r1, r2, #8
   835e8:	e9d2 6700 	ldrd	r6, r7, [r2]
   835ec:	9107      	str	r1, [sp, #28]
   835ee:	2200      	movs	r2, #0
   835f0:	f7ff bb9b 	b.w	82d2a <_vfiprintf_r+0x272>
   835f4:	9d07      	ldr	r5, [sp, #28]
   835f6:	3507      	adds	r5, #7
   835f8:	f025 0107 	bic.w	r1, r5, #7
   835fc:	f101 0008 	add.w	r0, r1, #8
   83600:	9007      	str	r0, [sp, #28]
   83602:	e9d1 6700 	ldrd	r6, r7, [r1]
   83606:	e51c      	b.n	83042 <_vfiprintf_r+0x58a>
   83608:	46d3      	mov	fp, sl
   8360a:	f7ff bbad 	b.w	82d68 <_vfiprintf_r+0x2b0>
   8360e:	252d      	movs	r5, #45	; 0x2d
   83610:	4276      	negs	r6, r6
   83612:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83616:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8361a:	2201      	movs	r2, #1
   8361c:	f7ff bb8a 	b.w	82d34 <_vfiprintf_r+0x27c>
   83620:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83622:	b9b3      	cbnz	r3, 83652 <_vfiprintf_r+0xb9a>
   83624:	4611      	mov	r1, r2
   83626:	2001      	movs	r0, #1
   83628:	46d1      	mov	r9, sl
   8362a:	e5f2      	b.n	83212 <_vfiprintf_r+0x75a>
   8362c:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83630:	f000 fdf4 	bl	8421c <__retarget_lock_release_recursive>
   83634:	f04f 33ff 	mov.w	r3, #4294967295
   83638:	9303      	str	r3, [sp, #12]
   8363a:	f7ff bb4c 	b.w	82cd6 <_vfiprintf_r+0x21e>
   8363e:	aa0f      	add	r2, sp, #60	; 0x3c
   83640:	9904      	ldr	r1, [sp, #16]
   83642:	9806      	ldr	r0, [sp, #24]
   83644:	f7ff f9f8 	bl	82a38 <__sprint_r.part.0>
   83648:	2800      	cmp	r0, #0
   8364a:	f47f aeec 	bne.w	83426 <_vfiprintf_r+0x96e>
   8364e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83650:	e6aa      	b.n	833a8 <_vfiprintf_r+0x8f0>
   83652:	2202      	movs	r2, #2
   83654:	ab0e      	add	r3, sp, #56	; 0x38
   83656:	921d      	str	r2, [sp, #116]	; 0x74
   83658:	931c      	str	r3, [sp, #112]	; 0x70
   8365a:	2001      	movs	r0, #1
   8365c:	46d1      	mov	r9, sl
   8365e:	e5d0      	b.n	83202 <_vfiprintf_r+0x74a>
   83660:	4d34      	ldr	r5, [pc, #208]	; (83734 <_vfiprintf_r+0xc7c>)
   83662:	e5fd      	b.n	83260 <_vfiprintf_r+0x7a8>
   83664:	9a07      	ldr	r2, [sp, #28]
   83666:	4613      	mov	r3, r2
   83668:	3304      	adds	r3, #4
   8366a:	9307      	str	r3, [sp, #28]
   8366c:	9b03      	ldr	r3, [sp, #12]
   8366e:	6811      	ldr	r1, [r2, #0]
   83670:	17dd      	asrs	r5, r3, #31
   83672:	461a      	mov	r2, r3
   83674:	462b      	mov	r3, r5
   83676:	e9c1 2300 	strd	r2, r3, [r1]
   8367a:	f7ff ba5a 	b.w	82b32 <_vfiprintf_r+0x7a>
   8367e:	4658      	mov	r0, fp
   83680:	9507      	str	r5, [sp, #28]
   83682:	9302      	str	r3, [sp, #8]
   83684:	f7ff f978 	bl	82978 <strlen>
   83688:	2400      	movs	r4, #0
   8368a:	9005      	str	r0, [sp, #20]
   8368c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83690:	f7ff bb6a 	b.w	82d68 <_vfiprintf_r+0x2b0>
   83694:	aa0f      	add	r2, sp, #60	; 0x3c
   83696:	9904      	ldr	r1, [sp, #16]
   83698:	9806      	ldr	r0, [sp, #24]
   8369a:	f7ff f9cd 	bl	82a38 <__sprint_r.part.0>
   8369e:	2800      	cmp	r0, #0
   836a0:	f47f aec1 	bne.w	83426 <_vfiprintf_r+0x96e>
   836a4:	9910      	ldr	r1, [sp, #64]	; 0x40
   836a6:	46d1      	mov	r9, sl
   836a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836aa:	1c48      	adds	r0, r1, #1
   836ac:	e5b1      	b.n	83212 <_vfiprintf_r+0x75a>
   836ae:	9910      	ldr	r1, [sp, #64]	; 0x40
   836b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   836b2:	3101      	adds	r1, #1
   836b4:	4e20      	ldr	r6, [pc, #128]	; (83738 <_vfiprintf_r+0xc80>)
   836b6:	f7ff bb9c 	b.w	82df2 <_vfiprintf_r+0x33a>
   836ba:	2c06      	cmp	r4, #6
   836bc:	bf28      	it	cs
   836be:	2406      	movcs	r4, #6
   836c0:	9507      	str	r5, [sp, #28]
   836c2:	9405      	str	r4, [sp, #20]
   836c4:	9401      	str	r4, [sp, #4]
   836c6:	f8df b074 	ldr.w	fp, [pc, #116]	; 8373c <_vfiprintf_r+0xc84>
   836ca:	e4e3      	b.n	83094 <_vfiprintf_r+0x5dc>
   836cc:	9810      	ldr	r0, [sp, #64]	; 0x40
   836ce:	4e1a      	ldr	r6, [pc, #104]	; (83738 <_vfiprintf_r+0xc80>)
   836d0:	3001      	adds	r0, #1
   836d2:	e60e      	b.n	832f2 <_vfiprintf_r+0x83a>
   836d4:	4686      	mov	lr, r0
   836d6:	4d17      	ldr	r5, [pc, #92]	; (83734 <_vfiprintf_r+0xc7c>)
   836d8:	f7ff bbe2 	b.w	82ea0 <_vfiprintf_r+0x3e8>
   836dc:	9405      	str	r4, [sp, #20]
   836de:	9507      	str	r5, [sp, #28]
   836e0:	9302      	str	r3, [sp, #8]
   836e2:	4604      	mov	r4, r0
   836e4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   836e8:	f7ff bb3e 	b.w	82d68 <_vfiprintf_r+0x2b0>
   836ec:	9806      	ldr	r0, [sp, #24]
   836ee:	aa0f      	add	r2, sp, #60	; 0x3c
   836f0:	4659      	mov	r1, fp
   836f2:	f7ff f9a1 	bl	82a38 <__sprint_r.part.0>
   836f6:	2800      	cmp	r0, #0
   836f8:	f43f ae2e 	beq.w	83358 <_vfiprintf_r+0x8a0>
   836fc:	e62e      	b.n	8335c <_vfiprintf_r+0x8a4>
   836fe:	9907      	ldr	r1, [sp, #28]
   83700:	f898 2001 	ldrb.w	r2, [r8, #1]
   83704:	680c      	ldr	r4, [r1, #0]
   83706:	3104      	adds	r1, #4
   83708:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   8370c:	46b8      	mov	r8, r7
   8370e:	9107      	str	r1, [sp, #28]
   83710:	f7ff ba44 	b.w	82b9c <_vfiprintf_r+0xe4>
   83714:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83718:	e4a7      	b.n	8306a <_vfiprintf_r+0x5b2>
   8371a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8371e:	e521      	b.n	83164 <_vfiprintf_r+0x6ac>
   83720:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83724:	e47c      	b.n	83020 <_vfiprintf_r+0x568>
   83726:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8372a:	e43f      	b.n	82fac <_vfiprintf_r+0x4f4>
   8372c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83730:	f7ff bbfa 	b.w	82f28 <_vfiprintf_r+0x470>
   83734:	0008557c 	.word	0x0008557c
   83738:	0008556c 	.word	0x0008556c
   8373c:	00085564 	.word	0x00085564

00083740 <__sbprintf>:
   83740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83744:	460c      	mov	r4, r1
   83746:	f04f 0e00 	mov.w	lr, #0
   8374a:	f44f 6580 	mov.w	r5, #1024	; 0x400
   8374e:	4606      	mov	r6, r0
   83750:	4617      	mov	r7, r2
   83752:	4698      	mov	r8, r3
   83754:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83756:	89e3      	ldrh	r3, [r4, #14]
   83758:	8989      	ldrh	r1, [r1, #12]
   8375a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   8375e:	f021 0102 	bic.w	r1, r1, #2
   83762:	9219      	str	r2, [sp, #100]	; 0x64
   83764:	f8ad 300e 	strh.w	r3, [sp, #14]
   83768:	69e2      	ldr	r2, [r4, #28]
   8376a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8376c:	f8ad 100c 	strh.w	r1, [sp, #12]
   83770:	a816      	add	r0, sp, #88	; 0x58
   83772:	a91a      	add	r1, sp, #104	; 0x68
   83774:	f8cd e018 	str.w	lr, [sp, #24]
   83778:	9207      	str	r2, [sp, #28]
   8377a:	9309      	str	r3, [sp, #36]	; 0x24
   8377c:	9100      	str	r1, [sp, #0]
   8377e:	9104      	str	r1, [sp, #16]
   83780:	9502      	str	r5, [sp, #8]
   83782:	9505      	str	r5, [sp, #20]
   83784:	f000 fd44 	bl	84210 <__retarget_lock_init_recursive>
   83788:	4643      	mov	r3, r8
   8378a:	463a      	mov	r2, r7
   8378c:	4669      	mov	r1, sp
   8378e:	4630      	mov	r0, r6
   83790:	f7ff f992 	bl	82ab8 <_vfiprintf_r>
   83794:	1e05      	subs	r5, r0, #0
   83796:	db07      	blt.n	837a8 <__sbprintf+0x68>
   83798:	4630      	mov	r0, r6
   8379a:	4669      	mov	r1, sp
   8379c:	f000 f924 	bl	839e8 <_fflush_r>
   837a0:	2800      	cmp	r0, #0
   837a2:	bf18      	it	ne
   837a4:	f04f 35ff 	movne.w	r5, #4294967295
   837a8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   837ac:	065b      	lsls	r3, r3, #25
   837ae:	d503      	bpl.n	837b8 <__sbprintf+0x78>
   837b0:	89a3      	ldrh	r3, [r4, #12]
   837b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   837b6:	81a3      	strh	r3, [r4, #12]
   837b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   837ba:	f000 fd2b 	bl	84214 <__retarget_lock_close_recursive>
   837be:	4628      	mov	r0, r5
   837c0:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   837c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000837c8 <__swsetup_r>:
   837c8:	b538      	push	{r3, r4, r5, lr}
   837ca:	4b30      	ldr	r3, [pc, #192]	; (8388c <__swsetup_r+0xc4>)
   837cc:	4605      	mov	r5, r0
   837ce:	6818      	ldr	r0, [r3, #0]
   837d0:	460c      	mov	r4, r1
   837d2:	b110      	cbz	r0, 837da <__swsetup_r+0x12>
   837d4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   837d6:	2b00      	cmp	r3, #0
   837d8:	d038      	beq.n	8384c <__swsetup_r+0x84>
   837da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   837de:	b293      	uxth	r3, r2
   837e0:	0718      	lsls	r0, r3, #28
   837e2:	d50c      	bpl.n	837fe <__swsetup_r+0x36>
   837e4:	6920      	ldr	r0, [r4, #16]
   837e6:	b1a8      	cbz	r0, 83814 <__swsetup_r+0x4c>
   837e8:	f013 0201 	ands.w	r2, r3, #1
   837ec:	d01e      	beq.n	8382c <__swsetup_r+0x64>
   837ee:	2200      	movs	r2, #0
   837f0:	6963      	ldr	r3, [r4, #20]
   837f2:	60a2      	str	r2, [r4, #8]
   837f4:	425b      	negs	r3, r3
   837f6:	61a3      	str	r3, [r4, #24]
   837f8:	b1f0      	cbz	r0, 83838 <__swsetup_r+0x70>
   837fa:	2000      	movs	r0, #0
   837fc:	bd38      	pop	{r3, r4, r5, pc}
   837fe:	06d9      	lsls	r1, r3, #27
   83800:	d53b      	bpl.n	8387a <__swsetup_r+0xb2>
   83802:	0758      	lsls	r0, r3, #29
   83804:	d425      	bmi.n	83852 <__swsetup_r+0x8a>
   83806:	6920      	ldr	r0, [r4, #16]
   83808:	f042 0308 	orr.w	r3, r2, #8
   8380c:	81a3      	strh	r3, [r4, #12]
   8380e:	b29b      	uxth	r3, r3
   83810:	2800      	cmp	r0, #0
   83812:	d1e9      	bne.n	837e8 <__swsetup_r+0x20>
   83814:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83818:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8381c:	d0e4      	beq.n	837e8 <__swsetup_r+0x20>
   8381e:	4628      	mov	r0, r5
   83820:	4621      	mov	r1, r4
   83822:	f000 fd2b 	bl	8427c <__smakebuf_r>
   83826:	89a3      	ldrh	r3, [r4, #12]
   83828:	6920      	ldr	r0, [r4, #16]
   8382a:	e7dd      	b.n	837e8 <__swsetup_r+0x20>
   8382c:	0799      	lsls	r1, r3, #30
   8382e:	bf58      	it	pl
   83830:	6962      	ldrpl	r2, [r4, #20]
   83832:	60a2      	str	r2, [r4, #8]
   83834:	2800      	cmp	r0, #0
   83836:	d1e0      	bne.n	837fa <__swsetup_r+0x32>
   83838:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8383c:	061a      	lsls	r2, r3, #24
   8383e:	d5dd      	bpl.n	837fc <__swsetup_r+0x34>
   83840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83844:	81a3      	strh	r3, [r4, #12]
   83846:	f04f 30ff 	mov.w	r0, #4294967295
   8384a:	bd38      	pop	{r3, r4, r5, pc}
   8384c:	f000 f924 	bl	83a98 <__sinit>
   83850:	e7c3      	b.n	837da <__swsetup_r+0x12>
   83852:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83854:	b151      	cbz	r1, 8386c <__swsetup_r+0xa4>
   83856:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8385a:	4299      	cmp	r1, r3
   8385c:	d004      	beq.n	83868 <__swsetup_r+0xa0>
   8385e:	4628      	mov	r0, r5
   83860:	f000 fa40 	bl	83ce4 <_free_r>
   83864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83868:	2300      	movs	r3, #0
   8386a:	6323      	str	r3, [r4, #48]	; 0x30
   8386c:	2300      	movs	r3, #0
   8386e:	6920      	ldr	r0, [r4, #16]
   83870:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83874:	e884 0009 	stmia.w	r4, {r0, r3}
   83878:	e7c6      	b.n	83808 <__swsetup_r+0x40>
   8387a:	2309      	movs	r3, #9
   8387c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83880:	602b      	str	r3, [r5, #0]
   83882:	f04f 30ff 	mov.w	r0, #4294967295
   83886:	81a2      	strh	r2, [r4, #12]
   83888:	bd38      	pop	{r3, r4, r5, pc}
   8388a:	bf00      	nop
   8388c:	2007016c 	.word	0x2007016c

00083890 <register_fini>:
   83890:	4b02      	ldr	r3, [pc, #8]	; (8389c <register_fini+0xc>)
   83892:	b113      	cbz	r3, 8389a <register_fini+0xa>
   83894:	4802      	ldr	r0, [pc, #8]	; (838a0 <register_fini+0x10>)
   83896:	f000 b805 	b.w	838a4 <atexit>
   8389a:	4770      	bx	lr
   8389c:	00000000 	.word	0x00000000
   838a0:	00083b11 	.word	0x00083b11

000838a4 <atexit>:
   838a4:	2300      	movs	r3, #0
   838a6:	4601      	mov	r1, r0
   838a8:	461a      	mov	r2, r3
   838aa:	4618      	mov	r0, r3
   838ac:	f001 bb56 	b.w	84f5c <__register_exitproc>

000838b0 <__sflush_r>:
   838b0:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   838b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   838b8:	b29a      	uxth	r2, r3
   838ba:	460d      	mov	r5, r1
   838bc:	0711      	lsls	r1, r2, #28
   838be:	4680      	mov	r8, r0
   838c0:	d43a      	bmi.n	83938 <__sflush_r+0x88>
   838c2:	686a      	ldr	r2, [r5, #4]
   838c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   838c8:	2a00      	cmp	r2, #0
   838ca:	81ab      	strh	r3, [r5, #12]
   838cc:	dd70      	ble.n	839b0 <__sflush_r+0x100>
   838ce:	6aac      	ldr	r4, [r5, #40]	; 0x28
   838d0:	2c00      	cmp	r4, #0
   838d2:	d04a      	beq.n	8396a <__sflush_r+0xba>
   838d4:	2200      	movs	r2, #0
   838d6:	b29b      	uxth	r3, r3
   838d8:	f8d8 6000 	ldr.w	r6, [r8]
   838dc:	f8c8 2000 	str.w	r2, [r8]
   838e0:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   838e4:	d068      	beq.n	839b8 <__sflush_r+0x108>
   838e6:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   838e8:	075f      	lsls	r7, r3, #29
   838ea:	d505      	bpl.n	838f8 <__sflush_r+0x48>
   838ec:	6869      	ldr	r1, [r5, #4]
   838ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   838f0:	1a52      	subs	r2, r2, r1
   838f2:	b10b      	cbz	r3, 838f8 <__sflush_r+0x48>
   838f4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   838f6:	1ad2      	subs	r2, r2, r3
   838f8:	2300      	movs	r3, #0
   838fa:	69e9      	ldr	r1, [r5, #28]
   838fc:	4640      	mov	r0, r8
   838fe:	47a0      	blx	r4
   83900:	1c44      	adds	r4, r0, #1
   83902:	d03d      	beq.n	83980 <__sflush_r+0xd0>
   83904:	2100      	movs	r1, #0
   83906:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8390a:	692a      	ldr	r2, [r5, #16]
   8390c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83910:	81ab      	strh	r3, [r5, #12]
   83912:	04db      	lsls	r3, r3, #19
   83914:	6069      	str	r1, [r5, #4]
   83916:	602a      	str	r2, [r5, #0]
   83918:	d448      	bmi.n	839ac <__sflush_r+0xfc>
   8391a:	6b29      	ldr	r1, [r5, #48]	; 0x30
   8391c:	f8c8 6000 	str.w	r6, [r8]
   83920:	b319      	cbz	r1, 8396a <__sflush_r+0xba>
   83922:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83926:	4299      	cmp	r1, r3
   83928:	d002      	beq.n	83930 <__sflush_r+0x80>
   8392a:	4640      	mov	r0, r8
   8392c:	f000 f9da 	bl	83ce4 <_free_r>
   83930:	2000      	movs	r0, #0
   83932:	6328      	str	r0, [r5, #48]	; 0x30
   83934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83938:	692e      	ldr	r6, [r5, #16]
   8393a:	b1b6      	cbz	r6, 8396a <__sflush_r+0xba>
   8393c:	0791      	lsls	r1, r2, #30
   8393e:	bf18      	it	ne
   83940:	2300      	movne	r3, #0
   83942:	682c      	ldr	r4, [r5, #0]
   83944:	bf08      	it	eq
   83946:	696b      	ldreq	r3, [r5, #20]
   83948:	602e      	str	r6, [r5, #0]
   8394a:	1ba4      	subs	r4, r4, r6
   8394c:	60ab      	str	r3, [r5, #8]
   8394e:	e00a      	b.n	83966 <__sflush_r+0xb6>
   83950:	4623      	mov	r3, r4
   83952:	4632      	mov	r2, r6
   83954:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83956:	69e9      	ldr	r1, [r5, #28]
   83958:	4640      	mov	r0, r8
   8395a:	47b8      	blx	r7
   8395c:	2800      	cmp	r0, #0
   8395e:	eba4 0400 	sub.w	r4, r4, r0
   83962:	4406      	add	r6, r0
   83964:	dd04      	ble.n	83970 <__sflush_r+0xc0>
   83966:	2c00      	cmp	r4, #0
   83968:	dcf2      	bgt.n	83950 <__sflush_r+0xa0>
   8396a:	2000      	movs	r0, #0
   8396c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83970:	89ab      	ldrh	r3, [r5, #12]
   83972:	f04f 30ff 	mov.w	r0, #4294967295
   83976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8397a:	81ab      	strh	r3, [r5, #12]
   8397c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83980:	f8d8 4000 	ldr.w	r4, [r8]
   83984:	2c1d      	cmp	r4, #29
   83986:	d8f3      	bhi.n	83970 <__sflush_r+0xc0>
   83988:	4b16      	ldr	r3, [pc, #88]	; (839e4 <__sflush_r+0x134>)
   8398a:	40e3      	lsrs	r3, r4
   8398c:	43db      	mvns	r3, r3
   8398e:	f013 0301 	ands.w	r3, r3, #1
   83992:	d1ed      	bne.n	83970 <__sflush_r+0xc0>
   83994:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83998:	6929      	ldr	r1, [r5, #16]
   8399a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8399e:	81aa      	strh	r2, [r5, #12]
   839a0:	04d2      	lsls	r2, r2, #19
   839a2:	606b      	str	r3, [r5, #4]
   839a4:	6029      	str	r1, [r5, #0]
   839a6:	d5b8      	bpl.n	8391a <__sflush_r+0x6a>
   839a8:	2c00      	cmp	r4, #0
   839aa:	d1b6      	bne.n	8391a <__sflush_r+0x6a>
   839ac:	6528      	str	r0, [r5, #80]	; 0x50
   839ae:	e7b4      	b.n	8391a <__sflush_r+0x6a>
   839b0:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   839b2:	2a00      	cmp	r2, #0
   839b4:	dc8b      	bgt.n	838ce <__sflush_r+0x1e>
   839b6:	e7d8      	b.n	8396a <__sflush_r+0xba>
   839b8:	2301      	movs	r3, #1
   839ba:	69e9      	ldr	r1, [r5, #28]
   839bc:	4640      	mov	r0, r8
   839be:	47a0      	blx	r4
   839c0:	1c43      	adds	r3, r0, #1
   839c2:	4602      	mov	r2, r0
   839c4:	d002      	beq.n	839cc <__sflush_r+0x11c>
   839c6:	89ab      	ldrh	r3, [r5, #12]
   839c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
   839ca:	e78d      	b.n	838e8 <__sflush_r+0x38>
   839cc:	f8d8 3000 	ldr.w	r3, [r8]
   839d0:	2b00      	cmp	r3, #0
   839d2:	d0f8      	beq.n	839c6 <__sflush_r+0x116>
   839d4:	2b1d      	cmp	r3, #29
   839d6:	d001      	beq.n	839dc <__sflush_r+0x12c>
   839d8:	2b16      	cmp	r3, #22
   839da:	d1c9      	bne.n	83970 <__sflush_r+0xc0>
   839dc:	f8c8 6000 	str.w	r6, [r8]
   839e0:	e7c3      	b.n	8396a <__sflush_r+0xba>
   839e2:	bf00      	nop
   839e4:	20400001 	.word	0x20400001

000839e8 <_fflush_r>:
   839e8:	b538      	push	{r3, r4, r5, lr}
   839ea:	460d      	mov	r5, r1
   839ec:	4604      	mov	r4, r0
   839ee:	b108      	cbz	r0, 839f4 <_fflush_r+0xc>
   839f0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   839f2:	b1bb      	cbz	r3, 83a24 <_fflush_r+0x3c>
   839f4:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   839f8:	b188      	cbz	r0, 83a1e <_fflush_r+0x36>
   839fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   839fc:	07db      	lsls	r3, r3, #31
   839fe:	d401      	bmi.n	83a04 <_fflush_r+0x1c>
   83a00:	0581      	lsls	r1, r0, #22
   83a02:	d517      	bpl.n	83a34 <_fflush_r+0x4c>
   83a04:	4620      	mov	r0, r4
   83a06:	4629      	mov	r1, r5
   83a08:	f7ff ff52 	bl	838b0 <__sflush_r>
   83a0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83a0e:	4604      	mov	r4, r0
   83a10:	07da      	lsls	r2, r3, #31
   83a12:	d402      	bmi.n	83a1a <_fflush_r+0x32>
   83a14:	89ab      	ldrh	r3, [r5, #12]
   83a16:	059b      	lsls	r3, r3, #22
   83a18:	d507      	bpl.n	83a2a <_fflush_r+0x42>
   83a1a:	4620      	mov	r0, r4
   83a1c:	bd38      	pop	{r3, r4, r5, pc}
   83a1e:	4604      	mov	r4, r0
   83a20:	4620      	mov	r0, r4
   83a22:	bd38      	pop	{r3, r4, r5, pc}
   83a24:	f000 f838 	bl	83a98 <__sinit>
   83a28:	e7e4      	b.n	839f4 <_fflush_r+0xc>
   83a2a:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a2c:	f000 fbf6 	bl	8421c <__retarget_lock_release_recursive>
   83a30:	4620      	mov	r0, r4
   83a32:	bd38      	pop	{r3, r4, r5, pc}
   83a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83a36:	f000 fbef 	bl	84218 <__retarget_lock_acquire_recursive>
   83a3a:	e7e3      	b.n	83a04 <_fflush_r+0x1c>

00083a3c <_cleanup_r>:
   83a3c:	4901      	ldr	r1, [pc, #4]	; (83a44 <_cleanup_r+0x8>)
   83a3e:	f000 bbb1 	b.w	841a4 <_fwalk_reent>
   83a42:	bf00      	nop
   83a44:	00085045 	.word	0x00085045

00083a48 <std.isra.0>:
   83a48:	2300      	movs	r3, #0
   83a4a:	b510      	push	{r4, lr}
   83a4c:	4604      	mov	r4, r0
   83a4e:	8181      	strh	r1, [r0, #12]
   83a50:	81c2      	strh	r2, [r0, #14]
   83a52:	6003      	str	r3, [r0, #0]
   83a54:	6043      	str	r3, [r0, #4]
   83a56:	6083      	str	r3, [r0, #8]
   83a58:	6643      	str	r3, [r0, #100]	; 0x64
   83a5a:	6103      	str	r3, [r0, #16]
   83a5c:	6143      	str	r3, [r0, #20]
   83a5e:	6183      	str	r3, [r0, #24]
   83a60:	4619      	mov	r1, r3
   83a62:	2208      	movs	r2, #8
   83a64:	305c      	adds	r0, #92	; 0x5c
   83a66:	f7fe fe69 	bl	8273c <memset>
   83a6a:	4807      	ldr	r0, [pc, #28]	; (83a88 <std.isra.0+0x40>)
   83a6c:	4907      	ldr	r1, [pc, #28]	; (83a8c <std.isra.0+0x44>)
   83a6e:	4a08      	ldr	r2, [pc, #32]	; (83a90 <std.isra.0+0x48>)
   83a70:	4b08      	ldr	r3, [pc, #32]	; (83a94 <std.isra.0+0x4c>)
   83a72:	6220      	str	r0, [r4, #32]
   83a74:	61e4      	str	r4, [r4, #28]
   83a76:	6261      	str	r1, [r4, #36]	; 0x24
   83a78:	62a2      	str	r2, [r4, #40]	; 0x28
   83a7a:	62e3      	str	r3, [r4, #44]	; 0x2c
   83a7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83a84:	f000 bbc4 	b.w	84210 <__retarget_lock_init_recursive>
   83a88:	00084d8d 	.word	0x00084d8d
   83a8c:	00084db1 	.word	0x00084db1
   83a90:	00084ded 	.word	0x00084ded
   83a94:	00084e0d 	.word	0x00084e0d

00083a98 <__sinit>:
   83a98:	b510      	push	{r4, lr}
   83a9a:	4604      	mov	r4, r0
   83a9c:	4814      	ldr	r0, [pc, #80]	; (83af0 <__sinit+0x58>)
   83a9e:	f000 fbbb 	bl	84218 <__retarget_lock_acquire_recursive>
   83aa2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83aa4:	b9fa      	cbnz	r2, 83ae6 <__sinit+0x4e>
   83aa6:	2003      	movs	r0, #3
   83aa8:	4912      	ldr	r1, [pc, #72]	; (83af4 <__sinit+0x5c>)
   83aaa:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83aae:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83ab2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83ab6:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83aba:	63e1      	str	r1, [r4, #60]	; 0x3c
   83abc:	6860      	ldr	r0, [r4, #4]
   83abe:	2104      	movs	r1, #4
   83ac0:	f7ff ffc2 	bl	83a48 <std.isra.0>
   83ac4:	68a0      	ldr	r0, [r4, #8]
   83ac6:	2201      	movs	r2, #1
   83ac8:	2109      	movs	r1, #9
   83aca:	f7ff ffbd 	bl	83a48 <std.isra.0>
   83ace:	68e0      	ldr	r0, [r4, #12]
   83ad0:	2202      	movs	r2, #2
   83ad2:	2112      	movs	r1, #18
   83ad4:	f7ff ffb8 	bl	83a48 <std.isra.0>
   83ad8:	2301      	movs	r3, #1
   83ada:	4805      	ldr	r0, [pc, #20]	; (83af0 <__sinit+0x58>)
   83adc:	63a3      	str	r3, [r4, #56]	; 0x38
   83ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83ae2:	f000 bb9b 	b.w	8421c <__retarget_lock_release_recursive>
   83ae6:	4802      	ldr	r0, [pc, #8]	; (83af0 <__sinit+0x58>)
   83ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83aec:	f000 bb96 	b.w	8421c <__retarget_lock_release_recursive>
   83af0:	2007ae00 	.word	0x2007ae00
   83af4:	00083a3d 	.word	0x00083a3d

00083af8 <__sfp_lock_acquire>:
   83af8:	4801      	ldr	r0, [pc, #4]	; (83b00 <__sfp_lock_acquire+0x8>)
   83afa:	f000 bb8d 	b.w	84218 <__retarget_lock_acquire_recursive>
   83afe:	bf00      	nop
   83b00:	2007ae14 	.word	0x2007ae14

00083b04 <__sfp_lock_release>:
   83b04:	4801      	ldr	r0, [pc, #4]	; (83b0c <__sfp_lock_release+0x8>)
   83b06:	f000 bb89 	b.w	8421c <__retarget_lock_release_recursive>
   83b0a:	bf00      	nop
   83b0c:	2007ae14 	.word	0x2007ae14

00083b10 <__libc_fini_array>:
   83b10:	b538      	push	{r3, r4, r5, lr}
   83b12:	4c0a      	ldr	r4, [pc, #40]	; (83b3c <__libc_fini_array+0x2c>)
   83b14:	4d0a      	ldr	r5, [pc, #40]	; (83b40 <__libc_fini_array+0x30>)
   83b16:	1b64      	subs	r4, r4, r5
   83b18:	10a4      	asrs	r4, r4, #2
   83b1a:	d00a      	beq.n	83b32 <__libc_fini_array+0x22>
   83b1c:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83b20:	3b01      	subs	r3, #1
   83b22:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83b26:	3c01      	subs	r4, #1
   83b28:	f855 3904 	ldr.w	r3, [r5], #-4
   83b2c:	4798      	blx	r3
   83b2e:	2c00      	cmp	r4, #0
   83b30:	d1f9      	bne.n	83b26 <__libc_fini_array+0x16>
   83b32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83b36:	f001 bdbd 	b.w	856b4 <_fini>
   83b3a:	bf00      	nop
   83b3c:	000856c4 	.word	0x000856c4
   83b40:	000856c0 	.word	0x000856c0

00083b44 <__fputwc>:
   83b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83b48:	b083      	sub	sp, #12
   83b4a:	4607      	mov	r7, r0
   83b4c:	4688      	mov	r8, r1
   83b4e:	4614      	mov	r4, r2
   83b50:	f000 fb50 	bl	841f4 <__locale_mb_cur_max>
   83b54:	2801      	cmp	r0, #1
   83b56:	d033      	beq.n	83bc0 <__fputwc+0x7c>
   83b58:	4642      	mov	r2, r8
   83b5a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83b5e:	a901      	add	r1, sp, #4
   83b60:	4638      	mov	r0, r7
   83b62:	f001 f9af 	bl	84ec4 <_wcrtomb_r>
   83b66:	1c42      	adds	r2, r0, #1
   83b68:	4606      	mov	r6, r0
   83b6a:	d022      	beq.n	83bb2 <__fputwc+0x6e>
   83b6c:	b390      	cbz	r0, 83bd4 <__fputwc+0x90>
   83b6e:	f89d 1004 	ldrb.w	r1, [sp, #4]
   83b72:	2500      	movs	r5, #0
   83b74:	f10d 0904 	add.w	r9, sp, #4
   83b78:	e008      	b.n	83b8c <__fputwc+0x48>
   83b7a:	6823      	ldr	r3, [r4, #0]
   83b7c:	1c5a      	adds	r2, r3, #1
   83b7e:	6022      	str	r2, [r4, #0]
   83b80:	7019      	strb	r1, [r3, #0]
   83b82:	3501      	adds	r5, #1
   83b84:	42b5      	cmp	r5, r6
   83b86:	d225      	bcs.n	83bd4 <__fputwc+0x90>
   83b88:	f815 1009 	ldrb.w	r1, [r5, r9]
   83b8c:	68a3      	ldr	r3, [r4, #8]
   83b8e:	3b01      	subs	r3, #1
   83b90:	2b00      	cmp	r3, #0
   83b92:	60a3      	str	r3, [r4, #8]
   83b94:	daf1      	bge.n	83b7a <__fputwc+0x36>
   83b96:	69a2      	ldr	r2, [r4, #24]
   83b98:	4293      	cmp	r3, r2
   83b9a:	db01      	blt.n	83ba0 <__fputwc+0x5c>
   83b9c:	290a      	cmp	r1, #10
   83b9e:	d1ec      	bne.n	83b7a <__fputwc+0x36>
   83ba0:	4622      	mov	r2, r4
   83ba2:	4638      	mov	r0, r7
   83ba4:	f001 f936 	bl	84e14 <__swbuf_r>
   83ba8:	1c43      	adds	r3, r0, #1
   83baa:	d1ea      	bne.n	83b82 <__fputwc+0x3e>
   83bac:	b003      	add	sp, #12
   83bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bb2:	89a3      	ldrh	r3, [r4, #12]
   83bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83bb8:	81a3      	strh	r3, [r4, #12]
   83bba:	b003      	add	sp, #12
   83bbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   83bc0:	f108 33ff 	add.w	r3, r8, #4294967295
   83bc4:	2bfe      	cmp	r3, #254	; 0xfe
   83bc6:	d8c7      	bhi.n	83b58 <__fputwc+0x14>
   83bc8:	fa5f f188 	uxtb.w	r1, r8
   83bcc:	4606      	mov	r6, r0
   83bce:	f88d 1004 	strb.w	r1, [sp, #4]
   83bd2:	e7ce      	b.n	83b72 <__fputwc+0x2e>
   83bd4:	4640      	mov	r0, r8
   83bd6:	b003      	add	sp, #12
   83bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00083bdc <_fputwc_r>:
   83bdc:	b530      	push	{r4, r5, lr}
   83bde:	6e53      	ldr	r3, [r2, #100]	; 0x64
   83be0:	4614      	mov	r4, r2
   83be2:	f013 0f01 	tst.w	r3, #1
   83be6:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   83bea:	b083      	sub	sp, #12
   83bec:	4605      	mov	r5, r0
   83bee:	b29a      	uxth	r2, r3
   83bf0:	d101      	bne.n	83bf6 <_fputwc_r+0x1a>
   83bf2:	0590      	lsls	r0, r2, #22
   83bf4:	d51c      	bpl.n	83c30 <_fputwc_r+0x54>
   83bf6:	0490      	lsls	r0, r2, #18
   83bf8:	d406      	bmi.n	83c08 <_fputwc_r+0x2c>
   83bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83bfc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83c00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83c04:	81a3      	strh	r3, [r4, #12]
   83c06:	6662      	str	r2, [r4, #100]	; 0x64
   83c08:	4628      	mov	r0, r5
   83c0a:	4622      	mov	r2, r4
   83c0c:	f7ff ff9a 	bl	83b44 <__fputwc>
   83c10:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83c12:	4605      	mov	r5, r0
   83c14:	07da      	lsls	r2, r3, #31
   83c16:	d402      	bmi.n	83c1e <_fputwc_r+0x42>
   83c18:	89a3      	ldrh	r3, [r4, #12]
   83c1a:	059b      	lsls	r3, r3, #22
   83c1c:	d502      	bpl.n	83c24 <_fputwc_r+0x48>
   83c1e:	4628      	mov	r0, r5
   83c20:	b003      	add	sp, #12
   83c22:	bd30      	pop	{r4, r5, pc}
   83c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c26:	f000 faf9 	bl	8421c <__retarget_lock_release_recursive>
   83c2a:	4628      	mov	r0, r5
   83c2c:	b003      	add	sp, #12
   83c2e:	bd30      	pop	{r4, r5, pc}
   83c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83c32:	9101      	str	r1, [sp, #4]
   83c34:	f000 faf0 	bl	84218 <__retarget_lock_acquire_recursive>
   83c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83c3c:	9901      	ldr	r1, [sp, #4]
   83c3e:	b29a      	uxth	r2, r3
   83c40:	e7d9      	b.n	83bf6 <_fputwc_r+0x1a>
   83c42:	bf00      	nop

00083c44 <_malloc_trim_r>:
   83c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c46:	460c      	mov	r4, r1
   83c48:	4f23      	ldr	r7, [pc, #140]	; (83cd8 <_malloc_trim_r+0x94>)
   83c4a:	4606      	mov	r6, r0
   83c4c:	f000 feca 	bl	849e4 <__malloc_lock>
   83c50:	68bb      	ldr	r3, [r7, #8]
   83c52:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83c56:	685d      	ldr	r5, [r3, #4]
   83c58:	310f      	adds	r1, #15
   83c5a:	f025 0503 	bic.w	r5, r5, #3
   83c5e:	4429      	add	r1, r5
   83c60:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83c64:	f021 010f 	bic.w	r1, r1, #15
   83c68:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83c6c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   83c70:	db07      	blt.n	83c82 <_malloc_trim_r+0x3e>
   83c72:	2100      	movs	r1, #0
   83c74:	4630      	mov	r0, r6
   83c76:	f001 f877 	bl	84d68 <_sbrk_r>
   83c7a:	68bb      	ldr	r3, [r7, #8]
   83c7c:	442b      	add	r3, r5
   83c7e:	4298      	cmp	r0, r3
   83c80:	d004      	beq.n	83c8c <_malloc_trim_r+0x48>
   83c82:	4630      	mov	r0, r6
   83c84:	f000 feb4 	bl	849f0 <__malloc_unlock>
   83c88:	2000      	movs	r0, #0
   83c8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83c8c:	4261      	negs	r1, r4
   83c8e:	4630      	mov	r0, r6
   83c90:	f001 f86a 	bl	84d68 <_sbrk_r>
   83c94:	3001      	adds	r0, #1
   83c96:	d00d      	beq.n	83cb4 <_malloc_trim_r+0x70>
   83c98:	4b10      	ldr	r3, [pc, #64]	; (83cdc <_malloc_trim_r+0x98>)
   83c9a:	68ba      	ldr	r2, [r7, #8]
   83c9c:	6819      	ldr	r1, [r3, #0]
   83c9e:	1b2d      	subs	r5, r5, r4
   83ca0:	f045 0501 	orr.w	r5, r5, #1
   83ca4:	4630      	mov	r0, r6
   83ca6:	1b09      	subs	r1, r1, r4
   83ca8:	6055      	str	r5, [r2, #4]
   83caa:	6019      	str	r1, [r3, #0]
   83cac:	f000 fea0 	bl	849f0 <__malloc_unlock>
   83cb0:	2001      	movs	r0, #1
   83cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cb4:	2100      	movs	r1, #0
   83cb6:	4630      	mov	r0, r6
   83cb8:	f001 f856 	bl	84d68 <_sbrk_r>
   83cbc:	68ba      	ldr	r2, [r7, #8]
   83cbe:	1a83      	subs	r3, r0, r2
   83cc0:	2b0f      	cmp	r3, #15
   83cc2:	ddde      	ble.n	83c82 <_malloc_trim_r+0x3e>
   83cc4:	4c06      	ldr	r4, [pc, #24]	; (83ce0 <_malloc_trim_r+0x9c>)
   83cc6:	4905      	ldr	r1, [pc, #20]	; (83cdc <_malloc_trim_r+0x98>)
   83cc8:	6824      	ldr	r4, [r4, #0]
   83cca:	f043 0301 	orr.w	r3, r3, #1
   83cce:	1b00      	subs	r0, r0, r4
   83cd0:	6053      	str	r3, [r2, #4]
   83cd2:	6008      	str	r0, [r1, #0]
   83cd4:	e7d5      	b.n	83c82 <_malloc_trim_r+0x3e>
   83cd6:	bf00      	nop
   83cd8:	20070708 	.word	0x20070708
   83cdc:	2007ad9c 	.word	0x2007ad9c
   83ce0:	20070b10 	.word	0x20070b10

00083ce4 <_free_r>:
   83ce4:	2900      	cmp	r1, #0
   83ce6:	d044      	beq.n	83d72 <_free_r+0x8e>
   83ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83cec:	460d      	mov	r5, r1
   83cee:	4680      	mov	r8, r0
   83cf0:	f000 fe78 	bl	849e4 <__malloc_lock>
   83cf4:	f855 7c04 	ldr.w	r7, [r5, #-4]
   83cf8:	4969      	ldr	r1, [pc, #420]	; (83ea0 <_free_r+0x1bc>)
   83cfa:	f1a5 0408 	sub.w	r4, r5, #8
   83cfe:	f027 0301 	bic.w	r3, r7, #1
   83d02:	18e2      	adds	r2, r4, r3
   83d04:	688e      	ldr	r6, [r1, #8]
   83d06:	6850      	ldr	r0, [r2, #4]
   83d08:	42b2      	cmp	r2, r6
   83d0a:	f020 0003 	bic.w	r0, r0, #3
   83d0e:	d05e      	beq.n	83dce <_free_r+0xea>
   83d10:	07fe      	lsls	r6, r7, #31
   83d12:	6050      	str	r0, [r2, #4]
   83d14:	d40b      	bmi.n	83d2e <_free_r+0x4a>
   83d16:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83d1a:	f101 0e08 	add.w	lr, r1, #8
   83d1e:	1be4      	subs	r4, r4, r7
   83d20:	68a5      	ldr	r5, [r4, #8]
   83d22:	443b      	add	r3, r7
   83d24:	4575      	cmp	r5, lr
   83d26:	d06d      	beq.n	83e04 <_free_r+0x120>
   83d28:	68e7      	ldr	r7, [r4, #12]
   83d2a:	60ef      	str	r7, [r5, #12]
   83d2c:	60bd      	str	r5, [r7, #8]
   83d2e:	1815      	adds	r5, r2, r0
   83d30:	686d      	ldr	r5, [r5, #4]
   83d32:	07ed      	lsls	r5, r5, #31
   83d34:	d53e      	bpl.n	83db4 <_free_r+0xd0>
   83d36:	f043 0201 	orr.w	r2, r3, #1
   83d3a:	6062      	str	r2, [r4, #4]
   83d3c:	50e3      	str	r3, [r4, r3]
   83d3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83d42:	d217      	bcs.n	83d74 <_free_r+0x90>
   83d44:	2201      	movs	r2, #1
   83d46:	08db      	lsrs	r3, r3, #3
   83d48:	1098      	asrs	r0, r3, #2
   83d4a:	684d      	ldr	r5, [r1, #4]
   83d4c:	4413      	add	r3, r2
   83d4e:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   83d52:	4082      	lsls	r2, r0
   83d54:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83d58:	432a      	orrs	r2, r5
   83d5a:	3808      	subs	r0, #8
   83d5c:	60e0      	str	r0, [r4, #12]
   83d5e:	60a7      	str	r7, [r4, #8]
   83d60:	604a      	str	r2, [r1, #4]
   83d62:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83d66:	60fc      	str	r4, [r7, #12]
   83d68:	4640      	mov	r0, r8
   83d6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83d6e:	f000 be3f 	b.w	849f0 <__malloc_unlock>
   83d72:	4770      	bx	lr
   83d74:	0a5a      	lsrs	r2, r3, #9
   83d76:	2a04      	cmp	r2, #4
   83d78:	d852      	bhi.n	83e20 <_free_r+0x13c>
   83d7a:	099a      	lsrs	r2, r3, #6
   83d7c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   83d80:	00ff      	lsls	r7, r7, #3
   83d82:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83d86:	19c8      	adds	r0, r1, r7
   83d88:	59ca      	ldr	r2, [r1, r7]
   83d8a:	3808      	subs	r0, #8
   83d8c:	4290      	cmp	r0, r2
   83d8e:	d04f      	beq.n	83e30 <_free_r+0x14c>
   83d90:	6851      	ldr	r1, [r2, #4]
   83d92:	f021 0103 	bic.w	r1, r1, #3
   83d96:	428b      	cmp	r3, r1
   83d98:	d232      	bcs.n	83e00 <_free_r+0x11c>
   83d9a:	6892      	ldr	r2, [r2, #8]
   83d9c:	4290      	cmp	r0, r2
   83d9e:	d1f7      	bne.n	83d90 <_free_r+0xac>
   83da0:	68c3      	ldr	r3, [r0, #12]
   83da2:	60a0      	str	r0, [r4, #8]
   83da4:	60e3      	str	r3, [r4, #12]
   83da6:	609c      	str	r4, [r3, #8]
   83da8:	60c4      	str	r4, [r0, #12]
   83daa:	4640      	mov	r0, r8
   83dac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83db0:	f000 be1e 	b.w	849f0 <__malloc_unlock>
   83db4:	6895      	ldr	r5, [r2, #8]
   83db6:	4f3b      	ldr	r7, [pc, #236]	; (83ea4 <_free_r+0x1c0>)
   83db8:	4403      	add	r3, r0
   83dba:	42bd      	cmp	r5, r7
   83dbc:	d040      	beq.n	83e40 <_free_r+0x15c>
   83dbe:	68d0      	ldr	r0, [r2, #12]
   83dc0:	f043 0201 	orr.w	r2, r3, #1
   83dc4:	60e8      	str	r0, [r5, #12]
   83dc6:	6085      	str	r5, [r0, #8]
   83dc8:	6062      	str	r2, [r4, #4]
   83dca:	50e3      	str	r3, [r4, r3]
   83dcc:	e7b7      	b.n	83d3e <_free_r+0x5a>
   83dce:	07ff      	lsls	r7, r7, #31
   83dd0:	4403      	add	r3, r0
   83dd2:	d407      	bmi.n	83de4 <_free_r+0x100>
   83dd4:	f855 5c08 	ldr.w	r5, [r5, #-8]
   83dd8:	1b64      	subs	r4, r4, r5
   83dda:	68e2      	ldr	r2, [r4, #12]
   83ddc:	68a0      	ldr	r0, [r4, #8]
   83dde:	442b      	add	r3, r5
   83de0:	60c2      	str	r2, [r0, #12]
   83de2:	6090      	str	r0, [r2, #8]
   83de4:	4a30      	ldr	r2, [pc, #192]	; (83ea8 <_free_r+0x1c4>)
   83de6:	f043 0001 	orr.w	r0, r3, #1
   83dea:	6812      	ldr	r2, [r2, #0]
   83dec:	6060      	str	r0, [r4, #4]
   83dee:	4293      	cmp	r3, r2
   83df0:	608c      	str	r4, [r1, #8]
   83df2:	d3b9      	bcc.n	83d68 <_free_r+0x84>
   83df4:	4b2d      	ldr	r3, [pc, #180]	; (83eac <_free_r+0x1c8>)
   83df6:	4640      	mov	r0, r8
   83df8:	6819      	ldr	r1, [r3, #0]
   83dfa:	f7ff ff23 	bl	83c44 <_malloc_trim_r>
   83dfe:	e7b3      	b.n	83d68 <_free_r+0x84>
   83e00:	4610      	mov	r0, r2
   83e02:	e7cd      	b.n	83da0 <_free_r+0xbc>
   83e04:	1811      	adds	r1, r2, r0
   83e06:	6849      	ldr	r1, [r1, #4]
   83e08:	07c9      	lsls	r1, r1, #31
   83e0a:	d444      	bmi.n	83e96 <_free_r+0x1b2>
   83e0c:	6891      	ldr	r1, [r2, #8]
   83e0e:	4403      	add	r3, r0
   83e10:	68d2      	ldr	r2, [r2, #12]
   83e12:	f043 0001 	orr.w	r0, r3, #1
   83e16:	60ca      	str	r2, [r1, #12]
   83e18:	6091      	str	r1, [r2, #8]
   83e1a:	6060      	str	r0, [r4, #4]
   83e1c:	50e3      	str	r3, [r4, r3]
   83e1e:	e7a3      	b.n	83d68 <_free_r+0x84>
   83e20:	2a14      	cmp	r2, #20
   83e22:	d816      	bhi.n	83e52 <_free_r+0x16e>
   83e24:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83e28:	00ff      	lsls	r7, r7, #3
   83e2a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   83e2e:	e7aa      	b.n	83d86 <_free_r+0xa2>
   83e30:	2301      	movs	r3, #1
   83e32:	10aa      	asrs	r2, r5, #2
   83e34:	684d      	ldr	r5, [r1, #4]
   83e36:	4093      	lsls	r3, r2
   83e38:	432b      	orrs	r3, r5
   83e3a:	604b      	str	r3, [r1, #4]
   83e3c:	4603      	mov	r3, r0
   83e3e:	e7b0      	b.n	83da2 <_free_r+0xbe>
   83e40:	f043 0201 	orr.w	r2, r3, #1
   83e44:	614c      	str	r4, [r1, #20]
   83e46:	610c      	str	r4, [r1, #16]
   83e48:	60e5      	str	r5, [r4, #12]
   83e4a:	60a5      	str	r5, [r4, #8]
   83e4c:	6062      	str	r2, [r4, #4]
   83e4e:	50e3      	str	r3, [r4, r3]
   83e50:	e78a      	b.n	83d68 <_free_r+0x84>
   83e52:	2a54      	cmp	r2, #84	; 0x54
   83e54:	d806      	bhi.n	83e64 <_free_r+0x180>
   83e56:	0b1a      	lsrs	r2, r3, #12
   83e58:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83e5c:	00ff      	lsls	r7, r7, #3
   83e5e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   83e62:	e790      	b.n	83d86 <_free_r+0xa2>
   83e64:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83e68:	d806      	bhi.n	83e78 <_free_r+0x194>
   83e6a:	0bda      	lsrs	r2, r3, #15
   83e6c:	f102 0778 	add.w	r7, r2, #120	; 0x78
   83e70:	00ff      	lsls	r7, r7, #3
   83e72:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83e76:	e786      	b.n	83d86 <_free_r+0xa2>
   83e78:	f240 5054 	movw	r0, #1364	; 0x554
   83e7c:	4282      	cmp	r2, r0
   83e7e:	d806      	bhi.n	83e8e <_free_r+0x1aa>
   83e80:	0c9a      	lsrs	r2, r3, #18
   83e82:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83e86:	00ff      	lsls	r7, r7, #3
   83e88:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83e8c:	e77b      	b.n	83d86 <_free_r+0xa2>
   83e8e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   83e92:	257e      	movs	r5, #126	; 0x7e
   83e94:	e777      	b.n	83d86 <_free_r+0xa2>
   83e96:	f043 0101 	orr.w	r1, r3, #1
   83e9a:	6061      	str	r1, [r4, #4]
   83e9c:	6013      	str	r3, [r2, #0]
   83e9e:	e763      	b.n	83d68 <_free_r+0x84>
   83ea0:	20070708 	.word	0x20070708
   83ea4:	20070710 	.word	0x20070710
   83ea8:	20070b14 	.word	0x20070b14
   83eac:	2007adcc 	.word	0x2007adcc

00083eb0 <__sfvwrite_r>:
   83eb0:	6893      	ldr	r3, [r2, #8]
   83eb2:	2b00      	cmp	r3, #0
   83eb4:	d071      	beq.n	83f9a <__sfvwrite_r+0xea>
   83eb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83eba:	898b      	ldrh	r3, [r1, #12]
   83ebc:	b083      	sub	sp, #12
   83ebe:	460c      	mov	r4, r1
   83ec0:	0719      	lsls	r1, r3, #28
   83ec2:	9000      	str	r0, [sp, #0]
   83ec4:	4616      	mov	r6, r2
   83ec6:	d525      	bpl.n	83f14 <__sfvwrite_r+0x64>
   83ec8:	6922      	ldr	r2, [r4, #16]
   83eca:	b31a      	cbz	r2, 83f14 <__sfvwrite_r+0x64>
   83ecc:	f013 0002 	ands.w	r0, r3, #2
   83ed0:	6835      	ldr	r5, [r6, #0]
   83ed2:	d02b      	beq.n	83f2c <__sfvwrite_r+0x7c>
   83ed4:	f04f 0900 	mov.w	r9, #0
   83ed8:	46b0      	mov	r8, r6
   83eda:	464f      	mov	r7, r9
   83edc:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 841a0 <__sfvwrite_r+0x2f0>
   83ee0:	2f00      	cmp	r7, #0
   83ee2:	d055      	beq.n	83f90 <__sfvwrite_r+0xe0>
   83ee4:	4557      	cmp	r7, sl
   83ee6:	463b      	mov	r3, r7
   83ee8:	464a      	mov	r2, r9
   83eea:	bf28      	it	cs
   83eec:	4653      	movcs	r3, sl
   83eee:	69e1      	ldr	r1, [r4, #28]
   83ef0:	9800      	ldr	r0, [sp, #0]
   83ef2:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83ef4:	47b0      	blx	r6
   83ef6:	2800      	cmp	r0, #0
   83ef8:	dd56      	ble.n	83fa8 <__sfvwrite_r+0xf8>
   83efa:	f8d8 3008 	ldr.w	r3, [r8, #8]
   83efe:	4481      	add	r9, r0
   83f00:	1a1b      	subs	r3, r3, r0
   83f02:	1a3f      	subs	r7, r7, r0
   83f04:	f8c8 3008 	str.w	r3, [r8, #8]
   83f08:	2b00      	cmp	r3, #0
   83f0a:	d1e9      	bne.n	83ee0 <__sfvwrite_r+0x30>
   83f0c:	2000      	movs	r0, #0
   83f0e:	b003      	add	sp, #12
   83f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83f14:	4621      	mov	r1, r4
   83f16:	9800      	ldr	r0, [sp, #0]
   83f18:	f7ff fc56 	bl	837c8 <__swsetup_r>
   83f1c:	2800      	cmp	r0, #0
   83f1e:	f040 8135 	bne.w	8418c <__sfvwrite_r+0x2dc>
   83f22:	89a3      	ldrh	r3, [r4, #12]
   83f24:	6835      	ldr	r5, [r6, #0]
   83f26:	f013 0002 	ands.w	r0, r3, #2
   83f2a:	d1d3      	bne.n	83ed4 <__sfvwrite_r+0x24>
   83f2c:	f013 0901 	ands.w	r9, r3, #1
   83f30:	d144      	bne.n	83fbc <__sfvwrite_r+0x10c>
   83f32:	464f      	mov	r7, r9
   83f34:	9601      	str	r6, [sp, #4]
   83f36:	b337      	cbz	r7, 83f86 <__sfvwrite_r+0xd6>
   83f38:	059a      	lsls	r2, r3, #22
   83f3a:	f8d4 8008 	ldr.w	r8, [r4, #8]
   83f3e:	f140 8085 	bpl.w	8404c <__sfvwrite_r+0x19c>
   83f42:	4547      	cmp	r7, r8
   83f44:	46c3      	mov	fp, r8
   83f46:	f0c0 80ad 	bcc.w	840a4 <__sfvwrite_r+0x1f4>
   83f4a:	f413 6f90 	tst.w	r3, #1152	; 0x480
   83f4e:	f040 80ae 	bne.w	840ae <__sfvwrite_r+0x1fe>
   83f52:	46ba      	mov	sl, r7
   83f54:	6820      	ldr	r0, [r4, #0]
   83f56:	465a      	mov	r2, fp
   83f58:	4649      	mov	r1, r9
   83f5a:	f000 fcdf 	bl	8491c <memmove>
   83f5e:	68a2      	ldr	r2, [r4, #8]
   83f60:	6823      	ldr	r3, [r4, #0]
   83f62:	eba2 0208 	sub.w	r2, r2, r8
   83f66:	445b      	add	r3, fp
   83f68:	60a2      	str	r2, [r4, #8]
   83f6a:	6023      	str	r3, [r4, #0]
   83f6c:	9a01      	ldr	r2, [sp, #4]
   83f6e:	44d1      	add	r9, sl
   83f70:	6893      	ldr	r3, [r2, #8]
   83f72:	eba7 070a 	sub.w	r7, r7, sl
   83f76:	eba3 030a 	sub.w	r3, r3, sl
   83f7a:	6093      	str	r3, [r2, #8]
   83f7c:	2b00      	cmp	r3, #0
   83f7e:	d0c5      	beq.n	83f0c <__sfvwrite_r+0x5c>
   83f80:	89a3      	ldrh	r3, [r4, #12]
   83f82:	2f00      	cmp	r7, #0
   83f84:	d1d8      	bne.n	83f38 <__sfvwrite_r+0x88>
   83f86:	f8d5 9000 	ldr.w	r9, [r5]
   83f8a:	686f      	ldr	r7, [r5, #4]
   83f8c:	3508      	adds	r5, #8
   83f8e:	e7d2      	b.n	83f36 <__sfvwrite_r+0x86>
   83f90:	f8d5 9000 	ldr.w	r9, [r5]
   83f94:	686f      	ldr	r7, [r5, #4]
   83f96:	3508      	adds	r5, #8
   83f98:	e7a2      	b.n	83ee0 <__sfvwrite_r+0x30>
   83f9a:	2000      	movs	r0, #0
   83f9c:	4770      	bx	lr
   83f9e:	4621      	mov	r1, r4
   83fa0:	9800      	ldr	r0, [sp, #0]
   83fa2:	f7ff fd21 	bl	839e8 <_fflush_r>
   83fa6:	b378      	cbz	r0, 84008 <__sfvwrite_r+0x158>
   83fa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83fac:	f04f 30ff 	mov.w	r0, #4294967295
   83fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83fb4:	81a3      	strh	r3, [r4, #12]
   83fb6:	b003      	add	sp, #12
   83fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83fbc:	4681      	mov	r9, r0
   83fbe:	4633      	mov	r3, r6
   83fc0:	464e      	mov	r6, r9
   83fc2:	46a8      	mov	r8, r5
   83fc4:	469a      	mov	sl, r3
   83fc6:	464d      	mov	r5, r9
   83fc8:	b356      	cbz	r6, 84020 <__sfvwrite_r+0x170>
   83fca:	2800      	cmp	r0, #0
   83fcc:	d032      	beq.n	84034 <__sfvwrite_r+0x184>
   83fce:	45b1      	cmp	r9, r6
   83fd0:	46cb      	mov	fp, r9
   83fd2:	bf28      	it	cs
   83fd4:	46b3      	movcs	fp, r6
   83fd6:	6820      	ldr	r0, [r4, #0]
   83fd8:	6923      	ldr	r3, [r4, #16]
   83fda:	465f      	mov	r7, fp
   83fdc:	4298      	cmp	r0, r3
   83fde:	6962      	ldr	r2, [r4, #20]
   83fe0:	d904      	bls.n	83fec <__sfvwrite_r+0x13c>
   83fe2:	68a3      	ldr	r3, [r4, #8]
   83fe4:	4413      	add	r3, r2
   83fe6:	459b      	cmp	fp, r3
   83fe8:	f300 80a8 	bgt.w	8413c <__sfvwrite_r+0x28c>
   83fec:	4593      	cmp	fp, r2
   83fee:	db4d      	blt.n	8408c <__sfvwrite_r+0x1dc>
   83ff0:	4613      	mov	r3, r2
   83ff2:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83ff4:	462a      	mov	r2, r5
   83ff6:	69e1      	ldr	r1, [r4, #28]
   83ff8:	9800      	ldr	r0, [sp, #0]
   83ffa:	47b8      	blx	r7
   83ffc:	1e07      	subs	r7, r0, #0
   83ffe:	ddd3      	ble.n	83fa8 <__sfvwrite_r+0xf8>
   84000:	ebb9 0907 	subs.w	r9, r9, r7
   84004:	d0cb      	beq.n	83f9e <__sfvwrite_r+0xee>
   84006:	2001      	movs	r0, #1
   84008:	f8da 3008 	ldr.w	r3, [sl, #8]
   8400c:	443d      	add	r5, r7
   8400e:	1bdb      	subs	r3, r3, r7
   84010:	1bf6      	subs	r6, r6, r7
   84012:	f8ca 3008 	str.w	r3, [sl, #8]
   84016:	2b00      	cmp	r3, #0
   84018:	f43f af78 	beq.w	83f0c <__sfvwrite_r+0x5c>
   8401c:	2e00      	cmp	r6, #0
   8401e:	d1d4      	bne.n	83fca <__sfvwrite_r+0x11a>
   84020:	f108 0308 	add.w	r3, r8, #8
   84024:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84028:	4698      	mov	r8, r3
   8402a:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8402e:	3308      	adds	r3, #8
   84030:	2e00      	cmp	r6, #0
   84032:	d0f7      	beq.n	84024 <__sfvwrite_r+0x174>
   84034:	4632      	mov	r2, r6
   84036:	210a      	movs	r1, #10
   84038:	4628      	mov	r0, r5
   8403a:	f000 fc29 	bl	84890 <memchr>
   8403e:	2800      	cmp	r0, #0
   84040:	f000 80a1 	beq.w	84186 <__sfvwrite_r+0x2d6>
   84044:	3001      	adds	r0, #1
   84046:	eba0 0905 	sub.w	r9, r0, r5
   8404a:	e7c0      	b.n	83fce <__sfvwrite_r+0x11e>
   8404c:	6820      	ldr	r0, [r4, #0]
   8404e:	6923      	ldr	r3, [r4, #16]
   84050:	4298      	cmp	r0, r3
   84052:	d802      	bhi.n	8405a <__sfvwrite_r+0x1aa>
   84054:	6963      	ldr	r3, [r4, #20]
   84056:	429f      	cmp	r7, r3
   84058:	d25d      	bcs.n	84116 <__sfvwrite_r+0x266>
   8405a:	45b8      	cmp	r8, r7
   8405c:	bf28      	it	cs
   8405e:	46b8      	movcs	r8, r7
   84060:	4649      	mov	r1, r9
   84062:	4642      	mov	r2, r8
   84064:	f000 fc5a 	bl	8491c <memmove>
   84068:	68a3      	ldr	r3, [r4, #8]
   8406a:	6822      	ldr	r2, [r4, #0]
   8406c:	eba3 0308 	sub.w	r3, r3, r8
   84070:	4442      	add	r2, r8
   84072:	60a3      	str	r3, [r4, #8]
   84074:	6022      	str	r2, [r4, #0]
   84076:	b10b      	cbz	r3, 8407c <__sfvwrite_r+0x1cc>
   84078:	46c2      	mov	sl, r8
   8407a:	e777      	b.n	83f6c <__sfvwrite_r+0xbc>
   8407c:	4621      	mov	r1, r4
   8407e:	9800      	ldr	r0, [sp, #0]
   84080:	f7ff fcb2 	bl	839e8 <_fflush_r>
   84084:	2800      	cmp	r0, #0
   84086:	d18f      	bne.n	83fa8 <__sfvwrite_r+0xf8>
   84088:	46c2      	mov	sl, r8
   8408a:	e76f      	b.n	83f6c <__sfvwrite_r+0xbc>
   8408c:	465a      	mov	r2, fp
   8408e:	4629      	mov	r1, r5
   84090:	f000 fc44 	bl	8491c <memmove>
   84094:	68a2      	ldr	r2, [r4, #8]
   84096:	6823      	ldr	r3, [r4, #0]
   84098:	eba2 020b 	sub.w	r2, r2, fp
   8409c:	445b      	add	r3, fp
   8409e:	60a2      	str	r2, [r4, #8]
   840a0:	6023      	str	r3, [r4, #0]
   840a2:	e7ad      	b.n	84000 <__sfvwrite_r+0x150>
   840a4:	46b8      	mov	r8, r7
   840a6:	46ba      	mov	sl, r7
   840a8:	46bb      	mov	fp, r7
   840aa:	6820      	ldr	r0, [r4, #0]
   840ac:	e753      	b.n	83f56 <__sfvwrite_r+0xa6>
   840ae:	6962      	ldr	r2, [r4, #20]
   840b0:	6820      	ldr	r0, [r4, #0]
   840b2:	6921      	ldr	r1, [r4, #16]
   840b4:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   840b8:	eba0 0a01 	sub.w	sl, r0, r1
   840bc:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   840c0:	f10a 0001 	add.w	r0, sl, #1
   840c4:	ea4f 0868 	mov.w	r8, r8, asr #1
   840c8:	4438      	add	r0, r7
   840ca:	4540      	cmp	r0, r8
   840cc:	4642      	mov	r2, r8
   840ce:	bf84      	itt	hi
   840d0:	4680      	movhi	r8, r0
   840d2:	4642      	movhi	r2, r8
   840d4:	055b      	lsls	r3, r3, #21
   840d6:	d544      	bpl.n	84162 <__sfvwrite_r+0x2b2>
   840d8:	4611      	mov	r1, r2
   840da:	9800      	ldr	r0, [sp, #0]
   840dc:	f000 f920 	bl	84320 <_malloc_r>
   840e0:	4683      	mov	fp, r0
   840e2:	2800      	cmp	r0, #0
   840e4:	d055      	beq.n	84192 <__sfvwrite_r+0x2e2>
   840e6:	4652      	mov	r2, sl
   840e8:	6921      	ldr	r1, [r4, #16]
   840ea:	f7fe fab1 	bl	82650 <memcpy>
   840ee:	89a3      	ldrh	r3, [r4, #12]
   840f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   840f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   840f8:	81a3      	strh	r3, [r4, #12]
   840fa:	eb0b 000a 	add.w	r0, fp, sl
   840fe:	eba8 030a 	sub.w	r3, r8, sl
   84102:	f8c4 b010 	str.w	fp, [r4, #16]
   84106:	f8c4 8014 	str.w	r8, [r4, #20]
   8410a:	6020      	str	r0, [r4, #0]
   8410c:	60a3      	str	r3, [r4, #8]
   8410e:	46b8      	mov	r8, r7
   84110:	46ba      	mov	sl, r7
   84112:	46bb      	mov	fp, r7
   84114:	e71f      	b.n	83f56 <__sfvwrite_r+0xa6>
   84116:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8411a:	42ba      	cmp	r2, r7
   8411c:	bf28      	it	cs
   8411e:	463a      	movcs	r2, r7
   84120:	fb92 f2f3 	sdiv	r2, r2, r3
   84124:	69e1      	ldr	r1, [r4, #28]
   84126:	fb03 f302 	mul.w	r3, r3, r2
   8412a:	9800      	ldr	r0, [sp, #0]
   8412c:	464a      	mov	r2, r9
   8412e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84130:	47b0      	blx	r6
   84132:	f1b0 0a00 	subs.w	sl, r0, #0
   84136:	f73f af19 	bgt.w	83f6c <__sfvwrite_r+0xbc>
   8413a:	e735      	b.n	83fa8 <__sfvwrite_r+0xf8>
   8413c:	461a      	mov	r2, r3
   8413e:	4629      	mov	r1, r5
   84140:	9301      	str	r3, [sp, #4]
   84142:	f000 fbeb 	bl	8491c <memmove>
   84146:	6822      	ldr	r2, [r4, #0]
   84148:	9b01      	ldr	r3, [sp, #4]
   8414a:	4621      	mov	r1, r4
   8414c:	441a      	add	r2, r3
   8414e:	6022      	str	r2, [r4, #0]
   84150:	9800      	ldr	r0, [sp, #0]
   84152:	f7ff fc49 	bl	839e8 <_fflush_r>
   84156:	9b01      	ldr	r3, [sp, #4]
   84158:	2800      	cmp	r0, #0
   8415a:	f47f af25 	bne.w	83fa8 <__sfvwrite_r+0xf8>
   8415e:	461f      	mov	r7, r3
   84160:	e74e      	b.n	84000 <__sfvwrite_r+0x150>
   84162:	9800      	ldr	r0, [sp, #0]
   84164:	f000 fc4a 	bl	849fc <_realloc_r>
   84168:	4683      	mov	fp, r0
   8416a:	2800      	cmp	r0, #0
   8416c:	d1c5      	bne.n	840fa <__sfvwrite_r+0x24a>
   8416e:	9d00      	ldr	r5, [sp, #0]
   84170:	6921      	ldr	r1, [r4, #16]
   84172:	4628      	mov	r0, r5
   84174:	f7ff fdb6 	bl	83ce4 <_free_r>
   84178:	220c      	movs	r2, #12
   8417a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8417e:	602a      	str	r2, [r5, #0]
   84180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84184:	e712      	b.n	83fac <__sfvwrite_r+0xfc>
   84186:	f106 0901 	add.w	r9, r6, #1
   8418a:	e720      	b.n	83fce <__sfvwrite_r+0x11e>
   8418c:	f04f 30ff 	mov.w	r0, #4294967295
   84190:	e6bd      	b.n	83f0e <__sfvwrite_r+0x5e>
   84192:	220c      	movs	r2, #12
   84194:	9900      	ldr	r1, [sp, #0]
   84196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8419a:	600a      	str	r2, [r1, #0]
   8419c:	e706      	b.n	83fac <__sfvwrite_r+0xfc>
   8419e:	bf00      	nop
   841a0:	7ffffc00 	.word	0x7ffffc00

000841a4 <_fwalk_reent>:
   841a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   841a8:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   841ac:	d01e      	beq.n	841ec <_fwalk_reent+0x48>
   841ae:	4688      	mov	r8, r1
   841b0:	4607      	mov	r7, r0
   841b2:	f04f 0900 	mov.w	r9, #0
   841b6:	6875      	ldr	r5, [r6, #4]
   841b8:	68b4      	ldr	r4, [r6, #8]
   841ba:	3d01      	subs	r5, #1
   841bc:	d410      	bmi.n	841e0 <_fwalk_reent+0x3c>
   841be:	89a3      	ldrh	r3, [r4, #12]
   841c0:	3d01      	subs	r5, #1
   841c2:	2b01      	cmp	r3, #1
   841c4:	d908      	bls.n	841d8 <_fwalk_reent+0x34>
   841c6:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   841ca:	3301      	adds	r3, #1
   841cc:	d004      	beq.n	841d8 <_fwalk_reent+0x34>
   841ce:	4621      	mov	r1, r4
   841d0:	4638      	mov	r0, r7
   841d2:	47c0      	blx	r8
   841d4:	ea49 0900 	orr.w	r9, r9, r0
   841d8:	1c6b      	adds	r3, r5, #1
   841da:	f104 0468 	add.w	r4, r4, #104	; 0x68
   841de:	d1ee      	bne.n	841be <_fwalk_reent+0x1a>
   841e0:	6836      	ldr	r6, [r6, #0]
   841e2:	2e00      	cmp	r6, #0
   841e4:	d1e7      	bne.n	841b6 <_fwalk_reent+0x12>
   841e6:	4648      	mov	r0, r9
   841e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   841ec:	46b1      	mov	r9, r6
   841ee:	4648      	mov	r0, r9
   841f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000841f4 <__locale_mb_cur_max>:
   841f4:	4b04      	ldr	r3, [pc, #16]	; (84208 <__locale_mb_cur_max+0x14>)
   841f6:	4a05      	ldr	r2, [pc, #20]	; (8420c <__locale_mb_cur_max+0x18>)
   841f8:	681b      	ldr	r3, [r3, #0]
   841fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   841fc:	2b00      	cmp	r3, #0
   841fe:	bf08      	it	eq
   84200:	4613      	moveq	r3, r2
   84202:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   84206:	4770      	bx	lr
   84208:	2007016c 	.word	0x2007016c
   8420c:	2007059c 	.word	0x2007059c

00084210 <__retarget_lock_init_recursive>:
   84210:	4770      	bx	lr
   84212:	bf00      	nop

00084214 <__retarget_lock_close_recursive>:
   84214:	4770      	bx	lr
   84216:	bf00      	nop

00084218 <__retarget_lock_acquire_recursive>:
   84218:	4770      	bx	lr
   8421a:	bf00      	nop

0008421c <__retarget_lock_release_recursive>:
   8421c:	4770      	bx	lr
   8421e:	bf00      	nop

00084220 <__swhatbuf_r>:
   84220:	b570      	push	{r4, r5, r6, lr}
   84222:	460c      	mov	r4, r1
   84224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84228:	b090      	sub	sp, #64	; 0x40
   8422a:	2900      	cmp	r1, #0
   8422c:	4615      	mov	r5, r2
   8422e:	461e      	mov	r6, r3
   84230:	db14      	blt.n	8425c <__swhatbuf_r+0x3c>
   84232:	aa01      	add	r2, sp, #4
   84234:	f000 ff68 	bl	85108 <_fstat_r>
   84238:	2800      	cmp	r0, #0
   8423a:	db0f      	blt.n	8425c <__swhatbuf_r+0x3c>
   8423c:	9a02      	ldr	r2, [sp, #8]
   8423e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84242:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   84246:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   8424a:	fab2 f282 	clz	r2, r2
   8424e:	f44f 6000 	mov.w	r0, #2048	; 0x800
   84252:	0952      	lsrs	r2, r2, #5
   84254:	6032      	str	r2, [r6, #0]
   84256:	602b      	str	r3, [r5, #0]
   84258:	b010      	add	sp, #64	; 0x40
   8425a:	bd70      	pop	{r4, r5, r6, pc}
   8425c:	2300      	movs	r3, #0
   8425e:	89a2      	ldrh	r2, [r4, #12]
   84260:	6033      	str	r3, [r6, #0]
   84262:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   84266:	d004      	beq.n	84272 <__swhatbuf_r+0x52>
   84268:	2240      	movs	r2, #64	; 0x40
   8426a:	4618      	mov	r0, r3
   8426c:	602a      	str	r2, [r5, #0]
   8426e:	b010      	add	sp, #64	; 0x40
   84270:	bd70      	pop	{r4, r5, r6, pc}
   84272:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84276:	602b      	str	r3, [r5, #0]
   84278:	b010      	add	sp, #64	; 0x40
   8427a:	bd70      	pop	{r4, r5, r6, pc}

0008427c <__smakebuf_r>:
   8427c:	898a      	ldrh	r2, [r1, #12]
   8427e:	460b      	mov	r3, r1
   84280:	0792      	lsls	r2, r2, #30
   84282:	d506      	bpl.n	84292 <__smakebuf_r+0x16>
   84284:	2101      	movs	r1, #1
   84286:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8428a:	6159      	str	r1, [r3, #20]
   8428c:	601a      	str	r2, [r3, #0]
   8428e:	611a      	str	r2, [r3, #16]
   84290:	4770      	bx	lr
   84292:	b5f0      	push	{r4, r5, r6, r7, lr}
   84294:	b083      	sub	sp, #12
   84296:	ab01      	add	r3, sp, #4
   84298:	466a      	mov	r2, sp
   8429a:	460c      	mov	r4, r1
   8429c:	4606      	mov	r6, r0
   8429e:	f7ff ffbf 	bl	84220 <__swhatbuf_r>
   842a2:	9900      	ldr	r1, [sp, #0]
   842a4:	4605      	mov	r5, r0
   842a6:	4630      	mov	r0, r6
   842a8:	f000 f83a 	bl	84320 <_malloc_r>
   842ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   842b0:	b1d8      	cbz	r0, 842ea <__smakebuf_r+0x6e>
   842b2:	e89d 0006 	ldmia.w	sp, {r1, r2}
   842b6:	4f15      	ldr	r7, [pc, #84]	; (8430c <__smakebuf_r+0x90>)
   842b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   842bc:	63f7      	str	r7, [r6, #60]	; 0x3c
   842be:	81a3      	strh	r3, [r4, #12]
   842c0:	6020      	str	r0, [r4, #0]
   842c2:	6120      	str	r0, [r4, #16]
   842c4:	6161      	str	r1, [r4, #20]
   842c6:	b91a      	cbnz	r2, 842d0 <__smakebuf_r+0x54>
   842c8:	432b      	orrs	r3, r5
   842ca:	81a3      	strh	r3, [r4, #12]
   842cc:	b003      	add	sp, #12
   842ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
   842d0:	4630      	mov	r0, r6
   842d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   842d6:	f000 ff2b 	bl	85130 <_isatty_r>
   842da:	b1a0      	cbz	r0, 84306 <__smakebuf_r+0x8a>
   842dc:	89a3      	ldrh	r3, [r4, #12]
   842de:	f023 0303 	bic.w	r3, r3, #3
   842e2:	f043 0301 	orr.w	r3, r3, #1
   842e6:	b21b      	sxth	r3, r3
   842e8:	e7ee      	b.n	842c8 <__smakebuf_r+0x4c>
   842ea:	059a      	lsls	r2, r3, #22
   842ec:	d4ee      	bmi.n	842cc <__smakebuf_r+0x50>
   842ee:	2101      	movs	r1, #1
   842f0:	f023 0303 	bic.w	r3, r3, #3
   842f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
   842f8:	f043 0302 	orr.w	r3, r3, #2
   842fc:	81a3      	strh	r3, [r4, #12]
   842fe:	6161      	str	r1, [r4, #20]
   84300:	6022      	str	r2, [r4, #0]
   84302:	6122      	str	r2, [r4, #16]
   84304:	e7e2      	b.n	842cc <__smakebuf_r+0x50>
   84306:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8430a:	e7dd      	b.n	842c8 <__smakebuf_r+0x4c>
   8430c:	00083a3d 	.word	0x00083a3d

00084310 <malloc>:
   84310:	4b02      	ldr	r3, [pc, #8]	; (8431c <malloc+0xc>)
   84312:	4601      	mov	r1, r0
   84314:	6818      	ldr	r0, [r3, #0]
   84316:	f000 b803 	b.w	84320 <_malloc_r>
   8431a:	bf00      	nop
   8431c:	2007016c 	.word	0x2007016c

00084320 <_malloc_r>:
   84320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84324:	f101 060b 	add.w	r6, r1, #11
   84328:	2e16      	cmp	r6, #22
   8432a:	b083      	sub	sp, #12
   8432c:	4605      	mov	r5, r0
   8432e:	f240 809e 	bls.w	8446e <_malloc_r+0x14e>
   84332:	f036 0607 	bics.w	r6, r6, #7
   84336:	f100 80bd 	bmi.w	844b4 <_malloc_r+0x194>
   8433a:	42b1      	cmp	r1, r6
   8433c:	f200 80ba 	bhi.w	844b4 <_malloc_r+0x194>
   84340:	f000 fb50 	bl	849e4 <__malloc_lock>
   84344:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   84348:	f0c0 8285 	bcc.w	84856 <_malloc_r+0x536>
   8434c:	0a73      	lsrs	r3, r6, #9
   8434e:	f000 80b8 	beq.w	844c2 <_malloc_r+0x1a2>
   84352:	2b04      	cmp	r3, #4
   84354:	f200 816c 	bhi.w	84630 <_malloc_r+0x310>
   84358:	09b3      	lsrs	r3, r6, #6
   8435a:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8435e:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   84362:	00c1      	lsls	r1, r0, #3
   84364:	4fb8      	ldr	r7, [pc, #736]	; (84648 <_malloc_r+0x328>)
   84366:	4439      	add	r1, r7
   84368:	684c      	ldr	r4, [r1, #4]
   8436a:	3908      	subs	r1, #8
   8436c:	42a1      	cmp	r1, r4
   8436e:	d106      	bne.n	8437e <_malloc_r+0x5e>
   84370:	e00c      	b.n	8438c <_malloc_r+0x6c>
   84372:	2a00      	cmp	r2, #0
   84374:	f280 80ab 	bge.w	844ce <_malloc_r+0x1ae>
   84378:	68e4      	ldr	r4, [r4, #12]
   8437a:	42a1      	cmp	r1, r4
   8437c:	d006      	beq.n	8438c <_malloc_r+0x6c>
   8437e:	6863      	ldr	r3, [r4, #4]
   84380:	f023 0303 	bic.w	r3, r3, #3
   84384:	1b9a      	subs	r2, r3, r6
   84386:	2a0f      	cmp	r2, #15
   84388:	ddf3      	ble.n	84372 <_malloc_r+0x52>
   8438a:	4670      	mov	r0, lr
   8438c:	693c      	ldr	r4, [r7, #16]
   8438e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8465c <_malloc_r+0x33c>
   84392:	4574      	cmp	r4, lr
   84394:	f000 819e 	beq.w	846d4 <_malloc_r+0x3b4>
   84398:	6863      	ldr	r3, [r4, #4]
   8439a:	f023 0303 	bic.w	r3, r3, #3
   8439e:	1b9a      	subs	r2, r3, r6
   843a0:	2a0f      	cmp	r2, #15
   843a2:	f300 8183 	bgt.w	846ac <_malloc_r+0x38c>
   843a6:	2a00      	cmp	r2, #0
   843a8:	f8c7 e014 	str.w	lr, [r7, #20]
   843ac:	f8c7 e010 	str.w	lr, [r7, #16]
   843b0:	f280 8091 	bge.w	844d6 <_malloc_r+0x1b6>
   843b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   843b8:	f080 8154 	bcs.w	84664 <_malloc_r+0x344>
   843bc:	2201      	movs	r2, #1
   843be:	08db      	lsrs	r3, r3, #3
   843c0:	6879      	ldr	r1, [r7, #4]
   843c2:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   843c6:	4413      	add	r3, r2
   843c8:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   843cc:	fa02 f20c 	lsl.w	r2, r2, ip
   843d0:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   843d4:	430a      	orrs	r2, r1
   843d6:	f1ac 0108 	sub.w	r1, ip, #8
   843da:	60e1      	str	r1, [r4, #12]
   843dc:	f8c4 8008 	str.w	r8, [r4, #8]
   843e0:	607a      	str	r2, [r7, #4]
   843e2:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   843e6:	f8c8 400c 	str.w	r4, [r8, #12]
   843ea:	2401      	movs	r4, #1
   843ec:	1083      	asrs	r3, r0, #2
   843ee:	409c      	lsls	r4, r3
   843f0:	4294      	cmp	r4, r2
   843f2:	d87d      	bhi.n	844f0 <_malloc_r+0x1d0>
   843f4:	4214      	tst	r4, r2
   843f6:	d106      	bne.n	84406 <_malloc_r+0xe6>
   843f8:	f020 0003 	bic.w	r0, r0, #3
   843fc:	0064      	lsls	r4, r4, #1
   843fe:	4214      	tst	r4, r2
   84400:	f100 0004 	add.w	r0, r0, #4
   84404:	d0fa      	beq.n	843fc <_malloc_r+0xdc>
   84406:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8440a:	46cc      	mov	ip, r9
   8440c:	4680      	mov	r8, r0
   8440e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84412:	459c      	cmp	ip, r3
   84414:	d107      	bne.n	84426 <_malloc_r+0x106>
   84416:	e15f      	b.n	846d8 <_malloc_r+0x3b8>
   84418:	2a00      	cmp	r2, #0
   8441a:	f280 816d 	bge.w	846f8 <_malloc_r+0x3d8>
   8441e:	68db      	ldr	r3, [r3, #12]
   84420:	459c      	cmp	ip, r3
   84422:	f000 8159 	beq.w	846d8 <_malloc_r+0x3b8>
   84426:	6859      	ldr	r1, [r3, #4]
   84428:	f021 0103 	bic.w	r1, r1, #3
   8442c:	1b8a      	subs	r2, r1, r6
   8442e:	2a0f      	cmp	r2, #15
   84430:	ddf2      	ble.n	84418 <_malloc_r+0xf8>
   84432:	68dc      	ldr	r4, [r3, #12]
   84434:	f8d3 c008 	ldr.w	ip, [r3, #8]
   84438:	f046 0801 	orr.w	r8, r6, #1
   8443c:	4628      	mov	r0, r5
   8443e:	441e      	add	r6, r3
   84440:	f042 0501 	orr.w	r5, r2, #1
   84444:	f8c3 8004 	str.w	r8, [r3, #4]
   84448:	f8cc 400c 	str.w	r4, [ip, #12]
   8444c:	f8c4 c008 	str.w	ip, [r4, #8]
   84450:	617e      	str	r6, [r7, #20]
   84452:	613e      	str	r6, [r7, #16]
   84454:	f8c6 e00c 	str.w	lr, [r6, #12]
   84458:	f8c6 e008 	str.w	lr, [r6, #8]
   8445c:	6075      	str	r5, [r6, #4]
   8445e:	505a      	str	r2, [r3, r1]
   84460:	9300      	str	r3, [sp, #0]
   84462:	f000 fac5 	bl	849f0 <__malloc_unlock>
   84466:	9b00      	ldr	r3, [sp, #0]
   84468:	f103 0408 	add.w	r4, r3, #8
   8446c:	e01e      	b.n	844ac <_malloc_r+0x18c>
   8446e:	2910      	cmp	r1, #16
   84470:	d820      	bhi.n	844b4 <_malloc_r+0x194>
   84472:	f000 fab7 	bl	849e4 <__malloc_lock>
   84476:	2610      	movs	r6, #16
   84478:	2318      	movs	r3, #24
   8447a:	2002      	movs	r0, #2
   8447c:	4f72      	ldr	r7, [pc, #456]	; (84648 <_malloc_r+0x328>)
   8447e:	443b      	add	r3, r7
   84480:	685c      	ldr	r4, [r3, #4]
   84482:	f1a3 0208 	sub.w	r2, r3, #8
   84486:	4294      	cmp	r4, r2
   84488:	f000 812f 	beq.w	846ea <_malloc_r+0x3ca>
   8448c:	6863      	ldr	r3, [r4, #4]
   8448e:	68e1      	ldr	r1, [r4, #12]
   84490:	f023 0303 	bic.w	r3, r3, #3
   84494:	4423      	add	r3, r4
   84496:	685a      	ldr	r2, [r3, #4]
   84498:	68a6      	ldr	r6, [r4, #8]
   8449a:	f042 0201 	orr.w	r2, r2, #1
   8449e:	60f1      	str	r1, [r6, #12]
   844a0:	4628      	mov	r0, r5
   844a2:	608e      	str	r6, [r1, #8]
   844a4:	605a      	str	r2, [r3, #4]
   844a6:	f000 faa3 	bl	849f0 <__malloc_unlock>
   844aa:	3408      	adds	r4, #8
   844ac:	4620      	mov	r0, r4
   844ae:	b003      	add	sp, #12
   844b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844b4:	2400      	movs	r4, #0
   844b6:	230c      	movs	r3, #12
   844b8:	4620      	mov	r0, r4
   844ba:	602b      	str	r3, [r5, #0]
   844bc:	b003      	add	sp, #12
   844be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844c2:	2040      	movs	r0, #64	; 0x40
   844c4:	f44f 7100 	mov.w	r1, #512	; 0x200
   844c8:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   844cc:	e74a      	b.n	84364 <_malloc_r+0x44>
   844ce:	4423      	add	r3, r4
   844d0:	685a      	ldr	r2, [r3, #4]
   844d2:	68e1      	ldr	r1, [r4, #12]
   844d4:	e7e0      	b.n	84498 <_malloc_r+0x178>
   844d6:	4423      	add	r3, r4
   844d8:	685a      	ldr	r2, [r3, #4]
   844da:	4628      	mov	r0, r5
   844dc:	f042 0201 	orr.w	r2, r2, #1
   844e0:	605a      	str	r2, [r3, #4]
   844e2:	3408      	adds	r4, #8
   844e4:	f000 fa84 	bl	849f0 <__malloc_unlock>
   844e8:	4620      	mov	r0, r4
   844ea:	b003      	add	sp, #12
   844ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   844f0:	68bc      	ldr	r4, [r7, #8]
   844f2:	6863      	ldr	r3, [r4, #4]
   844f4:	f023 0803 	bic.w	r8, r3, #3
   844f8:	45b0      	cmp	r8, r6
   844fa:	d304      	bcc.n	84506 <_malloc_r+0x1e6>
   844fc:	eba8 0306 	sub.w	r3, r8, r6
   84500:	2b0f      	cmp	r3, #15
   84502:	f300 8085 	bgt.w	84610 <_malloc_r+0x2f0>
   84506:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84660 <_malloc_r+0x340>
   8450a:	4b50      	ldr	r3, [pc, #320]	; (8464c <_malloc_r+0x32c>)
   8450c:	f8d9 2000 	ldr.w	r2, [r9]
   84510:	681b      	ldr	r3, [r3, #0]
   84512:	3201      	adds	r2, #1
   84514:	4433      	add	r3, r6
   84516:	eb04 0a08 	add.w	sl, r4, r8
   8451a:	f000 8154 	beq.w	847c6 <_malloc_r+0x4a6>
   8451e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   84522:	330f      	adds	r3, #15
   84524:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   84528:	f02b 0b0f 	bic.w	fp, fp, #15
   8452c:	4659      	mov	r1, fp
   8452e:	4628      	mov	r0, r5
   84530:	f000 fc1a 	bl	84d68 <_sbrk_r>
   84534:	1c41      	adds	r1, r0, #1
   84536:	4602      	mov	r2, r0
   84538:	f000 80fb 	beq.w	84732 <_malloc_r+0x412>
   8453c:	4582      	cmp	sl, r0
   8453e:	f200 80f6 	bhi.w	8472e <_malloc_r+0x40e>
   84542:	4b43      	ldr	r3, [pc, #268]	; (84650 <_malloc_r+0x330>)
   84544:	6819      	ldr	r1, [r3, #0]
   84546:	4459      	add	r1, fp
   84548:	6019      	str	r1, [r3, #0]
   8454a:	f000 814c 	beq.w	847e6 <_malloc_r+0x4c6>
   8454e:	f8d9 0000 	ldr.w	r0, [r9]
   84552:	3001      	adds	r0, #1
   84554:	bf1b      	ittet	ne
   84556:	eba2 0a0a 	subne.w	sl, r2, sl
   8455a:	4451      	addne	r1, sl
   8455c:	f8c9 2000 	streq.w	r2, [r9]
   84560:	6019      	strne	r1, [r3, #0]
   84562:	f012 0107 	ands.w	r1, r2, #7
   84566:	f000 8114 	beq.w	84792 <_malloc_r+0x472>
   8456a:	f1c1 0008 	rsb	r0, r1, #8
   8456e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84572:	4402      	add	r2, r0
   84574:	3108      	adds	r1, #8
   84576:	eb02 090b 	add.w	r9, r2, fp
   8457a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   8457e:	eba1 0909 	sub.w	r9, r1, r9
   84582:	4649      	mov	r1, r9
   84584:	4628      	mov	r0, r5
   84586:	9301      	str	r3, [sp, #4]
   84588:	9200      	str	r2, [sp, #0]
   8458a:	f000 fbed 	bl	84d68 <_sbrk_r>
   8458e:	1c43      	adds	r3, r0, #1
   84590:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84594:	f000 8142 	beq.w	8481c <_malloc_r+0x4fc>
   84598:	1a80      	subs	r0, r0, r2
   8459a:	4448      	add	r0, r9
   8459c:	f040 0001 	orr.w	r0, r0, #1
   845a0:	6819      	ldr	r1, [r3, #0]
   845a2:	42bc      	cmp	r4, r7
   845a4:	4449      	add	r1, r9
   845a6:	60ba      	str	r2, [r7, #8]
   845a8:	6019      	str	r1, [r3, #0]
   845aa:	6050      	str	r0, [r2, #4]
   845ac:	d017      	beq.n	845de <_malloc_r+0x2be>
   845ae:	f1b8 0f0f 	cmp.w	r8, #15
   845b2:	f240 80fa 	bls.w	847aa <_malloc_r+0x48a>
   845b6:	f04f 0c05 	mov.w	ip, #5
   845ba:	6862      	ldr	r2, [r4, #4]
   845bc:	f1a8 000c 	sub.w	r0, r8, #12
   845c0:	f020 0007 	bic.w	r0, r0, #7
   845c4:	f002 0201 	and.w	r2, r2, #1
   845c8:	eb04 0e00 	add.w	lr, r4, r0
   845cc:	4302      	orrs	r2, r0
   845ce:	280f      	cmp	r0, #15
   845d0:	6062      	str	r2, [r4, #4]
   845d2:	f8ce c004 	str.w	ip, [lr, #4]
   845d6:	f8ce c008 	str.w	ip, [lr, #8]
   845da:	f200 8116 	bhi.w	8480a <_malloc_r+0x4ea>
   845de:	4b1d      	ldr	r3, [pc, #116]	; (84654 <_malloc_r+0x334>)
   845e0:	68bc      	ldr	r4, [r7, #8]
   845e2:	681a      	ldr	r2, [r3, #0]
   845e4:	4291      	cmp	r1, r2
   845e6:	bf88      	it	hi
   845e8:	6019      	strhi	r1, [r3, #0]
   845ea:	4b1b      	ldr	r3, [pc, #108]	; (84658 <_malloc_r+0x338>)
   845ec:	681a      	ldr	r2, [r3, #0]
   845ee:	4291      	cmp	r1, r2
   845f0:	6862      	ldr	r2, [r4, #4]
   845f2:	bf88      	it	hi
   845f4:	6019      	strhi	r1, [r3, #0]
   845f6:	f022 0203 	bic.w	r2, r2, #3
   845fa:	4296      	cmp	r6, r2
   845fc:	eba2 0306 	sub.w	r3, r2, r6
   84600:	d801      	bhi.n	84606 <_malloc_r+0x2e6>
   84602:	2b0f      	cmp	r3, #15
   84604:	dc04      	bgt.n	84610 <_malloc_r+0x2f0>
   84606:	4628      	mov	r0, r5
   84608:	f000 f9f2 	bl	849f0 <__malloc_unlock>
   8460c:	2400      	movs	r4, #0
   8460e:	e74d      	b.n	844ac <_malloc_r+0x18c>
   84610:	f046 0201 	orr.w	r2, r6, #1
   84614:	f043 0301 	orr.w	r3, r3, #1
   84618:	4426      	add	r6, r4
   8461a:	6062      	str	r2, [r4, #4]
   8461c:	4628      	mov	r0, r5
   8461e:	60be      	str	r6, [r7, #8]
   84620:	3408      	adds	r4, #8
   84622:	6073      	str	r3, [r6, #4]
   84624:	f000 f9e4 	bl	849f0 <__malloc_unlock>
   84628:	4620      	mov	r0, r4
   8462a:	b003      	add	sp, #12
   8462c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84630:	2b14      	cmp	r3, #20
   84632:	d970      	bls.n	84716 <_malloc_r+0x3f6>
   84634:	2b54      	cmp	r3, #84	; 0x54
   84636:	f200 80a2 	bhi.w	8477e <_malloc_r+0x45e>
   8463a:	0b33      	lsrs	r3, r6, #12
   8463c:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84640:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84644:	00c1      	lsls	r1, r0, #3
   84646:	e68d      	b.n	84364 <_malloc_r+0x44>
   84648:	20070708 	.word	0x20070708
   8464c:	2007adcc 	.word	0x2007adcc
   84650:	2007ad9c 	.word	0x2007ad9c
   84654:	2007adc4 	.word	0x2007adc4
   84658:	2007adc8 	.word	0x2007adc8
   8465c:	20070710 	.word	0x20070710
   84660:	20070b10 	.word	0x20070b10
   84664:	0a5a      	lsrs	r2, r3, #9
   84666:	2a04      	cmp	r2, #4
   84668:	d95b      	bls.n	84722 <_malloc_r+0x402>
   8466a:	2a14      	cmp	r2, #20
   8466c:	f200 80ae 	bhi.w	847cc <_malloc_r+0x4ac>
   84670:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84674:	00c9      	lsls	r1, r1, #3
   84676:	325b      	adds	r2, #91	; 0x5b
   84678:	eb07 0c01 	add.w	ip, r7, r1
   8467c:	5879      	ldr	r1, [r7, r1]
   8467e:	f1ac 0c08 	sub.w	ip, ip, #8
   84682:	458c      	cmp	ip, r1
   84684:	f000 8088 	beq.w	84798 <_malloc_r+0x478>
   84688:	684a      	ldr	r2, [r1, #4]
   8468a:	f022 0203 	bic.w	r2, r2, #3
   8468e:	4293      	cmp	r3, r2
   84690:	d273      	bcs.n	8477a <_malloc_r+0x45a>
   84692:	6889      	ldr	r1, [r1, #8]
   84694:	458c      	cmp	ip, r1
   84696:	d1f7      	bne.n	84688 <_malloc_r+0x368>
   84698:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8469c:	687a      	ldr	r2, [r7, #4]
   8469e:	60e3      	str	r3, [r4, #12]
   846a0:	f8c4 c008 	str.w	ip, [r4, #8]
   846a4:	609c      	str	r4, [r3, #8]
   846a6:	f8cc 400c 	str.w	r4, [ip, #12]
   846aa:	e69e      	b.n	843ea <_malloc_r+0xca>
   846ac:	f046 0c01 	orr.w	ip, r6, #1
   846b0:	f042 0101 	orr.w	r1, r2, #1
   846b4:	4426      	add	r6, r4
   846b6:	f8c4 c004 	str.w	ip, [r4, #4]
   846ba:	4628      	mov	r0, r5
   846bc:	617e      	str	r6, [r7, #20]
   846be:	613e      	str	r6, [r7, #16]
   846c0:	f8c6 e00c 	str.w	lr, [r6, #12]
   846c4:	f8c6 e008 	str.w	lr, [r6, #8]
   846c8:	6071      	str	r1, [r6, #4]
   846ca:	50e2      	str	r2, [r4, r3]
   846cc:	f000 f990 	bl	849f0 <__malloc_unlock>
   846d0:	3408      	adds	r4, #8
   846d2:	e6eb      	b.n	844ac <_malloc_r+0x18c>
   846d4:	687a      	ldr	r2, [r7, #4]
   846d6:	e688      	b.n	843ea <_malloc_r+0xca>
   846d8:	f108 0801 	add.w	r8, r8, #1
   846dc:	f018 0f03 	tst.w	r8, #3
   846e0:	f10c 0c08 	add.w	ip, ip, #8
   846e4:	f47f ae93 	bne.w	8440e <_malloc_r+0xee>
   846e8:	e02d      	b.n	84746 <_malloc_r+0x426>
   846ea:	68dc      	ldr	r4, [r3, #12]
   846ec:	42a3      	cmp	r3, r4
   846ee:	bf08      	it	eq
   846f0:	3002      	addeq	r0, #2
   846f2:	f43f ae4b 	beq.w	8438c <_malloc_r+0x6c>
   846f6:	e6c9      	b.n	8448c <_malloc_r+0x16c>
   846f8:	461c      	mov	r4, r3
   846fa:	4419      	add	r1, r3
   846fc:	684a      	ldr	r2, [r1, #4]
   846fe:	68db      	ldr	r3, [r3, #12]
   84700:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84704:	f042 0201 	orr.w	r2, r2, #1
   84708:	604a      	str	r2, [r1, #4]
   8470a:	4628      	mov	r0, r5
   8470c:	60f3      	str	r3, [r6, #12]
   8470e:	609e      	str	r6, [r3, #8]
   84710:	f000 f96e 	bl	849f0 <__malloc_unlock>
   84714:	e6ca      	b.n	844ac <_malloc_r+0x18c>
   84716:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8471a:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8471e:	00c1      	lsls	r1, r0, #3
   84720:	e620      	b.n	84364 <_malloc_r+0x44>
   84722:	099a      	lsrs	r2, r3, #6
   84724:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84728:	00c9      	lsls	r1, r1, #3
   8472a:	3238      	adds	r2, #56	; 0x38
   8472c:	e7a4      	b.n	84678 <_malloc_r+0x358>
   8472e:	42bc      	cmp	r4, r7
   84730:	d054      	beq.n	847dc <_malloc_r+0x4bc>
   84732:	68bc      	ldr	r4, [r7, #8]
   84734:	6862      	ldr	r2, [r4, #4]
   84736:	f022 0203 	bic.w	r2, r2, #3
   8473a:	e75e      	b.n	845fa <_malloc_r+0x2da>
   8473c:	f859 3908 	ldr.w	r3, [r9], #-8
   84740:	4599      	cmp	r9, r3
   84742:	f040 8086 	bne.w	84852 <_malloc_r+0x532>
   84746:	f010 0f03 	tst.w	r0, #3
   8474a:	f100 30ff 	add.w	r0, r0, #4294967295
   8474e:	d1f5      	bne.n	8473c <_malloc_r+0x41c>
   84750:	687b      	ldr	r3, [r7, #4]
   84752:	ea23 0304 	bic.w	r3, r3, r4
   84756:	607b      	str	r3, [r7, #4]
   84758:	0064      	lsls	r4, r4, #1
   8475a:	429c      	cmp	r4, r3
   8475c:	f63f aec8 	bhi.w	844f0 <_malloc_r+0x1d0>
   84760:	2c00      	cmp	r4, #0
   84762:	f43f aec5 	beq.w	844f0 <_malloc_r+0x1d0>
   84766:	421c      	tst	r4, r3
   84768:	4640      	mov	r0, r8
   8476a:	f47f ae4c 	bne.w	84406 <_malloc_r+0xe6>
   8476e:	0064      	lsls	r4, r4, #1
   84770:	421c      	tst	r4, r3
   84772:	f100 0004 	add.w	r0, r0, #4
   84776:	d0fa      	beq.n	8476e <_malloc_r+0x44e>
   84778:	e645      	b.n	84406 <_malloc_r+0xe6>
   8477a:	468c      	mov	ip, r1
   8477c:	e78c      	b.n	84698 <_malloc_r+0x378>
   8477e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84782:	d815      	bhi.n	847b0 <_malloc_r+0x490>
   84784:	0bf3      	lsrs	r3, r6, #15
   84786:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8478a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8478e:	00c1      	lsls	r1, r0, #3
   84790:	e5e8      	b.n	84364 <_malloc_r+0x44>
   84792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84796:	e6ee      	b.n	84576 <_malloc_r+0x256>
   84798:	2101      	movs	r1, #1
   8479a:	687b      	ldr	r3, [r7, #4]
   8479c:	1092      	asrs	r2, r2, #2
   8479e:	fa01 f202 	lsl.w	r2, r1, r2
   847a2:	431a      	orrs	r2, r3
   847a4:	607a      	str	r2, [r7, #4]
   847a6:	4663      	mov	r3, ip
   847a8:	e779      	b.n	8469e <_malloc_r+0x37e>
   847aa:	2301      	movs	r3, #1
   847ac:	6053      	str	r3, [r2, #4]
   847ae:	e72a      	b.n	84606 <_malloc_r+0x2e6>
   847b0:	f240 5254 	movw	r2, #1364	; 0x554
   847b4:	4293      	cmp	r3, r2
   847b6:	d822      	bhi.n	847fe <_malloc_r+0x4de>
   847b8:	0cb3      	lsrs	r3, r6, #18
   847ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   847be:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   847c2:	00c1      	lsls	r1, r0, #3
   847c4:	e5ce      	b.n	84364 <_malloc_r+0x44>
   847c6:	f103 0b10 	add.w	fp, r3, #16
   847ca:	e6af      	b.n	8452c <_malloc_r+0x20c>
   847cc:	2a54      	cmp	r2, #84	; 0x54
   847ce:	d829      	bhi.n	84824 <_malloc_r+0x504>
   847d0:	0b1a      	lsrs	r2, r3, #12
   847d2:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   847d6:	00c9      	lsls	r1, r1, #3
   847d8:	326e      	adds	r2, #110	; 0x6e
   847da:	e74d      	b.n	84678 <_malloc_r+0x358>
   847dc:	4b20      	ldr	r3, [pc, #128]	; (84860 <_malloc_r+0x540>)
   847de:	6819      	ldr	r1, [r3, #0]
   847e0:	4459      	add	r1, fp
   847e2:	6019      	str	r1, [r3, #0]
   847e4:	e6b3      	b.n	8454e <_malloc_r+0x22e>
   847e6:	f3ca 000b 	ubfx	r0, sl, #0, #12
   847ea:	2800      	cmp	r0, #0
   847ec:	f47f aeaf 	bne.w	8454e <_malloc_r+0x22e>
   847f0:	eb08 030b 	add.w	r3, r8, fp
   847f4:	68ba      	ldr	r2, [r7, #8]
   847f6:	f043 0301 	orr.w	r3, r3, #1
   847fa:	6053      	str	r3, [r2, #4]
   847fc:	e6ef      	b.n	845de <_malloc_r+0x2be>
   847fe:	207f      	movs	r0, #127	; 0x7f
   84800:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84804:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84808:	e5ac      	b.n	84364 <_malloc_r+0x44>
   8480a:	f104 0108 	add.w	r1, r4, #8
   8480e:	4628      	mov	r0, r5
   84810:	9300      	str	r3, [sp, #0]
   84812:	f7ff fa67 	bl	83ce4 <_free_r>
   84816:	9b00      	ldr	r3, [sp, #0]
   84818:	6819      	ldr	r1, [r3, #0]
   8481a:	e6e0      	b.n	845de <_malloc_r+0x2be>
   8481c:	2001      	movs	r0, #1
   8481e:	f04f 0900 	mov.w	r9, #0
   84822:	e6bd      	b.n	845a0 <_malloc_r+0x280>
   84824:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84828:	d805      	bhi.n	84836 <_malloc_r+0x516>
   8482a:	0bda      	lsrs	r2, r3, #15
   8482c:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84830:	00c9      	lsls	r1, r1, #3
   84832:	3277      	adds	r2, #119	; 0x77
   84834:	e720      	b.n	84678 <_malloc_r+0x358>
   84836:	f240 5154 	movw	r1, #1364	; 0x554
   8483a:	428a      	cmp	r2, r1
   8483c:	d805      	bhi.n	8484a <_malloc_r+0x52a>
   8483e:	0c9a      	lsrs	r2, r3, #18
   84840:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84844:	00c9      	lsls	r1, r1, #3
   84846:	327c      	adds	r2, #124	; 0x7c
   84848:	e716      	b.n	84678 <_malloc_r+0x358>
   8484a:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8484e:	227e      	movs	r2, #126	; 0x7e
   84850:	e712      	b.n	84678 <_malloc_r+0x358>
   84852:	687b      	ldr	r3, [r7, #4]
   84854:	e780      	b.n	84758 <_malloc_r+0x438>
   84856:	08f0      	lsrs	r0, r6, #3
   84858:	f106 0308 	add.w	r3, r6, #8
   8485c:	e60e      	b.n	8447c <_malloc_r+0x15c>
   8485e:	bf00      	nop
   84860:	2007ad9c 	.word	0x2007ad9c

00084864 <__ascii_mbtowc>:
   84864:	b082      	sub	sp, #8
   84866:	b149      	cbz	r1, 8487c <__ascii_mbtowc+0x18>
   84868:	b15a      	cbz	r2, 84882 <__ascii_mbtowc+0x1e>
   8486a:	b16b      	cbz	r3, 84888 <__ascii_mbtowc+0x24>
   8486c:	7813      	ldrb	r3, [r2, #0]
   8486e:	600b      	str	r3, [r1, #0]
   84870:	7812      	ldrb	r2, [r2, #0]
   84872:	1c10      	adds	r0, r2, #0
   84874:	bf18      	it	ne
   84876:	2001      	movne	r0, #1
   84878:	b002      	add	sp, #8
   8487a:	4770      	bx	lr
   8487c:	a901      	add	r1, sp, #4
   8487e:	2a00      	cmp	r2, #0
   84880:	d1f3      	bne.n	8486a <__ascii_mbtowc+0x6>
   84882:	4610      	mov	r0, r2
   84884:	b002      	add	sp, #8
   84886:	4770      	bx	lr
   84888:	f06f 0001 	mvn.w	r0, #1
   8488c:	e7f4      	b.n	84878 <__ascii_mbtowc+0x14>
   8488e:	bf00      	nop

00084890 <memchr>:
   84890:	0783      	lsls	r3, r0, #30
   84892:	b470      	push	{r4, r5, r6}
   84894:	b2cd      	uxtb	r5, r1
   84896:	d03d      	beq.n	84914 <memchr+0x84>
   84898:	1e54      	subs	r4, r2, #1
   8489a:	b30a      	cbz	r2, 848e0 <memchr+0x50>
   8489c:	7803      	ldrb	r3, [r0, #0]
   8489e:	42ab      	cmp	r3, r5
   848a0:	d01f      	beq.n	848e2 <memchr+0x52>
   848a2:	1c43      	adds	r3, r0, #1
   848a4:	e005      	b.n	848b2 <memchr+0x22>
   848a6:	f114 34ff 	adds.w	r4, r4, #4294967295
   848aa:	d319      	bcc.n	848e0 <memchr+0x50>
   848ac:	7802      	ldrb	r2, [r0, #0]
   848ae:	42aa      	cmp	r2, r5
   848b0:	d017      	beq.n	848e2 <memchr+0x52>
   848b2:	f013 0f03 	tst.w	r3, #3
   848b6:	4618      	mov	r0, r3
   848b8:	f103 0301 	add.w	r3, r3, #1
   848bc:	d1f3      	bne.n	848a6 <memchr+0x16>
   848be:	2c03      	cmp	r4, #3
   848c0:	d811      	bhi.n	848e6 <memchr+0x56>
   848c2:	b34c      	cbz	r4, 84918 <memchr+0x88>
   848c4:	7803      	ldrb	r3, [r0, #0]
   848c6:	42ab      	cmp	r3, r5
   848c8:	d00b      	beq.n	848e2 <memchr+0x52>
   848ca:	4404      	add	r4, r0
   848cc:	1c43      	adds	r3, r0, #1
   848ce:	e002      	b.n	848d6 <memchr+0x46>
   848d0:	7802      	ldrb	r2, [r0, #0]
   848d2:	42aa      	cmp	r2, r5
   848d4:	d005      	beq.n	848e2 <memchr+0x52>
   848d6:	429c      	cmp	r4, r3
   848d8:	4618      	mov	r0, r3
   848da:	f103 0301 	add.w	r3, r3, #1
   848de:	d1f7      	bne.n	848d0 <memchr+0x40>
   848e0:	2000      	movs	r0, #0
   848e2:	bc70      	pop	{r4, r5, r6}
   848e4:	4770      	bx	lr
   848e6:	0209      	lsls	r1, r1, #8
   848e8:	b289      	uxth	r1, r1
   848ea:	4329      	orrs	r1, r5
   848ec:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   848f0:	6803      	ldr	r3, [r0, #0]
   848f2:	4606      	mov	r6, r0
   848f4:	404b      	eors	r3, r1
   848f6:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   848fa:	ea22 0303 	bic.w	r3, r2, r3
   848fe:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84902:	f100 0004 	add.w	r0, r0, #4
   84906:	d103      	bne.n	84910 <memchr+0x80>
   84908:	3c04      	subs	r4, #4
   8490a:	2c03      	cmp	r4, #3
   8490c:	d8f0      	bhi.n	848f0 <memchr+0x60>
   8490e:	e7d8      	b.n	848c2 <memchr+0x32>
   84910:	4630      	mov	r0, r6
   84912:	e7d7      	b.n	848c4 <memchr+0x34>
   84914:	4614      	mov	r4, r2
   84916:	e7d2      	b.n	848be <memchr+0x2e>
   84918:	4620      	mov	r0, r4
   8491a:	e7e2      	b.n	848e2 <memchr+0x52>

0008491c <memmove>:
   8491c:	4288      	cmp	r0, r1
   8491e:	b5f0      	push	{r4, r5, r6, r7, lr}
   84920:	d90d      	bls.n	8493e <memmove+0x22>
   84922:	188b      	adds	r3, r1, r2
   84924:	4298      	cmp	r0, r3
   84926:	d20a      	bcs.n	8493e <memmove+0x22>
   84928:	1884      	adds	r4, r0, r2
   8492a:	2a00      	cmp	r2, #0
   8492c:	d051      	beq.n	849d2 <memmove+0xb6>
   8492e:	4622      	mov	r2, r4
   84930:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84934:	4299      	cmp	r1, r3
   84936:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8493a:	d1f9      	bne.n	84930 <memmove+0x14>
   8493c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8493e:	2a0f      	cmp	r2, #15
   84940:	d948      	bls.n	849d4 <memmove+0xb8>
   84942:	ea41 0300 	orr.w	r3, r1, r0
   84946:	079b      	lsls	r3, r3, #30
   84948:	d146      	bne.n	849d8 <memmove+0xbc>
   8494a:	4615      	mov	r5, r2
   8494c:	f100 0410 	add.w	r4, r0, #16
   84950:	f101 0310 	add.w	r3, r1, #16
   84954:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84958:	3d10      	subs	r5, #16
   8495a:	f844 6c10 	str.w	r6, [r4, #-16]
   8495e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84962:	2d0f      	cmp	r5, #15
   84964:	f844 6c0c 	str.w	r6, [r4, #-12]
   84968:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8496c:	f104 0410 	add.w	r4, r4, #16
   84970:	f844 6c18 	str.w	r6, [r4, #-24]
   84974:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84978:	f103 0310 	add.w	r3, r3, #16
   8497c:	f844 6c14 	str.w	r6, [r4, #-20]
   84980:	d8e8      	bhi.n	84954 <memmove+0x38>
   84982:	f1a2 0310 	sub.w	r3, r2, #16
   84986:	f023 030f 	bic.w	r3, r3, #15
   8498a:	f002 0e0f 	and.w	lr, r2, #15
   8498e:	3310      	adds	r3, #16
   84990:	f1be 0f03 	cmp.w	lr, #3
   84994:	4419      	add	r1, r3
   84996:	4403      	add	r3, r0
   84998:	d921      	bls.n	849de <memmove+0xc2>
   8499a:	460e      	mov	r6, r1
   8499c:	4674      	mov	r4, lr
   8499e:	1f1d      	subs	r5, r3, #4
   849a0:	f856 7b04 	ldr.w	r7, [r6], #4
   849a4:	3c04      	subs	r4, #4
   849a6:	2c03      	cmp	r4, #3
   849a8:	f845 7f04 	str.w	r7, [r5, #4]!
   849ac:	d8f8      	bhi.n	849a0 <memmove+0x84>
   849ae:	f1ae 0404 	sub.w	r4, lr, #4
   849b2:	f024 0403 	bic.w	r4, r4, #3
   849b6:	3404      	adds	r4, #4
   849b8:	4421      	add	r1, r4
   849ba:	4423      	add	r3, r4
   849bc:	f002 0203 	and.w	r2, r2, #3
   849c0:	b162      	cbz	r2, 849dc <memmove+0xc0>
   849c2:	3b01      	subs	r3, #1
   849c4:	440a      	add	r2, r1
   849c6:	f811 4b01 	ldrb.w	r4, [r1], #1
   849ca:	428a      	cmp	r2, r1
   849cc:	f803 4f01 	strb.w	r4, [r3, #1]!
   849d0:	d1f9      	bne.n	849c6 <memmove+0xaa>
   849d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   849d4:	4603      	mov	r3, r0
   849d6:	e7f3      	b.n	849c0 <memmove+0xa4>
   849d8:	4603      	mov	r3, r0
   849da:	e7f2      	b.n	849c2 <memmove+0xa6>
   849dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   849de:	4672      	mov	r2, lr
   849e0:	e7ee      	b.n	849c0 <memmove+0xa4>
   849e2:	bf00      	nop

000849e4 <__malloc_lock>:
   849e4:	4801      	ldr	r0, [pc, #4]	; (849ec <__malloc_lock+0x8>)
   849e6:	f7ff bc17 	b.w	84218 <__retarget_lock_acquire_recursive>
   849ea:	bf00      	nop
   849ec:	2007ae04 	.word	0x2007ae04

000849f0 <__malloc_unlock>:
   849f0:	4801      	ldr	r0, [pc, #4]	; (849f8 <__malloc_unlock+0x8>)
   849f2:	f7ff bc13 	b.w	8421c <__retarget_lock_release_recursive>
   849f6:	bf00      	nop
   849f8:	2007ae04 	.word	0x2007ae04

000849fc <_realloc_r>:
   849fc:	2900      	cmp	r1, #0
   849fe:	f000 8094 	beq.w	84b2a <_realloc_r+0x12e>
   84a02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84a06:	460c      	mov	r4, r1
   84a08:	4615      	mov	r5, r2
   84a0a:	b083      	sub	sp, #12
   84a0c:	4680      	mov	r8, r0
   84a0e:	f105 060b 	add.w	r6, r5, #11
   84a12:	f7ff ffe7 	bl	849e4 <__malloc_lock>
   84a16:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84a1a:	2e16      	cmp	r6, #22
   84a1c:	f02e 0703 	bic.w	r7, lr, #3
   84a20:	f1a4 0908 	sub.w	r9, r4, #8
   84a24:	d83c      	bhi.n	84aa0 <_realloc_r+0xa4>
   84a26:	2210      	movs	r2, #16
   84a28:	4616      	mov	r6, r2
   84a2a:	42b5      	cmp	r5, r6
   84a2c:	d83d      	bhi.n	84aaa <_realloc_r+0xae>
   84a2e:	4297      	cmp	r7, r2
   84a30:	da43      	bge.n	84aba <_realloc_r+0xbe>
   84a32:	4bc6      	ldr	r3, [pc, #792]	; (84d4c <_realloc_r+0x350>)
   84a34:	eb09 0007 	add.w	r0, r9, r7
   84a38:	6899      	ldr	r1, [r3, #8]
   84a3a:	4288      	cmp	r0, r1
   84a3c:	f000 80c3 	beq.w	84bc6 <_realloc_r+0x1ca>
   84a40:	6843      	ldr	r3, [r0, #4]
   84a42:	f023 0101 	bic.w	r1, r3, #1
   84a46:	4401      	add	r1, r0
   84a48:	6849      	ldr	r1, [r1, #4]
   84a4a:	07c9      	lsls	r1, r1, #31
   84a4c:	d54d      	bpl.n	84aea <_realloc_r+0xee>
   84a4e:	f01e 0f01 	tst.w	lr, #1
   84a52:	f000 809b 	beq.w	84b8c <_realloc_r+0x190>
   84a56:	4629      	mov	r1, r5
   84a58:	4640      	mov	r0, r8
   84a5a:	f7ff fc61 	bl	84320 <_malloc_r>
   84a5e:	4605      	mov	r5, r0
   84a60:	2800      	cmp	r0, #0
   84a62:	d03b      	beq.n	84adc <_realloc_r+0xe0>
   84a64:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84a68:	f1a0 0208 	sub.w	r2, r0, #8
   84a6c:	f023 0301 	bic.w	r3, r3, #1
   84a70:	444b      	add	r3, r9
   84a72:	429a      	cmp	r2, r3
   84a74:	f000 812b 	beq.w	84cce <_realloc_r+0x2d2>
   84a78:	1f3a      	subs	r2, r7, #4
   84a7a:	2a24      	cmp	r2, #36	; 0x24
   84a7c:	f200 8118 	bhi.w	84cb0 <_realloc_r+0x2b4>
   84a80:	2a13      	cmp	r2, #19
   84a82:	f200 80eb 	bhi.w	84c5c <_realloc_r+0x260>
   84a86:	4603      	mov	r3, r0
   84a88:	4622      	mov	r2, r4
   84a8a:	6811      	ldr	r1, [r2, #0]
   84a8c:	6019      	str	r1, [r3, #0]
   84a8e:	6851      	ldr	r1, [r2, #4]
   84a90:	6059      	str	r1, [r3, #4]
   84a92:	6892      	ldr	r2, [r2, #8]
   84a94:	609a      	str	r2, [r3, #8]
   84a96:	4621      	mov	r1, r4
   84a98:	4640      	mov	r0, r8
   84a9a:	f7ff f923 	bl	83ce4 <_free_r>
   84a9e:	e01d      	b.n	84adc <_realloc_r+0xe0>
   84aa0:	f026 0607 	bic.w	r6, r6, #7
   84aa4:	2e00      	cmp	r6, #0
   84aa6:	4632      	mov	r2, r6
   84aa8:	dabf      	bge.n	84a2a <_realloc_r+0x2e>
   84aaa:	2500      	movs	r5, #0
   84aac:	230c      	movs	r3, #12
   84aae:	4628      	mov	r0, r5
   84ab0:	f8c8 3000 	str.w	r3, [r8]
   84ab4:	b003      	add	sp, #12
   84ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84aba:	4625      	mov	r5, r4
   84abc:	1bbb      	subs	r3, r7, r6
   84abe:	2b0f      	cmp	r3, #15
   84ac0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84ac4:	d81d      	bhi.n	84b02 <_realloc_r+0x106>
   84ac6:	f002 0201 	and.w	r2, r2, #1
   84aca:	433a      	orrs	r2, r7
   84acc:	eb09 0107 	add.w	r1, r9, r7
   84ad0:	f8c9 2004 	str.w	r2, [r9, #4]
   84ad4:	684b      	ldr	r3, [r1, #4]
   84ad6:	f043 0301 	orr.w	r3, r3, #1
   84ada:	604b      	str	r3, [r1, #4]
   84adc:	4640      	mov	r0, r8
   84ade:	f7ff ff87 	bl	849f0 <__malloc_unlock>
   84ae2:	4628      	mov	r0, r5
   84ae4:	b003      	add	sp, #12
   84ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84aea:	f023 0303 	bic.w	r3, r3, #3
   84aee:	18f9      	adds	r1, r7, r3
   84af0:	4291      	cmp	r1, r2
   84af2:	db1d      	blt.n	84b30 <_realloc_r+0x134>
   84af4:	68c3      	ldr	r3, [r0, #12]
   84af6:	6882      	ldr	r2, [r0, #8]
   84af8:	4625      	mov	r5, r4
   84afa:	60d3      	str	r3, [r2, #12]
   84afc:	460f      	mov	r7, r1
   84afe:	609a      	str	r2, [r3, #8]
   84b00:	e7dc      	b.n	84abc <_realloc_r+0xc0>
   84b02:	f002 0201 	and.w	r2, r2, #1
   84b06:	eb09 0106 	add.w	r1, r9, r6
   84b0a:	f043 0301 	orr.w	r3, r3, #1
   84b0e:	4332      	orrs	r2, r6
   84b10:	f8c9 2004 	str.w	r2, [r9, #4]
   84b14:	444f      	add	r7, r9
   84b16:	604b      	str	r3, [r1, #4]
   84b18:	687b      	ldr	r3, [r7, #4]
   84b1a:	3108      	adds	r1, #8
   84b1c:	f043 0301 	orr.w	r3, r3, #1
   84b20:	607b      	str	r3, [r7, #4]
   84b22:	4640      	mov	r0, r8
   84b24:	f7ff f8de 	bl	83ce4 <_free_r>
   84b28:	e7d8      	b.n	84adc <_realloc_r+0xe0>
   84b2a:	4611      	mov	r1, r2
   84b2c:	f7ff bbf8 	b.w	84320 <_malloc_r>
   84b30:	f01e 0f01 	tst.w	lr, #1
   84b34:	d18f      	bne.n	84a56 <_realloc_r+0x5a>
   84b36:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84b3a:	eba9 0a01 	sub.w	sl, r9, r1
   84b3e:	f8da 1004 	ldr.w	r1, [sl, #4]
   84b42:	f021 0103 	bic.w	r1, r1, #3
   84b46:	440b      	add	r3, r1
   84b48:	443b      	add	r3, r7
   84b4a:	4293      	cmp	r3, r2
   84b4c:	db26      	blt.n	84b9c <_realloc_r+0x1a0>
   84b4e:	4655      	mov	r5, sl
   84b50:	68c1      	ldr	r1, [r0, #12]
   84b52:	6880      	ldr	r0, [r0, #8]
   84b54:	1f3a      	subs	r2, r7, #4
   84b56:	60c1      	str	r1, [r0, #12]
   84b58:	6088      	str	r0, [r1, #8]
   84b5a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84b5e:	f8da 100c 	ldr.w	r1, [sl, #12]
   84b62:	2a24      	cmp	r2, #36	; 0x24
   84b64:	60c1      	str	r1, [r0, #12]
   84b66:	6088      	str	r0, [r1, #8]
   84b68:	d826      	bhi.n	84bb8 <_realloc_r+0x1bc>
   84b6a:	2a13      	cmp	r2, #19
   84b6c:	f240 8081 	bls.w	84c72 <_realloc_r+0x276>
   84b70:	6821      	ldr	r1, [r4, #0]
   84b72:	2a1b      	cmp	r2, #27
   84b74:	f8ca 1008 	str.w	r1, [sl, #8]
   84b78:	6861      	ldr	r1, [r4, #4]
   84b7a:	f8ca 100c 	str.w	r1, [sl, #12]
   84b7e:	f200 80ad 	bhi.w	84cdc <_realloc_r+0x2e0>
   84b82:	f104 0008 	add.w	r0, r4, #8
   84b86:	f10a 0210 	add.w	r2, sl, #16
   84b8a:	e074      	b.n	84c76 <_realloc_r+0x27a>
   84b8c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   84b90:	eba9 0a03 	sub.w	sl, r9, r3
   84b94:	f8da 1004 	ldr.w	r1, [sl, #4]
   84b98:	f021 0103 	bic.w	r1, r1, #3
   84b9c:	187b      	adds	r3, r7, r1
   84b9e:	4293      	cmp	r3, r2
   84ba0:	f6ff af59 	blt.w	84a56 <_realloc_r+0x5a>
   84ba4:	4655      	mov	r5, sl
   84ba6:	f8da 100c 	ldr.w	r1, [sl, #12]
   84baa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84bae:	1f3a      	subs	r2, r7, #4
   84bb0:	2a24      	cmp	r2, #36	; 0x24
   84bb2:	60c1      	str	r1, [r0, #12]
   84bb4:	6088      	str	r0, [r1, #8]
   84bb6:	d9d8      	bls.n	84b6a <_realloc_r+0x16e>
   84bb8:	4621      	mov	r1, r4
   84bba:	4628      	mov	r0, r5
   84bbc:	461f      	mov	r7, r3
   84bbe:	46d1      	mov	r9, sl
   84bc0:	f7ff feac 	bl	8491c <memmove>
   84bc4:	e77a      	b.n	84abc <_realloc_r+0xc0>
   84bc6:	6841      	ldr	r1, [r0, #4]
   84bc8:	f106 0010 	add.w	r0, r6, #16
   84bcc:	f021 0b03 	bic.w	fp, r1, #3
   84bd0:	44bb      	add	fp, r7
   84bd2:	4583      	cmp	fp, r0
   84bd4:	da58      	bge.n	84c88 <_realloc_r+0x28c>
   84bd6:	f01e 0f01 	tst.w	lr, #1
   84bda:	f47f af3c 	bne.w	84a56 <_realloc_r+0x5a>
   84bde:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84be2:	eba9 0a01 	sub.w	sl, r9, r1
   84be6:	f8da 1004 	ldr.w	r1, [sl, #4]
   84bea:	f021 0103 	bic.w	r1, r1, #3
   84bee:	448b      	add	fp, r1
   84bf0:	4558      	cmp	r0, fp
   84bf2:	dcd3      	bgt.n	84b9c <_realloc_r+0x1a0>
   84bf4:	4655      	mov	r5, sl
   84bf6:	f8da 100c 	ldr.w	r1, [sl, #12]
   84bfa:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84bfe:	1f3a      	subs	r2, r7, #4
   84c00:	2a24      	cmp	r2, #36	; 0x24
   84c02:	60c1      	str	r1, [r0, #12]
   84c04:	6088      	str	r0, [r1, #8]
   84c06:	f200 808d 	bhi.w	84d24 <_realloc_r+0x328>
   84c0a:	2a13      	cmp	r2, #19
   84c0c:	f240 8087 	bls.w	84d1e <_realloc_r+0x322>
   84c10:	6821      	ldr	r1, [r4, #0]
   84c12:	2a1b      	cmp	r2, #27
   84c14:	f8ca 1008 	str.w	r1, [sl, #8]
   84c18:	6861      	ldr	r1, [r4, #4]
   84c1a:	f8ca 100c 	str.w	r1, [sl, #12]
   84c1e:	f200 8088 	bhi.w	84d32 <_realloc_r+0x336>
   84c22:	f104 0108 	add.w	r1, r4, #8
   84c26:	f10a 0210 	add.w	r2, sl, #16
   84c2a:	6808      	ldr	r0, [r1, #0]
   84c2c:	6010      	str	r0, [r2, #0]
   84c2e:	6848      	ldr	r0, [r1, #4]
   84c30:	6050      	str	r0, [r2, #4]
   84c32:	6889      	ldr	r1, [r1, #8]
   84c34:	6091      	str	r1, [r2, #8]
   84c36:	ebab 0206 	sub.w	r2, fp, r6
   84c3a:	eb0a 0106 	add.w	r1, sl, r6
   84c3e:	f042 0201 	orr.w	r2, r2, #1
   84c42:	6099      	str	r1, [r3, #8]
   84c44:	604a      	str	r2, [r1, #4]
   84c46:	f8da 3004 	ldr.w	r3, [sl, #4]
   84c4a:	4640      	mov	r0, r8
   84c4c:	f003 0301 	and.w	r3, r3, #1
   84c50:	431e      	orrs	r6, r3
   84c52:	f8ca 6004 	str.w	r6, [sl, #4]
   84c56:	f7ff fecb 	bl	849f0 <__malloc_unlock>
   84c5a:	e742      	b.n	84ae2 <_realloc_r+0xe6>
   84c5c:	6823      	ldr	r3, [r4, #0]
   84c5e:	2a1b      	cmp	r2, #27
   84c60:	6003      	str	r3, [r0, #0]
   84c62:	6863      	ldr	r3, [r4, #4]
   84c64:	6043      	str	r3, [r0, #4]
   84c66:	d827      	bhi.n	84cb8 <_realloc_r+0x2bc>
   84c68:	f100 0308 	add.w	r3, r0, #8
   84c6c:	f104 0208 	add.w	r2, r4, #8
   84c70:	e70b      	b.n	84a8a <_realloc_r+0x8e>
   84c72:	4620      	mov	r0, r4
   84c74:	462a      	mov	r2, r5
   84c76:	6801      	ldr	r1, [r0, #0]
   84c78:	461f      	mov	r7, r3
   84c7a:	6011      	str	r1, [r2, #0]
   84c7c:	6841      	ldr	r1, [r0, #4]
   84c7e:	46d1      	mov	r9, sl
   84c80:	6051      	str	r1, [r2, #4]
   84c82:	6883      	ldr	r3, [r0, #8]
   84c84:	6093      	str	r3, [r2, #8]
   84c86:	e719      	b.n	84abc <_realloc_r+0xc0>
   84c88:	ebab 0b06 	sub.w	fp, fp, r6
   84c8c:	eb09 0106 	add.w	r1, r9, r6
   84c90:	f04b 0201 	orr.w	r2, fp, #1
   84c94:	6099      	str	r1, [r3, #8]
   84c96:	604a      	str	r2, [r1, #4]
   84c98:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84c9c:	4640      	mov	r0, r8
   84c9e:	f003 0301 	and.w	r3, r3, #1
   84ca2:	431e      	orrs	r6, r3
   84ca4:	f844 6c04 	str.w	r6, [r4, #-4]
   84ca8:	f7ff fea2 	bl	849f0 <__malloc_unlock>
   84cac:	4625      	mov	r5, r4
   84cae:	e718      	b.n	84ae2 <_realloc_r+0xe6>
   84cb0:	4621      	mov	r1, r4
   84cb2:	f7ff fe33 	bl	8491c <memmove>
   84cb6:	e6ee      	b.n	84a96 <_realloc_r+0x9a>
   84cb8:	68a3      	ldr	r3, [r4, #8]
   84cba:	2a24      	cmp	r2, #36	; 0x24
   84cbc:	6083      	str	r3, [r0, #8]
   84cbe:	68e3      	ldr	r3, [r4, #12]
   84cc0:	60c3      	str	r3, [r0, #12]
   84cc2:	d018      	beq.n	84cf6 <_realloc_r+0x2fa>
   84cc4:	f100 0310 	add.w	r3, r0, #16
   84cc8:	f104 0210 	add.w	r2, r4, #16
   84ccc:	e6dd      	b.n	84a8a <_realloc_r+0x8e>
   84cce:	f850 3c04 	ldr.w	r3, [r0, #-4]
   84cd2:	4625      	mov	r5, r4
   84cd4:	f023 0303 	bic.w	r3, r3, #3
   84cd8:	441f      	add	r7, r3
   84cda:	e6ef      	b.n	84abc <_realloc_r+0xc0>
   84cdc:	68a1      	ldr	r1, [r4, #8]
   84cde:	2a24      	cmp	r2, #36	; 0x24
   84ce0:	f8ca 1010 	str.w	r1, [sl, #16]
   84ce4:	68e1      	ldr	r1, [r4, #12]
   84ce6:	f8ca 1014 	str.w	r1, [sl, #20]
   84cea:	d00d      	beq.n	84d08 <_realloc_r+0x30c>
   84cec:	f104 0010 	add.w	r0, r4, #16
   84cf0:	f10a 0218 	add.w	r2, sl, #24
   84cf4:	e7bf      	b.n	84c76 <_realloc_r+0x27a>
   84cf6:	6922      	ldr	r2, [r4, #16]
   84cf8:	f100 0318 	add.w	r3, r0, #24
   84cfc:	6102      	str	r2, [r0, #16]
   84cfe:	6961      	ldr	r1, [r4, #20]
   84d00:	f104 0218 	add.w	r2, r4, #24
   84d04:	6141      	str	r1, [r0, #20]
   84d06:	e6c0      	b.n	84a8a <_realloc_r+0x8e>
   84d08:	6922      	ldr	r2, [r4, #16]
   84d0a:	f104 0018 	add.w	r0, r4, #24
   84d0e:	f8ca 2018 	str.w	r2, [sl, #24]
   84d12:	6961      	ldr	r1, [r4, #20]
   84d14:	f10a 0220 	add.w	r2, sl, #32
   84d18:	f8ca 101c 	str.w	r1, [sl, #28]
   84d1c:	e7ab      	b.n	84c76 <_realloc_r+0x27a>
   84d1e:	4621      	mov	r1, r4
   84d20:	462a      	mov	r2, r5
   84d22:	e782      	b.n	84c2a <_realloc_r+0x22e>
   84d24:	4621      	mov	r1, r4
   84d26:	4628      	mov	r0, r5
   84d28:	9301      	str	r3, [sp, #4]
   84d2a:	f7ff fdf7 	bl	8491c <memmove>
   84d2e:	9b01      	ldr	r3, [sp, #4]
   84d30:	e781      	b.n	84c36 <_realloc_r+0x23a>
   84d32:	68a1      	ldr	r1, [r4, #8]
   84d34:	2a24      	cmp	r2, #36	; 0x24
   84d36:	f8ca 1010 	str.w	r1, [sl, #16]
   84d3a:	68e1      	ldr	r1, [r4, #12]
   84d3c:	f8ca 1014 	str.w	r1, [sl, #20]
   84d40:	d006      	beq.n	84d50 <_realloc_r+0x354>
   84d42:	f104 0110 	add.w	r1, r4, #16
   84d46:	f10a 0218 	add.w	r2, sl, #24
   84d4a:	e76e      	b.n	84c2a <_realloc_r+0x22e>
   84d4c:	20070708 	.word	0x20070708
   84d50:	6922      	ldr	r2, [r4, #16]
   84d52:	f104 0118 	add.w	r1, r4, #24
   84d56:	f8ca 2018 	str.w	r2, [sl, #24]
   84d5a:	6960      	ldr	r0, [r4, #20]
   84d5c:	f10a 0220 	add.w	r2, sl, #32
   84d60:	f8ca 001c 	str.w	r0, [sl, #28]
   84d64:	e761      	b.n	84c2a <_realloc_r+0x22e>
   84d66:	bf00      	nop

00084d68 <_sbrk_r>:
   84d68:	b538      	push	{r3, r4, r5, lr}
   84d6a:	2300      	movs	r3, #0
   84d6c:	4c06      	ldr	r4, [pc, #24]	; (84d88 <_sbrk_r+0x20>)
   84d6e:	4605      	mov	r5, r0
   84d70:	4608      	mov	r0, r1
   84d72:	6023      	str	r3, [r4, #0]
   84d74:	f7fd fbd4 	bl	82520 <_sbrk>
   84d78:	1c43      	adds	r3, r0, #1
   84d7a:	d000      	beq.n	84d7e <_sbrk_r+0x16>
   84d7c:	bd38      	pop	{r3, r4, r5, pc}
   84d7e:	6823      	ldr	r3, [r4, #0]
   84d80:	2b00      	cmp	r3, #0
   84d82:	d0fb      	beq.n	84d7c <_sbrk_r+0x14>
   84d84:	602b      	str	r3, [r5, #0]
   84d86:	bd38      	pop	{r3, r4, r5, pc}
   84d88:	2007ae18 	.word	0x2007ae18

00084d8c <__sread>:
   84d8c:	b510      	push	{r4, lr}
   84d8e:	460c      	mov	r4, r1
   84d90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84d94:	f000 f9f4 	bl	85180 <_read_r>
   84d98:	2800      	cmp	r0, #0
   84d9a:	db03      	blt.n	84da4 <__sread+0x18>
   84d9c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   84d9e:	4403      	add	r3, r0
   84da0:	6523      	str	r3, [r4, #80]	; 0x50
   84da2:	bd10      	pop	{r4, pc}
   84da4:	89a3      	ldrh	r3, [r4, #12]
   84da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84daa:	81a3      	strh	r3, [r4, #12]
   84dac:	bd10      	pop	{r4, pc}
   84dae:	bf00      	nop

00084db0 <__swrite>:
   84db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   84db4:	460c      	mov	r4, r1
   84db6:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   84dba:	461f      	mov	r7, r3
   84dbc:	05cb      	lsls	r3, r1, #23
   84dbe:	4616      	mov	r6, r2
   84dc0:	4605      	mov	r5, r0
   84dc2:	d507      	bpl.n	84dd4 <__swrite+0x24>
   84dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84dc8:	2302      	movs	r3, #2
   84dca:	2200      	movs	r2, #0
   84dcc:	f000 f9c2 	bl	85154 <_lseek_r>
   84dd0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   84dd4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   84dd8:	81a1      	strh	r1, [r4, #12]
   84dda:	463b      	mov	r3, r7
   84ddc:	4632      	mov	r2, r6
   84dde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84de2:	4628      	mov	r0, r5
   84de4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84de8:	f000 b8a2 	b.w	84f30 <_write_r>

00084dec <__sseek>:
   84dec:	b510      	push	{r4, lr}
   84dee:	460c      	mov	r4, r1
   84df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84df4:	f000 f9ae 	bl	85154 <_lseek_r>
   84df8:	89a3      	ldrh	r3, [r4, #12]
   84dfa:	1c42      	adds	r2, r0, #1
   84dfc:	bf0e      	itee	eq
   84dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   84e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   84e06:	6520      	strne	r0, [r4, #80]	; 0x50
   84e08:	81a3      	strh	r3, [r4, #12]
   84e0a:	bd10      	pop	{r4, pc}

00084e0c <__sclose>:
   84e0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84e10:	f000 b906 	b.w	85020 <_close_r>

00084e14 <__swbuf_r>:
   84e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84e16:	460d      	mov	r5, r1
   84e18:	4614      	mov	r4, r2
   84e1a:	4606      	mov	r6, r0
   84e1c:	b110      	cbz	r0, 84e24 <__swbuf_r+0x10>
   84e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   84e20:	2b00      	cmp	r3, #0
   84e22:	d04b      	beq.n	84ebc <__swbuf_r+0xa8>
   84e24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84e28:	69a3      	ldr	r3, [r4, #24]
   84e2a:	b291      	uxth	r1, r2
   84e2c:	0708      	lsls	r0, r1, #28
   84e2e:	60a3      	str	r3, [r4, #8]
   84e30:	d539      	bpl.n	84ea6 <__swbuf_r+0x92>
   84e32:	6923      	ldr	r3, [r4, #16]
   84e34:	2b00      	cmp	r3, #0
   84e36:	d036      	beq.n	84ea6 <__swbuf_r+0x92>
   84e38:	b2ed      	uxtb	r5, r5
   84e3a:	0489      	lsls	r1, r1, #18
   84e3c:	462f      	mov	r7, r5
   84e3e:	d515      	bpl.n	84e6c <__swbuf_r+0x58>
   84e40:	6822      	ldr	r2, [r4, #0]
   84e42:	6961      	ldr	r1, [r4, #20]
   84e44:	1ad3      	subs	r3, r2, r3
   84e46:	428b      	cmp	r3, r1
   84e48:	da1c      	bge.n	84e84 <__swbuf_r+0x70>
   84e4a:	3301      	adds	r3, #1
   84e4c:	68a1      	ldr	r1, [r4, #8]
   84e4e:	1c50      	adds	r0, r2, #1
   84e50:	3901      	subs	r1, #1
   84e52:	60a1      	str	r1, [r4, #8]
   84e54:	6020      	str	r0, [r4, #0]
   84e56:	7015      	strb	r5, [r2, #0]
   84e58:	6962      	ldr	r2, [r4, #20]
   84e5a:	429a      	cmp	r2, r3
   84e5c:	d01a      	beq.n	84e94 <__swbuf_r+0x80>
   84e5e:	89a3      	ldrh	r3, [r4, #12]
   84e60:	07db      	lsls	r3, r3, #31
   84e62:	d501      	bpl.n	84e68 <__swbuf_r+0x54>
   84e64:	2d0a      	cmp	r5, #10
   84e66:	d015      	beq.n	84e94 <__swbuf_r+0x80>
   84e68:	4638      	mov	r0, r7
   84e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84e6c:	6e61      	ldr	r1, [r4, #100]	; 0x64
   84e6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84e72:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84e76:	81a2      	strh	r2, [r4, #12]
   84e78:	6822      	ldr	r2, [r4, #0]
   84e7a:	6661      	str	r1, [r4, #100]	; 0x64
   84e7c:	6961      	ldr	r1, [r4, #20]
   84e7e:	1ad3      	subs	r3, r2, r3
   84e80:	428b      	cmp	r3, r1
   84e82:	dbe2      	blt.n	84e4a <__swbuf_r+0x36>
   84e84:	4621      	mov	r1, r4
   84e86:	4630      	mov	r0, r6
   84e88:	f7fe fdae 	bl	839e8 <_fflush_r>
   84e8c:	b940      	cbnz	r0, 84ea0 <__swbuf_r+0x8c>
   84e8e:	2301      	movs	r3, #1
   84e90:	6822      	ldr	r2, [r4, #0]
   84e92:	e7db      	b.n	84e4c <__swbuf_r+0x38>
   84e94:	4621      	mov	r1, r4
   84e96:	4630      	mov	r0, r6
   84e98:	f7fe fda6 	bl	839e8 <_fflush_r>
   84e9c:	2800      	cmp	r0, #0
   84e9e:	d0e3      	beq.n	84e68 <__swbuf_r+0x54>
   84ea0:	f04f 37ff 	mov.w	r7, #4294967295
   84ea4:	e7e0      	b.n	84e68 <__swbuf_r+0x54>
   84ea6:	4621      	mov	r1, r4
   84ea8:	4630      	mov	r0, r6
   84eaa:	f7fe fc8d 	bl	837c8 <__swsetup_r>
   84eae:	2800      	cmp	r0, #0
   84eb0:	d1f6      	bne.n	84ea0 <__swbuf_r+0x8c>
   84eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84eb6:	6923      	ldr	r3, [r4, #16]
   84eb8:	b291      	uxth	r1, r2
   84eba:	e7bd      	b.n	84e38 <__swbuf_r+0x24>
   84ebc:	f7fe fdec 	bl	83a98 <__sinit>
   84ec0:	e7b0      	b.n	84e24 <__swbuf_r+0x10>
   84ec2:	bf00      	nop

00084ec4 <_wcrtomb_r>:
   84ec4:	b5f0      	push	{r4, r5, r6, r7, lr}
   84ec6:	4606      	mov	r6, r0
   84ec8:	b085      	sub	sp, #20
   84eca:	461f      	mov	r7, r3
   84ecc:	b189      	cbz	r1, 84ef2 <_wcrtomb_r+0x2e>
   84ece:	4c10      	ldr	r4, [pc, #64]	; (84f10 <_wcrtomb_r+0x4c>)
   84ed0:	4d10      	ldr	r5, [pc, #64]	; (84f14 <_wcrtomb_r+0x50>)
   84ed2:	6824      	ldr	r4, [r4, #0]
   84ed4:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84ed6:	2c00      	cmp	r4, #0
   84ed8:	bf08      	it	eq
   84eda:	462c      	moveq	r4, r5
   84edc:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84ee0:	47a0      	blx	r4
   84ee2:	1c43      	adds	r3, r0, #1
   84ee4:	d103      	bne.n	84eee <_wcrtomb_r+0x2a>
   84ee6:	2200      	movs	r2, #0
   84ee8:	238a      	movs	r3, #138	; 0x8a
   84eea:	603a      	str	r2, [r7, #0]
   84eec:	6033      	str	r3, [r6, #0]
   84eee:	b005      	add	sp, #20
   84ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84ef2:	460c      	mov	r4, r1
   84ef4:	4a06      	ldr	r2, [pc, #24]	; (84f10 <_wcrtomb_r+0x4c>)
   84ef6:	4d07      	ldr	r5, [pc, #28]	; (84f14 <_wcrtomb_r+0x50>)
   84ef8:	6811      	ldr	r1, [r2, #0]
   84efa:	4622      	mov	r2, r4
   84efc:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   84efe:	a901      	add	r1, sp, #4
   84f00:	2c00      	cmp	r4, #0
   84f02:	bf08      	it	eq
   84f04:	462c      	moveq	r4, r5
   84f06:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84f0a:	47a0      	blx	r4
   84f0c:	e7e9      	b.n	84ee2 <_wcrtomb_r+0x1e>
   84f0e:	bf00      	nop
   84f10:	2007016c 	.word	0x2007016c
   84f14:	2007059c 	.word	0x2007059c

00084f18 <__ascii_wctomb>:
   84f18:	b119      	cbz	r1, 84f22 <__ascii_wctomb+0xa>
   84f1a:	2aff      	cmp	r2, #255	; 0xff
   84f1c:	d803      	bhi.n	84f26 <__ascii_wctomb+0xe>
   84f1e:	700a      	strb	r2, [r1, #0]
   84f20:	2101      	movs	r1, #1
   84f22:	4608      	mov	r0, r1
   84f24:	4770      	bx	lr
   84f26:	238a      	movs	r3, #138	; 0x8a
   84f28:	f04f 31ff 	mov.w	r1, #4294967295
   84f2c:	6003      	str	r3, [r0, #0]
   84f2e:	e7f8      	b.n	84f22 <__ascii_wctomb+0xa>

00084f30 <_write_r>:
   84f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84f32:	460e      	mov	r6, r1
   84f34:	2500      	movs	r5, #0
   84f36:	4c08      	ldr	r4, [pc, #32]	; (84f58 <_write_r+0x28>)
   84f38:	4611      	mov	r1, r2
   84f3a:	4607      	mov	r7, r0
   84f3c:	461a      	mov	r2, r3
   84f3e:	4630      	mov	r0, r6
   84f40:	6025      	str	r5, [r4, #0]
   84f42:	f7fc fee5 	bl	81d10 <_write>
   84f46:	1c43      	adds	r3, r0, #1
   84f48:	d000      	beq.n	84f4c <_write_r+0x1c>
   84f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f4c:	6823      	ldr	r3, [r4, #0]
   84f4e:	2b00      	cmp	r3, #0
   84f50:	d0fb      	beq.n	84f4a <_write_r+0x1a>
   84f52:	603b      	str	r3, [r7, #0]
   84f54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84f56:	bf00      	nop
   84f58:	2007ae18 	.word	0x2007ae18

00084f5c <__register_exitproc>:
   84f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84f60:	4d2c      	ldr	r5, [pc, #176]	; (85014 <__register_exitproc+0xb8>)
   84f62:	4606      	mov	r6, r0
   84f64:	6828      	ldr	r0, [r5, #0]
   84f66:	4698      	mov	r8, r3
   84f68:	460f      	mov	r7, r1
   84f6a:	4691      	mov	r9, r2
   84f6c:	f7ff f954 	bl	84218 <__retarget_lock_acquire_recursive>
   84f70:	4b29      	ldr	r3, [pc, #164]	; (85018 <__register_exitproc+0xbc>)
   84f72:	681c      	ldr	r4, [r3, #0]
   84f74:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84f78:	2b00      	cmp	r3, #0
   84f7a:	d03e      	beq.n	84ffa <__register_exitproc+0x9e>
   84f7c:	685a      	ldr	r2, [r3, #4]
   84f7e:	2a1f      	cmp	r2, #31
   84f80:	dc1c      	bgt.n	84fbc <__register_exitproc+0x60>
   84f82:	f102 0e01 	add.w	lr, r2, #1
   84f86:	b176      	cbz	r6, 84fa6 <__register_exitproc+0x4a>
   84f88:	2101      	movs	r1, #1
   84f8a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   84f8e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   84f92:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84f96:	4091      	lsls	r1, r2
   84f98:	4308      	orrs	r0, r1
   84f9a:	2e02      	cmp	r6, #2
   84f9c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84fa0:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84fa4:	d023      	beq.n	84fee <__register_exitproc+0x92>
   84fa6:	3202      	adds	r2, #2
   84fa8:	f8c3 e004 	str.w	lr, [r3, #4]
   84fac:	6828      	ldr	r0, [r5, #0]
   84fae:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   84fb2:	f7ff f933 	bl	8421c <__retarget_lock_release_recursive>
   84fb6:	2000      	movs	r0, #0
   84fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84fbc:	4b17      	ldr	r3, [pc, #92]	; (8501c <__register_exitproc+0xc0>)
   84fbe:	b30b      	cbz	r3, 85004 <__register_exitproc+0xa8>
   84fc0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84fc4:	f7ff f9a4 	bl	84310 <malloc>
   84fc8:	4603      	mov	r3, r0
   84fca:	b1d8      	cbz	r0, 85004 <__register_exitproc+0xa8>
   84fcc:	2000      	movs	r0, #0
   84fce:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   84fd2:	f04f 0e01 	mov.w	lr, #1
   84fd6:	6058      	str	r0, [r3, #4]
   84fd8:	6019      	str	r1, [r3, #0]
   84fda:	4602      	mov	r2, r0
   84fdc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   84fe0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84fe4:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84fe8:	2e00      	cmp	r6, #0
   84fea:	d0dc      	beq.n	84fa6 <__register_exitproc+0x4a>
   84fec:	e7cc      	b.n	84f88 <__register_exitproc+0x2c>
   84fee:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   84ff2:	4301      	orrs	r1, r0
   84ff4:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84ff8:	e7d5      	b.n	84fa6 <__register_exitproc+0x4a>
   84ffa:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   84ffe:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85002:	e7bb      	b.n	84f7c <__register_exitproc+0x20>
   85004:	6828      	ldr	r0, [r5, #0]
   85006:	f7ff f909 	bl	8421c <__retarget_lock_release_recursive>
   8500a:	f04f 30ff 	mov.w	r0, #4294967295
   8500e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   85012:	bf00      	nop
   85014:	20070598 	.word	0x20070598
   85018:	00085538 	.word	0x00085538
   8501c:	00084311 	.word	0x00084311

00085020 <_close_r>:
   85020:	b538      	push	{r3, r4, r5, lr}
   85022:	2300      	movs	r3, #0
   85024:	4c06      	ldr	r4, [pc, #24]	; (85040 <_close_r+0x20>)
   85026:	4605      	mov	r5, r0
   85028:	4608      	mov	r0, r1
   8502a:	6023      	str	r3, [r4, #0]
   8502c:	f7fd fa94 	bl	82558 <_close>
   85030:	1c43      	adds	r3, r0, #1
   85032:	d000      	beq.n	85036 <_close_r+0x16>
   85034:	bd38      	pop	{r3, r4, r5, pc}
   85036:	6823      	ldr	r3, [r4, #0]
   85038:	2b00      	cmp	r3, #0
   8503a:	d0fb      	beq.n	85034 <_close_r+0x14>
   8503c:	602b      	str	r3, [r5, #0]
   8503e:	bd38      	pop	{r3, r4, r5, pc}
   85040:	2007ae18 	.word	0x2007ae18

00085044 <_fclose_r>:
   85044:	b570      	push	{r4, r5, r6, lr}
   85046:	b159      	cbz	r1, 85060 <_fclose_r+0x1c>
   85048:	4605      	mov	r5, r0
   8504a:	460c      	mov	r4, r1
   8504c:	b110      	cbz	r0, 85054 <_fclose_r+0x10>
   8504e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85050:	2b00      	cmp	r3, #0
   85052:	d03c      	beq.n	850ce <_fclose_r+0x8a>
   85054:	6e63      	ldr	r3, [r4, #100]	; 0x64
   85056:	07d8      	lsls	r0, r3, #31
   85058:	d505      	bpl.n	85066 <_fclose_r+0x22>
   8505a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8505e:	b92b      	cbnz	r3, 8506c <_fclose_r+0x28>
   85060:	2600      	movs	r6, #0
   85062:	4630      	mov	r0, r6
   85064:	bd70      	pop	{r4, r5, r6, pc}
   85066:	89a3      	ldrh	r3, [r4, #12]
   85068:	0599      	lsls	r1, r3, #22
   8506a:	d53c      	bpl.n	850e6 <_fclose_r+0xa2>
   8506c:	4621      	mov	r1, r4
   8506e:	4628      	mov	r0, r5
   85070:	f7fe fc1e 	bl	838b0 <__sflush_r>
   85074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85076:	4606      	mov	r6, r0
   85078:	b133      	cbz	r3, 85088 <_fclose_r+0x44>
   8507a:	69e1      	ldr	r1, [r4, #28]
   8507c:	4628      	mov	r0, r5
   8507e:	4798      	blx	r3
   85080:	2800      	cmp	r0, #0
   85082:	bfb8      	it	lt
   85084:	f04f 36ff 	movlt.w	r6, #4294967295
   85088:	89a3      	ldrh	r3, [r4, #12]
   8508a:	061a      	lsls	r2, r3, #24
   8508c:	d422      	bmi.n	850d4 <_fclose_r+0x90>
   8508e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85090:	b141      	cbz	r1, 850a4 <_fclose_r+0x60>
   85092:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85096:	4299      	cmp	r1, r3
   85098:	d002      	beq.n	850a0 <_fclose_r+0x5c>
   8509a:	4628      	mov	r0, r5
   8509c:	f7fe fe22 	bl	83ce4 <_free_r>
   850a0:	2300      	movs	r3, #0
   850a2:	6323      	str	r3, [r4, #48]	; 0x30
   850a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
   850a6:	b121      	cbz	r1, 850b2 <_fclose_r+0x6e>
   850a8:	4628      	mov	r0, r5
   850aa:	f7fe fe1b 	bl	83ce4 <_free_r>
   850ae:	2300      	movs	r3, #0
   850b0:	6463      	str	r3, [r4, #68]	; 0x44
   850b2:	f7fe fd21 	bl	83af8 <__sfp_lock_acquire>
   850b6:	2200      	movs	r2, #0
   850b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   850ba:	81a2      	strh	r2, [r4, #12]
   850bc:	07db      	lsls	r3, r3, #31
   850be:	d50e      	bpl.n	850de <_fclose_r+0x9a>
   850c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   850c2:	f7ff f8a7 	bl	84214 <__retarget_lock_close_recursive>
   850c6:	f7fe fd1d 	bl	83b04 <__sfp_lock_release>
   850ca:	4630      	mov	r0, r6
   850cc:	bd70      	pop	{r4, r5, r6, pc}
   850ce:	f7fe fce3 	bl	83a98 <__sinit>
   850d2:	e7bf      	b.n	85054 <_fclose_r+0x10>
   850d4:	6921      	ldr	r1, [r4, #16]
   850d6:	4628      	mov	r0, r5
   850d8:	f7fe fe04 	bl	83ce4 <_free_r>
   850dc:	e7d7      	b.n	8508e <_fclose_r+0x4a>
   850de:	6da0      	ldr	r0, [r4, #88]	; 0x58
   850e0:	f7ff f89c 	bl	8421c <__retarget_lock_release_recursive>
   850e4:	e7ec      	b.n	850c0 <_fclose_r+0x7c>
   850e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
   850e8:	f7ff f896 	bl	84218 <__retarget_lock_acquire_recursive>
   850ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   850f0:	2b00      	cmp	r3, #0
   850f2:	d1bb      	bne.n	8506c <_fclose_r+0x28>
   850f4:	6e66      	ldr	r6, [r4, #100]	; 0x64
   850f6:	f016 0601 	ands.w	r6, r6, #1
   850fa:	d1b1      	bne.n	85060 <_fclose_r+0x1c>
   850fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   850fe:	f7ff f88d 	bl	8421c <__retarget_lock_release_recursive>
   85102:	4630      	mov	r0, r6
   85104:	bd70      	pop	{r4, r5, r6, pc}
   85106:	bf00      	nop

00085108 <_fstat_r>:
   85108:	b570      	push	{r4, r5, r6, lr}
   8510a:	460d      	mov	r5, r1
   8510c:	2300      	movs	r3, #0
   8510e:	4c07      	ldr	r4, [pc, #28]	; (8512c <_fstat_r+0x24>)
   85110:	4606      	mov	r6, r0
   85112:	4611      	mov	r1, r2
   85114:	4628      	mov	r0, r5
   85116:	6023      	str	r3, [r4, #0]
   85118:	f7fd fa21 	bl	8255e <_fstat>
   8511c:	1c43      	adds	r3, r0, #1
   8511e:	d000      	beq.n	85122 <_fstat_r+0x1a>
   85120:	bd70      	pop	{r4, r5, r6, pc}
   85122:	6823      	ldr	r3, [r4, #0]
   85124:	2b00      	cmp	r3, #0
   85126:	d0fb      	beq.n	85120 <_fstat_r+0x18>
   85128:	6033      	str	r3, [r6, #0]
   8512a:	bd70      	pop	{r4, r5, r6, pc}
   8512c:	2007ae18 	.word	0x2007ae18

00085130 <_isatty_r>:
   85130:	b538      	push	{r3, r4, r5, lr}
   85132:	2300      	movs	r3, #0
   85134:	4c06      	ldr	r4, [pc, #24]	; (85150 <_isatty_r+0x20>)
   85136:	4605      	mov	r5, r0
   85138:	4608      	mov	r0, r1
   8513a:	6023      	str	r3, [r4, #0]
   8513c:	f7fd fa14 	bl	82568 <_isatty>
   85140:	1c43      	adds	r3, r0, #1
   85142:	d000      	beq.n	85146 <_isatty_r+0x16>
   85144:	bd38      	pop	{r3, r4, r5, pc}
   85146:	6823      	ldr	r3, [r4, #0]
   85148:	2b00      	cmp	r3, #0
   8514a:	d0fb      	beq.n	85144 <_isatty_r+0x14>
   8514c:	602b      	str	r3, [r5, #0]
   8514e:	bd38      	pop	{r3, r4, r5, pc}
   85150:	2007ae18 	.word	0x2007ae18

00085154 <_lseek_r>:
   85154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85156:	460e      	mov	r6, r1
   85158:	2500      	movs	r5, #0
   8515a:	4c08      	ldr	r4, [pc, #32]	; (8517c <_lseek_r+0x28>)
   8515c:	4611      	mov	r1, r2
   8515e:	4607      	mov	r7, r0
   85160:	461a      	mov	r2, r3
   85162:	4630      	mov	r0, r6
   85164:	6025      	str	r5, [r4, #0]
   85166:	f7fd fa01 	bl	8256c <_lseek>
   8516a:	1c43      	adds	r3, r0, #1
   8516c:	d000      	beq.n	85170 <_lseek_r+0x1c>
   8516e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85170:	6823      	ldr	r3, [r4, #0]
   85172:	2b00      	cmp	r3, #0
   85174:	d0fb      	beq.n	8516e <_lseek_r+0x1a>
   85176:	603b      	str	r3, [r7, #0]
   85178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8517a:	bf00      	nop
   8517c:	2007ae18 	.word	0x2007ae18

00085180 <_read_r>:
   85180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85182:	460e      	mov	r6, r1
   85184:	2500      	movs	r5, #0
   85186:	4c08      	ldr	r4, [pc, #32]	; (851a8 <_read_r+0x28>)
   85188:	4611      	mov	r1, r2
   8518a:	4607      	mov	r7, r0
   8518c:	461a      	mov	r2, r3
   8518e:	4630      	mov	r0, r6
   85190:	6025      	str	r5, [r4, #0]
   85192:	f7fc fc6b 	bl	81a6c <_read>
   85196:	1c43      	adds	r3, r0, #1
   85198:	d000      	beq.n	8519c <_read_r+0x1c>
   8519a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8519c:	6823      	ldr	r3, [r4, #0]
   8519e:	2b00      	cmp	r3, #0
   851a0:	d0fb      	beq.n	8519a <_read_r+0x1a>
   851a2:	603b      	str	r3, [r7, #0]
   851a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   851a6:	bf00      	nop
   851a8:	2007ae18 	.word	0x2007ae18

000851ac <__aeabi_uldivmod>:
   851ac:	b953      	cbnz	r3, 851c4 <__aeabi_uldivmod+0x18>
   851ae:	b94a      	cbnz	r2, 851c4 <__aeabi_uldivmod+0x18>
   851b0:	2900      	cmp	r1, #0
   851b2:	bf08      	it	eq
   851b4:	2800      	cmpeq	r0, #0
   851b6:	bf1c      	itt	ne
   851b8:	f04f 31ff 	movne.w	r1, #4294967295
   851bc:	f04f 30ff 	movne.w	r0, #4294967295
   851c0:	f000 b97a 	b.w	854b8 <__aeabi_idiv0>
   851c4:	f1ad 0c08 	sub.w	ip, sp, #8
   851c8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   851cc:	f000 f806 	bl	851dc <__udivmoddi4>
   851d0:	f8dd e004 	ldr.w	lr, [sp, #4]
   851d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   851d8:	b004      	add	sp, #16
   851da:	4770      	bx	lr

000851dc <__udivmoddi4>:
   851dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   851e0:	468c      	mov	ip, r1
   851e2:	460e      	mov	r6, r1
   851e4:	4604      	mov	r4, r0
   851e6:	9d08      	ldr	r5, [sp, #32]
   851e8:	2b00      	cmp	r3, #0
   851ea:	d150      	bne.n	8528e <__udivmoddi4+0xb2>
   851ec:	428a      	cmp	r2, r1
   851ee:	4617      	mov	r7, r2
   851f0:	d96c      	bls.n	852cc <__udivmoddi4+0xf0>
   851f2:	fab2 fe82 	clz	lr, r2
   851f6:	f1be 0f00 	cmp.w	lr, #0
   851fa:	d00b      	beq.n	85214 <__udivmoddi4+0x38>
   851fc:	f1ce 0c20 	rsb	ip, lr, #32
   85200:	fa01 f60e 	lsl.w	r6, r1, lr
   85204:	fa20 fc0c 	lsr.w	ip, r0, ip
   85208:	fa02 f70e 	lsl.w	r7, r2, lr
   8520c:	ea4c 0c06 	orr.w	ip, ip, r6
   85210:	fa00 f40e 	lsl.w	r4, r0, lr
   85214:	0c3a      	lsrs	r2, r7, #16
   85216:	fbbc f9f2 	udiv	r9, ip, r2
   8521a:	b2bb      	uxth	r3, r7
   8521c:	fb02 cc19 	mls	ip, r2, r9, ip
   85220:	fb09 fa03 	mul.w	sl, r9, r3
   85224:	ea4f 4814 	mov.w	r8, r4, lsr #16
   85228:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   8522c:	45b2      	cmp	sl, r6
   8522e:	d90a      	bls.n	85246 <__udivmoddi4+0x6a>
   85230:	19f6      	adds	r6, r6, r7
   85232:	f109 31ff 	add.w	r1, r9, #4294967295
   85236:	f080 8125 	bcs.w	85484 <__udivmoddi4+0x2a8>
   8523a:	45b2      	cmp	sl, r6
   8523c:	f240 8122 	bls.w	85484 <__udivmoddi4+0x2a8>
   85240:	f1a9 0902 	sub.w	r9, r9, #2
   85244:	443e      	add	r6, r7
   85246:	eba6 060a 	sub.w	r6, r6, sl
   8524a:	fbb6 f0f2 	udiv	r0, r6, r2
   8524e:	fb02 6610 	mls	r6, r2, r0, r6
   85252:	fb00 f303 	mul.w	r3, r0, r3
   85256:	b2a4      	uxth	r4, r4
   85258:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   8525c:	42a3      	cmp	r3, r4
   8525e:	d909      	bls.n	85274 <__udivmoddi4+0x98>
   85260:	19e4      	adds	r4, r4, r7
   85262:	f100 32ff 	add.w	r2, r0, #4294967295
   85266:	f080 810b 	bcs.w	85480 <__udivmoddi4+0x2a4>
   8526a:	42a3      	cmp	r3, r4
   8526c:	f240 8108 	bls.w	85480 <__udivmoddi4+0x2a4>
   85270:	3802      	subs	r0, #2
   85272:	443c      	add	r4, r7
   85274:	2100      	movs	r1, #0
   85276:	1ae4      	subs	r4, r4, r3
   85278:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8527c:	2d00      	cmp	r5, #0
   8527e:	d062      	beq.n	85346 <__udivmoddi4+0x16a>
   85280:	2300      	movs	r3, #0
   85282:	fa24 f40e 	lsr.w	r4, r4, lr
   85286:	602c      	str	r4, [r5, #0]
   85288:	606b      	str	r3, [r5, #4]
   8528a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8528e:	428b      	cmp	r3, r1
   85290:	d907      	bls.n	852a2 <__udivmoddi4+0xc6>
   85292:	2d00      	cmp	r5, #0
   85294:	d055      	beq.n	85342 <__udivmoddi4+0x166>
   85296:	2100      	movs	r1, #0
   85298:	e885 0041 	stmia.w	r5, {r0, r6}
   8529c:	4608      	mov	r0, r1
   8529e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   852a2:	fab3 f183 	clz	r1, r3
   852a6:	2900      	cmp	r1, #0
   852a8:	f040 808f 	bne.w	853ca <__udivmoddi4+0x1ee>
   852ac:	42b3      	cmp	r3, r6
   852ae:	d302      	bcc.n	852b6 <__udivmoddi4+0xda>
   852b0:	4282      	cmp	r2, r0
   852b2:	f200 80fc 	bhi.w	854ae <__udivmoddi4+0x2d2>
   852b6:	1a84      	subs	r4, r0, r2
   852b8:	eb66 0603 	sbc.w	r6, r6, r3
   852bc:	2001      	movs	r0, #1
   852be:	46b4      	mov	ip, r6
   852c0:	2d00      	cmp	r5, #0
   852c2:	d040      	beq.n	85346 <__udivmoddi4+0x16a>
   852c4:	e885 1010 	stmia.w	r5, {r4, ip}
   852c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   852cc:	b912      	cbnz	r2, 852d4 <__udivmoddi4+0xf8>
   852ce:	2701      	movs	r7, #1
   852d0:	fbb7 f7f2 	udiv	r7, r7, r2
   852d4:	fab7 fe87 	clz	lr, r7
   852d8:	f1be 0f00 	cmp.w	lr, #0
   852dc:	d135      	bne.n	8534a <__udivmoddi4+0x16e>
   852de:	2101      	movs	r1, #1
   852e0:	1bf6      	subs	r6, r6, r7
   852e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   852e6:	fa1f f887 	uxth.w	r8, r7
   852ea:	fbb6 f2fc 	udiv	r2, r6, ip
   852ee:	fb0c 6612 	mls	r6, ip, r2, r6
   852f2:	fb08 f002 	mul.w	r0, r8, r2
   852f6:	0c23      	lsrs	r3, r4, #16
   852f8:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   852fc:	42b0      	cmp	r0, r6
   852fe:	d907      	bls.n	85310 <__udivmoddi4+0x134>
   85300:	19f6      	adds	r6, r6, r7
   85302:	f102 33ff 	add.w	r3, r2, #4294967295
   85306:	d202      	bcs.n	8530e <__udivmoddi4+0x132>
   85308:	42b0      	cmp	r0, r6
   8530a:	f200 80d2 	bhi.w	854b2 <__udivmoddi4+0x2d6>
   8530e:	461a      	mov	r2, r3
   85310:	1a36      	subs	r6, r6, r0
   85312:	fbb6 f0fc 	udiv	r0, r6, ip
   85316:	fb0c 6610 	mls	r6, ip, r0, r6
   8531a:	fb08 f800 	mul.w	r8, r8, r0
   8531e:	b2a3      	uxth	r3, r4
   85320:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   85324:	45a0      	cmp	r8, r4
   85326:	d907      	bls.n	85338 <__udivmoddi4+0x15c>
   85328:	19e4      	adds	r4, r4, r7
   8532a:	f100 33ff 	add.w	r3, r0, #4294967295
   8532e:	d202      	bcs.n	85336 <__udivmoddi4+0x15a>
   85330:	45a0      	cmp	r8, r4
   85332:	f200 80b9 	bhi.w	854a8 <__udivmoddi4+0x2cc>
   85336:	4618      	mov	r0, r3
   85338:	eba4 0408 	sub.w	r4, r4, r8
   8533c:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   85340:	e79c      	b.n	8527c <__udivmoddi4+0xa0>
   85342:	4629      	mov	r1, r5
   85344:	4628      	mov	r0, r5
   85346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8534a:	fa07 f70e 	lsl.w	r7, r7, lr
   8534e:	f1ce 0320 	rsb	r3, lr, #32
   85352:	fa26 f203 	lsr.w	r2, r6, r3
   85356:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   8535a:	fbb2 f1fc 	udiv	r1, r2, ip
   8535e:	fa1f f887 	uxth.w	r8, r7
   85362:	fb0c 2211 	mls	r2, ip, r1, r2
   85366:	fa06 f60e 	lsl.w	r6, r6, lr
   8536a:	fa20 f303 	lsr.w	r3, r0, r3
   8536e:	fb01 f908 	mul.w	r9, r1, r8
   85372:	4333      	orrs	r3, r6
   85374:	0c1e      	lsrs	r6, r3, #16
   85376:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8537a:	45b1      	cmp	r9, r6
   8537c:	fa00 f40e 	lsl.w	r4, r0, lr
   85380:	d909      	bls.n	85396 <__udivmoddi4+0x1ba>
   85382:	19f6      	adds	r6, r6, r7
   85384:	f101 32ff 	add.w	r2, r1, #4294967295
   85388:	f080 808c 	bcs.w	854a4 <__udivmoddi4+0x2c8>
   8538c:	45b1      	cmp	r9, r6
   8538e:	f240 8089 	bls.w	854a4 <__udivmoddi4+0x2c8>
   85392:	3902      	subs	r1, #2
   85394:	443e      	add	r6, r7
   85396:	eba6 0609 	sub.w	r6, r6, r9
   8539a:	fbb6 f0fc 	udiv	r0, r6, ip
   8539e:	fb0c 6210 	mls	r2, ip, r0, r6
   853a2:	fb00 f908 	mul.w	r9, r0, r8
   853a6:	b29e      	uxth	r6, r3
   853a8:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   853ac:	45b1      	cmp	r9, r6
   853ae:	d907      	bls.n	853c0 <__udivmoddi4+0x1e4>
   853b0:	19f6      	adds	r6, r6, r7
   853b2:	f100 33ff 	add.w	r3, r0, #4294967295
   853b6:	d271      	bcs.n	8549c <__udivmoddi4+0x2c0>
   853b8:	45b1      	cmp	r9, r6
   853ba:	d96f      	bls.n	8549c <__udivmoddi4+0x2c0>
   853bc:	3802      	subs	r0, #2
   853be:	443e      	add	r6, r7
   853c0:	eba6 0609 	sub.w	r6, r6, r9
   853c4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   853c8:	e78f      	b.n	852ea <__udivmoddi4+0x10e>
   853ca:	f1c1 0720 	rsb	r7, r1, #32
   853ce:	fa22 f807 	lsr.w	r8, r2, r7
   853d2:	408b      	lsls	r3, r1
   853d4:	ea48 0303 	orr.w	r3, r8, r3
   853d8:	fa26 f407 	lsr.w	r4, r6, r7
   853dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   853e0:	fbb4 f9fe 	udiv	r9, r4, lr
   853e4:	fa1f fc83 	uxth.w	ip, r3
   853e8:	fb0e 4419 	mls	r4, lr, r9, r4
   853ec:	408e      	lsls	r6, r1
   853ee:	fa20 f807 	lsr.w	r8, r0, r7
   853f2:	fb09 fa0c 	mul.w	sl, r9, ip
   853f6:	ea48 0806 	orr.w	r8, r8, r6
   853fa:	ea4f 4618 	mov.w	r6, r8, lsr #16
   853fe:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85402:	45a2      	cmp	sl, r4
   85404:	fa02 f201 	lsl.w	r2, r2, r1
   85408:	fa00 f601 	lsl.w	r6, r0, r1
   8540c:	d908      	bls.n	85420 <__udivmoddi4+0x244>
   8540e:	18e4      	adds	r4, r4, r3
   85410:	f109 30ff 	add.w	r0, r9, #4294967295
   85414:	d244      	bcs.n	854a0 <__udivmoddi4+0x2c4>
   85416:	45a2      	cmp	sl, r4
   85418:	d942      	bls.n	854a0 <__udivmoddi4+0x2c4>
   8541a:	f1a9 0902 	sub.w	r9, r9, #2
   8541e:	441c      	add	r4, r3
   85420:	eba4 040a 	sub.w	r4, r4, sl
   85424:	fbb4 f0fe 	udiv	r0, r4, lr
   85428:	fb0e 4410 	mls	r4, lr, r0, r4
   8542c:	fb00 fc0c 	mul.w	ip, r0, ip
   85430:	fa1f f888 	uxth.w	r8, r8
   85434:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   85438:	45a4      	cmp	ip, r4
   8543a:	d907      	bls.n	8544c <__udivmoddi4+0x270>
   8543c:	18e4      	adds	r4, r4, r3
   8543e:	f100 3eff 	add.w	lr, r0, #4294967295
   85442:	d229      	bcs.n	85498 <__udivmoddi4+0x2bc>
   85444:	45a4      	cmp	ip, r4
   85446:	d927      	bls.n	85498 <__udivmoddi4+0x2bc>
   85448:	3802      	subs	r0, #2
   8544a:	441c      	add	r4, r3
   8544c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   85450:	fba0 8902 	umull	r8, r9, r0, r2
   85454:	eba4 0c0c 	sub.w	ip, r4, ip
   85458:	45cc      	cmp	ip, r9
   8545a:	46c2      	mov	sl, r8
   8545c:	46ce      	mov	lr, r9
   8545e:	d315      	bcc.n	8548c <__udivmoddi4+0x2b0>
   85460:	d012      	beq.n	85488 <__udivmoddi4+0x2ac>
   85462:	b155      	cbz	r5, 8547a <__udivmoddi4+0x29e>
   85464:	ebb6 030a 	subs.w	r3, r6, sl
   85468:	eb6c 060e 	sbc.w	r6, ip, lr
   8546c:	fa06 f707 	lsl.w	r7, r6, r7
   85470:	40cb      	lsrs	r3, r1
   85472:	431f      	orrs	r7, r3
   85474:	40ce      	lsrs	r6, r1
   85476:	602f      	str	r7, [r5, #0]
   85478:	606e      	str	r6, [r5, #4]
   8547a:	2100      	movs	r1, #0
   8547c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85480:	4610      	mov	r0, r2
   85482:	e6f7      	b.n	85274 <__udivmoddi4+0x98>
   85484:	4689      	mov	r9, r1
   85486:	e6de      	b.n	85246 <__udivmoddi4+0x6a>
   85488:	4546      	cmp	r6, r8
   8548a:	d2ea      	bcs.n	85462 <__udivmoddi4+0x286>
   8548c:	ebb8 0a02 	subs.w	sl, r8, r2
   85490:	eb69 0e03 	sbc.w	lr, r9, r3
   85494:	3801      	subs	r0, #1
   85496:	e7e4      	b.n	85462 <__udivmoddi4+0x286>
   85498:	4670      	mov	r0, lr
   8549a:	e7d7      	b.n	8544c <__udivmoddi4+0x270>
   8549c:	4618      	mov	r0, r3
   8549e:	e78f      	b.n	853c0 <__udivmoddi4+0x1e4>
   854a0:	4681      	mov	r9, r0
   854a2:	e7bd      	b.n	85420 <__udivmoddi4+0x244>
   854a4:	4611      	mov	r1, r2
   854a6:	e776      	b.n	85396 <__udivmoddi4+0x1ba>
   854a8:	3802      	subs	r0, #2
   854aa:	443c      	add	r4, r7
   854ac:	e744      	b.n	85338 <__udivmoddi4+0x15c>
   854ae:	4608      	mov	r0, r1
   854b0:	e706      	b.n	852c0 <__udivmoddi4+0xe4>
   854b2:	3a02      	subs	r2, #2
   854b4:	443e      	add	r6, r7
   854b6:	e72b      	b.n	85310 <__udivmoddi4+0x134>

000854b8 <__aeabi_idiv0>:
   854b8:	4770      	bx	lr
   854ba:	bf00      	nop
   854bc:	736e6f43 	.word	0x736e6f43
   854c0:	20656c6f 	.word	0x20656c6f
   854c4:	64616572 	.word	0x64616572
   854c8:	00000a79 	.word	0x00000a79
   854cc:	3d3d3d3d 	.word	0x3d3d3d3d
   854d0:	3d3d3d3d 	.word	0x3d3d3d3d
   854d4:	3d3d3d3d 	.word	0x3d3d3d3d
   854d8:	00000a3d 	.word	0x00000a3d
   854dc:	6b736174 	.word	0x6b736174
   854e0:	0a534f50 	.word	0x0a534f50
   854e4:	00000000 	.word	0x00000000
   854e8:	736f7078 	.word	0x736f7078
   854ec:	0a692520 	.word	0x0a692520
   854f0:	00000000 	.word	0x00000000
   854f4:	736f7079 	.word	0x736f7079
   854f8:	0a692520 	.word	0x0a692520
   854fc:	00000000 	.word	0x00000000
   85500:	6c756f43 	.word	0x6c756f43
   85504:	74276e64 	.word	0x74276e64
   85508:	61657220 	.word	0x61657220
   8550c:	6f702064 	.word	0x6f702064
   85510:	69746973 	.word	0x69746973
   85514:	000a6e6f 	.word	0x000a6e6f
   85518:	454c4449 	.word	0x454c4449
   8551c:	00000000 	.word	0x00000000
   85520:	20726d54 	.word	0x20726d54
   85524:	00637653 	.word	0x00637653
   85528:	72617473 	.word	0x72617473
   8552c:	00707574 	.word	0x00707574
   85530:	6b736174 	.word	0x6b736174
   85534:	00534f50 	.word	0x00534f50

00085538 <_global_impure_ptr>:
   85538:	20070170 33323130 37363534 42413938     p.. 0123456789AB
   85548:	46454443 00000000 33323130 37363534     CDEF....01234567
   85558:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85568:	0000296c                                l)..

0008556c <blanks.7217>:
   8556c:	20202020 20202020 20202020 20202020                     

0008557c <zeroes.7218>:
   8557c:	30303030 30303030 30303030 30303030     0000000000000000
   8558c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008559c <_ctype_>:
   8559c:	20202000 20202020 28282020 20282828     .         ((((( 
   855ac:	20202020 20202020 20202020 20202020                     
   855bc:	10108820 10101010 10101010 10101010      ...............
   855cc:	04040410 04040404 10040404 10101010     ................
   855dc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   855ec:	01010101 01010101 01010101 10101010     ................
   855fc:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8560c:	02020202 02020202 02020202 10101010     ................
   8561c:	00000020 00000000 00000000 00000000      ...............
	...

000856a0 <_init>:
   856a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   856a2:	bf00      	nop
   856a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856a6:	bc08      	pop	{r3}
   856a8:	469e      	mov	lr, r3
   856aa:	4770      	bx	lr

000856ac <__init_array_start>:
   856ac:	00083891 	.word	0x00083891

000856b0 <__frame_dummy_init_array_entry>:
   856b0:	00080119                                ....

000856b4 <_fini>:
   856b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   856b6:	bf00      	nop
   856b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   856ba:	bc08      	pop	{r3}
   856bc:	469e      	mov	lr, r3
   856be:	4770      	bx	lr

000856c0 <__fini_array_start>:
   856c0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070168 	.word	0x20070168

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <packet_rec_pab>:
	...
20070134:	20070b34 00000001 00000008              4.. ........

20070140 <packet_rec_pos>:
	...
20070148:	20070b38 0000000a 00000010              8.. ........

20070154 <target>:
20070154:	00000002                                ....

20070158 <uxCriticalNesting>:
20070158:	aaaaaaaa                                ....

2007015c <xFreeBytesRemaining>:
2007015c:	0000a000                                ....

20070160 <xNextTaskUnblockTime>:
20070160:	ffffffff                                ....

20070164 <g_interrupt_enabled>:
20070164:	00000001                                ....

20070168 <SystemCoreClock>:
20070168:	003d0900                                ..=.

2007016c <_impure_ptr>:
2007016c:	20070170                                p.. 

20070170 <impure_data>:
20070170:	00000000 2007045c 200704c4 2007052c     ....\.. ... ,.. 
	...
20070218:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070228:	0005deec 0000000b 00000000 00000000     ................
	...

20070598 <__atexit_recursive_mutex>:
20070598:	2007adf4                                ... 

2007059c <__global_locale>:
2007059c:	00000043 00000000 00000000 00000000     C...............
	...
200705bc:	00000043 00000000 00000000 00000000     C...............
	...
200705dc:	00000043 00000000 00000000 00000000     C...............
	...
200705fc:	00000043 00000000 00000000 00000000     C...............
	...
2007061c:	00000043 00000000 00000000 00000000     C...............
	...
2007063c:	00000043 00000000 00000000 00000000     C...............
	...
2007065c:	00000043 00000000 00000000 00000000     C...............
	...
2007067c:	00084f19 00084865 00000000 0008559c     .O..eH.......U..
2007068c:	00085598 000854e4 000854e4 000854e4     .U...T...T...T..
2007069c:	000854e4 000854e4 000854e4 000854e4     .T...T...T...T..
200706ac:	000854e4 000854e4 ffffffff ffffffff     .T...T..........
200706bc:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706e4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

20070708 <__malloc_av_>:
	...
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 
20070b00:	20070af8 20070af8 20070b00 20070b00     ... ... ... ... 

20070b10 <__malloc_sbrk_base>:
20070b10:	ffffffff                                ....

20070b14 <__malloc_trim_threshold>:
20070b14:	00020000                                ....

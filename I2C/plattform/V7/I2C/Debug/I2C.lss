
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000409c  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008409c  0008409c  0001409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae8  20070000  000840a4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000220  20070ae8  00084b8c  00020ae8  2**2
                  ALLOC
  4 .stack        00002000  20070d08  00084dac  00020ae8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b11  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001acee  00000000  00000000  00020b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003fb7  00000000  00000000  0003b858  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000643e  00000000  00000000  0003f80f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d10  00000000  00000000  00045c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cc8  00000000  00000000  0004695d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019d8d  00000000  00000000  00047625  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00012d9f  00000000  00000000  000613b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00069a89  00000000  00000000  00074151  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002ac0  00000000  00000000  000ddbdc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	08 2d 07 20 49 0e 08 00 45 0e 08 00 45 0e 08 00     .-. I...E...E...
   80010:	45 0e 08 00 45 0e 08 00 45 0e 08 00 00 00 00 00     E...E...E.......
	...
   8002c:	a5 01 08 00 45 0e 08 00 00 00 00 00 dd 01 08 00     ....E...........
   8003c:	19 02 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     ....E...E...E...
   8004c:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...
   8005c:	45 0e 08 00 45 0e 08 00 45 0e 08 00 00 00 00 00     E...E...E.......
   8006c:	b9 0c 08 00 cd 0c 08 00 e1 0c 08 00 f5 0c 08 00     ................
	...
   80084:	49 07 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     I...E...E...E...
   80094:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...
   800a4:	00 00 00 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     ....E...E...E...
   800b4:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...
   800c4:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...
   800d4:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...
   800e4:	45 0e 08 00 45 0e 08 00 45 0e 08 00 45 0e 08 00     E...E...E...E...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae8 	.word	0x20070ae8
   80110:	00000000 	.word	0x00000000
   80114:	000840a4 	.word	0x000840a4

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000840a4 	.word	0x000840a4
   80154:	20070aec 	.word	0x20070aec
   80158:	000840a4 	.word	0x000840a4
   8015c:	00000000 	.word	0x00000000

00080160 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80160:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80162:	685a      	ldr	r2, [r3, #4]
   80164:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80166:	6842      	ldr	r2, [r0, #4]
   80168:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8016a:	685a      	ldr	r2, [r3, #4]
   8016c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8016e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80170:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80172:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80174:	6803      	ldr	r3, [r0, #0]
   80176:	3301      	adds	r3, #1
   80178:	6003      	str	r3, [r0, #0]
   8017a:	4770      	bx	lr

0008017c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   8017c:	6843      	ldr	r3, [r0, #4]
   8017e:	6882      	ldr	r2, [r0, #8]
   80180:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80182:	6883      	ldr	r3, [r0, #8]
   80184:	6842      	ldr	r2, [r0, #4]
   80186:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80188:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   8018a:	685a      	ldr	r2, [r3, #4]
   8018c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8018e:	bf04      	itt	eq
   80190:	6882      	ldreq	r2, [r0, #8]
   80192:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80194:	2200      	movs	r2, #0
   80196:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80198:	681a      	ldr	r2, [r3, #0]
   8019a:	3a01      	subs	r2, #1
   8019c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8019e:	6818      	ldr	r0, [r3, #0]
}
   801a0:	4770      	bx	lr
	...

000801a4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   801a4:	4b06      	ldr	r3, [pc, #24]	; (801c0 <pxCurrentTCBConst2>)
   801a6:	6819      	ldr	r1, [r3, #0]
   801a8:	6808      	ldr	r0, [r1, #0]
   801aa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   801ae:	f380 8809 	msr	PSP, r0
   801b2:	f04f 0000 	mov.w	r0, #0
   801b6:	f380 8811 	msr	BASEPRI, r0
   801ba:	f04e 0e0d 	orr.w	lr, lr, #13
   801be:	4770      	bx	lr

000801c0 <pxCurrentTCBConst2>:
   801c0:	20070b04 	.word	0x20070b04

000801c4 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   801c4:	f3ef 8011 	mrs	r0, BASEPRI
   801c8:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   801cc:	f381 8811 	msr	BASEPRI, r1
   801d0:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   801d2:	2000      	movs	r0, #0

000801d4 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   801d4:	f380 8811 	msr	BASEPRI, r0
   801d8:	4770      	bx	lr
	...

000801dc <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   801dc:	f3ef 8009 	mrs	r0, PSP
   801e0:	4b0c      	ldr	r3, [pc, #48]	; (80214 <pxCurrentTCBConst>)
   801e2:	681a      	ldr	r2, [r3, #0]
   801e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   801e8:	6010      	str	r0, [r2, #0]
   801ea:	e92d 4008 	stmdb	sp!, {r3, lr}
   801ee:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   801f2:	f380 8811 	msr	BASEPRI, r0
   801f6:	f000 f8b9 	bl	8036c <vTaskSwitchContext>
   801fa:	f04f 0000 	mov.w	r0, #0
   801fe:	f380 8811 	msr	BASEPRI, r0
   80202:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80206:	6819      	ldr	r1, [r3, #0]
   80208:	6808      	ldr	r0, [r1, #0]
   8020a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8020e:	f380 8809 	msr	PSP, r0
   80212:	4770      	bx	lr

00080214 <pxCurrentTCBConst>:
   80214:	20070b04 	.word	0x20070b04

00080218 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80218:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8021a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8021e:	4b05      	ldr	r3, [pc, #20]	; (80234 <SysTick_Handler+0x1c>)
   80220:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80222:	4b05      	ldr	r3, [pc, #20]	; (80238 <SysTick_Handler+0x20>)
   80224:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80226:	4b05      	ldr	r3, [pc, #20]	; (8023c <SysTick_Handler+0x24>)
   80228:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8022a:	2000      	movs	r0, #0
   8022c:	4b04      	ldr	r3, [pc, #16]	; (80240 <SysTick_Handler+0x28>)
   8022e:	4798      	blx	r3
   80230:	bd08      	pop	{r3, pc}
   80232:	bf00      	nop
   80234:	e000ed04 	.word	0xe000ed04
   80238:	000801c5 	.word	0x000801c5
   8023c:	00080245 	.word	0x00080245
   80240:	000801d5 	.word	0x000801d5

00080244 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80244:	4b3d      	ldr	r3, [pc, #244]	; (8033c <vTaskIncrementTick+0xf8>)
   80246:	681b      	ldr	r3, [r3, #0]
   80248:	2b00      	cmp	r3, #0
   8024a:	d16f      	bne.n	8032c <vTaskIncrementTick+0xe8>
{
   8024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80250:	4b3b      	ldr	r3, [pc, #236]	; (80340 <vTaskIncrementTick+0xfc>)
   80252:	681a      	ldr	r2, [r3, #0]
   80254:	3201      	adds	r2, #1
   80256:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80258:	681b      	ldr	r3, [r3, #0]
   8025a:	b9ab      	cbnz	r3, 80288 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8025c:	4b39      	ldr	r3, [pc, #228]	; (80344 <vTaskIncrementTick+0x100>)
   8025e:	681b      	ldr	r3, [r3, #0]
   80260:	681b      	ldr	r3, [r3, #0]
   80262:	2b00      	cmp	r3, #0
   80264:	d128      	bne.n	802b8 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80266:	4b37      	ldr	r3, [pc, #220]	; (80344 <vTaskIncrementTick+0x100>)
   80268:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8026a:	4a37      	ldr	r2, [pc, #220]	; (80348 <vTaskIncrementTick+0x104>)
   8026c:	6810      	ldr	r0, [r2, #0]
   8026e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80270:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80272:	4936      	ldr	r1, [pc, #216]	; (8034c <vTaskIncrementTick+0x108>)
   80274:	680a      	ldr	r2, [r1, #0]
   80276:	3201      	adds	r2, #1
   80278:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8027a:	681b      	ldr	r3, [r3, #0]
   8027c:	681b      	ldr	r3, [r3, #0]
   8027e:	b9fb      	cbnz	r3, 802c0 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80280:	f04f 32ff 	mov.w	r2, #4294967295
   80284:	4b32      	ldr	r3, [pc, #200]	; (80350 <vTaskIncrementTick+0x10c>)
   80286:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80288:	4b2d      	ldr	r3, [pc, #180]	; (80340 <vTaskIncrementTick+0xfc>)
   8028a:	681a      	ldr	r2, [r3, #0]
   8028c:	4b30      	ldr	r3, [pc, #192]	; (80350 <vTaskIncrementTick+0x10c>)
   8028e:	681b      	ldr	r3, [r3, #0]
   80290:	429a      	cmp	r2, r3
   80292:	d350      	bcc.n	80336 <vTaskIncrementTick+0xf2>
   80294:	4b2b      	ldr	r3, [pc, #172]	; (80344 <vTaskIncrementTick+0x100>)
   80296:	681b      	ldr	r3, [r3, #0]
   80298:	681b      	ldr	r3, [r3, #0]
   8029a:	b1cb      	cbz	r3, 802d0 <vTaskIncrementTick+0x8c>
   8029c:	4b29      	ldr	r3, [pc, #164]	; (80344 <vTaskIncrementTick+0x100>)
   8029e:	681b      	ldr	r3, [r3, #0]
   802a0:	68db      	ldr	r3, [r3, #12]
   802a2:	68dc      	ldr	r4, [r3, #12]
   802a4:	6863      	ldr	r3, [r4, #4]
   802a6:	4a26      	ldr	r2, [pc, #152]	; (80340 <vTaskIncrementTick+0xfc>)
   802a8:	6812      	ldr	r2, [r2, #0]
   802aa:	4293      	cmp	r3, r2
   802ac:	d816      	bhi.n	802dc <vTaskIncrementTick+0x98>
   802ae:	4e29      	ldr	r6, [pc, #164]	; (80354 <vTaskIncrementTick+0x110>)
   802b0:	4f29      	ldr	r7, [pc, #164]	; (80358 <vTaskIncrementTick+0x114>)
   802b2:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80368 <vTaskIncrementTick+0x124>
   802b6:	e02f      	b.n	80318 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   802b8:	4b28      	ldr	r3, [pc, #160]	; (8035c <vTaskIncrementTick+0x118>)
   802ba:	4798      	blx	r3
   802bc:	bf00      	nop
   802be:	e7fd      	b.n	802bc <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   802c0:	4b20      	ldr	r3, [pc, #128]	; (80344 <vTaskIncrementTick+0x100>)
   802c2:	681b      	ldr	r3, [r3, #0]
   802c4:	68db      	ldr	r3, [r3, #12]
   802c6:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   802c8:	685a      	ldr	r2, [r3, #4]
   802ca:	4b21      	ldr	r3, [pc, #132]	; (80350 <vTaskIncrementTick+0x10c>)
   802cc:	601a      	str	r2, [r3, #0]
   802ce:	e7db      	b.n	80288 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   802d0:	f04f 32ff 	mov.w	r2, #4294967295
   802d4:	4b1e      	ldr	r3, [pc, #120]	; (80350 <vTaskIncrementTick+0x10c>)
   802d6:	601a      	str	r2, [r3, #0]
   802d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802dc:	4a1c      	ldr	r2, [pc, #112]	; (80350 <vTaskIncrementTick+0x10c>)
   802de:	6013      	str	r3, [r2, #0]
   802e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   802e4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	4298      	cmp	r0, r3
   802ea:	bf88      	it	hi
   802ec:	6038      	strhi	r0, [r7, #0]
   802ee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   802f2:	4629      	mov	r1, r5
   802f4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   802f8:	4b19      	ldr	r3, [pc, #100]	; (80360 <vTaskIncrementTick+0x11c>)
   802fa:	4798      	blx	r3
   802fc:	4b11      	ldr	r3, [pc, #68]	; (80344 <vTaskIncrementTick+0x100>)
   802fe:	681b      	ldr	r3, [r3, #0]
   80300:	681b      	ldr	r3, [r3, #0]
   80302:	2b00      	cmp	r3, #0
   80304:	d0e4      	beq.n	802d0 <vTaskIncrementTick+0x8c>
   80306:	4b0f      	ldr	r3, [pc, #60]	; (80344 <vTaskIncrementTick+0x100>)
   80308:	681b      	ldr	r3, [r3, #0]
   8030a:	68db      	ldr	r3, [r3, #12]
   8030c:	68dc      	ldr	r4, [r3, #12]
   8030e:	6863      	ldr	r3, [r4, #4]
   80310:	4a0b      	ldr	r2, [pc, #44]	; (80340 <vTaskIncrementTick+0xfc>)
   80312:	6812      	ldr	r2, [r2, #0]
   80314:	4293      	cmp	r3, r2
   80316:	d8e1      	bhi.n	802dc <vTaskIncrementTick+0x98>
   80318:	1d25      	adds	r5, r4, #4
   8031a:	4628      	mov	r0, r5
   8031c:	47b0      	blx	r6
   8031e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80320:	2b00      	cmp	r3, #0
   80322:	d0df      	beq.n	802e4 <vTaskIncrementTick+0xa0>
   80324:	f104 0018 	add.w	r0, r4, #24
   80328:	47b0      	blx	r6
   8032a:	e7db      	b.n	802e4 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   8032c:	4a0d      	ldr	r2, [pc, #52]	; (80364 <vTaskIncrementTick+0x120>)
   8032e:	6813      	ldr	r3, [r2, #0]
   80330:	3301      	adds	r3, #1
   80332:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80334:	4770      	bx	lr
   80336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8033a:	bf00      	nop
   8033c:	20070b78 	.word	0x20070b78
   80340:	20070b88 	.word	0x20070b88
   80344:	20070b08 	.word	0x20070b08
   80348:	20070b0c 	.word	0x20070b0c
   8034c:	20070b84 	.word	0x20070b84
   80350:	2007012c 	.word	0x2007012c
   80354:	0008017d 	.word	0x0008017d
   80358:	20070b7c 	.word	0x20070b7c
   8035c:	000801c5 	.word	0x000801c5
   80360:	00080161 	.word	0x00080161
   80364:	20070b74 	.word	0x20070b74
   80368:	20070b10 	.word	0x20070b10

0008036c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   8036c:	4b21      	ldr	r3, [pc, #132]	; (803f4 <vTaskSwitchContext+0x88>)
   8036e:	681b      	ldr	r3, [r3, #0]
   80370:	b9eb      	cbnz	r3, 803ae <vTaskSwitchContext+0x42>
{
   80372:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80374:	4b20      	ldr	r3, [pc, #128]	; (803f8 <vTaskSwitchContext+0x8c>)
   80376:	681b      	ldr	r3, [r3, #0]
   80378:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8037c:	009b      	lsls	r3, r3, #2
   8037e:	4a1f      	ldr	r2, [pc, #124]	; (803fc <vTaskSwitchContext+0x90>)
   80380:	58d3      	ldr	r3, [r2, r3]
   80382:	b9c3      	cbnz	r3, 803b6 <vTaskSwitchContext+0x4a>
   80384:	4b1c      	ldr	r3, [pc, #112]	; (803f8 <vTaskSwitchContext+0x8c>)
   80386:	681b      	ldr	r3, [r3, #0]
   80388:	b16b      	cbz	r3, 803a6 <vTaskSwitchContext+0x3a>
   8038a:	4a1b      	ldr	r2, [pc, #108]	; (803f8 <vTaskSwitchContext+0x8c>)
   8038c:	491b      	ldr	r1, [pc, #108]	; (803fc <vTaskSwitchContext+0x90>)
   8038e:	6813      	ldr	r3, [r2, #0]
   80390:	3b01      	subs	r3, #1
   80392:	6013      	str	r3, [r2, #0]
   80394:	6813      	ldr	r3, [r2, #0]
   80396:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8039a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   8039e:	b953      	cbnz	r3, 803b6 <vTaskSwitchContext+0x4a>
   803a0:	6813      	ldr	r3, [r2, #0]
   803a2:	2b00      	cmp	r3, #0
   803a4:	d1f3      	bne.n	8038e <vTaskSwitchContext+0x22>
   803a6:	4b16      	ldr	r3, [pc, #88]	; (80400 <vTaskSwitchContext+0x94>)
   803a8:	4798      	blx	r3
   803aa:	bf00      	nop
   803ac:	e7fd      	b.n	803aa <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   803ae:	2201      	movs	r2, #1
   803b0:	4b14      	ldr	r3, [pc, #80]	; (80404 <vTaskSwitchContext+0x98>)
   803b2:	601a      	str	r2, [r3, #0]
   803b4:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   803b6:	4b10      	ldr	r3, [pc, #64]	; (803f8 <vTaskSwitchContext+0x8c>)
   803b8:	681b      	ldr	r3, [r3, #0]
   803ba:	4a10      	ldr	r2, [pc, #64]	; (803fc <vTaskSwitchContext+0x90>)
   803bc:	0099      	lsls	r1, r3, #2
   803be:	18c8      	adds	r0, r1, r3
   803c0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   803c4:	6844      	ldr	r4, [r0, #4]
   803c6:	6864      	ldr	r4, [r4, #4]
   803c8:	6044      	str	r4, [r0, #4]
   803ca:	4419      	add	r1, r3
   803cc:	4602      	mov	r2, r0
   803ce:	3208      	adds	r2, #8
   803d0:	4294      	cmp	r4, r2
   803d2:	d009      	beq.n	803e8 <vTaskSwitchContext+0x7c>
   803d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   803d8:	4a08      	ldr	r2, [pc, #32]	; (803fc <vTaskSwitchContext+0x90>)
   803da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   803de:	685b      	ldr	r3, [r3, #4]
   803e0:	68da      	ldr	r2, [r3, #12]
   803e2:	4b09      	ldr	r3, [pc, #36]	; (80408 <vTaskSwitchContext+0x9c>)
   803e4:	601a      	str	r2, [r3, #0]
   803e6:	bd10      	pop	{r4, pc}
   803e8:	6860      	ldr	r0, [r4, #4]
   803ea:	4a04      	ldr	r2, [pc, #16]	; (803fc <vTaskSwitchContext+0x90>)
   803ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   803f0:	6050      	str	r0, [r2, #4]
   803f2:	e7ef      	b.n	803d4 <vTaskSwitchContext+0x68>
   803f4:	20070b78 	.word	0x20070b78
   803f8:	20070b7c 	.word	0x20070b7c
   803fc:	20070b10 	.word	0x20070b10
   80400:	000801c5 	.word	0x000801c5
   80404:	20070b80 	.word	0x20070b80
   80408:	20070b04 	.word	0x20070b04

0008040c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8040c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8040e:	b083      	sub	sp, #12
   80410:	4604      	mov	r4, r0
   80412:	460d      	mov	r5, r1
	uint32_t val = 0;
   80414:	2300      	movs	r3, #0
   80416:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80418:	4b20      	ldr	r3, [pc, #128]	; (8049c <usart_serial_getchar+0x90>)
   8041a:	4298      	cmp	r0, r3
   8041c:	d00d      	beq.n	8043a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8041e:	4b20      	ldr	r3, [pc, #128]	; (804a0 <usart_serial_getchar+0x94>)
   80420:	4298      	cmp	r0, r3
   80422:	d012      	beq.n	8044a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80424:	4b1f      	ldr	r3, [pc, #124]	; (804a4 <usart_serial_getchar+0x98>)
   80426:	4298      	cmp	r0, r3
   80428:	d019      	beq.n	8045e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8042a:	4b1f      	ldr	r3, [pc, #124]	; (804a8 <usart_serial_getchar+0x9c>)
   8042c:	429c      	cmp	r4, r3
   8042e:	d020      	beq.n	80472 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80430:	4b1e      	ldr	r3, [pc, #120]	; (804ac <usart_serial_getchar+0xa0>)
   80432:	429c      	cmp	r4, r3
   80434:	d027      	beq.n	80486 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80436:	b003      	add	sp, #12
   80438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8043a:	461f      	mov	r7, r3
   8043c:	4e1c      	ldr	r6, [pc, #112]	; (804b0 <usart_serial_getchar+0xa4>)
   8043e:	4629      	mov	r1, r5
   80440:	4638      	mov	r0, r7
   80442:	47b0      	blx	r6
   80444:	2800      	cmp	r0, #0
   80446:	d1fa      	bne.n	8043e <usart_serial_getchar+0x32>
   80448:	e7ef      	b.n	8042a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8044a:	461f      	mov	r7, r3
   8044c:	4e19      	ldr	r6, [pc, #100]	; (804b4 <usart_serial_getchar+0xa8>)
   8044e:	a901      	add	r1, sp, #4
   80450:	4638      	mov	r0, r7
   80452:	47b0      	blx	r6
   80454:	2800      	cmp	r0, #0
   80456:	d1fa      	bne.n	8044e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80458:	9b01      	ldr	r3, [sp, #4]
   8045a:	702b      	strb	r3, [r5, #0]
   8045c:	e7e8      	b.n	80430 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8045e:	461e      	mov	r6, r3
   80460:	4c14      	ldr	r4, [pc, #80]	; (804b4 <usart_serial_getchar+0xa8>)
   80462:	a901      	add	r1, sp, #4
   80464:	4630      	mov	r0, r6
   80466:	47a0      	blx	r4
   80468:	2800      	cmp	r0, #0
   8046a:	d1fa      	bne.n	80462 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8046c:	9b01      	ldr	r3, [sp, #4]
   8046e:	702b      	strb	r3, [r5, #0]
   80470:	e7e1      	b.n	80436 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80472:	461e      	mov	r6, r3
   80474:	4c0f      	ldr	r4, [pc, #60]	; (804b4 <usart_serial_getchar+0xa8>)
   80476:	a901      	add	r1, sp, #4
   80478:	4630      	mov	r0, r6
   8047a:	47a0      	blx	r4
   8047c:	2800      	cmp	r0, #0
   8047e:	d1fa      	bne.n	80476 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80480:	9b01      	ldr	r3, [sp, #4]
   80482:	702b      	strb	r3, [r5, #0]
   80484:	e7d7      	b.n	80436 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80486:	461e      	mov	r6, r3
   80488:	4c0a      	ldr	r4, [pc, #40]	; (804b4 <usart_serial_getchar+0xa8>)
   8048a:	a901      	add	r1, sp, #4
   8048c:	4630      	mov	r0, r6
   8048e:	47a0      	blx	r4
   80490:	2800      	cmp	r0, #0
   80492:	d1fa      	bne.n	8048a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80494:	9b01      	ldr	r3, [sp, #4]
   80496:	702b      	strb	r3, [r5, #0]
}
   80498:	e7cd      	b.n	80436 <usart_serial_getchar+0x2a>
   8049a:	bf00      	nop
   8049c:	400e0800 	.word	0x400e0800
   804a0:	40098000 	.word	0x40098000
   804a4:	4009c000 	.word	0x4009c000
   804a8:	400a0000 	.word	0x400a0000
   804ac:	400a4000 	.word	0x400a4000
   804b0:	00080947 	.word	0x00080947
   804b4:	00080731 	.word	0x00080731

000804b8 <usart_serial_putchar>:
{
   804b8:	b570      	push	{r4, r5, r6, lr}
   804ba:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   804bc:	4b1e      	ldr	r3, [pc, #120]	; (80538 <usart_serial_putchar+0x80>)
   804be:	4298      	cmp	r0, r3
   804c0:	d00d      	beq.n	804de <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   804c2:	4b1e      	ldr	r3, [pc, #120]	; (8053c <usart_serial_putchar+0x84>)
   804c4:	4298      	cmp	r0, r3
   804c6:	d013      	beq.n	804f0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   804c8:	4b1d      	ldr	r3, [pc, #116]	; (80540 <usart_serial_putchar+0x88>)
   804ca:	4298      	cmp	r0, r3
   804cc:	d019      	beq.n	80502 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   804ce:	4b1d      	ldr	r3, [pc, #116]	; (80544 <usart_serial_putchar+0x8c>)
   804d0:	4298      	cmp	r0, r3
   804d2:	d01f      	beq.n	80514 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   804d4:	4b1c      	ldr	r3, [pc, #112]	; (80548 <usart_serial_putchar+0x90>)
   804d6:	4298      	cmp	r0, r3
   804d8:	d025      	beq.n	80526 <usart_serial_putchar+0x6e>
	return 0;
   804da:	2000      	movs	r0, #0
}
   804dc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   804de:	461e      	mov	r6, r3
   804e0:	4d1a      	ldr	r5, [pc, #104]	; (8054c <usart_serial_putchar+0x94>)
   804e2:	4621      	mov	r1, r4
   804e4:	4630      	mov	r0, r6
   804e6:	47a8      	blx	r5
   804e8:	2800      	cmp	r0, #0
   804ea:	d1fa      	bne.n	804e2 <usart_serial_putchar+0x2a>
		return 1;
   804ec:	2001      	movs	r0, #1
   804ee:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   804f0:	461e      	mov	r6, r3
   804f2:	4d17      	ldr	r5, [pc, #92]	; (80550 <usart_serial_putchar+0x98>)
   804f4:	4621      	mov	r1, r4
   804f6:	4630      	mov	r0, r6
   804f8:	47a8      	blx	r5
   804fa:	2800      	cmp	r0, #0
   804fc:	d1fa      	bne.n	804f4 <usart_serial_putchar+0x3c>
		return 1;
   804fe:	2001      	movs	r0, #1
   80500:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80502:	461e      	mov	r6, r3
   80504:	4d12      	ldr	r5, [pc, #72]	; (80550 <usart_serial_putchar+0x98>)
   80506:	4621      	mov	r1, r4
   80508:	4630      	mov	r0, r6
   8050a:	47a8      	blx	r5
   8050c:	2800      	cmp	r0, #0
   8050e:	d1fa      	bne.n	80506 <usart_serial_putchar+0x4e>
		return 1;
   80510:	2001      	movs	r0, #1
   80512:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80514:	461e      	mov	r6, r3
   80516:	4d0e      	ldr	r5, [pc, #56]	; (80550 <usart_serial_putchar+0x98>)
   80518:	4621      	mov	r1, r4
   8051a:	4630      	mov	r0, r6
   8051c:	47a8      	blx	r5
   8051e:	2800      	cmp	r0, #0
   80520:	d1fa      	bne.n	80518 <usart_serial_putchar+0x60>
		return 1;
   80522:	2001      	movs	r0, #1
   80524:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80526:	461e      	mov	r6, r3
   80528:	4d09      	ldr	r5, [pc, #36]	; (80550 <usart_serial_putchar+0x98>)
   8052a:	4621      	mov	r1, r4
   8052c:	4630      	mov	r0, r6
   8052e:	47a8      	blx	r5
   80530:	2800      	cmp	r0, #0
   80532:	d1fa      	bne.n	8052a <usart_serial_putchar+0x72>
		return 1;
   80534:	2001      	movs	r0, #1
   80536:	bd70      	pop	{r4, r5, r6, pc}
   80538:	400e0800 	.word	0x400e0800
   8053c:	40098000 	.word	0x40098000
   80540:	4009c000 	.word	0x4009c000
   80544:	400a0000 	.word	0x400a0000
   80548:	400a4000 	.word	0x400a4000
   8054c:	00080937 	.word	0x00080937
   80550:	0008071d 	.word	0x0008071d

00080554 <console_init>:
	else
		printf("test_s_7() = NOT PASSED");
}

int console_init(void)
{
   80554:	b530      	push	{r4, r5, lr}
   80556:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80558:	2008      	movs	r0, #8
   8055a:	4d15      	ldr	r5, [pc, #84]	; (805b0 <console_init+0x5c>)
   8055c:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   8055e:	4c15      	ldr	r4, [pc, #84]	; (805b4 <console_init+0x60>)
   80560:	4b15      	ldr	r3, [pc, #84]	; (805b8 <console_init+0x64>)
   80562:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80564:	4a15      	ldr	r2, [pc, #84]	; (805bc <console_init+0x68>)
   80566:	4b16      	ldr	r3, [pc, #88]	; (805c0 <console_init+0x6c>)
   80568:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8056a:	4a16      	ldr	r2, [pc, #88]	; (805c4 <console_init+0x70>)
   8056c:	4b16      	ldr	r3, [pc, #88]	; (805c8 <console_init+0x74>)
   8056e:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80570:	4b16      	ldr	r3, [pc, #88]	; (805cc <console_init+0x78>)
   80572:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80574:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80578:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   8057a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8057e:	9303      	str	r3, [sp, #12]
   80580:	2008      	movs	r0, #8
   80582:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80584:	a901      	add	r1, sp, #4
   80586:	4620      	mov	r0, r4
   80588:	4b11      	ldr	r3, [pc, #68]	; (805d0 <console_init+0x7c>)
   8058a:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8058c:	4d11      	ldr	r5, [pc, #68]	; (805d4 <console_init+0x80>)
   8058e:	682b      	ldr	r3, [r5, #0]
   80590:	2100      	movs	r1, #0
   80592:	6898      	ldr	r0, [r3, #8]
   80594:	4c10      	ldr	r4, [pc, #64]	; (805d8 <console_init+0x84>)
   80596:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80598:	682b      	ldr	r3, [r5, #0]
   8059a:	2100      	movs	r1, #0
   8059c:	6858      	ldr	r0, [r3, #4]
   8059e:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   805a0:	480e      	ldr	r0, [pc, #56]	; (805dc <console_init+0x88>)
   805a2:	4c0f      	ldr	r4, [pc, #60]	; (805e0 <console_init+0x8c>)
   805a4:	47a0      	blx	r4
	printf("=============\n");
   805a6:	480f      	ldr	r0, [pc, #60]	; (805e4 <console_init+0x90>)
   805a8:	47a0      	blx	r4
	return 0;
   805aa:	2000      	movs	r0, #0
   805ac:	b005      	add	sp, #20
   805ae:	bd30      	pop	{r4, r5, pc}
   805b0:	00080df1 	.word	0x00080df1
   805b4:	400e0800 	.word	0x400e0800
   805b8:	20070cdc 	.word	0x20070cdc
   805bc:	000804b9 	.word	0x000804b9
   805c0:	20070cd8 	.word	0x20070cd8
   805c4:	0008040d 	.word	0x0008040d
   805c8:	20070cd4 	.word	0x20070cd4
   805cc:	0501bd00 	.word	0x0501bd00
   805d0:	00080901 	.word	0x00080901
   805d4:	20070138 	.word	0x20070138
   805d8:	00081271 	.word	0x00081271
   805dc:	00083ef0 	.word	0x00083ef0
   805e0:	000810c1 	.word	0x000810c1
   805e4:	00083f00 	.word	0x00083f00

000805e8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   805e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   805ec:	b980      	cbnz	r0, 80610 <_read+0x28>
   805ee:	460c      	mov	r4, r1
   805f0:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   805f2:	2a00      	cmp	r2, #0
   805f4:	dd0f      	ble.n	80616 <_read+0x2e>
   805f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   805f8:	4e08      	ldr	r6, [pc, #32]	; (8061c <_read+0x34>)
   805fa:	4d09      	ldr	r5, [pc, #36]	; (80620 <_read+0x38>)
   805fc:	6830      	ldr	r0, [r6, #0]
   805fe:	4621      	mov	r1, r4
   80600:	682b      	ldr	r3, [r5, #0]
   80602:	4798      	blx	r3
		ptr++;
   80604:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80606:	42bc      	cmp	r4, r7
   80608:	d1f8      	bne.n	805fc <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8060a:	4640      	mov	r0, r8
   8060c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80610:	f04f 38ff 	mov.w	r8, #4294967295
   80614:	e7f9      	b.n	8060a <_read+0x22>
	for (; len > 0; --len) {
   80616:	4680      	mov	r8, r0
   80618:	e7f7      	b.n	8060a <_read+0x22>
   8061a:	bf00      	nop
   8061c:	20070cdc 	.word	0x20070cdc
   80620:	20070cd4 	.word	0x20070cd4

00080624 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80624:	4b2a      	ldr	r3, [pc, #168]	; (806d0 <twi_set_speed+0xac>)
   80626:	4299      	cmp	r1, r3
   80628:	d849      	bhi.n	806be <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   8062a:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   8062e:	4299      	cmp	r1, r3
   80630:	d92b      	bls.n	8068a <twi_set_speed+0x66>
{
   80632:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80634:	4c27      	ldr	r4, [pc, #156]	; (806d4 <twi_set_speed+0xb0>)
   80636:	fba4 3402 	umull	r3, r4, r4, r2
   8063a:	0ba4      	lsrs	r4, r4, #14
   8063c:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8063e:	4b26      	ldr	r3, [pc, #152]	; (806d8 <twi_set_speed+0xb4>)
   80640:	440b      	add	r3, r1
   80642:	009b      	lsls	r3, r3, #2
   80644:	fbb2 f2f3 	udiv	r2, r2, r3
   80648:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8064a:	2cff      	cmp	r4, #255	; 0xff
   8064c:	d939      	bls.n	806c2 <twi_set_speed+0x9e>
   8064e:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   80650:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   80652:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80654:	2cff      	cmp	r4, #255	; 0xff
   80656:	d90d      	bls.n	80674 <twi_set_speed+0x50>
   80658:	2907      	cmp	r1, #7
   8065a:	d1f9      	bne.n	80650 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   8065c:	0213      	lsls	r3, r2, #8
   8065e:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   80660:	0409      	lsls	r1, r1, #16
   80662:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80666:	430b      	orrs	r3, r1
   80668:	b2e4      	uxtb	r4, r4
   8066a:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   8066c:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   8066e:	2000      	movs	r0, #0
}
   80670:	bc10      	pop	{r4}
   80672:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80674:	2aff      	cmp	r2, #255	; 0xff
   80676:	d9f1      	bls.n	8065c <twi_set_speed+0x38>
   80678:	2906      	cmp	r1, #6
   8067a:	d8ef      	bhi.n	8065c <twi_set_speed+0x38>
			ckdiv++;
   8067c:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   8067e:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80680:	2aff      	cmp	r2, #255	; 0xff
   80682:	d9eb      	bls.n	8065c <twi_set_speed+0x38>
   80684:	2906      	cmp	r1, #6
   80686:	d9f9      	bls.n	8067c <twi_set_speed+0x58>
   80688:	e7e8      	b.n	8065c <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8068a:	0049      	lsls	r1, r1, #1
   8068c:	fbb2 f2f1 	udiv	r2, r2, r1
   80690:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80692:	2aff      	cmp	r2, #255	; 0xff
   80694:	d911      	bls.n	806ba <twi_set_speed+0x96>
   80696:	2300      	movs	r3, #0
			ckdiv++;
   80698:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   8069a:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8069c:	2aff      	cmp	r2, #255	; 0xff
   8069e:	d901      	bls.n	806a4 <twi_set_speed+0x80>
   806a0:	2b07      	cmp	r3, #7
   806a2:	d1f9      	bne.n	80698 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806a4:	0211      	lsls	r1, r2, #8
   806a6:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   806a8:	041b      	lsls	r3, r3, #16
   806aa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   806ae:	430b      	orrs	r3, r1
   806b0:	b2d2      	uxtb	r2, r2
   806b2:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   806b4:	6102      	str	r2, [r0, #16]
	return PASS;
   806b6:	2000      	movs	r0, #0
   806b8:	4770      	bx	lr
	uint32_t ckdiv = 0;
   806ba:	2300      	movs	r3, #0
   806bc:	e7f2      	b.n	806a4 <twi_set_speed+0x80>
		return FAIL;
   806be:	2001      	movs	r0, #1
   806c0:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c2:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   806c4:	bf88      	it	hi
   806c6:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   806c8:	d8d8      	bhi.n	8067c <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   806ca:	2100      	movs	r1, #0
   806cc:	e7c6      	b.n	8065c <twi_set_speed+0x38>
   806ce:	bf00      	nop
   806d0:	00061a80 	.word	0x00061a80
   806d4:	057619f1 	.word	0x057619f1
   806d8:	3ffd1200 	.word	0x3ffd1200

000806dc <twi_master_init>:
{
   806dc:	b538      	push	{r3, r4, r5, lr}
   806de:	4604      	mov	r4, r0
   806e0:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   806e2:	f04f 33ff 	mov.w	r3, #4294967295
   806e6:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   806e8:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   806ea:	2380      	movs	r3, #128	; 0x80
   806ec:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   806ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   806f0:	2308      	movs	r3, #8
   806f2:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   806f4:	2320      	movs	r3, #32
   806f6:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   806f8:	2304      	movs	r3, #4
   806fa:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   806fc:	680a      	ldr	r2, [r1, #0]
   806fe:	6849      	ldr	r1, [r1, #4]
   80700:	4b05      	ldr	r3, [pc, #20]	; (80718 <twi_master_init+0x3c>)
   80702:	4798      	blx	r3
   80704:	2801      	cmp	r0, #1
   80706:	bf14      	ite	ne
   80708:	2000      	movne	r0, #0
   8070a:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   8070c:	7a6b      	ldrb	r3, [r5, #9]
   8070e:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80710:	bf04      	itt	eq
   80712:	2340      	moveq	r3, #64	; 0x40
   80714:	6023      	streq	r3, [r4, #0]
}
   80716:	bd38      	pop	{r3, r4, r5, pc}
   80718:	00080625 	.word	0x00080625

0008071c <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   8071c:	6943      	ldr	r3, [r0, #20]
   8071e:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80722:	bf1d      	ittte	ne
   80724:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80728:	61c1      	strne	r1, [r0, #28]
	return 0;
   8072a:	2000      	movne	r0, #0
		return 1;
   8072c:	2001      	moveq	r0, #1
}
   8072e:	4770      	bx	lr

00080730 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80730:	6943      	ldr	r3, [r0, #20]
   80732:	f013 0f01 	tst.w	r3, #1
   80736:	d005      	beq.n	80744 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80738:	6983      	ldr	r3, [r0, #24]
   8073a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8073e:	600b      	str	r3, [r1, #0]

	return 0;
   80740:	2000      	movs	r0, #0
   80742:	4770      	bx	lr
		return 1;
   80744:	2001      	movs	r0, #1
}
   80746:	4770      	bx	lr

00080748 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80748:	b500      	push	{lr}
   8074a:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   8074c:	2201      	movs	r2, #1
   8074e:	f10d 0107 	add.w	r1, sp, #7
   80752:	4810      	ldr	r0, [pc, #64]	; (80794 <USART0_Handler+0x4c>)
   80754:	4b10      	ldr	r3, [pc, #64]	; (80798 <USART0_Handler+0x50>)
   80756:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80758:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8075a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8075e:	2200      	movs	r2, #0
   80760:	4b0e      	ldr	r3, [pc, #56]	; (8079c <USART0_Handler+0x54>)
   80762:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   80764:	4b0e      	ldr	r3, [pc, #56]	; (807a0 <USART0_Handler+0x58>)
   80766:	781b      	ldrb	r3, [r3, #0]
   80768:	f89d 1007 	ldrb.w	r1, [sp, #7]
   8076c:	4a0d      	ldr	r2, [pc, #52]	; (807a4 <USART0_Handler+0x5c>)
   8076e:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80770:	2b9b      	cmp	r3, #155	; 0x9b
   80772:	d00b      	beq.n	8078c <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   80774:	3301      	adds	r3, #1
   80776:	4a0a      	ldr	r2, [pc, #40]	; (807a0 <USART0_Handler+0x58>)
   80778:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8077a:	2201      	movs	r2, #1
   8077c:	4b07      	ldr	r3, [pc, #28]	; (8079c <USART0_Handler+0x54>)
   8077e:	701a      	strb	r2, [r3, #0]
   80780:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80784:	b662      	cpsie	i
}
   80786:	b003      	add	sp, #12
   80788:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   8078c:	2200      	movs	r2, #0
   8078e:	4b04      	ldr	r3, [pc, #16]	; (807a0 <USART0_Handler+0x58>)
   80790:	701a      	strb	r2, [r3, #0]
   80792:	e7f2      	b.n	8077a <USART0_Handler+0x32>
   80794:	40098000 	.word	0x40098000
   80798:	00080839 	.word	0x00080839
   8079c:	20070130 	.word	0x20070130
   807a0:	20070c28 	.word	0x20070c28
   807a4:	20070b8c 	.word	0x20070b8c

000807a8 <init_twi>:
/*
*  Setup the Arduino due card as the master on pin 20 and 21 (SDA, SCL) with a fixed transfer rate.
*  The function returns 1 if the master was successfully initialized else 0.
*/
uint8_t init_twi(void)
{
   807a8:	b500      	push	{lr}
   807aa:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_DEF_SPEED;
   807ac:	4b09      	ldr	r3, [pc, #36]	; (807d4 <init_twi+0x2c>)
   807ae:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   807b0:	4b09      	ldr	r3, [pc, #36]	; (807d8 <init_twi+0x30>)
   807b2:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   807b4:	2300      	movs	r3, #0
   807b6:	f88d 300d 	strb.w	r3, [sp, #13]
   807ba:	2017      	movs	r0, #23
   807bc:	4b07      	ldr	r3, [pc, #28]	; (807dc <init_twi+0x34>)
   807be:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   807c0:	a901      	add	r1, sp, #4
   807c2:	4807      	ldr	r0, [pc, #28]	; (807e0 <init_twi+0x38>)
   807c4:	4b07      	ldr	r3, [pc, #28]	; (807e4 <init_twi+0x3c>)
   807c6:	4798      	blx	r3
	return twi_master_setup(TWI_PORT, &opt) == TWI_SUCCESS;
}
   807c8:	fab0 f080 	clz	r0, r0
   807cc:	0940      	lsrs	r0, r0, #5
   807ce:	b005      	add	sp, #20
   807d0:	f85d fb04 	ldr.w	pc, [sp], #4
   807d4:	000186a0 	.word	0x000186a0
   807d8:	0501bd00 	.word	0x0501bd00
   807dc:	00080df1 	.word	0x00080df1
   807e0:	40090000 	.word	0x40090000
   807e4:	000806dd 	.word	0x000806dd

000807e8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   807e8:	3801      	subs	r0, #1
   807ea:	2802      	cmp	r0, #2
   807ec:	d815      	bhi.n	8081a <_write+0x32>
{
   807ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   807f2:	460e      	mov	r6, r1
   807f4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   807f6:	b19a      	cbz	r2, 80820 <_write+0x38>
   807f8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   807fa:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80834 <_write+0x4c>
   807fe:	4f0c      	ldr	r7, [pc, #48]	; (80830 <_write+0x48>)
   80800:	f8d8 0000 	ldr.w	r0, [r8]
   80804:	f815 1b01 	ldrb.w	r1, [r5], #1
   80808:	683b      	ldr	r3, [r7, #0]
   8080a:	4798      	blx	r3
   8080c:	2800      	cmp	r0, #0
   8080e:	db0a      	blt.n	80826 <_write+0x3e>
   80810:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80812:	3c01      	subs	r4, #1
   80814:	d1f4      	bne.n	80800 <_write+0x18>
   80816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8081a:	f04f 30ff 	mov.w	r0, #4294967295
   8081e:	4770      	bx	lr
	for (; len != 0; --len) {
   80820:	4610      	mov	r0, r2
   80822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80826:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8082a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8082e:	bf00      	nop
   80830:	20070cd8 	.word	0x20070cd8
   80834:	20070cdc 	.word	0x20070cdc

00080838 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80838:	2a00      	cmp	r2, #0
   8083a:	d051      	beq.n	808e0 <usart_serial_read_packet+0xa8>
{
   8083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80840:	b083      	sub	sp, #12
   80842:	4605      	mov	r5, r0
   80844:	460c      	mov	r4, r1
   80846:	4692      	mov	sl, r2
   80848:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   8084a:	4f26      	ldr	r7, [pc, #152]	; (808e4 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   8084c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 808f8 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   80850:	4e25      	ldr	r6, [pc, #148]	; (808e8 <usart_serial_read_packet+0xb0>)
   80852:	e01d      	b.n	80890 <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80854:	4621      	mov	r1, r4
   80856:	4638      	mov	r0, r7
   80858:	47c8      	blx	r9
   8085a:	2800      	cmp	r0, #0
   8085c:	d1fa      	bne.n	80854 <usart_serial_read_packet+0x1c>
   8085e:	e021      	b.n	808a4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80860:	469b      	mov	fp, r3
   80862:	f8df 8098 	ldr.w	r8, [pc, #152]	; 808fc <usart_serial_read_packet+0xc4>
   80866:	a901      	add	r1, sp, #4
   80868:	4658      	mov	r0, fp
   8086a:	47c0      	blx	r8
   8086c:	2800      	cmp	r0, #0
   8086e:	d1fa      	bne.n	80866 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   80870:	9b01      	ldr	r3, [sp, #4]
   80872:	7023      	strb	r3, [r4, #0]
   80874:	e019      	b.n	808aa <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   80876:	469b      	mov	fp, r3
   80878:	f8df 8080 	ldr.w	r8, [pc, #128]	; 808fc <usart_serial_read_packet+0xc4>
   8087c:	a901      	add	r1, sp, #4
   8087e:	4658      	mov	r0, fp
   80880:	47c0      	blx	r8
   80882:	2800      	cmp	r0, #0
   80884:	d1fa      	bne.n	8087c <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80886:	9b01      	ldr	r3, [sp, #4]
   80888:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   8088a:	3401      	adds	r4, #1
	while (len) {
   8088c:	4554      	cmp	r4, sl
   8088e:	d023      	beq.n	808d8 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   80890:	2300      	movs	r3, #0
   80892:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80894:	42bd      	cmp	r5, r7
   80896:	d0dd      	beq.n	80854 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80898:	4b14      	ldr	r3, [pc, #80]	; (808ec <usart_serial_read_packet+0xb4>)
   8089a:	429d      	cmp	r5, r3
   8089c:	d0e0      	beq.n	80860 <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8089e:	4b14      	ldr	r3, [pc, #80]	; (808f0 <usart_serial_read_packet+0xb8>)
   808a0:	429d      	cmp	r5, r3
   808a2:	d0e8      	beq.n	80876 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   808a4:	4b13      	ldr	r3, [pc, #76]	; (808f4 <usart_serial_read_packet+0xbc>)
   808a6:	429d      	cmp	r5, r3
   808a8:	d00b      	beq.n	808c2 <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   808aa:	42b5      	cmp	r5, r6
   808ac:	d1ed      	bne.n	8088a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   808ae:	f8df 804c 	ldr.w	r8, [pc, #76]	; 808fc <usart_serial_read_packet+0xc4>
   808b2:	a901      	add	r1, sp, #4
   808b4:	4630      	mov	r0, r6
   808b6:	47c0      	blx	r8
   808b8:	2800      	cmp	r0, #0
   808ba:	d1fa      	bne.n	808b2 <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   808bc:	9b01      	ldr	r3, [sp, #4]
   808be:	7023      	strb	r3, [r4, #0]
   808c0:	e7e3      	b.n	8088a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   808c2:	469b      	mov	fp, r3
   808c4:	f8df 8034 	ldr.w	r8, [pc, #52]	; 808fc <usart_serial_read_packet+0xc4>
   808c8:	a901      	add	r1, sp, #4
   808ca:	4658      	mov	r0, fp
   808cc:	47c0      	blx	r8
   808ce:	2800      	cmp	r0, #0
   808d0:	d1fa      	bne.n	808c8 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   808d2:	9b01      	ldr	r3, [sp, #4]
   808d4:	7023      	strb	r3, [r4, #0]
   808d6:	e7d8      	b.n	8088a <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   808d8:	2000      	movs	r0, #0
   808da:	b003      	add	sp, #12
   808dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   808e0:	2000      	movs	r0, #0
   808e2:	4770      	bx	lr
   808e4:	400e0800 	.word	0x400e0800
   808e8:	400a4000 	.word	0x400a4000
   808ec:	40098000 	.word	0x40098000
   808f0:	4009c000 	.word	0x4009c000
   808f4:	400a0000 	.word	0x400a0000
   808f8:	00080947 	.word	0x00080947
   808fc:	00080731 	.word	0x00080731

00080900 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80900:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80902:	23ac      	movs	r3, #172	; 0xac
   80904:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80906:	680b      	ldr	r3, [r1, #0]
   80908:	684a      	ldr	r2, [r1, #4]
   8090a:	fbb3 f3f2 	udiv	r3, r3, r2
   8090e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80910:	1e5c      	subs	r4, r3, #1
   80912:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80916:	4294      	cmp	r4, r2
   80918:	d80b      	bhi.n	80932 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8091a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8091c:	688b      	ldr	r3, [r1, #8]
   8091e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80920:	f240 2302 	movw	r3, #514	; 0x202
   80924:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80928:	2350      	movs	r3, #80	; 0x50
   8092a:	6003      	str	r3, [r0, #0]

	return 0;
   8092c:	2000      	movs	r0, #0
}
   8092e:	bc10      	pop	{r4}
   80930:	4770      	bx	lr
		return 1;
   80932:	2001      	movs	r0, #1
   80934:	e7fb      	b.n	8092e <uart_init+0x2e>

00080936 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80936:	6943      	ldr	r3, [r0, #20]
   80938:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8093c:	bf1a      	itte	ne
   8093e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80940:	2000      	movne	r0, #0
		return 1;
   80942:	2001      	moveq	r0, #1
}
   80944:	4770      	bx	lr

00080946 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80946:	6943      	ldr	r3, [r0, #20]
   80948:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8094c:	bf1d      	ittte	ne
   8094e:	6983      	ldrne	r3, [r0, #24]
   80950:	700b      	strbne	r3, [r1, #0]
	return 0;
   80952:	2000      	movne	r0, #0
		return 1;
   80954:	2001      	moveq	r0, #1
}
   80956:	4770      	bx	lr

00080958 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80958:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8095a:	480e      	ldr	r0, [pc, #56]	; (80994 <sysclk_init+0x3c>)
   8095c:	4b0e      	ldr	r3, [pc, #56]	; (80998 <sysclk_init+0x40>)
   8095e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80960:	213e      	movs	r1, #62	; 0x3e
   80962:	2000      	movs	r0, #0
   80964:	4b0d      	ldr	r3, [pc, #52]	; (8099c <sysclk_init+0x44>)
   80966:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80968:	4c0d      	ldr	r4, [pc, #52]	; (809a0 <sysclk_init+0x48>)
   8096a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8096c:	2800      	cmp	r0, #0
   8096e:	d0fc      	beq.n	8096a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80970:	4b0c      	ldr	r3, [pc, #48]	; (809a4 <sysclk_init+0x4c>)
   80972:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80974:	4a0c      	ldr	r2, [pc, #48]	; (809a8 <sysclk_init+0x50>)
   80976:	4b0d      	ldr	r3, [pc, #52]	; (809ac <sysclk_init+0x54>)
   80978:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8097a:	4c0d      	ldr	r4, [pc, #52]	; (809b0 <sysclk_init+0x58>)
   8097c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8097e:	2800      	cmp	r0, #0
   80980:	d0fc      	beq.n	8097c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80982:	2010      	movs	r0, #16
   80984:	4b0b      	ldr	r3, [pc, #44]	; (809b4 <sysclk_init+0x5c>)
   80986:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80988:	4b0b      	ldr	r3, [pc, #44]	; (809b8 <sysclk_init+0x60>)
   8098a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8098c:	4801      	ldr	r0, [pc, #4]	; (80994 <sysclk_init+0x3c>)
   8098e:	4b02      	ldr	r3, [pc, #8]	; (80998 <sysclk_init+0x40>)
   80990:	4798      	blx	r3
   80992:	bd10      	pop	{r4, pc}
   80994:	0501bd00 	.word	0x0501bd00
   80998:	200700a5 	.word	0x200700a5
   8099c:	00080d6d 	.word	0x00080d6d
   809a0:	00080dc1 	.word	0x00080dc1
   809a4:	00080dd1 	.word	0x00080dd1
   809a8:	200d3f01 	.word	0x200d3f01
   809ac:	400e0600 	.word	0x400e0600
   809b0:	00080de1 	.word	0x00080de1
   809b4:	00080d09 	.word	0x00080d09
   809b8:	00080ee1 	.word	0x00080ee1

000809bc <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   809bc:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   809be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   809c2:	4b1e      	ldr	r3, [pc, #120]	; (80a3c <board_init+0x80>)
   809c4:	605a      	str	r2, [r3, #4]
   809c6:	200b      	movs	r0, #11
   809c8:	4c1d      	ldr	r4, [pc, #116]	; (80a40 <board_init+0x84>)
   809ca:	47a0      	blx	r4
   809cc:	200c      	movs	r0, #12
   809ce:	47a0      	blx	r4
   809d0:	200d      	movs	r0, #13
   809d2:	47a0      	blx	r4
   809d4:	200e      	movs	r0, #14
   809d6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   809d8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809dc:	203b      	movs	r0, #59	; 0x3b
   809de:	4c19      	ldr	r4, [pc, #100]	; (80a44 <board_init+0x88>)
   809e0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   809e2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809e6:	2055      	movs	r0, #85	; 0x55
   809e8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   809ea:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809ee:	2056      	movs	r0, #86	; 0x56
   809f0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   809f2:	4915      	ldr	r1, [pc, #84]	; (80a48 <board_init+0x8c>)
   809f4:	2068      	movs	r0, #104	; 0x68
   809f6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   809f8:	4914      	ldr	r1, [pc, #80]	; (80a4c <board_init+0x90>)
   809fa:	205c      	movs	r0, #92	; 0x5c
   809fc:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   809fe:	4a14      	ldr	r2, [pc, #80]	; (80a50 <board_init+0x94>)
   80a00:	f44f 7140 	mov.w	r1, #768	; 0x300
   80a04:	4813      	ldr	r0, [pc, #76]	; (80a54 <board_init+0x98>)
   80a06:	4b14      	ldr	r3, [pc, #80]	; (80a58 <board_init+0x9c>)
   80a08:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80a0a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a0e:	2011      	movs	r0, #17
   80a10:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80a12:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a16:	2012      	movs	r0, #18
   80a18:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80a1a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a1e:	202c      	movs	r0, #44	; 0x2c
   80a20:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   80a22:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a26:	202d      	movs	r0, #45	; 0x2d
   80a28:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80a2a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a2e:	202b      	movs	r0, #43	; 0x2b
   80a30:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80a32:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a36:	202a      	movs	r0, #42	; 0x2a
   80a38:	47a0      	blx	r4
   80a3a:	bd10      	pop	{r4, pc}
   80a3c:	400e1a50 	.word	0x400e1a50
   80a40:	00080df1 	.word	0x00080df1
   80a44:	00080afd 	.word	0x00080afd
   80a48:	28000079 	.word	0x28000079
   80a4c:	28000001 	.word	0x28000001
   80a50:	08000001 	.word	0x08000001
   80a54:	400e0e00 	.word	0x400e0e00
   80a58:	00080bcd 	.word	0x00080bcd

00080a5c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80a5c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80a5e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80a62:	d016      	beq.n	80a92 <pio_set_peripheral+0x36>
   80a64:	d80b      	bhi.n	80a7e <pio_set_peripheral+0x22>
   80a66:	b149      	cbz	r1, 80a7c <pio_set_peripheral+0x20>
   80a68:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80a6c:	d105      	bne.n	80a7a <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80a6e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80a70:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80a72:	400b      	ands	r3, r1
   80a74:	ea23 0302 	bic.w	r3, r3, r2
   80a78:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80a7a:	6042      	str	r2, [r0, #4]
   80a7c:	4770      	bx	lr
	switch (ul_type) {
   80a7e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80a82:	d0fb      	beq.n	80a7c <pio_set_peripheral+0x20>
   80a84:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80a88:	d0f8      	beq.n	80a7c <pio_set_peripheral+0x20>
   80a8a:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80a8e:	d1f4      	bne.n	80a7a <pio_set_peripheral+0x1e>
   80a90:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80a92:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80a94:	4313      	orrs	r3, r2
   80a96:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80a98:	e7ef      	b.n	80a7a <pio_set_peripheral+0x1e>

00080a9a <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80a9a:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80a9c:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80aa0:	bf14      	ite	ne
   80aa2:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80aa4:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80aa6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80aaa:	bf14      	ite	ne
   80aac:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80aae:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80ab0:	f012 0f02 	tst.w	r2, #2
   80ab4:	d107      	bne.n	80ac6 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80ab6:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80aba:	bf18      	it	ne
   80abc:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80ac0:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80ac2:	6001      	str	r1, [r0, #0]
   80ac4:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80ac6:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80aca:	e7f9      	b.n	80ac0 <pio_set_input+0x26>

00080acc <pio_set_output>:
{
   80acc:	b410      	push	{r4}
   80ace:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80ad0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80ad2:	b944      	cbnz	r4, 80ae6 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80ad4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80ad6:	b143      	cbz	r3, 80aea <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80ad8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80ada:	b942      	cbnz	r2, 80aee <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80adc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80ade:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80ae0:	6001      	str	r1, [r0, #0]
}
   80ae2:	bc10      	pop	{r4}
   80ae4:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80ae6:	6641      	str	r1, [r0, #100]	; 0x64
   80ae8:	e7f5      	b.n	80ad6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80aea:	6541      	str	r1, [r0, #84]	; 0x54
   80aec:	e7f5      	b.n	80ada <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80aee:	6301      	str	r1, [r0, #48]	; 0x30
   80af0:	e7f5      	b.n	80ade <pio_set_output+0x12>

00080af2 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80af2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80af4:	4770      	bx	lr

00080af6 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80af6:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80af8:	4770      	bx	lr
	...

00080afc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80afc:	b570      	push	{r4, r5, r6, lr}
   80afe:	b082      	sub	sp, #8
   80b00:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80b02:	0943      	lsrs	r3, r0, #5
   80b04:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80b08:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80b0c:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80b0e:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80b12:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80b16:	d031      	beq.n	80b7c <pio_configure_pin+0x80>
   80b18:	d816      	bhi.n	80b48 <pio_configure_pin+0x4c>
   80b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80b1e:	d01b      	beq.n	80b58 <pio_configure_pin+0x5c>
   80b20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80b24:	d116      	bne.n	80b54 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80b26:	f000 001f 	and.w	r0, r0, #31
   80b2a:	2601      	movs	r6, #1
   80b2c:	4086      	lsls	r6, r0
   80b2e:	4632      	mov	r2, r6
   80b30:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80b34:	4620      	mov	r0, r4
   80b36:	4b22      	ldr	r3, [pc, #136]	; (80bc0 <pio_configure_pin+0xc4>)
   80b38:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b3a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b3e:	bf14      	ite	ne
   80b40:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b42:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b44:	2001      	movs	r0, #1
   80b46:	e017      	b.n	80b78 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b48:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b4c:	d021      	beq.n	80b92 <pio_configure_pin+0x96>
   80b4e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b52:	d01e      	beq.n	80b92 <pio_configure_pin+0x96>
		return 0;
   80b54:	2000      	movs	r0, #0
   80b56:	e00f      	b.n	80b78 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80b58:	f000 001f 	and.w	r0, r0, #31
   80b5c:	2601      	movs	r6, #1
   80b5e:	4086      	lsls	r6, r0
   80b60:	4632      	mov	r2, r6
   80b62:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b66:	4620      	mov	r0, r4
   80b68:	4b15      	ldr	r3, [pc, #84]	; (80bc0 <pio_configure_pin+0xc4>)
   80b6a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b6c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80b70:	bf14      	ite	ne
   80b72:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b74:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80b76:	2001      	movs	r0, #1
}
   80b78:	b002      	add	sp, #8
   80b7a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80b7c:	f000 011f 	and.w	r1, r0, #31
   80b80:	2601      	movs	r6, #1
   80b82:	462a      	mov	r2, r5
   80b84:	fa06 f101 	lsl.w	r1, r6, r1
   80b88:	4620      	mov	r0, r4
   80b8a:	4b0e      	ldr	r3, [pc, #56]	; (80bc4 <pio_configure_pin+0xc8>)
   80b8c:	4798      	blx	r3
	return 1;
   80b8e:	4630      	mov	r0, r6
		break;
   80b90:	e7f2      	b.n	80b78 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b92:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80b96:	f000 011f 	and.w	r1, r0, #31
   80b9a:	2601      	movs	r6, #1
   80b9c:	ea05 0306 	and.w	r3, r5, r6
   80ba0:	9300      	str	r3, [sp, #0]
   80ba2:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80ba6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80baa:	bf14      	ite	ne
   80bac:	2200      	movne	r2, #0
   80bae:	2201      	moveq	r2, #1
   80bb0:	fa06 f101 	lsl.w	r1, r6, r1
   80bb4:	4620      	mov	r0, r4
   80bb6:	4c04      	ldr	r4, [pc, #16]	; (80bc8 <pio_configure_pin+0xcc>)
   80bb8:	47a0      	blx	r4
	return 1;
   80bba:	4630      	mov	r0, r6
		break;
   80bbc:	e7dc      	b.n	80b78 <pio_configure_pin+0x7c>
   80bbe:	bf00      	nop
   80bc0:	00080a5d 	.word	0x00080a5d
   80bc4:	00080a9b 	.word	0x00080a9b
   80bc8:	00080acd 	.word	0x00080acd

00080bcc <pio_configure_pin_group>:
{
   80bcc:	b570      	push	{r4, r5, r6, lr}
   80bce:	b082      	sub	sp, #8
   80bd0:	4605      	mov	r5, r0
   80bd2:	460e      	mov	r6, r1
   80bd4:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80bd6:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80bda:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80bde:	d027      	beq.n	80c30 <pio_configure_pin_group+0x64>
   80be0:	d811      	bhi.n	80c06 <pio_configure_pin_group+0x3a>
   80be2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80be6:	d016      	beq.n	80c16 <pio_configure_pin_group+0x4a>
   80be8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80bec:	d111      	bne.n	80c12 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80bee:	460a      	mov	r2, r1
   80bf0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80bf4:	4b19      	ldr	r3, [pc, #100]	; (80c5c <pio_configure_pin_group+0x90>)
   80bf6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80bf8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80bfc:	bf14      	ite	ne
   80bfe:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c00:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80c02:	2001      	movs	r0, #1
   80c04:	e012      	b.n	80c2c <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80c06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80c0a:	d015      	beq.n	80c38 <pio_configure_pin_group+0x6c>
   80c0c:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80c10:	d012      	beq.n	80c38 <pio_configure_pin_group+0x6c>
		return 0;
   80c12:	2000      	movs	r0, #0
   80c14:	e00a      	b.n	80c2c <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80c16:	460a      	mov	r2, r1
   80c18:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c1c:	4b0f      	ldr	r3, [pc, #60]	; (80c5c <pio_configure_pin_group+0x90>)
   80c1e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c20:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80c24:	bf14      	ite	ne
   80c26:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c28:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80c2a:	2001      	movs	r0, #1
}
   80c2c:	b002      	add	sp, #8
   80c2e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80c30:	4b0b      	ldr	r3, [pc, #44]	; (80c60 <pio_configure_pin_group+0x94>)
   80c32:	4798      	blx	r3
	return 1;
   80c34:	2001      	movs	r0, #1
		break;
   80c36:	e7f9      	b.n	80c2c <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80c38:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80c3c:	f004 0301 	and.w	r3, r4, #1
   80c40:	9300      	str	r3, [sp, #0]
   80c42:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80c46:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80c4a:	bf14      	ite	ne
   80c4c:	2200      	movne	r2, #0
   80c4e:	2201      	moveq	r2, #1
   80c50:	4631      	mov	r1, r6
   80c52:	4628      	mov	r0, r5
   80c54:	4c03      	ldr	r4, [pc, #12]	; (80c64 <pio_configure_pin_group+0x98>)
   80c56:	47a0      	blx	r4
	return 1;
   80c58:	2001      	movs	r0, #1
		break;
   80c5a:	e7e7      	b.n	80c2c <pio_configure_pin_group+0x60>
   80c5c:	00080a5d 	.word	0x00080a5d
   80c60:	00080a9b 	.word	0x00080a9b
   80c64:	00080acd 	.word	0x00080acd

00080c68 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80c68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80c6c:	4604      	mov	r4, r0
   80c6e:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80c70:	4b0e      	ldr	r3, [pc, #56]	; (80cac <pio_handler_process+0x44>)
   80c72:	4798      	blx	r3
   80c74:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80c76:	4620      	mov	r0, r4
   80c78:	4b0d      	ldr	r3, [pc, #52]	; (80cb0 <pio_handler_process+0x48>)
   80c7a:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80c7c:	4005      	ands	r5, r0
   80c7e:	d013      	beq.n	80ca8 <pio_handler_process+0x40>
   80c80:	4c0c      	ldr	r4, [pc, #48]	; (80cb4 <pio_handler_process+0x4c>)
   80c82:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80c86:	e003      	b.n	80c90 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80c88:	42b4      	cmp	r4, r6
   80c8a:	d00d      	beq.n	80ca8 <pio_handler_process+0x40>
   80c8c:	3410      	adds	r4, #16
		while (status != 0) {
   80c8e:	b15d      	cbz	r5, 80ca8 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80c90:	6820      	ldr	r0, [r4, #0]
   80c92:	4540      	cmp	r0, r8
   80c94:	d1f8      	bne.n	80c88 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80c96:	6861      	ldr	r1, [r4, #4]
   80c98:	4229      	tst	r1, r5
   80c9a:	d0f5      	beq.n	80c88 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80c9c:	68e3      	ldr	r3, [r4, #12]
   80c9e:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80ca0:	6863      	ldr	r3, [r4, #4]
   80ca2:	ea25 0503 	bic.w	r5, r5, r3
   80ca6:	e7ef      	b.n	80c88 <pio_handler_process+0x20>
   80ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80cac:	00080af3 	.word	0x00080af3
   80cb0:	00080af7 	.word	0x00080af7
   80cb4:	20070c2c 	.word	0x20070c2c

00080cb8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80cb8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80cba:	210b      	movs	r1, #11
   80cbc:	4801      	ldr	r0, [pc, #4]	; (80cc4 <PIOA_Handler+0xc>)
   80cbe:	4b02      	ldr	r3, [pc, #8]	; (80cc8 <PIOA_Handler+0x10>)
   80cc0:	4798      	blx	r3
   80cc2:	bd08      	pop	{r3, pc}
   80cc4:	400e0e00 	.word	0x400e0e00
   80cc8:	00080c69 	.word	0x00080c69

00080ccc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80ccc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80cce:	210c      	movs	r1, #12
   80cd0:	4801      	ldr	r0, [pc, #4]	; (80cd8 <PIOB_Handler+0xc>)
   80cd2:	4b02      	ldr	r3, [pc, #8]	; (80cdc <PIOB_Handler+0x10>)
   80cd4:	4798      	blx	r3
   80cd6:	bd08      	pop	{r3, pc}
   80cd8:	400e1000 	.word	0x400e1000
   80cdc:	00080c69 	.word	0x00080c69

00080ce0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80ce0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80ce2:	210d      	movs	r1, #13
   80ce4:	4801      	ldr	r0, [pc, #4]	; (80cec <PIOC_Handler+0xc>)
   80ce6:	4b02      	ldr	r3, [pc, #8]	; (80cf0 <PIOC_Handler+0x10>)
   80ce8:	4798      	blx	r3
   80cea:	bd08      	pop	{r3, pc}
   80cec:	400e1200 	.word	0x400e1200
   80cf0:	00080c69 	.word	0x00080c69

00080cf4 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80cf4:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80cf6:	210e      	movs	r1, #14
   80cf8:	4801      	ldr	r0, [pc, #4]	; (80d00 <PIOD_Handler+0xc>)
   80cfa:	4b02      	ldr	r3, [pc, #8]	; (80d04 <PIOD_Handler+0x10>)
   80cfc:	4798      	blx	r3
   80cfe:	bd08      	pop	{r3, pc}
   80d00:	400e1400 	.word	0x400e1400
   80d04:	00080c69 	.word	0x00080c69

00080d08 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80d08:	4a17      	ldr	r2, [pc, #92]	; (80d68 <pmc_switch_mck_to_pllack+0x60>)
   80d0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80d10:	4318      	orrs	r0, r3
   80d12:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d14:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d16:	f013 0f08 	tst.w	r3, #8
   80d1a:	d10a      	bne.n	80d32 <pmc_switch_mck_to_pllack+0x2a>
   80d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d20:	4911      	ldr	r1, [pc, #68]	; (80d68 <pmc_switch_mck_to_pllack+0x60>)
   80d22:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d24:	f012 0f08 	tst.w	r2, #8
   80d28:	d103      	bne.n	80d32 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d2a:	3b01      	subs	r3, #1
   80d2c:	d1f9      	bne.n	80d22 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80d2e:	2001      	movs	r0, #1
   80d30:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80d32:	4a0d      	ldr	r2, [pc, #52]	; (80d68 <pmc_switch_mck_to_pllack+0x60>)
   80d34:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80d36:	f023 0303 	bic.w	r3, r3, #3
   80d3a:	f043 0302 	orr.w	r3, r3, #2
   80d3e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80d40:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d42:	f013 0f08 	tst.w	r3, #8
   80d46:	d10a      	bne.n	80d5e <pmc_switch_mck_to_pllack+0x56>
   80d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80d4c:	4906      	ldr	r1, [pc, #24]	; (80d68 <pmc_switch_mck_to_pllack+0x60>)
   80d4e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80d50:	f012 0f08 	tst.w	r2, #8
   80d54:	d105      	bne.n	80d62 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80d56:	3b01      	subs	r3, #1
   80d58:	d1f9      	bne.n	80d4e <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80d5a:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80d5c:	4770      	bx	lr
	return 0;
   80d5e:	2000      	movs	r0, #0
   80d60:	4770      	bx	lr
   80d62:	2000      	movs	r0, #0
   80d64:	4770      	bx	lr
   80d66:	bf00      	nop
   80d68:	400e0600 	.word	0x400e0600

00080d6c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80d6c:	b9c8      	cbnz	r0, 80da2 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d6e:	4a11      	ldr	r2, [pc, #68]	; (80db4 <pmc_switch_mainck_to_xtal+0x48>)
   80d70:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80d72:	0209      	lsls	r1, r1, #8
   80d74:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80d76:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80d7a:	f023 0303 	bic.w	r3, r3, #3
   80d7e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80d82:	f043 0301 	orr.w	r3, r3, #1
   80d86:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80d88:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80d8a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80d8c:	f013 0f01 	tst.w	r3, #1
   80d90:	d0fb      	beq.n	80d8a <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80d92:	4a08      	ldr	r2, [pc, #32]	; (80db4 <pmc_switch_mainck_to_xtal+0x48>)
   80d94:	6a13      	ldr	r3, [r2, #32]
   80d96:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80d9e:	6213      	str	r3, [r2, #32]
   80da0:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80da2:	4904      	ldr	r1, [pc, #16]	; (80db4 <pmc_switch_mainck_to_xtal+0x48>)
   80da4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80da6:	4a04      	ldr	r2, [pc, #16]	; (80db8 <pmc_switch_mainck_to_xtal+0x4c>)
   80da8:	401a      	ands	r2, r3
   80daa:	4b04      	ldr	r3, [pc, #16]	; (80dbc <pmc_switch_mainck_to_xtal+0x50>)
   80dac:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80dae:	620b      	str	r3, [r1, #32]
   80db0:	4770      	bx	lr
   80db2:	bf00      	nop
   80db4:	400e0600 	.word	0x400e0600
   80db8:	fec8fffc 	.word	0xfec8fffc
   80dbc:	01370002 	.word	0x01370002

00080dc0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80dc0:	4b02      	ldr	r3, [pc, #8]	; (80dcc <pmc_osc_is_ready_mainck+0xc>)
   80dc2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80dc4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80dc8:	4770      	bx	lr
   80dca:	bf00      	nop
   80dcc:	400e0600 	.word	0x400e0600

00080dd0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80dd0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80dd4:	4b01      	ldr	r3, [pc, #4]	; (80ddc <pmc_disable_pllack+0xc>)
   80dd6:	629a      	str	r2, [r3, #40]	; 0x28
   80dd8:	4770      	bx	lr
   80dda:	bf00      	nop
   80ddc:	400e0600 	.word	0x400e0600

00080de0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80de0:	4b02      	ldr	r3, [pc, #8]	; (80dec <pmc_is_locked_pllack+0xc>)
   80de2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80de4:	f000 0002 	and.w	r0, r0, #2
   80de8:	4770      	bx	lr
   80dea:	bf00      	nop
   80dec:	400e0600 	.word	0x400e0600

00080df0 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80df0:	282c      	cmp	r0, #44	; 0x2c
   80df2:	d81e      	bhi.n	80e32 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80df4:	281f      	cmp	r0, #31
   80df6:	d80c      	bhi.n	80e12 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80df8:	4b11      	ldr	r3, [pc, #68]	; (80e40 <pmc_enable_periph_clk+0x50>)
   80dfa:	699a      	ldr	r2, [r3, #24]
   80dfc:	2301      	movs	r3, #1
   80dfe:	4083      	lsls	r3, r0
   80e00:	4393      	bics	r3, r2
   80e02:	d018      	beq.n	80e36 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80e04:	2301      	movs	r3, #1
   80e06:	fa03 f000 	lsl.w	r0, r3, r0
   80e0a:	4b0d      	ldr	r3, [pc, #52]	; (80e40 <pmc_enable_periph_clk+0x50>)
   80e0c:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80e0e:	2000      	movs	r0, #0
   80e10:	4770      	bx	lr
		ul_id -= 32;
   80e12:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80e14:	4b0a      	ldr	r3, [pc, #40]	; (80e40 <pmc_enable_periph_clk+0x50>)
   80e16:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80e1a:	2301      	movs	r3, #1
   80e1c:	4083      	lsls	r3, r0
   80e1e:	4393      	bics	r3, r2
   80e20:	d00b      	beq.n	80e3a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80e22:	2301      	movs	r3, #1
   80e24:	fa03 f000 	lsl.w	r0, r3, r0
   80e28:	4b05      	ldr	r3, [pc, #20]	; (80e40 <pmc_enable_periph_clk+0x50>)
   80e2a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80e2e:	2000      	movs	r0, #0
   80e30:	4770      	bx	lr
		return 1;
   80e32:	2001      	movs	r0, #1
   80e34:	4770      	bx	lr
	return 0;
   80e36:	2000      	movs	r0, #0
   80e38:	4770      	bx	lr
   80e3a:	2000      	movs	r0, #0
}
   80e3c:	4770      	bx	lr
   80e3e:	bf00      	nop
   80e40:	400e0600 	.word	0x400e0600

00080e44 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80e44:	e7fe      	b.n	80e44 <Dummy_Handler>
	...

00080e48 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80e48:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80e4a:	4b1c      	ldr	r3, [pc, #112]	; (80ebc <Reset_Handler+0x74>)
   80e4c:	4a1c      	ldr	r2, [pc, #112]	; (80ec0 <Reset_Handler+0x78>)
   80e4e:	429a      	cmp	r2, r3
   80e50:	d010      	beq.n	80e74 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80e52:	4b1c      	ldr	r3, [pc, #112]	; (80ec4 <Reset_Handler+0x7c>)
   80e54:	4a19      	ldr	r2, [pc, #100]	; (80ebc <Reset_Handler+0x74>)
   80e56:	429a      	cmp	r2, r3
   80e58:	d20c      	bcs.n	80e74 <Reset_Handler+0x2c>
   80e5a:	3b01      	subs	r3, #1
   80e5c:	1a9b      	subs	r3, r3, r2
   80e5e:	f023 0303 	bic.w	r3, r3, #3
   80e62:	3304      	adds	r3, #4
   80e64:	4413      	add	r3, r2
   80e66:	4916      	ldr	r1, [pc, #88]	; (80ec0 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80e68:	f851 0b04 	ldr.w	r0, [r1], #4
   80e6c:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80e70:	429a      	cmp	r2, r3
   80e72:	d1f9      	bne.n	80e68 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80e74:	4b14      	ldr	r3, [pc, #80]	; (80ec8 <Reset_Handler+0x80>)
   80e76:	4a15      	ldr	r2, [pc, #84]	; (80ecc <Reset_Handler+0x84>)
   80e78:	429a      	cmp	r2, r3
   80e7a:	d20a      	bcs.n	80e92 <Reset_Handler+0x4a>
   80e7c:	3b01      	subs	r3, #1
   80e7e:	1a9b      	subs	r3, r3, r2
   80e80:	f023 0303 	bic.w	r3, r3, #3
   80e84:	3304      	adds	r3, #4
   80e86:	4413      	add	r3, r2
		*pDest++ = 0;
   80e88:	2100      	movs	r1, #0
   80e8a:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80e8e:	4293      	cmp	r3, r2
   80e90:	d1fb      	bne.n	80e8a <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80e92:	4b0f      	ldr	r3, [pc, #60]	; (80ed0 <Reset_Handler+0x88>)
   80e94:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80e98:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80e9c:	490d      	ldr	r1, [pc, #52]	; (80ed4 <Reset_Handler+0x8c>)
   80e9e:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80ea0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80ea8:	d203      	bcs.n	80eb2 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80eaa:	688b      	ldr	r3, [r1, #8]
   80eac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80eb0:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80eb2:	4b09      	ldr	r3, [pc, #36]	; (80ed8 <Reset_Handler+0x90>)
   80eb4:	4798      	blx	r3

	/* Branch to main function */
	main();
   80eb6:	4b09      	ldr	r3, [pc, #36]	; (80edc <Reset_Handler+0x94>)
   80eb8:	4798      	blx	r3
   80eba:	e7fe      	b.n	80eba <Reset_Handler+0x72>
   80ebc:	20070000 	.word	0x20070000
   80ec0:	000840a4 	.word	0x000840a4
   80ec4:	20070ae8 	.word	0x20070ae8
   80ec8:	20070d08 	.word	0x20070d08
   80ecc:	20070ae8 	.word	0x20070ae8
   80ed0:	00080000 	.word	0x00080000
   80ed4:	e000ed00 	.word	0xe000ed00
   80ed8:	00081071 	.word	0x00081071
   80edc:	00081049 	.word	0x00081049

00080ee0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ee0:	4b3d      	ldr	r3, [pc, #244]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80ee4:	f003 0303 	and.w	r3, r3, #3
   80ee8:	2b03      	cmp	r3, #3
   80eea:	d80e      	bhi.n	80f0a <SystemCoreClockUpdate+0x2a>
   80eec:	e8df f003 	tbb	[pc, r3]
   80ef0:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80ef4:	4b39      	ldr	r3, [pc, #228]	; (80fdc <SystemCoreClockUpdate+0xfc>)
   80ef6:	695b      	ldr	r3, [r3, #20]
   80ef8:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80efc:	bf14      	ite	ne
   80efe:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80f02:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80f06:	4b36      	ldr	r3, [pc, #216]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f08:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80f0a:	4b33      	ldr	r3, [pc, #204]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f12:	2b70      	cmp	r3, #112	; 0x70
   80f14:	d057      	beq.n	80fc6 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80f16:	4b30      	ldr	r3, [pc, #192]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80f1a:	4931      	ldr	r1, [pc, #196]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f1c:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80f20:	680b      	ldr	r3, [r1, #0]
   80f22:	40d3      	lsrs	r3, r2
   80f24:	600b      	str	r3, [r1, #0]
   80f26:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f28:	4b2b      	ldr	r3, [pc, #172]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f2a:	6a1b      	ldr	r3, [r3, #32]
   80f2c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f30:	d003      	beq.n	80f3a <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f32:	4a2c      	ldr	r2, [pc, #176]	; (80fe4 <SystemCoreClockUpdate+0x104>)
   80f34:	4b2a      	ldr	r3, [pc, #168]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f36:	601a      	str	r2, [r3, #0]
   80f38:	e7e7      	b.n	80f0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f3a:	4a2b      	ldr	r2, [pc, #172]	; (80fe8 <SystemCoreClockUpdate+0x108>)
   80f3c:	4b28      	ldr	r3, [pc, #160]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f3e:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f40:	4b25      	ldr	r3, [pc, #148]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f42:	6a1b      	ldr	r3, [r3, #32]
   80f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f48:	2b10      	cmp	r3, #16
   80f4a:	d005      	beq.n	80f58 <SystemCoreClockUpdate+0x78>
   80f4c:	2b20      	cmp	r3, #32
   80f4e:	d1dc      	bne.n	80f0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80f50:	4a24      	ldr	r2, [pc, #144]	; (80fe4 <SystemCoreClockUpdate+0x104>)
   80f52:	4b23      	ldr	r3, [pc, #140]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f54:	601a      	str	r2, [r3, #0]
				break;
   80f56:	e7d8      	b.n	80f0a <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80f58:	4a24      	ldr	r2, [pc, #144]	; (80fec <SystemCoreClockUpdate+0x10c>)
   80f5a:	4b21      	ldr	r3, [pc, #132]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f5c:	601a      	str	r2, [r3, #0]
				break;
   80f5e:	e7d4      	b.n	80f0a <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80f60:	4b1d      	ldr	r3, [pc, #116]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f62:	6a1b      	ldr	r3, [r3, #32]
   80f64:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80f68:	d00c      	beq.n	80f84 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80f6a:	4a1e      	ldr	r2, [pc, #120]	; (80fe4 <SystemCoreClockUpdate+0x104>)
   80f6c:	4b1c      	ldr	r3, [pc, #112]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f6e:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80f70:	4b19      	ldr	r3, [pc, #100]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80f74:	f003 0303 	and.w	r3, r3, #3
   80f78:	2b02      	cmp	r3, #2
   80f7a:	d016      	beq.n	80faa <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80f7c:	4a1c      	ldr	r2, [pc, #112]	; (80ff0 <SystemCoreClockUpdate+0x110>)
   80f7e:	4b18      	ldr	r3, [pc, #96]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f80:	601a      	str	r2, [r3, #0]
   80f82:	e7c2      	b.n	80f0a <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80f84:	4a18      	ldr	r2, [pc, #96]	; (80fe8 <SystemCoreClockUpdate+0x108>)
   80f86:	4b16      	ldr	r3, [pc, #88]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f88:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80f8a:	4b13      	ldr	r3, [pc, #76]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80f8c:	6a1b      	ldr	r3, [r3, #32]
   80f8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80f92:	2b10      	cmp	r3, #16
   80f94:	d005      	beq.n	80fa2 <SystemCoreClockUpdate+0xc2>
   80f96:	2b20      	cmp	r3, #32
   80f98:	d1ea      	bne.n	80f70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80f9a:	4a12      	ldr	r2, [pc, #72]	; (80fe4 <SystemCoreClockUpdate+0x104>)
   80f9c:	4b10      	ldr	r3, [pc, #64]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80f9e:	601a      	str	r2, [r3, #0]
				break;
   80fa0:	e7e6      	b.n	80f70 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80fa2:	4a12      	ldr	r2, [pc, #72]	; (80fec <SystemCoreClockUpdate+0x10c>)
   80fa4:	4b0e      	ldr	r3, [pc, #56]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80fa6:	601a      	str	r2, [r3, #0]
				break;
   80fa8:	e7e2      	b.n	80f70 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80faa:	4a0b      	ldr	r2, [pc, #44]	; (80fd8 <SystemCoreClockUpdate+0xf8>)
   80fac:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fae:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80fb0:	480b      	ldr	r0, [pc, #44]	; (80fe0 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80fb2:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80fb6:	6803      	ldr	r3, [r0, #0]
   80fb8:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80fbc:	b2d2      	uxtb	r2, r2
   80fbe:	fbb3 f3f2 	udiv	r3, r3, r2
   80fc2:	6003      	str	r3, [r0, #0]
   80fc4:	e7a1      	b.n	80f0a <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80fc6:	4a06      	ldr	r2, [pc, #24]	; (80fe0 <SystemCoreClockUpdate+0x100>)
   80fc8:	6813      	ldr	r3, [r2, #0]
   80fca:	490a      	ldr	r1, [pc, #40]	; (80ff4 <SystemCoreClockUpdate+0x114>)
   80fcc:	fba1 1303 	umull	r1, r3, r1, r3
   80fd0:	085b      	lsrs	r3, r3, #1
   80fd2:	6013      	str	r3, [r2, #0]
   80fd4:	4770      	bx	lr
   80fd6:	bf00      	nop
   80fd8:	400e0600 	.word	0x400e0600
   80fdc:	400e1a10 	.word	0x400e1a10
   80fe0:	20070134 	.word	0x20070134
   80fe4:	00b71b00 	.word	0x00b71b00
   80fe8:	003d0900 	.word	0x003d0900
   80fec:	007a1200 	.word	0x007a1200
   80ff0:	0e4e1c00 	.word	0x0e4e1c00
   80ff4:	aaaaaaab 	.word	0xaaaaaaab

00080ff8 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ff8:	4b0a      	ldr	r3, [pc, #40]	; (81024 <_sbrk+0x2c>)
   80ffa:	681b      	ldr	r3, [r3, #0]
   80ffc:	b153      	cbz	r3, 81014 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80ffe:	4b09      	ldr	r3, [pc, #36]	; (81024 <_sbrk+0x2c>)
   81000:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81002:	181a      	adds	r2, r3, r0
   81004:	4908      	ldr	r1, [pc, #32]	; (81028 <_sbrk+0x30>)
   81006:	4291      	cmp	r1, r2
   81008:	db08      	blt.n	8101c <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8100a:	4610      	mov	r0, r2
   8100c:	4a05      	ldr	r2, [pc, #20]	; (81024 <_sbrk+0x2c>)
   8100e:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81010:	4618      	mov	r0, r3
   81012:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81014:	4a05      	ldr	r2, [pc, #20]	; (8102c <_sbrk+0x34>)
   81016:	4b03      	ldr	r3, [pc, #12]	; (81024 <_sbrk+0x2c>)
   81018:	601a      	str	r2, [r3, #0]
   8101a:	e7f0      	b.n	80ffe <_sbrk+0x6>
		return (caddr_t) -1;	
   8101c:	f04f 30ff 	mov.w	r0, #4294967295
}
   81020:	4770      	bx	lr
   81022:	bf00      	nop
   81024:	20070c9c 	.word	0x20070c9c
   81028:	20087ffc 	.word	0x20087ffc
   8102c:	20072d08 	.word	0x20072d08

00081030 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81030:	f04f 30ff 	mov.w	r0, #4294967295
   81034:	4770      	bx	lr

00081036 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81036:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8103a:	604b      	str	r3, [r1, #4]

	return 0;
}
   8103c:	2000      	movs	r0, #0
   8103e:	4770      	bx	lr

00081040 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81040:	2001      	movs	r0, #1
   81042:	4770      	bx	lr

00081044 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81044:	2000      	movs	r0, #0
   81046:	4770      	bx	lr

00081048 <main>:
#include <asf.h>
#include "I2CFunctions.h"
#include "test.h"

int main (void)
{
   81048:	b508      	push	{r3, lr}
	sysclk_init();
   8104a:	4b05      	ldr	r3, [pc, #20]	; (81060 <main+0x18>)
   8104c:	4798      	blx	r3
	board_init();
   8104e:	4b05      	ldr	r3, [pc, #20]	; (81064 <main+0x1c>)
   81050:	4798      	blx	r3
	delay_init();
	console_init();
   81052:	4b05      	ldr	r3, [pc, #20]	; (81068 <main+0x20>)
   81054:	4798      	blx	r3
	
	if(init_twi())
   81056:	4b05      	ldr	r3, [pc, #20]	; (8106c <main+0x24>)
   81058:	4798      	blx	r3
			//test_s_6();
			//test_s_7();
		/* ----------------------------------------- */
		
	}	
}
   8105a:	2000      	movs	r0, #0
   8105c:	bd08      	pop	{r3, pc}
   8105e:	bf00      	nop
   81060:	00080959 	.word	0x00080959
   81064:	000809bd 	.word	0x000809bd
   81068:	00080555 	.word	0x00080555
   8106c:	000807a9 	.word	0x000807a9

00081070 <__libc_init_array>:
   81070:	b570      	push	{r4, r5, r6, lr}
   81072:	4e0f      	ldr	r6, [pc, #60]	; (810b0 <__libc_init_array+0x40>)
   81074:	4d0f      	ldr	r5, [pc, #60]	; (810b4 <__libc_init_array+0x44>)
   81076:	1b76      	subs	r6, r6, r5
   81078:	10b6      	asrs	r6, r6, #2
   8107a:	bf18      	it	ne
   8107c:	2400      	movne	r4, #0
   8107e:	d005      	beq.n	8108c <__libc_init_array+0x1c>
   81080:	3401      	adds	r4, #1
   81082:	f855 3b04 	ldr.w	r3, [r5], #4
   81086:	4798      	blx	r3
   81088:	42a6      	cmp	r6, r4
   8108a:	d1f9      	bne.n	81080 <__libc_init_array+0x10>
   8108c:	4e0a      	ldr	r6, [pc, #40]	; (810b8 <__libc_init_array+0x48>)
   8108e:	4d0b      	ldr	r5, [pc, #44]	; (810bc <__libc_init_array+0x4c>)
   81090:	f002 fff2 	bl	84078 <_init>
   81094:	1b76      	subs	r6, r6, r5
   81096:	10b6      	asrs	r6, r6, #2
   81098:	bf18      	it	ne
   8109a:	2400      	movne	r4, #0
   8109c:	d006      	beq.n	810ac <__libc_init_array+0x3c>
   8109e:	3401      	adds	r4, #1
   810a0:	f855 3b04 	ldr.w	r3, [r5], #4
   810a4:	4798      	blx	r3
   810a6:	42a6      	cmp	r6, r4
   810a8:	d1f9      	bne.n	8109e <__libc_init_array+0x2e>
   810aa:	bd70      	pop	{r4, r5, r6, pc}
   810ac:	bd70      	pop	{r4, r5, r6, pc}
   810ae:	bf00      	nop
   810b0:	00084084 	.word	0x00084084
   810b4:	00084084 	.word	0x00084084
   810b8:	0008408c 	.word	0x0008408c
   810bc:	00084084 	.word	0x00084084

000810c0 <iprintf>:
   810c0:	b40f      	push	{r0, r1, r2, r3}
   810c2:	b510      	push	{r4, lr}
   810c4:	4b07      	ldr	r3, [pc, #28]	; (810e4 <iprintf+0x24>)
   810c6:	b082      	sub	sp, #8
   810c8:	ac04      	add	r4, sp, #16
   810ca:	f854 2b04 	ldr.w	r2, [r4], #4
   810ce:	6818      	ldr	r0, [r3, #0]
   810d0:	4623      	mov	r3, r4
   810d2:	6881      	ldr	r1, [r0, #8]
   810d4:	9401      	str	r4, [sp, #4]
   810d6:	f000 fa09 	bl	814ec <_vfiprintf_r>
   810da:	b002      	add	sp, #8
   810dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   810e0:	b004      	add	sp, #16
   810e2:	4770      	bx	lr
   810e4:	20070138 	.word	0x20070138

000810e8 <memcpy>:
   810e8:	4684      	mov	ip, r0
   810ea:	ea41 0300 	orr.w	r3, r1, r0
   810ee:	f013 0303 	ands.w	r3, r3, #3
   810f2:	d149      	bne.n	81188 <memcpy+0xa0>
   810f4:	3a40      	subs	r2, #64	; 0x40
   810f6:	d323      	bcc.n	81140 <memcpy+0x58>
   810f8:	680b      	ldr	r3, [r1, #0]
   810fa:	6003      	str	r3, [r0, #0]
   810fc:	684b      	ldr	r3, [r1, #4]
   810fe:	6043      	str	r3, [r0, #4]
   81100:	688b      	ldr	r3, [r1, #8]
   81102:	6083      	str	r3, [r0, #8]
   81104:	68cb      	ldr	r3, [r1, #12]
   81106:	60c3      	str	r3, [r0, #12]
   81108:	690b      	ldr	r3, [r1, #16]
   8110a:	6103      	str	r3, [r0, #16]
   8110c:	694b      	ldr	r3, [r1, #20]
   8110e:	6143      	str	r3, [r0, #20]
   81110:	698b      	ldr	r3, [r1, #24]
   81112:	6183      	str	r3, [r0, #24]
   81114:	69cb      	ldr	r3, [r1, #28]
   81116:	61c3      	str	r3, [r0, #28]
   81118:	6a0b      	ldr	r3, [r1, #32]
   8111a:	6203      	str	r3, [r0, #32]
   8111c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8111e:	6243      	str	r3, [r0, #36]	; 0x24
   81120:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81122:	6283      	str	r3, [r0, #40]	; 0x28
   81124:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81126:	62c3      	str	r3, [r0, #44]	; 0x2c
   81128:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8112a:	6303      	str	r3, [r0, #48]	; 0x30
   8112c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   8112e:	6343      	str	r3, [r0, #52]	; 0x34
   81130:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81132:	6383      	str	r3, [r0, #56]	; 0x38
   81134:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81136:	63c3      	str	r3, [r0, #60]	; 0x3c
   81138:	3040      	adds	r0, #64	; 0x40
   8113a:	3140      	adds	r1, #64	; 0x40
   8113c:	3a40      	subs	r2, #64	; 0x40
   8113e:	d2db      	bcs.n	810f8 <memcpy+0x10>
   81140:	3230      	adds	r2, #48	; 0x30
   81142:	d30b      	bcc.n	8115c <memcpy+0x74>
   81144:	680b      	ldr	r3, [r1, #0]
   81146:	6003      	str	r3, [r0, #0]
   81148:	684b      	ldr	r3, [r1, #4]
   8114a:	6043      	str	r3, [r0, #4]
   8114c:	688b      	ldr	r3, [r1, #8]
   8114e:	6083      	str	r3, [r0, #8]
   81150:	68cb      	ldr	r3, [r1, #12]
   81152:	60c3      	str	r3, [r0, #12]
   81154:	3010      	adds	r0, #16
   81156:	3110      	adds	r1, #16
   81158:	3a10      	subs	r2, #16
   8115a:	d2f3      	bcs.n	81144 <memcpy+0x5c>
   8115c:	320c      	adds	r2, #12
   8115e:	d305      	bcc.n	8116c <memcpy+0x84>
   81160:	f851 3b04 	ldr.w	r3, [r1], #4
   81164:	f840 3b04 	str.w	r3, [r0], #4
   81168:	3a04      	subs	r2, #4
   8116a:	d2f9      	bcs.n	81160 <memcpy+0x78>
   8116c:	3204      	adds	r2, #4
   8116e:	d008      	beq.n	81182 <memcpy+0x9a>
   81170:	07d2      	lsls	r2, r2, #31
   81172:	bf1c      	itt	ne
   81174:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81178:	f800 3b01 	strbne.w	r3, [r0], #1
   8117c:	d301      	bcc.n	81182 <memcpy+0x9a>
   8117e:	880b      	ldrh	r3, [r1, #0]
   81180:	8003      	strh	r3, [r0, #0]
   81182:	4660      	mov	r0, ip
   81184:	4770      	bx	lr
   81186:	bf00      	nop
   81188:	2a08      	cmp	r2, #8
   8118a:	d313      	bcc.n	811b4 <memcpy+0xcc>
   8118c:	078b      	lsls	r3, r1, #30
   8118e:	d0b1      	beq.n	810f4 <memcpy+0xc>
   81190:	f010 0303 	ands.w	r3, r0, #3
   81194:	d0ae      	beq.n	810f4 <memcpy+0xc>
   81196:	f1c3 0304 	rsb	r3, r3, #4
   8119a:	1ad2      	subs	r2, r2, r3
   8119c:	07db      	lsls	r3, r3, #31
   8119e:	bf1c      	itt	ne
   811a0:	f811 3b01 	ldrbne.w	r3, [r1], #1
   811a4:	f800 3b01 	strbne.w	r3, [r0], #1
   811a8:	d3a4      	bcc.n	810f4 <memcpy+0xc>
   811aa:	f831 3b02 	ldrh.w	r3, [r1], #2
   811ae:	f820 3b02 	strh.w	r3, [r0], #2
   811b2:	e79f      	b.n	810f4 <memcpy+0xc>
   811b4:	3a04      	subs	r2, #4
   811b6:	d3d9      	bcc.n	8116c <memcpy+0x84>
   811b8:	3a01      	subs	r2, #1
   811ba:	f811 3b01 	ldrb.w	r3, [r1], #1
   811be:	f800 3b01 	strb.w	r3, [r0], #1
   811c2:	d2f9      	bcs.n	811b8 <memcpy+0xd0>
   811c4:	780b      	ldrb	r3, [r1, #0]
   811c6:	7003      	strb	r3, [r0, #0]
   811c8:	784b      	ldrb	r3, [r1, #1]
   811ca:	7043      	strb	r3, [r0, #1]
   811cc:	788b      	ldrb	r3, [r1, #2]
   811ce:	7083      	strb	r3, [r0, #2]
   811d0:	4660      	mov	r0, ip
   811d2:	4770      	bx	lr

000811d4 <memset>:
   811d4:	b470      	push	{r4, r5, r6}
   811d6:	0786      	lsls	r6, r0, #30
   811d8:	d046      	beq.n	81268 <memset+0x94>
   811da:	1e54      	subs	r4, r2, #1
   811dc:	2a00      	cmp	r2, #0
   811de:	d041      	beq.n	81264 <memset+0x90>
   811e0:	b2ca      	uxtb	r2, r1
   811e2:	4603      	mov	r3, r0
   811e4:	e002      	b.n	811ec <memset+0x18>
   811e6:	f114 34ff 	adds.w	r4, r4, #4294967295
   811ea:	d33b      	bcc.n	81264 <memset+0x90>
   811ec:	f803 2b01 	strb.w	r2, [r3], #1
   811f0:	079d      	lsls	r5, r3, #30
   811f2:	d1f8      	bne.n	811e6 <memset+0x12>
   811f4:	2c03      	cmp	r4, #3
   811f6:	d92e      	bls.n	81256 <memset+0x82>
   811f8:	b2cd      	uxtb	r5, r1
   811fa:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   811fe:	2c0f      	cmp	r4, #15
   81200:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81204:	d919      	bls.n	8123a <memset+0x66>
   81206:	4626      	mov	r6, r4
   81208:	f103 0210 	add.w	r2, r3, #16
   8120c:	3e10      	subs	r6, #16
   8120e:	2e0f      	cmp	r6, #15
   81210:	f842 5c10 	str.w	r5, [r2, #-16]
   81214:	f842 5c0c 	str.w	r5, [r2, #-12]
   81218:	f842 5c08 	str.w	r5, [r2, #-8]
   8121c:	f842 5c04 	str.w	r5, [r2, #-4]
   81220:	f102 0210 	add.w	r2, r2, #16
   81224:	d8f2      	bhi.n	8120c <memset+0x38>
   81226:	f1a4 0210 	sub.w	r2, r4, #16
   8122a:	f022 020f 	bic.w	r2, r2, #15
   8122e:	f004 040f 	and.w	r4, r4, #15
   81232:	3210      	adds	r2, #16
   81234:	2c03      	cmp	r4, #3
   81236:	4413      	add	r3, r2
   81238:	d90d      	bls.n	81256 <memset+0x82>
   8123a:	461e      	mov	r6, r3
   8123c:	4622      	mov	r2, r4
   8123e:	3a04      	subs	r2, #4
   81240:	2a03      	cmp	r2, #3
   81242:	f846 5b04 	str.w	r5, [r6], #4
   81246:	d8fa      	bhi.n	8123e <memset+0x6a>
   81248:	1f22      	subs	r2, r4, #4
   8124a:	f022 0203 	bic.w	r2, r2, #3
   8124e:	3204      	adds	r2, #4
   81250:	4413      	add	r3, r2
   81252:	f004 0403 	and.w	r4, r4, #3
   81256:	b12c      	cbz	r4, 81264 <memset+0x90>
   81258:	b2c9      	uxtb	r1, r1
   8125a:	441c      	add	r4, r3
   8125c:	f803 1b01 	strb.w	r1, [r3], #1
   81260:	429c      	cmp	r4, r3
   81262:	d1fb      	bne.n	8125c <memset+0x88>
   81264:	bc70      	pop	{r4, r5, r6}
   81266:	4770      	bx	lr
   81268:	4614      	mov	r4, r2
   8126a:	4603      	mov	r3, r0
   8126c:	e7c2      	b.n	811f4 <memset+0x20>
   8126e:	bf00      	nop

00081270 <setbuf>:
   81270:	2900      	cmp	r1, #0
   81272:	bf0c      	ite	eq
   81274:	2202      	moveq	r2, #2
   81276:	2200      	movne	r2, #0
   81278:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8127c:	f000 b800 	b.w	81280 <setvbuf>

00081280 <setvbuf>:
   81280:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81284:	4d61      	ldr	r5, [pc, #388]	; (8140c <setvbuf+0x18c>)
   81286:	b083      	sub	sp, #12
   81288:	682d      	ldr	r5, [r5, #0]
   8128a:	4604      	mov	r4, r0
   8128c:	460f      	mov	r7, r1
   8128e:	4690      	mov	r8, r2
   81290:	461e      	mov	r6, r3
   81292:	b115      	cbz	r5, 8129a <setvbuf+0x1a>
   81294:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81296:	2b00      	cmp	r3, #0
   81298:	d064      	beq.n	81364 <setvbuf+0xe4>
   8129a:	f1b8 0f02 	cmp.w	r8, #2
   8129e:	d006      	beq.n	812ae <setvbuf+0x2e>
   812a0:	f1b8 0f01 	cmp.w	r8, #1
   812a4:	f200 809f 	bhi.w	813e6 <setvbuf+0x166>
   812a8:	2e00      	cmp	r6, #0
   812aa:	f2c0 809c 	blt.w	813e6 <setvbuf+0x166>
   812ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   812b0:	07d8      	lsls	r0, r3, #31
   812b2:	d534      	bpl.n	8131e <setvbuf+0x9e>
   812b4:	4621      	mov	r1, r4
   812b6:	4628      	mov	r0, r5
   812b8:	f001 f8b0 	bl	8241c <_fflush_r>
   812bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   812be:	b141      	cbz	r1, 812d2 <setvbuf+0x52>
   812c0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   812c4:	4299      	cmp	r1, r3
   812c6:	d002      	beq.n	812ce <setvbuf+0x4e>
   812c8:	4628      	mov	r0, r5
   812ca:	f001 fa25 	bl	82718 <_free_r>
   812ce:	2300      	movs	r3, #0
   812d0:	6323      	str	r3, [r4, #48]	; 0x30
   812d2:	2200      	movs	r2, #0
   812d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   812d8:	61a2      	str	r2, [r4, #24]
   812da:	6062      	str	r2, [r4, #4]
   812dc:	061a      	lsls	r2, r3, #24
   812de:	d43a      	bmi.n	81356 <setvbuf+0xd6>
   812e0:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   812e4:	f023 0303 	bic.w	r3, r3, #3
   812e8:	f1b8 0f02 	cmp.w	r8, #2
   812ec:	81a3      	strh	r3, [r4, #12]
   812ee:	d01d      	beq.n	8132c <setvbuf+0xac>
   812f0:	ab01      	add	r3, sp, #4
   812f2:	466a      	mov	r2, sp
   812f4:	4621      	mov	r1, r4
   812f6:	4628      	mov	r0, r5
   812f8:	f001 fcac 	bl	82c54 <__swhatbuf_r>
   812fc:	89a3      	ldrh	r3, [r4, #12]
   812fe:	4318      	orrs	r0, r3
   81300:	81a0      	strh	r0, [r4, #12]
   81302:	2e00      	cmp	r6, #0
   81304:	d132      	bne.n	8136c <setvbuf+0xec>
   81306:	9e00      	ldr	r6, [sp, #0]
   81308:	4630      	mov	r0, r6
   8130a:	f001 fd1b 	bl	82d44 <malloc>
   8130e:	4607      	mov	r7, r0
   81310:	2800      	cmp	r0, #0
   81312:	d06b      	beq.n	813ec <setvbuf+0x16c>
   81314:	89a3      	ldrh	r3, [r4, #12]
   81316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8131a:	81a3      	strh	r3, [r4, #12]
   8131c:	e028      	b.n	81370 <setvbuf+0xf0>
   8131e:	89a3      	ldrh	r3, [r4, #12]
   81320:	0599      	lsls	r1, r3, #22
   81322:	d4c7      	bmi.n	812b4 <setvbuf+0x34>
   81324:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81326:	f001 fc91 	bl	82c4c <__retarget_lock_acquire_recursive>
   8132a:	e7c3      	b.n	812b4 <setvbuf+0x34>
   8132c:	2500      	movs	r5, #0
   8132e:	2600      	movs	r6, #0
   81330:	2001      	movs	r0, #1
   81332:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81334:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81338:	f043 0302 	orr.w	r3, r3, #2
   8133c:	60a6      	str	r6, [r4, #8]
   8133e:	07ce      	lsls	r6, r1, #31
   81340:	81a3      	strh	r3, [r4, #12]
   81342:	6160      	str	r0, [r4, #20]
   81344:	6022      	str	r2, [r4, #0]
   81346:	6122      	str	r2, [r4, #16]
   81348:	d401      	bmi.n	8134e <setvbuf+0xce>
   8134a:	0598      	lsls	r0, r3, #22
   8134c:	d53e      	bpl.n	813cc <setvbuf+0x14c>
   8134e:	4628      	mov	r0, r5
   81350:	b003      	add	sp, #12
   81352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81356:	6921      	ldr	r1, [r4, #16]
   81358:	4628      	mov	r0, r5
   8135a:	f001 f9dd 	bl	82718 <_free_r>
   8135e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81362:	e7bd      	b.n	812e0 <setvbuf+0x60>
   81364:	4628      	mov	r0, r5
   81366:	f001 f8b1 	bl	824cc <__sinit>
   8136a:	e796      	b.n	8129a <setvbuf+0x1a>
   8136c:	2f00      	cmp	r7, #0
   8136e:	d0cb      	beq.n	81308 <setvbuf+0x88>
   81370:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81372:	2b00      	cmp	r3, #0
   81374:	d033      	beq.n	813de <setvbuf+0x15e>
   81376:	9b00      	ldr	r3, [sp, #0]
   81378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8137c:	429e      	cmp	r6, r3
   8137e:	bf1c      	itt	ne
   81380:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81384:	81a2      	strhne	r2, [r4, #12]
   81386:	f1b8 0f01 	cmp.w	r8, #1
   8138a:	bf04      	itt	eq
   8138c:	f042 0201 	orreq.w	r2, r2, #1
   81390:	81a2      	strheq	r2, [r4, #12]
   81392:	b292      	uxth	r2, r2
   81394:	f012 0308 	ands.w	r3, r2, #8
   81398:	6027      	str	r7, [r4, #0]
   8139a:	6127      	str	r7, [r4, #16]
   8139c:	6166      	str	r6, [r4, #20]
   8139e:	d00e      	beq.n	813be <setvbuf+0x13e>
   813a0:	07d1      	lsls	r1, r2, #31
   813a2:	d51a      	bpl.n	813da <setvbuf+0x15a>
   813a4:	2300      	movs	r3, #0
   813a6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   813a8:	4276      	negs	r6, r6
   813aa:	f015 0501 	ands.w	r5, r5, #1
   813ae:	61a6      	str	r6, [r4, #24]
   813b0:	60a3      	str	r3, [r4, #8]
   813b2:	d009      	beq.n	813c8 <setvbuf+0x148>
   813b4:	2500      	movs	r5, #0
   813b6:	4628      	mov	r0, r5
   813b8:	b003      	add	sp, #12
   813ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   813be:	60a3      	str	r3, [r4, #8]
   813c0:	6e65      	ldr	r5, [r4, #100]	; 0x64
   813c2:	f015 0501 	ands.w	r5, r5, #1
   813c6:	d1f5      	bne.n	813b4 <setvbuf+0x134>
   813c8:	0593      	lsls	r3, r2, #22
   813ca:	d4c0      	bmi.n	8134e <setvbuf+0xce>
   813cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   813ce:	f001 fc3f 	bl	82c50 <__retarget_lock_release_recursive>
   813d2:	4628      	mov	r0, r5
   813d4:	b003      	add	sp, #12
   813d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   813da:	60a6      	str	r6, [r4, #8]
   813dc:	e7f0      	b.n	813c0 <setvbuf+0x140>
   813de:	4628      	mov	r0, r5
   813e0:	f001 f874 	bl	824cc <__sinit>
   813e4:	e7c7      	b.n	81376 <setvbuf+0xf6>
   813e6:	f04f 35ff 	mov.w	r5, #4294967295
   813ea:	e7b0      	b.n	8134e <setvbuf+0xce>
   813ec:	f8dd 9000 	ldr.w	r9, [sp]
   813f0:	45b1      	cmp	r9, r6
   813f2:	d004      	beq.n	813fe <setvbuf+0x17e>
   813f4:	4648      	mov	r0, r9
   813f6:	f001 fca5 	bl	82d44 <malloc>
   813fa:	4607      	mov	r7, r0
   813fc:	b920      	cbnz	r0, 81408 <setvbuf+0x188>
   813fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81402:	f04f 35ff 	mov.w	r5, #4294967295
   81406:	e792      	b.n	8132e <setvbuf+0xae>
   81408:	464e      	mov	r6, r9
   8140a:	e783      	b.n	81314 <setvbuf+0x94>
   8140c:	20070138 	.word	0x20070138

00081410 <strlen>:
   81410:	f020 0103 	bic.w	r1, r0, #3
   81414:	f010 0003 	ands.w	r0, r0, #3
   81418:	f1c0 0000 	rsb	r0, r0, #0
   8141c:	f851 3b04 	ldr.w	r3, [r1], #4
   81420:	f100 0c04 	add.w	ip, r0, #4
   81424:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81428:	f06f 0200 	mvn.w	r2, #0
   8142c:	bf1c      	itt	ne
   8142e:	fa22 f20c 	lsrne.w	r2, r2, ip
   81432:	4313      	orrne	r3, r2
   81434:	f04f 0c01 	mov.w	ip, #1
   81438:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8143c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81440:	eba3 020c 	sub.w	r2, r3, ip
   81444:	ea22 0203 	bic.w	r2, r2, r3
   81448:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8144c:	bf04      	itt	eq
   8144e:	f851 3b04 	ldreq.w	r3, [r1], #4
   81452:	3004      	addeq	r0, #4
   81454:	d0f4      	beq.n	81440 <strlen+0x30>
   81456:	f1c2 0100 	rsb	r1, r2, #0
   8145a:	ea02 0201 	and.w	r2, r2, r1
   8145e:	fab2 f282 	clz	r2, r2
   81462:	f1c2 021f 	rsb	r2, r2, #31
   81466:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8146a:	4770      	bx	lr

0008146c <__sprint_r.part.0>:
   8146c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81470:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81472:	4693      	mov	fp, r2
   81474:	049c      	lsls	r4, r3, #18
   81476:	d52f      	bpl.n	814d8 <__sprint_r.part.0+0x6c>
   81478:	6893      	ldr	r3, [r2, #8]
   8147a:	6812      	ldr	r2, [r2, #0]
   8147c:	b353      	cbz	r3, 814d4 <__sprint_r.part.0+0x68>
   8147e:	460e      	mov	r6, r1
   81480:	4607      	mov	r7, r0
   81482:	f102 0908 	add.w	r9, r2, #8
   81486:	e919 0420 	ldmdb	r9, {r5, sl}
   8148a:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8148e:	d017      	beq.n	814c0 <__sprint_r.part.0+0x54>
   81490:	2400      	movs	r4, #0
   81492:	3d04      	subs	r5, #4
   81494:	e001      	b.n	8149a <__sprint_r.part.0+0x2e>
   81496:	45a0      	cmp	r8, r4
   81498:	d010      	beq.n	814bc <__sprint_r.part.0+0x50>
   8149a:	4632      	mov	r2, r6
   8149c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   814a0:	4638      	mov	r0, r7
   814a2:	f001 f8b5 	bl	82610 <_fputwc_r>
   814a6:	1c43      	adds	r3, r0, #1
   814a8:	f104 0401 	add.w	r4, r4, #1
   814ac:	d1f3      	bne.n	81496 <__sprint_r.part.0+0x2a>
   814ae:	2300      	movs	r3, #0
   814b0:	f8cb 3008 	str.w	r3, [fp, #8]
   814b4:	f8cb 3004 	str.w	r3, [fp, #4]
   814b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814bc:	f8db 3008 	ldr.w	r3, [fp, #8]
   814c0:	f02a 0a03 	bic.w	sl, sl, #3
   814c4:	eba3 030a 	sub.w	r3, r3, sl
   814c8:	f8cb 3008 	str.w	r3, [fp, #8]
   814cc:	f109 0908 	add.w	r9, r9, #8
   814d0:	2b00      	cmp	r3, #0
   814d2:	d1d8      	bne.n	81486 <__sprint_r.part.0+0x1a>
   814d4:	2000      	movs	r0, #0
   814d6:	e7ea      	b.n	814ae <__sprint_r.part.0+0x42>
   814d8:	f001 fa04 	bl	828e4 <__sfvwrite_r>
   814dc:	2300      	movs	r3, #0
   814de:	f8cb 3008 	str.w	r3, [fp, #8]
   814e2:	f8cb 3004 	str.w	r3, [fp, #4]
   814e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814ea:	bf00      	nop

000814ec <_vfiprintf_r>:
   814ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   814f0:	b0ad      	sub	sp, #180	; 0xb4
   814f2:	461d      	mov	r5, r3
   814f4:	468b      	mov	fp, r1
   814f6:	4690      	mov	r8, r2
   814f8:	9307      	str	r3, [sp, #28]
   814fa:	9006      	str	r0, [sp, #24]
   814fc:	b118      	cbz	r0, 81506 <_vfiprintf_r+0x1a>
   814fe:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81500:	2b00      	cmp	r3, #0
   81502:	f000 80f3 	beq.w	816ec <_vfiprintf_r+0x200>
   81506:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8150a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8150e:	07df      	lsls	r7, r3, #31
   81510:	b281      	uxth	r1, r0
   81512:	d402      	bmi.n	8151a <_vfiprintf_r+0x2e>
   81514:	058e      	lsls	r6, r1, #22
   81516:	f140 80fc 	bpl.w	81712 <_vfiprintf_r+0x226>
   8151a:	048c      	lsls	r4, r1, #18
   8151c:	d40a      	bmi.n	81534 <_vfiprintf_r+0x48>
   8151e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81522:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81526:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8152a:	f8ab 100c 	strh.w	r1, [fp, #12]
   8152e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81532:	b289      	uxth	r1, r1
   81534:	0708      	lsls	r0, r1, #28
   81536:	f140 80b3 	bpl.w	816a0 <_vfiprintf_r+0x1b4>
   8153a:	f8db 3010 	ldr.w	r3, [fp, #16]
   8153e:	2b00      	cmp	r3, #0
   81540:	f000 80ae 	beq.w	816a0 <_vfiprintf_r+0x1b4>
   81544:	f001 031a 	and.w	r3, r1, #26
   81548:	2b0a      	cmp	r3, #10
   8154a:	f000 80b5 	beq.w	816b8 <_vfiprintf_r+0x1cc>
   8154e:	2300      	movs	r3, #0
   81550:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81554:	46d1      	mov	r9, sl
   81556:	930b      	str	r3, [sp, #44]	; 0x2c
   81558:	9303      	str	r3, [sp, #12]
   8155a:	9311      	str	r3, [sp, #68]	; 0x44
   8155c:	9310      	str	r3, [sp, #64]	; 0x40
   8155e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81562:	f8cd b010 	str.w	fp, [sp, #16]
   81566:	f898 3000 	ldrb.w	r3, [r8]
   8156a:	4644      	mov	r4, r8
   8156c:	b1fb      	cbz	r3, 815ae <_vfiprintf_r+0xc2>
   8156e:	2b25      	cmp	r3, #37	; 0x25
   81570:	d102      	bne.n	81578 <_vfiprintf_r+0x8c>
   81572:	e01c      	b.n	815ae <_vfiprintf_r+0xc2>
   81574:	2b25      	cmp	r3, #37	; 0x25
   81576:	d003      	beq.n	81580 <_vfiprintf_r+0x94>
   81578:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8157c:	2b00      	cmp	r3, #0
   8157e:	d1f9      	bne.n	81574 <_vfiprintf_r+0x88>
   81580:	eba4 0508 	sub.w	r5, r4, r8
   81584:	b19d      	cbz	r5, 815ae <_vfiprintf_r+0xc2>
   81586:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81588:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8158a:	3301      	adds	r3, #1
   8158c:	442a      	add	r2, r5
   8158e:	2b07      	cmp	r3, #7
   81590:	f8c9 8000 	str.w	r8, [r9]
   81594:	f8c9 5004 	str.w	r5, [r9, #4]
   81598:	9211      	str	r2, [sp, #68]	; 0x44
   8159a:	9310      	str	r3, [sp, #64]	; 0x40
   8159c:	dd7a      	ble.n	81694 <_vfiprintf_r+0x1a8>
   8159e:	2a00      	cmp	r2, #0
   815a0:	f040 84b5 	bne.w	81f0e <_vfiprintf_r+0xa22>
   815a4:	46d1      	mov	r9, sl
   815a6:	9b03      	ldr	r3, [sp, #12]
   815a8:	9210      	str	r2, [sp, #64]	; 0x40
   815aa:	442b      	add	r3, r5
   815ac:	9303      	str	r3, [sp, #12]
   815ae:	7823      	ldrb	r3, [r4, #0]
   815b0:	2b00      	cmp	r3, #0
   815b2:	f000 83e5 	beq.w	81d80 <_vfiprintf_r+0x894>
   815b6:	2000      	movs	r0, #0
   815b8:	f04f 0300 	mov.w	r3, #0
   815bc:	f104 0801 	add.w	r8, r4, #1
   815c0:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   815c4:	7862      	ldrb	r2, [r4, #1]
   815c6:	4606      	mov	r6, r0
   815c8:	4605      	mov	r5, r0
   815ca:	4603      	mov	r3, r0
   815cc:	f04f 34ff 	mov.w	r4, #4294967295
   815d0:	f108 0801 	add.w	r8, r8, #1
   815d4:	f1a2 0120 	sub.w	r1, r2, #32
   815d8:	2958      	cmp	r1, #88	; 0x58
   815da:	f200 82d9 	bhi.w	81b90 <_vfiprintf_r+0x6a4>
   815de:	e8df f011 	tbh	[pc, r1, lsl #1]
   815e2:	0228      	.short	0x0228
   815e4:	02d702d7 	.word	0x02d702d7
   815e8:	02d70230 	.word	0x02d70230
   815ec:	02d702d7 	.word	0x02d702d7
   815f0:	02d702d7 	.word	0x02d702d7
   815f4:	00a002d7 	.word	0x00a002d7
   815f8:	02d70288 	.word	0x02d70288
   815fc:	02b800a8 	.word	0x02b800a8
   81600:	01a602d7 	.word	0x01a602d7
   81604:	01ab01ab 	.word	0x01ab01ab
   81608:	01ab01ab 	.word	0x01ab01ab
   8160c:	01ab01ab 	.word	0x01ab01ab
   81610:	01ab01ab 	.word	0x01ab01ab
   81614:	02d701ab 	.word	0x02d701ab
   81618:	02d702d7 	.word	0x02d702d7
   8161c:	02d702d7 	.word	0x02d702d7
   81620:	02d702d7 	.word	0x02d702d7
   81624:	02d702d7 	.word	0x02d702d7
   81628:	01b902d7 	.word	0x01b902d7
   8162c:	02d702d7 	.word	0x02d702d7
   81630:	02d702d7 	.word	0x02d702d7
   81634:	02d702d7 	.word	0x02d702d7
   81638:	02d702d7 	.word	0x02d702d7
   8163c:	02d702d7 	.word	0x02d702d7
   81640:	02d7019e 	.word	0x02d7019e
   81644:	02d702d7 	.word	0x02d702d7
   81648:	02d702d7 	.word	0x02d702d7
   8164c:	02d701a2 	.word	0x02d701a2
   81650:	025a02d7 	.word	0x025a02d7
   81654:	02d702d7 	.word	0x02d702d7
   81658:	02d702d7 	.word	0x02d702d7
   8165c:	02d702d7 	.word	0x02d702d7
   81660:	02d702d7 	.word	0x02d702d7
   81664:	02d702d7 	.word	0x02d702d7
   81668:	02220261 	.word	0x02220261
   8166c:	02d702d7 	.word	0x02d702d7
   81670:	027602d7 	.word	0x027602d7
   81674:	02d70222 	.word	0x02d70222
   81678:	027b02d7 	.word	0x027b02d7
   8167c:	01fc02d7 	.word	0x01fc02d7
   81680:	02100189 	.word	0x02100189
   81684:	02d702d2 	.word	0x02d702d2
   81688:	02d70295 	.word	0x02d70295
   8168c:	02d700ad 	.word	0x02d700ad
   81690:	023502d7 	.word	0x023502d7
   81694:	f109 0908 	add.w	r9, r9, #8
   81698:	9b03      	ldr	r3, [sp, #12]
   8169a:	442b      	add	r3, r5
   8169c:	9303      	str	r3, [sp, #12]
   8169e:	e786      	b.n	815ae <_vfiprintf_r+0xc2>
   816a0:	4659      	mov	r1, fp
   816a2:	9806      	ldr	r0, [sp, #24]
   816a4:	f000 fdaa 	bl	821fc <__swsetup_r>
   816a8:	bb18      	cbnz	r0, 816f2 <_vfiprintf_r+0x206>
   816aa:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   816ae:	f001 031a 	and.w	r3, r1, #26
   816b2:	2b0a      	cmp	r3, #10
   816b4:	f47f af4b 	bne.w	8154e <_vfiprintf_r+0x62>
   816b8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   816bc:	2b00      	cmp	r3, #0
   816be:	f6ff af46 	blt.w	8154e <_vfiprintf_r+0x62>
   816c2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   816c6:	07db      	lsls	r3, r3, #31
   816c8:	d405      	bmi.n	816d6 <_vfiprintf_r+0x1ea>
   816ca:	058f      	lsls	r7, r1, #22
   816cc:	d403      	bmi.n	816d6 <_vfiprintf_r+0x1ea>
   816ce:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   816d2:	f001 fabd 	bl	82c50 <__retarget_lock_release_recursive>
   816d6:	462b      	mov	r3, r5
   816d8:	4642      	mov	r2, r8
   816da:	4659      	mov	r1, fp
   816dc:	9806      	ldr	r0, [sp, #24]
   816de:	f000 fd49 	bl	82174 <__sbprintf>
   816e2:	9003      	str	r0, [sp, #12]
   816e4:	9803      	ldr	r0, [sp, #12]
   816e6:	b02d      	add	sp, #180	; 0xb4
   816e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816ec:	f000 feee 	bl	824cc <__sinit>
   816f0:	e709      	b.n	81506 <_vfiprintf_r+0x1a>
   816f2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   816f6:	07d9      	lsls	r1, r3, #31
   816f8:	d404      	bmi.n	81704 <_vfiprintf_r+0x218>
   816fa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   816fe:	059a      	lsls	r2, r3, #22
   81700:	f140 84ae 	bpl.w	82060 <_vfiprintf_r+0xb74>
   81704:	f04f 33ff 	mov.w	r3, #4294967295
   81708:	9303      	str	r3, [sp, #12]
   8170a:	9803      	ldr	r0, [sp, #12]
   8170c:	b02d      	add	sp, #180	; 0xb4
   8170e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81712:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81716:	f001 fa99 	bl	82c4c <__retarget_lock_acquire_recursive>
   8171a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8171e:	b281      	uxth	r1, r0
   81720:	e6fb      	b.n	8151a <_vfiprintf_r+0x2e>
   81722:	9907      	ldr	r1, [sp, #28]
   81724:	460a      	mov	r2, r1
   81726:	680d      	ldr	r5, [r1, #0]
   81728:	3204      	adds	r2, #4
   8172a:	2d00      	cmp	r5, #0
   8172c:	9207      	str	r2, [sp, #28]
   8172e:	da02      	bge.n	81736 <_vfiprintf_r+0x24a>
   81730:	426d      	negs	r5, r5
   81732:	f043 0304 	orr.w	r3, r3, #4
   81736:	f898 2000 	ldrb.w	r2, [r8]
   8173a:	e749      	b.n	815d0 <_vfiprintf_r+0xe4>
   8173c:	9508      	str	r5, [sp, #32]
   8173e:	069e      	lsls	r6, r3, #26
   81740:	f100 845a 	bmi.w	81ff8 <_vfiprintf_r+0xb0c>
   81744:	9907      	ldr	r1, [sp, #28]
   81746:	06dd      	lsls	r5, r3, #27
   81748:	460a      	mov	r2, r1
   8174a:	f100 83ef 	bmi.w	81f2c <_vfiprintf_r+0xa40>
   8174e:	0658      	lsls	r0, r3, #25
   81750:	f140 83ec 	bpl.w	81f2c <_vfiprintf_r+0xa40>
   81754:	2700      	movs	r7, #0
   81756:	2201      	movs	r2, #1
   81758:	880e      	ldrh	r6, [r1, #0]
   8175a:	3104      	adds	r1, #4
   8175c:	9107      	str	r1, [sp, #28]
   8175e:	f04f 0100 	mov.w	r1, #0
   81762:	2500      	movs	r5, #0
   81764:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81768:	1c61      	adds	r1, r4, #1
   8176a:	f000 8117 	beq.w	8199c <_vfiprintf_r+0x4b0>
   8176e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81772:	9102      	str	r1, [sp, #8]
   81774:	ea56 0107 	orrs.w	r1, r6, r7
   81778:	f040 8115 	bne.w	819a6 <_vfiprintf_r+0x4ba>
   8177c:	2c00      	cmp	r4, #0
   8177e:	f040 835b 	bne.w	81e38 <_vfiprintf_r+0x94c>
   81782:	2a00      	cmp	r2, #0
   81784:	f040 83b6 	bne.w	81ef4 <_vfiprintf_r+0xa08>
   81788:	f013 0301 	ands.w	r3, r3, #1
   8178c:	9305      	str	r3, [sp, #20]
   8178e:	f000 8455 	beq.w	8203c <_vfiprintf_r+0xb50>
   81792:	2330      	movs	r3, #48	; 0x30
   81794:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81798:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   8179c:	9b05      	ldr	r3, [sp, #20]
   8179e:	42a3      	cmp	r3, r4
   817a0:	bfb8      	it	lt
   817a2:	4623      	movlt	r3, r4
   817a4:	9301      	str	r3, [sp, #4]
   817a6:	b10d      	cbz	r5, 817ac <_vfiprintf_r+0x2c0>
   817a8:	3301      	adds	r3, #1
   817aa:	9301      	str	r3, [sp, #4]
   817ac:	9b02      	ldr	r3, [sp, #8]
   817ae:	f013 0302 	ands.w	r3, r3, #2
   817b2:	9309      	str	r3, [sp, #36]	; 0x24
   817b4:	d002      	beq.n	817bc <_vfiprintf_r+0x2d0>
   817b6:	9b01      	ldr	r3, [sp, #4]
   817b8:	3302      	adds	r3, #2
   817ba:	9301      	str	r3, [sp, #4]
   817bc:	9b02      	ldr	r3, [sp, #8]
   817be:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   817c2:	930a      	str	r3, [sp, #40]	; 0x28
   817c4:	f040 8215 	bne.w	81bf2 <_vfiprintf_r+0x706>
   817c8:	9b08      	ldr	r3, [sp, #32]
   817ca:	9a01      	ldr	r2, [sp, #4]
   817cc:	1a9d      	subs	r5, r3, r2
   817ce:	2d00      	cmp	r5, #0
   817d0:	f340 820f 	ble.w	81bf2 <_vfiprintf_r+0x706>
   817d4:	2d10      	cmp	r5, #16
   817d6:	f340 8484 	ble.w	820e2 <_vfiprintf_r+0xbf6>
   817da:	9b10      	ldr	r3, [sp, #64]	; 0x40
   817dc:	46ce      	mov	lr, r9
   817de:	2710      	movs	r7, #16
   817e0:	46a1      	mov	r9, r4
   817e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   817e4:	4ec5      	ldr	r6, [pc, #788]	; (81afc <_vfiprintf_r+0x610>)
   817e6:	4619      	mov	r1, r3
   817e8:	9c06      	ldr	r4, [sp, #24]
   817ea:	e007      	b.n	817fc <_vfiprintf_r+0x310>
   817ec:	f101 0c02 	add.w	ip, r1, #2
   817f0:	4601      	mov	r1, r0
   817f2:	f10e 0e08 	add.w	lr, lr, #8
   817f6:	3d10      	subs	r5, #16
   817f8:	2d10      	cmp	r5, #16
   817fa:	dd11      	ble.n	81820 <_vfiprintf_r+0x334>
   817fc:	1c48      	adds	r0, r1, #1
   817fe:	3210      	adds	r2, #16
   81800:	2807      	cmp	r0, #7
   81802:	9211      	str	r2, [sp, #68]	; 0x44
   81804:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81808:	9010      	str	r0, [sp, #64]	; 0x40
   8180a:	ddef      	ble.n	817ec <_vfiprintf_r+0x300>
   8180c:	2a00      	cmp	r2, #0
   8180e:	f040 81d9 	bne.w	81bc4 <_vfiprintf_r+0x6d8>
   81812:	3d10      	subs	r5, #16
   81814:	2d10      	cmp	r5, #16
   81816:	4611      	mov	r1, r2
   81818:	f04f 0c01 	mov.w	ip, #1
   8181c:	46d6      	mov	lr, sl
   8181e:	dced      	bgt.n	817fc <_vfiprintf_r+0x310>
   81820:	464c      	mov	r4, r9
   81822:	4661      	mov	r1, ip
   81824:	46f1      	mov	r9, lr
   81826:	442a      	add	r2, r5
   81828:	2907      	cmp	r1, #7
   8182a:	9211      	str	r2, [sp, #68]	; 0x44
   8182c:	f8c9 6000 	str.w	r6, [r9]
   81830:	f8c9 5004 	str.w	r5, [r9, #4]
   81834:	9110      	str	r1, [sp, #64]	; 0x40
   81836:	f300 82eb 	bgt.w	81e10 <_vfiprintf_r+0x924>
   8183a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8183e:	f109 0908 	add.w	r9, r9, #8
   81842:	1c48      	adds	r0, r1, #1
   81844:	2d00      	cmp	r5, #0
   81846:	f040 81dc 	bne.w	81c02 <_vfiprintf_r+0x716>
   8184a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8184c:	2b00      	cmp	r3, #0
   8184e:	f000 81f6 	beq.w	81c3e <_vfiprintf_r+0x752>
   81852:	2102      	movs	r1, #2
   81854:	ab0e      	add	r3, sp, #56	; 0x38
   81856:	440a      	add	r2, r1
   81858:	2807      	cmp	r0, #7
   8185a:	9211      	str	r2, [sp, #68]	; 0x44
   8185c:	9010      	str	r0, [sp, #64]	; 0x40
   8185e:	f8c9 1004 	str.w	r1, [r9, #4]
   81862:	f8c9 3000 	str.w	r3, [r9]
   81866:	f340 81e6 	ble.w	81c36 <_vfiprintf_r+0x74a>
   8186a:	2a00      	cmp	r2, #0
   8186c:	f040 8395 	bne.w	81f9a <_vfiprintf_r+0xaae>
   81870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81872:	2001      	movs	r0, #1
   81874:	2b80      	cmp	r3, #128	; 0x80
   81876:	4611      	mov	r1, r2
   81878:	46d1      	mov	r9, sl
   8187a:	f040 81e4 	bne.w	81c46 <_vfiprintf_r+0x75a>
   8187e:	9b08      	ldr	r3, [sp, #32]
   81880:	9d01      	ldr	r5, [sp, #4]
   81882:	1b5e      	subs	r6, r3, r5
   81884:	2e00      	cmp	r6, #0
   81886:	f340 81de 	ble.w	81c46 <_vfiprintf_r+0x75a>
   8188a:	2e10      	cmp	r6, #16
   8188c:	f340 843c 	ble.w	82108 <_vfiprintf_r+0xc1c>
   81890:	46cc      	mov	ip, r9
   81892:	2710      	movs	r7, #16
   81894:	46a1      	mov	r9, r4
   81896:	4d9a      	ldr	r5, [pc, #616]	; (81b00 <_vfiprintf_r+0x614>)
   81898:	9c06      	ldr	r4, [sp, #24]
   8189a:	e007      	b.n	818ac <_vfiprintf_r+0x3c0>
   8189c:	f101 0e02 	add.w	lr, r1, #2
   818a0:	4601      	mov	r1, r0
   818a2:	f10c 0c08 	add.w	ip, ip, #8
   818a6:	3e10      	subs	r6, #16
   818a8:	2e10      	cmp	r6, #16
   818aa:	dd11      	ble.n	818d0 <_vfiprintf_r+0x3e4>
   818ac:	1c48      	adds	r0, r1, #1
   818ae:	3210      	adds	r2, #16
   818b0:	2807      	cmp	r0, #7
   818b2:	9211      	str	r2, [sp, #68]	; 0x44
   818b4:	e88c 00a0 	stmia.w	ip, {r5, r7}
   818b8:	9010      	str	r0, [sp, #64]	; 0x40
   818ba:	ddef      	ble.n	8189c <_vfiprintf_r+0x3b0>
   818bc:	2a00      	cmp	r2, #0
   818be:	f040 829b 	bne.w	81df8 <_vfiprintf_r+0x90c>
   818c2:	3e10      	subs	r6, #16
   818c4:	2e10      	cmp	r6, #16
   818c6:	f04f 0e01 	mov.w	lr, #1
   818ca:	4611      	mov	r1, r2
   818cc:	46d4      	mov	ip, sl
   818ce:	dced      	bgt.n	818ac <_vfiprintf_r+0x3c0>
   818d0:	464c      	mov	r4, r9
   818d2:	46e1      	mov	r9, ip
   818d4:	4432      	add	r2, r6
   818d6:	f1be 0f07 	cmp.w	lr, #7
   818da:	9211      	str	r2, [sp, #68]	; 0x44
   818dc:	e889 0060 	stmia.w	r9, {r5, r6}
   818e0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   818e4:	f300 8366 	bgt.w	81fb4 <_vfiprintf_r+0xac8>
   818e8:	f109 0908 	add.w	r9, r9, #8
   818ec:	f10e 0001 	add.w	r0, lr, #1
   818f0:	4671      	mov	r1, lr
   818f2:	e1a8      	b.n	81c46 <_vfiprintf_r+0x75a>
   818f4:	9508      	str	r5, [sp, #32]
   818f6:	f013 0220 	ands.w	r2, r3, #32
   818fa:	f040 8389 	bne.w	82010 <_vfiprintf_r+0xb24>
   818fe:	f013 0110 	ands.w	r1, r3, #16
   81902:	f040 8319 	bne.w	81f38 <_vfiprintf_r+0xa4c>
   81906:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   8190a:	f000 8315 	beq.w	81f38 <_vfiprintf_r+0xa4c>
   8190e:	9807      	ldr	r0, [sp, #28]
   81910:	460a      	mov	r2, r1
   81912:	4601      	mov	r1, r0
   81914:	3104      	adds	r1, #4
   81916:	8806      	ldrh	r6, [r0, #0]
   81918:	2700      	movs	r7, #0
   8191a:	9107      	str	r1, [sp, #28]
   8191c:	e71f      	b.n	8175e <_vfiprintf_r+0x272>
   8191e:	9508      	str	r5, [sp, #32]
   81920:	f043 0310 	orr.w	r3, r3, #16
   81924:	e7e7      	b.n	818f6 <_vfiprintf_r+0x40a>
   81926:	9508      	str	r5, [sp, #32]
   81928:	f043 0310 	orr.w	r3, r3, #16
   8192c:	e707      	b.n	8173e <_vfiprintf_r+0x252>
   8192e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81932:	f898 2000 	ldrb.w	r2, [r8]
   81936:	e64b      	b.n	815d0 <_vfiprintf_r+0xe4>
   81938:	2500      	movs	r5, #0
   8193a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8193e:	f818 2b01 	ldrb.w	r2, [r8], #1
   81942:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81946:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8194a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8194e:	2909      	cmp	r1, #9
   81950:	d9f5      	bls.n	8193e <_vfiprintf_r+0x452>
   81952:	e63f      	b.n	815d4 <_vfiprintf_r+0xe8>
   81954:	9508      	str	r5, [sp, #32]
   81956:	2800      	cmp	r0, #0
   81958:	f040 8402 	bne.w	82160 <_vfiprintf_r+0xc74>
   8195c:	f043 0310 	orr.w	r3, r3, #16
   81960:	069e      	lsls	r6, r3, #26
   81962:	f100 833d 	bmi.w	81fe0 <_vfiprintf_r+0xaf4>
   81966:	9907      	ldr	r1, [sp, #28]
   81968:	06dd      	lsls	r5, r3, #27
   8196a:	460a      	mov	r2, r1
   8196c:	f100 82f0 	bmi.w	81f50 <_vfiprintf_r+0xa64>
   81970:	0658      	lsls	r0, r3, #25
   81972:	f140 82ed 	bpl.w	81f50 <_vfiprintf_r+0xa64>
   81976:	f9b1 6000 	ldrsh.w	r6, [r1]
   8197a:	3204      	adds	r2, #4
   8197c:	17f7      	asrs	r7, r6, #31
   8197e:	4630      	mov	r0, r6
   81980:	4639      	mov	r1, r7
   81982:	9207      	str	r2, [sp, #28]
   81984:	2800      	cmp	r0, #0
   81986:	f171 0200 	sbcs.w	r2, r1, #0
   8198a:	f2c0 835a 	blt.w	82042 <_vfiprintf_r+0xb56>
   8198e:	1c61      	adds	r1, r4, #1
   81990:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81994:	f04f 0201 	mov.w	r2, #1
   81998:	f47f aee9 	bne.w	8176e <_vfiprintf_r+0x282>
   8199c:	ea56 0107 	orrs.w	r1, r6, r7
   819a0:	f000 824b 	beq.w	81e3a <_vfiprintf_r+0x94e>
   819a4:	9302      	str	r3, [sp, #8]
   819a6:	2a01      	cmp	r2, #1
   819a8:	f000 828a 	beq.w	81ec0 <_vfiprintf_r+0x9d4>
   819ac:	2a02      	cmp	r2, #2
   819ae:	f040 825a 	bne.w	81e66 <_vfiprintf_r+0x97a>
   819b2:	46d3      	mov	fp, sl
   819b4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   819b6:	0933      	lsrs	r3, r6, #4
   819b8:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   819bc:	0939      	lsrs	r1, r7, #4
   819be:	f006 020f 	and.w	r2, r6, #15
   819c2:	460f      	mov	r7, r1
   819c4:	461e      	mov	r6, r3
   819c6:	5c83      	ldrb	r3, [r0, r2]
   819c8:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   819cc:	ea56 0307 	orrs.w	r3, r6, r7
   819d0:	d1f1      	bne.n	819b6 <_vfiprintf_r+0x4ca>
   819d2:	ebaa 030b 	sub.w	r3, sl, fp
   819d6:	9305      	str	r3, [sp, #20]
   819d8:	e6e0      	b.n	8179c <_vfiprintf_r+0x2b0>
   819da:	2800      	cmp	r0, #0
   819dc:	f040 83bd 	bne.w	8215a <_vfiprintf_r+0xc6e>
   819e0:	0699      	lsls	r1, r3, #26
   819e2:	f100 8359 	bmi.w	82098 <_vfiprintf_r+0xbac>
   819e6:	06da      	lsls	r2, r3, #27
   819e8:	f100 80e5 	bmi.w	81bb6 <_vfiprintf_r+0x6ca>
   819ec:	065b      	lsls	r3, r3, #25
   819ee:	f140 80e2 	bpl.w	81bb6 <_vfiprintf_r+0x6ca>
   819f2:	9a07      	ldr	r2, [sp, #28]
   819f4:	6813      	ldr	r3, [r2, #0]
   819f6:	3204      	adds	r2, #4
   819f8:	9207      	str	r2, [sp, #28]
   819fa:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   819fe:	801a      	strh	r2, [r3, #0]
   81a00:	e5b1      	b.n	81566 <_vfiprintf_r+0x7a>
   81a02:	2278      	movs	r2, #120	; 0x78
   81a04:	2130      	movs	r1, #48	; 0x30
   81a06:	9508      	str	r5, [sp, #32]
   81a08:	9d07      	ldr	r5, [sp, #28]
   81a0a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a0e:	1d2a      	adds	r2, r5, #4
   81a10:	9207      	str	r2, [sp, #28]
   81a12:	4a3c      	ldr	r2, [pc, #240]	; (81b04 <_vfiprintf_r+0x618>)
   81a14:	682e      	ldr	r6, [r5, #0]
   81a16:	920b      	str	r2, [sp, #44]	; 0x2c
   81a18:	f043 0302 	orr.w	r3, r3, #2
   81a1c:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a20:	2700      	movs	r7, #0
   81a22:	2202      	movs	r2, #2
   81a24:	e69b      	b.n	8175e <_vfiprintf_r+0x272>
   81a26:	9508      	str	r5, [sp, #32]
   81a28:	2800      	cmp	r0, #0
   81a2a:	d099      	beq.n	81960 <_vfiprintf_r+0x474>
   81a2c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81a30:	e796      	b.n	81960 <_vfiprintf_r+0x474>
   81a32:	f898 2000 	ldrb.w	r2, [r8]
   81a36:	2e00      	cmp	r6, #0
   81a38:	f47f adca 	bne.w	815d0 <_vfiprintf_r+0xe4>
   81a3c:	2001      	movs	r0, #1
   81a3e:	2620      	movs	r6, #32
   81a40:	e5c6      	b.n	815d0 <_vfiprintf_r+0xe4>
   81a42:	f043 0301 	orr.w	r3, r3, #1
   81a46:	f898 2000 	ldrb.w	r2, [r8]
   81a4a:	e5c1      	b.n	815d0 <_vfiprintf_r+0xe4>
   81a4c:	9508      	str	r5, [sp, #32]
   81a4e:	2800      	cmp	r0, #0
   81a50:	f040 8380 	bne.w	82154 <_vfiprintf_r+0xc68>
   81a54:	492b      	ldr	r1, [pc, #172]	; (81b04 <_vfiprintf_r+0x618>)
   81a56:	910b      	str	r1, [sp, #44]	; 0x2c
   81a58:	069f      	lsls	r7, r3, #26
   81a5a:	f100 82e5 	bmi.w	82028 <_vfiprintf_r+0xb3c>
   81a5e:	9807      	ldr	r0, [sp, #28]
   81a60:	06de      	lsls	r6, r3, #27
   81a62:	4601      	mov	r1, r0
   81a64:	f100 826f 	bmi.w	81f46 <_vfiprintf_r+0xa5a>
   81a68:	065d      	lsls	r5, r3, #25
   81a6a:	f140 826c 	bpl.w	81f46 <_vfiprintf_r+0xa5a>
   81a6e:	2700      	movs	r7, #0
   81a70:	3104      	adds	r1, #4
   81a72:	8806      	ldrh	r6, [r0, #0]
   81a74:	9107      	str	r1, [sp, #28]
   81a76:	07d8      	lsls	r0, r3, #31
   81a78:	f140 8220 	bpl.w	81ebc <_vfiprintf_r+0x9d0>
   81a7c:	ea56 0107 	orrs.w	r1, r6, r7
   81a80:	f000 821c 	beq.w	81ebc <_vfiprintf_r+0x9d0>
   81a84:	2130      	movs	r1, #48	; 0x30
   81a86:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81a8a:	f043 0302 	orr.w	r3, r3, #2
   81a8e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81a92:	2202      	movs	r2, #2
   81a94:	e663      	b.n	8175e <_vfiprintf_r+0x272>
   81a96:	9508      	str	r5, [sp, #32]
   81a98:	2800      	cmp	r0, #0
   81a9a:	f040 8355 	bne.w	82148 <_vfiprintf_r+0xc5c>
   81a9e:	491a      	ldr	r1, [pc, #104]	; (81b08 <_vfiprintf_r+0x61c>)
   81aa0:	910b      	str	r1, [sp, #44]	; 0x2c
   81aa2:	e7d9      	b.n	81a58 <_vfiprintf_r+0x56c>
   81aa4:	2201      	movs	r2, #1
   81aa6:	9807      	ldr	r0, [sp, #28]
   81aa8:	4611      	mov	r1, r2
   81aaa:	9201      	str	r2, [sp, #4]
   81aac:	6802      	ldr	r2, [r0, #0]
   81aae:	f04f 0400 	mov.w	r4, #0
   81ab2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81ab6:	4602      	mov	r2, r0
   81ab8:	3204      	adds	r2, #4
   81aba:	9508      	str	r5, [sp, #32]
   81abc:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81ac0:	9105      	str	r1, [sp, #20]
   81ac2:	9207      	str	r2, [sp, #28]
   81ac4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81ac8:	9302      	str	r3, [sp, #8]
   81aca:	2400      	movs	r4, #0
   81acc:	e66e      	b.n	817ac <_vfiprintf_r+0x2c0>
   81ace:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81ad2:	f898 2000 	ldrb.w	r2, [r8]
   81ad6:	e57b      	b.n	815d0 <_vfiprintf_r+0xe4>
   81ad8:	f898 2000 	ldrb.w	r2, [r8]
   81adc:	2a6c      	cmp	r2, #108	; 0x6c
   81ade:	bf03      	ittte	eq
   81ae0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81ae4:	f043 0320 	orreq.w	r3, r3, #32
   81ae8:	f108 0801 	addeq.w	r8, r8, #1
   81aec:	f043 0310 	orrne.w	r3, r3, #16
   81af0:	e56e      	b.n	815d0 <_vfiprintf_r+0xe4>
   81af2:	f898 2000 	ldrb.w	r2, [r8]
   81af6:	2001      	movs	r0, #1
   81af8:	262b      	movs	r6, #43	; 0x2b
   81afa:	e569      	b.n	815d0 <_vfiprintf_r+0xe4>
   81afc:	00083f44 	.word	0x00083f44
   81b00:	00083f54 	.word	0x00083f54
   81b04:	00083f28 	.word	0x00083f28
   81b08:	00083f14 	.word	0x00083f14
   81b0c:	f04f 0200 	mov.w	r2, #0
   81b10:	9907      	ldr	r1, [sp, #28]
   81b12:	9508      	str	r5, [sp, #32]
   81b14:	f8d1 b000 	ldr.w	fp, [r1]
   81b18:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81b1c:	1d0d      	adds	r5, r1, #4
   81b1e:	f1bb 0f00 	cmp.w	fp, #0
   81b22:	f000 82e4 	beq.w	820ee <_vfiprintf_r+0xc02>
   81b26:	1c67      	adds	r7, r4, #1
   81b28:	f000 82c3 	beq.w	820b2 <_vfiprintf_r+0xbc6>
   81b2c:	4622      	mov	r2, r4
   81b2e:	2100      	movs	r1, #0
   81b30:	4658      	mov	r0, fp
   81b32:	9301      	str	r3, [sp, #4]
   81b34:	f001 fbc6 	bl	832c4 <memchr>
   81b38:	9b01      	ldr	r3, [sp, #4]
   81b3a:	2800      	cmp	r0, #0
   81b3c:	f000 82e8 	beq.w	82110 <_vfiprintf_r+0xc24>
   81b40:	eba0 020b 	sub.w	r2, r0, fp
   81b44:	9507      	str	r5, [sp, #28]
   81b46:	9205      	str	r2, [sp, #20]
   81b48:	9302      	str	r3, [sp, #8]
   81b4a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b4e:	2400      	movs	r4, #0
   81b50:	e624      	b.n	8179c <_vfiprintf_r+0x2b0>
   81b52:	f898 2000 	ldrb.w	r2, [r8]
   81b56:	f108 0701 	add.w	r7, r8, #1
   81b5a:	2a2a      	cmp	r2, #42	; 0x2a
   81b5c:	f000 82e9 	beq.w	82132 <_vfiprintf_r+0xc46>
   81b60:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b64:	2909      	cmp	r1, #9
   81b66:	46b8      	mov	r8, r7
   81b68:	f04f 0400 	mov.w	r4, #0
   81b6c:	f63f ad32 	bhi.w	815d4 <_vfiprintf_r+0xe8>
   81b70:	f818 2b01 	ldrb.w	r2, [r8], #1
   81b74:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81b78:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81b7c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81b80:	2909      	cmp	r1, #9
   81b82:	d9f5      	bls.n	81b70 <_vfiprintf_r+0x684>
   81b84:	e526      	b.n	815d4 <_vfiprintf_r+0xe8>
   81b86:	f043 0320 	orr.w	r3, r3, #32
   81b8a:	f898 2000 	ldrb.w	r2, [r8]
   81b8e:	e51f      	b.n	815d0 <_vfiprintf_r+0xe4>
   81b90:	9508      	str	r5, [sp, #32]
   81b92:	2800      	cmp	r0, #0
   81b94:	f040 82db 	bne.w	8214e <_vfiprintf_r+0xc62>
   81b98:	2a00      	cmp	r2, #0
   81b9a:	f000 80f1 	beq.w	81d80 <_vfiprintf_r+0x894>
   81b9e:	2101      	movs	r1, #1
   81ba0:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81ba4:	f04f 0200 	mov.w	r2, #0
   81ba8:	9101      	str	r1, [sp, #4]
   81baa:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81bae:	9105      	str	r1, [sp, #20]
   81bb0:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81bb4:	e788      	b.n	81ac8 <_vfiprintf_r+0x5dc>
   81bb6:	9a07      	ldr	r2, [sp, #28]
   81bb8:	6813      	ldr	r3, [r2, #0]
   81bba:	3204      	adds	r2, #4
   81bbc:	9207      	str	r2, [sp, #28]
   81bbe:	9a03      	ldr	r2, [sp, #12]
   81bc0:	601a      	str	r2, [r3, #0]
   81bc2:	e4d0      	b.n	81566 <_vfiprintf_r+0x7a>
   81bc4:	aa0f      	add	r2, sp, #60	; 0x3c
   81bc6:	9904      	ldr	r1, [sp, #16]
   81bc8:	4620      	mov	r0, r4
   81bca:	f7ff fc4f 	bl	8146c <__sprint_r.part.0>
   81bce:	2800      	cmp	r0, #0
   81bd0:	f040 8143 	bne.w	81e5a <_vfiprintf_r+0x96e>
   81bd4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bd6:	46d6      	mov	lr, sl
   81bd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81bda:	f101 0c01 	add.w	ip, r1, #1
   81bde:	e60a      	b.n	817f6 <_vfiprintf_r+0x30a>
   81be0:	aa0f      	add	r2, sp, #60	; 0x3c
   81be2:	9904      	ldr	r1, [sp, #16]
   81be4:	9806      	ldr	r0, [sp, #24]
   81be6:	f7ff fc41 	bl	8146c <__sprint_r.part.0>
   81bea:	2800      	cmp	r0, #0
   81bec:	f040 8135 	bne.w	81e5a <_vfiprintf_r+0x96e>
   81bf0:	46d1      	mov	r9, sl
   81bf2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bf4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81bf8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81bfa:	1c48      	adds	r0, r1, #1
   81bfc:	2d00      	cmp	r5, #0
   81bfe:	f43f ae24 	beq.w	8184a <_vfiprintf_r+0x35e>
   81c02:	2101      	movs	r1, #1
   81c04:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81c08:	440a      	add	r2, r1
   81c0a:	2807      	cmp	r0, #7
   81c0c:	9211      	str	r2, [sp, #68]	; 0x44
   81c0e:	9010      	str	r0, [sp, #64]	; 0x40
   81c10:	f8c9 1004 	str.w	r1, [r9, #4]
   81c14:	f8c9 5000 	str.w	r5, [r9]
   81c18:	f340 8109 	ble.w	81e2e <_vfiprintf_r+0x942>
   81c1c:	2a00      	cmp	r2, #0
   81c1e:	f040 81af 	bne.w	81f80 <_vfiprintf_r+0xa94>
   81c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81c24:	2b00      	cmp	r3, #0
   81c26:	f43f ae23 	beq.w	81870 <_vfiprintf_r+0x384>
   81c2a:	2202      	movs	r2, #2
   81c2c:	4608      	mov	r0, r1
   81c2e:	46d1      	mov	r9, sl
   81c30:	ab0e      	add	r3, sp, #56	; 0x38
   81c32:	921d      	str	r2, [sp, #116]	; 0x74
   81c34:	931c      	str	r3, [sp, #112]	; 0x70
   81c36:	4601      	mov	r1, r0
   81c38:	f109 0908 	add.w	r9, r9, #8
   81c3c:	3001      	adds	r0, #1
   81c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81c40:	2b80      	cmp	r3, #128	; 0x80
   81c42:	f43f ae1c 	beq.w	8187e <_vfiprintf_r+0x392>
   81c46:	9b05      	ldr	r3, [sp, #20]
   81c48:	1ae4      	subs	r4, r4, r3
   81c4a:	2c00      	cmp	r4, #0
   81c4c:	dd2f      	ble.n	81cae <_vfiprintf_r+0x7c2>
   81c4e:	2c10      	cmp	r4, #16
   81c50:	f340 8220 	ble.w	82094 <_vfiprintf_r+0xba8>
   81c54:	46ce      	mov	lr, r9
   81c56:	2610      	movs	r6, #16
   81c58:	4db2      	ldr	r5, [pc, #712]	; (81f24 <_vfiprintf_r+0xa38>)
   81c5a:	9f06      	ldr	r7, [sp, #24]
   81c5c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81c60:	e006      	b.n	81c70 <_vfiprintf_r+0x784>
   81c62:	1c88      	adds	r0, r1, #2
   81c64:	4619      	mov	r1, r3
   81c66:	f10e 0e08 	add.w	lr, lr, #8
   81c6a:	3c10      	subs	r4, #16
   81c6c:	2c10      	cmp	r4, #16
   81c6e:	dd10      	ble.n	81c92 <_vfiprintf_r+0x7a6>
   81c70:	1c4b      	adds	r3, r1, #1
   81c72:	3210      	adds	r2, #16
   81c74:	2b07      	cmp	r3, #7
   81c76:	9211      	str	r2, [sp, #68]	; 0x44
   81c78:	e88e 0060 	stmia.w	lr, {r5, r6}
   81c7c:	9310      	str	r3, [sp, #64]	; 0x40
   81c7e:	ddf0      	ble.n	81c62 <_vfiprintf_r+0x776>
   81c80:	2a00      	cmp	r2, #0
   81c82:	d165      	bne.n	81d50 <_vfiprintf_r+0x864>
   81c84:	3c10      	subs	r4, #16
   81c86:	2c10      	cmp	r4, #16
   81c88:	f04f 0001 	mov.w	r0, #1
   81c8c:	4611      	mov	r1, r2
   81c8e:	46d6      	mov	lr, sl
   81c90:	dcee      	bgt.n	81c70 <_vfiprintf_r+0x784>
   81c92:	46f1      	mov	r9, lr
   81c94:	4422      	add	r2, r4
   81c96:	2807      	cmp	r0, #7
   81c98:	9211      	str	r2, [sp, #68]	; 0x44
   81c9a:	f8c9 5000 	str.w	r5, [r9]
   81c9e:	f8c9 4004 	str.w	r4, [r9, #4]
   81ca2:	9010      	str	r0, [sp, #64]	; 0x40
   81ca4:	f300 8085 	bgt.w	81db2 <_vfiprintf_r+0x8c6>
   81ca8:	f109 0908 	add.w	r9, r9, #8
   81cac:	3001      	adds	r0, #1
   81cae:	9905      	ldr	r1, [sp, #20]
   81cb0:	2807      	cmp	r0, #7
   81cb2:	440a      	add	r2, r1
   81cb4:	9211      	str	r2, [sp, #68]	; 0x44
   81cb6:	f8c9 b000 	str.w	fp, [r9]
   81cba:	f8c9 1004 	str.w	r1, [r9, #4]
   81cbe:	9010      	str	r0, [sp, #64]	; 0x40
   81cc0:	f340 8082 	ble.w	81dc8 <_vfiprintf_r+0x8dc>
   81cc4:	2a00      	cmp	r2, #0
   81cc6:	f040 8118 	bne.w	81efa <_vfiprintf_r+0xa0e>
   81cca:	9b02      	ldr	r3, [sp, #8]
   81ccc:	9210      	str	r2, [sp, #64]	; 0x40
   81cce:	0758      	lsls	r0, r3, #29
   81cd0:	d535      	bpl.n	81d3e <_vfiprintf_r+0x852>
   81cd2:	9b08      	ldr	r3, [sp, #32]
   81cd4:	9901      	ldr	r1, [sp, #4]
   81cd6:	1a5c      	subs	r4, r3, r1
   81cd8:	2c00      	cmp	r4, #0
   81cda:	f340 80e7 	ble.w	81eac <_vfiprintf_r+0x9c0>
   81cde:	46d1      	mov	r9, sl
   81ce0:	2c10      	cmp	r4, #16
   81ce2:	f340 820d 	ble.w	82100 <_vfiprintf_r+0xc14>
   81ce6:	2510      	movs	r5, #16
   81ce8:	9910      	ldr	r1, [sp, #64]	; 0x40
   81cea:	4e8f      	ldr	r6, [pc, #572]	; (81f28 <_vfiprintf_r+0xa3c>)
   81cec:	9f06      	ldr	r7, [sp, #24]
   81cee:	f8dd b010 	ldr.w	fp, [sp, #16]
   81cf2:	e006      	b.n	81d02 <_vfiprintf_r+0x816>
   81cf4:	1c88      	adds	r0, r1, #2
   81cf6:	4619      	mov	r1, r3
   81cf8:	f109 0908 	add.w	r9, r9, #8
   81cfc:	3c10      	subs	r4, #16
   81cfe:	2c10      	cmp	r4, #16
   81d00:	dd11      	ble.n	81d26 <_vfiprintf_r+0x83a>
   81d02:	1c4b      	adds	r3, r1, #1
   81d04:	3210      	adds	r2, #16
   81d06:	2b07      	cmp	r3, #7
   81d08:	9211      	str	r2, [sp, #68]	; 0x44
   81d0a:	f8c9 6000 	str.w	r6, [r9]
   81d0e:	f8c9 5004 	str.w	r5, [r9, #4]
   81d12:	9310      	str	r3, [sp, #64]	; 0x40
   81d14:	ddee      	ble.n	81cf4 <_vfiprintf_r+0x808>
   81d16:	bb42      	cbnz	r2, 81d6a <_vfiprintf_r+0x87e>
   81d18:	3c10      	subs	r4, #16
   81d1a:	2c10      	cmp	r4, #16
   81d1c:	f04f 0001 	mov.w	r0, #1
   81d20:	4611      	mov	r1, r2
   81d22:	46d1      	mov	r9, sl
   81d24:	dced      	bgt.n	81d02 <_vfiprintf_r+0x816>
   81d26:	4422      	add	r2, r4
   81d28:	2807      	cmp	r0, #7
   81d2a:	9211      	str	r2, [sp, #68]	; 0x44
   81d2c:	f8c9 6000 	str.w	r6, [r9]
   81d30:	f8c9 4004 	str.w	r4, [r9, #4]
   81d34:	9010      	str	r0, [sp, #64]	; 0x40
   81d36:	dd51      	ble.n	81ddc <_vfiprintf_r+0x8f0>
   81d38:	2a00      	cmp	r2, #0
   81d3a:	f040 819a 	bne.w	82072 <_vfiprintf_r+0xb86>
   81d3e:	9b03      	ldr	r3, [sp, #12]
   81d40:	9a08      	ldr	r2, [sp, #32]
   81d42:	9901      	ldr	r1, [sp, #4]
   81d44:	428a      	cmp	r2, r1
   81d46:	bfac      	ite	ge
   81d48:	189b      	addge	r3, r3, r2
   81d4a:	185b      	addlt	r3, r3, r1
   81d4c:	9303      	str	r3, [sp, #12]
   81d4e:	e04e      	b.n	81dee <_vfiprintf_r+0x902>
   81d50:	aa0f      	add	r2, sp, #60	; 0x3c
   81d52:	4649      	mov	r1, r9
   81d54:	4638      	mov	r0, r7
   81d56:	f7ff fb89 	bl	8146c <__sprint_r.part.0>
   81d5a:	2800      	cmp	r0, #0
   81d5c:	f040 813e 	bne.w	81fdc <_vfiprintf_r+0xaf0>
   81d60:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d62:	46d6      	mov	lr, sl
   81d64:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d66:	1c48      	adds	r0, r1, #1
   81d68:	e77f      	b.n	81c6a <_vfiprintf_r+0x77e>
   81d6a:	aa0f      	add	r2, sp, #60	; 0x3c
   81d6c:	4659      	mov	r1, fp
   81d6e:	4638      	mov	r0, r7
   81d70:	f7ff fb7c 	bl	8146c <__sprint_r.part.0>
   81d74:	b960      	cbnz	r0, 81d90 <_vfiprintf_r+0x8a4>
   81d76:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d78:	46d1      	mov	r9, sl
   81d7a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d7c:	1c48      	adds	r0, r1, #1
   81d7e:	e7bd      	b.n	81cfc <_vfiprintf_r+0x810>
   81d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81d82:	f8dd b010 	ldr.w	fp, [sp, #16]
   81d86:	2b00      	cmp	r3, #0
   81d88:	f040 81ca 	bne.w	82120 <_vfiprintf_r+0xc34>
   81d8c:	2300      	movs	r3, #0
   81d8e:	9310      	str	r3, [sp, #64]	; 0x40
   81d90:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81d94:	f013 0f01 	tst.w	r3, #1
   81d98:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81d9c:	d102      	bne.n	81da4 <_vfiprintf_r+0x8b8>
   81d9e:	059a      	lsls	r2, r3, #22
   81da0:	f140 80dd 	bpl.w	81f5e <_vfiprintf_r+0xa72>
   81da4:	065b      	lsls	r3, r3, #25
   81da6:	f53f acad 	bmi.w	81704 <_vfiprintf_r+0x218>
   81daa:	9803      	ldr	r0, [sp, #12]
   81dac:	b02d      	add	sp, #180	; 0xb4
   81dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81db2:	2a00      	cmp	r2, #0
   81db4:	f040 8105 	bne.w	81fc2 <_vfiprintf_r+0xad6>
   81db8:	2301      	movs	r3, #1
   81dba:	46d1      	mov	r9, sl
   81dbc:	9a05      	ldr	r2, [sp, #20]
   81dbe:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81dc2:	921d      	str	r2, [sp, #116]	; 0x74
   81dc4:	9211      	str	r2, [sp, #68]	; 0x44
   81dc6:	9310      	str	r3, [sp, #64]	; 0x40
   81dc8:	f109 0908 	add.w	r9, r9, #8
   81dcc:	9b02      	ldr	r3, [sp, #8]
   81dce:	0759      	lsls	r1, r3, #29
   81dd0:	d504      	bpl.n	81ddc <_vfiprintf_r+0x8f0>
   81dd2:	9b08      	ldr	r3, [sp, #32]
   81dd4:	9901      	ldr	r1, [sp, #4]
   81dd6:	1a5c      	subs	r4, r3, r1
   81dd8:	2c00      	cmp	r4, #0
   81dda:	dc81      	bgt.n	81ce0 <_vfiprintf_r+0x7f4>
   81ddc:	9b03      	ldr	r3, [sp, #12]
   81dde:	9908      	ldr	r1, [sp, #32]
   81de0:	9801      	ldr	r0, [sp, #4]
   81de2:	4281      	cmp	r1, r0
   81de4:	bfac      	ite	ge
   81de6:	185b      	addge	r3, r3, r1
   81de8:	181b      	addlt	r3, r3, r0
   81dea:	9303      	str	r3, [sp, #12]
   81dec:	bb72      	cbnz	r2, 81e4c <_vfiprintf_r+0x960>
   81dee:	2300      	movs	r3, #0
   81df0:	46d1      	mov	r9, sl
   81df2:	9310      	str	r3, [sp, #64]	; 0x40
   81df4:	f7ff bbb7 	b.w	81566 <_vfiprintf_r+0x7a>
   81df8:	aa0f      	add	r2, sp, #60	; 0x3c
   81dfa:	9904      	ldr	r1, [sp, #16]
   81dfc:	4620      	mov	r0, r4
   81dfe:	f7ff fb35 	bl	8146c <__sprint_r.part.0>
   81e02:	bb50      	cbnz	r0, 81e5a <_vfiprintf_r+0x96e>
   81e04:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e06:	46d4      	mov	ip, sl
   81e08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e0a:	f101 0e01 	add.w	lr, r1, #1
   81e0e:	e54a      	b.n	818a6 <_vfiprintf_r+0x3ba>
   81e10:	2a00      	cmp	r2, #0
   81e12:	f47f aee5 	bne.w	81be0 <_vfiprintf_r+0x6f4>
   81e16:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81e1a:	2900      	cmp	r1, #0
   81e1c:	f000 811a 	beq.w	82054 <_vfiprintf_r+0xb68>
   81e20:	2201      	movs	r2, #1
   81e22:	46d1      	mov	r9, sl
   81e24:	4610      	mov	r0, r2
   81e26:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81e2a:	921d      	str	r2, [sp, #116]	; 0x74
   81e2c:	911c      	str	r1, [sp, #112]	; 0x70
   81e2e:	4601      	mov	r1, r0
   81e30:	f109 0908 	add.w	r9, r9, #8
   81e34:	3001      	adds	r0, #1
   81e36:	e508      	b.n	8184a <_vfiprintf_r+0x35e>
   81e38:	9b02      	ldr	r3, [sp, #8]
   81e3a:	2a01      	cmp	r2, #1
   81e3c:	f000 8097 	beq.w	81f6e <_vfiprintf_r+0xa82>
   81e40:	2a02      	cmp	r2, #2
   81e42:	d10d      	bne.n	81e60 <_vfiprintf_r+0x974>
   81e44:	9302      	str	r3, [sp, #8]
   81e46:	2600      	movs	r6, #0
   81e48:	2700      	movs	r7, #0
   81e4a:	e5b2      	b.n	819b2 <_vfiprintf_r+0x4c6>
   81e4c:	aa0f      	add	r2, sp, #60	; 0x3c
   81e4e:	9904      	ldr	r1, [sp, #16]
   81e50:	9806      	ldr	r0, [sp, #24]
   81e52:	f7ff fb0b 	bl	8146c <__sprint_r.part.0>
   81e56:	2800      	cmp	r0, #0
   81e58:	d0c9      	beq.n	81dee <_vfiprintf_r+0x902>
   81e5a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81e5e:	e797      	b.n	81d90 <_vfiprintf_r+0x8a4>
   81e60:	2600      	movs	r6, #0
   81e62:	2700      	movs	r7, #0
   81e64:	9302      	str	r3, [sp, #8]
   81e66:	4651      	mov	r1, sl
   81e68:	e000      	b.n	81e6c <_vfiprintf_r+0x980>
   81e6a:	4659      	mov	r1, fp
   81e6c:	08f2      	lsrs	r2, r6, #3
   81e6e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81e72:	08f8      	lsrs	r0, r7, #3
   81e74:	f006 0307 	and.w	r3, r6, #7
   81e78:	4607      	mov	r7, r0
   81e7a:	4616      	mov	r6, r2
   81e7c:	3330      	adds	r3, #48	; 0x30
   81e7e:	ea56 0207 	orrs.w	r2, r6, r7
   81e82:	f801 3c01 	strb.w	r3, [r1, #-1]
   81e86:	f101 3bff 	add.w	fp, r1, #4294967295
   81e8a:	d1ee      	bne.n	81e6a <_vfiprintf_r+0x97e>
   81e8c:	9a02      	ldr	r2, [sp, #8]
   81e8e:	07d6      	lsls	r6, r2, #31
   81e90:	f57f ad9f 	bpl.w	819d2 <_vfiprintf_r+0x4e6>
   81e94:	2b30      	cmp	r3, #48	; 0x30
   81e96:	f43f ad9c 	beq.w	819d2 <_vfiprintf_r+0x4e6>
   81e9a:	2330      	movs	r3, #48	; 0x30
   81e9c:	3902      	subs	r1, #2
   81e9e:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81ea2:	ebaa 0301 	sub.w	r3, sl, r1
   81ea6:	9305      	str	r3, [sp, #20]
   81ea8:	468b      	mov	fp, r1
   81eaa:	e477      	b.n	8179c <_vfiprintf_r+0x2b0>
   81eac:	9b03      	ldr	r3, [sp, #12]
   81eae:	9a08      	ldr	r2, [sp, #32]
   81eb0:	428a      	cmp	r2, r1
   81eb2:	bfac      	ite	ge
   81eb4:	189b      	addge	r3, r3, r2
   81eb6:	185b      	addlt	r3, r3, r1
   81eb8:	9303      	str	r3, [sp, #12]
   81eba:	e798      	b.n	81dee <_vfiprintf_r+0x902>
   81ebc:	2202      	movs	r2, #2
   81ebe:	e44e      	b.n	8175e <_vfiprintf_r+0x272>
   81ec0:	2f00      	cmp	r7, #0
   81ec2:	bf08      	it	eq
   81ec4:	2e0a      	cmpeq	r6, #10
   81ec6:	d351      	bcc.n	81f6c <_vfiprintf_r+0xa80>
   81ec8:	46d3      	mov	fp, sl
   81eca:	4630      	mov	r0, r6
   81ecc:	4639      	mov	r1, r7
   81ece:	220a      	movs	r2, #10
   81ed0:	2300      	movs	r3, #0
   81ed2:	f001 fe85 	bl	83be0 <__aeabi_uldivmod>
   81ed6:	3230      	adds	r2, #48	; 0x30
   81ed8:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81edc:	4630      	mov	r0, r6
   81ede:	4639      	mov	r1, r7
   81ee0:	2300      	movs	r3, #0
   81ee2:	220a      	movs	r2, #10
   81ee4:	f001 fe7c 	bl	83be0 <__aeabi_uldivmod>
   81ee8:	4606      	mov	r6, r0
   81eea:	460f      	mov	r7, r1
   81eec:	ea56 0307 	orrs.w	r3, r6, r7
   81ef0:	d1eb      	bne.n	81eca <_vfiprintf_r+0x9de>
   81ef2:	e56e      	b.n	819d2 <_vfiprintf_r+0x4e6>
   81ef4:	9405      	str	r4, [sp, #20]
   81ef6:	46d3      	mov	fp, sl
   81ef8:	e450      	b.n	8179c <_vfiprintf_r+0x2b0>
   81efa:	aa0f      	add	r2, sp, #60	; 0x3c
   81efc:	9904      	ldr	r1, [sp, #16]
   81efe:	9806      	ldr	r0, [sp, #24]
   81f00:	f7ff fab4 	bl	8146c <__sprint_r.part.0>
   81f04:	2800      	cmp	r0, #0
   81f06:	d1a8      	bne.n	81e5a <_vfiprintf_r+0x96e>
   81f08:	46d1      	mov	r9, sl
   81f0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f0c:	e75e      	b.n	81dcc <_vfiprintf_r+0x8e0>
   81f0e:	aa0f      	add	r2, sp, #60	; 0x3c
   81f10:	9904      	ldr	r1, [sp, #16]
   81f12:	9806      	ldr	r0, [sp, #24]
   81f14:	f7ff faaa 	bl	8146c <__sprint_r.part.0>
   81f18:	2800      	cmp	r0, #0
   81f1a:	d19e      	bne.n	81e5a <_vfiprintf_r+0x96e>
   81f1c:	46d1      	mov	r9, sl
   81f1e:	f7ff bbbb 	b.w	81698 <_vfiprintf_r+0x1ac>
   81f22:	bf00      	nop
   81f24:	00083f54 	.word	0x00083f54
   81f28:	00083f44 	.word	0x00083f44
   81f2c:	3104      	adds	r1, #4
   81f2e:	6816      	ldr	r6, [r2, #0]
   81f30:	2700      	movs	r7, #0
   81f32:	2201      	movs	r2, #1
   81f34:	9107      	str	r1, [sp, #28]
   81f36:	e412      	b.n	8175e <_vfiprintf_r+0x272>
   81f38:	9807      	ldr	r0, [sp, #28]
   81f3a:	2700      	movs	r7, #0
   81f3c:	4601      	mov	r1, r0
   81f3e:	3104      	adds	r1, #4
   81f40:	6806      	ldr	r6, [r0, #0]
   81f42:	9107      	str	r1, [sp, #28]
   81f44:	e40b      	b.n	8175e <_vfiprintf_r+0x272>
   81f46:	680e      	ldr	r6, [r1, #0]
   81f48:	3104      	adds	r1, #4
   81f4a:	9107      	str	r1, [sp, #28]
   81f4c:	2700      	movs	r7, #0
   81f4e:	e592      	b.n	81a76 <_vfiprintf_r+0x58a>
   81f50:	6816      	ldr	r6, [r2, #0]
   81f52:	3204      	adds	r2, #4
   81f54:	17f7      	asrs	r7, r6, #31
   81f56:	9207      	str	r2, [sp, #28]
   81f58:	4630      	mov	r0, r6
   81f5a:	4639      	mov	r1, r7
   81f5c:	e512      	b.n	81984 <_vfiprintf_r+0x498>
   81f5e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81f62:	f000 fe75 	bl	82c50 <__retarget_lock_release_recursive>
   81f66:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81f6a:	e71b      	b.n	81da4 <_vfiprintf_r+0x8b8>
   81f6c:	9b02      	ldr	r3, [sp, #8]
   81f6e:	9302      	str	r3, [sp, #8]
   81f70:	2301      	movs	r3, #1
   81f72:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81f76:	3630      	adds	r6, #48	; 0x30
   81f78:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81f7c:	9305      	str	r3, [sp, #20]
   81f7e:	e40d      	b.n	8179c <_vfiprintf_r+0x2b0>
   81f80:	aa0f      	add	r2, sp, #60	; 0x3c
   81f82:	9904      	ldr	r1, [sp, #16]
   81f84:	9806      	ldr	r0, [sp, #24]
   81f86:	f7ff fa71 	bl	8146c <__sprint_r.part.0>
   81f8a:	2800      	cmp	r0, #0
   81f8c:	f47f af65 	bne.w	81e5a <_vfiprintf_r+0x96e>
   81f90:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f92:	46d1      	mov	r9, sl
   81f94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f96:	1c48      	adds	r0, r1, #1
   81f98:	e457      	b.n	8184a <_vfiprintf_r+0x35e>
   81f9a:	aa0f      	add	r2, sp, #60	; 0x3c
   81f9c:	9904      	ldr	r1, [sp, #16]
   81f9e:	9806      	ldr	r0, [sp, #24]
   81fa0:	f7ff fa64 	bl	8146c <__sprint_r.part.0>
   81fa4:	2800      	cmp	r0, #0
   81fa6:	f47f af58 	bne.w	81e5a <_vfiprintf_r+0x96e>
   81faa:	9910      	ldr	r1, [sp, #64]	; 0x40
   81fac:	46d1      	mov	r9, sl
   81fae:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fb0:	1c48      	adds	r0, r1, #1
   81fb2:	e644      	b.n	81c3e <_vfiprintf_r+0x752>
   81fb4:	2a00      	cmp	r2, #0
   81fb6:	f040 8087 	bne.w	820c8 <_vfiprintf_r+0xbdc>
   81fba:	2001      	movs	r0, #1
   81fbc:	4611      	mov	r1, r2
   81fbe:	46d1      	mov	r9, sl
   81fc0:	e641      	b.n	81c46 <_vfiprintf_r+0x75a>
   81fc2:	aa0f      	add	r2, sp, #60	; 0x3c
   81fc4:	9904      	ldr	r1, [sp, #16]
   81fc6:	9806      	ldr	r0, [sp, #24]
   81fc8:	f7ff fa50 	bl	8146c <__sprint_r.part.0>
   81fcc:	2800      	cmp	r0, #0
   81fce:	f47f af44 	bne.w	81e5a <_vfiprintf_r+0x96e>
   81fd2:	9810      	ldr	r0, [sp, #64]	; 0x40
   81fd4:	46d1      	mov	r9, sl
   81fd6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81fd8:	3001      	adds	r0, #1
   81fda:	e668      	b.n	81cae <_vfiprintf_r+0x7c2>
   81fdc:	46cb      	mov	fp, r9
   81fde:	e6d7      	b.n	81d90 <_vfiprintf_r+0x8a4>
   81fe0:	9d07      	ldr	r5, [sp, #28]
   81fe2:	3507      	adds	r5, #7
   81fe4:	f025 0507 	bic.w	r5, r5, #7
   81fe8:	f105 0208 	add.w	r2, r5, #8
   81fec:	e9d5 0100 	ldrd	r0, r1, [r5]
   81ff0:	9207      	str	r2, [sp, #28]
   81ff2:	4606      	mov	r6, r0
   81ff4:	460f      	mov	r7, r1
   81ff6:	e4c5      	b.n	81984 <_vfiprintf_r+0x498>
   81ff8:	9d07      	ldr	r5, [sp, #28]
   81ffa:	3507      	adds	r5, #7
   81ffc:	f025 0207 	bic.w	r2, r5, #7
   82000:	f102 0108 	add.w	r1, r2, #8
   82004:	e9d2 6700 	ldrd	r6, r7, [r2]
   82008:	9107      	str	r1, [sp, #28]
   8200a:	2201      	movs	r2, #1
   8200c:	f7ff bba7 	b.w	8175e <_vfiprintf_r+0x272>
   82010:	9d07      	ldr	r5, [sp, #28]
   82012:	3507      	adds	r5, #7
   82014:	f025 0207 	bic.w	r2, r5, #7
   82018:	f102 0108 	add.w	r1, r2, #8
   8201c:	e9d2 6700 	ldrd	r6, r7, [r2]
   82020:	9107      	str	r1, [sp, #28]
   82022:	2200      	movs	r2, #0
   82024:	f7ff bb9b 	b.w	8175e <_vfiprintf_r+0x272>
   82028:	9d07      	ldr	r5, [sp, #28]
   8202a:	3507      	adds	r5, #7
   8202c:	f025 0107 	bic.w	r1, r5, #7
   82030:	f101 0008 	add.w	r0, r1, #8
   82034:	9007      	str	r0, [sp, #28]
   82036:	e9d1 6700 	ldrd	r6, r7, [r1]
   8203a:	e51c      	b.n	81a76 <_vfiprintf_r+0x58a>
   8203c:	46d3      	mov	fp, sl
   8203e:	f7ff bbad 	b.w	8179c <_vfiprintf_r+0x2b0>
   82042:	252d      	movs	r5, #45	; 0x2d
   82044:	4276      	negs	r6, r6
   82046:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   8204a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   8204e:	2201      	movs	r2, #1
   82050:	f7ff bb8a 	b.w	81768 <_vfiprintf_r+0x27c>
   82054:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82056:	b9b3      	cbnz	r3, 82086 <_vfiprintf_r+0xb9a>
   82058:	4611      	mov	r1, r2
   8205a:	2001      	movs	r0, #1
   8205c:	46d1      	mov	r9, sl
   8205e:	e5f2      	b.n	81c46 <_vfiprintf_r+0x75a>
   82060:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82064:	f000 fdf4 	bl	82c50 <__retarget_lock_release_recursive>
   82068:	f04f 33ff 	mov.w	r3, #4294967295
   8206c:	9303      	str	r3, [sp, #12]
   8206e:	f7ff bb4c 	b.w	8170a <_vfiprintf_r+0x21e>
   82072:	aa0f      	add	r2, sp, #60	; 0x3c
   82074:	9904      	ldr	r1, [sp, #16]
   82076:	9806      	ldr	r0, [sp, #24]
   82078:	f7ff f9f8 	bl	8146c <__sprint_r.part.0>
   8207c:	2800      	cmp	r0, #0
   8207e:	f47f aeec 	bne.w	81e5a <_vfiprintf_r+0x96e>
   82082:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82084:	e6aa      	b.n	81ddc <_vfiprintf_r+0x8f0>
   82086:	2202      	movs	r2, #2
   82088:	ab0e      	add	r3, sp, #56	; 0x38
   8208a:	921d      	str	r2, [sp, #116]	; 0x74
   8208c:	931c      	str	r3, [sp, #112]	; 0x70
   8208e:	2001      	movs	r0, #1
   82090:	46d1      	mov	r9, sl
   82092:	e5d0      	b.n	81c36 <_vfiprintf_r+0x74a>
   82094:	4d34      	ldr	r5, [pc, #208]	; (82168 <_vfiprintf_r+0xc7c>)
   82096:	e5fd      	b.n	81c94 <_vfiprintf_r+0x7a8>
   82098:	9a07      	ldr	r2, [sp, #28]
   8209a:	4613      	mov	r3, r2
   8209c:	3304      	adds	r3, #4
   8209e:	9307      	str	r3, [sp, #28]
   820a0:	9b03      	ldr	r3, [sp, #12]
   820a2:	6811      	ldr	r1, [r2, #0]
   820a4:	17dd      	asrs	r5, r3, #31
   820a6:	461a      	mov	r2, r3
   820a8:	462b      	mov	r3, r5
   820aa:	e9c1 2300 	strd	r2, r3, [r1]
   820ae:	f7ff ba5a 	b.w	81566 <_vfiprintf_r+0x7a>
   820b2:	4658      	mov	r0, fp
   820b4:	9507      	str	r5, [sp, #28]
   820b6:	9302      	str	r3, [sp, #8]
   820b8:	f7ff f9aa 	bl	81410 <strlen>
   820bc:	2400      	movs	r4, #0
   820be:	9005      	str	r0, [sp, #20]
   820c0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   820c4:	f7ff bb6a 	b.w	8179c <_vfiprintf_r+0x2b0>
   820c8:	aa0f      	add	r2, sp, #60	; 0x3c
   820ca:	9904      	ldr	r1, [sp, #16]
   820cc:	9806      	ldr	r0, [sp, #24]
   820ce:	f7ff f9cd 	bl	8146c <__sprint_r.part.0>
   820d2:	2800      	cmp	r0, #0
   820d4:	f47f aec1 	bne.w	81e5a <_vfiprintf_r+0x96e>
   820d8:	9910      	ldr	r1, [sp, #64]	; 0x40
   820da:	46d1      	mov	r9, sl
   820dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820de:	1c48      	adds	r0, r1, #1
   820e0:	e5b1      	b.n	81c46 <_vfiprintf_r+0x75a>
   820e2:	9910      	ldr	r1, [sp, #64]	; 0x40
   820e4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820e6:	3101      	adds	r1, #1
   820e8:	4e20      	ldr	r6, [pc, #128]	; (8216c <_vfiprintf_r+0xc80>)
   820ea:	f7ff bb9c 	b.w	81826 <_vfiprintf_r+0x33a>
   820ee:	2c06      	cmp	r4, #6
   820f0:	bf28      	it	cs
   820f2:	2406      	movcs	r4, #6
   820f4:	9507      	str	r5, [sp, #28]
   820f6:	9405      	str	r4, [sp, #20]
   820f8:	9401      	str	r4, [sp, #4]
   820fa:	f8df b074 	ldr.w	fp, [pc, #116]	; 82170 <_vfiprintf_r+0xc84>
   820fe:	e4e3      	b.n	81ac8 <_vfiprintf_r+0x5dc>
   82100:	9810      	ldr	r0, [sp, #64]	; 0x40
   82102:	4e1a      	ldr	r6, [pc, #104]	; (8216c <_vfiprintf_r+0xc80>)
   82104:	3001      	adds	r0, #1
   82106:	e60e      	b.n	81d26 <_vfiprintf_r+0x83a>
   82108:	4686      	mov	lr, r0
   8210a:	4d17      	ldr	r5, [pc, #92]	; (82168 <_vfiprintf_r+0xc7c>)
   8210c:	f7ff bbe2 	b.w	818d4 <_vfiprintf_r+0x3e8>
   82110:	9405      	str	r4, [sp, #20]
   82112:	9507      	str	r5, [sp, #28]
   82114:	9302      	str	r3, [sp, #8]
   82116:	4604      	mov	r4, r0
   82118:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8211c:	f7ff bb3e 	b.w	8179c <_vfiprintf_r+0x2b0>
   82120:	9806      	ldr	r0, [sp, #24]
   82122:	aa0f      	add	r2, sp, #60	; 0x3c
   82124:	4659      	mov	r1, fp
   82126:	f7ff f9a1 	bl	8146c <__sprint_r.part.0>
   8212a:	2800      	cmp	r0, #0
   8212c:	f43f ae2e 	beq.w	81d8c <_vfiprintf_r+0x8a0>
   82130:	e62e      	b.n	81d90 <_vfiprintf_r+0x8a4>
   82132:	9907      	ldr	r1, [sp, #28]
   82134:	f898 2001 	ldrb.w	r2, [r8, #1]
   82138:	680c      	ldr	r4, [r1, #0]
   8213a:	3104      	adds	r1, #4
   8213c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82140:	46b8      	mov	r8, r7
   82142:	9107      	str	r1, [sp, #28]
   82144:	f7ff ba44 	b.w	815d0 <_vfiprintf_r+0xe4>
   82148:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8214c:	e4a7      	b.n	81a9e <_vfiprintf_r+0x5b2>
   8214e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82152:	e521      	b.n	81b98 <_vfiprintf_r+0x6ac>
   82154:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82158:	e47c      	b.n	81a54 <_vfiprintf_r+0x568>
   8215a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8215e:	e43f      	b.n	819e0 <_vfiprintf_r+0x4f4>
   82160:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82164:	f7ff bbfa 	b.w	8195c <_vfiprintf_r+0x470>
   82168:	00083f54 	.word	0x00083f54
   8216c:	00083f44 	.word	0x00083f44
   82170:	00083f3c 	.word	0x00083f3c

00082174 <__sbprintf>:
   82174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82178:	460c      	mov	r4, r1
   8217a:	f04f 0e00 	mov.w	lr, #0
   8217e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82182:	4606      	mov	r6, r0
   82184:	4617      	mov	r7, r2
   82186:	4698      	mov	r8, r3
   82188:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8218a:	89e3      	ldrh	r3, [r4, #14]
   8218c:	8989      	ldrh	r1, [r1, #12]
   8218e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82192:	f021 0102 	bic.w	r1, r1, #2
   82196:	9219      	str	r2, [sp, #100]	; 0x64
   82198:	f8ad 300e 	strh.w	r3, [sp, #14]
   8219c:	69e2      	ldr	r2, [r4, #28]
   8219e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   821a0:	f8ad 100c 	strh.w	r1, [sp, #12]
   821a4:	a816      	add	r0, sp, #88	; 0x58
   821a6:	a91a      	add	r1, sp, #104	; 0x68
   821a8:	f8cd e018 	str.w	lr, [sp, #24]
   821ac:	9207      	str	r2, [sp, #28]
   821ae:	9309      	str	r3, [sp, #36]	; 0x24
   821b0:	9100      	str	r1, [sp, #0]
   821b2:	9104      	str	r1, [sp, #16]
   821b4:	9502      	str	r5, [sp, #8]
   821b6:	9505      	str	r5, [sp, #20]
   821b8:	f000 fd44 	bl	82c44 <__retarget_lock_init_recursive>
   821bc:	4643      	mov	r3, r8
   821be:	463a      	mov	r2, r7
   821c0:	4669      	mov	r1, sp
   821c2:	4630      	mov	r0, r6
   821c4:	f7ff f992 	bl	814ec <_vfiprintf_r>
   821c8:	1e05      	subs	r5, r0, #0
   821ca:	db07      	blt.n	821dc <__sbprintf+0x68>
   821cc:	4630      	mov	r0, r6
   821ce:	4669      	mov	r1, sp
   821d0:	f000 f924 	bl	8241c <_fflush_r>
   821d4:	2800      	cmp	r0, #0
   821d6:	bf18      	it	ne
   821d8:	f04f 35ff 	movne.w	r5, #4294967295
   821dc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   821e0:	065b      	lsls	r3, r3, #25
   821e2:	d503      	bpl.n	821ec <__sbprintf+0x78>
   821e4:	89a3      	ldrh	r3, [r4, #12]
   821e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   821ea:	81a3      	strh	r3, [r4, #12]
   821ec:	9816      	ldr	r0, [sp, #88]	; 0x58
   821ee:	f000 fd2b 	bl	82c48 <__retarget_lock_close_recursive>
   821f2:	4628      	mov	r0, r5
   821f4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   821f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000821fc <__swsetup_r>:
   821fc:	b538      	push	{r3, r4, r5, lr}
   821fe:	4b30      	ldr	r3, [pc, #192]	; (822c0 <__swsetup_r+0xc4>)
   82200:	4605      	mov	r5, r0
   82202:	6818      	ldr	r0, [r3, #0]
   82204:	460c      	mov	r4, r1
   82206:	b110      	cbz	r0, 8220e <__swsetup_r+0x12>
   82208:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8220a:	2b00      	cmp	r3, #0
   8220c:	d038      	beq.n	82280 <__swsetup_r+0x84>
   8220e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82212:	b293      	uxth	r3, r2
   82214:	0718      	lsls	r0, r3, #28
   82216:	d50c      	bpl.n	82232 <__swsetup_r+0x36>
   82218:	6920      	ldr	r0, [r4, #16]
   8221a:	b1a8      	cbz	r0, 82248 <__swsetup_r+0x4c>
   8221c:	f013 0201 	ands.w	r2, r3, #1
   82220:	d01e      	beq.n	82260 <__swsetup_r+0x64>
   82222:	2200      	movs	r2, #0
   82224:	6963      	ldr	r3, [r4, #20]
   82226:	60a2      	str	r2, [r4, #8]
   82228:	425b      	negs	r3, r3
   8222a:	61a3      	str	r3, [r4, #24]
   8222c:	b1f0      	cbz	r0, 8226c <__swsetup_r+0x70>
   8222e:	2000      	movs	r0, #0
   82230:	bd38      	pop	{r3, r4, r5, pc}
   82232:	06d9      	lsls	r1, r3, #27
   82234:	d53b      	bpl.n	822ae <__swsetup_r+0xb2>
   82236:	0758      	lsls	r0, r3, #29
   82238:	d425      	bmi.n	82286 <__swsetup_r+0x8a>
   8223a:	6920      	ldr	r0, [r4, #16]
   8223c:	f042 0308 	orr.w	r3, r2, #8
   82240:	81a3      	strh	r3, [r4, #12]
   82242:	b29b      	uxth	r3, r3
   82244:	2800      	cmp	r0, #0
   82246:	d1e9      	bne.n	8221c <__swsetup_r+0x20>
   82248:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8224c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82250:	d0e4      	beq.n	8221c <__swsetup_r+0x20>
   82252:	4628      	mov	r0, r5
   82254:	4621      	mov	r1, r4
   82256:	f000 fd2b 	bl	82cb0 <__smakebuf_r>
   8225a:	89a3      	ldrh	r3, [r4, #12]
   8225c:	6920      	ldr	r0, [r4, #16]
   8225e:	e7dd      	b.n	8221c <__swsetup_r+0x20>
   82260:	0799      	lsls	r1, r3, #30
   82262:	bf58      	it	pl
   82264:	6962      	ldrpl	r2, [r4, #20]
   82266:	60a2      	str	r2, [r4, #8]
   82268:	2800      	cmp	r0, #0
   8226a:	d1e0      	bne.n	8222e <__swsetup_r+0x32>
   8226c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82270:	061a      	lsls	r2, r3, #24
   82272:	d5dd      	bpl.n	82230 <__swsetup_r+0x34>
   82274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82278:	81a3      	strh	r3, [r4, #12]
   8227a:	f04f 30ff 	mov.w	r0, #4294967295
   8227e:	bd38      	pop	{r3, r4, r5, pc}
   82280:	f000 f924 	bl	824cc <__sinit>
   82284:	e7c3      	b.n	8220e <__swsetup_r+0x12>
   82286:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82288:	b151      	cbz	r1, 822a0 <__swsetup_r+0xa4>
   8228a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8228e:	4299      	cmp	r1, r3
   82290:	d004      	beq.n	8229c <__swsetup_r+0xa0>
   82292:	4628      	mov	r0, r5
   82294:	f000 fa40 	bl	82718 <_free_r>
   82298:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8229c:	2300      	movs	r3, #0
   8229e:	6323      	str	r3, [r4, #48]	; 0x30
   822a0:	2300      	movs	r3, #0
   822a2:	6920      	ldr	r0, [r4, #16]
   822a4:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   822a8:	e884 0009 	stmia.w	r4, {r0, r3}
   822ac:	e7c6      	b.n	8223c <__swsetup_r+0x40>
   822ae:	2309      	movs	r3, #9
   822b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   822b4:	602b      	str	r3, [r5, #0]
   822b6:	f04f 30ff 	mov.w	r0, #4294967295
   822ba:	81a2      	strh	r2, [r4, #12]
   822bc:	bd38      	pop	{r3, r4, r5, pc}
   822be:	bf00      	nop
   822c0:	20070138 	.word	0x20070138

000822c4 <register_fini>:
   822c4:	4b02      	ldr	r3, [pc, #8]	; (822d0 <register_fini+0xc>)
   822c6:	b113      	cbz	r3, 822ce <register_fini+0xa>
   822c8:	4802      	ldr	r0, [pc, #8]	; (822d4 <register_fini+0x10>)
   822ca:	f000 b805 	b.w	822d8 <atexit>
   822ce:	4770      	bx	lr
   822d0:	00000000 	.word	0x00000000
   822d4:	00082545 	.word	0x00082545

000822d8 <atexit>:
   822d8:	2300      	movs	r3, #0
   822da:	4601      	mov	r1, r0
   822dc:	461a      	mov	r2, r3
   822de:	4618      	mov	r0, r3
   822e0:	f001 bb56 	b.w	83990 <__register_exitproc>

000822e4 <__sflush_r>:
   822e4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   822e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   822ec:	b29a      	uxth	r2, r3
   822ee:	460d      	mov	r5, r1
   822f0:	0711      	lsls	r1, r2, #28
   822f2:	4680      	mov	r8, r0
   822f4:	d43a      	bmi.n	8236c <__sflush_r+0x88>
   822f6:	686a      	ldr	r2, [r5, #4]
   822f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   822fc:	2a00      	cmp	r2, #0
   822fe:	81ab      	strh	r3, [r5, #12]
   82300:	dd70      	ble.n	823e4 <__sflush_r+0x100>
   82302:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82304:	2c00      	cmp	r4, #0
   82306:	d04a      	beq.n	8239e <__sflush_r+0xba>
   82308:	2200      	movs	r2, #0
   8230a:	b29b      	uxth	r3, r3
   8230c:	f8d8 6000 	ldr.w	r6, [r8]
   82310:	f8c8 2000 	str.w	r2, [r8]
   82314:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82318:	d068      	beq.n	823ec <__sflush_r+0x108>
   8231a:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   8231c:	075f      	lsls	r7, r3, #29
   8231e:	d505      	bpl.n	8232c <__sflush_r+0x48>
   82320:	6869      	ldr	r1, [r5, #4]
   82322:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82324:	1a52      	subs	r2, r2, r1
   82326:	b10b      	cbz	r3, 8232c <__sflush_r+0x48>
   82328:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   8232a:	1ad2      	subs	r2, r2, r3
   8232c:	2300      	movs	r3, #0
   8232e:	69e9      	ldr	r1, [r5, #28]
   82330:	4640      	mov	r0, r8
   82332:	47a0      	blx	r4
   82334:	1c44      	adds	r4, r0, #1
   82336:	d03d      	beq.n	823b4 <__sflush_r+0xd0>
   82338:	2100      	movs	r1, #0
   8233a:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   8233e:	692a      	ldr	r2, [r5, #16]
   82340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82344:	81ab      	strh	r3, [r5, #12]
   82346:	04db      	lsls	r3, r3, #19
   82348:	6069      	str	r1, [r5, #4]
   8234a:	602a      	str	r2, [r5, #0]
   8234c:	d448      	bmi.n	823e0 <__sflush_r+0xfc>
   8234e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82350:	f8c8 6000 	str.w	r6, [r8]
   82354:	b319      	cbz	r1, 8239e <__sflush_r+0xba>
   82356:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8235a:	4299      	cmp	r1, r3
   8235c:	d002      	beq.n	82364 <__sflush_r+0x80>
   8235e:	4640      	mov	r0, r8
   82360:	f000 f9da 	bl	82718 <_free_r>
   82364:	2000      	movs	r0, #0
   82366:	6328      	str	r0, [r5, #48]	; 0x30
   82368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8236c:	692e      	ldr	r6, [r5, #16]
   8236e:	b1b6      	cbz	r6, 8239e <__sflush_r+0xba>
   82370:	0791      	lsls	r1, r2, #30
   82372:	bf18      	it	ne
   82374:	2300      	movne	r3, #0
   82376:	682c      	ldr	r4, [r5, #0]
   82378:	bf08      	it	eq
   8237a:	696b      	ldreq	r3, [r5, #20]
   8237c:	602e      	str	r6, [r5, #0]
   8237e:	1ba4      	subs	r4, r4, r6
   82380:	60ab      	str	r3, [r5, #8]
   82382:	e00a      	b.n	8239a <__sflush_r+0xb6>
   82384:	4623      	mov	r3, r4
   82386:	4632      	mov	r2, r6
   82388:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8238a:	69e9      	ldr	r1, [r5, #28]
   8238c:	4640      	mov	r0, r8
   8238e:	47b8      	blx	r7
   82390:	2800      	cmp	r0, #0
   82392:	eba4 0400 	sub.w	r4, r4, r0
   82396:	4406      	add	r6, r0
   82398:	dd04      	ble.n	823a4 <__sflush_r+0xc0>
   8239a:	2c00      	cmp	r4, #0
   8239c:	dcf2      	bgt.n	82384 <__sflush_r+0xa0>
   8239e:	2000      	movs	r0, #0
   823a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823a4:	89ab      	ldrh	r3, [r5, #12]
   823a6:	f04f 30ff 	mov.w	r0, #4294967295
   823aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ae:	81ab      	strh	r3, [r5, #12]
   823b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b4:	f8d8 4000 	ldr.w	r4, [r8]
   823b8:	2c1d      	cmp	r4, #29
   823ba:	d8f3      	bhi.n	823a4 <__sflush_r+0xc0>
   823bc:	4b16      	ldr	r3, [pc, #88]	; (82418 <__sflush_r+0x134>)
   823be:	40e3      	lsrs	r3, r4
   823c0:	43db      	mvns	r3, r3
   823c2:	f013 0301 	ands.w	r3, r3, #1
   823c6:	d1ed      	bne.n	823a4 <__sflush_r+0xc0>
   823c8:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   823cc:	6929      	ldr	r1, [r5, #16]
   823ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   823d2:	81aa      	strh	r2, [r5, #12]
   823d4:	04d2      	lsls	r2, r2, #19
   823d6:	606b      	str	r3, [r5, #4]
   823d8:	6029      	str	r1, [r5, #0]
   823da:	d5b8      	bpl.n	8234e <__sflush_r+0x6a>
   823dc:	2c00      	cmp	r4, #0
   823de:	d1b6      	bne.n	8234e <__sflush_r+0x6a>
   823e0:	6528      	str	r0, [r5, #80]	; 0x50
   823e2:	e7b4      	b.n	8234e <__sflush_r+0x6a>
   823e4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   823e6:	2a00      	cmp	r2, #0
   823e8:	dc8b      	bgt.n	82302 <__sflush_r+0x1e>
   823ea:	e7d8      	b.n	8239e <__sflush_r+0xba>
   823ec:	2301      	movs	r3, #1
   823ee:	69e9      	ldr	r1, [r5, #28]
   823f0:	4640      	mov	r0, r8
   823f2:	47a0      	blx	r4
   823f4:	1c43      	adds	r3, r0, #1
   823f6:	4602      	mov	r2, r0
   823f8:	d002      	beq.n	82400 <__sflush_r+0x11c>
   823fa:	89ab      	ldrh	r3, [r5, #12]
   823fc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   823fe:	e78d      	b.n	8231c <__sflush_r+0x38>
   82400:	f8d8 3000 	ldr.w	r3, [r8]
   82404:	2b00      	cmp	r3, #0
   82406:	d0f8      	beq.n	823fa <__sflush_r+0x116>
   82408:	2b1d      	cmp	r3, #29
   8240a:	d001      	beq.n	82410 <__sflush_r+0x12c>
   8240c:	2b16      	cmp	r3, #22
   8240e:	d1c9      	bne.n	823a4 <__sflush_r+0xc0>
   82410:	f8c8 6000 	str.w	r6, [r8]
   82414:	e7c3      	b.n	8239e <__sflush_r+0xba>
   82416:	bf00      	nop
   82418:	20400001 	.word	0x20400001

0008241c <_fflush_r>:
   8241c:	b538      	push	{r3, r4, r5, lr}
   8241e:	460d      	mov	r5, r1
   82420:	4604      	mov	r4, r0
   82422:	b108      	cbz	r0, 82428 <_fflush_r+0xc>
   82424:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82426:	b1bb      	cbz	r3, 82458 <_fflush_r+0x3c>
   82428:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   8242c:	b188      	cbz	r0, 82452 <_fflush_r+0x36>
   8242e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82430:	07db      	lsls	r3, r3, #31
   82432:	d401      	bmi.n	82438 <_fflush_r+0x1c>
   82434:	0581      	lsls	r1, r0, #22
   82436:	d517      	bpl.n	82468 <_fflush_r+0x4c>
   82438:	4620      	mov	r0, r4
   8243a:	4629      	mov	r1, r5
   8243c:	f7ff ff52 	bl	822e4 <__sflush_r>
   82440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82442:	4604      	mov	r4, r0
   82444:	07da      	lsls	r2, r3, #31
   82446:	d402      	bmi.n	8244e <_fflush_r+0x32>
   82448:	89ab      	ldrh	r3, [r5, #12]
   8244a:	059b      	lsls	r3, r3, #22
   8244c:	d507      	bpl.n	8245e <_fflush_r+0x42>
   8244e:	4620      	mov	r0, r4
   82450:	bd38      	pop	{r3, r4, r5, pc}
   82452:	4604      	mov	r4, r0
   82454:	4620      	mov	r0, r4
   82456:	bd38      	pop	{r3, r4, r5, pc}
   82458:	f000 f838 	bl	824cc <__sinit>
   8245c:	e7e4      	b.n	82428 <_fflush_r+0xc>
   8245e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82460:	f000 fbf6 	bl	82c50 <__retarget_lock_release_recursive>
   82464:	4620      	mov	r0, r4
   82466:	bd38      	pop	{r3, r4, r5, pc}
   82468:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8246a:	f000 fbef 	bl	82c4c <__retarget_lock_acquire_recursive>
   8246e:	e7e3      	b.n	82438 <_fflush_r+0x1c>

00082470 <_cleanup_r>:
   82470:	4901      	ldr	r1, [pc, #4]	; (82478 <_cleanup_r+0x8>)
   82472:	f000 bbb1 	b.w	82bd8 <_fwalk_reent>
   82476:	bf00      	nop
   82478:	00083a79 	.word	0x00083a79

0008247c <std.isra.0>:
   8247c:	2300      	movs	r3, #0
   8247e:	b510      	push	{r4, lr}
   82480:	4604      	mov	r4, r0
   82482:	8181      	strh	r1, [r0, #12]
   82484:	81c2      	strh	r2, [r0, #14]
   82486:	6003      	str	r3, [r0, #0]
   82488:	6043      	str	r3, [r0, #4]
   8248a:	6083      	str	r3, [r0, #8]
   8248c:	6643      	str	r3, [r0, #100]	; 0x64
   8248e:	6103      	str	r3, [r0, #16]
   82490:	6143      	str	r3, [r0, #20]
   82492:	6183      	str	r3, [r0, #24]
   82494:	4619      	mov	r1, r3
   82496:	2208      	movs	r2, #8
   82498:	305c      	adds	r0, #92	; 0x5c
   8249a:	f7fe fe9b 	bl	811d4 <memset>
   8249e:	4807      	ldr	r0, [pc, #28]	; (824bc <std.isra.0+0x40>)
   824a0:	4907      	ldr	r1, [pc, #28]	; (824c0 <std.isra.0+0x44>)
   824a2:	4a08      	ldr	r2, [pc, #32]	; (824c4 <std.isra.0+0x48>)
   824a4:	4b08      	ldr	r3, [pc, #32]	; (824c8 <std.isra.0+0x4c>)
   824a6:	6220      	str	r0, [r4, #32]
   824a8:	61e4      	str	r4, [r4, #28]
   824aa:	6261      	str	r1, [r4, #36]	; 0x24
   824ac:	62a2      	str	r2, [r4, #40]	; 0x28
   824ae:	62e3      	str	r3, [r4, #44]	; 0x2c
   824b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
   824b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   824b8:	f000 bbc4 	b.w	82c44 <__retarget_lock_init_recursive>
   824bc:	000837c1 	.word	0x000837c1
   824c0:	000837e5 	.word	0x000837e5
   824c4:	00083821 	.word	0x00083821
   824c8:	00083841 	.word	0x00083841

000824cc <__sinit>:
   824cc:	b510      	push	{r4, lr}
   824ce:	4604      	mov	r4, r0
   824d0:	4814      	ldr	r0, [pc, #80]	; (82524 <__sinit+0x58>)
   824d2:	f000 fbbb 	bl	82c4c <__retarget_lock_acquire_recursive>
   824d6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   824d8:	b9fa      	cbnz	r2, 8251a <__sinit+0x4e>
   824da:	2003      	movs	r0, #3
   824dc:	4912      	ldr	r1, [pc, #72]	; (82528 <__sinit+0x5c>)
   824de:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   824e2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   824e6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   824ea:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   824ee:	63e1      	str	r1, [r4, #60]	; 0x3c
   824f0:	6860      	ldr	r0, [r4, #4]
   824f2:	2104      	movs	r1, #4
   824f4:	f7ff ffc2 	bl	8247c <std.isra.0>
   824f8:	68a0      	ldr	r0, [r4, #8]
   824fa:	2201      	movs	r2, #1
   824fc:	2109      	movs	r1, #9
   824fe:	f7ff ffbd 	bl	8247c <std.isra.0>
   82502:	68e0      	ldr	r0, [r4, #12]
   82504:	2202      	movs	r2, #2
   82506:	2112      	movs	r1, #18
   82508:	f7ff ffb8 	bl	8247c <std.isra.0>
   8250c:	2301      	movs	r3, #1
   8250e:	4805      	ldr	r0, [pc, #20]	; (82524 <__sinit+0x58>)
   82510:	63a3      	str	r3, [r4, #56]	; 0x38
   82512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82516:	f000 bb9b 	b.w	82c50 <__retarget_lock_release_recursive>
   8251a:	4802      	ldr	r0, [pc, #8]	; (82524 <__sinit+0x58>)
   8251c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82520:	f000 bb96 	b.w	82c50 <__retarget_lock_release_recursive>
   82524:	20070cec 	.word	0x20070cec
   82528:	00082471 	.word	0x00082471

0008252c <__sfp_lock_acquire>:
   8252c:	4801      	ldr	r0, [pc, #4]	; (82534 <__sfp_lock_acquire+0x8>)
   8252e:	f000 bb8d 	b.w	82c4c <__retarget_lock_acquire_recursive>
   82532:	bf00      	nop
   82534:	20070d00 	.word	0x20070d00

00082538 <__sfp_lock_release>:
   82538:	4801      	ldr	r0, [pc, #4]	; (82540 <__sfp_lock_release+0x8>)
   8253a:	f000 bb89 	b.w	82c50 <__retarget_lock_release_recursive>
   8253e:	bf00      	nop
   82540:	20070d00 	.word	0x20070d00

00082544 <__libc_fini_array>:
   82544:	b538      	push	{r3, r4, r5, lr}
   82546:	4c0a      	ldr	r4, [pc, #40]	; (82570 <__libc_fini_array+0x2c>)
   82548:	4d0a      	ldr	r5, [pc, #40]	; (82574 <__libc_fini_array+0x30>)
   8254a:	1b64      	subs	r4, r4, r5
   8254c:	10a4      	asrs	r4, r4, #2
   8254e:	d00a      	beq.n	82566 <__libc_fini_array+0x22>
   82550:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82554:	3b01      	subs	r3, #1
   82556:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8255a:	3c01      	subs	r4, #1
   8255c:	f855 3904 	ldr.w	r3, [r5], #-4
   82560:	4798      	blx	r3
   82562:	2c00      	cmp	r4, #0
   82564:	d1f9      	bne.n	8255a <__libc_fini_array+0x16>
   82566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8256a:	f001 bd8f 	b.w	8408c <_fini>
   8256e:	bf00      	nop
   82570:	0008409c 	.word	0x0008409c
   82574:	00084098 	.word	0x00084098

00082578 <__fputwc>:
   82578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8257c:	b083      	sub	sp, #12
   8257e:	4607      	mov	r7, r0
   82580:	4688      	mov	r8, r1
   82582:	4614      	mov	r4, r2
   82584:	f000 fb50 	bl	82c28 <__locale_mb_cur_max>
   82588:	2801      	cmp	r0, #1
   8258a:	d033      	beq.n	825f4 <__fputwc+0x7c>
   8258c:	4642      	mov	r2, r8
   8258e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82592:	a901      	add	r1, sp, #4
   82594:	4638      	mov	r0, r7
   82596:	f001 f9af 	bl	838f8 <_wcrtomb_r>
   8259a:	1c42      	adds	r2, r0, #1
   8259c:	4606      	mov	r6, r0
   8259e:	d022      	beq.n	825e6 <__fputwc+0x6e>
   825a0:	b390      	cbz	r0, 82608 <__fputwc+0x90>
   825a2:	f89d 1004 	ldrb.w	r1, [sp, #4]
   825a6:	2500      	movs	r5, #0
   825a8:	f10d 0904 	add.w	r9, sp, #4
   825ac:	e008      	b.n	825c0 <__fputwc+0x48>
   825ae:	6823      	ldr	r3, [r4, #0]
   825b0:	1c5a      	adds	r2, r3, #1
   825b2:	6022      	str	r2, [r4, #0]
   825b4:	7019      	strb	r1, [r3, #0]
   825b6:	3501      	adds	r5, #1
   825b8:	42b5      	cmp	r5, r6
   825ba:	d225      	bcs.n	82608 <__fputwc+0x90>
   825bc:	f815 1009 	ldrb.w	r1, [r5, r9]
   825c0:	68a3      	ldr	r3, [r4, #8]
   825c2:	3b01      	subs	r3, #1
   825c4:	2b00      	cmp	r3, #0
   825c6:	60a3      	str	r3, [r4, #8]
   825c8:	daf1      	bge.n	825ae <__fputwc+0x36>
   825ca:	69a2      	ldr	r2, [r4, #24]
   825cc:	4293      	cmp	r3, r2
   825ce:	db01      	blt.n	825d4 <__fputwc+0x5c>
   825d0:	290a      	cmp	r1, #10
   825d2:	d1ec      	bne.n	825ae <__fputwc+0x36>
   825d4:	4622      	mov	r2, r4
   825d6:	4638      	mov	r0, r7
   825d8:	f001 f936 	bl	83848 <__swbuf_r>
   825dc:	1c43      	adds	r3, r0, #1
   825de:	d1ea      	bne.n	825b6 <__fputwc+0x3e>
   825e0:	b003      	add	sp, #12
   825e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   825e6:	89a3      	ldrh	r3, [r4, #12]
   825e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825ec:	81a3      	strh	r3, [r4, #12]
   825ee:	b003      	add	sp, #12
   825f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   825f4:	f108 33ff 	add.w	r3, r8, #4294967295
   825f8:	2bfe      	cmp	r3, #254	; 0xfe
   825fa:	d8c7      	bhi.n	8258c <__fputwc+0x14>
   825fc:	fa5f f188 	uxtb.w	r1, r8
   82600:	4606      	mov	r6, r0
   82602:	f88d 1004 	strb.w	r1, [sp, #4]
   82606:	e7ce      	b.n	825a6 <__fputwc+0x2e>
   82608:	4640      	mov	r0, r8
   8260a:	b003      	add	sp, #12
   8260c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082610 <_fputwc_r>:
   82610:	b530      	push	{r4, r5, lr}
   82612:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82614:	4614      	mov	r4, r2
   82616:	f013 0f01 	tst.w	r3, #1
   8261a:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8261e:	b083      	sub	sp, #12
   82620:	4605      	mov	r5, r0
   82622:	b29a      	uxth	r2, r3
   82624:	d101      	bne.n	8262a <_fputwc_r+0x1a>
   82626:	0590      	lsls	r0, r2, #22
   82628:	d51c      	bpl.n	82664 <_fputwc_r+0x54>
   8262a:	0490      	lsls	r0, r2, #18
   8262c:	d406      	bmi.n	8263c <_fputwc_r+0x2c>
   8262e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82630:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82634:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82638:	81a3      	strh	r3, [r4, #12]
   8263a:	6662      	str	r2, [r4, #100]	; 0x64
   8263c:	4628      	mov	r0, r5
   8263e:	4622      	mov	r2, r4
   82640:	f7ff ff9a 	bl	82578 <__fputwc>
   82644:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82646:	4605      	mov	r5, r0
   82648:	07da      	lsls	r2, r3, #31
   8264a:	d402      	bmi.n	82652 <_fputwc_r+0x42>
   8264c:	89a3      	ldrh	r3, [r4, #12]
   8264e:	059b      	lsls	r3, r3, #22
   82650:	d502      	bpl.n	82658 <_fputwc_r+0x48>
   82652:	4628      	mov	r0, r5
   82654:	b003      	add	sp, #12
   82656:	bd30      	pop	{r4, r5, pc}
   82658:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8265a:	f000 faf9 	bl	82c50 <__retarget_lock_release_recursive>
   8265e:	4628      	mov	r0, r5
   82660:	b003      	add	sp, #12
   82662:	bd30      	pop	{r4, r5, pc}
   82664:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82666:	9101      	str	r1, [sp, #4]
   82668:	f000 faf0 	bl	82c4c <__retarget_lock_acquire_recursive>
   8266c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82670:	9901      	ldr	r1, [sp, #4]
   82672:	b29a      	uxth	r2, r3
   82674:	e7d9      	b.n	8262a <_fputwc_r+0x1a>
   82676:	bf00      	nop

00082678 <_malloc_trim_r>:
   82678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8267a:	460c      	mov	r4, r1
   8267c:	4f23      	ldr	r7, [pc, #140]	; (8270c <_malloc_trim_r+0x94>)
   8267e:	4606      	mov	r6, r0
   82680:	f000 feca 	bl	83418 <__malloc_lock>
   82684:	68bb      	ldr	r3, [r7, #8]
   82686:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8268a:	685d      	ldr	r5, [r3, #4]
   8268c:	310f      	adds	r1, #15
   8268e:	f025 0503 	bic.w	r5, r5, #3
   82692:	4429      	add	r1, r5
   82694:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82698:	f021 010f 	bic.w	r1, r1, #15
   8269c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   826a0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   826a4:	db07      	blt.n	826b6 <_malloc_trim_r+0x3e>
   826a6:	2100      	movs	r1, #0
   826a8:	4630      	mov	r0, r6
   826aa:	f001 f877 	bl	8379c <_sbrk_r>
   826ae:	68bb      	ldr	r3, [r7, #8]
   826b0:	442b      	add	r3, r5
   826b2:	4298      	cmp	r0, r3
   826b4:	d004      	beq.n	826c0 <_malloc_trim_r+0x48>
   826b6:	4630      	mov	r0, r6
   826b8:	f000 feb4 	bl	83424 <__malloc_unlock>
   826bc:	2000      	movs	r0, #0
   826be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826c0:	4261      	negs	r1, r4
   826c2:	4630      	mov	r0, r6
   826c4:	f001 f86a 	bl	8379c <_sbrk_r>
   826c8:	3001      	adds	r0, #1
   826ca:	d00d      	beq.n	826e8 <_malloc_trim_r+0x70>
   826cc:	4b10      	ldr	r3, [pc, #64]	; (82710 <_malloc_trim_r+0x98>)
   826ce:	68ba      	ldr	r2, [r7, #8]
   826d0:	6819      	ldr	r1, [r3, #0]
   826d2:	1b2d      	subs	r5, r5, r4
   826d4:	f045 0501 	orr.w	r5, r5, #1
   826d8:	4630      	mov	r0, r6
   826da:	1b09      	subs	r1, r1, r4
   826dc:	6055      	str	r5, [r2, #4]
   826de:	6019      	str	r1, [r3, #0]
   826e0:	f000 fea0 	bl	83424 <__malloc_unlock>
   826e4:	2001      	movs	r0, #1
   826e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826e8:	2100      	movs	r1, #0
   826ea:	4630      	mov	r0, r6
   826ec:	f001 f856 	bl	8379c <_sbrk_r>
   826f0:	68ba      	ldr	r2, [r7, #8]
   826f2:	1a83      	subs	r3, r0, r2
   826f4:	2b0f      	cmp	r3, #15
   826f6:	ddde      	ble.n	826b6 <_malloc_trim_r+0x3e>
   826f8:	4c06      	ldr	r4, [pc, #24]	; (82714 <_malloc_trim_r+0x9c>)
   826fa:	4905      	ldr	r1, [pc, #20]	; (82710 <_malloc_trim_r+0x98>)
   826fc:	6824      	ldr	r4, [r4, #0]
   826fe:	f043 0301 	orr.w	r3, r3, #1
   82702:	1b00      	subs	r0, r0, r4
   82704:	6053      	str	r3, [r2, #4]
   82706:	6008      	str	r0, [r1, #0]
   82708:	e7d5      	b.n	826b6 <_malloc_trim_r+0x3e>
   8270a:	bf00      	nop
   8270c:	200706d8 	.word	0x200706d8
   82710:	20070ca0 	.word	0x20070ca0
   82714:	20070ae0 	.word	0x20070ae0

00082718 <_free_r>:
   82718:	2900      	cmp	r1, #0
   8271a:	d044      	beq.n	827a6 <_free_r+0x8e>
   8271c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82720:	460d      	mov	r5, r1
   82722:	4680      	mov	r8, r0
   82724:	f000 fe78 	bl	83418 <__malloc_lock>
   82728:	f855 7c04 	ldr.w	r7, [r5, #-4]
   8272c:	4969      	ldr	r1, [pc, #420]	; (828d4 <_free_r+0x1bc>)
   8272e:	f1a5 0408 	sub.w	r4, r5, #8
   82732:	f027 0301 	bic.w	r3, r7, #1
   82736:	18e2      	adds	r2, r4, r3
   82738:	688e      	ldr	r6, [r1, #8]
   8273a:	6850      	ldr	r0, [r2, #4]
   8273c:	42b2      	cmp	r2, r6
   8273e:	f020 0003 	bic.w	r0, r0, #3
   82742:	d05e      	beq.n	82802 <_free_r+0xea>
   82744:	07fe      	lsls	r6, r7, #31
   82746:	6050      	str	r0, [r2, #4]
   82748:	d40b      	bmi.n	82762 <_free_r+0x4a>
   8274a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8274e:	f101 0e08 	add.w	lr, r1, #8
   82752:	1be4      	subs	r4, r4, r7
   82754:	68a5      	ldr	r5, [r4, #8]
   82756:	443b      	add	r3, r7
   82758:	4575      	cmp	r5, lr
   8275a:	d06d      	beq.n	82838 <_free_r+0x120>
   8275c:	68e7      	ldr	r7, [r4, #12]
   8275e:	60ef      	str	r7, [r5, #12]
   82760:	60bd      	str	r5, [r7, #8]
   82762:	1815      	adds	r5, r2, r0
   82764:	686d      	ldr	r5, [r5, #4]
   82766:	07ed      	lsls	r5, r5, #31
   82768:	d53e      	bpl.n	827e8 <_free_r+0xd0>
   8276a:	f043 0201 	orr.w	r2, r3, #1
   8276e:	6062      	str	r2, [r4, #4]
   82770:	50e3      	str	r3, [r4, r3]
   82772:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82776:	d217      	bcs.n	827a8 <_free_r+0x90>
   82778:	2201      	movs	r2, #1
   8277a:	08db      	lsrs	r3, r3, #3
   8277c:	1098      	asrs	r0, r3, #2
   8277e:	684d      	ldr	r5, [r1, #4]
   82780:	4413      	add	r3, r2
   82782:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82786:	4082      	lsls	r2, r0
   82788:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8278c:	432a      	orrs	r2, r5
   8278e:	3808      	subs	r0, #8
   82790:	60e0      	str	r0, [r4, #12]
   82792:	60a7      	str	r7, [r4, #8]
   82794:	604a      	str	r2, [r1, #4]
   82796:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8279a:	60fc      	str	r4, [r7, #12]
   8279c:	4640      	mov	r0, r8
   8279e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   827a2:	f000 be3f 	b.w	83424 <__malloc_unlock>
   827a6:	4770      	bx	lr
   827a8:	0a5a      	lsrs	r2, r3, #9
   827aa:	2a04      	cmp	r2, #4
   827ac:	d852      	bhi.n	82854 <_free_r+0x13c>
   827ae:	099a      	lsrs	r2, r3, #6
   827b0:	f102 0739 	add.w	r7, r2, #57	; 0x39
   827b4:	00ff      	lsls	r7, r7, #3
   827b6:	f102 0538 	add.w	r5, r2, #56	; 0x38
   827ba:	19c8      	adds	r0, r1, r7
   827bc:	59ca      	ldr	r2, [r1, r7]
   827be:	3808      	subs	r0, #8
   827c0:	4290      	cmp	r0, r2
   827c2:	d04f      	beq.n	82864 <_free_r+0x14c>
   827c4:	6851      	ldr	r1, [r2, #4]
   827c6:	f021 0103 	bic.w	r1, r1, #3
   827ca:	428b      	cmp	r3, r1
   827cc:	d232      	bcs.n	82834 <_free_r+0x11c>
   827ce:	6892      	ldr	r2, [r2, #8]
   827d0:	4290      	cmp	r0, r2
   827d2:	d1f7      	bne.n	827c4 <_free_r+0xac>
   827d4:	68c3      	ldr	r3, [r0, #12]
   827d6:	60a0      	str	r0, [r4, #8]
   827d8:	60e3      	str	r3, [r4, #12]
   827da:	609c      	str	r4, [r3, #8]
   827dc:	60c4      	str	r4, [r0, #12]
   827de:	4640      	mov	r0, r8
   827e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   827e4:	f000 be1e 	b.w	83424 <__malloc_unlock>
   827e8:	6895      	ldr	r5, [r2, #8]
   827ea:	4f3b      	ldr	r7, [pc, #236]	; (828d8 <_free_r+0x1c0>)
   827ec:	4403      	add	r3, r0
   827ee:	42bd      	cmp	r5, r7
   827f0:	d040      	beq.n	82874 <_free_r+0x15c>
   827f2:	68d0      	ldr	r0, [r2, #12]
   827f4:	f043 0201 	orr.w	r2, r3, #1
   827f8:	60e8      	str	r0, [r5, #12]
   827fa:	6085      	str	r5, [r0, #8]
   827fc:	6062      	str	r2, [r4, #4]
   827fe:	50e3      	str	r3, [r4, r3]
   82800:	e7b7      	b.n	82772 <_free_r+0x5a>
   82802:	07ff      	lsls	r7, r7, #31
   82804:	4403      	add	r3, r0
   82806:	d407      	bmi.n	82818 <_free_r+0x100>
   82808:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8280c:	1b64      	subs	r4, r4, r5
   8280e:	68e2      	ldr	r2, [r4, #12]
   82810:	68a0      	ldr	r0, [r4, #8]
   82812:	442b      	add	r3, r5
   82814:	60c2      	str	r2, [r0, #12]
   82816:	6090      	str	r0, [r2, #8]
   82818:	4a30      	ldr	r2, [pc, #192]	; (828dc <_free_r+0x1c4>)
   8281a:	f043 0001 	orr.w	r0, r3, #1
   8281e:	6812      	ldr	r2, [r2, #0]
   82820:	6060      	str	r0, [r4, #4]
   82822:	4293      	cmp	r3, r2
   82824:	608c      	str	r4, [r1, #8]
   82826:	d3b9      	bcc.n	8279c <_free_r+0x84>
   82828:	4b2d      	ldr	r3, [pc, #180]	; (828e0 <_free_r+0x1c8>)
   8282a:	4640      	mov	r0, r8
   8282c:	6819      	ldr	r1, [r3, #0]
   8282e:	f7ff ff23 	bl	82678 <_malloc_trim_r>
   82832:	e7b3      	b.n	8279c <_free_r+0x84>
   82834:	4610      	mov	r0, r2
   82836:	e7cd      	b.n	827d4 <_free_r+0xbc>
   82838:	1811      	adds	r1, r2, r0
   8283a:	6849      	ldr	r1, [r1, #4]
   8283c:	07c9      	lsls	r1, r1, #31
   8283e:	d444      	bmi.n	828ca <_free_r+0x1b2>
   82840:	6891      	ldr	r1, [r2, #8]
   82842:	4403      	add	r3, r0
   82844:	68d2      	ldr	r2, [r2, #12]
   82846:	f043 0001 	orr.w	r0, r3, #1
   8284a:	60ca      	str	r2, [r1, #12]
   8284c:	6091      	str	r1, [r2, #8]
   8284e:	6060      	str	r0, [r4, #4]
   82850:	50e3      	str	r3, [r4, r3]
   82852:	e7a3      	b.n	8279c <_free_r+0x84>
   82854:	2a14      	cmp	r2, #20
   82856:	d816      	bhi.n	82886 <_free_r+0x16e>
   82858:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8285c:	00ff      	lsls	r7, r7, #3
   8285e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82862:	e7aa      	b.n	827ba <_free_r+0xa2>
   82864:	2301      	movs	r3, #1
   82866:	10aa      	asrs	r2, r5, #2
   82868:	684d      	ldr	r5, [r1, #4]
   8286a:	4093      	lsls	r3, r2
   8286c:	432b      	orrs	r3, r5
   8286e:	604b      	str	r3, [r1, #4]
   82870:	4603      	mov	r3, r0
   82872:	e7b0      	b.n	827d6 <_free_r+0xbe>
   82874:	f043 0201 	orr.w	r2, r3, #1
   82878:	614c      	str	r4, [r1, #20]
   8287a:	610c      	str	r4, [r1, #16]
   8287c:	60e5      	str	r5, [r4, #12]
   8287e:	60a5      	str	r5, [r4, #8]
   82880:	6062      	str	r2, [r4, #4]
   82882:	50e3      	str	r3, [r4, r3]
   82884:	e78a      	b.n	8279c <_free_r+0x84>
   82886:	2a54      	cmp	r2, #84	; 0x54
   82888:	d806      	bhi.n	82898 <_free_r+0x180>
   8288a:	0b1a      	lsrs	r2, r3, #12
   8288c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82890:	00ff      	lsls	r7, r7, #3
   82892:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82896:	e790      	b.n	827ba <_free_r+0xa2>
   82898:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8289c:	d806      	bhi.n	828ac <_free_r+0x194>
   8289e:	0bda      	lsrs	r2, r3, #15
   828a0:	f102 0778 	add.w	r7, r2, #120	; 0x78
   828a4:	00ff      	lsls	r7, r7, #3
   828a6:	f102 0577 	add.w	r5, r2, #119	; 0x77
   828aa:	e786      	b.n	827ba <_free_r+0xa2>
   828ac:	f240 5054 	movw	r0, #1364	; 0x554
   828b0:	4282      	cmp	r2, r0
   828b2:	d806      	bhi.n	828c2 <_free_r+0x1aa>
   828b4:	0c9a      	lsrs	r2, r3, #18
   828b6:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   828ba:	00ff      	lsls	r7, r7, #3
   828bc:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   828c0:	e77b      	b.n	827ba <_free_r+0xa2>
   828c2:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   828c6:	257e      	movs	r5, #126	; 0x7e
   828c8:	e777      	b.n	827ba <_free_r+0xa2>
   828ca:	f043 0101 	orr.w	r1, r3, #1
   828ce:	6061      	str	r1, [r4, #4]
   828d0:	6013      	str	r3, [r2, #0]
   828d2:	e763      	b.n	8279c <_free_r+0x84>
   828d4:	200706d8 	.word	0x200706d8
   828d8:	200706e0 	.word	0x200706e0
   828dc:	20070ae4 	.word	0x20070ae4
   828e0:	20070cd0 	.word	0x20070cd0

000828e4 <__sfvwrite_r>:
   828e4:	6893      	ldr	r3, [r2, #8]
   828e6:	2b00      	cmp	r3, #0
   828e8:	d071      	beq.n	829ce <__sfvwrite_r+0xea>
   828ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   828ee:	898b      	ldrh	r3, [r1, #12]
   828f0:	b083      	sub	sp, #12
   828f2:	460c      	mov	r4, r1
   828f4:	0719      	lsls	r1, r3, #28
   828f6:	9000      	str	r0, [sp, #0]
   828f8:	4616      	mov	r6, r2
   828fa:	d525      	bpl.n	82948 <__sfvwrite_r+0x64>
   828fc:	6922      	ldr	r2, [r4, #16]
   828fe:	b31a      	cbz	r2, 82948 <__sfvwrite_r+0x64>
   82900:	f013 0002 	ands.w	r0, r3, #2
   82904:	6835      	ldr	r5, [r6, #0]
   82906:	d02b      	beq.n	82960 <__sfvwrite_r+0x7c>
   82908:	f04f 0900 	mov.w	r9, #0
   8290c:	46b0      	mov	r8, r6
   8290e:	464f      	mov	r7, r9
   82910:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82bd4 <__sfvwrite_r+0x2f0>
   82914:	2f00      	cmp	r7, #0
   82916:	d055      	beq.n	829c4 <__sfvwrite_r+0xe0>
   82918:	4557      	cmp	r7, sl
   8291a:	463b      	mov	r3, r7
   8291c:	464a      	mov	r2, r9
   8291e:	bf28      	it	cs
   82920:	4653      	movcs	r3, sl
   82922:	69e1      	ldr	r1, [r4, #28]
   82924:	9800      	ldr	r0, [sp, #0]
   82926:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82928:	47b0      	blx	r6
   8292a:	2800      	cmp	r0, #0
   8292c:	dd56      	ble.n	829dc <__sfvwrite_r+0xf8>
   8292e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82932:	4481      	add	r9, r0
   82934:	1a1b      	subs	r3, r3, r0
   82936:	1a3f      	subs	r7, r7, r0
   82938:	f8c8 3008 	str.w	r3, [r8, #8]
   8293c:	2b00      	cmp	r3, #0
   8293e:	d1e9      	bne.n	82914 <__sfvwrite_r+0x30>
   82940:	2000      	movs	r0, #0
   82942:	b003      	add	sp, #12
   82944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82948:	4621      	mov	r1, r4
   8294a:	9800      	ldr	r0, [sp, #0]
   8294c:	f7ff fc56 	bl	821fc <__swsetup_r>
   82950:	2800      	cmp	r0, #0
   82952:	f040 8135 	bne.w	82bc0 <__sfvwrite_r+0x2dc>
   82956:	89a3      	ldrh	r3, [r4, #12]
   82958:	6835      	ldr	r5, [r6, #0]
   8295a:	f013 0002 	ands.w	r0, r3, #2
   8295e:	d1d3      	bne.n	82908 <__sfvwrite_r+0x24>
   82960:	f013 0901 	ands.w	r9, r3, #1
   82964:	d144      	bne.n	829f0 <__sfvwrite_r+0x10c>
   82966:	464f      	mov	r7, r9
   82968:	9601      	str	r6, [sp, #4]
   8296a:	b337      	cbz	r7, 829ba <__sfvwrite_r+0xd6>
   8296c:	059a      	lsls	r2, r3, #22
   8296e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82972:	f140 8085 	bpl.w	82a80 <__sfvwrite_r+0x19c>
   82976:	4547      	cmp	r7, r8
   82978:	46c3      	mov	fp, r8
   8297a:	f0c0 80ad 	bcc.w	82ad8 <__sfvwrite_r+0x1f4>
   8297e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82982:	f040 80ae 	bne.w	82ae2 <__sfvwrite_r+0x1fe>
   82986:	46ba      	mov	sl, r7
   82988:	6820      	ldr	r0, [r4, #0]
   8298a:	465a      	mov	r2, fp
   8298c:	4649      	mov	r1, r9
   8298e:	f000 fcdf 	bl	83350 <memmove>
   82992:	68a2      	ldr	r2, [r4, #8]
   82994:	6823      	ldr	r3, [r4, #0]
   82996:	eba2 0208 	sub.w	r2, r2, r8
   8299a:	445b      	add	r3, fp
   8299c:	60a2      	str	r2, [r4, #8]
   8299e:	6023      	str	r3, [r4, #0]
   829a0:	9a01      	ldr	r2, [sp, #4]
   829a2:	44d1      	add	r9, sl
   829a4:	6893      	ldr	r3, [r2, #8]
   829a6:	eba7 070a 	sub.w	r7, r7, sl
   829aa:	eba3 030a 	sub.w	r3, r3, sl
   829ae:	6093      	str	r3, [r2, #8]
   829b0:	2b00      	cmp	r3, #0
   829b2:	d0c5      	beq.n	82940 <__sfvwrite_r+0x5c>
   829b4:	89a3      	ldrh	r3, [r4, #12]
   829b6:	2f00      	cmp	r7, #0
   829b8:	d1d8      	bne.n	8296c <__sfvwrite_r+0x88>
   829ba:	f8d5 9000 	ldr.w	r9, [r5]
   829be:	686f      	ldr	r7, [r5, #4]
   829c0:	3508      	adds	r5, #8
   829c2:	e7d2      	b.n	8296a <__sfvwrite_r+0x86>
   829c4:	f8d5 9000 	ldr.w	r9, [r5]
   829c8:	686f      	ldr	r7, [r5, #4]
   829ca:	3508      	adds	r5, #8
   829cc:	e7a2      	b.n	82914 <__sfvwrite_r+0x30>
   829ce:	2000      	movs	r0, #0
   829d0:	4770      	bx	lr
   829d2:	4621      	mov	r1, r4
   829d4:	9800      	ldr	r0, [sp, #0]
   829d6:	f7ff fd21 	bl	8241c <_fflush_r>
   829da:	b378      	cbz	r0, 82a3c <__sfvwrite_r+0x158>
   829dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829e0:	f04f 30ff 	mov.w	r0, #4294967295
   829e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829e8:	81a3      	strh	r3, [r4, #12]
   829ea:	b003      	add	sp, #12
   829ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   829f0:	4681      	mov	r9, r0
   829f2:	4633      	mov	r3, r6
   829f4:	464e      	mov	r6, r9
   829f6:	46a8      	mov	r8, r5
   829f8:	469a      	mov	sl, r3
   829fa:	464d      	mov	r5, r9
   829fc:	b356      	cbz	r6, 82a54 <__sfvwrite_r+0x170>
   829fe:	2800      	cmp	r0, #0
   82a00:	d032      	beq.n	82a68 <__sfvwrite_r+0x184>
   82a02:	45b1      	cmp	r9, r6
   82a04:	46cb      	mov	fp, r9
   82a06:	bf28      	it	cs
   82a08:	46b3      	movcs	fp, r6
   82a0a:	6820      	ldr	r0, [r4, #0]
   82a0c:	6923      	ldr	r3, [r4, #16]
   82a0e:	465f      	mov	r7, fp
   82a10:	4298      	cmp	r0, r3
   82a12:	6962      	ldr	r2, [r4, #20]
   82a14:	d904      	bls.n	82a20 <__sfvwrite_r+0x13c>
   82a16:	68a3      	ldr	r3, [r4, #8]
   82a18:	4413      	add	r3, r2
   82a1a:	459b      	cmp	fp, r3
   82a1c:	f300 80a8 	bgt.w	82b70 <__sfvwrite_r+0x28c>
   82a20:	4593      	cmp	fp, r2
   82a22:	db4d      	blt.n	82ac0 <__sfvwrite_r+0x1dc>
   82a24:	4613      	mov	r3, r2
   82a26:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82a28:	462a      	mov	r2, r5
   82a2a:	69e1      	ldr	r1, [r4, #28]
   82a2c:	9800      	ldr	r0, [sp, #0]
   82a2e:	47b8      	blx	r7
   82a30:	1e07      	subs	r7, r0, #0
   82a32:	ddd3      	ble.n	829dc <__sfvwrite_r+0xf8>
   82a34:	ebb9 0907 	subs.w	r9, r9, r7
   82a38:	d0cb      	beq.n	829d2 <__sfvwrite_r+0xee>
   82a3a:	2001      	movs	r0, #1
   82a3c:	f8da 3008 	ldr.w	r3, [sl, #8]
   82a40:	443d      	add	r5, r7
   82a42:	1bdb      	subs	r3, r3, r7
   82a44:	1bf6      	subs	r6, r6, r7
   82a46:	f8ca 3008 	str.w	r3, [sl, #8]
   82a4a:	2b00      	cmp	r3, #0
   82a4c:	f43f af78 	beq.w	82940 <__sfvwrite_r+0x5c>
   82a50:	2e00      	cmp	r6, #0
   82a52:	d1d4      	bne.n	829fe <__sfvwrite_r+0x11a>
   82a54:	f108 0308 	add.w	r3, r8, #8
   82a58:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82a5c:	4698      	mov	r8, r3
   82a5e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82a62:	3308      	adds	r3, #8
   82a64:	2e00      	cmp	r6, #0
   82a66:	d0f7      	beq.n	82a58 <__sfvwrite_r+0x174>
   82a68:	4632      	mov	r2, r6
   82a6a:	210a      	movs	r1, #10
   82a6c:	4628      	mov	r0, r5
   82a6e:	f000 fc29 	bl	832c4 <memchr>
   82a72:	2800      	cmp	r0, #0
   82a74:	f000 80a1 	beq.w	82bba <__sfvwrite_r+0x2d6>
   82a78:	3001      	adds	r0, #1
   82a7a:	eba0 0905 	sub.w	r9, r0, r5
   82a7e:	e7c0      	b.n	82a02 <__sfvwrite_r+0x11e>
   82a80:	6820      	ldr	r0, [r4, #0]
   82a82:	6923      	ldr	r3, [r4, #16]
   82a84:	4298      	cmp	r0, r3
   82a86:	d802      	bhi.n	82a8e <__sfvwrite_r+0x1aa>
   82a88:	6963      	ldr	r3, [r4, #20]
   82a8a:	429f      	cmp	r7, r3
   82a8c:	d25d      	bcs.n	82b4a <__sfvwrite_r+0x266>
   82a8e:	45b8      	cmp	r8, r7
   82a90:	bf28      	it	cs
   82a92:	46b8      	movcs	r8, r7
   82a94:	4649      	mov	r1, r9
   82a96:	4642      	mov	r2, r8
   82a98:	f000 fc5a 	bl	83350 <memmove>
   82a9c:	68a3      	ldr	r3, [r4, #8]
   82a9e:	6822      	ldr	r2, [r4, #0]
   82aa0:	eba3 0308 	sub.w	r3, r3, r8
   82aa4:	4442      	add	r2, r8
   82aa6:	60a3      	str	r3, [r4, #8]
   82aa8:	6022      	str	r2, [r4, #0]
   82aaa:	b10b      	cbz	r3, 82ab0 <__sfvwrite_r+0x1cc>
   82aac:	46c2      	mov	sl, r8
   82aae:	e777      	b.n	829a0 <__sfvwrite_r+0xbc>
   82ab0:	4621      	mov	r1, r4
   82ab2:	9800      	ldr	r0, [sp, #0]
   82ab4:	f7ff fcb2 	bl	8241c <_fflush_r>
   82ab8:	2800      	cmp	r0, #0
   82aba:	d18f      	bne.n	829dc <__sfvwrite_r+0xf8>
   82abc:	46c2      	mov	sl, r8
   82abe:	e76f      	b.n	829a0 <__sfvwrite_r+0xbc>
   82ac0:	465a      	mov	r2, fp
   82ac2:	4629      	mov	r1, r5
   82ac4:	f000 fc44 	bl	83350 <memmove>
   82ac8:	68a2      	ldr	r2, [r4, #8]
   82aca:	6823      	ldr	r3, [r4, #0]
   82acc:	eba2 020b 	sub.w	r2, r2, fp
   82ad0:	445b      	add	r3, fp
   82ad2:	60a2      	str	r2, [r4, #8]
   82ad4:	6023      	str	r3, [r4, #0]
   82ad6:	e7ad      	b.n	82a34 <__sfvwrite_r+0x150>
   82ad8:	46b8      	mov	r8, r7
   82ada:	46ba      	mov	sl, r7
   82adc:	46bb      	mov	fp, r7
   82ade:	6820      	ldr	r0, [r4, #0]
   82ae0:	e753      	b.n	8298a <__sfvwrite_r+0xa6>
   82ae2:	6962      	ldr	r2, [r4, #20]
   82ae4:	6820      	ldr	r0, [r4, #0]
   82ae6:	6921      	ldr	r1, [r4, #16]
   82ae8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82aec:	eba0 0a01 	sub.w	sl, r0, r1
   82af0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82af4:	f10a 0001 	add.w	r0, sl, #1
   82af8:	ea4f 0868 	mov.w	r8, r8, asr #1
   82afc:	4438      	add	r0, r7
   82afe:	4540      	cmp	r0, r8
   82b00:	4642      	mov	r2, r8
   82b02:	bf84      	itt	hi
   82b04:	4680      	movhi	r8, r0
   82b06:	4642      	movhi	r2, r8
   82b08:	055b      	lsls	r3, r3, #21
   82b0a:	d544      	bpl.n	82b96 <__sfvwrite_r+0x2b2>
   82b0c:	4611      	mov	r1, r2
   82b0e:	9800      	ldr	r0, [sp, #0]
   82b10:	f000 f920 	bl	82d54 <_malloc_r>
   82b14:	4683      	mov	fp, r0
   82b16:	2800      	cmp	r0, #0
   82b18:	d055      	beq.n	82bc6 <__sfvwrite_r+0x2e2>
   82b1a:	4652      	mov	r2, sl
   82b1c:	6921      	ldr	r1, [r4, #16]
   82b1e:	f7fe fae3 	bl	810e8 <memcpy>
   82b22:	89a3      	ldrh	r3, [r4, #12]
   82b24:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82b2c:	81a3      	strh	r3, [r4, #12]
   82b2e:	eb0b 000a 	add.w	r0, fp, sl
   82b32:	eba8 030a 	sub.w	r3, r8, sl
   82b36:	f8c4 b010 	str.w	fp, [r4, #16]
   82b3a:	f8c4 8014 	str.w	r8, [r4, #20]
   82b3e:	6020      	str	r0, [r4, #0]
   82b40:	60a3      	str	r3, [r4, #8]
   82b42:	46b8      	mov	r8, r7
   82b44:	46ba      	mov	sl, r7
   82b46:	46bb      	mov	fp, r7
   82b48:	e71f      	b.n	8298a <__sfvwrite_r+0xa6>
   82b4a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82b4e:	42ba      	cmp	r2, r7
   82b50:	bf28      	it	cs
   82b52:	463a      	movcs	r2, r7
   82b54:	fb92 f2f3 	sdiv	r2, r2, r3
   82b58:	69e1      	ldr	r1, [r4, #28]
   82b5a:	fb03 f302 	mul.w	r3, r3, r2
   82b5e:	9800      	ldr	r0, [sp, #0]
   82b60:	464a      	mov	r2, r9
   82b62:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82b64:	47b0      	blx	r6
   82b66:	f1b0 0a00 	subs.w	sl, r0, #0
   82b6a:	f73f af19 	bgt.w	829a0 <__sfvwrite_r+0xbc>
   82b6e:	e735      	b.n	829dc <__sfvwrite_r+0xf8>
   82b70:	461a      	mov	r2, r3
   82b72:	4629      	mov	r1, r5
   82b74:	9301      	str	r3, [sp, #4]
   82b76:	f000 fbeb 	bl	83350 <memmove>
   82b7a:	6822      	ldr	r2, [r4, #0]
   82b7c:	9b01      	ldr	r3, [sp, #4]
   82b7e:	4621      	mov	r1, r4
   82b80:	441a      	add	r2, r3
   82b82:	6022      	str	r2, [r4, #0]
   82b84:	9800      	ldr	r0, [sp, #0]
   82b86:	f7ff fc49 	bl	8241c <_fflush_r>
   82b8a:	9b01      	ldr	r3, [sp, #4]
   82b8c:	2800      	cmp	r0, #0
   82b8e:	f47f af25 	bne.w	829dc <__sfvwrite_r+0xf8>
   82b92:	461f      	mov	r7, r3
   82b94:	e74e      	b.n	82a34 <__sfvwrite_r+0x150>
   82b96:	9800      	ldr	r0, [sp, #0]
   82b98:	f000 fc4a 	bl	83430 <_realloc_r>
   82b9c:	4683      	mov	fp, r0
   82b9e:	2800      	cmp	r0, #0
   82ba0:	d1c5      	bne.n	82b2e <__sfvwrite_r+0x24a>
   82ba2:	9d00      	ldr	r5, [sp, #0]
   82ba4:	6921      	ldr	r1, [r4, #16]
   82ba6:	4628      	mov	r0, r5
   82ba8:	f7ff fdb6 	bl	82718 <_free_r>
   82bac:	220c      	movs	r2, #12
   82bae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bb2:	602a      	str	r2, [r5, #0]
   82bb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82bb8:	e712      	b.n	829e0 <__sfvwrite_r+0xfc>
   82bba:	f106 0901 	add.w	r9, r6, #1
   82bbe:	e720      	b.n	82a02 <__sfvwrite_r+0x11e>
   82bc0:	f04f 30ff 	mov.w	r0, #4294967295
   82bc4:	e6bd      	b.n	82942 <__sfvwrite_r+0x5e>
   82bc6:	220c      	movs	r2, #12
   82bc8:	9900      	ldr	r1, [sp, #0]
   82bca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82bce:	600a      	str	r2, [r1, #0]
   82bd0:	e706      	b.n	829e0 <__sfvwrite_r+0xfc>
   82bd2:	bf00      	nop
   82bd4:	7ffffc00 	.word	0x7ffffc00

00082bd8 <_fwalk_reent>:
   82bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82bdc:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82be0:	d01e      	beq.n	82c20 <_fwalk_reent+0x48>
   82be2:	4688      	mov	r8, r1
   82be4:	4607      	mov	r7, r0
   82be6:	f04f 0900 	mov.w	r9, #0
   82bea:	6875      	ldr	r5, [r6, #4]
   82bec:	68b4      	ldr	r4, [r6, #8]
   82bee:	3d01      	subs	r5, #1
   82bf0:	d410      	bmi.n	82c14 <_fwalk_reent+0x3c>
   82bf2:	89a3      	ldrh	r3, [r4, #12]
   82bf4:	3d01      	subs	r5, #1
   82bf6:	2b01      	cmp	r3, #1
   82bf8:	d908      	bls.n	82c0c <_fwalk_reent+0x34>
   82bfa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82bfe:	3301      	adds	r3, #1
   82c00:	d004      	beq.n	82c0c <_fwalk_reent+0x34>
   82c02:	4621      	mov	r1, r4
   82c04:	4638      	mov	r0, r7
   82c06:	47c0      	blx	r8
   82c08:	ea49 0900 	orr.w	r9, r9, r0
   82c0c:	1c6b      	adds	r3, r5, #1
   82c0e:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82c12:	d1ee      	bne.n	82bf2 <_fwalk_reent+0x1a>
   82c14:	6836      	ldr	r6, [r6, #0]
   82c16:	2e00      	cmp	r6, #0
   82c18:	d1e7      	bne.n	82bea <_fwalk_reent+0x12>
   82c1a:	4648      	mov	r0, r9
   82c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82c20:	46b1      	mov	r9, r6
   82c22:	4648      	mov	r0, r9
   82c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082c28 <__locale_mb_cur_max>:
   82c28:	4b04      	ldr	r3, [pc, #16]	; (82c3c <__locale_mb_cur_max+0x14>)
   82c2a:	4a05      	ldr	r2, [pc, #20]	; (82c40 <__locale_mb_cur_max+0x18>)
   82c2c:	681b      	ldr	r3, [r3, #0]
   82c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82c30:	2b00      	cmp	r3, #0
   82c32:	bf08      	it	eq
   82c34:	4613      	moveq	r3, r2
   82c36:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82c3a:	4770      	bx	lr
   82c3c:	20070138 	.word	0x20070138
   82c40:	2007056c 	.word	0x2007056c

00082c44 <__retarget_lock_init_recursive>:
   82c44:	4770      	bx	lr
   82c46:	bf00      	nop

00082c48 <__retarget_lock_close_recursive>:
   82c48:	4770      	bx	lr
   82c4a:	bf00      	nop

00082c4c <__retarget_lock_acquire_recursive>:
   82c4c:	4770      	bx	lr
   82c4e:	bf00      	nop

00082c50 <__retarget_lock_release_recursive>:
   82c50:	4770      	bx	lr
   82c52:	bf00      	nop

00082c54 <__swhatbuf_r>:
   82c54:	b570      	push	{r4, r5, r6, lr}
   82c56:	460c      	mov	r4, r1
   82c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82c5c:	b090      	sub	sp, #64	; 0x40
   82c5e:	2900      	cmp	r1, #0
   82c60:	4615      	mov	r5, r2
   82c62:	461e      	mov	r6, r3
   82c64:	db14      	blt.n	82c90 <__swhatbuf_r+0x3c>
   82c66:	aa01      	add	r2, sp, #4
   82c68:	f000 ff68 	bl	83b3c <_fstat_r>
   82c6c:	2800      	cmp	r0, #0
   82c6e:	db0f      	blt.n	82c90 <__swhatbuf_r+0x3c>
   82c70:	9a02      	ldr	r2, [sp, #8]
   82c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c76:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82c7a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82c7e:	fab2 f282 	clz	r2, r2
   82c82:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82c86:	0952      	lsrs	r2, r2, #5
   82c88:	6032      	str	r2, [r6, #0]
   82c8a:	602b      	str	r3, [r5, #0]
   82c8c:	b010      	add	sp, #64	; 0x40
   82c8e:	bd70      	pop	{r4, r5, r6, pc}
   82c90:	2300      	movs	r3, #0
   82c92:	89a2      	ldrh	r2, [r4, #12]
   82c94:	6033      	str	r3, [r6, #0]
   82c96:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82c9a:	d004      	beq.n	82ca6 <__swhatbuf_r+0x52>
   82c9c:	2240      	movs	r2, #64	; 0x40
   82c9e:	4618      	mov	r0, r3
   82ca0:	602a      	str	r2, [r5, #0]
   82ca2:	b010      	add	sp, #64	; 0x40
   82ca4:	bd70      	pop	{r4, r5, r6, pc}
   82ca6:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82caa:	602b      	str	r3, [r5, #0]
   82cac:	b010      	add	sp, #64	; 0x40
   82cae:	bd70      	pop	{r4, r5, r6, pc}

00082cb0 <__smakebuf_r>:
   82cb0:	898a      	ldrh	r2, [r1, #12]
   82cb2:	460b      	mov	r3, r1
   82cb4:	0792      	lsls	r2, r2, #30
   82cb6:	d506      	bpl.n	82cc6 <__smakebuf_r+0x16>
   82cb8:	2101      	movs	r1, #1
   82cba:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82cbe:	6159      	str	r1, [r3, #20]
   82cc0:	601a      	str	r2, [r3, #0]
   82cc2:	611a      	str	r2, [r3, #16]
   82cc4:	4770      	bx	lr
   82cc6:	b5f0      	push	{r4, r5, r6, r7, lr}
   82cc8:	b083      	sub	sp, #12
   82cca:	ab01      	add	r3, sp, #4
   82ccc:	466a      	mov	r2, sp
   82cce:	460c      	mov	r4, r1
   82cd0:	4606      	mov	r6, r0
   82cd2:	f7ff ffbf 	bl	82c54 <__swhatbuf_r>
   82cd6:	9900      	ldr	r1, [sp, #0]
   82cd8:	4605      	mov	r5, r0
   82cda:	4630      	mov	r0, r6
   82cdc:	f000 f83a 	bl	82d54 <_malloc_r>
   82ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82ce4:	b1d8      	cbz	r0, 82d1e <__smakebuf_r+0x6e>
   82ce6:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82cea:	4f15      	ldr	r7, [pc, #84]	; (82d40 <__smakebuf_r+0x90>)
   82cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82cf0:	63f7      	str	r7, [r6, #60]	; 0x3c
   82cf2:	81a3      	strh	r3, [r4, #12]
   82cf4:	6020      	str	r0, [r4, #0]
   82cf6:	6120      	str	r0, [r4, #16]
   82cf8:	6161      	str	r1, [r4, #20]
   82cfa:	b91a      	cbnz	r2, 82d04 <__smakebuf_r+0x54>
   82cfc:	432b      	orrs	r3, r5
   82cfe:	81a3      	strh	r3, [r4, #12]
   82d00:	b003      	add	sp, #12
   82d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82d04:	4630      	mov	r0, r6
   82d06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82d0a:	f000 ff2b 	bl	83b64 <_isatty_r>
   82d0e:	b1a0      	cbz	r0, 82d3a <__smakebuf_r+0x8a>
   82d10:	89a3      	ldrh	r3, [r4, #12]
   82d12:	f023 0303 	bic.w	r3, r3, #3
   82d16:	f043 0301 	orr.w	r3, r3, #1
   82d1a:	b21b      	sxth	r3, r3
   82d1c:	e7ee      	b.n	82cfc <__smakebuf_r+0x4c>
   82d1e:	059a      	lsls	r2, r3, #22
   82d20:	d4ee      	bmi.n	82d00 <__smakebuf_r+0x50>
   82d22:	2101      	movs	r1, #1
   82d24:	f023 0303 	bic.w	r3, r3, #3
   82d28:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82d2c:	f043 0302 	orr.w	r3, r3, #2
   82d30:	81a3      	strh	r3, [r4, #12]
   82d32:	6161      	str	r1, [r4, #20]
   82d34:	6022      	str	r2, [r4, #0]
   82d36:	6122      	str	r2, [r4, #16]
   82d38:	e7e2      	b.n	82d00 <__smakebuf_r+0x50>
   82d3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d3e:	e7dd      	b.n	82cfc <__smakebuf_r+0x4c>
   82d40:	00082471 	.word	0x00082471

00082d44 <malloc>:
   82d44:	4b02      	ldr	r3, [pc, #8]	; (82d50 <malloc+0xc>)
   82d46:	4601      	mov	r1, r0
   82d48:	6818      	ldr	r0, [r3, #0]
   82d4a:	f000 b803 	b.w	82d54 <_malloc_r>
   82d4e:	bf00      	nop
   82d50:	20070138 	.word	0x20070138

00082d54 <_malloc_r>:
   82d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82d58:	f101 060b 	add.w	r6, r1, #11
   82d5c:	2e16      	cmp	r6, #22
   82d5e:	b083      	sub	sp, #12
   82d60:	4605      	mov	r5, r0
   82d62:	f240 809e 	bls.w	82ea2 <_malloc_r+0x14e>
   82d66:	f036 0607 	bics.w	r6, r6, #7
   82d6a:	f100 80bd 	bmi.w	82ee8 <_malloc_r+0x194>
   82d6e:	42b1      	cmp	r1, r6
   82d70:	f200 80ba 	bhi.w	82ee8 <_malloc_r+0x194>
   82d74:	f000 fb50 	bl	83418 <__malloc_lock>
   82d78:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82d7c:	f0c0 8285 	bcc.w	8328a <_malloc_r+0x536>
   82d80:	0a73      	lsrs	r3, r6, #9
   82d82:	f000 80b8 	beq.w	82ef6 <_malloc_r+0x1a2>
   82d86:	2b04      	cmp	r3, #4
   82d88:	f200 816c 	bhi.w	83064 <_malloc_r+0x310>
   82d8c:	09b3      	lsrs	r3, r6, #6
   82d8e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82d92:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82d96:	00c1      	lsls	r1, r0, #3
   82d98:	4fb8      	ldr	r7, [pc, #736]	; (8307c <_malloc_r+0x328>)
   82d9a:	4439      	add	r1, r7
   82d9c:	684c      	ldr	r4, [r1, #4]
   82d9e:	3908      	subs	r1, #8
   82da0:	42a1      	cmp	r1, r4
   82da2:	d106      	bne.n	82db2 <_malloc_r+0x5e>
   82da4:	e00c      	b.n	82dc0 <_malloc_r+0x6c>
   82da6:	2a00      	cmp	r2, #0
   82da8:	f280 80ab 	bge.w	82f02 <_malloc_r+0x1ae>
   82dac:	68e4      	ldr	r4, [r4, #12]
   82dae:	42a1      	cmp	r1, r4
   82db0:	d006      	beq.n	82dc0 <_malloc_r+0x6c>
   82db2:	6863      	ldr	r3, [r4, #4]
   82db4:	f023 0303 	bic.w	r3, r3, #3
   82db8:	1b9a      	subs	r2, r3, r6
   82dba:	2a0f      	cmp	r2, #15
   82dbc:	ddf3      	ble.n	82da6 <_malloc_r+0x52>
   82dbe:	4670      	mov	r0, lr
   82dc0:	693c      	ldr	r4, [r7, #16]
   82dc2:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83090 <_malloc_r+0x33c>
   82dc6:	4574      	cmp	r4, lr
   82dc8:	f000 819e 	beq.w	83108 <_malloc_r+0x3b4>
   82dcc:	6863      	ldr	r3, [r4, #4]
   82dce:	f023 0303 	bic.w	r3, r3, #3
   82dd2:	1b9a      	subs	r2, r3, r6
   82dd4:	2a0f      	cmp	r2, #15
   82dd6:	f300 8183 	bgt.w	830e0 <_malloc_r+0x38c>
   82dda:	2a00      	cmp	r2, #0
   82ddc:	f8c7 e014 	str.w	lr, [r7, #20]
   82de0:	f8c7 e010 	str.w	lr, [r7, #16]
   82de4:	f280 8091 	bge.w	82f0a <_malloc_r+0x1b6>
   82de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82dec:	f080 8154 	bcs.w	83098 <_malloc_r+0x344>
   82df0:	2201      	movs	r2, #1
   82df2:	08db      	lsrs	r3, r3, #3
   82df4:	6879      	ldr	r1, [r7, #4]
   82df6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82dfa:	4413      	add	r3, r2
   82dfc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82e00:	fa02 f20c 	lsl.w	r2, r2, ip
   82e04:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82e08:	430a      	orrs	r2, r1
   82e0a:	f1ac 0108 	sub.w	r1, ip, #8
   82e0e:	60e1      	str	r1, [r4, #12]
   82e10:	f8c4 8008 	str.w	r8, [r4, #8]
   82e14:	607a      	str	r2, [r7, #4]
   82e16:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82e1a:	f8c8 400c 	str.w	r4, [r8, #12]
   82e1e:	2401      	movs	r4, #1
   82e20:	1083      	asrs	r3, r0, #2
   82e22:	409c      	lsls	r4, r3
   82e24:	4294      	cmp	r4, r2
   82e26:	d87d      	bhi.n	82f24 <_malloc_r+0x1d0>
   82e28:	4214      	tst	r4, r2
   82e2a:	d106      	bne.n	82e3a <_malloc_r+0xe6>
   82e2c:	f020 0003 	bic.w	r0, r0, #3
   82e30:	0064      	lsls	r4, r4, #1
   82e32:	4214      	tst	r4, r2
   82e34:	f100 0004 	add.w	r0, r0, #4
   82e38:	d0fa      	beq.n	82e30 <_malloc_r+0xdc>
   82e3a:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82e3e:	46cc      	mov	ip, r9
   82e40:	4680      	mov	r8, r0
   82e42:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e46:	459c      	cmp	ip, r3
   82e48:	d107      	bne.n	82e5a <_malloc_r+0x106>
   82e4a:	e15f      	b.n	8310c <_malloc_r+0x3b8>
   82e4c:	2a00      	cmp	r2, #0
   82e4e:	f280 816d 	bge.w	8312c <_malloc_r+0x3d8>
   82e52:	68db      	ldr	r3, [r3, #12]
   82e54:	459c      	cmp	ip, r3
   82e56:	f000 8159 	beq.w	8310c <_malloc_r+0x3b8>
   82e5a:	6859      	ldr	r1, [r3, #4]
   82e5c:	f021 0103 	bic.w	r1, r1, #3
   82e60:	1b8a      	subs	r2, r1, r6
   82e62:	2a0f      	cmp	r2, #15
   82e64:	ddf2      	ble.n	82e4c <_malloc_r+0xf8>
   82e66:	68dc      	ldr	r4, [r3, #12]
   82e68:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82e6c:	f046 0801 	orr.w	r8, r6, #1
   82e70:	4628      	mov	r0, r5
   82e72:	441e      	add	r6, r3
   82e74:	f042 0501 	orr.w	r5, r2, #1
   82e78:	f8c3 8004 	str.w	r8, [r3, #4]
   82e7c:	f8cc 400c 	str.w	r4, [ip, #12]
   82e80:	f8c4 c008 	str.w	ip, [r4, #8]
   82e84:	617e      	str	r6, [r7, #20]
   82e86:	613e      	str	r6, [r7, #16]
   82e88:	f8c6 e00c 	str.w	lr, [r6, #12]
   82e8c:	f8c6 e008 	str.w	lr, [r6, #8]
   82e90:	6075      	str	r5, [r6, #4]
   82e92:	505a      	str	r2, [r3, r1]
   82e94:	9300      	str	r3, [sp, #0]
   82e96:	f000 fac5 	bl	83424 <__malloc_unlock>
   82e9a:	9b00      	ldr	r3, [sp, #0]
   82e9c:	f103 0408 	add.w	r4, r3, #8
   82ea0:	e01e      	b.n	82ee0 <_malloc_r+0x18c>
   82ea2:	2910      	cmp	r1, #16
   82ea4:	d820      	bhi.n	82ee8 <_malloc_r+0x194>
   82ea6:	f000 fab7 	bl	83418 <__malloc_lock>
   82eaa:	2610      	movs	r6, #16
   82eac:	2318      	movs	r3, #24
   82eae:	2002      	movs	r0, #2
   82eb0:	4f72      	ldr	r7, [pc, #456]	; (8307c <_malloc_r+0x328>)
   82eb2:	443b      	add	r3, r7
   82eb4:	685c      	ldr	r4, [r3, #4]
   82eb6:	f1a3 0208 	sub.w	r2, r3, #8
   82eba:	4294      	cmp	r4, r2
   82ebc:	f000 812f 	beq.w	8311e <_malloc_r+0x3ca>
   82ec0:	6863      	ldr	r3, [r4, #4]
   82ec2:	68e1      	ldr	r1, [r4, #12]
   82ec4:	f023 0303 	bic.w	r3, r3, #3
   82ec8:	4423      	add	r3, r4
   82eca:	685a      	ldr	r2, [r3, #4]
   82ecc:	68a6      	ldr	r6, [r4, #8]
   82ece:	f042 0201 	orr.w	r2, r2, #1
   82ed2:	60f1      	str	r1, [r6, #12]
   82ed4:	4628      	mov	r0, r5
   82ed6:	608e      	str	r6, [r1, #8]
   82ed8:	605a      	str	r2, [r3, #4]
   82eda:	f000 faa3 	bl	83424 <__malloc_unlock>
   82ede:	3408      	adds	r4, #8
   82ee0:	4620      	mov	r0, r4
   82ee2:	b003      	add	sp, #12
   82ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ee8:	2400      	movs	r4, #0
   82eea:	230c      	movs	r3, #12
   82eec:	4620      	mov	r0, r4
   82eee:	602b      	str	r3, [r5, #0]
   82ef0:	b003      	add	sp, #12
   82ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ef6:	2040      	movs	r0, #64	; 0x40
   82ef8:	f44f 7100 	mov.w	r1, #512	; 0x200
   82efc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82f00:	e74a      	b.n	82d98 <_malloc_r+0x44>
   82f02:	4423      	add	r3, r4
   82f04:	685a      	ldr	r2, [r3, #4]
   82f06:	68e1      	ldr	r1, [r4, #12]
   82f08:	e7e0      	b.n	82ecc <_malloc_r+0x178>
   82f0a:	4423      	add	r3, r4
   82f0c:	685a      	ldr	r2, [r3, #4]
   82f0e:	4628      	mov	r0, r5
   82f10:	f042 0201 	orr.w	r2, r2, #1
   82f14:	605a      	str	r2, [r3, #4]
   82f16:	3408      	adds	r4, #8
   82f18:	f000 fa84 	bl	83424 <__malloc_unlock>
   82f1c:	4620      	mov	r0, r4
   82f1e:	b003      	add	sp, #12
   82f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f24:	68bc      	ldr	r4, [r7, #8]
   82f26:	6863      	ldr	r3, [r4, #4]
   82f28:	f023 0803 	bic.w	r8, r3, #3
   82f2c:	45b0      	cmp	r8, r6
   82f2e:	d304      	bcc.n	82f3a <_malloc_r+0x1e6>
   82f30:	eba8 0306 	sub.w	r3, r8, r6
   82f34:	2b0f      	cmp	r3, #15
   82f36:	f300 8085 	bgt.w	83044 <_malloc_r+0x2f0>
   82f3a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83094 <_malloc_r+0x340>
   82f3e:	4b50      	ldr	r3, [pc, #320]	; (83080 <_malloc_r+0x32c>)
   82f40:	f8d9 2000 	ldr.w	r2, [r9]
   82f44:	681b      	ldr	r3, [r3, #0]
   82f46:	3201      	adds	r2, #1
   82f48:	4433      	add	r3, r6
   82f4a:	eb04 0a08 	add.w	sl, r4, r8
   82f4e:	f000 8154 	beq.w	831fa <_malloc_r+0x4a6>
   82f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82f56:	330f      	adds	r3, #15
   82f58:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82f5c:	f02b 0b0f 	bic.w	fp, fp, #15
   82f60:	4659      	mov	r1, fp
   82f62:	4628      	mov	r0, r5
   82f64:	f000 fc1a 	bl	8379c <_sbrk_r>
   82f68:	1c41      	adds	r1, r0, #1
   82f6a:	4602      	mov	r2, r0
   82f6c:	f000 80fb 	beq.w	83166 <_malloc_r+0x412>
   82f70:	4582      	cmp	sl, r0
   82f72:	f200 80f6 	bhi.w	83162 <_malloc_r+0x40e>
   82f76:	4b43      	ldr	r3, [pc, #268]	; (83084 <_malloc_r+0x330>)
   82f78:	6819      	ldr	r1, [r3, #0]
   82f7a:	4459      	add	r1, fp
   82f7c:	6019      	str	r1, [r3, #0]
   82f7e:	f000 814c 	beq.w	8321a <_malloc_r+0x4c6>
   82f82:	f8d9 0000 	ldr.w	r0, [r9]
   82f86:	3001      	adds	r0, #1
   82f88:	bf1b      	ittet	ne
   82f8a:	eba2 0a0a 	subne.w	sl, r2, sl
   82f8e:	4451      	addne	r1, sl
   82f90:	f8c9 2000 	streq.w	r2, [r9]
   82f94:	6019      	strne	r1, [r3, #0]
   82f96:	f012 0107 	ands.w	r1, r2, #7
   82f9a:	f000 8114 	beq.w	831c6 <_malloc_r+0x472>
   82f9e:	f1c1 0008 	rsb	r0, r1, #8
   82fa2:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82fa6:	4402      	add	r2, r0
   82fa8:	3108      	adds	r1, #8
   82faa:	eb02 090b 	add.w	r9, r2, fp
   82fae:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82fb2:	eba1 0909 	sub.w	r9, r1, r9
   82fb6:	4649      	mov	r1, r9
   82fb8:	4628      	mov	r0, r5
   82fba:	9301      	str	r3, [sp, #4]
   82fbc:	9200      	str	r2, [sp, #0]
   82fbe:	f000 fbed 	bl	8379c <_sbrk_r>
   82fc2:	1c43      	adds	r3, r0, #1
   82fc4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82fc8:	f000 8142 	beq.w	83250 <_malloc_r+0x4fc>
   82fcc:	1a80      	subs	r0, r0, r2
   82fce:	4448      	add	r0, r9
   82fd0:	f040 0001 	orr.w	r0, r0, #1
   82fd4:	6819      	ldr	r1, [r3, #0]
   82fd6:	42bc      	cmp	r4, r7
   82fd8:	4449      	add	r1, r9
   82fda:	60ba      	str	r2, [r7, #8]
   82fdc:	6019      	str	r1, [r3, #0]
   82fde:	6050      	str	r0, [r2, #4]
   82fe0:	d017      	beq.n	83012 <_malloc_r+0x2be>
   82fe2:	f1b8 0f0f 	cmp.w	r8, #15
   82fe6:	f240 80fa 	bls.w	831de <_malloc_r+0x48a>
   82fea:	f04f 0c05 	mov.w	ip, #5
   82fee:	6862      	ldr	r2, [r4, #4]
   82ff0:	f1a8 000c 	sub.w	r0, r8, #12
   82ff4:	f020 0007 	bic.w	r0, r0, #7
   82ff8:	f002 0201 	and.w	r2, r2, #1
   82ffc:	eb04 0e00 	add.w	lr, r4, r0
   83000:	4302      	orrs	r2, r0
   83002:	280f      	cmp	r0, #15
   83004:	6062      	str	r2, [r4, #4]
   83006:	f8ce c004 	str.w	ip, [lr, #4]
   8300a:	f8ce c008 	str.w	ip, [lr, #8]
   8300e:	f200 8116 	bhi.w	8323e <_malloc_r+0x4ea>
   83012:	4b1d      	ldr	r3, [pc, #116]	; (83088 <_malloc_r+0x334>)
   83014:	68bc      	ldr	r4, [r7, #8]
   83016:	681a      	ldr	r2, [r3, #0]
   83018:	4291      	cmp	r1, r2
   8301a:	bf88      	it	hi
   8301c:	6019      	strhi	r1, [r3, #0]
   8301e:	4b1b      	ldr	r3, [pc, #108]	; (8308c <_malloc_r+0x338>)
   83020:	681a      	ldr	r2, [r3, #0]
   83022:	4291      	cmp	r1, r2
   83024:	6862      	ldr	r2, [r4, #4]
   83026:	bf88      	it	hi
   83028:	6019      	strhi	r1, [r3, #0]
   8302a:	f022 0203 	bic.w	r2, r2, #3
   8302e:	4296      	cmp	r6, r2
   83030:	eba2 0306 	sub.w	r3, r2, r6
   83034:	d801      	bhi.n	8303a <_malloc_r+0x2e6>
   83036:	2b0f      	cmp	r3, #15
   83038:	dc04      	bgt.n	83044 <_malloc_r+0x2f0>
   8303a:	4628      	mov	r0, r5
   8303c:	f000 f9f2 	bl	83424 <__malloc_unlock>
   83040:	2400      	movs	r4, #0
   83042:	e74d      	b.n	82ee0 <_malloc_r+0x18c>
   83044:	f046 0201 	orr.w	r2, r6, #1
   83048:	f043 0301 	orr.w	r3, r3, #1
   8304c:	4426      	add	r6, r4
   8304e:	6062      	str	r2, [r4, #4]
   83050:	4628      	mov	r0, r5
   83052:	60be      	str	r6, [r7, #8]
   83054:	3408      	adds	r4, #8
   83056:	6073      	str	r3, [r6, #4]
   83058:	f000 f9e4 	bl	83424 <__malloc_unlock>
   8305c:	4620      	mov	r0, r4
   8305e:	b003      	add	sp, #12
   83060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83064:	2b14      	cmp	r3, #20
   83066:	d970      	bls.n	8314a <_malloc_r+0x3f6>
   83068:	2b54      	cmp	r3, #84	; 0x54
   8306a:	f200 80a2 	bhi.w	831b2 <_malloc_r+0x45e>
   8306e:	0b33      	lsrs	r3, r6, #12
   83070:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83074:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83078:	00c1      	lsls	r1, r0, #3
   8307a:	e68d      	b.n	82d98 <_malloc_r+0x44>
   8307c:	200706d8 	.word	0x200706d8
   83080:	20070cd0 	.word	0x20070cd0
   83084:	20070ca0 	.word	0x20070ca0
   83088:	20070cc8 	.word	0x20070cc8
   8308c:	20070ccc 	.word	0x20070ccc
   83090:	200706e0 	.word	0x200706e0
   83094:	20070ae0 	.word	0x20070ae0
   83098:	0a5a      	lsrs	r2, r3, #9
   8309a:	2a04      	cmp	r2, #4
   8309c:	d95b      	bls.n	83156 <_malloc_r+0x402>
   8309e:	2a14      	cmp	r2, #20
   830a0:	f200 80ae 	bhi.w	83200 <_malloc_r+0x4ac>
   830a4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   830a8:	00c9      	lsls	r1, r1, #3
   830aa:	325b      	adds	r2, #91	; 0x5b
   830ac:	eb07 0c01 	add.w	ip, r7, r1
   830b0:	5879      	ldr	r1, [r7, r1]
   830b2:	f1ac 0c08 	sub.w	ip, ip, #8
   830b6:	458c      	cmp	ip, r1
   830b8:	f000 8088 	beq.w	831cc <_malloc_r+0x478>
   830bc:	684a      	ldr	r2, [r1, #4]
   830be:	f022 0203 	bic.w	r2, r2, #3
   830c2:	4293      	cmp	r3, r2
   830c4:	d273      	bcs.n	831ae <_malloc_r+0x45a>
   830c6:	6889      	ldr	r1, [r1, #8]
   830c8:	458c      	cmp	ip, r1
   830ca:	d1f7      	bne.n	830bc <_malloc_r+0x368>
   830cc:	f8dc 300c 	ldr.w	r3, [ip, #12]
   830d0:	687a      	ldr	r2, [r7, #4]
   830d2:	60e3      	str	r3, [r4, #12]
   830d4:	f8c4 c008 	str.w	ip, [r4, #8]
   830d8:	609c      	str	r4, [r3, #8]
   830da:	f8cc 400c 	str.w	r4, [ip, #12]
   830de:	e69e      	b.n	82e1e <_malloc_r+0xca>
   830e0:	f046 0c01 	orr.w	ip, r6, #1
   830e4:	f042 0101 	orr.w	r1, r2, #1
   830e8:	4426      	add	r6, r4
   830ea:	f8c4 c004 	str.w	ip, [r4, #4]
   830ee:	4628      	mov	r0, r5
   830f0:	617e      	str	r6, [r7, #20]
   830f2:	613e      	str	r6, [r7, #16]
   830f4:	f8c6 e00c 	str.w	lr, [r6, #12]
   830f8:	f8c6 e008 	str.w	lr, [r6, #8]
   830fc:	6071      	str	r1, [r6, #4]
   830fe:	50e2      	str	r2, [r4, r3]
   83100:	f000 f990 	bl	83424 <__malloc_unlock>
   83104:	3408      	adds	r4, #8
   83106:	e6eb      	b.n	82ee0 <_malloc_r+0x18c>
   83108:	687a      	ldr	r2, [r7, #4]
   8310a:	e688      	b.n	82e1e <_malloc_r+0xca>
   8310c:	f108 0801 	add.w	r8, r8, #1
   83110:	f018 0f03 	tst.w	r8, #3
   83114:	f10c 0c08 	add.w	ip, ip, #8
   83118:	f47f ae93 	bne.w	82e42 <_malloc_r+0xee>
   8311c:	e02d      	b.n	8317a <_malloc_r+0x426>
   8311e:	68dc      	ldr	r4, [r3, #12]
   83120:	42a3      	cmp	r3, r4
   83122:	bf08      	it	eq
   83124:	3002      	addeq	r0, #2
   83126:	f43f ae4b 	beq.w	82dc0 <_malloc_r+0x6c>
   8312a:	e6c9      	b.n	82ec0 <_malloc_r+0x16c>
   8312c:	461c      	mov	r4, r3
   8312e:	4419      	add	r1, r3
   83130:	684a      	ldr	r2, [r1, #4]
   83132:	68db      	ldr	r3, [r3, #12]
   83134:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83138:	f042 0201 	orr.w	r2, r2, #1
   8313c:	604a      	str	r2, [r1, #4]
   8313e:	4628      	mov	r0, r5
   83140:	60f3      	str	r3, [r6, #12]
   83142:	609e      	str	r6, [r3, #8]
   83144:	f000 f96e 	bl	83424 <__malloc_unlock>
   83148:	e6ca      	b.n	82ee0 <_malloc_r+0x18c>
   8314a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8314e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83152:	00c1      	lsls	r1, r0, #3
   83154:	e620      	b.n	82d98 <_malloc_r+0x44>
   83156:	099a      	lsrs	r2, r3, #6
   83158:	f102 0139 	add.w	r1, r2, #57	; 0x39
   8315c:	00c9      	lsls	r1, r1, #3
   8315e:	3238      	adds	r2, #56	; 0x38
   83160:	e7a4      	b.n	830ac <_malloc_r+0x358>
   83162:	42bc      	cmp	r4, r7
   83164:	d054      	beq.n	83210 <_malloc_r+0x4bc>
   83166:	68bc      	ldr	r4, [r7, #8]
   83168:	6862      	ldr	r2, [r4, #4]
   8316a:	f022 0203 	bic.w	r2, r2, #3
   8316e:	e75e      	b.n	8302e <_malloc_r+0x2da>
   83170:	f859 3908 	ldr.w	r3, [r9], #-8
   83174:	4599      	cmp	r9, r3
   83176:	f040 8086 	bne.w	83286 <_malloc_r+0x532>
   8317a:	f010 0f03 	tst.w	r0, #3
   8317e:	f100 30ff 	add.w	r0, r0, #4294967295
   83182:	d1f5      	bne.n	83170 <_malloc_r+0x41c>
   83184:	687b      	ldr	r3, [r7, #4]
   83186:	ea23 0304 	bic.w	r3, r3, r4
   8318a:	607b      	str	r3, [r7, #4]
   8318c:	0064      	lsls	r4, r4, #1
   8318e:	429c      	cmp	r4, r3
   83190:	f63f aec8 	bhi.w	82f24 <_malloc_r+0x1d0>
   83194:	2c00      	cmp	r4, #0
   83196:	f43f aec5 	beq.w	82f24 <_malloc_r+0x1d0>
   8319a:	421c      	tst	r4, r3
   8319c:	4640      	mov	r0, r8
   8319e:	f47f ae4c 	bne.w	82e3a <_malloc_r+0xe6>
   831a2:	0064      	lsls	r4, r4, #1
   831a4:	421c      	tst	r4, r3
   831a6:	f100 0004 	add.w	r0, r0, #4
   831aa:	d0fa      	beq.n	831a2 <_malloc_r+0x44e>
   831ac:	e645      	b.n	82e3a <_malloc_r+0xe6>
   831ae:	468c      	mov	ip, r1
   831b0:	e78c      	b.n	830cc <_malloc_r+0x378>
   831b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   831b6:	d815      	bhi.n	831e4 <_malloc_r+0x490>
   831b8:	0bf3      	lsrs	r3, r6, #15
   831ba:	f103 0078 	add.w	r0, r3, #120	; 0x78
   831be:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   831c2:	00c1      	lsls	r1, r0, #3
   831c4:	e5e8      	b.n	82d98 <_malloc_r+0x44>
   831c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   831ca:	e6ee      	b.n	82faa <_malloc_r+0x256>
   831cc:	2101      	movs	r1, #1
   831ce:	687b      	ldr	r3, [r7, #4]
   831d0:	1092      	asrs	r2, r2, #2
   831d2:	fa01 f202 	lsl.w	r2, r1, r2
   831d6:	431a      	orrs	r2, r3
   831d8:	607a      	str	r2, [r7, #4]
   831da:	4663      	mov	r3, ip
   831dc:	e779      	b.n	830d2 <_malloc_r+0x37e>
   831de:	2301      	movs	r3, #1
   831e0:	6053      	str	r3, [r2, #4]
   831e2:	e72a      	b.n	8303a <_malloc_r+0x2e6>
   831e4:	f240 5254 	movw	r2, #1364	; 0x554
   831e8:	4293      	cmp	r3, r2
   831ea:	d822      	bhi.n	83232 <_malloc_r+0x4de>
   831ec:	0cb3      	lsrs	r3, r6, #18
   831ee:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   831f2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   831f6:	00c1      	lsls	r1, r0, #3
   831f8:	e5ce      	b.n	82d98 <_malloc_r+0x44>
   831fa:	f103 0b10 	add.w	fp, r3, #16
   831fe:	e6af      	b.n	82f60 <_malloc_r+0x20c>
   83200:	2a54      	cmp	r2, #84	; 0x54
   83202:	d829      	bhi.n	83258 <_malloc_r+0x504>
   83204:	0b1a      	lsrs	r2, r3, #12
   83206:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   8320a:	00c9      	lsls	r1, r1, #3
   8320c:	326e      	adds	r2, #110	; 0x6e
   8320e:	e74d      	b.n	830ac <_malloc_r+0x358>
   83210:	4b20      	ldr	r3, [pc, #128]	; (83294 <_malloc_r+0x540>)
   83212:	6819      	ldr	r1, [r3, #0]
   83214:	4459      	add	r1, fp
   83216:	6019      	str	r1, [r3, #0]
   83218:	e6b3      	b.n	82f82 <_malloc_r+0x22e>
   8321a:	f3ca 000b 	ubfx	r0, sl, #0, #12
   8321e:	2800      	cmp	r0, #0
   83220:	f47f aeaf 	bne.w	82f82 <_malloc_r+0x22e>
   83224:	eb08 030b 	add.w	r3, r8, fp
   83228:	68ba      	ldr	r2, [r7, #8]
   8322a:	f043 0301 	orr.w	r3, r3, #1
   8322e:	6053      	str	r3, [r2, #4]
   83230:	e6ef      	b.n	83012 <_malloc_r+0x2be>
   83232:	207f      	movs	r0, #127	; 0x7f
   83234:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83238:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   8323c:	e5ac      	b.n	82d98 <_malloc_r+0x44>
   8323e:	f104 0108 	add.w	r1, r4, #8
   83242:	4628      	mov	r0, r5
   83244:	9300      	str	r3, [sp, #0]
   83246:	f7ff fa67 	bl	82718 <_free_r>
   8324a:	9b00      	ldr	r3, [sp, #0]
   8324c:	6819      	ldr	r1, [r3, #0]
   8324e:	e6e0      	b.n	83012 <_malloc_r+0x2be>
   83250:	2001      	movs	r0, #1
   83252:	f04f 0900 	mov.w	r9, #0
   83256:	e6bd      	b.n	82fd4 <_malloc_r+0x280>
   83258:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8325c:	d805      	bhi.n	8326a <_malloc_r+0x516>
   8325e:	0bda      	lsrs	r2, r3, #15
   83260:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83264:	00c9      	lsls	r1, r1, #3
   83266:	3277      	adds	r2, #119	; 0x77
   83268:	e720      	b.n	830ac <_malloc_r+0x358>
   8326a:	f240 5154 	movw	r1, #1364	; 0x554
   8326e:	428a      	cmp	r2, r1
   83270:	d805      	bhi.n	8327e <_malloc_r+0x52a>
   83272:	0c9a      	lsrs	r2, r3, #18
   83274:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83278:	00c9      	lsls	r1, r1, #3
   8327a:	327c      	adds	r2, #124	; 0x7c
   8327c:	e716      	b.n	830ac <_malloc_r+0x358>
   8327e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83282:	227e      	movs	r2, #126	; 0x7e
   83284:	e712      	b.n	830ac <_malloc_r+0x358>
   83286:	687b      	ldr	r3, [r7, #4]
   83288:	e780      	b.n	8318c <_malloc_r+0x438>
   8328a:	08f0      	lsrs	r0, r6, #3
   8328c:	f106 0308 	add.w	r3, r6, #8
   83290:	e60e      	b.n	82eb0 <_malloc_r+0x15c>
   83292:	bf00      	nop
   83294:	20070ca0 	.word	0x20070ca0

00083298 <__ascii_mbtowc>:
   83298:	b082      	sub	sp, #8
   8329a:	b149      	cbz	r1, 832b0 <__ascii_mbtowc+0x18>
   8329c:	b15a      	cbz	r2, 832b6 <__ascii_mbtowc+0x1e>
   8329e:	b16b      	cbz	r3, 832bc <__ascii_mbtowc+0x24>
   832a0:	7813      	ldrb	r3, [r2, #0]
   832a2:	600b      	str	r3, [r1, #0]
   832a4:	7812      	ldrb	r2, [r2, #0]
   832a6:	1c10      	adds	r0, r2, #0
   832a8:	bf18      	it	ne
   832aa:	2001      	movne	r0, #1
   832ac:	b002      	add	sp, #8
   832ae:	4770      	bx	lr
   832b0:	a901      	add	r1, sp, #4
   832b2:	2a00      	cmp	r2, #0
   832b4:	d1f3      	bne.n	8329e <__ascii_mbtowc+0x6>
   832b6:	4610      	mov	r0, r2
   832b8:	b002      	add	sp, #8
   832ba:	4770      	bx	lr
   832bc:	f06f 0001 	mvn.w	r0, #1
   832c0:	e7f4      	b.n	832ac <__ascii_mbtowc+0x14>
   832c2:	bf00      	nop

000832c4 <memchr>:
   832c4:	0783      	lsls	r3, r0, #30
   832c6:	b470      	push	{r4, r5, r6}
   832c8:	b2cd      	uxtb	r5, r1
   832ca:	d03d      	beq.n	83348 <memchr+0x84>
   832cc:	1e54      	subs	r4, r2, #1
   832ce:	b30a      	cbz	r2, 83314 <memchr+0x50>
   832d0:	7803      	ldrb	r3, [r0, #0]
   832d2:	42ab      	cmp	r3, r5
   832d4:	d01f      	beq.n	83316 <memchr+0x52>
   832d6:	1c43      	adds	r3, r0, #1
   832d8:	e005      	b.n	832e6 <memchr+0x22>
   832da:	f114 34ff 	adds.w	r4, r4, #4294967295
   832de:	d319      	bcc.n	83314 <memchr+0x50>
   832e0:	7802      	ldrb	r2, [r0, #0]
   832e2:	42aa      	cmp	r2, r5
   832e4:	d017      	beq.n	83316 <memchr+0x52>
   832e6:	f013 0f03 	tst.w	r3, #3
   832ea:	4618      	mov	r0, r3
   832ec:	f103 0301 	add.w	r3, r3, #1
   832f0:	d1f3      	bne.n	832da <memchr+0x16>
   832f2:	2c03      	cmp	r4, #3
   832f4:	d811      	bhi.n	8331a <memchr+0x56>
   832f6:	b34c      	cbz	r4, 8334c <memchr+0x88>
   832f8:	7803      	ldrb	r3, [r0, #0]
   832fa:	42ab      	cmp	r3, r5
   832fc:	d00b      	beq.n	83316 <memchr+0x52>
   832fe:	4404      	add	r4, r0
   83300:	1c43      	adds	r3, r0, #1
   83302:	e002      	b.n	8330a <memchr+0x46>
   83304:	7802      	ldrb	r2, [r0, #0]
   83306:	42aa      	cmp	r2, r5
   83308:	d005      	beq.n	83316 <memchr+0x52>
   8330a:	429c      	cmp	r4, r3
   8330c:	4618      	mov	r0, r3
   8330e:	f103 0301 	add.w	r3, r3, #1
   83312:	d1f7      	bne.n	83304 <memchr+0x40>
   83314:	2000      	movs	r0, #0
   83316:	bc70      	pop	{r4, r5, r6}
   83318:	4770      	bx	lr
   8331a:	0209      	lsls	r1, r1, #8
   8331c:	b289      	uxth	r1, r1
   8331e:	4329      	orrs	r1, r5
   83320:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83324:	6803      	ldr	r3, [r0, #0]
   83326:	4606      	mov	r6, r0
   83328:	404b      	eors	r3, r1
   8332a:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   8332e:	ea22 0303 	bic.w	r3, r2, r3
   83332:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83336:	f100 0004 	add.w	r0, r0, #4
   8333a:	d103      	bne.n	83344 <memchr+0x80>
   8333c:	3c04      	subs	r4, #4
   8333e:	2c03      	cmp	r4, #3
   83340:	d8f0      	bhi.n	83324 <memchr+0x60>
   83342:	e7d8      	b.n	832f6 <memchr+0x32>
   83344:	4630      	mov	r0, r6
   83346:	e7d7      	b.n	832f8 <memchr+0x34>
   83348:	4614      	mov	r4, r2
   8334a:	e7d2      	b.n	832f2 <memchr+0x2e>
   8334c:	4620      	mov	r0, r4
   8334e:	e7e2      	b.n	83316 <memchr+0x52>

00083350 <memmove>:
   83350:	4288      	cmp	r0, r1
   83352:	b5f0      	push	{r4, r5, r6, r7, lr}
   83354:	d90d      	bls.n	83372 <memmove+0x22>
   83356:	188b      	adds	r3, r1, r2
   83358:	4298      	cmp	r0, r3
   8335a:	d20a      	bcs.n	83372 <memmove+0x22>
   8335c:	1884      	adds	r4, r0, r2
   8335e:	2a00      	cmp	r2, #0
   83360:	d051      	beq.n	83406 <memmove+0xb6>
   83362:	4622      	mov	r2, r4
   83364:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83368:	4299      	cmp	r1, r3
   8336a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8336e:	d1f9      	bne.n	83364 <memmove+0x14>
   83370:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83372:	2a0f      	cmp	r2, #15
   83374:	d948      	bls.n	83408 <memmove+0xb8>
   83376:	ea41 0300 	orr.w	r3, r1, r0
   8337a:	079b      	lsls	r3, r3, #30
   8337c:	d146      	bne.n	8340c <memmove+0xbc>
   8337e:	4615      	mov	r5, r2
   83380:	f100 0410 	add.w	r4, r0, #16
   83384:	f101 0310 	add.w	r3, r1, #16
   83388:	f853 6c10 	ldr.w	r6, [r3, #-16]
   8338c:	3d10      	subs	r5, #16
   8338e:	f844 6c10 	str.w	r6, [r4, #-16]
   83392:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83396:	2d0f      	cmp	r5, #15
   83398:	f844 6c0c 	str.w	r6, [r4, #-12]
   8339c:	f853 6c08 	ldr.w	r6, [r3, #-8]
   833a0:	f104 0410 	add.w	r4, r4, #16
   833a4:	f844 6c18 	str.w	r6, [r4, #-24]
   833a8:	f853 6c04 	ldr.w	r6, [r3, #-4]
   833ac:	f103 0310 	add.w	r3, r3, #16
   833b0:	f844 6c14 	str.w	r6, [r4, #-20]
   833b4:	d8e8      	bhi.n	83388 <memmove+0x38>
   833b6:	f1a2 0310 	sub.w	r3, r2, #16
   833ba:	f023 030f 	bic.w	r3, r3, #15
   833be:	f002 0e0f 	and.w	lr, r2, #15
   833c2:	3310      	adds	r3, #16
   833c4:	f1be 0f03 	cmp.w	lr, #3
   833c8:	4419      	add	r1, r3
   833ca:	4403      	add	r3, r0
   833cc:	d921      	bls.n	83412 <memmove+0xc2>
   833ce:	460e      	mov	r6, r1
   833d0:	4674      	mov	r4, lr
   833d2:	1f1d      	subs	r5, r3, #4
   833d4:	f856 7b04 	ldr.w	r7, [r6], #4
   833d8:	3c04      	subs	r4, #4
   833da:	2c03      	cmp	r4, #3
   833dc:	f845 7f04 	str.w	r7, [r5, #4]!
   833e0:	d8f8      	bhi.n	833d4 <memmove+0x84>
   833e2:	f1ae 0404 	sub.w	r4, lr, #4
   833e6:	f024 0403 	bic.w	r4, r4, #3
   833ea:	3404      	adds	r4, #4
   833ec:	4421      	add	r1, r4
   833ee:	4423      	add	r3, r4
   833f0:	f002 0203 	and.w	r2, r2, #3
   833f4:	b162      	cbz	r2, 83410 <memmove+0xc0>
   833f6:	3b01      	subs	r3, #1
   833f8:	440a      	add	r2, r1
   833fa:	f811 4b01 	ldrb.w	r4, [r1], #1
   833fe:	428a      	cmp	r2, r1
   83400:	f803 4f01 	strb.w	r4, [r3, #1]!
   83404:	d1f9      	bne.n	833fa <memmove+0xaa>
   83406:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83408:	4603      	mov	r3, r0
   8340a:	e7f3      	b.n	833f4 <memmove+0xa4>
   8340c:	4603      	mov	r3, r0
   8340e:	e7f2      	b.n	833f6 <memmove+0xa6>
   83410:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83412:	4672      	mov	r2, lr
   83414:	e7ee      	b.n	833f4 <memmove+0xa4>
   83416:	bf00      	nop

00083418 <__malloc_lock>:
   83418:	4801      	ldr	r0, [pc, #4]	; (83420 <__malloc_lock+0x8>)
   8341a:	f7ff bc17 	b.w	82c4c <__retarget_lock_acquire_recursive>
   8341e:	bf00      	nop
   83420:	20070cf0 	.word	0x20070cf0

00083424 <__malloc_unlock>:
   83424:	4801      	ldr	r0, [pc, #4]	; (8342c <__malloc_unlock+0x8>)
   83426:	f7ff bc13 	b.w	82c50 <__retarget_lock_release_recursive>
   8342a:	bf00      	nop
   8342c:	20070cf0 	.word	0x20070cf0

00083430 <_realloc_r>:
   83430:	2900      	cmp	r1, #0
   83432:	f000 8094 	beq.w	8355e <_realloc_r+0x12e>
   83436:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8343a:	460c      	mov	r4, r1
   8343c:	4615      	mov	r5, r2
   8343e:	b083      	sub	sp, #12
   83440:	4680      	mov	r8, r0
   83442:	f105 060b 	add.w	r6, r5, #11
   83446:	f7ff ffe7 	bl	83418 <__malloc_lock>
   8344a:	f854 ec04 	ldr.w	lr, [r4, #-4]
   8344e:	2e16      	cmp	r6, #22
   83450:	f02e 0703 	bic.w	r7, lr, #3
   83454:	f1a4 0908 	sub.w	r9, r4, #8
   83458:	d83c      	bhi.n	834d4 <_realloc_r+0xa4>
   8345a:	2210      	movs	r2, #16
   8345c:	4616      	mov	r6, r2
   8345e:	42b5      	cmp	r5, r6
   83460:	d83d      	bhi.n	834de <_realloc_r+0xae>
   83462:	4297      	cmp	r7, r2
   83464:	da43      	bge.n	834ee <_realloc_r+0xbe>
   83466:	4bc6      	ldr	r3, [pc, #792]	; (83780 <_realloc_r+0x350>)
   83468:	eb09 0007 	add.w	r0, r9, r7
   8346c:	6899      	ldr	r1, [r3, #8]
   8346e:	4288      	cmp	r0, r1
   83470:	f000 80c3 	beq.w	835fa <_realloc_r+0x1ca>
   83474:	6843      	ldr	r3, [r0, #4]
   83476:	f023 0101 	bic.w	r1, r3, #1
   8347a:	4401      	add	r1, r0
   8347c:	6849      	ldr	r1, [r1, #4]
   8347e:	07c9      	lsls	r1, r1, #31
   83480:	d54d      	bpl.n	8351e <_realloc_r+0xee>
   83482:	f01e 0f01 	tst.w	lr, #1
   83486:	f000 809b 	beq.w	835c0 <_realloc_r+0x190>
   8348a:	4629      	mov	r1, r5
   8348c:	4640      	mov	r0, r8
   8348e:	f7ff fc61 	bl	82d54 <_malloc_r>
   83492:	4605      	mov	r5, r0
   83494:	2800      	cmp	r0, #0
   83496:	d03b      	beq.n	83510 <_realloc_r+0xe0>
   83498:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8349c:	f1a0 0208 	sub.w	r2, r0, #8
   834a0:	f023 0301 	bic.w	r3, r3, #1
   834a4:	444b      	add	r3, r9
   834a6:	429a      	cmp	r2, r3
   834a8:	f000 812b 	beq.w	83702 <_realloc_r+0x2d2>
   834ac:	1f3a      	subs	r2, r7, #4
   834ae:	2a24      	cmp	r2, #36	; 0x24
   834b0:	f200 8118 	bhi.w	836e4 <_realloc_r+0x2b4>
   834b4:	2a13      	cmp	r2, #19
   834b6:	f200 80eb 	bhi.w	83690 <_realloc_r+0x260>
   834ba:	4603      	mov	r3, r0
   834bc:	4622      	mov	r2, r4
   834be:	6811      	ldr	r1, [r2, #0]
   834c0:	6019      	str	r1, [r3, #0]
   834c2:	6851      	ldr	r1, [r2, #4]
   834c4:	6059      	str	r1, [r3, #4]
   834c6:	6892      	ldr	r2, [r2, #8]
   834c8:	609a      	str	r2, [r3, #8]
   834ca:	4621      	mov	r1, r4
   834cc:	4640      	mov	r0, r8
   834ce:	f7ff f923 	bl	82718 <_free_r>
   834d2:	e01d      	b.n	83510 <_realloc_r+0xe0>
   834d4:	f026 0607 	bic.w	r6, r6, #7
   834d8:	2e00      	cmp	r6, #0
   834da:	4632      	mov	r2, r6
   834dc:	dabf      	bge.n	8345e <_realloc_r+0x2e>
   834de:	2500      	movs	r5, #0
   834e0:	230c      	movs	r3, #12
   834e2:	4628      	mov	r0, r5
   834e4:	f8c8 3000 	str.w	r3, [r8]
   834e8:	b003      	add	sp, #12
   834ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   834ee:	4625      	mov	r5, r4
   834f0:	1bbb      	subs	r3, r7, r6
   834f2:	2b0f      	cmp	r3, #15
   834f4:	f8d9 2004 	ldr.w	r2, [r9, #4]
   834f8:	d81d      	bhi.n	83536 <_realloc_r+0x106>
   834fa:	f002 0201 	and.w	r2, r2, #1
   834fe:	433a      	orrs	r2, r7
   83500:	eb09 0107 	add.w	r1, r9, r7
   83504:	f8c9 2004 	str.w	r2, [r9, #4]
   83508:	684b      	ldr	r3, [r1, #4]
   8350a:	f043 0301 	orr.w	r3, r3, #1
   8350e:	604b      	str	r3, [r1, #4]
   83510:	4640      	mov	r0, r8
   83512:	f7ff ff87 	bl	83424 <__malloc_unlock>
   83516:	4628      	mov	r0, r5
   83518:	b003      	add	sp, #12
   8351a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8351e:	f023 0303 	bic.w	r3, r3, #3
   83522:	18f9      	adds	r1, r7, r3
   83524:	4291      	cmp	r1, r2
   83526:	db1d      	blt.n	83564 <_realloc_r+0x134>
   83528:	68c3      	ldr	r3, [r0, #12]
   8352a:	6882      	ldr	r2, [r0, #8]
   8352c:	4625      	mov	r5, r4
   8352e:	60d3      	str	r3, [r2, #12]
   83530:	460f      	mov	r7, r1
   83532:	609a      	str	r2, [r3, #8]
   83534:	e7dc      	b.n	834f0 <_realloc_r+0xc0>
   83536:	f002 0201 	and.w	r2, r2, #1
   8353a:	eb09 0106 	add.w	r1, r9, r6
   8353e:	f043 0301 	orr.w	r3, r3, #1
   83542:	4332      	orrs	r2, r6
   83544:	f8c9 2004 	str.w	r2, [r9, #4]
   83548:	444f      	add	r7, r9
   8354a:	604b      	str	r3, [r1, #4]
   8354c:	687b      	ldr	r3, [r7, #4]
   8354e:	3108      	adds	r1, #8
   83550:	f043 0301 	orr.w	r3, r3, #1
   83554:	607b      	str	r3, [r7, #4]
   83556:	4640      	mov	r0, r8
   83558:	f7ff f8de 	bl	82718 <_free_r>
   8355c:	e7d8      	b.n	83510 <_realloc_r+0xe0>
   8355e:	4611      	mov	r1, r2
   83560:	f7ff bbf8 	b.w	82d54 <_malloc_r>
   83564:	f01e 0f01 	tst.w	lr, #1
   83568:	d18f      	bne.n	8348a <_realloc_r+0x5a>
   8356a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8356e:	eba9 0a01 	sub.w	sl, r9, r1
   83572:	f8da 1004 	ldr.w	r1, [sl, #4]
   83576:	f021 0103 	bic.w	r1, r1, #3
   8357a:	440b      	add	r3, r1
   8357c:	443b      	add	r3, r7
   8357e:	4293      	cmp	r3, r2
   83580:	db26      	blt.n	835d0 <_realloc_r+0x1a0>
   83582:	4655      	mov	r5, sl
   83584:	68c1      	ldr	r1, [r0, #12]
   83586:	6880      	ldr	r0, [r0, #8]
   83588:	1f3a      	subs	r2, r7, #4
   8358a:	60c1      	str	r1, [r0, #12]
   8358c:	6088      	str	r0, [r1, #8]
   8358e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83592:	f8da 100c 	ldr.w	r1, [sl, #12]
   83596:	2a24      	cmp	r2, #36	; 0x24
   83598:	60c1      	str	r1, [r0, #12]
   8359a:	6088      	str	r0, [r1, #8]
   8359c:	d826      	bhi.n	835ec <_realloc_r+0x1bc>
   8359e:	2a13      	cmp	r2, #19
   835a0:	f240 8081 	bls.w	836a6 <_realloc_r+0x276>
   835a4:	6821      	ldr	r1, [r4, #0]
   835a6:	2a1b      	cmp	r2, #27
   835a8:	f8ca 1008 	str.w	r1, [sl, #8]
   835ac:	6861      	ldr	r1, [r4, #4]
   835ae:	f8ca 100c 	str.w	r1, [sl, #12]
   835b2:	f200 80ad 	bhi.w	83710 <_realloc_r+0x2e0>
   835b6:	f104 0008 	add.w	r0, r4, #8
   835ba:	f10a 0210 	add.w	r2, sl, #16
   835be:	e074      	b.n	836aa <_realloc_r+0x27a>
   835c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   835c4:	eba9 0a03 	sub.w	sl, r9, r3
   835c8:	f8da 1004 	ldr.w	r1, [sl, #4]
   835cc:	f021 0103 	bic.w	r1, r1, #3
   835d0:	187b      	adds	r3, r7, r1
   835d2:	4293      	cmp	r3, r2
   835d4:	f6ff af59 	blt.w	8348a <_realloc_r+0x5a>
   835d8:	4655      	mov	r5, sl
   835da:	f8da 100c 	ldr.w	r1, [sl, #12]
   835de:	f855 0f08 	ldr.w	r0, [r5, #8]!
   835e2:	1f3a      	subs	r2, r7, #4
   835e4:	2a24      	cmp	r2, #36	; 0x24
   835e6:	60c1      	str	r1, [r0, #12]
   835e8:	6088      	str	r0, [r1, #8]
   835ea:	d9d8      	bls.n	8359e <_realloc_r+0x16e>
   835ec:	4621      	mov	r1, r4
   835ee:	4628      	mov	r0, r5
   835f0:	461f      	mov	r7, r3
   835f2:	46d1      	mov	r9, sl
   835f4:	f7ff feac 	bl	83350 <memmove>
   835f8:	e77a      	b.n	834f0 <_realloc_r+0xc0>
   835fa:	6841      	ldr	r1, [r0, #4]
   835fc:	f106 0010 	add.w	r0, r6, #16
   83600:	f021 0b03 	bic.w	fp, r1, #3
   83604:	44bb      	add	fp, r7
   83606:	4583      	cmp	fp, r0
   83608:	da58      	bge.n	836bc <_realloc_r+0x28c>
   8360a:	f01e 0f01 	tst.w	lr, #1
   8360e:	f47f af3c 	bne.w	8348a <_realloc_r+0x5a>
   83612:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83616:	eba9 0a01 	sub.w	sl, r9, r1
   8361a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8361e:	f021 0103 	bic.w	r1, r1, #3
   83622:	448b      	add	fp, r1
   83624:	4558      	cmp	r0, fp
   83626:	dcd3      	bgt.n	835d0 <_realloc_r+0x1a0>
   83628:	4655      	mov	r5, sl
   8362a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8362e:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83632:	1f3a      	subs	r2, r7, #4
   83634:	2a24      	cmp	r2, #36	; 0x24
   83636:	60c1      	str	r1, [r0, #12]
   83638:	6088      	str	r0, [r1, #8]
   8363a:	f200 808d 	bhi.w	83758 <_realloc_r+0x328>
   8363e:	2a13      	cmp	r2, #19
   83640:	f240 8087 	bls.w	83752 <_realloc_r+0x322>
   83644:	6821      	ldr	r1, [r4, #0]
   83646:	2a1b      	cmp	r2, #27
   83648:	f8ca 1008 	str.w	r1, [sl, #8]
   8364c:	6861      	ldr	r1, [r4, #4]
   8364e:	f8ca 100c 	str.w	r1, [sl, #12]
   83652:	f200 8088 	bhi.w	83766 <_realloc_r+0x336>
   83656:	f104 0108 	add.w	r1, r4, #8
   8365a:	f10a 0210 	add.w	r2, sl, #16
   8365e:	6808      	ldr	r0, [r1, #0]
   83660:	6010      	str	r0, [r2, #0]
   83662:	6848      	ldr	r0, [r1, #4]
   83664:	6050      	str	r0, [r2, #4]
   83666:	6889      	ldr	r1, [r1, #8]
   83668:	6091      	str	r1, [r2, #8]
   8366a:	ebab 0206 	sub.w	r2, fp, r6
   8366e:	eb0a 0106 	add.w	r1, sl, r6
   83672:	f042 0201 	orr.w	r2, r2, #1
   83676:	6099      	str	r1, [r3, #8]
   83678:	604a      	str	r2, [r1, #4]
   8367a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8367e:	4640      	mov	r0, r8
   83680:	f003 0301 	and.w	r3, r3, #1
   83684:	431e      	orrs	r6, r3
   83686:	f8ca 6004 	str.w	r6, [sl, #4]
   8368a:	f7ff fecb 	bl	83424 <__malloc_unlock>
   8368e:	e742      	b.n	83516 <_realloc_r+0xe6>
   83690:	6823      	ldr	r3, [r4, #0]
   83692:	2a1b      	cmp	r2, #27
   83694:	6003      	str	r3, [r0, #0]
   83696:	6863      	ldr	r3, [r4, #4]
   83698:	6043      	str	r3, [r0, #4]
   8369a:	d827      	bhi.n	836ec <_realloc_r+0x2bc>
   8369c:	f100 0308 	add.w	r3, r0, #8
   836a0:	f104 0208 	add.w	r2, r4, #8
   836a4:	e70b      	b.n	834be <_realloc_r+0x8e>
   836a6:	4620      	mov	r0, r4
   836a8:	462a      	mov	r2, r5
   836aa:	6801      	ldr	r1, [r0, #0]
   836ac:	461f      	mov	r7, r3
   836ae:	6011      	str	r1, [r2, #0]
   836b0:	6841      	ldr	r1, [r0, #4]
   836b2:	46d1      	mov	r9, sl
   836b4:	6051      	str	r1, [r2, #4]
   836b6:	6883      	ldr	r3, [r0, #8]
   836b8:	6093      	str	r3, [r2, #8]
   836ba:	e719      	b.n	834f0 <_realloc_r+0xc0>
   836bc:	ebab 0b06 	sub.w	fp, fp, r6
   836c0:	eb09 0106 	add.w	r1, r9, r6
   836c4:	f04b 0201 	orr.w	r2, fp, #1
   836c8:	6099      	str	r1, [r3, #8]
   836ca:	604a      	str	r2, [r1, #4]
   836cc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   836d0:	4640      	mov	r0, r8
   836d2:	f003 0301 	and.w	r3, r3, #1
   836d6:	431e      	orrs	r6, r3
   836d8:	f844 6c04 	str.w	r6, [r4, #-4]
   836dc:	f7ff fea2 	bl	83424 <__malloc_unlock>
   836e0:	4625      	mov	r5, r4
   836e2:	e718      	b.n	83516 <_realloc_r+0xe6>
   836e4:	4621      	mov	r1, r4
   836e6:	f7ff fe33 	bl	83350 <memmove>
   836ea:	e6ee      	b.n	834ca <_realloc_r+0x9a>
   836ec:	68a3      	ldr	r3, [r4, #8]
   836ee:	2a24      	cmp	r2, #36	; 0x24
   836f0:	6083      	str	r3, [r0, #8]
   836f2:	68e3      	ldr	r3, [r4, #12]
   836f4:	60c3      	str	r3, [r0, #12]
   836f6:	d018      	beq.n	8372a <_realloc_r+0x2fa>
   836f8:	f100 0310 	add.w	r3, r0, #16
   836fc:	f104 0210 	add.w	r2, r4, #16
   83700:	e6dd      	b.n	834be <_realloc_r+0x8e>
   83702:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83706:	4625      	mov	r5, r4
   83708:	f023 0303 	bic.w	r3, r3, #3
   8370c:	441f      	add	r7, r3
   8370e:	e6ef      	b.n	834f0 <_realloc_r+0xc0>
   83710:	68a1      	ldr	r1, [r4, #8]
   83712:	2a24      	cmp	r2, #36	; 0x24
   83714:	f8ca 1010 	str.w	r1, [sl, #16]
   83718:	68e1      	ldr	r1, [r4, #12]
   8371a:	f8ca 1014 	str.w	r1, [sl, #20]
   8371e:	d00d      	beq.n	8373c <_realloc_r+0x30c>
   83720:	f104 0010 	add.w	r0, r4, #16
   83724:	f10a 0218 	add.w	r2, sl, #24
   83728:	e7bf      	b.n	836aa <_realloc_r+0x27a>
   8372a:	6922      	ldr	r2, [r4, #16]
   8372c:	f100 0318 	add.w	r3, r0, #24
   83730:	6102      	str	r2, [r0, #16]
   83732:	6961      	ldr	r1, [r4, #20]
   83734:	f104 0218 	add.w	r2, r4, #24
   83738:	6141      	str	r1, [r0, #20]
   8373a:	e6c0      	b.n	834be <_realloc_r+0x8e>
   8373c:	6922      	ldr	r2, [r4, #16]
   8373e:	f104 0018 	add.w	r0, r4, #24
   83742:	f8ca 2018 	str.w	r2, [sl, #24]
   83746:	6961      	ldr	r1, [r4, #20]
   83748:	f10a 0220 	add.w	r2, sl, #32
   8374c:	f8ca 101c 	str.w	r1, [sl, #28]
   83750:	e7ab      	b.n	836aa <_realloc_r+0x27a>
   83752:	4621      	mov	r1, r4
   83754:	462a      	mov	r2, r5
   83756:	e782      	b.n	8365e <_realloc_r+0x22e>
   83758:	4621      	mov	r1, r4
   8375a:	4628      	mov	r0, r5
   8375c:	9301      	str	r3, [sp, #4]
   8375e:	f7ff fdf7 	bl	83350 <memmove>
   83762:	9b01      	ldr	r3, [sp, #4]
   83764:	e781      	b.n	8366a <_realloc_r+0x23a>
   83766:	68a1      	ldr	r1, [r4, #8]
   83768:	2a24      	cmp	r2, #36	; 0x24
   8376a:	f8ca 1010 	str.w	r1, [sl, #16]
   8376e:	68e1      	ldr	r1, [r4, #12]
   83770:	f8ca 1014 	str.w	r1, [sl, #20]
   83774:	d006      	beq.n	83784 <_realloc_r+0x354>
   83776:	f104 0110 	add.w	r1, r4, #16
   8377a:	f10a 0218 	add.w	r2, sl, #24
   8377e:	e76e      	b.n	8365e <_realloc_r+0x22e>
   83780:	200706d8 	.word	0x200706d8
   83784:	6922      	ldr	r2, [r4, #16]
   83786:	f104 0118 	add.w	r1, r4, #24
   8378a:	f8ca 2018 	str.w	r2, [sl, #24]
   8378e:	6960      	ldr	r0, [r4, #20]
   83790:	f10a 0220 	add.w	r2, sl, #32
   83794:	f8ca 001c 	str.w	r0, [sl, #28]
   83798:	e761      	b.n	8365e <_realloc_r+0x22e>
   8379a:	bf00      	nop

0008379c <_sbrk_r>:
   8379c:	b538      	push	{r3, r4, r5, lr}
   8379e:	2300      	movs	r3, #0
   837a0:	4c06      	ldr	r4, [pc, #24]	; (837bc <_sbrk_r+0x20>)
   837a2:	4605      	mov	r5, r0
   837a4:	4608      	mov	r0, r1
   837a6:	6023      	str	r3, [r4, #0]
   837a8:	f7fd fc26 	bl	80ff8 <_sbrk>
   837ac:	1c43      	adds	r3, r0, #1
   837ae:	d000      	beq.n	837b2 <_sbrk_r+0x16>
   837b0:	bd38      	pop	{r3, r4, r5, pc}
   837b2:	6823      	ldr	r3, [r4, #0]
   837b4:	2b00      	cmp	r3, #0
   837b6:	d0fb      	beq.n	837b0 <_sbrk_r+0x14>
   837b8:	602b      	str	r3, [r5, #0]
   837ba:	bd38      	pop	{r3, r4, r5, pc}
   837bc:	20070d04 	.word	0x20070d04

000837c0 <__sread>:
   837c0:	b510      	push	{r4, lr}
   837c2:	460c      	mov	r4, r1
   837c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   837c8:	f000 f9f4 	bl	83bb4 <_read_r>
   837cc:	2800      	cmp	r0, #0
   837ce:	db03      	blt.n	837d8 <__sread+0x18>
   837d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   837d2:	4403      	add	r3, r0
   837d4:	6523      	str	r3, [r4, #80]	; 0x50
   837d6:	bd10      	pop	{r4, pc}
   837d8:	89a3      	ldrh	r3, [r4, #12]
   837da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   837de:	81a3      	strh	r3, [r4, #12]
   837e0:	bd10      	pop	{r4, pc}
   837e2:	bf00      	nop

000837e4 <__swrite>:
   837e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   837e8:	460c      	mov	r4, r1
   837ea:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   837ee:	461f      	mov	r7, r3
   837f0:	05cb      	lsls	r3, r1, #23
   837f2:	4616      	mov	r6, r2
   837f4:	4605      	mov	r5, r0
   837f6:	d507      	bpl.n	83808 <__swrite+0x24>
   837f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   837fc:	2302      	movs	r3, #2
   837fe:	2200      	movs	r2, #0
   83800:	f000 f9c2 	bl	83b88 <_lseek_r>
   83804:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83808:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8380c:	81a1      	strh	r1, [r4, #12]
   8380e:	463b      	mov	r3, r7
   83810:	4632      	mov	r2, r6
   83812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83816:	4628      	mov	r0, r5
   83818:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8381c:	f000 b8a2 	b.w	83964 <_write_r>

00083820 <__sseek>:
   83820:	b510      	push	{r4, lr}
   83822:	460c      	mov	r4, r1
   83824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83828:	f000 f9ae 	bl	83b88 <_lseek_r>
   8382c:	89a3      	ldrh	r3, [r4, #12]
   8382e:	1c42      	adds	r2, r0, #1
   83830:	bf0e      	itee	eq
   83832:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83836:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8383a:	6520      	strne	r0, [r4, #80]	; 0x50
   8383c:	81a3      	strh	r3, [r4, #12]
   8383e:	bd10      	pop	{r4, pc}

00083840 <__sclose>:
   83840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83844:	f000 b906 	b.w	83a54 <_close_r>

00083848 <__swbuf_r>:
   83848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8384a:	460d      	mov	r5, r1
   8384c:	4614      	mov	r4, r2
   8384e:	4606      	mov	r6, r0
   83850:	b110      	cbz	r0, 83858 <__swbuf_r+0x10>
   83852:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83854:	2b00      	cmp	r3, #0
   83856:	d04b      	beq.n	838f0 <__swbuf_r+0xa8>
   83858:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8385c:	69a3      	ldr	r3, [r4, #24]
   8385e:	b291      	uxth	r1, r2
   83860:	0708      	lsls	r0, r1, #28
   83862:	60a3      	str	r3, [r4, #8]
   83864:	d539      	bpl.n	838da <__swbuf_r+0x92>
   83866:	6923      	ldr	r3, [r4, #16]
   83868:	2b00      	cmp	r3, #0
   8386a:	d036      	beq.n	838da <__swbuf_r+0x92>
   8386c:	b2ed      	uxtb	r5, r5
   8386e:	0489      	lsls	r1, r1, #18
   83870:	462f      	mov	r7, r5
   83872:	d515      	bpl.n	838a0 <__swbuf_r+0x58>
   83874:	6822      	ldr	r2, [r4, #0]
   83876:	6961      	ldr	r1, [r4, #20]
   83878:	1ad3      	subs	r3, r2, r3
   8387a:	428b      	cmp	r3, r1
   8387c:	da1c      	bge.n	838b8 <__swbuf_r+0x70>
   8387e:	3301      	adds	r3, #1
   83880:	68a1      	ldr	r1, [r4, #8]
   83882:	1c50      	adds	r0, r2, #1
   83884:	3901      	subs	r1, #1
   83886:	60a1      	str	r1, [r4, #8]
   83888:	6020      	str	r0, [r4, #0]
   8388a:	7015      	strb	r5, [r2, #0]
   8388c:	6962      	ldr	r2, [r4, #20]
   8388e:	429a      	cmp	r2, r3
   83890:	d01a      	beq.n	838c8 <__swbuf_r+0x80>
   83892:	89a3      	ldrh	r3, [r4, #12]
   83894:	07db      	lsls	r3, r3, #31
   83896:	d501      	bpl.n	8389c <__swbuf_r+0x54>
   83898:	2d0a      	cmp	r5, #10
   8389a:	d015      	beq.n	838c8 <__swbuf_r+0x80>
   8389c:	4638      	mov	r0, r7
   8389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   838a0:	6e61      	ldr	r1, [r4, #100]	; 0x64
   838a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   838a6:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   838aa:	81a2      	strh	r2, [r4, #12]
   838ac:	6822      	ldr	r2, [r4, #0]
   838ae:	6661      	str	r1, [r4, #100]	; 0x64
   838b0:	6961      	ldr	r1, [r4, #20]
   838b2:	1ad3      	subs	r3, r2, r3
   838b4:	428b      	cmp	r3, r1
   838b6:	dbe2      	blt.n	8387e <__swbuf_r+0x36>
   838b8:	4621      	mov	r1, r4
   838ba:	4630      	mov	r0, r6
   838bc:	f7fe fdae 	bl	8241c <_fflush_r>
   838c0:	b940      	cbnz	r0, 838d4 <__swbuf_r+0x8c>
   838c2:	2301      	movs	r3, #1
   838c4:	6822      	ldr	r2, [r4, #0]
   838c6:	e7db      	b.n	83880 <__swbuf_r+0x38>
   838c8:	4621      	mov	r1, r4
   838ca:	4630      	mov	r0, r6
   838cc:	f7fe fda6 	bl	8241c <_fflush_r>
   838d0:	2800      	cmp	r0, #0
   838d2:	d0e3      	beq.n	8389c <__swbuf_r+0x54>
   838d4:	f04f 37ff 	mov.w	r7, #4294967295
   838d8:	e7e0      	b.n	8389c <__swbuf_r+0x54>
   838da:	4621      	mov	r1, r4
   838dc:	4630      	mov	r0, r6
   838de:	f7fe fc8d 	bl	821fc <__swsetup_r>
   838e2:	2800      	cmp	r0, #0
   838e4:	d1f6      	bne.n	838d4 <__swbuf_r+0x8c>
   838e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   838ea:	6923      	ldr	r3, [r4, #16]
   838ec:	b291      	uxth	r1, r2
   838ee:	e7bd      	b.n	8386c <__swbuf_r+0x24>
   838f0:	f7fe fdec 	bl	824cc <__sinit>
   838f4:	e7b0      	b.n	83858 <__swbuf_r+0x10>
   838f6:	bf00      	nop

000838f8 <_wcrtomb_r>:
   838f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   838fa:	4606      	mov	r6, r0
   838fc:	b085      	sub	sp, #20
   838fe:	461f      	mov	r7, r3
   83900:	b189      	cbz	r1, 83926 <_wcrtomb_r+0x2e>
   83902:	4c10      	ldr	r4, [pc, #64]	; (83944 <_wcrtomb_r+0x4c>)
   83904:	4d10      	ldr	r5, [pc, #64]	; (83948 <_wcrtomb_r+0x50>)
   83906:	6824      	ldr	r4, [r4, #0]
   83908:	6b64      	ldr	r4, [r4, #52]	; 0x34
   8390a:	2c00      	cmp	r4, #0
   8390c:	bf08      	it	eq
   8390e:	462c      	moveq	r4, r5
   83910:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83914:	47a0      	blx	r4
   83916:	1c43      	adds	r3, r0, #1
   83918:	d103      	bne.n	83922 <_wcrtomb_r+0x2a>
   8391a:	2200      	movs	r2, #0
   8391c:	238a      	movs	r3, #138	; 0x8a
   8391e:	603a      	str	r2, [r7, #0]
   83920:	6033      	str	r3, [r6, #0]
   83922:	b005      	add	sp, #20
   83924:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83926:	460c      	mov	r4, r1
   83928:	4a06      	ldr	r2, [pc, #24]	; (83944 <_wcrtomb_r+0x4c>)
   8392a:	4d07      	ldr	r5, [pc, #28]	; (83948 <_wcrtomb_r+0x50>)
   8392c:	6811      	ldr	r1, [r2, #0]
   8392e:	4622      	mov	r2, r4
   83930:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83932:	a901      	add	r1, sp, #4
   83934:	2c00      	cmp	r4, #0
   83936:	bf08      	it	eq
   83938:	462c      	moveq	r4, r5
   8393a:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8393e:	47a0      	blx	r4
   83940:	e7e9      	b.n	83916 <_wcrtomb_r+0x1e>
   83942:	bf00      	nop
   83944:	20070138 	.word	0x20070138
   83948:	2007056c 	.word	0x2007056c

0008394c <__ascii_wctomb>:
   8394c:	b119      	cbz	r1, 83956 <__ascii_wctomb+0xa>
   8394e:	2aff      	cmp	r2, #255	; 0xff
   83950:	d803      	bhi.n	8395a <__ascii_wctomb+0xe>
   83952:	700a      	strb	r2, [r1, #0]
   83954:	2101      	movs	r1, #1
   83956:	4608      	mov	r0, r1
   83958:	4770      	bx	lr
   8395a:	238a      	movs	r3, #138	; 0x8a
   8395c:	f04f 31ff 	mov.w	r1, #4294967295
   83960:	6003      	str	r3, [r0, #0]
   83962:	e7f8      	b.n	83956 <__ascii_wctomb+0xa>

00083964 <_write_r>:
   83964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83966:	460e      	mov	r6, r1
   83968:	2500      	movs	r5, #0
   8396a:	4c08      	ldr	r4, [pc, #32]	; (8398c <_write_r+0x28>)
   8396c:	4611      	mov	r1, r2
   8396e:	4607      	mov	r7, r0
   83970:	461a      	mov	r2, r3
   83972:	4630      	mov	r0, r6
   83974:	6025      	str	r5, [r4, #0]
   83976:	f7fc ff37 	bl	807e8 <_write>
   8397a:	1c43      	adds	r3, r0, #1
   8397c:	d000      	beq.n	83980 <_write_r+0x1c>
   8397e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83980:	6823      	ldr	r3, [r4, #0]
   83982:	2b00      	cmp	r3, #0
   83984:	d0fb      	beq.n	8397e <_write_r+0x1a>
   83986:	603b      	str	r3, [r7, #0]
   83988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8398a:	bf00      	nop
   8398c:	20070d04 	.word	0x20070d04

00083990 <__register_exitproc>:
   83990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83994:	4d2c      	ldr	r5, [pc, #176]	; (83a48 <__register_exitproc+0xb8>)
   83996:	4606      	mov	r6, r0
   83998:	6828      	ldr	r0, [r5, #0]
   8399a:	4698      	mov	r8, r3
   8399c:	460f      	mov	r7, r1
   8399e:	4691      	mov	r9, r2
   839a0:	f7ff f954 	bl	82c4c <__retarget_lock_acquire_recursive>
   839a4:	4b29      	ldr	r3, [pc, #164]	; (83a4c <__register_exitproc+0xbc>)
   839a6:	681c      	ldr	r4, [r3, #0]
   839a8:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   839ac:	2b00      	cmp	r3, #0
   839ae:	d03e      	beq.n	83a2e <__register_exitproc+0x9e>
   839b0:	685a      	ldr	r2, [r3, #4]
   839b2:	2a1f      	cmp	r2, #31
   839b4:	dc1c      	bgt.n	839f0 <__register_exitproc+0x60>
   839b6:	f102 0e01 	add.w	lr, r2, #1
   839ba:	b176      	cbz	r6, 839da <__register_exitproc+0x4a>
   839bc:	2101      	movs	r1, #1
   839be:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   839c2:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   839c6:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   839ca:	4091      	lsls	r1, r2
   839cc:	4308      	orrs	r0, r1
   839ce:	2e02      	cmp	r6, #2
   839d0:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   839d4:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   839d8:	d023      	beq.n	83a22 <__register_exitproc+0x92>
   839da:	3202      	adds	r2, #2
   839dc:	f8c3 e004 	str.w	lr, [r3, #4]
   839e0:	6828      	ldr	r0, [r5, #0]
   839e2:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   839e6:	f7ff f933 	bl	82c50 <__retarget_lock_release_recursive>
   839ea:	2000      	movs	r0, #0
   839ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   839f0:	4b17      	ldr	r3, [pc, #92]	; (83a50 <__register_exitproc+0xc0>)
   839f2:	b30b      	cbz	r3, 83a38 <__register_exitproc+0xa8>
   839f4:	f44f 70c8 	mov.w	r0, #400	; 0x190
   839f8:	f7ff f9a4 	bl	82d44 <malloc>
   839fc:	4603      	mov	r3, r0
   839fe:	b1d8      	cbz	r0, 83a38 <__register_exitproc+0xa8>
   83a00:	2000      	movs	r0, #0
   83a02:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83a06:	f04f 0e01 	mov.w	lr, #1
   83a0a:	6058      	str	r0, [r3, #4]
   83a0c:	6019      	str	r1, [r3, #0]
   83a0e:	4602      	mov	r2, r0
   83a10:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83a14:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83a18:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83a1c:	2e00      	cmp	r6, #0
   83a1e:	d0dc      	beq.n	839da <__register_exitproc+0x4a>
   83a20:	e7cc      	b.n	839bc <__register_exitproc+0x2c>
   83a22:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83a26:	4301      	orrs	r1, r0
   83a28:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83a2c:	e7d5      	b.n	839da <__register_exitproc+0x4a>
   83a2e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83a32:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83a36:	e7bb      	b.n	839b0 <__register_exitproc+0x20>
   83a38:	6828      	ldr	r0, [r5, #0]
   83a3a:	f7ff f909 	bl	82c50 <__retarget_lock_release_recursive>
   83a3e:	f04f 30ff 	mov.w	r0, #4294967295
   83a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83a46:	bf00      	nop
   83a48:	20070568 	.word	0x20070568
   83a4c:	00083f10 	.word	0x00083f10
   83a50:	00082d45 	.word	0x00082d45

00083a54 <_close_r>:
   83a54:	b538      	push	{r3, r4, r5, lr}
   83a56:	2300      	movs	r3, #0
   83a58:	4c06      	ldr	r4, [pc, #24]	; (83a74 <_close_r+0x20>)
   83a5a:	4605      	mov	r5, r0
   83a5c:	4608      	mov	r0, r1
   83a5e:	6023      	str	r3, [r4, #0]
   83a60:	f7fd fae6 	bl	81030 <_close>
   83a64:	1c43      	adds	r3, r0, #1
   83a66:	d000      	beq.n	83a6a <_close_r+0x16>
   83a68:	bd38      	pop	{r3, r4, r5, pc}
   83a6a:	6823      	ldr	r3, [r4, #0]
   83a6c:	2b00      	cmp	r3, #0
   83a6e:	d0fb      	beq.n	83a68 <_close_r+0x14>
   83a70:	602b      	str	r3, [r5, #0]
   83a72:	bd38      	pop	{r3, r4, r5, pc}
   83a74:	20070d04 	.word	0x20070d04

00083a78 <_fclose_r>:
   83a78:	b570      	push	{r4, r5, r6, lr}
   83a7a:	b159      	cbz	r1, 83a94 <_fclose_r+0x1c>
   83a7c:	4605      	mov	r5, r0
   83a7e:	460c      	mov	r4, r1
   83a80:	b110      	cbz	r0, 83a88 <_fclose_r+0x10>
   83a82:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83a84:	2b00      	cmp	r3, #0
   83a86:	d03c      	beq.n	83b02 <_fclose_r+0x8a>
   83a88:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83a8a:	07d8      	lsls	r0, r3, #31
   83a8c:	d505      	bpl.n	83a9a <_fclose_r+0x22>
   83a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a92:	b92b      	cbnz	r3, 83aa0 <_fclose_r+0x28>
   83a94:	2600      	movs	r6, #0
   83a96:	4630      	mov	r0, r6
   83a98:	bd70      	pop	{r4, r5, r6, pc}
   83a9a:	89a3      	ldrh	r3, [r4, #12]
   83a9c:	0599      	lsls	r1, r3, #22
   83a9e:	d53c      	bpl.n	83b1a <_fclose_r+0xa2>
   83aa0:	4621      	mov	r1, r4
   83aa2:	4628      	mov	r0, r5
   83aa4:	f7fe fc1e 	bl	822e4 <__sflush_r>
   83aa8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83aaa:	4606      	mov	r6, r0
   83aac:	b133      	cbz	r3, 83abc <_fclose_r+0x44>
   83aae:	69e1      	ldr	r1, [r4, #28]
   83ab0:	4628      	mov	r0, r5
   83ab2:	4798      	blx	r3
   83ab4:	2800      	cmp	r0, #0
   83ab6:	bfb8      	it	lt
   83ab8:	f04f 36ff 	movlt.w	r6, #4294967295
   83abc:	89a3      	ldrh	r3, [r4, #12]
   83abe:	061a      	lsls	r2, r3, #24
   83ac0:	d422      	bmi.n	83b08 <_fclose_r+0x90>
   83ac2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83ac4:	b141      	cbz	r1, 83ad8 <_fclose_r+0x60>
   83ac6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83aca:	4299      	cmp	r1, r3
   83acc:	d002      	beq.n	83ad4 <_fclose_r+0x5c>
   83ace:	4628      	mov	r0, r5
   83ad0:	f7fe fe22 	bl	82718 <_free_r>
   83ad4:	2300      	movs	r3, #0
   83ad6:	6323      	str	r3, [r4, #48]	; 0x30
   83ad8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83ada:	b121      	cbz	r1, 83ae6 <_fclose_r+0x6e>
   83adc:	4628      	mov	r0, r5
   83ade:	f7fe fe1b 	bl	82718 <_free_r>
   83ae2:	2300      	movs	r3, #0
   83ae4:	6463      	str	r3, [r4, #68]	; 0x44
   83ae6:	f7fe fd21 	bl	8252c <__sfp_lock_acquire>
   83aea:	2200      	movs	r2, #0
   83aec:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83aee:	81a2      	strh	r2, [r4, #12]
   83af0:	07db      	lsls	r3, r3, #31
   83af2:	d50e      	bpl.n	83b12 <_fclose_r+0x9a>
   83af4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83af6:	f7ff f8a7 	bl	82c48 <__retarget_lock_close_recursive>
   83afa:	f7fe fd1d 	bl	82538 <__sfp_lock_release>
   83afe:	4630      	mov	r0, r6
   83b00:	bd70      	pop	{r4, r5, r6, pc}
   83b02:	f7fe fce3 	bl	824cc <__sinit>
   83b06:	e7bf      	b.n	83a88 <_fclose_r+0x10>
   83b08:	6921      	ldr	r1, [r4, #16]
   83b0a:	4628      	mov	r0, r5
   83b0c:	f7fe fe04 	bl	82718 <_free_r>
   83b10:	e7d7      	b.n	83ac2 <_fclose_r+0x4a>
   83b12:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b14:	f7ff f89c 	bl	82c50 <__retarget_lock_release_recursive>
   83b18:	e7ec      	b.n	83af4 <_fclose_r+0x7c>
   83b1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b1c:	f7ff f896 	bl	82c4c <__retarget_lock_acquire_recursive>
   83b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83b24:	2b00      	cmp	r3, #0
   83b26:	d1bb      	bne.n	83aa0 <_fclose_r+0x28>
   83b28:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83b2a:	f016 0601 	ands.w	r6, r6, #1
   83b2e:	d1b1      	bne.n	83a94 <_fclose_r+0x1c>
   83b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83b32:	f7ff f88d 	bl	82c50 <__retarget_lock_release_recursive>
   83b36:	4630      	mov	r0, r6
   83b38:	bd70      	pop	{r4, r5, r6, pc}
   83b3a:	bf00      	nop

00083b3c <_fstat_r>:
   83b3c:	b570      	push	{r4, r5, r6, lr}
   83b3e:	460d      	mov	r5, r1
   83b40:	2300      	movs	r3, #0
   83b42:	4c07      	ldr	r4, [pc, #28]	; (83b60 <_fstat_r+0x24>)
   83b44:	4606      	mov	r6, r0
   83b46:	4611      	mov	r1, r2
   83b48:	4628      	mov	r0, r5
   83b4a:	6023      	str	r3, [r4, #0]
   83b4c:	f7fd fa73 	bl	81036 <_fstat>
   83b50:	1c43      	adds	r3, r0, #1
   83b52:	d000      	beq.n	83b56 <_fstat_r+0x1a>
   83b54:	bd70      	pop	{r4, r5, r6, pc}
   83b56:	6823      	ldr	r3, [r4, #0]
   83b58:	2b00      	cmp	r3, #0
   83b5a:	d0fb      	beq.n	83b54 <_fstat_r+0x18>
   83b5c:	6033      	str	r3, [r6, #0]
   83b5e:	bd70      	pop	{r4, r5, r6, pc}
   83b60:	20070d04 	.word	0x20070d04

00083b64 <_isatty_r>:
   83b64:	b538      	push	{r3, r4, r5, lr}
   83b66:	2300      	movs	r3, #0
   83b68:	4c06      	ldr	r4, [pc, #24]	; (83b84 <_isatty_r+0x20>)
   83b6a:	4605      	mov	r5, r0
   83b6c:	4608      	mov	r0, r1
   83b6e:	6023      	str	r3, [r4, #0]
   83b70:	f7fd fa66 	bl	81040 <_isatty>
   83b74:	1c43      	adds	r3, r0, #1
   83b76:	d000      	beq.n	83b7a <_isatty_r+0x16>
   83b78:	bd38      	pop	{r3, r4, r5, pc}
   83b7a:	6823      	ldr	r3, [r4, #0]
   83b7c:	2b00      	cmp	r3, #0
   83b7e:	d0fb      	beq.n	83b78 <_isatty_r+0x14>
   83b80:	602b      	str	r3, [r5, #0]
   83b82:	bd38      	pop	{r3, r4, r5, pc}
   83b84:	20070d04 	.word	0x20070d04

00083b88 <_lseek_r>:
   83b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b8a:	460e      	mov	r6, r1
   83b8c:	2500      	movs	r5, #0
   83b8e:	4c08      	ldr	r4, [pc, #32]	; (83bb0 <_lseek_r+0x28>)
   83b90:	4611      	mov	r1, r2
   83b92:	4607      	mov	r7, r0
   83b94:	461a      	mov	r2, r3
   83b96:	4630      	mov	r0, r6
   83b98:	6025      	str	r5, [r4, #0]
   83b9a:	f7fd fa53 	bl	81044 <_lseek>
   83b9e:	1c43      	adds	r3, r0, #1
   83ba0:	d000      	beq.n	83ba4 <_lseek_r+0x1c>
   83ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ba4:	6823      	ldr	r3, [r4, #0]
   83ba6:	2b00      	cmp	r3, #0
   83ba8:	d0fb      	beq.n	83ba2 <_lseek_r+0x1a>
   83baa:	603b      	str	r3, [r7, #0]
   83bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bae:	bf00      	nop
   83bb0:	20070d04 	.word	0x20070d04

00083bb4 <_read_r>:
   83bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83bb6:	460e      	mov	r6, r1
   83bb8:	2500      	movs	r5, #0
   83bba:	4c08      	ldr	r4, [pc, #32]	; (83bdc <_read_r+0x28>)
   83bbc:	4611      	mov	r1, r2
   83bbe:	4607      	mov	r7, r0
   83bc0:	461a      	mov	r2, r3
   83bc2:	4630      	mov	r0, r6
   83bc4:	6025      	str	r5, [r4, #0]
   83bc6:	f7fc fd0f 	bl	805e8 <_read>
   83bca:	1c43      	adds	r3, r0, #1
   83bcc:	d000      	beq.n	83bd0 <_read_r+0x1c>
   83bce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bd0:	6823      	ldr	r3, [r4, #0]
   83bd2:	2b00      	cmp	r3, #0
   83bd4:	d0fb      	beq.n	83bce <_read_r+0x1a>
   83bd6:	603b      	str	r3, [r7, #0]
   83bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bda:	bf00      	nop
   83bdc:	20070d04 	.word	0x20070d04

00083be0 <__aeabi_uldivmod>:
   83be0:	b953      	cbnz	r3, 83bf8 <__aeabi_uldivmod+0x18>
   83be2:	b94a      	cbnz	r2, 83bf8 <__aeabi_uldivmod+0x18>
   83be4:	2900      	cmp	r1, #0
   83be6:	bf08      	it	eq
   83be8:	2800      	cmpeq	r0, #0
   83bea:	bf1c      	itt	ne
   83bec:	f04f 31ff 	movne.w	r1, #4294967295
   83bf0:	f04f 30ff 	movne.w	r0, #4294967295
   83bf4:	f000 b97a 	b.w	83eec <__aeabi_idiv0>
   83bf8:	f1ad 0c08 	sub.w	ip, sp, #8
   83bfc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83c00:	f000 f806 	bl	83c10 <__udivmoddi4>
   83c04:	f8dd e004 	ldr.w	lr, [sp, #4]
   83c08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83c0c:	b004      	add	sp, #16
   83c0e:	4770      	bx	lr

00083c10 <__udivmoddi4>:
   83c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83c14:	468c      	mov	ip, r1
   83c16:	460e      	mov	r6, r1
   83c18:	4604      	mov	r4, r0
   83c1a:	9d08      	ldr	r5, [sp, #32]
   83c1c:	2b00      	cmp	r3, #0
   83c1e:	d150      	bne.n	83cc2 <__udivmoddi4+0xb2>
   83c20:	428a      	cmp	r2, r1
   83c22:	4617      	mov	r7, r2
   83c24:	d96c      	bls.n	83d00 <__udivmoddi4+0xf0>
   83c26:	fab2 fe82 	clz	lr, r2
   83c2a:	f1be 0f00 	cmp.w	lr, #0
   83c2e:	d00b      	beq.n	83c48 <__udivmoddi4+0x38>
   83c30:	f1ce 0c20 	rsb	ip, lr, #32
   83c34:	fa01 f60e 	lsl.w	r6, r1, lr
   83c38:	fa20 fc0c 	lsr.w	ip, r0, ip
   83c3c:	fa02 f70e 	lsl.w	r7, r2, lr
   83c40:	ea4c 0c06 	orr.w	ip, ip, r6
   83c44:	fa00 f40e 	lsl.w	r4, r0, lr
   83c48:	0c3a      	lsrs	r2, r7, #16
   83c4a:	fbbc f9f2 	udiv	r9, ip, r2
   83c4e:	b2bb      	uxth	r3, r7
   83c50:	fb02 cc19 	mls	ip, r2, r9, ip
   83c54:	fb09 fa03 	mul.w	sl, r9, r3
   83c58:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83c5c:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83c60:	45b2      	cmp	sl, r6
   83c62:	d90a      	bls.n	83c7a <__udivmoddi4+0x6a>
   83c64:	19f6      	adds	r6, r6, r7
   83c66:	f109 31ff 	add.w	r1, r9, #4294967295
   83c6a:	f080 8125 	bcs.w	83eb8 <__udivmoddi4+0x2a8>
   83c6e:	45b2      	cmp	sl, r6
   83c70:	f240 8122 	bls.w	83eb8 <__udivmoddi4+0x2a8>
   83c74:	f1a9 0902 	sub.w	r9, r9, #2
   83c78:	443e      	add	r6, r7
   83c7a:	eba6 060a 	sub.w	r6, r6, sl
   83c7e:	fbb6 f0f2 	udiv	r0, r6, r2
   83c82:	fb02 6610 	mls	r6, r2, r0, r6
   83c86:	fb00 f303 	mul.w	r3, r0, r3
   83c8a:	b2a4      	uxth	r4, r4
   83c8c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83c90:	42a3      	cmp	r3, r4
   83c92:	d909      	bls.n	83ca8 <__udivmoddi4+0x98>
   83c94:	19e4      	adds	r4, r4, r7
   83c96:	f100 32ff 	add.w	r2, r0, #4294967295
   83c9a:	f080 810b 	bcs.w	83eb4 <__udivmoddi4+0x2a4>
   83c9e:	42a3      	cmp	r3, r4
   83ca0:	f240 8108 	bls.w	83eb4 <__udivmoddi4+0x2a4>
   83ca4:	3802      	subs	r0, #2
   83ca6:	443c      	add	r4, r7
   83ca8:	2100      	movs	r1, #0
   83caa:	1ae4      	subs	r4, r4, r3
   83cac:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83cb0:	2d00      	cmp	r5, #0
   83cb2:	d062      	beq.n	83d7a <__udivmoddi4+0x16a>
   83cb4:	2300      	movs	r3, #0
   83cb6:	fa24 f40e 	lsr.w	r4, r4, lr
   83cba:	602c      	str	r4, [r5, #0]
   83cbc:	606b      	str	r3, [r5, #4]
   83cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83cc2:	428b      	cmp	r3, r1
   83cc4:	d907      	bls.n	83cd6 <__udivmoddi4+0xc6>
   83cc6:	2d00      	cmp	r5, #0
   83cc8:	d055      	beq.n	83d76 <__udivmoddi4+0x166>
   83cca:	2100      	movs	r1, #0
   83ccc:	e885 0041 	stmia.w	r5, {r0, r6}
   83cd0:	4608      	mov	r0, r1
   83cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83cd6:	fab3 f183 	clz	r1, r3
   83cda:	2900      	cmp	r1, #0
   83cdc:	f040 808f 	bne.w	83dfe <__udivmoddi4+0x1ee>
   83ce0:	42b3      	cmp	r3, r6
   83ce2:	d302      	bcc.n	83cea <__udivmoddi4+0xda>
   83ce4:	4282      	cmp	r2, r0
   83ce6:	f200 80fc 	bhi.w	83ee2 <__udivmoddi4+0x2d2>
   83cea:	1a84      	subs	r4, r0, r2
   83cec:	eb66 0603 	sbc.w	r6, r6, r3
   83cf0:	2001      	movs	r0, #1
   83cf2:	46b4      	mov	ip, r6
   83cf4:	2d00      	cmp	r5, #0
   83cf6:	d040      	beq.n	83d7a <__udivmoddi4+0x16a>
   83cf8:	e885 1010 	stmia.w	r5, {r4, ip}
   83cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d00:	b912      	cbnz	r2, 83d08 <__udivmoddi4+0xf8>
   83d02:	2701      	movs	r7, #1
   83d04:	fbb7 f7f2 	udiv	r7, r7, r2
   83d08:	fab7 fe87 	clz	lr, r7
   83d0c:	f1be 0f00 	cmp.w	lr, #0
   83d10:	d135      	bne.n	83d7e <__udivmoddi4+0x16e>
   83d12:	2101      	movs	r1, #1
   83d14:	1bf6      	subs	r6, r6, r7
   83d16:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83d1a:	fa1f f887 	uxth.w	r8, r7
   83d1e:	fbb6 f2fc 	udiv	r2, r6, ip
   83d22:	fb0c 6612 	mls	r6, ip, r2, r6
   83d26:	fb08 f002 	mul.w	r0, r8, r2
   83d2a:	0c23      	lsrs	r3, r4, #16
   83d2c:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83d30:	42b0      	cmp	r0, r6
   83d32:	d907      	bls.n	83d44 <__udivmoddi4+0x134>
   83d34:	19f6      	adds	r6, r6, r7
   83d36:	f102 33ff 	add.w	r3, r2, #4294967295
   83d3a:	d202      	bcs.n	83d42 <__udivmoddi4+0x132>
   83d3c:	42b0      	cmp	r0, r6
   83d3e:	f200 80d2 	bhi.w	83ee6 <__udivmoddi4+0x2d6>
   83d42:	461a      	mov	r2, r3
   83d44:	1a36      	subs	r6, r6, r0
   83d46:	fbb6 f0fc 	udiv	r0, r6, ip
   83d4a:	fb0c 6610 	mls	r6, ip, r0, r6
   83d4e:	fb08 f800 	mul.w	r8, r8, r0
   83d52:	b2a3      	uxth	r3, r4
   83d54:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83d58:	45a0      	cmp	r8, r4
   83d5a:	d907      	bls.n	83d6c <__udivmoddi4+0x15c>
   83d5c:	19e4      	adds	r4, r4, r7
   83d5e:	f100 33ff 	add.w	r3, r0, #4294967295
   83d62:	d202      	bcs.n	83d6a <__udivmoddi4+0x15a>
   83d64:	45a0      	cmp	r8, r4
   83d66:	f200 80b9 	bhi.w	83edc <__udivmoddi4+0x2cc>
   83d6a:	4618      	mov	r0, r3
   83d6c:	eba4 0408 	sub.w	r4, r4, r8
   83d70:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83d74:	e79c      	b.n	83cb0 <__udivmoddi4+0xa0>
   83d76:	4629      	mov	r1, r5
   83d78:	4628      	mov	r0, r5
   83d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83d7e:	fa07 f70e 	lsl.w	r7, r7, lr
   83d82:	f1ce 0320 	rsb	r3, lr, #32
   83d86:	fa26 f203 	lsr.w	r2, r6, r3
   83d8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83d8e:	fbb2 f1fc 	udiv	r1, r2, ip
   83d92:	fa1f f887 	uxth.w	r8, r7
   83d96:	fb0c 2211 	mls	r2, ip, r1, r2
   83d9a:	fa06 f60e 	lsl.w	r6, r6, lr
   83d9e:	fa20 f303 	lsr.w	r3, r0, r3
   83da2:	fb01 f908 	mul.w	r9, r1, r8
   83da6:	4333      	orrs	r3, r6
   83da8:	0c1e      	lsrs	r6, r3, #16
   83daa:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83dae:	45b1      	cmp	r9, r6
   83db0:	fa00 f40e 	lsl.w	r4, r0, lr
   83db4:	d909      	bls.n	83dca <__udivmoddi4+0x1ba>
   83db6:	19f6      	adds	r6, r6, r7
   83db8:	f101 32ff 	add.w	r2, r1, #4294967295
   83dbc:	f080 808c 	bcs.w	83ed8 <__udivmoddi4+0x2c8>
   83dc0:	45b1      	cmp	r9, r6
   83dc2:	f240 8089 	bls.w	83ed8 <__udivmoddi4+0x2c8>
   83dc6:	3902      	subs	r1, #2
   83dc8:	443e      	add	r6, r7
   83dca:	eba6 0609 	sub.w	r6, r6, r9
   83dce:	fbb6 f0fc 	udiv	r0, r6, ip
   83dd2:	fb0c 6210 	mls	r2, ip, r0, r6
   83dd6:	fb00 f908 	mul.w	r9, r0, r8
   83dda:	b29e      	uxth	r6, r3
   83ddc:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83de0:	45b1      	cmp	r9, r6
   83de2:	d907      	bls.n	83df4 <__udivmoddi4+0x1e4>
   83de4:	19f6      	adds	r6, r6, r7
   83de6:	f100 33ff 	add.w	r3, r0, #4294967295
   83dea:	d271      	bcs.n	83ed0 <__udivmoddi4+0x2c0>
   83dec:	45b1      	cmp	r9, r6
   83dee:	d96f      	bls.n	83ed0 <__udivmoddi4+0x2c0>
   83df0:	3802      	subs	r0, #2
   83df2:	443e      	add	r6, r7
   83df4:	eba6 0609 	sub.w	r6, r6, r9
   83df8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83dfc:	e78f      	b.n	83d1e <__udivmoddi4+0x10e>
   83dfe:	f1c1 0720 	rsb	r7, r1, #32
   83e02:	fa22 f807 	lsr.w	r8, r2, r7
   83e06:	408b      	lsls	r3, r1
   83e08:	ea48 0303 	orr.w	r3, r8, r3
   83e0c:	fa26 f407 	lsr.w	r4, r6, r7
   83e10:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83e14:	fbb4 f9fe 	udiv	r9, r4, lr
   83e18:	fa1f fc83 	uxth.w	ip, r3
   83e1c:	fb0e 4419 	mls	r4, lr, r9, r4
   83e20:	408e      	lsls	r6, r1
   83e22:	fa20 f807 	lsr.w	r8, r0, r7
   83e26:	fb09 fa0c 	mul.w	sl, r9, ip
   83e2a:	ea48 0806 	orr.w	r8, r8, r6
   83e2e:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83e32:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83e36:	45a2      	cmp	sl, r4
   83e38:	fa02 f201 	lsl.w	r2, r2, r1
   83e3c:	fa00 f601 	lsl.w	r6, r0, r1
   83e40:	d908      	bls.n	83e54 <__udivmoddi4+0x244>
   83e42:	18e4      	adds	r4, r4, r3
   83e44:	f109 30ff 	add.w	r0, r9, #4294967295
   83e48:	d244      	bcs.n	83ed4 <__udivmoddi4+0x2c4>
   83e4a:	45a2      	cmp	sl, r4
   83e4c:	d942      	bls.n	83ed4 <__udivmoddi4+0x2c4>
   83e4e:	f1a9 0902 	sub.w	r9, r9, #2
   83e52:	441c      	add	r4, r3
   83e54:	eba4 040a 	sub.w	r4, r4, sl
   83e58:	fbb4 f0fe 	udiv	r0, r4, lr
   83e5c:	fb0e 4410 	mls	r4, lr, r0, r4
   83e60:	fb00 fc0c 	mul.w	ip, r0, ip
   83e64:	fa1f f888 	uxth.w	r8, r8
   83e68:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83e6c:	45a4      	cmp	ip, r4
   83e6e:	d907      	bls.n	83e80 <__udivmoddi4+0x270>
   83e70:	18e4      	adds	r4, r4, r3
   83e72:	f100 3eff 	add.w	lr, r0, #4294967295
   83e76:	d229      	bcs.n	83ecc <__udivmoddi4+0x2bc>
   83e78:	45a4      	cmp	ip, r4
   83e7a:	d927      	bls.n	83ecc <__udivmoddi4+0x2bc>
   83e7c:	3802      	subs	r0, #2
   83e7e:	441c      	add	r4, r3
   83e80:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83e84:	fba0 8902 	umull	r8, r9, r0, r2
   83e88:	eba4 0c0c 	sub.w	ip, r4, ip
   83e8c:	45cc      	cmp	ip, r9
   83e8e:	46c2      	mov	sl, r8
   83e90:	46ce      	mov	lr, r9
   83e92:	d315      	bcc.n	83ec0 <__udivmoddi4+0x2b0>
   83e94:	d012      	beq.n	83ebc <__udivmoddi4+0x2ac>
   83e96:	b155      	cbz	r5, 83eae <__udivmoddi4+0x29e>
   83e98:	ebb6 030a 	subs.w	r3, r6, sl
   83e9c:	eb6c 060e 	sbc.w	r6, ip, lr
   83ea0:	fa06 f707 	lsl.w	r7, r6, r7
   83ea4:	40cb      	lsrs	r3, r1
   83ea6:	431f      	orrs	r7, r3
   83ea8:	40ce      	lsrs	r6, r1
   83eaa:	602f      	str	r7, [r5, #0]
   83eac:	606e      	str	r6, [r5, #4]
   83eae:	2100      	movs	r1, #0
   83eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83eb4:	4610      	mov	r0, r2
   83eb6:	e6f7      	b.n	83ca8 <__udivmoddi4+0x98>
   83eb8:	4689      	mov	r9, r1
   83eba:	e6de      	b.n	83c7a <__udivmoddi4+0x6a>
   83ebc:	4546      	cmp	r6, r8
   83ebe:	d2ea      	bcs.n	83e96 <__udivmoddi4+0x286>
   83ec0:	ebb8 0a02 	subs.w	sl, r8, r2
   83ec4:	eb69 0e03 	sbc.w	lr, r9, r3
   83ec8:	3801      	subs	r0, #1
   83eca:	e7e4      	b.n	83e96 <__udivmoddi4+0x286>
   83ecc:	4670      	mov	r0, lr
   83ece:	e7d7      	b.n	83e80 <__udivmoddi4+0x270>
   83ed0:	4618      	mov	r0, r3
   83ed2:	e78f      	b.n	83df4 <__udivmoddi4+0x1e4>
   83ed4:	4681      	mov	r9, r0
   83ed6:	e7bd      	b.n	83e54 <__udivmoddi4+0x244>
   83ed8:	4611      	mov	r1, r2
   83eda:	e776      	b.n	83dca <__udivmoddi4+0x1ba>
   83edc:	3802      	subs	r0, #2
   83ede:	443c      	add	r4, r7
   83ee0:	e744      	b.n	83d6c <__udivmoddi4+0x15c>
   83ee2:	4608      	mov	r0, r1
   83ee4:	e706      	b.n	83cf4 <__udivmoddi4+0xe4>
   83ee6:	3a02      	subs	r2, #2
   83ee8:	443e      	add	r6, r7
   83eea:	e72b      	b.n	83d44 <__udivmoddi4+0x134>

00083eec <__aeabi_idiv0>:
   83eec:	4770      	bx	lr
   83eee:	bf00      	nop
   83ef0:	736e6f43 	.word	0x736e6f43
   83ef4:	20656c6f 	.word	0x20656c6f
   83ef8:	64616572 	.word	0x64616572
   83efc:	00000a79 	.word	0x00000a79
   83f00:	3d3d3d3d 	.word	0x3d3d3d3d
   83f04:	3d3d3d3d 	.word	0x3d3d3d3d
   83f08:	3d3d3d3d 	.word	0x3d3d3d3d
   83f0c:	00000a3d 	.word	0x00000a3d

00083f10 <_global_impure_ptr>:
   83f10:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   83f20:	46454443 00000000 33323130 37363534     CDEF....01234567
   83f30:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83f40:	0000296c                                l)..

00083f44 <blanks.7217>:
   83f44:	20202020 20202020 20202020 20202020                     

00083f54 <zeroes.7218>:
   83f54:	30303030 30303030 30303030 30303030     0000000000000000
   83f64:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083f74 <_ctype_>:
   83f74:	20202000 20202020 28282020 20282828     .         ((((( 
   83f84:	20202020 20202020 20202020 20202020                     
   83f94:	10108820 10101010 10101010 10101010      ...............
   83fa4:	04040410 04040404 10040404 10101010     ................
   83fb4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83fc4:	01010101 01010101 01010101 10101010     ................
   83fd4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83fe4:	02020202 02020202 02020202 10101010     ................
   83ff4:	00000020 00000000 00000000 00000000      ...............
	...

00084078 <_init>:
   84078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8407a:	bf00      	nop
   8407c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8407e:	bc08      	pop	{r3}
   84080:	469e      	mov	lr, r3
   84082:	4770      	bx	lr

00084084 <__init_array_start>:
   84084:	000822c5 	.word	0x000822c5

00084088 <__frame_dummy_init_array_entry>:
   84088:	00080119                                ....

0008408c <_fini>:
   8408c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8408e:	bf00      	nop
   84090:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84092:	bc08      	pop	{r3}
   84094:	469e      	mov	lr, r3
   84096:	4770      	bx	lr

00084098 <__fini_array_start>:
   84098:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070134 	.word	0x20070134

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <g_interrupt_enabled>:
20070130:	00000001                                ....

20070134 <SystemCoreClock>:
20070134:	003d0900                                ..=.

20070138 <_impure_ptr>:
20070138:	20070140 00000000                       @.. ....

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	20070ce0                                ... 

2007056c <__global_locale>:
2007056c:	00000043 00000000 00000000 00000000     C...............
	...
2007058c:	00000043 00000000 00000000 00000000     C...............
	...
200705ac:	00000043 00000000 00000000 00000000     C...............
	...
200705cc:	00000043 00000000 00000000 00000000     C...............
	...
200705ec:	00000043 00000000 00000000 00000000     C...............
	...
2007060c:	00000043 00000000 00000000 00000000     C...............
	...
2007062c:	00000043 00000000 00000000 00000000     C...............
	...
2007064c:	0008394d 00083299 00000000 00083f74     M9...2......t?..
2007065c:	00083f70 00083f24 00083f24 00083f24     p?..$?..$?..$?..
2007066c:	00083f24 00083f24 00083f24 00083f24     $?..$?..$?..$?..
2007067c:	00083f24 00083f24 ffffffff ffffffff     $?..$?..........
2007068c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706b4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d8 <__malloc_av_>:
	...
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 

20070ae0 <__malloc_sbrk_base>:
20070ae0:	ffffffff                                ....

20070ae4 <__malloc_trim_threshold>:
20070ae4:	00020000                                ....

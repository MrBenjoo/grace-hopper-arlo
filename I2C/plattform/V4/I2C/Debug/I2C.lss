
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fd4  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00083fd4  00083fd4  00013fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000b08  20070000  00083fdc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001a8  20070b08  00084ae4  00020b08  2**2
                  ALLOC
  4 .stack        00002000  20070cb0  00084c8c  00020b08  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020b08  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b31  2**0
                  CONTENTS, READONLY
  7 .debug_info   00016d22  00000000  00000000  00020b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000036c6  00000000  00000000  000378ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00004dd9  00000000  00000000  0003af72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000af0  00000000  00000000  0003fd4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000a28  00000000  00000000  0004083b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00019f67  00000000  00000000  00041263  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00010a53  00000000  00000000  0005b1ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00064a6c  00000000  00000000  0006bc1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  000024fc  00000000  00000000  000d068c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b0 2c 07 20 45 0d 08 00 41 0d 08 00 41 0d 08 00     .,. E...A...A...
   80010:	41 0d 08 00 41 0d 08 00 41 0d 08 00 00 00 00 00     A...A...A.......
	...
   8002c:	41 0d 08 00 41 0d 08 00 00 00 00 00 41 0d 08 00     A...A.......A...
   8003c:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   8004c:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   8005c:	41 0d 08 00 41 0d 08 00 41 0d 08 00 00 00 00 00     A...A...A.......
   8006c:	b5 0b 08 00 c9 0b 08 00 dd 0b 08 00 f1 0b 08 00     ................
	...
   80084:	81 05 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     ....A...A...A...
   80094:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   800a4:	00 00 00 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     ....A...A...A...
   800b4:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   800c4:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   800d4:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...
   800e4:	41 0d 08 00 41 0d 08 00 41 0d 08 00 41 0d 08 00     A...A...A...A...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070b08 	.word	0x20070b08
   80110:	00000000 	.word	0x00000000
   80114:	00083fdc 	.word	0x00083fdc

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00083fdc 	.word	0x00083fdc
   80154:	20070b0c 	.word	0x20070b0c
   80158:	00083fdc 	.word	0x00083fdc
   8015c:	00000000 	.word	0x00000000

00080160 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80160:	b5f0      	push	{r4, r5, r6, r7, lr}
   80162:	b083      	sub	sp, #12
   80164:	4604      	mov	r4, r0
   80166:	460d      	mov	r5, r1
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b20      	ldr	r3, [pc, #128]	; (801f0 <usart_serial_getchar+0x90>)
   8016e:	4298      	cmp	r0, r3
   80170:	d00d      	beq.n	8018e <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80172:	4b20      	ldr	r3, [pc, #128]	; (801f4 <usart_serial_getchar+0x94>)
   80174:	4298      	cmp	r0, r3
   80176:	d012      	beq.n	8019e <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80178:	4b1f      	ldr	r3, [pc, #124]	; (801f8 <usart_serial_getchar+0x98>)
   8017a:	4298      	cmp	r0, r3
   8017c:	d019      	beq.n	801b2 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8017e:	4b1f      	ldr	r3, [pc, #124]	; (801fc <usart_serial_getchar+0x9c>)
   80180:	429c      	cmp	r4, r3
   80182:	d020      	beq.n	801c6 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80184:	4b1e      	ldr	r3, [pc, #120]	; (80200 <usart_serial_getchar+0xa0>)
   80186:	429c      	cmp	r4, r3
   80188:	d027      	beq.n	801da <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8018a:	b003      	add	sp, #12
   8018c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8018e:	461f      	mov	r7, r3
   80190:	4e1c      	ldr	r6, [pc, #112]	; (80204 <usart_serial_getchar+0xa4>)
   80192:	4629      	mov	r1, r5
   80194:	4638      	mov	r0, r7
   80196:	47b0      	blx	r6
   80198:	2800      	cmp	r0, #0
   8019a:	d1fa      	bne.n	80192 <usart_serial_getchar+0x32>
   8019c:	e7ef      	b.n	8017e <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8019e:	461f      	mov	r7, r3
   801a0:	4e19      	ldr	r6, [pc, #100]	; (80208 <usart_serial_getchar+0xa8>)
   801a2:	a901      	add	r1, sp, #4
   801a4:	4638      	mov	r0, r7
   801a6:	47b0      	blx	r6
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	702b      	strb	r3, [r5, #0]
   801b0:	e7e8      	b.n	80184 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   801b2:	461e      	mov	r6, r3
   801b4:	4c14      	ldr	r4, [pc, #80]	; (80208 <usart_serial_getchar+0xa8>)
   801b6:	a901      	add	r1, sp, #4
   801b8:	4630      	mov	r0, r6
   801ba:	47a0      	blx	r4
   801bc:	2800      	cmp	r0, #0
   801be:	d1fa      	bne.n	801b6 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   801c0:	9b01      	ldr	r3, [sp, #4]
   801c2:	702b      	strb	r3, [r5, #0]
   801c4:	e7e1      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801c6:	461e      	mov	r6, r3
   801c8:	4c0f      	ldr	r4, [pc, #60]	; (80208 <usart_serial_getchar+0xa8>)
   801ca:	a901      	add	r1, sp, #4
   801cc:	4630      	mov	r0, r6
   801ce:	47a0      	blx	r4
   801d0:	2800      	cmp	r0, #0
   801d2:	d1fa      	bne.n	801ca <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   801d4:	9b01      	ldr	r3, [sp, #4]
   801d6:	702b      	strb	r3, [r5, #0]
   801d8:	e7d7      	b.n	8018a <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   801da:	461e      	mov	r6, r3
   801dc:	4c0a      	ldr	r4, [pc, #40]	; (80208 <usart_serial_getchar+0xa8>)
   801de:	a901      	add	r1, sp, #4
   801e0:	4630      	mov	r0, r6
   801e2:	47a0      	blx	r4
   801e4:	2800      	cmp	r0, #0
   801e6:	d1fa      	bne.n	801de <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   801e8:	9b01      	ldr	r3, [sp, #4]
   801ea:	702b      	strb	r3, [r5, #0]
}
   801ec:	e7cd      	b.n	8018a <usart_serial_getchar+0x2a>
   801ee:	bf00      	nop
   801f0:	400e0800 	.word	0x400e0800
   801f4:	40098000 	.word	0x40098000
   801f8:	4009c000 	.word	0x4009c000
   801fc:	400a0000 	.word	0x400a0000
   80200:	400a4000 	.word	0x400a4000
   80204:	00080843 	.word	0x00080843
   80208:	00080569 	.word	0x00080569

0008020c <usart_serial_putchar>:
{
   8020c:	b570      	push	{r4, r5, r6, lr}
   8020e:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80210:	4b1e      	ldr	r3, [pc, #120]	; (8028c <usart_serial_putchar+0x80>)
   80212:	4298      	cmp	r0, r3
   80214:	d00d      	beq.n	80232 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80216:	4b1e      	ldr	r3, [pc, #120]	; (80290 <usart_serial_putchar+0x84>)
   80218:	4298      	cmp	r0, r3
   8021a:	d013      	beq.n	80244 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   8021c:	4b1d      	ldr	r3, [pc, #116]	; (80294 <usart_serial_putchar+0x88>)
   8021e:	4298      	cmp	r0, r3
   80220:	d019      	beq.n	80256 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80222:	4b1d      	ldr	r3, [pc, #116]	; (80298 <usart_serial_putchar+0x8c>)
   80224:	4298      	cmp	r0, r3
   80226:	d01f      	beq.n	80268 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80228:	4b1c      	ldr	r3, [pc, #112]	; (8029c <usart_serial_putchar+0x90>)
   8022a:	4298      	cmp	r0, r3
   8022c:	d025      	beq.n	8027a <usart_serial_putchar+0x6e>
	return 0;
   8022e:	2000      	movs	r0, #0
}
   80230:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80232:	461e      	mov	r6, r3
   80234:	4d1a      	ldr	r5, [pc, #104]	; (802a0 <usart_serial_putchar+0x94>)
   80236:	4621      	mov	r1, r4
   80238:	4630      	mov	r0, r6
   8023a:	47a8      	blx	r5
   8023c:	2800      	cmp	r0, #0
   8023e:	d1fa      	bne.n	80236 <usart_serial_putchar+0x2a>
		return 1;
   80240:	2001      	movs	r0, #1
   80242:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80244:	461e      	mov	r6, r3
   80246:	4d17      	ldr	r5, [pc, #92]	; (802a4 <usart_serial_putchar+0x98>)
   80248:	4621      	mov	r1, r4
   8024a:	4630      	mov	r0, r6
   8024c:	47a8      	blx	r5
   8024e:	2800      	cmp	r0, #0
   80250:	d1fa      	bne.n	80248 <usart_serial_putchar+0x3c>
		return 1;
   80252:	2001      	movs	r0, #1
   80254:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80256:	461e      	mov	r6, r3
   80258:	4d12      	ldr	r5, [pc, #72]	; (802a4 <usart_serial_putchar+0x98>)
   8025a:	4621      	mov	r1, r4
   8025c:	4630      	mov	r0, r6
   8025e:	47a8      	blx	r5
   80260:	2800      	cmp	r0, #0
   80262:	d1fa      	bne.n	8025a <usart_serial_putchar+0x4e>
		return 1;
   80264:	2001      	movs	r0, #1
   80266:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80268:	461e      	mov	r6, r3
   8026a:	4d0e      	ldr	r5, [pc, #56]	; (802a4 <usart_serial_putchar+0x98>)
   8026c:	4621      	mov	r1, r4
   8026e:	4630      	mov	r0, r6
   80270:	47a8      	blx	r5
   80272:	2800      	cmp	r0, #0
   80274:	d1fa      	bne.n	8026c <usart_serial_putchar+0x60>
		return 1;
   80276:	2001      	movs	r0, #1
   80278:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8027a:	461e      	mov	r6, r3
   8027c:	4d09      	ldr	r5, [pc, #36]	; (802a4 <usart_serial_putchar+0x98>)
   8027e:	4621      	mov	r1, r4
   80280:	4630      	mov	r0, r6
   80282:	47a8      	blx	r5
   80284:	2800      	cmp	r0, #0
   80286:	d1fa      	bne.n	8027e <usart_serial_putchar+0x72>
		return 1;
   80288:	2001      	movs	r0, #1
   8028a:	bd70      	pop	{r4, r5, r6, pc}
   8028c:	400e0800 	.word	0x400e0800
   80290:	40098000 	.word	0x40098000
   80294:	4009c000 	.word	0x4009c000
   80298:	400a0000 	.word	0x400a0000
   8029c:	400a4000 	.word	0x400a4000
   802a0:	00080833 	.word	0x00080833
   802a4:	00080555 	.word	0x00080555

000802a8 <console_init>:
{
	
}

int console_init(void)
{
   802a8:	b530      	push	{r4, r5, lr}
   802aa:	b085      	sub	sp, #20
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   802ac:	2008      	movs	r0, #8
   802ae:	4d15      	ldr	r5, [pc, #84]	; (80304 <console_init+0x5c>)
   802b0:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   802b2:	4c15      	ldr	r4, [pc, #84]	; (80308 <console_init+0x60>)
   802b4:	4b15      	ldr	r3, [pc, #84]	; (8030c <console_init+0x64>)
   802b6:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   802b8:	4a15      	ldr	r2, [pc, #84]	; (80310 <console_init+0x68>)
   802ba:	4b16      	ldr	r3, [pc, #88]	; (80314 <console_init+0x6c>)
   802bc:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   802be:	4a16      	ldr	r2, [pc, #88]	; (80318 <console_init+0x70>)
   802c0:	4b16      	ldr	r3, [pc, #88]	; (8031c <console_init+0x74>)
   802c2:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   802c4:	4b16      	ldr	r3, [pc, #88]	; (80320 <console_init+0x78>)
   802c6:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   802c8:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   802cc:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   802ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
   802d2:	9303      	str	r3, [sp, #12]
   802d4:	2008      	movs	r0, #8
   802d6:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   802d8:	a901      	add	r1, sp, #4
   802da:	4620      	mov	r0, r4
   802dc:	4b11      	ldr	r3, [pc, #68]	; (80324 <console_init+0x7c>)
   802de:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   802e0:	4d11      	ldr	r5, [pc, #68]	; (80328 <console_init+0x80>)
   802e2:	682b      	ldr	r3, [r5, #0]
   802e4:	2100      	movs	r1, #0
   802e6:	6898      	ldr	r0, [r3, #8]
   802e8:	4c10      	ldr	r4, [pc, #64]	; (8032c <console_init+0x84>)
   802ea:	47a0      	blx	r4
	setbuf(stdin, NULL);
   802ec:	682b      	ldr	r3, [r5, #0]
   802ee:	2100      	movs	r1, #0
   802f0:	6858      	ldr	r0, [r3, #4]
   802f2:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   802f4:	480e      	ldr	r0, [pc, #56]	; (80330 <console_init+0x88>)
   802f6:	4c0f      	ldr	r4, [pc, #60]	; (80334 <console_init+0x8c>)
   802f8:	47a0      	blx	r4
	printf("=============\n");
   802fa:	480f      	ldr	r0, [pc, #60]	; (80338 <console_init+0x90>)
   802fc:	47a0      	blx	r4
	return 0;
   802fe:	2000      	movs	r0, #0
   80300:	b005      	add	sp, #20
   80302:	bd30      	pop	{r4, r5, pc}
   80304:	00080ced 	.word	0x00080ced
   80308:	400e0800 	.word	0x400e0800
   8030c:	20070c84 	.word	0x20070c84
   80310:	0008020d 	.word	0x0008020d
   80314:	20070c80 	.word	0x20070c80
   80318:	00080161 	.word	0x00080161
   8031c:	20070c7c 	.word	0x20070c7c
   80320:	0501bd00 	.word	0x0501bd00
   80324:	000807fd 	.word	0x000807fd
   80328:	2007015c 	.word	0x2007015c
   8032c:	0008108d 	.word	0x0008108d
   80330:	00083df8 	.word	0x00083df8
   80334:	00080fc9 	.word	0x00080fc9
   80338:	00083e08 	.word	0x00083e08

0008033c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8033c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80340:	b980      	cbnz	r0, 80364 <_read+0x28>
   80342:	460c      	mov	r4, r1
   80344:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80346:	2a00      	cmp	r2, #0
   80348:	dd0f      	ble.n	8036a <_read+0x2e>
   8034a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8034c:	4e08      	ldr	r6, [pc, #32]	; (80370 <_read+0x34>)
   8034e:	4d09      	ldr	r5, [pc, #36]	; (80374 <_read+0x38>)
   80350:	6830      	ldr	r0, [r6, #0]
   80352:	4621      	mov	r1, r4
   80354:	682b      	ldr	r3, [r5, #0]
   80356:	4798      	blx	r3
		ptr++;
   80358:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8035a:	42bc      	cmp	r4, r7
   8035c:	d1f8      	bne.n	80350 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8035e:	4640      	mov	r0, r8
   80360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80364:	f04f 38ff 	mov.w	r8, #4294967295
   80368:	e7f9      	b.n	8035e <_read+0x22>
	for (; len > 0; --len) {
   8036a:	4680      	mov	r8, r0
   8036c:	e7f7      	b.n	8035e <_read+0x22>
   8036e:	bf00      	nop
   80370:	20070c84 	.word	0x20070c84
   80374:	20070c7c 	.word	0x20070c7c

00080378 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80378:	4b2a      	ldr	r3, [pc, #168]	; (80424 <twi_set_speed+0xac>)
   8037a:	4299      	cmp	r1, r3
   8037c:	d849      	bhi.n	80412 <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   8037e:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   80382:	4299      	cmp	r1, r3
   80384:	d92b      	bls.n	803de <twi_set_speed+0x66>
{
   80386:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80388:	4c27      	ldr	r4, [pc, #156]	; (80428 <twi_set_speed+0xb0>)
   8038a:	fba4 3402 	umull	r3, r4, r4, r2
   8038e:	0ba4      	lsrs	r4, r4, #14
   80390:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80392:	4b26      	ldr	r3, [pc, #152]	; (8042c <twi_set_speed+0xb4>)
   80394:	440b      	add	r3, r1
   80396:	009b      	lsls	r3, r3, #2
   80398:	fbb2 f2f3 	udiv	r2, r2, r3
   8039c:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8039e:	2cff      	cmp	r4, #255	; 0xff
   803a0:	d939      	bls.n	80416 <twi_set_speed+0x9e>
   803a2:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   803a4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   803a6:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803a8:	2cff      	cmp	r4, #255	; 0xff
   803aa:	d90d      	bls.n	803c8 <twi_set_speed+0x50>
   803ac:	2907      	cmp	r1, #7
   803ae:	d1f9      	bne.n	803a4 <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   803b0:	0213      	lsls	r3, r2, #8
   803b2:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   803b4:	0409      	lsls	r1, r1, #16
   803b6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   803ba:	430b      	orrs	r3, r1
   803bc:	b2e4      	uxtb	r4, r4
   803be:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   803c0:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   803c2:	2000      	movs	r0, #0
}
   803c4:	bc10      	pop	{r4}
   803c6:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803c8:	2aff      	cmp	r2, #255	; 0xff
   803ca:	d9f1      	bls.n	803b0 <twi_set_speed+0x38>
   803cc:	2906      	cmp	r1, #6
   803ce:	d8ef      	bhi.n	803b0 <twi_set_speed+0x38>
			ckdiv++;
   803d0:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   803d2:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803d4:	2aff      	cmp	r2, #255	; 0xff
   803d6:	d9eb      	bls.n	803b0 <twi_set_speed+0x38>
   803d8:	2906      	cmp	r1, #6
   803da:	d9f9      	bls.n	803d0 <twi_set_speed+0x58>
   803dc:	e7e8      	b.n	803b0 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   803de:	0049      	lsls	r1, r1, #1
   803e0:	fbb2 f2f1 	udiv	r2, r2, r1
   803e4:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803e6:	2aff      	cmp	r2, #255	; 0xff
   803e8:	d911      	bls.n	8040e <twi_set_speed+0x96>
   803ea:	2300      	movs	r3, #0
			ckdiv++;
   803ec:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   803ee:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   803f0:	2aff      	cmp	r2, #255	; 0xff
   803f2:	d901      	bls.n	803f8 <twi_set_speed+0x80>
   803f4:	2b07      	cmp	r3, #7
   803f6:	d1f9      	bne.n	803ec <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   803f8:	0211      	lsls	r1, r2, #8
   803fa:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   803fc:	041b      	lsls	r3, r3, #16
   803fe:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   80402:	430b      	orrs	r3, r1
   80404:	b2d2      	uxtb	r2, r2
   80406:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   80408:	6102      	str	r2, [r0, #16]
	return PASS;
   8040a:	2000      	movs	r0, #0
   8040c:	4770      	bx	lr
	uint32_t ckdiv = 0;
   8040e:	2300      	movs	r3, #0
   80410:	e7f2      	b.n	803f8 <twi_set_speed+0x80>
		return FAIL;
   80412:	2001      	movs	r0, #1
   80414:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80416:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   80418:	bf88      	it	hi
   8041a:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8041c:	d8d8      	bhi.n	803d0 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   8041e:	2100      	movs	r1, #0
   80420:	e7c6      	b.n	803b0 <twi_set_speed+0x38>
   80422:	bf00      	nop
   80424:	00061a80 	.word	0x00061a80
   80428:	057619f1 	.word	0x057619f1
   8042c:	3ffd1200 	.word	0x3ffd1200

00080430 <twi_master_init>:
{
   80430:	b538      	push	{r3, r4, r5, lr}
   80432:	4604      	mov	r4, r0
   80434:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   80436:	f04f 33ff 	mov.w	r3, #4294967295
   8043a:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   8043c:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8043e:	2380      	movs	r3, #128	; 0x80
   80440:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   80442:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   80444:	2308      	movs	r3, #8
   80446:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80448:	2320      	movs	r3, #32
   8044a:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   8044c:	2304      	movs	r3, #4
   8044e:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80450:	680a      	ldr	r2, [r1, #0]
   80452:	6849      	ldr	r1, [r1, #4]
   80454:	4b05      	ldr	r3, [pc, #20]	; (8046c <twi_master_init+0x3c>)
   80456:	4798      	blx	r3
   80458:	2801      	cmp	r0, #1
   8045a:	bf14      	ite	ne
   8045c:	2000      	movne	r0, #0
   8045e:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   80460:	7a6b      	ldrb	r3, [r5, #9]
   80462:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   80464:	bf04      	itt	eq
   80466:	2340      	moveq	r3, #64	; 0x40
   80468:	6023      	streq	r3, [r4, #0]
}
   8046a:	bd38      	pop	{r3, r4, r5, pc}
   8046c:	00080379 	.word	0x00080379

00080470 <twi_mk_addr>:
	if (len == 0)
   80470:	460a      	mov	r2, r1
   80472:	b159      	cbz	r1, 8048c <twi_mk_addr+0x1c>
	val = addr[0];
   80474:	7803      	ldrb	r3, [r0, #0]
	if (len > 1) {
   80476:	2901      	cmp	r1, #1
		val |= addr[1];
   80478:	bfc4      	itt	gt
   8047a:	7841      	ldrbgt	r1, [r0, #1]
   8047c:	ea41 2303 	orrgt.w	r3, r1, r3, lsl #8
	if (len > 2) {
   80480:	2a02      	cmp	r2, #2
   80482:	dd04      	ble.n	8048e <twi_mk_addr+0x1e>
		val |= addr[2];
   80484:	7882      	ldrb	r2, [r0, #2]
   80486:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   8048a:	e000      	b.n	8048e <twi_mk_addr+0x1e>
		return 0;
   8048c:	2300      	movs	r3, #0
}
   8048e:	4618      	mov	r0, r3
   80490:	4770      	bx	lr
	...

00080494 <twi_master_read>:
{
   80494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t cnt = p_packet->length;
   80496:	68cc      	ldr	r4, [r1, #12]
	if (cnt == 0) {
   80498:	2c00      	cmp	r4, #0
   8049a:	d04f      	beq.n	8053c <twi_master_read+0xa8>
   8049c:	460b      	mov	r3, r1
   8049e:	4605      	mov	r5, r0
	uint8_t *buffer = p_packet->buffer;
   804a0:	688e      	ldr	r6, [r1, #8]
	p_twi->TWI_MMR = 0;
   804a2:	2000      	movs	r0, #0
   804a4:	6068      	str	r0, [r5, #4]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   804a6:	684a      	ldr	r2, [r1, #4]
   804a8:	0212      	lsls	r2, r2, #8
   804aa:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   804ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   804b2:	7c09      	ldrb	r1, [r1, #16]
   804b4:	0409      	lsls	r1, r1, #16
   804b6:	f401 01fe 	and.w	r1, r1, #8323072	; 0x7f0000
   804ba:	430a      	orrs	r2, r1
   804bc:	606a      	str	r2, [r5, #4]
	p_twi->TWI_IADR = 0;
   804be:	60e8      	str	r0, [r5, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   804c0:	6859      	ldr	r1, [r3, #4]
   804c2:	4618      	mov	r0, r3
   804c4:	4b22      	ldr	r3, [pc, #136]	; (80550 <twi_master_read+0xbc>)
   804c6:	4798      	blx	r3
   804c8:	60e8      	str	r0, [r5, #12]
	if (cnt == 1) {
   804ca:	2c01      	cmp	r4, #1
   804cc:	d00f      	beq.n	804ee <twi_master_read+0x5a>
		p_twi->TWI_CR = TWI_CR_START;
   804ce:	2301      	movs	r3, #1
   804d0:	602b      	str	r3, [r5, #0]
		stop_sent = 0;
   804d2:	2000      	movs	r0, #0
		status = p_twi->TWI_SR;
   804d4:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   804d6:	f413 7f80 	tst.w	r3, #256	; 0x100
   804da:	d136      	bne.n	8054a <twi_master_read+0xb6>
   804dc:	f247 512f 	movw	r1, #29999	; 0x752f
		timeout = TWI_TIMEOUT;
   804e0:	f247 5730 	movw	r7, #30000	; 0x7530
		if (!(status & TWI_SR_RXRDY)) {
   804e4:	f04f 0e01 	mov.w	lr, #1
			p_twi->TWI_CR = TWI_CR_STOP;
   804e8:	f04f 0c02 	mov.w	ip, #2
   804ec:	e019      	b.n	80522 <twi_master_read+0x8e>
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   804ee:	2303      	movs	r3, #3
   804f0:	602b      	str	r3, [r5, #0]
		stop_sent = 1;
   804f2:	2001      	movs	r0, #1
   804f4:	e7ee      	b.n	804d4 <twi_master_read+0x40>
		if (!(status & TWI_SR_RXRDY)) {
   804f6:	460a      	mov	r2, r1
   804f8:	4670      	mov	r0, lr
   804fa:	e00c      	b.n	80516 <twi_master_read+0x82>
		if (cnt == 1  && !stop_sent) {
   804fc:	b908      	cbnz	r0, 80502 <twi_master_read+0x6e>
			p_twi->TWI_CR = TWI_CR_STOP;
   804fe:	f8c5 c000 	str.w	ip, [r5]
		if (!(status & TWI_SR_RXRDY)) {
   80502:	f013 0f02 	tst.w	r3, #2
   80506:	d0f6      	beq.n	804f6 <twi_master_read+0x62>
   80508:	4670      	mov	r0, lr
		*buffer++ = p_twi->TWI_RHR;
   8050a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8050c:	7033      	strb	r3, [r6, #0]
		cnt--;
   8050e:	3c01      	subs	r4, #1
		*buffer++ = p_twi->TWI_RHR;
   80510:	3601      	adds	r6, #1
		timeout = TWI_TIMEOUT;
   80512:	463a      	mov	r2, r7
	while (cnt > 0) {
   80514:	b164      	cbz	r4, 80530 <twi_master_read+0x9c>
		status = p_twi->TWI_SR;
   80516:	6a2b      	ldr	r3, [r5, #32]
		if (status & TWI_SR_NACK) {
   80518:	f413 7f80 	tst.w	r3, #256	; 0x100
   8051c:	d111      	bne.n	80542 <twi_master_read+0xae>
		if (!timeout--) {
   8051e:	1e51      	subs	r1, r2, #1
   80520:	b18a      	cbz	r2, 80546 <twi_master_read+0xb2>
		if (cnt == 1  && !stop_sent) {
   80522:	2c01      	cmp	r4, #1
   80524:	d0ea      	beq.n	804fc <twi_master_read+0x68>
		if (!(status & TWI_SR_RXRDY)) {
   80526:	f013 0f02 	tst.w	r3, #2
   8052a:	d1ee      	bne.n	8050a <twi_master_read+0x76>
   8052c:	460a      	mov	r2, r1
   8052e:	e7f1      	b.n	80514 <twi_master_read+0x80>
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   80530:	6a2b      	ldr	r3, [r5, #32]
   80532:	f013 0f01 	tst.w	r3, #1
   80536:	d0fb      	beq.n	80530 <twi_master_read+0x9c>
	p_twi->TWI_SR;
   80538:	6a2b      	ldr	r3, [r5, #32]
	return TWI_SUCCESS;
   8053a:	e000      	b.n	8053e <twi_master_read+0xaa>
		return TWI_INVALID_ARGUMENT;
   8053c:	2401      	movs	r4, #1
}
   8053e:	4620      	mov	r0, r4
   80540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return TWI_RECEIVE_NACK;
   80542:	2405      	movs	r4, #5
   80544:	e7fb      	b.n	8053e <twi_master_read+0xaa>
			return TWI_ERROR_TIMEOUT;
   80546:	2409      	movs	r4, #9
   80548:	e7f9      	b.n	8053e <twi_master_read+0xaa>
			return TWI_RECEIVE_NACK;
   8054a:	2405      	movs	r4, #5
   8054c:	e7f7      	b.n	8053e <twi_master_read+0xaa>
   8054e:	bf00      	nop
   80550:	00080471 	.word	0x00080471

00080554 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80554:	6943      	ldr	r3, [r0, #20]
   80556:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8055a:	bf1d      	ittte	ne
   8055c:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80560:	61c1      	strne	r1, [r0, #28]
	return 0;
   80562:	2000      	movne	r0, #0
		return 1;
   80564:	2001      	moveq	r0, #1
}
   80566:	4770      	bx	lr

00080568 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80568:	6943      	ldr	r3, [r0, #20]
   8056a:	f013 0f01 	tst.w	r3, #1
   8056e:	d005      	beq.n	8057c <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80570:	6983      	ldr	r3, [r0, #24]
   80572:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80576:	600b      	str	r3, [r1, #0]

	return 0;
   80578:	2000      	movs	r0, #0
   8057a:	4770      	bx	lr
		return 1;
   8057c:	2001      	movs	r0, #1
}
   8057e:	4770      	bx	lr

00080580 <USART0_Handler>:
#if SAMD || SAMR21 || SAML21 || SAMR30
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80580:	b500      	push	{lr}
   80582:	b083      	sub	sp, #12
#if SAMD || SAMR21 || SAML21 || SAMR30
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#elif SAM4E || SAM4S
	usart_serial_read_packet((Usart *)USART_HOST, &temp, 1);
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
   80584:	2201      	movs	r2, #1
   80586:	f10d 0107 	add.w	r1, sp, #7
   8058a:	4810      	ldr	r0, [pc, #64]	; (805cc <USART0_Handler+0x4c>)
   8058c:	4b10      	ldr	r3, [pc, #64]	; (805d0 <USART0_Handler+0x50>)
   8058e:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
   80590:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   80592:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   80596:	2200      	movs	r2, #0
   80598:	4b0e      	ldr	r3, [pc, #56]	; (805d4 <USART0_Handler+0x54>)
   8059a:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8059c:	4b0e      	ldr	r3, [pc, #56]	; (805d8 <USART0_Handler+0x58>)
   8059e:	781b      	ldrb	r3, [r3, #0]
   805a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   805a4:	4a0d      	ldr	r2, [pc, #52]	; (805dc <USART0_Handler+0x5c>)
   805a6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   805a8:	2b9b      	cmp	r3, #155	; 0x9b
   805aa:	d00b      	beq.n	805c4 <USART0_Handler+0x44>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
   805ac:	3301      	adds	r3, #1
   805ae:	4a0a      	ldr	r2, [pc, #40]	; (805d8 <USART0_Handler+0x58>)
   805b0:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   805b2:	2201      	movs	r2, #1
   805b4:	4b07      	ldr	r3, [pc, #28]	; (805d4 <USART0_Handler+0x54>)
   805b6:	701a      	strb	r2, [r3, #0]
   805b8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   805bc:	b662      	cpsie	i
}
   805be:	b003      	add	sp, #12
   805c0:	f85d fb04 	ldr.w	pc, [sp], #4
		serial_rx_buf_tail = 0x00;
   805c4:	2200      	movs	r2, #0
   805c6:	4b04      	ldr	r3, [pc, #16]	; (805d8 <USART0_Handler+0x58>)
   805c8:	701a      	strb	r2, [r3, #0]
   805ca:	e7f2      	b.n	805b2 <USART0_Handler+0x32>
   805cc:	40098000 	.word	0x40098000
   805d0:	00080735 	.word	0x00080735
   805d4:	20070154 	.word	0x20070154
   805d8:	20070bc0 	.word	0x20070bc0
   805dc:	20070b24 	.word	0x20070b24

000805e0 <init_twi>:

/*
 *	Setup due as the master
 */
uint8_t init_twi(void)
{
   805e0:	b500      	push	{lr}
   805e2:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_SPEED;
   805e4:	4b0d      	ldr	r3, [pc, #52]	; (8061c <init_twi+0x3c>)
   805e6:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   805e8:	4b0d      	ldr	r3, [pc, #52]	; (80620 <init_twi+0x40>)
   805ea:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   805ec:	2300      	movs	r3, #0
   805ee:	f88d 300d 	strb.w	r3, [sp, #13]
   805f2:	2017      	movs	r0, #23
   805f4:	4b0b      	ldr	r3, [pc, #44]	; (80624 <init_twi+0x44>)
   805f6:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   805f8:	a901      	add	r1, sp, #4
   805fa:	480b      	ldr	r0, [pc, #44]	; (80628 <init_twi+0x48>)
   805fc:	4b0b      	ldr	r3, [pc, #44]	; (8062c <init_twi+0x4c>)
   805fe:	4798      	blx	r3
	if(twi_master_setup(TWI_PORT, &opt) == TWI_SUCCESS) 
   80600:	b130      	cbz	r0, 80610 <init_twi+0x30>
		printf("MASTER SETUP OK\n");
		return 1;
	}
	else
	{
		printf("MASTER SETUP NOT OK\n");
   80602:	480b      	ldr	r0, [pc, #44]	; (80630 <init_twi+0x50>)
   80604:	4b0b      	ldr	r3, [pc, #44]	; (80634 <init_twi+0x54>)
   80606:	4798      	blx	r3
		return 0;
   80608:	2000      	movs	r0, #0
	}
		
}
   8060a:	b005      	add	sp, #20
   8060c:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("MASTER SETUP OK\n");
   80610:	4809      	ldr	r0, [pc, #36]	; (80638 <init_twi+0x58>)
   80612:	4b08      	ldr	r3, [pc, #32]	; (80634 <init_twi+0x54>)
   80614:	4798      	blx	r3
		return 1;
   80616:	2001      	movs	r0, #1
   80618:	e7f7      	b.n	8060a <init_twi+0x2a>
   8061a:	bf00      	nop
   8061c:	000186a0 	.word	0x000186a0
   80620:	0501bd00 	.word	0x0501bd00
   80624:	00080ced 	.word	0x00080ced
   80628:	40090000 	.word	0x40090000
   8062c:	00080431 	.word	0x00080431
   80630:	00083e2c 	.word	0x00083e2c
   80634:	00080fc9 	.word	0x00080fc9
   80638:	00083e18 	.word	0x00083e18

0008063c <twi_read>:
	else
		return !TWI_SUCCESS;
}

uint8_t twi_read(uint8_t rec_data[], uint8_t data_length, twi_packet_t packet_rec)
{
   8063c:	b082      	sub	sp, #8
   8063e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80640:	4605      	mov	r5, r0
   80642:	460e      	mov	r6, r1
   80644:	a906      	add	r1, sp, #24
   80646:	e881 000c 	stmia.w	r1, {r2, r3}
	if(twi_master_read(TWI_PORT, &packet_rec) == TWI_SUCCESS)
   8064a:	480c      	ldr	r0, [pc, #48]	; (8067c <twi_read+0x40>)
   8064c:	4b0c      	ldr	r3, [pc, #48]	; (80680 <twi_read+0x44>)
   8064e:	4798      	blx	r3
   80650:	b978      	cbnz	r0, 80672 <twi_read+0x36>
	{
		for(int i = 0; i < data_length; i++)
   80652:	b186      	cbz	r6, 80676 <twi_read+0x3a>
   80654:	462c      	mov	r4, r5
   80656:	4435      	add	r5, r6
			printf("%i\n", rec_data[i]);
   80658:	4f0a      	ldr	r7, [pc, #40]	; (80684 <twi_read+0x48>)
   8065a:	4e0b      	ldr	r6, [pc, #44]	; (80688 <twi_read+0x4c>)
   8065c:	f814 1b01 	ldrb.w	r1, [r4], #1
   80660:	4638      	mov	r0, r7
   80662:	47b0      	blx	r6
		for(int i = 0; i < data_length; i++)
   80664:	42a5      	cmp	r5, r4
   80666:	d1f9      	bne.n	8065c <twi_read+0x20>
		return DATA_READ;
   80668:	2001      	movs	r0, #1
	}
	else
		return DATA_NOT_READ;
}
   8066a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8066e:	b002      	add	sp, #8
   80670:	4770      	bx	lr
		return DATA_NOT_READ;
   80672:	2000      	movs	r0, #0
   80674:	e7f9      	b.n	8066a <twi_read+0x2e>
		return DATA_READ;
   80676:	2001      	movs	r0, #1
   80678:	e7f7      	b.n	8066a <twi_read+0x2e>
   8067a:	bf00      	nop
   8067c:	40090000 	.word	0x40090000
   80680:	00080495 	.word	0x00080495
   80684:	00083e44 	.word	0x00083e44
   80688:	00080fc9 	.word	0x00080fc9

0008068c <read_package>:
{
   8068c:	b510      	push	{r4, lr}
   8068e:	b084      	sub	sp, #16
	if (slave == TWI_SLAVE_ADR_PAB)
   80690:	2808      	cmp	r0, #8
   80692:	d004      	beq.n	8069e <read_package+0x12>
	else if (slave == TWI_SLAVE_ADR_POS)
   80694:	2810      	cmp	r0, #16
   80696:	d00e      	beq.n	806b6 <read_package+0x2a>
		return !TWI_SUCCESS;
   80698:	2001      	movs	r0, #1
}
   8069a:	b004      	add	sp, #16
   8069c:	bd10      	pop	{r4, pc}
		return twi_read(rec_data_pab, TWI_DATA_REC_LENGTH_PA, packet_rec_pab);
   8069e:	4b0c      	ldr	r3, [pc, #48]	; (806d0 <read_package+0x44>)
   806a0:	f103 0208 	add.w	r2, r3, #8
   806a4:	ca07      	ldmia	r2, {r0, r1, r2}
   806a6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   806aa:	cb0c      	ldmia	r3, {r2, r3}
   806ac:	2101      	movs	r1, #1
   806ae:	4809      	ldr	r0, [pc, #36]	; (806d4 <read_package+0x48>)
   806b0:	4c09      	ldr	r4, [pc, #36]	; (806d8 <read_package+0x4c>)
   806b2:	47a0      	blx	r4
   806b4:	e7f1      	b.n	8069a <read_package+0xe>
		return twi_read(rec_data_pos, TWI_DATA_REC_LENGTH_POS, packet_rec_pos);
   806b6:	4b09      	ldr	r3, [pc, #36]	; (806dc <read_package+0x50>)
   806b8:	f103 0208 	add.w	r2, r3, #8
   806bc:	ca07      	ldmia	r2, {r0, r1, r2}
   806be:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
   806c2:	cb0c      	ldmia	r3, {r2, r3}
   806c4:	210a      	movs	r1, #10
   806c6:	4806      	ldr	r0, [pc, #24]	; (806e0 <read_package+0x54>)
   806c8:	4c03      	ldr	r4, [pc, #12]	; (806d8 <read_package+0x4c>)
   806ca:	47a0      	blx	r4
   806cc:	e7e5      	b.n	8069a <read_package+0xe>
   806ce:	bf00      	nop
   806d0:	2007012c 	.word	0x2007012c
   806d4:	20070bc4 	.word	0x20070bc4
   806d8:	0008063d 	.word	0x0008063d
   806dc:	20070140 	.word	0x20070140
   806e0:	20070bc8 	.word	0x20070bc8

000806e4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   806e4:	3801      	subs	r0, #1
   806e6:	2802      	cmp	r0, #2
   806e8:	d815      	bhi.n	80716 <_write+0x32>
{
   806ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   806ee:	460e      	mov	r6, r1
   806f0:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   806f2:	b19a      	cbz	r2, 8071c <_write+0x38>
   806f4:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   806f6:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80730 <_write+0x4c>
   806fa:	4f0c      	ldr	r7, [pc, #48]	; (8072c <_write+0x48>)
   806fc:	f8d8 0000 	ldr.w	r0, [r8]
   80700:	f815 1b01 	ldrb.w	r1, [r5], #1
   80704:	683b      	ldr	r3, [r7, #0]
   80706:	4798      	blx	r3
   80708:	2800      	cmp	r0, #0
   8070a:	db0a      	blt.n	80722 <_write+0x3e>
   8070c:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8070e:	3c01      	subs	r4, #1
   80710:	d1f4      	bne.n	806fc <_write+0x18>
   80712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80716:	f04f 30ff 	mov.w	r0, #4294967295
   8071a:	4770      	bx	lr
	for (; len != 0; --len) {
   8071c:	4610      	mov	r0, r2
   8071e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80722:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8072a:	bf00      	nop
   8072c:	20070c80 	.word	0x20070c80
   80730:	20070c84 	.word	0x20070c84

00080734 <usart_serial_read_packet>:
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
	while (len) {
   80734:	2a00      	cmp	r2, #0
   80736:	d051      	beq.n	807dc <usart_serial_read_packet+0xa8>
{
   80738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8073c:	b083      	sub	sp, #12
   8073e:	4605      	mov	r5, r0
   80740:	460c      	mov	r4, r1
   80742:	4692      	mov	sl, r2
   80744:	448a      	add	sl, r1
	if (UART == (Uart*)p_usart) {
   80746:	4f26      	ldr	r7, [pc, #152]	; (807e0 <usart_serial_read_packet+0xac>)
		while (uart_read((Uart*)p_usart, data));
   80748:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 807f4 <usart_serial_read_packet+0xc0>
	if (USART3 == p_usart) {
   8074c:	4e25      	ldr	r6, [pc, #148]	; (807e4 <usart_serial_read_packet+0xb0>)
   8074e:	e01d      	b.n	8078c <usart_serial_read_packet+0x58>
		while (uart_read((Uart*)p_usart, data));
   80750:	4621      	mov	r1, r4
   80752:	4638      	mov	r0, r7
   80754:	47c8      	blx	r9
   80756:	2800      	cmp	r0, #0
   80758:	d1fa      	bne.n	80750 <usart_serial_read_packet+0x1c>
   8075a:	e021      	b.n	807a0 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   8075c:	469b      	mov	fp, r3
   8075e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 807f8 <usart_serial_read_packet+0xc4>
   80762:	a901      	add	r1, sp, #4
   80764:	4658      	mov	r0, fp
   80766:	47c0      	blx	r8
   80768:	2800      	cmp	r0, #0
   8076a:	d1fa      	bne.n	80762 <usart_serial_read_packet+0x2e>
		*data = (uint8_t)(val & 0xFF);
   8076c:	9b01      	ldr	r3, [sp, #4]
   8076e:	7023      	strb	r3, [r4, #0]
   80770:	e019      	b.n	807a6 <usart_serial_read_packet+0x72>
		while (usart_read(p_usart, &val));
   80772:	469b      	mov	fp, r3
   80774:	f8df 8080 	ldr.w	r8, [pc, #128]	; 807f8 <usart_serial_read_packet+0xc4>
   80778:	a901      	add	r1, sp, #4
   8077a:	4658      	mov	r0, fp
   8077c:	47c0      	blx	r8
   8077e:	2800      	cmp	r0, #0
   80780:	d1fa      	bne.n	80778 <usart_serial_read_packet+0x44>
		*data = (uint8_t)(val & 0xFF);
   80782:	9b01      	ldr	r3, [sp, #4]
   80784:	7023      	strb	r3, [r4, #0]
		usart_serial_getchar(usart, data);
		len--;
		data++;
   80786:	3401      	adds	r4, #1
	while (len) {
   80788:	4554      	cmp	r4, sl
   8078a:	d023      	beq.n	807d4 <usart_serial_read_packet+0xa0>
	uint32_t val = 0;
   8078c:	2300      	movs	r3, #0
   8078e:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
   80790:	42bd      	cmp	r5, r7
   80792:	d0dd      	beq.n	80750 <usart_serial_read_packet+0x1c>
	if (USART0 == p_usart) {
   80794:	4b14      	ldr	r3, [pc, #80]	; (807e8 <usart_serial_read_packet+0xb4>)
   80796:	429d      	cmp	r5, r3
   80798:	d0e0      	beq.n	8075c <usart_serial_read_packet+0x28>
	if (USART1 == p_usart) {
   8079a:	4b14      	ldr	r3, [pc, #80]	; (807ec <usart_serial_read_packet+0xb8>)
   8079c:	429d      	cmp	r5, r3
   8079e:	d0e8      	beq.n	80772 <usart_serial_read_packet+0x3e>
	if (USART2 == p_usart) {
   807a0:	4b13      	ldr	r3, [pc, #76]	; (807f0 <usart_serial_read_packet+0xbc>)
   807a2:	429d      	cmp	r5, r3
   807a4:	d00b      	beq.n	807be <usart_serial_read_packet+0x8a>
	if (USART3 == p_usart) {
   807a6:	42b5      	cmp	r5, r6
   807a8:	d1ed      	bne.n	80786 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   807aa:	f8df 804c 	ldr.w	r8, [pc, #76]	; 807f8 <usart_serial_read_packet+0xc4>
   807ae:	a901      	add	r1, sp, #4
   807b0:	4630      	mov	r0, r6
   807b2:	47c0      	blx	r8
   807b4:	2800      	cmp	r0, #0
   807b6:	d1fa      	bne.n	807ae <usart_serial_read_packet+0x7a>
		*data = (uint8_t)(val & 0xFF);
   807b8:	9b01      	ldr	r3, [sp, #4]
   807ba:	7023      	strb	r3, [r4, #0]
   807bc:	e7e3      	b.n	80786 <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   807be:	469b      	mov	fp, r3
   807c0:	f8df 8034 	ldr.w	r8, [pc, #52]	; 807f8 <usart_serial_read_packet+0xc4>
   807c4:	a901      	add	r1, sp, #4
   807c6:	4658      	mov	r0, fp
   807c8:	47c0      	blx	r8
   807ca:	2800      	cmp	r0, #0
   807cc:	d1fa      	bne.n	807c4 <usart_serial_read_packet+0x90>
		*data = (uint8_t)(val & 0xFF);
   807ce:	9b01      	ldr	r3, [sp, #4]
   807d0:	7023      	strb	r3, [r4, #0]
   807d2:	e7d8      	b.n	80786 <usart_serial_read_packet+0x52>
	}
	return STATUS_OK;
}
   807d4:	2000      	movs	r0, #0
   807d6:	b003      	add	sp, #12
   807d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   807dc:	2000      	movs	r0, #0
   807de:	4770      	bx	lr
   807e0:	400e0800 	.word	0x400e0800
   807e4:	400a4000 	.word	0x400a4000
   807e8:	40098000 	.word	0x40098000
   807ec:	4009c000 	.word	0x4009c000
   807f0:	400a0000 	.word	0x400a0000
   807f4:	00080843 	.word	0x00080843
   807f8:	00080569 	.word	0x00080569

000807fc <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   807fc:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   807fe:	23ac      	movs	r3, #172	; 0xac
   80800:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80802:	680b      	ldr	r3, [r1, #0]
   80804:	684a      	ldr	r2, [r1, #4]
   80806:	fbb3 f3f2 	udiv	r3, r3, r2
   8080a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8080c:	1e5c      	subs	r4, r3, #1
   8080e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80812:	4294      	cmp	r4, r2
   80814:	d80b      	bhi.n	8082e <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80816:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80818:	688b      	ldr	r3, [r1, #8]
   8081a:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   8081c:	f240 2302 	movw	r3, #514	; 0x202
   80820:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80824:	2350      	movs	r3, #80	; 0x50
   80826:	6003      	str	r3, [r0, #0]

	return 0;
   80828:	2000      	movs	r0, #0
}
   8082a:	bc10      	pop	{r4}
   8082c:	4770      	bx	lr
		return 1;
   8082e:	2001      	movs	r0, #1
   80830:	e7fb      	b.n	8082a <uart_init+0x2e>

00080832 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80832:	6943      	ldr	r3, [r0, #20]
   80834:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80838:	bf1a      	itte	ne
   8083a:	61c1      	strne	r1, [r0, #28]
	return 0;
   8083c:	2000      	movne	r0, #0
		return 1;
   8083e:	2001      	moveq	r0, #1
}
   80840:	4770      	bx	lr

00080842 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80842:	6943      	ldr	r3, [r0, #20]
   80844:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80848:	bf1d      	ittte	ne
   8084a:	6983      	ldrne	r3, [r0, #24]
   8084c:	700b      	strbne	r3, [r1, #0]
	return 0;
   8084e:	2000      	movne	r0, #0
		return 1;
   80850:	2001      	moveq	r0, #1
}
   80852:	4770      	bx	lr

00080854 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80854:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80856:	480e      	ldr	r0, [pc, #56]	; (80890 <sysclk_init+0x3c>)
   80858:	4b0e      	ldr	r3, [pc, #56]	; (80894 <sysclk_init+0x40>)
   8085a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   8085c:	213e      	movs	r1, #62	; 0x3e
   8085e:	2000      	movs	r0, #0
   80860:	4b0d      	ldr	r3, [pc, #52]	; (80898 <sysclk_init+0x44>)
   80862:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80864:	4c0d      	ldr	r4, [pc, #52]	; (8089c <sysclk_init+0x48>)
   80866:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80868:	2800      	cmp	r0, #0
   8086a:	d0fc      	beq.n	80866 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   8086c:	4b0c      	ldr	r3, [pc, #48]	; (808a0 <sysclk_init+0x4c>)
   8086e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80870:	4a0c      	ldr	r2, [pc, #48]	; (808a4 <sysclk_init+0x50>)
   80872:	4b0d      	ldr	r3, [pc, #52]	; (808a8 <sysclk_init+0x54>)
   80874:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80876:	4c0d      	ldr	r4, [pc, #52]	; (808ac <sysclk_init+0x58>)
   80878:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8087a:	2800      	cmp	r0, #0
   8087c:	d0fc      	beq.n	80878 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8087e:	2010      	movs	r0, #16
   80880:	4b0b      	ldr	r3, [pc, #44]	; (808b0 <sysclk_init+0x5c>)
   80882:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80884:	4b0b      	ldr	r3, [pc, #44]	; (808b4 <sysclk_init+0x60>)
   80886:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80888:	4801      	ldr	r0, [pc, #4]	; (80890 <sysclk_init+0x3c>)
   8088a:	4b02      	ldr	r3, [pc, #8]	; (80894 <sysclk_init+0x40>)
   8088c:	4798      	blx	r3
   8088e:	bd10      	pop	{r4, pc}
   80890:	0501bd00 	.word	0x0501bd00
   80894:	200700a5 	.word	0x200700a5
   80898:	00080c69 	.word	0x00080c69
   8089c:	00080cbd 	.word	0x00080cbd
   808a0:	00080ccd 	.word	0x00080ccd
   808a4:	200d3f01 	.word	0x200d3f01
   808a8:	400e0600 	.word	0x400e0600
   808ac:	00080cdd 	.word	0x00080cdd
   808b0:	00080c05 	.word	0x00080c05
   808b4:	00080ddd 	.word	0x00080ddd

000808b8 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   808b8:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   808ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   808be:	4b1e      	ldr	r3, [pc, #120]	; (80938 <board_init+0x80>)
   808c0:	605a      	str	r2, [r3, #4]
   808c2:	200b      	movs	r0, #11
   808c4:	4c1d      	ldr	r4, [pc, #116]	; (8093c <board_init+0x84>)
   808c6:	47a0      	blx	r4
   808c8:	200c      	movs	r0, #12
   808ca:	47a0      	blx	r4
   808cc:	200d      	movs	r0, #13
   808ce:	47a0      	blx	r4
   808d0:	200e      	movs	r0, #14
   808d2:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   808d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808d8:	203b      	movs	r0, #59	; 0x3b
   808da:	4c19      	ldr	r4, [pc, #100]	; (80940 <board_init+0x88>)
   808dc:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   808de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808e2:	2055      	movs	r0, #85	; 0x55
   808e4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   808e6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   808ea:	2056      	movs	r0, #86	; 0x56
   808ec:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   808ee:	4915      	ldr	r1, [pc, #84]	; (80944 <board_init+0x8c>)
   808f0:	2068      	movs	r0, #104	; 0x68
   808f2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   808f4:	4914      	ldr	r1, [pc, #80]	; (80948 <board_init+0x90>)
   808f6:	205c      	movs	r0, #92	; 0x5c
   808f8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   808fa:	4a14      	ldr	r2, [pc, #80]	; (8094c <board_init+0x94>)
   808fc:	f44f 7140 	mov.w	r1, #768	; 0x300
   80900:	4813      	ldr	r0, [pc, #76]	; (80950 <board_init+0x98>)
   80902:	4b14      	ldr	r3, [pc, #80]	; (80954 <board_init+0x9c>)
   80904:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   80906:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8090a:	2011      	movs	r0, #17
   8090c:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   8090e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80912:	2012      	movs	r0, #18
   80914:	47a0      	blx	r4
#endif

#ifdef CONF_BOARD_TWI1
	gpio_configure_pin(TWI1_DATA_GPIO, TWI1_DATA_FLAGS);
   80916:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8091a:	202c      	movs	r0, #44	; 0x2c
   8091c:	47a0      	blx	r4
	gpio_configure_pin(TWI1_CLK_GPIO, TWI1_CLK_FLAGS);
   8091e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80922:	202d      	movs	r0, #45	; 0x2d
   80924:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80926:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8092a:	202b      	movs	r0, #43	; 0x2b
   8092c:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8092e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80932:	202a      	movs	r0, #42	; 0x2a
   80934:	47a0      	blx	r4
   80936:	bd10      	pop	{r4, pc}
   80938:	400e1a50 	.word	0x400e1a50
   8093c:	00080ced 	.word	0x00080ced
   80940:	000809f9 	.word	0x000809f9
   80944:	28000079 	.word	0x28000079
   80948:	28000001 	.word	0x28000001
   8094c:	08000001 	.word	0x08000001
   80950:	400e0e00 	.word	0x400e0e00
   80954:	00080ac9 	.word	0x00080ac9

00080958 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80958:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8095a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8095e:	d016      	beq.n	8098e <pio_set_peripheral+0x36>
   80960:	d80b      	bhi.n	8097a <pio_set_peripheral+0x22>
   80962:	b149      	cbz	r1, 80978 <pio_set_peripheral+0x20>
   80964:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80968:	d105      	bne.n	80976 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   8096a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8096c:	6f01      	ldr	r1, [r0, #112]	; 0x70
   8096e:	400b      	ands	r3, r1
   80970:	ea23 0302 	bic.w	r3, r3, r2
   80974:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80976:	6042      	str	r2, [r0, #4]
   80978:	4770      	bx	lr
	switch (ul_type) {
   8097a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   8097e:	d0fb      	beq.n	80978 <pio_set_peripheral+0x20>
   80980:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80984:	d0f8      	beq.n	80978 <pio_set_peripheral+0x20>
   80986:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8098a:	d1f4      	bne.n	80976 <pio_set_peripheral+0x1e>
   8098c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   8098e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80990:	4313      	orrs	r3, r2
   80992:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80994:	e7ef      	b.n	80976 <pio_set_peripheral+0x1e>

00080996 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80996:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80998:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8099c:	bf14      	ite	ne
   8099e:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   809a0:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   809a2:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   809a6:	bf14      	ite	ne
   809a8:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   809aa:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   809ac:	f012 0f02 	tst.w	r2, #2
   809b0:	d107      	bne.n	809c2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   809b2:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   809b6:	bf18      	it	ne
   809b8:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   809bc:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   809be:	6001      	str	r1, [r0, #0]
   809c0:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   809c2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   809c6:	e7f9      	b.n	809bc <pio_set_input+0x26>

000809c8 <pio_set_output>:
{
   809c8:	b410      	push	{r4}
   809ca:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   809cc:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   809ce:	b944      	cbnz	r4, 809e2 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   809d0:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   809d2:	b143      	cbz	r3, 809e6 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   809d4:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   809d6:	b942      	cbnz	r2, 809ea <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   809d8:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   809da:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   809dc:	6001      	str	r1, [r0, #0]
}
   809de:	bc10      	pop	{r4}
   809e0:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   809e2:	6641      	str	r1, [r0, #100]	; 0x64
   809e4:	e7f5      	b.n	809d2 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   809e6:	6541      	str	r1, [r0, #84]	; 0x54
   809e8:	e7f5      	b.n	809d6 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   809ea:	6301      	str	r1, [r0, #48]	; 0x30
   809ec:	e7f5      	b.n	809da <pio_set_output+0x12>

000809ee <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   809ee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   809f0:	4770      	bx	lr

000809f2 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   809f2:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   809f4:	4770      	bx	lr
	...

000809f8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   809f8:	b570      	push	{r4, r5, r6, lr}
   809fa:	b082      	sub	sp, #8
   809fc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   809fe:	0943      	lsrs	r3, r0, #5
   80a00:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80a04:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80a08:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80a0a:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80a0e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80a12:	d031      	beq.n	80a78 <pio_configure_pin+0x80>
   80a14:	d816      	bhi.n	80a44 <pio_configure_pin+0x4c>
   80a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80a1a:	d01b      	beq.n	80a54 <pio_configure_pin+0x5c>
   80a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80a20:	d116      	bne.n	80a50 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80a22:	f000 001f 	and.w	r0, r0, #31
   80a26:	2601      	movs	r6, #1
   80a28:	4086      	lsls	r6, r0
   80a2a:	4632      	mov	r2, r6
   80a2c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80a30:	4620      	mov	r0, r4
   80a32:	4b22      	ldr	r3, [pc, #136]	; (80abc <pio_configure_pin+0xc4>)
   80a34:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a36:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a3a:	bf14      	ite	ne
   80a3c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a3e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80a40:	2001      	movs	r0, #1
   80a42:	e017      	b.n	80a74 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80a44:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80a48:	d021      	beq.n	80a8e <pio_configure_pin+0x96>
   80a4a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80a4e:	d01e      	beq.n	80a8e <pio_configure_pin+0x96>
		return 0;
   80a50:	2000      	movs	r0, #0
   80a52:	e00f      	b.n	80a74 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80a54:	f000 001f 	and.w	r0, r0, #31
   80a58:	2601      	movs	r6, #1
   80a5a:	4086      	lsls	r6, r0
   80a5c:	4632      	mov	r2, r6
   80a5e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80a62:	4620      	mov	r0, r4
   80a64:	4b15      	ldr	r3, [pc, #84]	; (80abc <pio_configure_pin+0xc4>)
   80a66:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80a68:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80a6c:	bf14      	ite	ne
   80a6e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80a70:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80a72:	2001      	movs	r0, #1
}
   80a74:	b002      	add	sp, #8
   80a76:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80a78:	f000 011f 	and.w	r1, r0, #31
   80a7c:	2601      	movs	r6, #1
   80a7e:	462a      	mov	r2, r5
   80a80:	fa06 f101 	lsl.w	r1, r6, r1
   80a84:	4620      	mov	r0, r4
   80a86:	4b0e      	ldr	r3, [pc, #56]	; (80ac0 <pio_configure_pin+0xc8>)
   80a88:	4798      	blx	r3
	return 1;
   80a8a:	4630      	mov	r0, r6
		break;
   80a8c:	e7f2      	b.n	80a74 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80a8e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80a92:	f000 011f 	and.w	r1, r0, #31
   80a96:	2601      	movs	r6, #1
   80a98:	ea05 0306 	and.w	r3, r5, r6
   80a9c:	9300      	str	r3, [sp, #0]
   80a9e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80aa2:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80aa6:	bf14      	ite	ne
   80aa8:	2200      	movne	r2, #0
   80aaa:	2201      	moveq	r2, #1
   80aac:	fa06 f101 	lsl.w	r1, r6, r1
   80ab0:	4620      	mov	r0, r4
   80ab2:	4c04      	ldr	r4, [pc, #16]	; (80ac4 <pio_configure_pin+0xcc>)
   80ab4:	47a0      	blx	r4
	return 1;
   80ab6:	4630      	mov	r0, r6
		break;
   80ab8:	e7dc      	b.n	80a74 <pio_configure_pin+0x7c>
   80aba:	bf00      	nop
   80abc:	00080959 	.word	0x00080959
   80ac0:	00080997 	.word	0x00080997
   80ac4:	000809c9 	.word	0x000809c9

00080ac8 <pio_configure_pin_group>:
{
   80ac8:	b570      	push	{r4, r5, r6, lr}
   80aca:	b082      	sub	sp, #8
   80acc:	4605      	mov	r5, r0
   80ace:	460e      	mov	r6, r1
   80ad0:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80ad2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80ad6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80ada:	d027      	beq.n	80b2c <pio_configure_pin_group+0x64>
   80adc:	d811      	bhi.n	80b02 <pio_configure_pin_group+0x3a>
   80ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ae2:	d016      	beq.n	80b12 <pio_configure_pin_group+0x4a>
   80ae4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ae8:	d111      	bne.n	80b0e <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80aea:	460a      	mov	r2, r1
   80aec:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80af0:	4b19      	ldr	r3, [pc, #100]	; (80b58 <pio_configure_pin_group+0x90>)
   80af2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80af4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80af8:	bf14      	ite	ne
   80afa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80afc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80afe:	2001      	movs	r0, #1
   80b00:	e012      	b.n	80b28 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80b02:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80b06:	d015      	beq.n	80b34 <pio_configure_pin_group+0x6c>
   80b08:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80b0c:	d012      	beq.n	80b34 <pio_configure_pin_group+0x6c>
		return 0;
   80b0e:	2000      	movs	r0, #0
   80b10:	e00a      	b.n	80b28 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80b12:	460a      	mov	r2, r1
   80b14:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b18:	4b0f      	ldr	r3, [pc, #60]	; (80b58 <pio_configure_pin_group+0x90>)
   80b1a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80b1c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80b20:	bf14      	ite	ne
   80b22:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b24:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80b26:	2001      	movs	r0, #1
}
   80b28:	b002      	add	sp, #8
   80b2a:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80b2c:	4b0b      	ldr	r3, [pc, #44]	; (80b5c <pio_configure_pin_group+0x94>)
   80b2e:	4798      	blx	r3
	return 1;
   80b30:	2001      	movs	r0, #1
		break;
   80b32:	e7f9      	b.n	80b28 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80b34:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80b38:	f004 0301 	and.w	r3, r4, #1
   80b3c:	9300      	str	r3, [sp, #0]
   80b3e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80b42:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80b46:	bf14      	ite	ne
   80b48:	2200      	movne	r2, #0
   80b4a:	2201      	moveq	r2, #1
   80b4c:	4631      	mov	r1, r6
   80b4e:	4628      	mov	r0, r5
   80b50:	4c03      	ldr	r4, [pc, #12]	; (80b60 <pio_configure_pin_group+0x98>)
   80b52:	47a0      	blx	r4
	return 1;
   80b54:	2001      	movs	r0, #1
		break;
   80b56:	e7e7      	b.n	80b28 <pio_configure_pin_group+0x60>
   80b58:	00080959 	.word	0x00080959
   80b5c:	00080997 	.word	0x00080997
   80b60:	000809c9 	.word	0x000809c9

00080b64 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80b68:	4604      	mov	r4, r0
   80b6a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80b6c:	4b0e      	ldr	r3, [pc, #56]	; (80ba8 <pio_handler_process+0x44>)
   80b6e:	4798      	blx	r3
   80b70:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80b72:	4620      	mov	r0, r4
   80b74:	4b0d      	ldr	r3, [pc, #52]	; (80bac <pio_handler_process+0x48>)
   80b76:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80b78:	4005      	ands	r5, r0
   80b7a:	d013      	beq.n	80ba4 <pio_handler_process+0x40>
   80b7c:	4c0c      	ldr	r4, [pc, #48]	; (80bb0 <pio_handler_process+0x4c>)
   80b7e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80b82:	e003      	b.n	80b8c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80b84:	42b4      	cmp	r4, r6
   80b86:	d00d      	beq.n	80ba4 <pio_handler_process+0x40>
   80b88:	3410      	adds	r4, #16
		while (status != 0) {
   80b8a:	b15d      	cbz	r5, 80ba4 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80b8c:	6820      	ldr	r0, [r4, #0]
   80b8e:	4540      	cmp	r0, r8
   80b90:	d1f8      	bne.n	80b84 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80b92:	6861      	ldr	r1, [r4, #4]
   80b94:	4229      	tst	r1, r5
   80b96:	d0f5      	beq.n	80b84 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80b98:	68e3      	ldr	r3, [r4, #12]
   80b9a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80b9c:	6863      	ldr	r3, [r4, #4]
   80b9e:	ea25 0503 	bic.w	r5, r5, r3
   80ba2:	e7ef      	b.n	80b84 <pio_handler_process+0x20>
   80ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ba8:	000809ef 	.word	0x000809ef
   80bac:	000809f3 	.word	0x000809f3
   80bb0:	20070bd4 	.word	0x20070bd4

00080bb4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80bb4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80bb6:	210b      	movs	r1, #11
   80bb8:	4801      	ldr	r0, [pc, #4]	; (80bc0 <PIOA_Handler+0xc>)
   80bba:	4b02      	ldr	r3, [pc, #8]	; (80bc4 <PIOA_Handler+0x10>)
   80bbc:	4798      	blx	r3
   80bbe:	bd08      	pop	{r3, pc}
   80bc0:	400e0e00 	.word	0x400e0e00
   80bc4:	00080b65 	.word	0x00080b65

00080bc8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80bc8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80bca:	210c      	movs	r1, #12
   80bcc:	4801      	ldr	r0, [pc, #4]	; (80bd4 <PIOB_Handler+0xc>)
   80bce:	4b02      	ldr	r3, [pc, #8]	; (80bd8 <PIOB_Handler+0x10>)
   80bd0:	4798      	blx	r3
   80bd2:	bd08      	pop	{r3, pc}
   80bd4:	400e1000 	.word	0x400e1000
   80bd8:	00080b65 	.word	0x00080b65

00080bdc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80bdc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80bde:	210d      	movs	r1, #13
   80be0:	4801      	ldr	r0, [pc, #4]	; (80be8 <PIOC_Handler+0xc>)
   80be2:	4b02      	ldr	r3, [pc, #8]	; (80bec <PIOC_Handler+0x10>)
   80be4:	4798      	blx	r3
   80be6:	bd08      	pop	{r3, pc}
   80be8:	400e1200 	.word	0x400e1200
   80bec:	00080b65 	.word	0x00080b65

00080bf0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80bf0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80bf2:	210e      	movs	r1, #14
   80bf4:	4801      	ldr	r0, [pc, #4]	; (80bfc <PIOD_Handler+0xc>)
   80bf6:	4b02      	ldr	r3, [pc, #8]	; (80c00 <PIOD_Handler+0x10>)
   80bf8:	4798      	blx	r3
   80bfa:	bd08      	pop	{r3, pc}
   80bfc:	400e1400 	.word	0x400e1400
   80c00:	00080b65 	.word	0x00080b65

00080c04 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80c04:	4a17      	ldr	r2, [pc, #92]	; (80c64 <pmc_switch_mck_to_pllack+0x60>)
   80c06:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80c0c:	4318      	orrs	r0, r3
   80c0e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c10:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c12:	f013 0f08 	tst.w	r3, #8
   80c16:	d10a      	bne.n	80c2e <pmc_switch_mck_to_pllack+0x2a>
   80c18:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c1c:	4911      	ldr	r1, [pc, #68]	; (80c64 <pmc_switch_mck_to_pllack+0x60>)
   80c1e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c20:	f012 0f08 	tst.w	r2, #8
   80c24:	d103      	bne.n	80c2e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c26:	3b01      	subs	r3, #1
   80c28:	d1f9      	bne.n	80c1e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80c2a:	2001      	movs	r0, #1
   80c2c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80c2e:	4a0d      	ldr	r2, [pc, #52]	; (80c64 <pmc_switch_mck_to_pllack+0x60>)
   80c30:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80c32:	f023 0303 	bic.w	r3, r3, #3
   80c36:	f043 0302 	orr.w	r3, r3, #2
   80c3a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80c3c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c3e:	f013 0f08 	tst.w	r3, #8
   80c42:	d10a      	bne.n	80c5a <pmc_switch_mck_to_pllack+0x56>
   80c44:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80c48:	4906      	ldr	r1, [pc, #24]	; (80c64 <pmc_switch_mck_to_pllack+0x60>)
   80c4a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80c4c:	f012 0f08 	tst.w	r2, #8
   80c50:	d105      	bne.n	80c5e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80c52:	3b01      	subs	r3, #1
   80c54:	d1f9      	bne.n	80c4a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80c56:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80c58:	4770      	bx	lr
	return 0;
   80c5a:	2000      	movs	r0, #0
   80c5c:	4770      	bx	lr
   80c5e:	2000      	movs	r0, #0
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop
   80c64:	400e0600 	.word	0x400e0600

00080c68 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80c68:	b9c8      	cbnz	r0, 80c9e <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c6a:	4a11      	ldr	r2, [pc, #68]	; (80cb0 <pmc_switch_mainck_to_xtal+0x48>)
   80c6c:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80c6e:	0209      	lsls	r1, r1, #8
   80c70:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80c72:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80c76:	f023 0303 	bic.w	r3, r3, #3
   80c7a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80c7e:	f043 0301 	orr.w	r3, r3, #1
   80c82:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80c84:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80c86:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80c88:	f013 0f01 	tst.w	r3, #1
   80c8c:	d0fb      	beq.n	80c86 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80c8e:	4a08      	ldr	r2, [pc, #32]	; (80cb0 <pmc_switch_mainck_to_xtal+0x48>)
   80c90:	6a13      	ldr	r3, [r2, #32]
   80c92:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80c96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80c9a:	6213      	str	r3, [r2, #32]
   80c9c:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80c9e:	4904      	ldr	r1, [pc, #16]	; (80cb0 <pmc_switch_mainck_to_xtal+0x48>)
   80ca0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80ca2:	4a04      	ldr	r2, [pc, #16]	; (80cb4 <pmc_switch_mainck_to_xtal+0x4c>)
   80ca4:	401a      	ands	r2, r3
   80ca6:	4b04      	ldr	r3, [pc, #16]	; (80cb8 <pmc_switch_mainck_to_xtal+0x50>)
   80ca8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80caa:	620b      	str	r3, [r1, #32]
   80cac:	4770      	bx	lr
   80cae:	bf00      	nop
   80cb0:	400e0600 	.word	0x400e0600
   80cb4:	fec8fffc 	.word	0xfec8fffc
   80cb8:	01370002 	.word	0x01370002

00080cbc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80cbc:	4b02      	ldr	r3, [pc, #8]	; (80cc8 <pmc_osc_is_ready_mainck+0xc>)
   80cbe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80cc0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80cc4:	4770      	bx	lr
   80cc6:	bf00      	nop
   80cc8:	400e0600 	.word	0x400e0600

00080ccc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80ccc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80cd0:	4b01      	ldr	r3, [pc, #4]	; (80cd8 <pmc_disable_pllack+0xc>)
   80cd2:	629a      	str	r2, [r3, #40]	; 0x28
   80cd4:	4770      	bx	lr
   80cd6:	bf00      	nop
   80cd8:	400e0600 	.word	0x400e0600

00080cdc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80cdc:	4b02      	ldr	r3, [pc, #8]	; (80ce8 <pmc_is_locked_pllack+0xc>)
   80cde:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80ce0:	f000 0002 	and.w	r0, r0, #2
   80ce4:	4770      	bx	lr
   80ce6:	bf00      	nop
   80ce8:	400e0600 	.word	0x400e0600

00080cec <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80cec:	282c      	cmp	r0, #44	; 0x2c
   80cee:	d81e      	bhi.n	80d2e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80cf0:	281f      	cmp	r0, #31
   80cf2:	d80c      	bhi.n	80d0e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80cf4:	4b11      	ldr	r3, [pc, #68]	; (80d3c <pmc_enable_periph_clk+0x50>)
   80cf6:	699a      	ldr	r2, [r3, #24]
   80cf8:	2301      	movs	r3, #1
   80cfa:	4083      	lsls	r3, r0
   80cfc:	4393      	bics	r3, r2
   80cfe:	d018      	beq.n	80d32 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80d00:	2301      	movs	r3, #1
   80d02:	fa03 f000 	lsl.w	r0, r3, r0
   80d06:	4b0d      	ldr	r3, [pc, #52]	; (80d3c <pmc_enable_periph_clk+0x50>)
   80d08:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80d0a:	2000      	movs	r0, #0
   80d0c:	4770      	bx	lr
		ul_id -= 32;
   80d0e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80d10:	4b0a      	ldr	r3, [pc, #40]	; (80d3c <pmc_enable_periph_clk+0x50>)
   80d12:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80d16:	2301      	movs	r3, #1
   80d18:	4083      	lsls	r3, r0
   80d1a:	4393      	bics	r3, r2
   80d1c:	d00b      	beq.n	80d36 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80d1e:	2301      	movs	r3, #1
   80d20:	fa03 f000 	lsl.w	r0, r3, r0
   80d24:	4b05      	ldr	r3, [pc, #20]	; (80d3c <pmc_enable_periph_clk+0x50>)
   80d26:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80d2a:	2000      	movs	r0, #0
   80d2c:	4770      	bx	lr
		return 1;
   80d2e:	2001      	movs	r0, #1
   80d30:	4770      	bx	lr
	return 0;
   80d32:	2000      	movs	r0, #0
   80d34:	4770      	bx	lr
   80d36:	2000      	movs	r0, #0
}
   80d38:	4770      	bx	lr
   80d3a:	bf00      	nop
   80d3c:	400e0600 	.word	0x400e0600

00080d40 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80d40:	e7fe      	b.n	80d40 <Dummy_Handler>
	...

00080d44 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80d44:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80d46:	4b1c      	ldr	r3, [pc, #112]	; (80db8 <Reset_Handler+0x74>)
   80d48:	4a1c      	ldr	r2, [pc, #112]	; (80dbc <Reset_Handler+0x78>)
   80d4a:	429a      	cmp	r2, r3
   80d4c:	d010      	beq.n	80d70 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80d4e:	4b1c      	ldr	r3, [pc, #112]	; (80dc0 <Reset_Handler+0x7c>)
   80d50:	4a19      	ldr	r2, [pc, #100]	; (80db8 <Reset_Handler+0x74>)
   80d52:	429a      	cmp	r2, r3
   80d54:	d20c      	bcs.n	80d70 <Reset_Handler+0x2c>
   80d56:	3b01      	subs	r3, #1
   80d58:	1a9b      	subs	r3, r3, r2
   80d5a:	f023 0303 	bic.w	r3, r3, #3
   80d5e:	3304      	adds	r3, #4
   80d60:	4413      	add	r3, r2
   80d62:	4916      	ldr	r1, [pc, #88]	; (80dbc <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80d64:	f851 0b04 	ldr.w	r0, [r1], #4
   80d68:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   80d6c:	429a      	cmp	r2, r3
   80d6e:	d1f9      	bne.n	80d64 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80d70:	4b14      	ldr	r3, [pc, #80]	; (80dc4 <Reset_Handler+0x80>)
   80d72:	4a15      	ldr	r2, [pc, #84]	; (80dc8 <Reset_Handler+0x84>)
   80d74:	429a      	cmp	r2, r3
   80d76:	d20a      	bcs.n	80d8e <Reset_Handler+0x4a>
   80d78:	3b01      	subs	r3, #1
   80d7a:	1a9b      	subs	r3, r3, r2
   80d7c:	f023 0303 	bic.w	r3, r3, #3
   80d80:	3304      	adds	r3, #4
   80d82:	4413      	add	r3, r2
		*pDest++ = 0;
   80d84:	2100      	movs	r1, #0
   80d86:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   80d8a:	4293      	cmp	r3, r2
   80d8c:	d1fb      	bne.n	80d86 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80d8e:	4b0f      	ldr	r3, [pc, #60]	; (80dcc <Reset_Handler+0x88>)
   80d90:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   80d94:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   80d98:	490d      	ldr	r1, [pc, #52]	; (80dd0 <Reset_Handler+0x8c>)
   80d9a:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80d9c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   80da0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   80da4:	d203      	bcs.n	80dae <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80da6:	688b      	ldr	r3, [r1, #8]
   80da8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   80dac:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80dae:	4b09      	ldr	r3, [pc, #36]	; (80dd4 <Reset_Handler+0x90>)
   80db0:	4798      	blx	r3

	/* Branch to main function */
	main();
   80db2:	4b09      	ldr	r3, [pc, #36]	; (80dd8 <Reset_Handler+0x94>)
   80db4:	4798      	blx	r3
   80db6:	e7fe      	b.n	80db6 <Reset_Handler+0x72>
   80db8:	20070000 	.word	0x20070000
   80dbc:	00083fdc 	.word	0x00083fdc
   80dc0:	20070b08 	.word	0x20070b08
   80dc4:	20070cb0 	.word	0x20070cb0
   80dc8:	20070b08 	.word	0x20070b08
   80dcc:	00080000 	.word	0x00080000
   80dd0:	e000ed00 	.word	0xe000ed00
   80dd4:	00080f79 	.word	0x00080f79
   80dd8:	00080f45 	.word	0x00080f45

00080ddc <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80ddc:	4b3d      	ldr	r3, [pc, #244]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80de0:	f003 0303 	and.w	r3, r3, #3
   80de4:	2b03      	cmp	r3, #3
   80de6:	d80e      	bhi.n	80e06 <SystemCoreClockUpdate+0x2a>
   80de8:	e8df f003 	tbb	[pc, r3]
   80dec:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80df0:	4b39      	ldr	r3, [pc, #228]	; (80ed8 <SystemCoreClockUpdate+0xfc>)
   80df2:	695b      	ldr	r3, [r3, #20]
   80df4:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80df8:	bf14      	ite	ne
   80dfa:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80dfe:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80e02:	4b36      	ldr	r3, [pc, #216]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e04:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80e06:	4b33      	ldr	r3, [pc, #204]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e0e:	2b70      	cmp	r3, #112	; 0x70
   80e10:	d057      	beq.n	80ec2 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80e12:	4b30      	ldr	r3, [pc, #192]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80e16:	4931      	ldr	r1, [pc, #196]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e18:	f3c2 1202 	ubfx	r2, r2, #4, #3
   80e1c:	680b      	ldr	r3, [r1, #0]
   80e1e:	40d3      	lsrs	r3, r2
   80e20:	600b      	str	r3, [r1, #0]
   80e22:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e24:	4b2b      	ldr	r3, [pc, #172]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e26:	6a1b      	ldr	r3, [r3, #32]
   80e28:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e2c:	d003      	beq.n	80e36 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e2e:	4a2c      	ldr	r2, [pc, #176]	; (80ee0 <SystemCoreClockUpdate+0x104>)
   80e30:	4b2a      	ldr	r3, [pc, #168]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e32:	601a      	str	r2, [r3, #0]
   80e34:	e7e7      	b.n	80e06 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e36:	4a2b      	ldr	r2, [pc, #172]	; (80ee4 <SystemCoreClockUpdate+0x108>)
   80e38:	4b28      	ldr	r3, [pc, #160]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e3a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e3c:	4b25      	ldr	r3, [pc, #148]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e3e:	6a1b      	ldr	r3, [r3, #32]
   80e40:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e44:	2b10      	cmp	r3, #16
   80e46:	d005      	beq.n	80e54 <SystemCoreClockUpdate+0x78>
   80e48:	2b20      	cmp	r3, #32
   80e4a:	d1dc      	bne.n	80e06 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   80e4c:	4a24      	ldr	r2, [pc, #144]	; (80ee0 <SystemCoreClockUpdate+0x104>)
   80e4e:	4b23      	ldr	r3, [pc, #140]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e50:	601a      	str	r2, [r3, #0]
				break;
   80e52:	e7d8      	b.n	80e06 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   80e54:	4a24      	ldr	r2, [pc, #144]	; (80ee8 <SystemCoreClockUpdate+0x10c>)
   80e56:	4b21      	ldr	r3, [pc, #132]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e58:	601a      	str	r2, [r3, #0]
				break;
   80e5a:	e7d4      	b.n	80e06 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80e5c:	4b1d      	ldr	r3, [pc, #116]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e5e:	6a1b      	ldr	r3, [r3, #32]
   80e60:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80e64:	d00c      	beq.n	80e80 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80e66:	4a1e      	ldr	r2, [pc, #120]	; (80ee0 <SystemCoreClockUpdate+0x104>)
   80e68:	4b1c      	ldr	r3, [pc, #112]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e6a:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80e6c:	4b19      	ldr	r3, [pc, #100]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80e70:	f003 0303 	and.w	r3, r3, #3
   80e74:	2b02      	cmp	r3, #2
   80e76:	d016      	beq.n	80ea6 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80e78:	4a1c      	ldr	r2, [pc, #112]	; (80eec <SystemCoreClockUpdate+0x110>)
   80e7a:	4b18      	ldr	r3, [pc, #96]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e7c:	601a      	str	r2, [r3, #0]
   80e7e:	e7c2      	b.n	80e06 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80e80:	4a18      	ldr	r2, [pc, #96]	; (80ee4 <SystemCoreClockUpdate+0x108>)
   80e82:	4b16      	ldr	r3, [pc, #88]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e84:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80e86:	4b13      	ldr	r3, [pc, #76]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80e88:	6a1b      	ldr	r3, [r3, #32]
   80e8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80e8e:	2b10      	cmp	r3, #16
   80e90:	d005      	beq.n	80e9e <SystemCoreClockUpdate+0xc2>
   80e92:	2b20      	cmp	r3, #32
   80e94:	d1ea      	bne.n	80e6c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   80e96:	4a12      	ldr	r2, [pc, #72]	; (80ee0 <SystemCoreClockUpdate+0x104>)
   80e98:	4b10      	ldr	r3, [pc, #64]	; (80edc <SystemCoreClockUpdate+0x100>)
   80e9a:	601a      	str	r2, [r3, #0]
				break;
   80e9c:	e7e6      	b.n	80e6c <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   80e9e:	4a12      	ldr	r2, [pc, #72]	; (80ee8 <SystemCoreClockUpdate+0x10c>)
   80ea0:	4b0e      	ldr	r3, [pc, #56]	; (80edc <SystemCoreClockUpdate+0x100>)
   80ea2:	601a      	str	r2, [r3, #0]
				break;
   80ea4:	e7e2      	b.n	80e6c <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80ea6:	4a0b      	ldr	r2, [pc, #44]	; (80ed4 <SystemCoreClockUpdate+0xf8>)
   80ea8:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80eaa:	6a92      	ldr	r2, [r2, #40]	; 0x28
   80eac:	480b      	ldr	r0, [pc, #44]	; (80edc <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80eae:	f3c1 410a 	ubfx	r1, r1, #16, #11
   80eb2:	6803      	ldr	r3, [r0, #0]
   80eb4:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80eb8:	b2d2      	uxtb	r2, r2
   80eba:	fbb3 f3f2 	udiv	r3, r3, r2
   80ebe:	6003      	str	r3, [r0, #0]
   80ec0:	e7a1      	b.n	80e06 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   80ec2:	4a06      	ldr	r2, [pc, #24]	; (80edc <SystemCoreClockUpdate+0x100>)
   80ec4:	6813      	ldr	r3, [r2, #0]
   80ec6:	490a      	ldr	r1, [pc, #40]	; (80ef0 <SystemCoreClockUpdate+0x114>)
   80ec8:	fba1 1303 	umull	r1, r3, r1, r3
   80ecc:	085b      	lsrs	r3, r3, #1
   80ece:	6013      	str	r3, [r2, #0]
   80ed0:	4770      	bx	lr
   80ed2:	bf00      	nop
   80ed4:	400e0600 	.word	0x400e0600
   80ed8:	400e1a10 	.word	0x400e1a10
   80edc:	20070158 	.word	0x20070158
   80ee0:	00b71b00 	.word	0x00b71b00
   80ee4:	003d0900 	.word	0x003d0900
   80ee8:	007a1200 	.word	0x007a1200
   80eec:	0e4e1c00 	.word	0x0e4e1c00
   80ef0:	aaaaaaab 	.word	0xaaaaaaab

00080ef4 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80ef4:	4b0a      	ldr	r3, [pc, #40]	; (80f20 <_sbrk+0x2c>)
   80ef6:	681b      	ldr	r3, [r3, #0]
   80ef8:	b153      	cbz	r3, 80f10 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   80efa:	4b09      	ldr	r3, [pc, #36]	; (80f20 <_sbrk+0x2c>)
   80efc:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80efe:	181a      	adds	r2, r3, r0
   80f00:	4908      	ldr	r1, [pc, #32]	; (80f24 <_sbrk+0x30>)
   80f02:	4291      	cmp	r1, r2
   80f04:	db08      	blt.n	80f18 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   80f06:	4610      	mov	r0, r2
   80f08:	4a05      	ldr	r2, [pc, #20]	; (80f20 <_sbrk+0x2c>)
   80f0a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80f0c:	4618      	mov	r0, r3
   80f0e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   80f10:	4a05      	ldr	r2, [pc, #20]	; (80f28 <_sbrk+0x34>)
   80f12:	4b03      	ldr	r3, [pc, #12]	; (80f20 <_sbrk+0x2c>)
   80f14:	601a      	str	r2, [r3, #0]
   80f16:	e7f0      	b.n	80efa <_sbrk+0x6>
		return (caddr_t) -1;	
   80f18:	f04f 30ff 	mov.w	r0, #4294967295
}
   80f1c:	4770      	bx	lr
   80f1e:	bf00      	nop
   80f20:	20070c44 	.word	0x20070c44
   80f24:	20087ffc 	.word	0x20087ffc
   80f28:	20072cb0 	.word	0x20072cb0

00080f2c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80f2c:	f04f 30ff 	mov.w	r0, #4294967295
   80f30:	4770      	bx	lr

00080f32 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80f32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80f36:	604b      	str	r3, [r1, #4]

	return 0;
}
   80f38:	2000      	movs	r0, #0
   80f3a:	4770      	bx	lr

00080f3c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80f3c:	2001      	movs	r0, #1
   80f3e:	4770      	bx	lr

00080f40 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80f40:	2000      	movs	r0, #0
   80f42:	4770      	bx	lr

00080f44 <main>:
#include <asf.h>
#include "I2CFunctions.h"
#include "test.h"

int main (void)
{
   80f44:	b508      	push	{r3, lr}
	sysclk_init();
   80f46:	4b07      	ldr	r3, [pc, #28]	; (80f64 <main+0x20>)
   80f48:	4798      	blx	r3
	board_init();
   80f4a:	4b07      	ldr	r3, [pc, #28]	; (80f68 <main+0x24>)
   80f4c:	4798      	blx	r3
	delay_init();
	console_init();
   80f4e:	4b07      	ldr	r3, [pc, #28]	; (80f6c <main+0x28>)
   80f50:	4798      	blx	r3
	
	if(init_twi())
   80f52:	4b07      	ldr	r3, [pc, #28]	; (80f70 <main+0x2c>)
   80f54:	4798      	blx	r3
   80f56:	b908      	cbnz	r0, 80f5c <main+0x18>
		/* Testa random saker */
		read_package(TWI_SLAVE_ADR_POS);
		//send_package(LED_OFF, TWI_SLAVE_ADR_PAB);
	}
	
}
   80f58:	2000      	movs	r0, #0
   80f5a:	bd08      	pop	{r3, pc}
		read_package(TWI_SLAVE_ADR_POS);
   80f5c:	2010      	movs	r0, #16
   80f5e:	4b05      	ldr	r3, [pc, #20]	; (80f74 <main+0x30>)
   80f60:	4798      	blx	r3
   80f62:	e7f9      	b.n	80f58 <main+0x14>
   80f64:	00080855 	.word	0x00080855
   80f68:	000808b9 	.word	0x000808b9
   80f6c:	000802a9 	.word	0x000802a9
   80f70:	000805e1 	.word	0x000805e1
   80f74:	0008068d 	.word	0x0008068d

00080f78 <__libc_init_array>:
   80f78:	b570      	push	{r4, r5, r6, lr}
   80f7a:	4e0f      	ldr	r6, [pc, #60]	; (80fb8 <__libc_init_array+0x40>)
   80f7c:	4d0f      	ldr	r5, [pc, #60]	; (80fbc <__libc_init_array+0x44>)
   80f7e:	1b76      	subs	r6, r6, r5
   80f80:	10b6      	asrs	r6, r6, #2
   80f82:	bf18      	it	ne
   80f84:	2400      	movne	r4, #0
   80f86:	d005      	beq.n	80f94 <__libc_init_array+0x1c>
   80f88:	3401      	adds	r4, #1
   80f8a:	f855 3b04 	ldr.w	r3, [r5], #4
   80f8e:	4798      	blx	r3
   80f90:	42a6      	cmp	r6, r4
   80f92:	d1f9      	bne.n	80f88 <__libc_init_array+0x10>
   80f94:	4e0a      	ldr	r6, [pc, #40]	; (80fc0 <__libc_init_array+0x48>)
   80f96:	4d0b      	ldr	r5, [pc, #44]	; (80fc4 <__libc_init_array+0x4c>)
   80f98:	f003 f80a 	bl	83fb0 <_init>
   80f9c:	1b76      	subs	r6, r6, r5
   80f9e:	10b6      	asrs	r6, r6, #2
   80fa0:	bf18      	it	ne
   80fa2:	2400      	movne	r4, #0
   80fa4:	d006      	beq.n	80fb4 <__libc_init_array+0x3c>
   80fa6:	3401      	adds	r4, #1
   80fa8:	f855 3b04 	ldr.w	r3, [r5], #4
   80fac:	4798      	blx	r3
   80fae:	42a6      	cmp	r6, r4
   80fb0:	d1f9      	bne.n	80fa6 <__libc_init_array+0x2e>
   80fb2:	bd70      	pop	{r4, r5, r6, pc}
   80fb4:	bd70      	pop	{r4, r5, r6, pc}
   80fb6:	bf00      	nop
   80fb8:	00083fbc 	.word	0x00083fbc
   80fbc:	00083fbc 	.word	0x00083fbc
   80fc0:	00083fc4 	.word	0x00083fc4
   80fc4:	00083fbc 	.word	0x00083fbc

00080fc8 <iprintf>:
   80fc8:	b40f      	push	{r0, r1, r2, r3}
   80fca:	b510      	push	{r4, lr}
   80fcc:	4b07      	ldr	r3, [pc, #28]	; (80fec <iprintf+0x24>)
   80fce:	b082      	sub	sp, #8
   80fd0:	ac04      	add	r4, sp, #16
   80fd2:	f854 2b04 	ldr.w	r2, [r4], #4
   80fd6:	6818      	ldr	r0, [r3, #0]
   80fd8:	4623      	mov	r3, r4
   80fda:	6881      	ldr	r1, [r0, #8]
   80fdc:	9401      	str	r4, [sp, #4]
   80fde:	f000 f965 	bl	812ac <_vfiprintf_r>
   80fe2:	b002      	add	sp, #8
   80fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80fe8:	b004      	add	sp, #16
   80fea:	4770      	bx	lr
   80fec:	2007015c 	.word	0x2007015c

00080ff0 <memset>:
   80ff0:	b470      	push	{r4, r5, r6}
   80ff2:	0786      	lsls	r6, r0, #30
   80ff4:	d046      	beq.n	81084 <memset+0x94>
   80ff6:	1e54      	subs	r4, r2, #1
   80ff8:	2a00      	cmp	r2, #0
   80ffa:	d041      	beq.n	81080 <memset+0x90>
   80ffc:	b2ca      	uxtb	r2, r1
   80ffe:	4603      	mov	r3, r0
   81000:	e002      	b.n	81008 <memset+0x18>
   81002:	f114 34ff 	adds.w	r4, r4, #4294967295
   81006:	d33b      	bcc.n	81080 <memset+0x90>
   81008:	f803 2b01 	strb.w	r2, [r3], #1
   8100c:	079d      	lsls	r5, r3, #30
   8100e:	d1f8      	bne.n	81002 <memset+0x12>
   81010:	2c03      	cmp	r4, #3
   81012:	d92e      	bls.n	81072 <memset+0x82>
   81014:	b2cd      	uxtb	r5, r1
   81016:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8101a:	2c0f      	cmp	r4, #15
   8101c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81020:	d919      	bls.n	81056 <memset+0x66>
   81022:	4626      	mov	r6, r4
   81024:	f103 0210 	add.w	r2, r3, #16
   81028:	3e10      	subs	r6, #16
   8102a:	2e0f      	cmp	r6, #15
   8102c:	f842 5c10 	str.w	r5, [r2, #-16]
   81030:	f842 5c0c 	str.w	r5, [r2, #-12]
   81034:	f842 5c08 	str.w	r5, [r2, #-8]
   81038:	f842 5c04 	str.w	r5, [r2, #-4]
   8103c:	f102 0210 	add.w	r2, r2, #16
   81040:	d8f2      	bhi.n	81028 <memset+0x38>
   81042:	f1a4 0210 	sub.w	r2, r4, #16
   81046:	f022 020f 	bic.w	r2, r2, #15
   8104a:	f004 040f 	and.w	r4, r4, #15
   8104e:	3210      	adds	r2, #16
   81050:	2c03      	cmp	r4, #3
   81052:	4413      	add	r3, r2
   81054:	d90d      	bls.n	81072 <memset+0x82>
   81056:	461e      	mov	r6, r3
   81058:	4622      	mov	r2, r4
   8105a:	3a04      	subs	r2, #4
   8105c:	2a03      	cmp	r2, #3
   8105e:	f846 5b04 	str.w	r5, [r6], #4
   81062:	d8fa      	bhi.n	8105a <memset+0x6a>
   81064:	1f22      	subs	r2, r4, #4
   81066:	f022 0203 	bic.w	r2, r2, #3
   8106a:	3204      	adds	r2, #4
   8106c:	4413      	add	r3, r2
   8106e:	f004 0403 	and.w	r4, r4, #3
   81072:	b12c      	cbz	r4, 81080 <memset+0x90>
   81074:	b2c9      	uxtb	r1, r1
   81076:	441c      	add	r4, r3
   81078:	f803 1b01 	strb.w	r1, [r3], #1
   8107c:	429c      	cmp	r4, r3
   8107e:	d1fb      	bne.n	81078 <memset+0x88>
   81080:	bc70      	pop	{r4, r5, r6}
   81082:	4770      	bx	lr
   81084:	4614      	mov	r4, r2
   81086:	4603      	mov	r3, r0
   81088:	e7c2      	b.n	81010 <memset+0x20>
   8108a:	bf00      	nop

0008108c <setbuf>:
   8108c:	2900      	cmp	r1, #0
   8108e:	bf0c      	ite	eq
   81090:	2202      	moveq	r2, #2
   81092:	2200      	movne	r2, #0
   81094:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81098:	f000 b800 	b.w	8109c <setvbuf>

0008109c <setvbuf>:
   8109c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   810a0:	4d61      	ldr	r5, [pc, #388]	; (81228 <setvbuf+0x18c>)
   810a2:	b083      	sub	sp, #12
   810a4:	682d      	ldr	r5, [r5, #0]
   810a6:	4604      	mov	r4, r0
   810a8:	460f      	mov	r7, r1
   810aa:	4690      	mov	r8, r2
   810ac:	461e      	mov	r6, r3
   810ae:	b115      	cbz	r5, 810b6 <setvbuf+0x1a>
   810b0:	6bab      	ldr	r3, [r5, #56]	; 0x38
   810b2:	2b00      	cmp	r3, #0
   810b4:	d064      	beq.n	81180 <setvbuf+0xe4>
   810b6:	f1b8 0f02 	cmp.w	r8, #2
   810ba:	d006      	beq.n	810ca <setvbuf+0x2e>
   810bc:	f1b8 0f01 	cmp.w	r8, #1
   810c0:	f200 809f 	bhi.w	81202 <setvbuf+0x166>
   810c4:	2e00      	cmp	r6, #0
   810c6:	f2c0 809c 	blt.w	81202 <setvbuf+0x166>
   810ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
   810cc:	07d8      	lsls	r0, r3, #31
   810ce:	d534      	bpl.n	8113a <setvbuf+0x9e>
   810d0:	4621      	mov	r1, r4
   810d2:	4628      	mov	r0, r5
   810d4:	f001 f882 	bl	821dc <_fflush_r>
   810d8:	6b21      	ldr	r1, [r4, #48]	; 0x30
   810da:	b141      	cbz	r1, 810ee <setvbuf+0x52>
   810dc:	f104 0340 	add.w	r3, r4, #64	; 0x40
   810e0:	4299      	cmp	r1, r3
   810e2:	d002      	beq.n	810ea <setvbuf+0x4e>
   810e4:	4628      	mov	r0, r5
   810e6:	f001 f9f7 	bl	824d8 <_free_r>
   810ea:	2300      	movs	r3, #0
   810ec:	6323      	str	r3, [r4, #48]	; 0x30
   810ee:	2200      	movs	r2, #0
   810f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   810f4:	61a2      	str	r2, [r4, #24]
   810f6:	6062      	str	r2, [r4, #4]
   810f8:	061a      	lsls	r2, r3, #24
   810fa:	d43a      	bmi.n	81172 <setvbuf+0xd6>
   810fc:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81100:	f023 0303 	bic.w	r3, r3, #3
   81104:	f1b8 0f02 	cmp.w	r8, #2
   81108:	81a3      	strh	r3, [r4, #12]
   8110a:	d01d      	beq.n	81148 <setvbuf+0xac>
   8110c:	ab01      	add	r3, sp, #4
   8110e:	466a      	mov	r2, sp
   81110:	4621      	mov	r1, r4
   81112:	4628      	mov	r0, r5
   81114:	f001 fc7e 	bl	82a14 <__swhatbuf_r>
   81118:	89a3      	ldrh	r3, [r4, #12]
   8111a:	4318      	orrs	r0, r3
   8111c:	81a0      	strh	r0, [r4, #12]
   8111e:	2e00      	cmp	r6, #0
   81120:	d132      	bne.n	81188 <setvbuf+0xec>
   81122:	9e00      	ldr	r6, [sp, #0]
   81124:	4630      	mov	r0, r6
   81126:	f001 fced 	bl	82b04 <malloc>
   8112a:	4607      	mov	r7, r0
   8112c:	2800      	cmp	r0, #0
   8112e:	d06b      	beq.n	81208 <setvbuf+0x16c>
   81130:	89a3      	ldrh	r3, [r4, #12]
   81132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81136:	81a3      	strh	r3, [r4, #12]
   81138:	e028      	b.n	8118c <setvbuf+0xf0>
   8113a:	89a3      	ldrh	r3, [r4, #12]
   8113c:	0599      	lsls	r1, r3, #22
   8113e:	d4c7      	bmi.n	810d0 <setvbuf+0x34>
   81140:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81142:	f001 fc63 	bl	82a0c <__retarget_lock_acquire_recursive>
   81146:	e7c3      	b.n	810d0 <setvbuf+0x34>
   81148:	2500      	movs	r5, #0
   8114a:	2600      	movs	r6, #0
   8114c:	2001      	movs	r0, #1
   8114e:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81150:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81154:	f043 0302 	orr.w	r3, r3, #2
   81158:	60a6      	str	r6, [r4, #8]
   8115a:	07ce      	lsls	r6, r1, #31
   8115c:	81a3      	strh	r3, [r4, #12]
   8115e:	6160      	str	r0, [r4, #20]
   81160:	6022      	str	r2, [r4, #0]
   81162:	6122      	str	r2, [r4, #16]
   81164:	d401      	bmi.n	8116a <setvbuf+0xce>
   81166:	0598      	lsls	r0, r3, #22
   81168:	d53e      	bpl.n	811e8 <setvbuf+0x14c>
   8116a:	4628      	mov	r0, r5
   8116c:	b003      	add	sp, #12
   8116e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81172:	6921      	ldr	r1, [r4, #16]
   81174:	4628      	mov	r0, r5
   81176:	f001 f9af 	bl	824d8 <_free_r>
   8117a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8117e:	e7bd      	b.n	810fc <setvbuf+0x60>
   81180:	4628      	mov	r0, r5
   81182:	f001 f883 	bl	8228c <__sinit>
   81186:	e796      	b.n	810b6 <setvbuf+0x1a>
   81188:	2f00      	cmp	r7, #0
   8118a:	d0cb      	beq.n	81124 <setvbuf+0x88>
   8118c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8118e:	2b00      	cmp	r3, #0
   81190:	d033      	beq.n	811fa <setvbuf+0x15e>
   81192:	9b00      	ldr	r3, [sp, #0]
   81194:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81198:	429e      	cmp	r6, r3
   8119a:	bf1c      	itt	ne
   8119c:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   811a0:	81a2      	strhne	r2, [r4, #12]
   811a2:	f1b8 0f01 	cmp.w	r8, #1
   811a6:	bf04      	itt	eq
   811a8:	f042 0201 	orreq.w	r2, r2, #1
   811ac:	81a2      	strheq	r2, [r4, #12]
   811ae:	b292      	uxth	r2, r2
   811b0:	f012 0308 	ands.w	r3, r2, #8
   811b4:	6027      	str	r7, [r4, #0]
   811b6:	6127      	str	r7, [r4, #16]
   811b8:	6166      	str	r6, [r4, #20]
   811ba:	d00e      	beq.n	811da <setvbuf+0x13e>
   811bc:	07d1      	lsls	r1, r2, #31
   811be:	d51a      	bpl.n	811f6 <setvbuf+0x15a>
   811c0:	2300      	movs	r3, #0
   811c2:	6e65      	ldr	r5, [r4, #100]	; 0x64
   811c4:	4276      	negs	r6, r6
   811c6:	f015 0501 	ands.w	r5, r5, #1
   811ca:	61a6      	str	r6, [r4, #24]
   811cc:	60a3      	str	r3, [r4, #8]
   811ce:	d009      	beq.n	811e4 <setvbuf+0x148>
   811d0:	2500      	movs	r5, #0
   811d2:	4628      	mov	r0, r5
   811d4:	b003      	add	sp, #12
   811d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   811da:	60a3      	str	r3, [r4, #8]
   811dc:	6e65      	ldr	r5, [r4, #100]	; 0x64
   811de:	f015 0501 	ands.w	r5, r5, #1
   811e2:	d1f5      	bne.n	811d0 <setvbuf+0x134>
   811e4:	0593      	lsls	r3, r2, #22
   811e6:	d4c0      	bmi.n	8116a <setvbuf+0xce>
   811e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   811ea:	f001 fc11 	bl	82a10 <__retarget_lock_release_recursive>
   811ee:	4628      	mov	r0, r5
   811f0:	b003      	add	sp, #12
   811f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   811f6:	60a6      	str	r6, [r4, #8]
   811f8:	e7f0      	b.n	811dc <setvbuf+0x140>
   811fa:	4628      	mov	r0, r5
   811fc:	f001 f846 	bl	8228c <__sinit>
   81200:	e7c7      	b.n	81192 <setvbuf+0xf6>
   81202:	f04f 35ff 	mov.w	r5, #4294967295
   81206:	e7b0      	b.n	8116a <setvbuf+0xce>
   81208:	f8dd 9000 	ldr.w	r9, [sp]
   8120c:	45b1      	cmp	r9, r6
   8120e:	d004      	beq.n	8121a <setvbuf+0x17e>
   81210:	4648      	mov	r0, r9
   81212:	f001 fc77 	bl	82b04 <malloc>
   81216:	4607      	mov	r7, r0
   81218:	b920      	cbnz	r0, 81224 <setvbuf+0x188>
   8121a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8121e:	f04f 35ff 	mov.w	r5, #4294967295
   81222:	e792      	b.n	8114a <setvbuf+0xae>
   81224:	464e      	mov	r6, r9
   81226:	e783      	b.n	81130 <setvbuf+0x94>
   81228:	2007015c 	.word	0x2007015c

0008122c <__sprint_r.part.0>:
   8122c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81230:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81232:	4693      	mov	fp, r2
   81234:	049c      	lsls	r4, r3, #18
   81236:	d52f      	bpl.n	81298 <__sprint_r.part.0+0x6c>
   81238:	6893      	ldr	r3, [r2, #8]
   8123a:	6812      	ldr	r2, [r2, #0]
   8123c:	b353      	cbz	r3, 81294 <__sprint_r.part.0+0x68>
   8123e:	460e      	mov	r6, r1
   81240:	4607      	mov	r7, r0
   81242:	f102 0908 	add.w	r9, r2, #8
   81246:	e919 0420 	ldmdb	r9, {r5, sl}
   8124a:	ea5f 089a 	movs.w	r8, sl, lsr #2
   8124e:	d017      	beq.n	81280 <__sprint_r.part.0+0x54>
   81250:	2400      	movs	r4, #0
   81252:	3d04      	subs	r5, #4
   81254:	e001      	b.n	8125a <__sprint_r.part.0+0x2e>
   81256:	45a0      	cmp	r8, r4
   81258:	d010      	beq.n	8127c <__sprint_r.part.0+0x50>
   8125a:	4632      	mov	r2, r6
   8125c:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81260:	4638      	mov	r0, r7
   81262:	f001 f8b5 	bl	823d0 <_fputwc_r>
   81266:	1c43      	adds	r3, r0, #1
   81268:	f104 0401 	add.w	r4, r4, #1
   8126c:	d1f3      	bne.n	81256 <__sprint_r.part.0+0x2a>
   8126e:	2300      	movs	r3, #0
   81270:	f8cb 3008 	str.w	r3, [fp, #8]
   81274:	f8cb 3004 	str.w	r3, [fp, #4]
   81278:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8127c:	f8db 3008 	ldr.w	r3, [fp, #8]
   81280:	f02a 0a03 	bic.w	sl, sl, #3
   81284:	eba3 030a 	sub.w	r3, r3, sl
   81288:	f8cb 3008 	str.w	r3, [fp, #8]
   8128c:	f109 0908 	add.w	r9, r9, #8
   81290:	2b00      	cmp	r3, #0
   81292:	d1d8      	bne.n	81246 <__sprint_r.part.0+0x1a>
   81294:	2000      	movs	r0, #0
   81296:	e7ea      	b.n	8126e <__sprint_r.part.0+0x42>
   81298:	f001 fa04 	bl	826a4 <__sfvwrite_r>
   8129c:	2300      	movs	r3, #0
   8129e:	f8cb 3008 	str.w	r3, [fp, #8]
   812a2:	f8cb 3004 	str.w	r3, [fp, #4]
   812a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812aa:	bf00      	nop

000812ac <_vfiprintf_r>:
   812ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812b0:	b0ad      	sub	sp, #180	; 0xb4
   812b2:	461d      	mov	r5, r3
   812b4:	468b      	mov	fp, r1
   812b6:	4690      	mov	r8, r2
   812b8:	9307      	str	r3, [sp, #28]
   812ba:	9006      	str	r0, [sp, #24]
   812bc:	b118      	cbz	r0, 812c6 <_vfiprintf_r+0x1a>
   812be:	6b83      	ldr	r3, [r0, #56]	; 0x38
   812c0:	2b00      	cmp	r3, #0
   812c2:	f000 80f3 	beq.w	814ac <_vfiprintf_r+0x200>
   812c6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   812ca:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   812ce:	07df      	lsls	r7, r3, #31
   812d0:	b281      	uxth	r1, r0
   812d2:	d402      	bmi.n	812da <_vfiprintf_r+0x2e>
   812d4:	058e      	lsls	r6, r1, #22
   812d6:	f140 80fc 	bpl.w	814d2 <_vfiprintf_r+0x226>
   812da:	048c      	lsls	r4, r1, #18
   812dc:	d40a      	bmi.n	812f4 <_vfiprintf_r+0x48>
   812de:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   812e2:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   812e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   812ea:	f8ab 100c 	strh.w	r1, [fp, #12]
   812ee:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   812f2:	b289      	uxth	r1, r1
   812f4:	0708      	lsls	r0, r1, #28
   812f6:	f140 80b3 	bpl.w	81460 <_vfiprintf_r+0x1b4>
   812fa:	f8db 3010 	ldr.w	r3, [fp, #16]
   812fe:	2b00      	cmp	r3, #0
   81300:	f000 80ae 	beq.w	81460 <_vfiprintf_r+0x1b4>
   81304:	f001 031a 	and.w	r3, r1, #26
   81308:	2b0a      	cmp	r3, #10
   8130a:	f000 80b5 	beq.w	81478 <_vfiprintf_r+0x1cc>
   8130e:	2300      	movs	r3, #0
   81310:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81314:	46d1      	mov	r9, sl
   81316:	930b      	str	r3, [sp, #44]	; 0x2c
   81318:	9303      	str	r3, [sp, #12]
   8131a:	9311      	str	r3, [sp, #68]	; 0x44
   8131c:	9310      	str	r3, [sp, #64]	; 0x40
   8131e:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81322:	f8cd b010 	str.w	fp, [sp, #16]
   81326:	f898 3000 	ldrb.w	r3, [r8]
   8132a:	4644      	mov	r4, r8
   8132c:	b1fb      	cbz	r3, 8136e <_vfiprintf_r+0xc2>
   8132e:	2b25      	cmp	r3, #37	; 0x25
   81330:	d102      	bne.n	81338 <_vfiprintf_r+0x8c>
   81332:	e01c      	b.n	8136e <_vfiprintf_r+0xc2>
   81334:	2b25      	cmp	r3, #37	; 0x25
   81336:	d003      	beq.n	81340 <_vfiprintf_r+0x94>
   81338:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8133c:	2b00      	cmp	r3, #0
   8133e:	d1f9      	bne.n	81334 <_vfiprintf_r+0x88>
   81340:	eba4 0508 	sub.w	r5, r4, r8
   81344:	b19d      	cbz	r5, 8136e <_vfiprintf_r+0xc2>
   81346:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81348:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8134a:	3301      	adds	r3, #1
   8134c:	442a      	add	r2, r5
   8134e:	2b07      	cmp	r3, #7
   81350:	f8c9 8000 	str.w	r8, [r9]
   81354:	f8c9 5004 	str.w	r5, [r9, #4]
   81358:	9211      	str	r2, [sp, #68]	; 0x44
   8135a:	9310      	str	r3, [sp, #64]	; 0x40
   8135c:	dd7a      	ble.n	81454 <_vfiprintf_r+0x1a8>
   8135e:	2a00      	cmp	r2, #0
   81360:	f040 84b5 	bne.w	81cce <_vfiprintf_r+0xa22>
   81364:	46d1      	mov	r9, sl
   81366:	9b03      	ldr	r3, [sp, #12]
   81368:	9210      	str	r2, [sp, #64]	; 0x40
   8136a:	442b      	add	r3, r5
   8136c:	9303      	str	r3, [sp, #12]
   8136e:	7823      	ldrb	r3, [r4, #0]
   81370:	2b00      	cmp	r3, #0
   81372:	f000 83e5 	beq.w	81b40 <_vfiprintf_r+0x894>
   81376:	2000      	movs	r0, #0
   81378:	f04f 0300 	mov.w	r3, #0
   8137c:	f104 0801 	add.w	r8, r4, #1
   81380:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81384:	7862      	ldrb	r2, [r4, #1]
   81386:	4606      	mov	r6, r0
   81388:	4605      	mov	r5, r0
   8138a:	4603      	mov	r3, r0
   8138c:	f04f 34ff 	mov.w	r4, #4294967295
   81390:	f108 0801 	add.w	r8, r8, #1
   81394:	f1a2 0120 	sub.w	r1, r2, #32
   81398:	2958      	cmp	r1, #88	; 0x58
   8139a:	f200 82d9 	bhi.w	81950 <_vfiprintf_r+0x6a4>
   8139e:	e8df f011 	tbh	[pc, r1, lsl #1]
   813a2:	0228      	.short	0x0228
   813a4:	02d702d7 	.word	0x02d702d7
   813a8:	02d70230 	.word	0x02d70230
   813ac:	02d702d7 	.word	0x02d702d7
   813b0:	02d702d7 	.word	0x02d702d7
   813b4:	00a002d7 	.word	0x00a002d7
   813b8:	02d70288 	.word	0x02d70288
   813bc:	02b800a8 	.word	0x02b800a8
   813c0:	01a602d7 	.word	0x01a602d7
   813c4:	01ab01ab 	.word	0x01ab01ab
   813c8:	01ab01ab 	.word	0x01ab01ab
   813cc:	01ab01ab 	.word	0x01ab01ab
   813d0:	01ab01ab 	.word	0x01ab01ab
   813d4:	02d701ab 	.word	0x02d701ab
   813d8:	02d702d7 	.word	0x02d702d7
   813dc:	02d702d7 	.word	0x02d702d7
   813e0:	02d702d7 	.word	0x02d702d7
   813e4:	02d702d7 	.word	0x02d702d7
   813e8:	01b902d7 	.word	0x01b902d7
   813ec:	02d702d7 	.word	0x02d702d7
   813f0:	02d702d7 	.word	0x02d702d7
   813f4:	02d702d7 	.word	0x02d702d7
   813f8:	02d702d7 	.word	0x02d702d7
   813fc:	02d702d7 	.word	0x02d702d7
   81400:	02d7019e 	.word	0x02d7019e
   81404:	02d702d7 	.word	0x02d702d7
   81408:	02d702d7 	.word	0x02d702d7
   8140c:	02d701a2 	.word	0x02d701a2
   81410:	025a02d7 	.word	0x025a02d7
   81414:	02d702d7 	.word	0x02d702d7
   81418:	02d702d7 	.word	0x02d702d7
   8141c:	02d702d7 	.word	0x02d702d7
   81420:	02d702d7 	.word	0x02d702d7
   81424:	02d702d7 	.word	0x02d702d7
   81428:	02220261 	.word	0x02220261
   8142c:	02d702d7 	.word	0x02d702d7
   81430:	027602d7 	.word	0x027602d7
   81434:	02d70222 	.word	0x02d70222
   81438:	027b02d7 	.word	0x027b02d7
   8143c:	01fc02d7 	.word	0x01fc02d7
   81440:	02100189 	.word	0x02100189
   81444:	02d702d2 	.word	0x02d702d2
   81448:	02d70295 	.word	0x02d70295
   8144c:	02d700ad 	.word	0x02d700ad
   81450:	023502d7 	.word	0x023502d7
   81454:	f109 0908 	add.w	r9, r9, #8
   81458:	9b03      	ldr	r3, [sp, #12]
   8145a:	442b      	add	r3, r5
   8145c:	9303      	str	r3, [sp, #12]
   8145e:	e786      	b.n	8136e <_vfiprintf_r+0xc2>
   81460:	4659      	mov	r1, fp
   81462:	9806      	ldr	r0, [sp, #24]
   81464:	f000 fdaa 	bl	81fbc <__swsetup_r>
   81468:	bb18      	cbnz	r0, 814b2 <_vfiprintf_r+0x206>
   8146a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8146e:	f001 031a 	and.w	r3, r1, #26
   81472:	2b0a      	cmp	r3, #10
   81474:	f47f af4b 	bne.w	8130e <_vfiprintf_r+0x62>
   81478:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   8147c:	2b00      	cmp	r3, #0
   8147e:	f6ff af46 	blt.w	8130e <_vfiprintf_r+0x62>
   81482:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81486:	07db      	lsls	r3, r3, #31
   81488:	d405      	bmi.n	81496 <_vfiprintf_r+0x1ea>
   8148a:	058f      	lsls	r7, r1, #22
   8148c:	d403      	bmi.n	81496 <_vfiprintf_r+0x1ea>
   8148e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81492:	f001 fabd 	bl	82a10 <__retarget_lock_release_recursive>
   81496:	462b      	mov	r3, r5
   81498:	4642      	mov	r2, r8
   8149a:	4659      	mov	r1, fp
   8149c:	9806      	ldr	r0, [sp, #24]
   8149e:	f000 fd49 	bl	81f34 <__sbprintf>
   814a2:	9003      	str	r0, [sp, #12]
   814a4:	9803      	ldr	r0, [sp, #12]
   814a6:	b02d      	add	sp, #180	; 0xb4
   814a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814ac:	f000 feee 	bl	8228c <__sinit>
   814b0:	e709      	b.n	812c6 <_vfiprintf_r+0x1a>
   814b2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   814b6:	07d9      	lsls	r1, r3, #31
   814b8:	d404      	bmi.n	814c4 <_vfiprintf_r+0x218>
   814ba:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   814be:	059a      	lsls	r2, r3, #22
   814c0:	f140 84ae 	bpl.w	81e20 <_vfiprintf_r+0xb74>
   814c4:	f04f 33ff 	mov.w	r3, #4294967295
   814c8:	9303      	str	r3, [sp, #12]
   814ca:	9803      	ldr	r0, [sp, #12]
   814cc:	b02d      	add	sp, #180	; 0xb4
   814ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   814d2:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   814d6:	f001 fa99 	bl	82a0c <__retarget_lock_acquire_recursive>
   814da:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   814de:	b281      	uxth	r1, r0
   814e0:	e6fb      	b.n	812da <_vfiprintf_r+0x2e>
   814e2:	9907      	ldr	r1, [sp, #28]
   814e4:	460a      	mov	r2, r1
   814e6:	680d      	ldr	r5, [r1, #0]
   814e8:	3204      	adds	r2, #4
   814ea:	2d00      	cmp	r5, #0
   814ec:	9207      	str	r2, [sp, #28]
   814ee:	da02      	bge.n	814f6 <_vfiprintf_r+0x24a>
   814f0:	426d      	negs	r5, r5
   814f2:	f043 0304 	orr.w	r3, r3, #4
   814f6:	f898 2000 	ldrb.w	r2, [r8]
   814fa:	e749      	b.n	81390 <_vfiprintf_r+0xe4>
   814fc:	9508      	str	r5, [sp, #32]
   814fe:	069e      	lsls	r6, r3, #26
   81500:	f100 845a 	bmi.w	81db8 <_vfiprintf_r+0xb0c>
   81504:	9907      	ldr	r1, [sp, #28]
   81506:	06dd      	lsls	r5, r3, #27
   81508:	460a      	mov	r2, r1
   8150a:	f100 83ef 	bmi.w	81cec <_vfiprintf_r+0xa40>
   8150e:	0658      	lsls	r0, r3, #25
   81510:	f140 83ec 	bpl.w	81cec <_vfiprintf_r+0xa40>
   81514:	2700      	movs	r7, #0
   81516:	2201      	movs	r2, #1
   81518:	880e      	ldrh	r6, [r1, #0]
   8151a:	3104      	adds	r1, #4
   8151c:	9107      	str	r1, [sp, #28]
   8151e:	f04f 0100 	mov.w	r1, #0
   81522:	2500      	movs	r5, #0
   81524:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81528:	1c61      	adds	r1, r4, #1
   8152a:	f000 8117 	beq.w	8175c <_vfiprintf_r+0x4b0>
   8152e:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81532:	9102      	str	r1, [sp, #8]
   81534:	ea56 0107 	orrs.w	r1, r6, r7
   81538:	f040 8115 	bne.w	81766 <_vfiprintf_r+0x4ba>
   8153c:	2c00      	cmp	r4, #0
   8153e:	f040 835b 	bne.w	81bf8 <_vfiprintf_r+0x94c>
   81542:	2a00      	cmp	r2, #0
   81544:	f040 83b6 	bne.w	81cb4 <_vfiprintf_r+0xa08>
   81548:	f013 0301 	ands.w	r3, r3, #1
   8154c:	9305      	str	r3, [sp, #20]
   8154e:	f000 8455 	beq.w	81dfc <_vfiprintf_r+0xb50>
   81552:	2330      	movs	r3, #48	; 0x30
   81554:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81558:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   8155c:	9b05      	ldr	r3, [sp, #20]
   8155e:	42a3      	cmp	r3, r4
   81560:	bfb8      	it	lt
   81562:	4623      	movlt	r3, r4
   81564:	9301      	str	r3, [sp, #4]
   81566:	b10d      	cbz	r5, 8156c <_vfiprintf_r+0x2c0>
   81568:	3301      	adds	r3, #1
   8156a:	9301      	str	r3, [sp, #4]
   8156c:	9b02      	ldr	r3, [sp, #8]
   8156e:	f013 0302 	ands.w	r3, r3, #2
   81572:	9309      	str	r3, [sp, #36]	; 0x24
   81574:	d002      	beq.n	8157c <_vfiprintf_r+0x2d0>
   81576:	9b01      	ldr	r3, [sp, #4]
   81578:	3302      	adds	r3, #2
   8157a:	9301      	str	r3, [sp, #4]
   8157c:	9b02      	ldr	r3, [sp, #8]
   8157e:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81582:	930a      	str	r3, [sp, #40]	; 0x28
   81584:	f040 8215 	bne.w	819b2 <_vfiprintf_r+0x706>
   81588:	9b08      	ldr	r3, [sp, #32]
   8158a:	9a01      	ldr	r2, [sp, #4]
   8158c:	1a9d      	subs	r5, r3, r2
   8158e:	2d00      	cmp	r5, #0
   81590:	f340 820f 	ble.w	819b2 <_vfiprintf_r+0x706>
   81594:	2d10      	cmp	r5, #16
   81596:	f340 8484 	ble.w	81ea2 <_vfiprintf_r+0xbf6>
   8159a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8159c:	46ce      	mov	lr, r9
   8159e:	2710      	movs	r7, #16
   815a0:	46a1      	mov	r9, r4
   815a2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   815a4:	4ec5      	ldr	r6, [pc, #788]	; (818bc <_vfiprintf_r+0x610>)
   815a6:	4619      	mov	r1, r3
   815a8:	9c06      	ldr	r4, [sp, #24]
   815aa:	e007      	b.n	815bc <_vfiprintf_r+0x310>
   815ac:	f101 0c02 	add.w	ip, r1, #2
   815b0:	4601      	mov	r1, r0
   815b2:	f10e 0e08 	add.w	lr, lr, #8
   815b6:	3d10      	subs	r5, #16
   815b8:	2d10      	cmp	r5, #16
   815ba:	dd11      	ble.n	815e0 <_vfiprintf_r+0x334>
   815bc:	1c48      	adds	r0, r1, #1
   815be:	3210      	adds	r2, #16
   815c0:	2807      	cmp	r0, #7
   815c2:	9211      	str	r2, [sp, #68]	; 0x44
   815c4:	e88e 00c0 	stmia.w	lr, {r6, r7}
   815c8:	9010      	str	r0, [sp, #64]	; 0x40
   815ca:	ddef      	ble.n	815ac <_vfiprintf_r+0x300>
   815cc:	2a00      	cmp	r2, #0
   815ce:	f040 81d9 	bne.w	81984 <_vfiprintf_r+0x6d8>
   815d2:	3d10      	subs	r5, #16
   815d4:	2d10      	cmp	r5, #16
   815d6:	4611      	mov	r1, r2
   815d8:	f04f 0c01 	mov.w	ip, #1
   815dc:	46d6      	mov	lr, sl
   815de:	dced      	bgt.n	815bc <_vfiprintf_r+0x310>
   815e0:	464c      	mov	r4, r9
   815e2:	4661      	mov	r1, ip
   815e4:	46f1      	mov	r9, lr
   815e6:	442a      	add	r2, r5
   815e8:	2907      	cmp	r1, #7
   815ea:	9211      	str	r2, [sp, #68]	; 0x44
   815ec:	f8c9 6000 	str.w	r6, [r9]
   815f0:	f8c9 5004 	str.w	r5, [r9, #4]
   815f4:	9110      	str	r1, [sp, #64]	; 0x40
   815f6:	f300 82eb 	bgt.w	81bd0 <_vfiprintf_r+0x924>
   815fa:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   815fe:	f109 0908 	add.w	r9, r9, #8
   81602:	1c48      	adds	r0, r1, #1
   81604:	2d00      	cmp	r5, #0
   81606:	f040 81dc 	bne.w	819c2 <_vfiprintf_r+0x716>
   8160a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8160c:	2b00      	cmp	r3, #0
   8160e:	f000 81f6 	beq.w	819fe <_vfiprintf_r+0x752>
   81612:	2102      	movs	r1, #2
   81614:	ab0e      	add	r3, sp, #56	; 0x38
   81616:	440a      	add	r2, r1
   81618:	2807      	cmp	r0, #7
   8161a:	9211      	str	r2, [sp, #68]	; 0x44
   8161c:	9010      	str	r0, [sp, #64]	; 0x40
   8161e:	f8c9 1004 	str.w	r1, [r9, #4]
   81622:	f8c9 3000 	str.w	r3, [r9]
   81626:	f340 81e6 	ble.w	819f6 <_vfiprintf_r+0x74a>
   8162a:	2a00      	cmp	r2, #0
   8162c:	f040 8395 	bne.w	81d5a <_vfiprintf_r+0xaae>
   81630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81632:	2001      	movs	r0, #1
   81634:	2b80      	cmp	r3, #128	; 0x80
   81636:	4611      	mov	r1, r2
   81638:	46d1      	mov	r9, sl
   8163a:	f040 81e4 	bne.w	81a06 <_vfiprintf_r+0x75a>
   8163e:	9b08      	ldr	r3, [sp, #32]
   81640:	9d01      	ldr	r5, [sp, #4]
   81642:	1b5e      	subs	r6, r3, r5
   81644:	2e00      	cmp	r6, #0
   81646:	f340 81de 	ble.w	81a06 <_vfiprintf_r+0x75a>
   8164a:	2e10      	cmp	r6, #16
   8164c:	f340 843c 	ble.w	81ec8 <_vfiprintf_r+0xc1c>
   81650:	46cc      	mov	ip, r9
   81652:	2710      	movs	r7, #16
   81654:	46a1      	mov	r9, r4
   81656:	4d9a      	ldr	r5, [pc, #616]	; (818c0 <_vfiprintf_r+0x614>)
   81658:	9c06      	ldr	r4, [sp, #24]
   8165a:	e007      	b.n	8166c <_vfiprintf_r+0x3c0>
   8165c:	f101 0e02 	add.w	lr, r1, #2
   81660:	4601      	mov	r1, r0
   81662:	f10c 0c08 	add.w	ip, ip, #8
   81666:	3e10      	subs	r6, #16
   81668:	2e10      	cmp	r6, #16
   8166a:	dd11      	ble.n	81690 <_vfiprintf_r+0x3e4>
   8166c:	1c48      	adds	r0, r1, #1
   8166e:	3210      	adds	r2, #16
   81670:	2807      	cmp	r0, #7
   81672:	9211      	str	r2, [sp, #68]	; 0x44
   81674:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81678:	9010      	str	r0, [sp, #64]	; 0x40
   8167a:	ddef      	ble.n	8165c <_vfiprintf_r+0x3b0>
   8167c:	2a00      	cmp	r2, #0
   8167e:	f040 829b 	bne.w	81bb8 <_vfiprintf_r+0x90c>
   81682:	3e10      	subs	r6, #16
   81684:	2e10      	cmp	r6, #16
   81686:	f04f 0e01 	mov.w	lr, #1
   8168a:	4611      	mov	r1, r2
   8168c:	46d4      	mov	ip, sl
   8168e:	dced      	bgt.n	8166c <_vfiprintf_r+0x3c0>
   81690:	464c      	mov	r4, r9
   81692:	46e1      	mov	r9, ip
   81694:	4432      	add	r2, r6
   81696:	f1be 0f07 	cmp.w	lr, #7
   8169a:	9211      	str	r2, [sp, #68]	; 0x44
   8169c:	e889 0060 	stmia.w	r9, {r5, r6}
   816a0:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   816a4:	f300 8366 	bgt.w	81d74 <_vfiprintf_r+0xac8>
   816a8:	f109 0908 	add.w	r9, r9, #8
   816ac:	f10e 0001 	add.w	r0, lr, #1
   816b0:	4671      	mov	r1, lr
   816b2:	e1a8      	b.n	81a06 <_vfiprintf_r+0x75a>
   816b4:	9508      	str	r5, [sp, #32]
   816b6:	f013 0220 	ands.w	r2, r3, #32
   816ba:	f040 8389 	bne.w	81dd0 <_vfiprintf_r+0xb24>
   816be:	f013 0110 	ands.w	r1, r3, #16
   816c2:	f040 8319 	bne.w	81cf8 <_vfiprintf_r+0xa4c>
   816c6:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   816ca:	f000 8315 	beq.w	81cf8 <_vfiprintf_r+0xa4c>
   816ce:	9807      	ldr	r0, [sp, #28]
   816d0:	460a      	mov	r2, r1
   816d2:	4601      	mov	r1, r0
   816d4:	3104      	adds	r1, #4
   816d6:	8806      	ldrh	r6, [r0, #0]
   816d8:	2700      	movs	r7, #0
   816da:	9107      	str	r1, [sp, #28]
   816dc:	e71f      	b.n	8151e <_vfiprintf_r+0x272>
   816de:	9508      	str	r5, [sp, #32]
   816e0:	f043 0310 	orr.w	r3, r3, #16
   816e4:	e7e7      	b.n	816b6 <_vfiprintf_r+0x40a>
   816e6:	9508      	str	r5, [sp, #32]
   816e8:	f043 0310 	orr.w	r3, r3, #16
   816ec:	e707      	b.n	814fe <_vfiprintf_r+0x252>
   816ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   816f2:	f898 2000 	ldrb.w	r2, [r8]
   816f6:	e64b      	b.n	81390 <_vfiprintf_r+0xe4>
   816f8:	2500      	movs	r5, #0
   816fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   816fe:	f818 2b01 	ldrb.w	r2, [r8], #1
   81702:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81706:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   8170a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8170e:	2909      	cmp	r1, #9
   81710:	d9f5      	bls.n	816fe <_vfiprintf_r+0x452>
   81712:	e63f      	b.n	81394 <_vfiprintf_r+0xe8>
   81714:	9508      	str	r5, [sp, #32]
   81716:	2800      	cmp	r0, #0
   81718:	f040 8402 	bne.w	81f20 <_vfiprintf_r+0xc74>
   8171c:	f043 0310 	orr.w	r3, r3, #16
   81720:	069e      	lsls	r6, r3, #26
   81722:	f100 833d 	bmi.w	81da0 <_vfiprintf_r+0xaf4>
   81726:	9907      	ldr	r1, [sp, #28]
   81728:	06dd      	lsls	r5, r3, #27
   8172a:	460a      	mov	r2, r1
   8172c:	f100 82f0 	bmi.w	81d10 <_vfiprintf_r+0xa64>
   81730:	0658      	lsls	r0, r3, #25
   81732:	f140 82ed 	bpl.w	81d10 <_vfiprintf_r+0xa64>
   81736:	f9b1 6000 	ldrsh.w	r6, [r1]
   8173a:	3204      	adds	r2, #4
   8173c:	17f7      	asrs	r7, r6, #31
   8173e:	4630      	mov	r0, r6
   81740:	4639      	mov	r1, r7
   81742:	9207      	str	r2, [sp, #28]
   81744:	2800      	cmp	r0, #0
   81746:	f171 0200 	sbcs.w	r2, r1, #0
   8174a:	f2c0 835a 	blt.w	81e02 <_vfiprintf_r+0xb56>
   8174e:	1c61      	adds	r1, r4, #1
   81750:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81754:	f04f 0201 	mov.w	r2, #1
   81758:	f47f aee9 	bne.w	8152e <_vfiprintf_r+0x282>
   8175c:	ea56 0107 	orrs.w	r1, r6, r7
   81760:	f000 824b 	beq.w	81bfa <_vfiprintf_r+0x94e>
   81764:	9302      	str	r3, [sp, #8]
   81766:	2a01      	cmp	r2, #1
   81768:	f000 828a 	beq.w	81c80 <_vfiprintf_r+0x9d4>
   8176c:	2a02      	cmp	r2, #2
   8176e:	f040 825a 	bne.w	81c26 <_vfiprintf_r+0x97a>
   81772:	46d3      	mov	fp, sl
   81774:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81776:	0933      	lsrs	r3, r6, #4
   81778:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   8177c:	0939      	lsrs	r1, r7, #4
   8177e:	f006 020f 	and.w	r2, r6, #15
   81782:	460f      	mov	r7, r1
   81784:	461e      	mov	r6, r3
   81786:	5c83      	ldrb	r3, [r0, r2]
   81788:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   8178c:	ea56 0307 	orrs.w	r3, r6, r7
   81790:	d1f1      	bne.n	81776 <_vfiprintf_r+0x4ca>
   81792:	ebaa 030b 	sub.w	r3, sl, fp
   81796:	9305      	str	r3, [sp, #20]
   81798:	e6e0      	b.n	8155c <_vfiprintf_r+0x2b0>
   8179a:	2800      	cmp	r0, #0
   8179c:	f040 83bd 	bne.w	81f1a <_vfiprintf_r+0xc6e>
   817a0:	0699      	lsls	r1, r3, #26
   817a2:	f100 8359 	bmi.w	81e58 <_vfiprintf_r+0xbac>
   817a6:	06da      	lsls	r2, r3, #27
   817a8:	f100 80e5 	bmi.w	81976 <_vfiprintf_r+0x6ca>
   817ac:	065b      	lsls	r3, r3, #25
   817ae:	f140 80e2 	bpl.w	81976 <_vfiprintf_r+0x6ca>
   817b2:	9a07      	ldr	r2, [sp, #28]
   817b4:	6813      	ldr	r3, [r2, #0]
   817b6:	3204      	adds	r2, #4
   817b8:	9207      	str	r2, [sp, #28]
   817ba:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   817be:	801a      	strh	r2, [r3, #0]
   817c0:	e5b1      	b.n	81326 <_vfiprintf_r+0x7a>
   817c2:	2278      	movs	r2, #120	; 0x78
   817c4:	2130      	movs	r1, #48	; 0x30
   817c6:	9508      	str	r5, [sp, #32]
   817c8:	9d07      	ldr	r5, [sp, #28]
   817ca:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   817ce:	1d2a      	adds	r2, r5, #4
   817d0:	9207      	str	r2, [sp, #28]
   817d2:	4a3c      	ldr	r2, [pc, #240]	; (818c4 <_vfiprintf_r+0x618>)
   817d4:	682e      	ldr	r6, [r5, #0]
   817d6:	920b      	str	r2, [sp, #44]	; 0x2c
   817d8:	f043 0302 	orr.w	r3, r3, #2
   817dc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   817e0:	2700      	movs	r7, #0
   817e2:	2202      	movs	r2, #2
   817e4:	e69b      	b.n	8151e <_vfiprintf_r+0x272>
   817e6:	9508      	str	r5, [sp, #32]
   817e8:	2800      	cmp	r0, #0
   817ea:	d099      	beq.n	81720 <_vfiprintf_r+0x474>
   817ec:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   817f0:	e796      	b.n	81720 <_vfiprintf_r+0x474>
   817f2:	f898 2000 	ldrb.w	r2, [r8]
   817f6:	2e00      	cmp	r6, #0
   817f8:	f47f adca 	bne.w	81390 <_vfiprintf_r+0xe4>
   817fc:	2001      	movs	r0, #1
   817fe:	2620      	movs	r6, #32
   81800:	e5c6      	b.n	81390 <_vfiprintf_r+0xe4>
   81802:	f043 0301 	orr.w	r3, r3, #1
   81806:	f898 2000 	ldrb.w	r2, [r8]
   8180a:	e5c1      	b.n	81390 <_vfiprintf_r+0xe4>
   8180c:	9508      	str	r5, [sp, #32]
   8180e:	2800      	cmp	r0, #0
   81810:	f040 8380 	bne.w	81f14 <_vfiprintf_r+0xc68>
   81814:	492b      	ldr	r1, [pc, #172]	; (818c4 <_vfiprintf_r+0x618>)
   81816:	910b      	str	r1, [sp, #44]	; 0x2c
   81818:	069f      	lsls	r7, r3, #26
   8181a:	f100 82e5 	bmi.w	81de8 <_vfiprintf_r+0xb3c>
   8181e:	9807      	ldr	r0, [sp, #28]
   81820:	06de      	lsls	r6, r3, #27
   81822:	4601      	mov	r1, r0
   81824:	f100 826f 	bmi.w	81d06 <_vfiprintf_r+0xa5a>
   81828:	065d      	lsls	r5, r3, #25
   8182a:	f140 826c 	bpl.w	81d06 <_vfiprintf_r+0xa5a>
   8182e:	2700      	movs	r7, #0
   81830:	3104      	adds	r1, #4
   81832:	8806      	ldrh	r6, [r0, #0]
   81834:	9107      	str	r1, [sp, #28]
   81836:	07d8      	lsls	r0, r3, #31
   81838:	f140 8220 	bpl.w	81c7c <_vfiprintf_r+0x9d0>
   8183c:	ea56 0107 	orrs.w	r1, r6, r7
   81840:	f000 821c 	beq.w	81c7c <_vfiprintf_r+0x9d0>
   81844:	2130      	movs	r1, #48	; 0x30
   81846:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8184a:	f043 0302 	orr.w	r3, r3, #2
   8184e:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81852:	2202      	movs	r2, #2
   81854:	e663      	b.n	8151e <_vfiprintf_r+0x272>
   81856:	9508      	str	r5, [sp, #32]
   81858:	2800      	cmp	r0, #0
   8185a:	f040 8355 	bne.w	81f08 <_vfiprintf_r+0xc5c>
   8185e:	491a      	ldr	r1, [pc, #104]	; (818c8 <_vfiprintf_r+0x61c>)
   81860:	910b      	str	r1, [sp, #44]	; 0x2c
   81862:	e7d9      	b.n	81818 <_vfiprintf_r+0x56c>
   81864:	2201      	movs	r2, #1
   81866:	9807      	ldr	r0, [sp, #28]
   81868:	4611      	mov	r1, r2
   8186a:	9201      	str	r2, [sp, #4]
   8186c:	6802      	ldr	r2, [r0, #0]
   8186e:	f04f 0400 	mov.w	r4, #0
   81872:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81876:	4602      	mov	r2, r0
   81878:	3204      	adds	r2, #4
   8187a:	9508      	str	r5, [sp, #32]
   8187c:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81880:	9105      	str	r1, [sp, #20]
   81882:	9207      	str	r2, [sp, #28]
   81884:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81888:	9302      	str	r3, [sp, #8]
   8188a:	2400      	movs	r4, #0
   8188c:	e66e      	b.n	8156c <_vfiprintf_r+0x2c0>
   8188e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81892:	f898 2000 	ldrb.w	r2, [r8]
   81896:	e57b      	b.n	81390 <_vfiprintf_r+0xe4>
   81898:	f898 2000 	ldrb.w	r2, [r8]
   8189c:	2a6c      	cmp	r2, #108	; 0x6c
   8189e:	bf03      	ittte	eq
   818a0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   818a4:	f043 0320 	orreq.w	r3, r3, #32
   818a8:	f108 0801 	addeq.w	r8, r8, #1
   818ac:	f043 0310 	orrne.w	r3, r3, #16
   818b0:	e56e      	b.n	81390 <_vfiprintf_r+0xe4>
   818b2:	f898 2000 	ldrb.w	r2, [r8]
   818b6:	2001      	movs	r0, #1
   818b8:	262b      	movs	r6, #43	; 0x2b
   818ba:	e569      	b.n	81390 <_vfiprintf_r+0xe4>
   818bc:	00083e7c 	.word	0x00083e7c
   818c0:	00083e8c 	.word	0x00083e8c
   818c4:	00083e60 	.word	0x00083e60
   818c8:	00083e4c 	.word	0x00083e4c
   818cc:	f04f 0200 	mov.w	r2, #0
   818d0:	9907      	ldr	r1, [sp, #28]
   818d2:	9508      	str	r5, [sp, #32]
   818d4:	f8d1 b000 	ldr.w	fp, [r1]
   818d8:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   818dc:	1d0d      	adds	r5, r1, #4
   818de:	f1bb 0f00 	cmp.w	fp, #0
   818e2:	f000 82e4 	beq.w	81eae <_vfiprintf_r+0xc02>
   818e6:	1c67      	adds	r7, r4, #1
   818e8:	f000 82c3 	beq.w	81e72 <_vfiprintf_r+0xbc6>
   818ec:	4622      	mov	r2, r4
   818ee:	2100      	movs	r1, #0
   818f0:	4658      	mov	r0, fp
   818f2:	9301      	str	r3, [sp, #4]
   818f4:	f001 fbc6 	bl	83084 <memchr>
   818f8:	9b01      	ldr	r3, [sp, #4]
   818fa:	2800      	cmp	r0, #0
   818fc:	f000 82e8 	beq.w	81ed0 <_vfiprintf_r+0xc24>
   81900:	eba0 020b 	sub.w	r2, r0, fp
   81904:	9507      	str	r5, [sp, #28]
   81906:	9205      	str	r2, [sp, #20]
   81908:	9302      	str	r3, [sp, #8]
   8190a:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8190e:	2400      	movs	r4, #0
   81910:	e624      	b.n	8155c <_vfiprintf_r+0x2b0>
   81912:	f898 2000 	ldrb.w	r2, [r8]
   81916:	f108 0701 	add.w	r7, r8, #1
   8191a:	2a2a      	cmp	r2, #42	; 0x2a
   8191c:	f000 82e9 	beq.w	81ef2 <_vfiprintf_r+0xc46>
   81920:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81924:	2909      	cmp	r1, #9
   81926:	46b8      	mov	r8, r7
   81928:	f04f 0400 	mov.w	r4, #0
   8192c:	f63f ad32 	bhi.w	81394 <_vfiprintf_r+0xe8>
   81930:	f818 2b01 	ldrb.w	r2, [r8], #1
   81934:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81938:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   8193c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81940:	2909      	cmp	r1, #9
   81942:	d9f5      	bls.n	81930 <_vfiprintf_r+0x684>
   81944:	e526      	b.n	81394 <_vfiprintf_r+0xe8>
   81946:	f043 0320 	orr.w	r3, r3, #32
   8194a:	f898 2000 	ldrb.w	r2, [r8]
   8194e:	e51f      	b.n	81390 <_vfiprintf_r+0xe4>
   81950:	9508      	str	r5, [sp, #32]
   81952:	2800      	cmp	r0, #0
   81954:	f040 82db 	bne.w	81f0e <_vfiprintf_r+0xc62>
   81958:	2a00      	cmp	r2, #0
   8195a:	f000 80f1 	beq.w	81b40 <_vfiprintf_r+0x894>
   8195e:	2101      	movs	r1, #1
   81960:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81964:	f04f 0200 	mov.w	r2, #0
   81968:	9101      	str	r1, [sp, #4]
   8196a:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8196e:	9105      	str	r1, [sp, #20]
   81970:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81974:	e788      	b.n	81888 <_vfiprintf_r+0x5dc>
   81976:	9a07      	ldr	r2, [sp, #28]
   81978:	6813      	ldr	r3, [r2, #0]
   8197a:	3204      	adds	r2, #4
   8197c:	9207      	str	r2, [sp, #28]
   8197e:	9a03      	ldr	r2, [sp, #12]
   81980:	601a      	str	r2, [r3, #0]
   81982:	e4d0      	b.n	81326 <_vfiprintf_r+0x7a>
   81984:	aa0f      	add	r2, sp, #60	; 0x3c
   81986:	9904      	ldr	r1, [sp, #16]
   81988:	4620      	mov	r0, r4
   8198a:	f7ff fc4f 	bl	8122c <__sprint_r.part.0>
   8198e:	2800      	cmp	r0, #0
   81990:	f040 8143 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81994:	9910      	ldr	r1, [sp, #64]	; 0x40
   81996:	46d6      	mov	lr, sl
   81998:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8199a:	f101 0c01 	add.w	ip, r1, #1
   8199e:	e60a      	b.n	815b6 <_vfiprintf_r+0x30a>
   819a0:	aa0f      	add	r2, sp, #60	; 0x3c
   819a2:	9904      	ldr	r1, [sp, #16]
   819a4:	9806      	ldr	r0, [sp, #24]
   819a6:	f7ff fc41 	bl	8122c <__sprint_r.part.0>
   819aa:	2800      	cmp	r0, #0
   819ac:	f040 8135 	bne.w	81c1a <_vfiprintf_r+0x96e>
   819b0:	46d1      	mov	r9, sl
   819b2:	9910      	ldr	r1, [sp, #64]	; 0x40
   819b4:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   819b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   819ba:	1c48      	adds	r0, r1, #1
   819bc:	2d00      	cmp	r5, #0
   819be:	f43f ae24 	beq.w	8160a <_vfiprintf_r+0x35e>
   819c2:	2101      	movs	r1, #1
   819c4:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   819c8:	440a      	add	r2, r1
   819ca:	2807      	cmp	r0, #7
   819cc:	9211      	str	r2, [sp, #68]	; 0x44
   819ce:	9010      	str	r0, [sp, #64]	; 0x40
   819d0:	f8c9 1004 	str.w	r1, [r9, #4]
   819d4:	f8c9 5000 	str.w	r5, [r9]
   819d8:	f340 8109 	ble.w	81bee <_vfiprintf_r+0x942>
   819dc:	2a00      	cmp	r2, #0
   819de:	f040 81af 	bne.w	81d40 <_vfiprintf_r+0xa94>
   819e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   819e4:	2b00      	cmp	r3, #0
   819e6:	f43f ae23 	beq.w	81630 <_vfiprintf_r+0x384>
   819ea:	2202      	movs	r2, #2
   819ec:	4608      	mov	r0, r1
   819ee:	46d1      	mov	r9, sl
   819f0:	ab0e      	add	r3, sp, #56	; 0x38
   819f2:	921d      	str	r2, [sp, #116]	; 0x74
   819f4:	931c      	str	r3, [sp, #112]	; 0x70
   819f6:	4601      	mov	r1, r0
   819f8:	f109 0908 	add.w	r9, r9, #8
   819fc:	3001      	adds	r0, #1
   819fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81a00:	2b80      	cmp	r3, #128	; 0x80
   81a02:	f43f ae1c 	beq.w	8163e <_vfiprintf_r+0x392>
   81a06:	9b05      	ldr	r3, [sp, #20]
   81a08:	1ae4      	subs	r4, r4, r3
   81a0a:	2c00      	cmp	r4, #0
   81a0c:	dd2f      	ble.n	81a6e <_vfiprintf_r+0x7c2>
   81a0e:	2c10      	cmp	r4, #16
   81a10:	f340 8220 	ble.w	81e54 <_vfiprintf_r+0xba8>
   81a14:	46ce      	mov	lr, r9
   81a16:	2610      	movs	r6, #16
   81a18:	4db2      	ldr	r5, [pc, #712]	; (81ce4 <_vfiprintf_r+0xa38>)
   81a1a:	9f06      	ldr	r7, [sp, #24]
   81a1c:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81a20:	e006      	b.n	81a30 <_vfiprintf_r+0x784>
   81a22:	1c88      	adds	r0, r1, #2
   81a24:	4619      	mov	r1, r3
   81a26:	f10e 0e08 	add.w	lr, lr, #8
   81a2a:	3c10      	subs	r4, #16
   81a2c:	2c10      	cmp	r4, #16
   81a2e:	dd10      	ble.n	81a52 <_vfiprintf_r+0x7a6>
   81a30:	1c4b      	adds	r3, r1, #1
   81a32:	3210      	adds	r2, #16
   81a34:	2b07      	cmp	r3, #7
   81a36:	9211      	str	r2, [sp, #68]	; 0x44
   81a38:	e88e 0060 	stmia.w	lr, {r5, r6}
   81a3c:	9310      	str	r3, [sp, #64]	; 0x40
   81a3e:	ddf0      	ble.n	81a22 <_vfiprintf_r+0x776>
   81a40:	2a00      	cmp	r2, #0
   81a42:	d165      	bne.n	81b10 <_vfiprintf_r+0x864>
   81a44:	3c10      	subs	r4, #16
   81a46:	2c10      	cmp	r4, #16
   81a48:	f04f 0001 	mov.w	r0, #1
   81a4c:	4611      	mov	r1, r2
   81a4e:	46d6      	mov	lr, sl
   81a50:	dcee      	bgt.n	81a30 <_vfiprintf_r+0x784>
   81a52:	46f1      	mov	r9, lr
   81a54:	4422      	add	r2, r4
   81a56:	2807      	cmp	r0, #7
   81a58:	9211      	str	r2, [sp, #68]	; 0x44
   81a5a:	f8c9 5000 	str.w	r5, [r9]
   81a5e:	f8c9 4004 	str.w	r4, [r9, #4]
   81a62:	9010      	str	r0, [sp, #64]	; 0x40
   81a64:	f300 8085 	bgt.w	81b72 <_vfiprintf_r+0x8c6>
   81a68:	f109 0908 	add.w	r9, r9, #8
   81a6c:	3001      	adds	r0, #1
   81a6e:	9905      	ldr	r1, [sp, #20]
   81a70:	2807      	cmp	r0, #7
   81a72:	440a      	add	r2, r1
   81a74:	9211      	str	r2, [sp, #68]	; 0x44
   81a76:	f8c9 b000 	str.w	fp, [r9]
   81a7a:	f8c9 1004 	str.w	r1, [r9, #4]
   81a7e:	9010      	str	r0, [sp, #64]	; 0x40
   81a80:	f340 8082 	ble.w	81b88 <_vfiprintf_r+0x8dc>
   81a84:	2a00      	cmp	r2, #0
   81a86:	f040 8118 	bne.w	81cba <_vfiprintf_r+0xa0e>
   81a8a:	9b02      	ldr	r3, [sp, #8]
   81a8c:	9210      	str	r2, [sp, #64]	; 0x40
   81a8e:	0758      	lsls	r0, r3, #29
   81a90:	d535      	bpl.n	81afe <_vfiprintf_r+0x852>
   81a92:	9b08      	ldr	r3, [sp, #32]
   81a94:	9901      	ldr	r1, [sp, #4]
   81a96:	1a5c      	subs	r4, r3, r1
   81a98:	2c00      	cmp	r4, #0
   81a9a:	f340 80e7 	ble.w	81c6c <_vfiprintf_r+0x9c0>
   81a9e:	46d1      	mov	r9, sl
   81aa0:	2c10      	cmp	r4, #16
   81aa2:	f340 820d 	ble.w	81ec0 <_vfiprintf_r+0xc14>
   81aa6:	2510      	movs	r5, #16
   81aa8:	9910      	ldr	r1, [sp, #64]	; 0x40
   81aaa:	4e8f      	ldr	r6, [pc, #572]	; (81ce8 <_vfiprintf_r+0xa3c>)
   81aac:	9f06      	ldr	r7, [sp, #24]
   81aae:	f8dd b010 	ldr.w	fp, [sp, #16]
   81ab2:	e006      	b.n	81ac2 <_vfiprintf_r+0x816>
   81ab4:	1c88      	adds	r0, r1, #2
   81ab6:	4619      	mov	r1, r3
   81ab8:	f109 0908 	add.w	r9, r9, #8
   81abc:	3c10      	subs	r4, #16
   81abe:	2c10      	cmp	r4, #16
   81ac0:	dd11      	ble.n	81ae6 <_vfiprintf_r+0x83a>
   81ac2:	1c4b      	adds	r3, r1, #1
   81ac4:	3210      	adds	r2, #16
   81ac6:	2b07      	cmp	r3, #7
   81ac8:	9211      	str	r2, [sp, #68]	; 0x44
   81aca:	f8c9 6000 	str.w	r6, [r9]
   81ace:	f8c9 5004 	str.w	r5, [r9, #4]
   81ad2:	9310      	str	r3, [sp, #64]	; 0x40
   81ad4:	ddee      	ble.n	81ab4 <_vfiprintf_r+0x808>
   81ad6:	bb42      	cbnz	r2, 81b2a <_vfiprintf_r+0x87e>
   81ad8:	3c10      	subs	r4, #16
   81ada:	2c10      	cmp	r4, #16
   81adc:	f04f 0001 	mov.w	r0, #1
   81ae0:	4611      	mov	r1, r2
   81ae2:	46d1      	mov	r9, sl
   81ae4:	dced      	bgt.n	81ac2 <_vfiprintf_r+0x816>
   81ae6:	4422      	add	r2, r4
   81ae8:	2807      	cmp	r0, #7
   81aea:	9211      	str	r2, [sp, #68]	; 0x44
   81aec:	f8c9 6000 	str.w	r6, [r9]
   81af0:	f8c9 4004 	str.w	r4, [r9, #4]
   81af4:	9010      	str	r0, [sp, #64]	; 0x40
   81af6:	dd51      	ble.n	81b9c <_vfiprintf_r+0x8f0>
   81af8:	2a00      	cmp	r2, #0
   81afa:	f040 819a 	bne.w	81e32 <_vfiprintf_r+0xb86>
   81afe:	9b03      	ldr	r3, [sp, #12]
   81b00:	9a08      	ldr	r2, [sp, #32]
   81b02:	9901      	ldr	r1, [sp, #4]
   81b04:	428a      	cmp	r2, r1
   81b06:	bfac      	ite	ge
   81b08:	189b      	addge	r3, r3, r2
   81b0a:	185b      	addlt	r3, r3, r1
   81b0c:	9303      	str	r3, [sp, #12]
   81b0e:	e04e      	b.n	81bae <_vfiprintf_r+0x902>
   81b10:	aa0f      	add	r2, sp, #60	; 0x3c
   81b12:	4649      	mov	r1, r9
   81b14:	4638      	mov	r0, r7
   81b16:	f7ff fb89 	bl	8122c <__sprint_r.part.0>
   81b1a:	2800      	cmp	r0, #0
   81b1c:	f040 813e 	bne.w	81d9c <_vfiprintf_r+0xaf0>
   81b20:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b22:	46d6      	mov	lr, sl
   81b24:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b26:	1c48      	adds	r0, r1, #1
   81b28:	e77f      	b.n	81a2a <_vfiprintf_r+0x77e>
   81b2a:	aa0f      	add	r2, sp, #60	; 0x3c
   81b2c:	4659      	mov	r1, fp
   81b2e:	4638      	mov	r0, r7
   81b30:	f7ff fb7c 	bl	8122c <__sprint_r.part.0>
   81b34:	b960      	cbnz	r0, 81b50 <_vfiprintf_r+0x8a4>
   81b36:	9910      	ldr	r1, [sp, #64]	; 0x40
   81b38:	46d1      	mov	r9, sl
   81b3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b3c:	1c48      	adds	r0, r1, #1
   81b3e:	e7bd      	b.n	81abc <_vfiprintf_r+0x810>
   81b40:	9b11      	ldr	r3, [sp, #68]	; 0x44
   81b42:	f8dd b010 	ldr.w	fp, [sp, #16]
   81b46:	2b00      	cmp	r3, #0
   81b48:	f040 81ca 	bne.w	81ee0 <_vfiprintf_r+0xc34>
   81b4c:	2300      	movs	r3, #0
   81b4e:	9310      	str	r3, [sp, #64]	; 0x40
   81b50:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81b54:	f013 0f01 	tst.w	r3, #1
   81b58:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81b5c:	d102      	bne.n	81b64 <_vfiprintf_r+0x8b8>
   81b5e:	059a      	lsls	r2, r3, #22
   81b60:	f140 80dd 	bpl.w	81d1e <_vfiprintf_r+0xa72>
   81b64:	065b      	lsls	r3, r3, #25
   81b66:	f53f acad 	bmi.w	814c4 <_vfiprintf_r+0x218>
   81b6a:	9803      	ldr	r0, [sp, #12]
   81b6c:	b02d      	add	sp, #180	; 0xb4
   81b6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81b72:	2a00      	cmp	r2, #0
   81b74:	f040 8105 	bne.w	81d82 <_vfiprintf_r+0xad6>
   81b78:	2301      	movs	r3, #1
   81b7a:	46d1      	mov	r9, sl
   81b7c:	9a05      	ldr	r2, [sp, #20]
   81b7e:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   81b82:	921d      	str	r2, [sp, #116]	; 0x74
   81b84:	9211      	str	r2, [sp, #68]	; 0x44
   81b86:	9310      	str	r3, [sp, #64]	; 0x40
   81b88:	f109 0908 	add.w	r9, r9, #8
   81b8c:	9b02      	ldr	r3, [sp, #8]
   81b8e:	0759      	lsls	r1, r3, #29
   81b90:	d504      	bpl.n	81b9c <_vfiprintf_r+0x8f0>
   81b92:	9b08      	ldr	r3, [sp, #32]
   81b94:	9901      	ldr	r1, [sp, #4]
   81b96:	1a5c      	subs	r4, r3, r1
   81b98:	2c00      	cmp	r4, #0
   81b9a:	dc81      	bgt.n	81aa0 <_vfiprintf_r+0x7f4>
   81b9c:	9b03      	ldr	r3, [sp, #12]
   81b9e:	9908      	ldr	r1, [sp, #32]
   81ba0:	9801      	ldr	r0, [sp, #4]
   81ba2:	4281      	cmp	r1, r0
   81ba4:	bfac      	ite	ge
   81ba6:	185b      	addge	r3, r3, r1
   81ba8:	181b      	addlt	r3, r3, r0
   81baa:	9303      	str	r3, [sp, #12]
   81bac:	bb72      	cbnz	r2, 81c0c <_vfiprintf_r+0x960>
   81bae:	2300      	movs	r3, #0
   81bb0:	46d1      	mov	r9, sl
   81bb2:	9310      	str	r3, [sp, #64]	; 0x40
   81bb4:	f7ff bbb7 	b.w	81326 <_vfiprintf_r+0x7a>
   81bb8:	aa0f      	add	r2, sp, #60	; 0x3c
   81bba:	9904      	ldr	r1, [sp, #16]
   81bbc:	4620      	mov	r0, r4
   81bbe:	f7ff fb35 	bl	8122c <__sprint_r.part.0>
   81bc2:	bb50      	cbnz	r0, 81c1a <_vfiprintf_r+0x96e>
   81bc4:	9910      	ldr	r1, [sp, #64]	; 0x40
   81bc6:	46d4      	mov	ip, sl
   81bc8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81bca:	f101 0e01 	add.w	lr, r1, #1
   81bce:	e54a      	b.n	81666 <_vfiprintf_r+0x3ba>
   81bd0:	2a00      	cmp	r2, #0
   81bd2:	f47f aee5 	bne.w	819a0 <_vfiprintf_r+0x6f4>
   81bd6:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   81bda:	2900      	cmp	r1, #0
   81bdc:	f000 811a 	beq.w	81e14 <_vfiprintf_r+0xb68>
   81be0:	2201      	movs	r2, #1
   81be2:	46d1      	mov	r9, sl
   81be4:	4610      	mov	r0, r2
   81be6:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   81bea:	921d      	str	r2, [sp, #116]	; 0x74
   81bec:	911c      	str	r1, [sp, #112]	; 0x70
   81bee:	4601      	mov	r1, r0
   81bf0:	f109 0908 	add.w	r9, r9, #8
   81bf4:	3001      	adds	r0, #1
   81bf6:	e508      	b.n	8160a <_vfiprintf_r+0x35e>
   81bf8:	9b02      	ldr	r3, [sp, #8]
   81bfa:	2a01      	cmp	r2, #1
   81bfc:	f000 8097 	beq.w	81d2e <_vfiprintf_r+0xa82>
   81c00:	2a02      	cmp	r2, #2
   81c02:	d10d      	bne.n	81c20 <_vfiprintf_r+0x974>
   81c04:	9302      	str	r3, [sp, #8]
   81c06:	2600      	movs	r6, #0
   81c08:	2700      	movs	r7, #0
   81c0a:	e5b2      	b.n	81772 <_vfiprintf_r+0x4c6>
   81c0c:	aa0f      	add	r2, sp, #60	; 0x3c
   81c0e:	9904      	ldr	r1, [sp, #16]
   81c10:	9806      	ldr	r0, [sp, #24]
   81c12:	f7ff fb0b 	bl	8122c <__sprint_r.part.0>
   81c16:	2800      	cmp	r0, #0
   81c18:	d0c9      	beq.n	81bae <_vfiprintf_r+0x902>
   81c1a:	f8dd b010 	ldr.w	fp, [sp, #16]
   81c1e:	e797      	b.n	81b50 <_vfiprintf_r+0x8a4>
   81c20:	2600      	movs	r6, #0
   81c22:	2700      	movs	r7, #0
   81c24:	9302      	str	r3, [sp, #8]
   81c26:	4651      	mov	r1, sl
   81c28:	e000      	b.n	81c2c <_vfiprintf_r+0x980>
   81c2a:	4659      	mov	r1, fp
   81c2c:	08f2      	lsrs	r2, r6, #3
   81c2e:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   81c32:	08f8      	lsrs	r0, r7, #3
   81c34:	f006 0307 	and.w	r3, r6, #7
   81c38:	4607      	mov	r7, r0
   81c3a:	4616      	mov	r6, r2
   81c3c:	3330      	adds	r3, #48	; 0x30
   81c3e:	ea56 0207 	orrs.w	r2, r6, r7
   81c42:	f801 3c01 	strb.w	r3, [r1, #-1]
   81c46:	f101 3bff 	add.w	fp, r1, #4294967295
   81c4a:	d1ee      	bne.n	81c2a <_vfiprintf_r+0x97e>
   81c4c:	9a02      	ldr	r2, [sp, #8]
   81c4e:	07d6      	lsls	r6, r2, #31
   81c50:	f57f ad9f 	bpl.w	81792 <_vfiprintf_r+0x4e6>
   81c54:	2b30      	cmp	r3, #48	; 0x30
   81c56:	f43f ad9c 	beq.w	81792 <_vfiprintf_r+0x4e6>
   81c5a:	2330      	movs	r3, #48	; 0x30
   81c5c:	3902      	subs	r1, #2
   81c5e:	f80b 3c01 	strb.w	r3, [fp, #-1]
   81c62:	ebaa 0301 	sub.w	r3, sl, r1
   81c66:	9305      	str	r3, [sp, #20]
   81c68:	468b      	mov	fp, r1
   81c6a:	e477      	b.n	8155c <_vfiprintf_r+0x2b0>
   81c6c:	9b03      	ldr	r3, [sp, #12]
   81c6e:	9a08      	ldr	r2, [sp, #32]
   81c70:	428a      	cmp	r2, r1
   81c72:	bfac      	ite	ge
   81c74:	189b      	addge	r3, r3, r2
   81c76:	185b      	addlt	r3, r3, r1
   81c78:	9303      	str	r3, [sp, #12]
   81c7a:	e798      	b.n	81bae <_vfiprintf_r+0x902>
   81c7c:	2202      	movs	r2, #2
   81c7e:	e44e      	b.n	8151e <_vfiprintf_r+0x272>
   81c80:	2f00      	cmp	r7, #0
   81c82:	bf08      	it	eq
   81c84:	2e0a      	cmpeq	r6, #10
   81c86:	d351      	bcc.n	81d2c <_vfiprintf_r+0xa80>
   81c88:	46d3      	mov	fp, sl
   81c8a:	4630      	mov	r0, r6
   81c8c:	4639      	mov	r1, r7
   81c8e:	220a      	movs	r2, #10
   81c90:	2300      	movs	r3, #0
   81c92:	f001 ff29 	bl	83ae8 <__aeabi_uldivmod>
   81c96:	3230      	adds	r2, #48	; 0x30
   81c98:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   81c9c:	4630      	mov	r0, r6
   81c9e:	4639      	mov	r1, r7
   81ca0:	2300      	movs	r3, #0
   81ca2:	220a      	movs	r2, #10
   81ca4:	f001 ff20 	bl	83ae8 <__aeabi_uldivmod>
   81ca8:	4606      	mov	r6, r0
   81caa:	460f      	mov	r7, r1
   81cac:	ea56 0307 	orrs.w	r3, r6, r7
   81cb0:	d1eb      	bne.n	81c8a <_vfiprintf_r+0x9de>
   81cb2:	e56e      	b.n	81792 <_vfiprintf_r+0x4e6>
   81cb4:	9405      	str	r4, [sp, #20]
   81cb6:	46d3      	mov	fp, sl
   81cb8:	e450      	b.n	8155c <_vfiprintf_r+0x2b0>
   81cba:	aa0f      	add	r2, sp, #60	; 0x3c
   81cbc:	9904      	ldr	r1, [sp, #16]
   81cbe:	9806      	ldr	r0, [sp, #24]
   81cc0:	f7ff fab4 	bl	8122c <__sprint_r.part.0>
   81cc4:	2800      	cmp	r0, #0
   81cc6:	d1a8      	bne.n	81c1a <_vfiprintf_r+0x96e>
   81cc8:	46d1      	mov	r9, sl
   81cca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ccc:	e75e      	b.n	81b8c <_vfiprintf_r+0x8e0>
   81cce:	aa0f      	add	r2, sp, #60	; 0x3c
   81cd0:	9904      	ldr	r1, [sp, #16]
   81cd2:	9806      	ldr	r0, [sp, #24]
   81cd4:	f7ff faaa 	bl	8122c <__sprint_r.part.0>
   81cd8:	2800      	cmp	r0, #0
   81cda:	d19e      	bne.n	81c1a <_vfiprintf_r+0x96e>
   81cdc:	46d1      	mov	r9, sl
   81cde:	f7ff bbbb 	b.w	81458 <_vfiprintf_r+0x1ac>
   81ce2:	bf00      	nop
   81ce4:	00083e8c 	.word	0x00083e8c
   81ce8:	00083e7c 	.word	0x00083e7c
   81cec:	3104      	adds	r1, #4
   81cee:	6816      	ldr	r6, [r2, #0]
   81cf0:	2700      	movs	r7, #0
   81cf2:	2201      	movs	r2, #1
   81cf4:	9107      	str	r1, [sp, #28]
   81cf6:	e412      	b.n	8151e <_vfiprintf_r+0x272>
   81cf8:	9807      	ldr	r0, [sp, #28]
   81cfa:	2700      	movs	r7, #0
   81cfc:	4601      	mov	r1, r0
   81cfe:	3104      	adds	r1, #4
   81d00:	6806      	ldr	r6, [r0, #0]
   81d02:	9107      	str	r1, [sp, #28]
   81d04:	e40b      	b.n	8151e <_vfiprintf_r+0x272>
   81d06:	680e      	ldr	r6, [r1, #0]
   81d08:	3104      	adds	r1, #4
   81d0a:	9107      	str	r1, [sp, #28]
   81d0c:	2700      	movs	r7, #0
   81d0e:	e592      	b.n	81836 <_vfiprintf_r+0x58a>
   81d10:	6816      	ldr	r6, [r2, #0]
   81d12:	3204      	adds	r2, #4
   81d14:	17f7      	asrs	r7, r6, #31
   81d16:	9207      	str	r2, [sp, #28]
   81d18:	4630      	mov	r0, r6
   81d1a:	4639      	mov	r1, r7
   81d1c:	e512      	b.n	81744 <_vfiprintf_r+0x498>
   81d1e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81d22:	f000 fe75 	bl	82a10 <__retarget_lock_release_recursive>
   81d26:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81d2a:	e71b      	b.n	81b64 <_vfiprintf_r+0x8b8>
   81d2c:	9b02      	ldr	r3, [sp, #8]
   81d2e:	9302      	str	r3, [sp, #8]
   81d30:	2301      	movs	r3, #1
   81d32:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81d36:	3630      	adds	r6, #48	; 0x30
   81d38:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   81d3c:	9305      	str	r3, [sp, #20]
   81d3e:	e40d      	b.n	8155c <_vfiprintf_r+0x2b0>
   81d40:	aa0f      	add	r2, sp, #60	; 0x3c
   81d42:	9904      	ldr	r1, [sp, #16]
   81d44:	9806      	ldr	r0, [sp, #24]
   81d46:	f7ff fa71 	bl	8122c <__sprint_r.part.0>
   81d4a:	2800      	cmp	r0, #0
   81d4c:	f47f af65 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81d50:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d52:	46d1      	mov	r9, sl
   81d54:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d56:	1c48      	adds	r0, r1, #1
   81d58:	e457      	b.n	8160a <_vfiprintf_r+0x35e>
   81d5a:	aa0f      	add	r2, sp, #60	; 0x3c
   81d5c:	9904      	ldr	r1, [sp, #16]
   81d5e:	9806      	ldr	r0, [sp, #24]
   81d60:	f7ff fa64 	bl	8122c <__sprint_r.part.0>
   81d64:	2800      	cmp	r0, #0
   81d66:	f47f af58 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81d6a:	9910      	ldr	r1, [sp, #64]	; 0x40
   81d6c:	46d1      	mov	r9, sl
   81d6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d70:	1c48      	adds	r0, r1, #1
   81d72:	e644      	b.n	819fe <_vfiprintf_r+0x752>
   81d74:	2a00      	cmp	r2, #0
   81d76:	f040 8087 	bne.w	81e88 <_vfiprintf_r+0xbdc>
   81d7a:	2001      	movs	r0, #1
   81d7c:	4611      	mov	r1, r2
   81d7e:	46d1      	mov	r9, sl
   81d80:	e641      	b.n	81a06 <_vfiprintf_r+0x75a>
   81d82:	aa0f      	add	r2, sp, #60	; 0x3c
   81d84:	9904      	ldr	r1, [sp, #16]
   81d86:	9806      	ldr	r0, [sp, #24]
   81d88:	f7ff fa50 	bl	8122c <__sprint_r.part.0>
   81d8c:	2800      	cmp	r0, #0
   81d8e:	f47f af44 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81d92:	9810      	ldr	r0, [sp, #64]	; 0x40
   81d94:	46d1      	mov	r9, sl
   81d96:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81d98:	3001      	adds	r0, #1
   81d9a:	e668      	b.n	81a6e <_vfiprintf_r+0x7c2>
   81d9c:	46cb      	mov	fp, r9
   81d9e:	e6d7      	b.n	81b50 <_vfiprintf_r+0x8a4>
   81da0:	9d07      	ldr	r5, [sp, #28]
   81da2:	3507      	adds	r5, #7
   81da4:	f025 0507 	bic.w	r5, r5, #7
   81da8:	f105 0208 	add.w	r2, r5, #8
   81dac:	e9d5 0100 	ldrd	r0, r1, [r5]
   81db0:	9207      	str	r2, [sp, #28]
   81db2:	4606      	mov	r6, r0
   81db4:	460f      	mov	r7, r1
   81db6:	e4c5      	b.n	81744 <_vfiprintf_r+0x498>
   81db8:	9d07      	ldr	r5, [sp, #28]
   81dba:	3507      	adds	r5, #7
   81dbc:	f025 0207 	bic.w	r2, r5, #7
   81dc0:	f102 0108 	add.w	r1, r2, #8
   81dc4:	e9d2 6700 	ldrd	r6, r7, [r2]
   81dc8:	9107      	str	r1, [sp, #28]
   81dca:	2201      	movs	r2, #1
   81dcc:	f7ff bba7 	b.w	8151e <_vfiprintf_r+0x272>
   81dd0:	9d07      	ldr	r5, [sp, #28]
   81dd2:	3507      	adds	r5, #7
   81dd4:	f025 0207 	bic.w	r2, r5, #7
   81dd8:	f102 0108 	add.w	r1, r2, #8
   81ddc:	e9d2 6700 	ldrd	r6, r7, [r2]
   81de0:	9107      	str	r1, [sp, #28]
   81de2:	2200      	movs	r2, #0
   81de4:	f7ff bb9b 	b.w	8151e <_vfiprintf_r+0x272>
   81de8:	9d07      	ldr	r5, [sp, #28]
   81dea:	3507      	adds	r5, #7
   81dec:	f025 0107 	bic.w	r1, r5, #7
   81df0:	f101 0008 	add.w	r0, r1, #8
   81df4:	9007      	str	r0, [sp, #28]
   81df6:	e9d1 6700 	ldrd	r6, r7, [r1]
   81dfa:	e51c      	b.n	81836 <_vfiprintf_r+0x58a>
   81dfc:	46d3      	mov	fp, sl
   81dfe:	f7ff bbad 	b.w	8155c <_vfiprintf_r+0x2b0>
   81e02:	252d      	movs	r5, #45	; 0x2d
   81e04:	4276      	negs	r6, r6
   81e06:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   81e0a:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   81e0e:	2201      	movs	r2, #1
   81e10:	f7ff bb8a 	b.w	81528 <_vfiprintf_r+0x27c>
   81e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81e16:	b9b3      	cbnz	r3, 81e46 <_vfiprintf_r+0xb9a>
   81e18:	4611      	mov	r1, r2
   81e1a:	2001      	movs	r0, #1
   81e1c:	46d1      	mov	r9, sl
   81e1e:	e5f2      	b.n	81a06 <_vfiprintf_r+0x75a>
   81e20:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e24:	f000 fdf4 	bl	82a10 <__retarget_lock_release_recursive>
   81e28:	f04f 33ff 	mov.w	r3, #4294967295
   81e2c:	9303      	str	r3, [sp, #12]
   81e2e:	f7ff bb4c 	b.w	814ca <_vfiprintf_r+0x21e>
   81e32:	aa0f      	add	r2, sp, #60	; 0x3c
   81e34:	9904      	ldr	r1, [sp, #16]
   81e36:	9806      	ldr	r0, [sp, #24]
   81e38:	f7ff f9f8 	bl	8122c <__sprint_r.part.0>
   81e3c:	2800      	cmp	r0, #0
   81e3e:	f47f aeec 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81e42:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e44:	e6aa      	b.n	81b9c <_vfiprintf_r+0x8f0>
   81e46:	2202      	movs	r2, #2
   81e48:	ab0e      	add	r3, sp, #56	; 0x38
   81e4a:	921d      	str	r2, [sp, #116]	; 0x74
   81e4c:	931c      	str	r3, [sp, #112]	; 0x70
   81e4e:	2001      	movs	r0, #1
   81e50:	46d1      	mov	r9, sl
   81e52:	e5d0      	b.n	819f6 <_vfiprintf_r+0x74a>
   81e54:	4d34      	ldr	r5, [pc, #208]	; (81f28 <_vfiprintf_r+0xc7c>)
   81e56:	e5fd      	b.n	81a54 <_vfiprintf_r+0x7a8>
   81e58:	9a07      	ldr	r2, [sp, #28]
   81e5a:	4613      	mov	r3, r2
   81e5c:	3304      	adds	r3, #4
   81e5e:	9307      	str	r3, [sp, #28]
   81e60:	9b03      	ldr	r3, [sp, #12]
   81e62:	6811      	ldr	r1, [r2, #0]
   81e64:	17dd      	asrs	r5, r3, #31
   81e66:	461a      	mov	r2, r3
   81e68:	462b      	mov	r3, r5
   81e6a:	e9c1 2300 	strd	r2, r3, [r1]
   81e6e:	f7ff ba5a 	b.w	81326 <_vfiprintf_r+0x7a>
   81e72:	4658      	mov	r0, fp
   81e74:	9507      	str	r5, [sp, #28]
   81e76:	9302      	str	r3, [sp, #8]
   81e78:	f001 fc3c 	bl	836f4 <strlen>
   81e7c:	2400      	movs	r4, #0
   81e7e:	9005      	str	r0, [sp, #20]
   81e80:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e84:	f7ff bb6a 	b.w	8155c <_vfiprintf_r+0x2b0>
   81e88:	aa0f      	add	r2, sp, #60	; 0x3c
   81e8a:	9904      	ldr	r1, [sp, #16]
   81e8c:	9806      	ldr	r0, [sp, #24]
   81e8e:	f7ff f9cd 	bl	8122c <__sprint_r.part.0>
   81e92:	2800      	cmp	r0, #0
   81e94:	f47f aec1 	bne.w	81c1a <_vfiprintf_r+0x96e>
   81e98:	9910      	ldr	r1, [sp, #64]	; 0x40
   81e9a:	46d1      	mov	r9, sl
   81e9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81e9e:	1c48      	adds	r0, r1, #1
   81ea0:	e5b1      	b.n	81a06 <_vfiprintf_r+0x75a>
   81ea2:	9910      	ldr	r1, [sp, #64]	; 0x40
   81ea4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81ea6:	3101      	adds	r1, #1
   81ea8:	4e20      	ldr	r6, [pc, #128]	; (81f2c <_vfiprintf_r+0xc80>)
   81eaa:	f7ff bb9c 	b.w	815e6 <_vfiprintf_r+0x33a>
   81eae:	2c06      	cmp	r4, #6
   81eb0:	bf28      	it	cs
   81eb2:	2406      	movcs	r4, #6
   81eb4:	9507      	str	r5, [sp, #28]
   81eb6:	9405      	str	r4, [sp, #20]
   81eb8:	9401      	str	r4, [sp, #4]
   81eba:	f8df b074 	ldr.w	fp, [pc, #116]	; 81f30 <_vfiprintf_r+0xc84>
   81ebe:	e4e3      	b.n	81888 <_vfiprintf_r+0x5dc>
   81ec0:	9810      	ldr	r0, [sp, #64]	; 0x40
   81ec2:	4e1a      	ldr	r6, [pc, #104]	; (81f2c <_vfiprintf_r+0xc80>)
   81ec4:	3001      	adds	r0, #1
   81ec6:	e60e      	b.n	81ae6 <_vfiprintf_r+0x83a>
   81ec8:	4686      	mov	lr, r0
   81eca:	4d17      	ldr	r5, [pc, #92]	; (81f28 <_vfiprintf_r+0xc7c>)
   81ecc:	f7ff bbe2 	b.w	81694 <_vfiprintf_r+0x3e8>
   81ed0:	9405      	str	r4, [sp, #20]
   81ed2:	9507      	str	r5, [sp, #28]
   81ed4:	9302      	str	r3, [sp, #8]
   81ed6:	4604      	mov	r4, r0
   81ed8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81edc:	f7ff bb3e 	b.w	8155c <_vfiprintf_r+0x2b0>
   81ee0:	9806      	ldr	r0, [sp, #24]
   81ee2:	aa0f      	add	r2, sp, #60	; 0x3c
   81ee4:	4659      	mov	r1, fp
   81ee6:	f7ff f9a1 	bl	8122c <__sprint_r.part.0>
   81eea:	2800      	cmp	r0, #0
   81eec:	f43f ae2e 	beq.w	81b4c <_vfiprintf_r+0x8a0>
   81ef0:	e62e      	b.n	81b50 <_vfiprintf_r+0x8a4>
   81ef2:	9907      	ldr	r1, [sp, #28]
   81ef4:	f898 2001 	ldrb.w	r2, [r8, #1]
   81ef8:	680c      	ldr	r4, [r1, #0]
   81efa:	3104      	adds	r1, #4
   81efc:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   81f00:	46b8      	mov	r8, r7
   81f02:	9107      	str	r1, [sp, #28]
   81f04:	f7ff ba44 	b.w	81390 <_vfiprintf_r+0xe4>
   81f08:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f0c:	e4a7      	b.n	8185e <_vfiprintf_r+0x5b2>
   81f0e:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f12:	e521      	b.n	81958 <_vfiprintf_r+0x6ac>
   81f14:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f18:	e47c      	b.n	81814 <_vfiprintf_r+0x568>
   81f1a:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f1e:	e43f      	b.n	817a0 <_vfiprintf_r+0x4f4>
   81f20:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81f24:	f7ff bbfa 	b.w	8171c <_vfiprintf_r+0x470>
   81f28:	00083e8c 	.word	0x00083e8c
   81f2c:	00083e7c 	.word	0x00083e7c
   81f30:	00083e74 	.word	0x00083e74

00081f34 <__sbprintf>:
   81f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81f38:	460c      	mov	r4, r1
   81f3a:	f04f 0e00 	mov.w	lr, #0
   81f3e:	f44f 6580 	mov.w	r5, #1024	; 0x400
   81f42:	4606      	mov	r6, r0
   81f44:	4617      	mov	r7, r2
   81f46:	4698      	mov	r8, r3
   81f48:	6e62      	ldr	r2, [r4, #100]	; 0x64
   81f4a:	89e3      	ldrh	r3, [r4, #14]
   81f4c:	8989      	ldrh	r1, [r1, #12]
   81f4e:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   81f52:	f021 0102 	bic.w	r1, r1, #2
   81f56:	9219      	str	r2, [sp, #100]	; 0x64
   81f58:	f8ad 300e 	strh.w	r3, [sp, #14]
   81f5c:	69e2      	ldr	r2, [r4, #28]
   81f5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81f60:	f8ad 100c 	strh.w	r1, [sp, #12]
   81f64:	a816      	add	r0, sp, #88	; 0x58
   81f66:	a91a      	add	r1, sp, #104	; 0x68
   81f68:	f8cd e018 	str.w	lr, [sp, #24]
   81f6c:	9207      	str	r2, [sp, #28]
   81f6e:	9309      	str	r3, [sp, #36]	; 0x24
   81f70:	9100      	str	r1, [sp, #0]
   81f72:	9104      	str	r1, [sp, #16]
   81f74:	9502      	str	r5, [sp, #8]
   81f76:	9505      	str	r5, [sp, #20]
   81f78:	f000 fd44 	bl	82a04 <__retarget_lock_init_recursive>
   81f7c:	4643      	mov	r3, r8
   81f7e:	463a      	mov	r2, r7
   81f80:	4669      	mov	r1, sp
   81f82:	4630      	mov	r0, r6
   81f84:	f7ff f992 	bl	812ac <_vfiprintf_r>
   81f88:	1e05      	subs	r5, r0, #0
   81f8a:	db07      	blt.n	81f9c <__sbprintf+0x68>
   81f8c:	4630      	mov	r0, r6
   81f8e:	4669      	mov	r1, sp
   81f90:	f000 f924 	bl	821dc <_fflush_r>
   81f94:	2800      	cmp	r0, #0
   81f96:	bf18      	it	ne
   81f98:	f04f 35ff 	movne.w	r5, #4294967295
   81f9c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   81fa0:	065b      	lsls	r3, r3, #25
   81fa2:	d503      	bpl.n	81fac <__sbprintf+0x78>
   81fa4:	89a3      	ldrh	r3, [r4, #12]
   81fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81faa:	81a3      	strh	r3, [r4, #12]
   81fac:	9816      	ldr	r0, [sp, #88]	; 0x58
   81fae:	f000 fd2b 	bl	82a08 <__retarget_lock_close_recursive>
   81fb2:	4628      	mov	r0, r5
   81fb4:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   81fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00081fbc <__swsetup_r>:
   81fbc:	b538      	push	{r3, r4, r5, lr}
   81fbe:	4b30      	ldr	r3, [pc, #192]	; (82080 <__swsetup_r+0xc4>)
   81fc0:	4605      	mov	r5, r0
   81fc2:	6818      	ldr	r0, [r3, #0]
   81fc4:	460c      	mov	r4, r1
   81fc6:	b110      	cbz	r0, 81fce <__swsetup_r+0x12>
   81fc8:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81fca:	2b00      	cmp	r3, #0
   81fcc:	d038      	beq.n	82040 <__swsetup_r+0x84>
   81fce:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81fd2:	b293      	uxth	r3, r2
   81fd4:	0718      	lsls	r0, r3, #28
   81fd6:	d50c      	bpl.n	81ff2 <__swsetup_r+0x36>
   81fd8:	6920      	ldr	r0, [r4, #16]
   81fda:	b1a8      	cbz	r0, 82008 <__swsetup_r+0x4c>
   81fdc:	f013 0201 	ands.w	r2, r3, #1
   81fe0:	d01e      	beq.n	82020 <__swsetup_r+0x64>
   81fe2:	2200      	movs	r2, #0
   81fe4:	6963      	ldr	r3, [r4, #20]
   81fe6:	60a2      	str	r2, [r4, #8]
   81fe8:	425b      	negs	r3, r3
   81fea:	61a3      	str	r3, [r4, #24]
   81fec:	b1f0      	cbz	r0, 8202c <__swsetup_r+0x70>
   81fee:	2000      	movs	r0, #0
   81ff0:	bd38      	pop	{r3, r4, r5, pc}
   81ff2:	06d9      	lsls	r1, r3, #27
   81ff4:	d53b      	bpl.n	8206e <__swsetup_r+0xb2>
   81ff6:	0758      	lsls	r0, r3, #29
   81ff8:	d425      	bmi.n	82046 <__swsetup_r+0x8a>
   81ffa:	6920      	ldr	r0, [r4, #16]
   81ffc:	f042 0308 	orr.w	r3, r2, #8
   82000:	81a3      	strh	r3, [r4, #12]
   82002:	b29b      	uxth	r3, r3
   82004:	2800      	cmp	r0, #0
   82006:	d1e9      	bne.n	81fdc <__swsetup_r+0x20>
   82008:	f403 7220 	and.w	r2, r3, #640	; 0x280
   8200c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82010:	d0e4      	beq.n	81fdc <__swsetup_r+0x20>
   82012:	4628      	mov	r0, r5
   82014:	4621      	mov	r1, r4
   82016:	f000 fd2b 	bl	82a70 <__smakebuf_r>
   8201a:	89a3      	ldrh	r3, [r4, #12]
   8201c:	6920      	ldr	r0, [r4, #16]
   8201e:	e7dd      	b.n	81fdc <__swsetup_r+0x20>
   82020:	0799      	lsls	r1, r3, #30
   82022:	bf58      	it	pl
   82024:	6962      	ldrpl	r2, [r4, #20]
   82026:	60a2      	str	r2, [r4, #8]
   82028:	2800      	cmp	r0, #0
   8202a:	d1e0      	bne.n	81fee <__swsetup_r+0x32>
   8202c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82030:	061a      	lsls	r2, r3, #24
   82032:	d5dd      	bpl.n	81ff0 <__swsetup_r+0x34>
   82034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82038:	81a3      	strh	r3, [r4, #12]
   8203a:	f04f 30ff 	mov.w	r0, #4294967295
   8203e:	bd38      	pop	{r3, r4, r5, pc}
   82040:	f000 f924 	bl	8228c <__sinit>
   82044:	e7c3      	b.n	81fce <__swsetup_r+0x12>
   82046:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82048:	b151      	cbz	r1, 82060 <__swsetup_r+0xa4>
   8204a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8204e:	4299      	cmp	r1, r3
   82050:	d004      	beq.n	8205c <__swsetup_r+0xa0>
   82052:	4628      	mov	r0, r5
   82054:	f000 fa40 	bl	824d8 <_free_r>
   82058:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8205c:	2300      	movs	r3, #0
   8205e:	6323      	str	r3, [r4, #48]	; 0x30
   82060:	2300      	movs	r3, #0
   82062:	6920      	ldr	r0, [r4, #16]
   82064:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82068:	e884 0009 	stmia.w	r4, {r0, r3}
   8206c:	e7c6      	b.n	81ffc <__swsetup_r+0x40>
   8206e:	2309      	movs	r3, #9
   82070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82074:	602b      	str	r3, [r5, #0]
   82076:	f04f 30ff 	mov.w	r0, #4294967295
   8207a:	81a2      	strh	r2, [r4, #12]
   8207c:	bd38      	pop	{r3, r4, r5, pc}
   8207e:	bf00      	nop
   82080:	2007015c 	.word	0x2007015c

00082084 <register_fini>:
   82084:	4b02      	ldr	r3, [pc, #8]	; (82090 <register_fini+0xc>)
   82086:	b113      	cbz	r3, 8208e <register_fini+0xa>
   82088:	4802      	ldr	r0, [pc, #8]	; (82094 <register_fini+0x10>)
   8208a:	f000 b805 	b.w	82098 <atexit>
   8208e:	4770      	bx	lr
   82090:	00000000 	.word	0x00000000
   82094:	00082305 	.word	0x00082305

00082098 <atexit>:
   82098:	2300      	movs	r3, #0
   8209a:	4601      	mov	r1, r0
   8209c:	461a      	mov	r2, r3
   8209e:	4618      	mov	r0, r3
   820a0:	f001 bbfa 	b.w	83898 <__register_exitproc>

000820a4 <__sflush_r>:
   820a4:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   820a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   820ac:	b29a      	uxth	r2, r3
   820ae:	460d      	mov	r5, r1
   820b0:	0711      	lsls	r1, r2, #28
   820b2:	4680      	mov	r8, r0
   820b4:	d43a      	bmi.n	8212c <__sflush_r+0x88>
   820b6:	686a      	ldr	r2, [r5, #4]
   820b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   820bc:	2a00      	cmp	r2, #0
   820be:	81ab      	strh	r3, [r5, #12]
   820c0:	dd70      	ble.n	821a4 <__sflush_r+0x100>
   820c2:	6aac      	ldr	r4, [r5, #40]	; 0x28
   820c4:	2c00      	cmp	r4, #0
   820c6:	d04a      	beq.n	8215e <__sflush_r+0xba>
   820c8:	2200      	movs	r2, #0
   820ca:	b29b      	uxth	r3, r3
   820cc:	f8d8 6000 	ldr.w	r6, [r8]
   820d0:	f8c8 2000 	str.w	r2, [r8]
   820d4:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   820d8:	d068      	beq.n	821ac <__sflush_r+0x108>
   820da:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   820dc:	075f      	lsls	r7, r3, #29
   820de:	d505      	bpl.n	820ec <__sflush_r+0x48>
   820e0:	6869      	ldr	r1, [r5, #4]
   820e2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   820e4:	1a52      	subs	r2, r2, r1
   820e6:	b10b      	cbz	r3, 820ec <__sflush_r+0x48>
   820e8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   820ea:	1ad2      	subs	r2, r2, r3
   820ec:	2300      	movs	r3, #0
   820ee:	69e9      	ldr	r1, [r5, #28]
   820f0:	4640      	mov	r0, r8
   820f2:	47a0      	blx	r4
   820f4:	1c44      	adds	r4, r0, #1
   820f6:	d03d      	beq.n	82174 <__sflush_r+0xd0>
   820f8:	2100      	movs	r1, #0
   820fa:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   820fe:	692a      	ldr	r2, [r5, #16]
   82100:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82104:	81ab      	strh	r3, [r5, #12]
   82106:	04db      	lsls	r3, r3, #19
   82108:	6069      	str	r1, [r5, #4]
   8210a:	602a      	str	r2, [r5, #0]
   8210c:	d448      	bmi.n	821a0 <__sflush_r+0xfc>
   8210e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82110:	f8c8 6000 	str.w	r6, [r8]
   82114:	b319      	cbz	r1, 8215e <__sflush_r+0xba>
   82116:	f105 0340 	add.w	r3, r5, #64	; 0x40
   8211a:	4299      	cmp	r1, r3
   8211c:	d002      	beq.n	82124 <__sflush_r+0x80>
   8211e:	4640      	mov	r0, r8
   82120:	f000 f9da 	bl	824d8 <_free_r>
   82124:	2000      	movs	r0, #0
   82126:	6328      	str	r0, [r5, #48]	; 0x30
   82128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8212c:	692e      	ldr	r6, [r5, #16]
   8212e:	b1b6      	cbz	r6, 8215e <__sflush_r+0xba>
   82130:	0791      	lsls	r1, r2, #30
   82132:	bf18      	it	ne
   82134:	2300      	movne	r3, #0
   82136:	682c      	ldr	r4, [r5, #0]
   82138:	bf08      	it	eq
   8213a:	696b      	ldreq	r3, [r5, #20]
   8213c:	602e      	str	r6, [r5, #0]
   8213e:	1ba4      	subs	r4, r4, r6
   82140:	60ab      	str	r3, [r5, #8]
   82142:	e00a      	b.n	8215a <__sflush_r+0xb6>
   82144:	4623      	mov	r3, r4
   82146:	4632      	mov	r2, r6
   82148:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   8214a:	69e9      	ldr	r1, [r5, #28]
   8214c:	4640      	mov	r0, r8
   8214e:	47b8      	blx	r7
   82150:	2800      	cmp	r0, #0
   82152:	eba4 0400 	sub.w	r4, r4, r0
   82156:	4406      	add	r6, r0
   82158:	dd04      	ble.n	82164 <__sflush_r+0xc0>
   8215a:	2c00      	cmp	r4, #0
   8215c:	dcf2      	bgt.n	82144 <__sflush_r+0xa0>
   8215e:	2000      	movs	r0, #0
   82160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82164:	89ab      	ldrh	r3, [r5, #12]
   82166:	f04f 30ff 	mov.w	r0, #4294967295
   8216a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8216e:	81ab      	strh	r3, [r5, #12]
   82170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82174:	f8d8 4000 	ldr.w	r4, [r8]
   82178:	2c1d      	cmp	r4, #29
   8217a:	d8f3      	bhi.n	82164 <__sflush_r+0xc0>
   8217c:	4b16      	ldr	r3, [pc, #88]	; (821d8 <__sflush_r+0x134>)
   8217e:	40e3      	lsrs	r3, r4
   82180:	43db      	mvns	r3, r3
   82182:	f013 0301 	ands.w	r3, r3, #1
   82186:	d1ed      	bne.n	82164 <__sflush_r+0xc0>
   82188:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   8218c:	6929      	ldr	r1, [r5, #16]
   8218e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82192:	81aa      	strh	r2, [r5, #12]
   82194:	04d2      	lsls	r2, r2, #19
   82196:	606b      	str	r3, [r5, #4]
   82198:	6029      	str	r1, [r5, #0]
   8219a:	d5b8      	bpl.n	8210e <__sflush_r+0x6a>
   8219c:	2c00      	cmp	r4, #0
   8219e:	d1b6      	bne.n	8210e <__sflush_r+0x6a>
   821a0:	6528      	str	r0, [r5, #80]	; 0x50
   821a2:	e7b4      	b.n	8210e <__sflush_r+0x6a>
   821a4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   821a6:	2a00      	cmp	r2, #0
   821a8:	dc8b      	bgt.n	820c2 <__sflush_r+0x1e>
   821aa:	e7d8      	b.n	8215e <__sflush_r+0xba>
   821ac:	2301      	movs	r3, #1
   821ae:	69e9      	ldr	r1, [r5, #28]
   821b0:	4640      	mov	r0, r8
   821b2:	47a0      	blx	r4
   821b4:	1c43      	adds	r3, r0, #1
   821b6:	4602      	mov	r2, r0
   821b8:	d002      	beq.n	821c0 <__sflush_r+0x11c>
   821ba:	89ab      	ldrh	r3, [r5, #12]
   821bc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   821be:	e78d      	b.n	820dc <__sflush_r+0x38>
   821c0:	f8d8 3000 	ldr.w	r3, [r8]
   821c4:	2b00      	cmp	r3, #0
   821c6:	d0f8      	beq.n	821ba <__sflush_r+0x116>
   821c8:	2b1d      	cmp	r3, #29
   821ca:	d001      	beq.n	821d0 <__sflush_r+0x12c>
   821cc:	2b16      	cmp	r3, #22
   821ce:	d1c9      	bne.n	82164 <__sflush_r+0xc0>
   821d0:	f8c8 6000 	str.w	r6, [r8]
   821d4:	e7c3      	b.n	8215e <__sflush_r+0xba>
   821d6:	bf00      	nop
   821d8:	20400001 	.word	0x20400001

000821dc <_fflush_r>:
   821dc:	b538      	push	{r3, r4, r5, lr}
   821de:	460d      	mov	r5, r1
   821e0:	4604      	mov	r4, r0
   821e2:	b108      	cbz	r0, 821e8 <_fflush_r+0xc>
   821e4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821e6:	b1bb      	cbz	r3, 82218 <_fflush_r+0x3c>
   821e8:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   821ec:	b188      	cbz	r0, 82212 <_fflush_r+0x36>
   821ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   821f0:	07db      	lsls	r3, r3, #31
   821f2:	d401      	bmi.n	821f8 <_fflush_r+0x1c>
   821f4:	0581      	lsls	r1, r0, #22
   821f6:	d517      	bpl.n	82228 <_fflush_r+0x4c>
   821f8:	4620      	mov	r0, r4
   821fa:	4629      	mov	r1, r5
   821fc:	f7ff ff52 	bl	820a4 <__sflush_r>
   82200:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82202:	4604      	mov	r4, r0
   82204:	07da      	lsls	r2, r3, #31
   82206:	d402      	bmi.n	8220e <_fflush_r+0x32>
   82208:	89ab      	ldrh	r3, [r5, #12]
   8220a:	059b      	lsls	r3, r3, #22
   8220c:	d507      	bpl.n	8221e <_fflush_r+0x42>
   8220e:	4620      	mov	r0, r4
   82210:	bd38      	pop	{r3, r4, r5, pc}
   82212:	4604      	mov	r4, r0
   82214:	4620      	mov	r0, r4
   82216:	bd38      	pop	{r3, r4, r5, pc}
   82218:	f000 f838 	bl	8228c <__sinit>
   8221c:	e7e4      	b.n	821e8 <_fflush_r+0xc>
   8221e:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82220:	f000 fbf6 	bl	82a10 <__retarget_lock_release_recursive>
   82224:	4620      	mov	r0, r4
   82226:	bd38      	pop	{r3, r4, r5, pc}
   82228:	6da8      	ldr	r0, [r5, #88]	; 0x58
   8222a:	f000 fbef 	bl	82a0c <__retarget_lock_acquire_recursive>
   8222e:	e7e3      	b.n	821f8 <_fflush_r+0x1c>

00082230 <_cleanup_r>:
   82230:	4901      	ldr	r1, [pc, #4]	; (82238 <_cleanup_r+0x8>)
   82232:	f000 bbb1 	b.w	82998 <_fwalk_reent>
   82236:	bf00      	nop
   82238:	00083981 	.word	0x00083981

0008223c <std.isra.0>:
   8223c:	2300      	movs	r3, #0
   8223e:	b510      	push	{r4, lr}
   82240:	4604      	mov	r4, r0
   82242:	8181      	strh	r1, [r0, #12]
   82244:	81c2      	strh	r2, [r0, #14]
   82246:	6003      	str	r3, [r0, #0]
   82248:	6043      	str	r3, [r0, #4]
   8224a:	6083      	str	r3, [r0, #8]
   8224c:	6643      	str	r3, [r0, #100]	; 0x64
   8224e:	6103      	str	r3, [r0, #16]
   82250:	6143      	str	r3, [r0, #20]
   82252:	6183      	str	r3, [r0, #24]
   82254:	4619      	mov	r1, r3
   82256:	2208      	movs	r2, #8
   82258:	305c      	adds	r0, #92	; 0x5c
   8225a:	f7fe fec9 	bl	80ff0 <memset>
   8225e:	4807      	ldr	r0, [pc, #28]	; (8227c <std.isra.0+0x40>)
   82260:	4907      	ldr	r1, [pc, #28]	; (82280 <std.isra.0+0x44>)
   82262:	4a08      	ldr	r2, [pc, #32]	; (82284 <std.isra.0+0x48>)
   82264:	4b08      	ldr	r3, [pc, #32]	; (82288 <std.isra.0+0x4c>)
   82266:	6220      	str	r0, [r4, #32]
   82268:	61e4      	str	r4, [r4, #28]
   8226a:	6261      	str	r1, [r4, #36]	; 0x24
   8226c:	62a2      	str	r2, [r4, #40]	; 0x28
   8226e:	62e3      	str	r3, [r4, #44]	; 0x2c
   82270:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82274:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82278:	f000 bbc4 	b.w	82a04 <__retarget_lock_init_recursive>
   8227c:	0008366d 	.word	0x0008366d
   82280:	00083691 	.word	0x00083691
   82284:	000836cd 	.word	0x000836cd
   82288:	000836ed 	.word	0x000836ed

0008228c <__sinit>:
   8228c:	b510      	push	{r4, lr}
   8228e:	4604      	mov	r4, r0
   82290:	4814      	ldr	r0, [pc, #80]	; (822e4 <__sinit+0x58>)
   82292:	f000 fbbb 	bl	82a0c <__retarget_lock_acquire_recursive>
   82296:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82298:	b9fa      	cbnz	r2, 822da <__sinit+0x4e>
   8229a:	2003      	movs	r0, #3
   8229c:	4912      	ldr	r1, [pc, #72]	; (822e8 <__sinit+0x5c>)
   8229e:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   822a2:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   822a6:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   822aa:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   822ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   822b0:	6860      	ldr	r0, [r4, #4]
   822b2:	2104      	movs	r1, #4
   822b4:	f7ff ffc2 	bl	8223c <std.isra.0>
   822b8:	68a0      	ldr	r0, [r4, #8]
   822ba:	2201      	movs	r2, #1
   822bc:	2109      	movs	r1, #9
   822be:	f7ff ffbd 	bl	8223c <std.isra.0>
   822c2:	68e0      	ldr	r0, [r4, #12]
   822c4:	2202      	movs	r2, #2
   822c6:	2112      	movs	r1, #18
   822c8:	f7ff ffb8 	bl	8223c <std.isra.0>
   822cc:	2301      	movs	r3, #1
   822ce:	4805      	ldr	r0, [pc, #20]	; (822e4 <__sinit+0x58>)
   822d0:	63a3      	str	r3, [r4, #56]	; 0x38
   822d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   822d6:	f000 bb9b 	b.w	82a10 <__retarget_lock_release_recursive>
   822da:	4802      	ldr	r0, [pc, #8]	; (822e4 <__sinit+0x58>)
   822dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   822e0:	f000 bb96 	b.w	82a10 <__retarget_lock_release_recursive>
   822e4:	20070c94 	.word	0x20070c94
   822e8:	00082231 	.word	0x00082231

000822ec <__sfp_lock_acquire>:
   822ec:	4801      	ldr	r0, [pc, #4]	; (822f4 <__sfp_lock_acquire+0x8>)
   822ee:	f000 bb8d 	b.w	82a0c <__retarget_lock_acquire_recursive>
   822f2:	bf00      	nop
   822f4:	20070ca8 	.word	0x20070ca8

000822f8 <__sfp_lock_release>:
   822f8:	4801      	ldr	r0, [pc, #4]	; (82300 <__sfp_lock_release+0x8>)
   822fa:	f000 bb89 	b.w	82a10 <__retarget_lock_release_recursive>
   822fe:	bf00      	nop
   82300:	20070ca8 	.word	0x20070ca8

00082304 <__libc_fini_array>:
   82304:	b538      	push	{r3, r4, r5, lr}
   82306:	4c0a      	ldr	r4, [pc, #40]	; (82330 <__libc_fini_array+0x2c>)
   82308:	4d0a      	ldr	r5, [pc, #40]	; (82334 <__libc_fini_array+0x30>)
   8230a:	1b64      	subs	r4, r4, r5
   8230c:	10a4      	asrs	r4, r4, #2
   8230e:	d00a      	beq.n	82326 <__libc_fini_array+0x22>
   82310:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82314:	3b01      	subs	r3, #1
   82316:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8231a:	3c01      	subs	r4, #1
   8231c:	f855 3904 	ldr.w	r3, [r5], #-4
   82320:	4798      	blx	r3
   82322:	2c00      	cmp	r4, #0
   82324:	d1f9      	bne.n	8231a <__libc_fini_array+0x16>
   82326:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8232a:	f001 be4b 	b.w	83fc4 <_fini>
   8232e:	bf00      	nop
   82330:	00083fd4 	.word	0x00083fd4
   82334:	00083fd0 	.word	0x00083fd0

00082338 <__fputwc>:
   82338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8233c:	b083      	sub	sp, #12
   8233e:	4607      	mov	r7, r0
   82340:	4688      	mov	r8, r1
   82342:	4614      	mov	r4, r2
   82344:	f000 fb50 	bl	829e8 <__locale_mb_cur_max>
   82348:	2801      	cmp	r0, #1
   8234a:	d033      	beq.n	823b4 <__fputwc+0x7c>
   8234c:	4642      	mov	r2, r8
   8234e:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82352:	a901      	add	r1, sp, #4
   82354:	4638      	mov	r0, r7
   82356:	f001 fa53 	bl	83800 <_wcrtomb_r>
   8235a:	1c42      	adds	r2, r0, #1
   8235c:	4606      	mov	r6, r0
   8235e:	d022      	beq.n	823a6 <__fputwc+0x6e>
   82360:	b390      	cbz	r0, 823c8 <__fputwc+0x90>
   82362:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82366:	2500      	movs	r5, #0
   82368:	f10d 0904 	add.w	r9, sp, #4
   8236c:	e008      	b.n	82380 <__fputwc+0x48>
   8236e:	6823      	ldr	r3, [r4, #0]
   82370:	1c5a      	adds	r2, r3, #1
   82372:	6022      	str	r2, [r4, #0]
   82374:	7019      	strb	r1, [r3, #0]
   82376:	3501      	adds	r5, #1
   82378:	42b5      	cmp	r5, r6
   8237a:	d225      	bcs.n	823c8 <__fputwc+0x90>
   8237c:	f815 1009 	ldrb.w	r1, [r5, r9]
   82380:	68a3      	ldr	r3, [r4, #8]
   82382:	3b01      	subs	r3, #1
   82384:	2b00      	cmp	r3, #0
   82386:	60a3      	str	r3, [r4, #8]
   82388:	daf1      	bge.n	8236e <__fputwc+0x36>
   8238a:	69a2      	ldr	r2, [r4, #24]
   8238c:	4293      	cmp	r3, r2
   8238e:	db01      	blt.n	82394 <__fputwc+0x5c>
   82390:	290a      	cmp	r1, #10
   82392:	d1ec      	bne.n	8236e <__fputwc+0x36>
   82394:	4622      	mov	r2, r4
   82396:	4638      	mov	r0, r7
   82398:	f001 f9da 	bl	83750 <__swbuf_r>
   8239c:	1c43      	adds	r3, r0, #1
   8239e:	d1ea      	bne.n	82376 <__fputwc+0x3e>
   823a0:	b003      	add	sp, #12
   823a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   823a6:	89a3      	ldrh	r3, [r4, #12]
   823a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   823ac:	81a3      	strh	r3, [r4, #12]
   823ae:	b003      	add	sp, #12
   823b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   823b4:	f108 33ff 	add.w	r3, r8, #4294967295
   823b8:	2bfe      	cmp	r3, #254	; 0xfe
   823ba:	d8c7      	bhi.n	8234c <__fputwc+0x14>
   823bc:	fa5f f188 	uxtb.w	r1, r8
   823c0:	4606      	mov	r6, r0
   823c2:	f88d 1004 	strb.w	r1, [sp, #4]
   823c6:	e7ce      	b.n	82366 <__fputwc+0x2e>
   823c8:	4640      	mov	r0, r8
   823ca:	b003      	add	sp, #12
   823cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000823d0 <_fputwc_r>:
   823d0:	b530      	push	{r4, r5, lr}
   823d2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   823d4:	4614      	mov	r4, r2
   823d6:	f013 0f01 	tst.w	r3, #1
   823da:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   823de:	b083      	sub	sp, #12
   823e0:	4605      	mov	r5, r0
   823e2:	b29a      	uxth	r2, r3
   823e4:	d101      	bne.n	823ea <_fputwc_r+0x1a>
   823e6:	0590      	lsls	r0, r2, #22
   823e8:	d51c      	bpl.n	82424 <_fputwc_r+0x54>
   823ea:	0490      	lsls	r0, r2, #18
   823ec:	d406      	bmi.n	823fc <_fputwc_r+0x2c>
   823ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
   823f0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   823f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   823f8:	81a3      	strh	r3, [r4, #12]
   823fa:	6662      	str	r2, [r4, #100]	; 0x64
   823fc:	4628      	mov	r0, r5
   823fe:	4622      	mov	r2, r4
   82400:	f7ff ff9a 	bl	82338 <__fputwc>
   82404:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82406:	4605      	mov	r5, r0
   82408:	07da      	lsls	r2, r3, #31
   8240a:	d402      	bmi.n	82412 <_fputwc_r+0x42>
   8240c:	89a3      	ldrh	r3, [r4, #12]
   8240e:	059b      	lsls	r3, r3, #22
   82410:	d502      	bpl.n	82418 <_fputwc_r+0x48>
   82412:	4628      	mov	r0, r5
   82414:	b003      	add	sp, #12
   82416:	bd30      	pop	{r4, r5, pc}
   82418:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8241a:	f000 faf9 	bl	82a10 <__retarget_lock_release_recursive>
   8241e:	4628      	mov	r0, r5
   82420:	b003      	add	sp, #12
   82422:	bd30      	pop	{r4, r5, pc}
   82424:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82426:	9101      	str	r1, [sp, #4]
   82428:	f000 faf0 	bl	82a0c <__retarget_lock_acquire_recursive>
   8242c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82430:	9901      	ldr	r1, [sp, #4]
   82432:	b29a      	uxth	r2, r3
   82434:	e7d9      	b.n	823ea <_fputwc_r+0x1a>
   82436:	bf00      	nop

00082438 <_malloc_trim_r>:
   82438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8243a:	460c      	mov	r4, r1
   8243c:	4f23      	ldr	r7, [pc, #140]	; (824cc <_malloc_trim_r+0x94>)
   8243e:	4606      	mov	r6, r0
   82440:	f000 ff40 	bl	832c4 <__malloc_lock>
   82444:	68bb      	ldr	r3, [r7, #8]
   82446:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   8244a:	685d      	ldr	r5, [r3, #4]
   8244c:	310f      	adds	r1, #15
   8244e:	f025 0503 	bic.w	r5, r5, #3
   82452:	4429      	add	r1, r5
   82454:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82458:	f021 010f 	bic.w	r1, r1, #15
   8245c:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82460:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82464:	db07      	blt.n	82476 <_malloc_trim_r+0x3e>
   82466:	2100      	movs	r1, #0
   82468:	4630      	mov	r0, r6
   8246a:	f001 f8ed 	bl	83648 <_sbrk_r>
   8246e:	68bb      	ldr	r3, [r7, #8]
   82470:	442b      	add	r3, r5
   82472:	4298      	cmp	r0, r3
   82474:	d004      	beq.n	82480 <_malloc_trim_r+0x48>
   82476:	4630      	mov	r0, r6
   82478:	f000 ff2a 	bl	832d0 <__malloc_unlock>
   8247c:	2000      	movs	r0, #0
   8247e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82480:	4261      	negs	r1, r4
   82482:	4630      	mov	r0, r6
   82484:	f001 f8e0 	bl	83648 <_sbrk_r>
   82488:	3001      	adds	r0, #1
   8248a:	d00d      	beq.n	824a8 <_malloc_trim_r+0x70>
   8248c:	4b10      	ldr	r3, [pc, #64]	; (824d0 <_malloc_trim_r+0x98>)
   8248e:	68ba      	ldr	r2, [r7, #8]
   82490:	6819      	ldr	r1, [r3, #0]
   82492:	1b2d      	subs	r5, r5, r4
   82494:	f045 0501 	orr.w	r5, r5, #1
   82498:	4630      	mov	r0, r6
   8249a:	1b09      	subs	r1, r1, r4
   8249c:	6055      	str	r5, [r2, #4]
   8249e:	6019      	str	r1, [r3, #0]
   824a0:	f000 ff16 	bl	832d0 <__malloc_unlock>
   824a4:	2001      	movs	r0, #1
   824a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   824a8:	2100      	movs	r1, #0
   824aa:	4630      	mov	r0, r6
   824ac:	f001 f8cc 	bl	83648 <_sbrk_r>
   824b0:	68ba      	ldr	r2, [r7, #8]
   824b2:	1a83      	subs	r3, r0, r2
   824b4:	2b0f      	cmp	r3, #15
   824b6:	ddde      	ble.n	82476 <_malloc_trim_r+0x3e>
   824b8:	4c06      	ldr	r4, [pc, #24]	; (824d4 <_malloc_trim_r+0x9c>)
   824ba:	4905      	ldr	r1, [pc, #20]	; (824d0 <_malloc_trim_r+0x98>)
   824bc:	6824      	ldr	r4, [r4, #0]
   824be:	f043 0301 	orr.w	r3, r3, #1
   824c2:	1b00      	subs	r0, r0, r4
   824c4:	6053      	str	r3, [r2, #4]
   824c6:	6008      	str	r0, [r1, #0]
   824c8:	e7d5      	b.n	82476 <_malloc_trim_r+0x3e>
   824ca:	bf00      	nop
   824cc:	200706f8 	.word	0x200706f8
   824d0:	20070c48 	.word	0x20070c48
   824d4:	20070b00 	.word	0x20070b00

000824d8 <_free_r>:
   824d8:	2900      	cmp	r1, #0
   824da:	d044      	beq.n	82566 <_free_r+0x8e>
   824dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824e0:	460d      	mov	r5, r1
   824e2:	4680      	mov	r8, r0
   824e4:	f000 feee 	bl	832c4 <__malloc_lock>
   824e8:	f855 7c04 	ldr.w	r7, [r5, #-4]
   824ec:	4969      	ldr	r1, [pc, #420]	; (82694 <_free_r+0x1bc>)
   824ee:	f1a5 0408 	sub.w	r4, r5, #8
   824f2:	f027 0301 	bic.w	r3, r7, #1
   824f6:	18e2      	adds	r2, r4, r3
   824f8:	688e      	ldr	r6, [r1, #8]
   824fa:	6850      	ldr	r0, [r2, #4]
   824fc:	42b2      	cmp	r2, r6
   824fe:	f020 0003 	bic.w	r0, r0, #3
   82502:	d05e      	beq.n	825c2 <_free_r+0xea>
   82504:	07fe      	lsls	r6, r7, #31
   82506:	6050      	str	r0, [r2, #4]
   82508:	d40b      	bmi.n	82522 <_free_r+0x4a>
   8250a:	f855 7c08 	ldr.w	r7, [r5, #-8]
   8250e:	f101 0e08 	add.w	lr, r1, #8
   82512:	1be4      	subs	r4, r4, r7
   82514:	68a5      	ldr	r5, [r4, #8]
   82516:	443b      	add	r3, r7
   82518:	4575      	cmp	r5, lr
   8251a:	d06d      	beq.n	825f8 <_free_r+0x120>
   8251c:	68e7      	ldr	r7, [r4, #12]
   8251e:	60ef      	str	r7, [r5, #12]
   82520:	60bd      	str	r5, [r7, #8]
   82522:	1815      	adds	r5, r2, r0
   82524:	686d      	ldr	r5, [r5, #4]
   82526:	07ed      	lsls	r5, r5, #31
   82528:	d53e      	bpl.n	825a8 <_free_r+0xd0>
   8252a:	f043 0201 	orr.w	r2, r3, #1
   8252e:	6062      	str	r2, [r4, #4]
   82530:	50e3      	str	r3, [r4, r3]
   82532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82536:	d217      	bcs.n	82568 <_free_r+0x90>
   82538:	2201      	movs	r2, #1
   8253a:	08db      	lsrs	r3, r3, #3
   8253c:	1098      	asrs	r0, r3, #2
   8253e:	684d      	ldr	r5, [r1, #4]
   82540:	4413      	add	r3, r2
   82542:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82546:	4082      	lsls	r2, r0
   82548:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   8254c:	432a      	orrs	r2, r5
   8254e:	3808      	subs	r0, #8
   82550:	60e0      	str	r0, [r4, #12]
   82552:	60a7      	str	r7, [r4, #8]
   82554:	604a      	str	r2, [r1, #4]
   82556:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   8255a:	60fc      	str	r4, [r7, #12]
   8255c:	4640      	mov	r0, r8
   8255e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82562:	f000 beb5 	b.w	832d0 <__malloc_unlock>
   82566:	4770      	bx	lr
   82568:	0a5a      	lsrs	r2, r3, #9
   8256a:	2a04      	cmp	r2, #4
   8256c:	d852      	bhi.n	82614 <_free_r+0x13c>
   8256e:	099a      	lsrs	r2, r3, #6
   82570:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82574:	00ff      	lsls	r7, r7, #3
   82576:	f102 0538 	add.w	r5, r2, #56	; 0x38
   8257a:	19c8      	adds	r0, r1, r7
   8257c:	59ca      	ldr	r2, [r1, r7]
   8257e:	3808      	subs	r0, #8
   82580:	4290      	cmp	r0, r2
   82582:	d04f      	beq.n	82624 <_free_r+0x14c>
   82584:	6851      	ldr	r1, [r2, #4]
   82586:	f021 0103 	bic.w	r1, r1, #3
   8258a:	428b      	cmp	r3, r1
   8258c:	d232      	bcs.n	825f4 <_free_r+0x11c>
   8258e:	6892      	ldr	r2, [r2, #8]
   82590:	4290      	cmp	r0, r2
   82592:	d1f7      	bne.n	82584 <_free_r+0xac>
   82594:	68c3      	ldr	r3, [r0, #12]
   82596:	60a0      	str	r0, [r4, #8]
   82598:	60e3      	str	r3, [r4, #12]
   8259a:	609c      	str	r4, [r3, #8]
   8259c:	60c4      	str	r4, [r0, #12]
   8259e:	4640      	mov	r0, r8
   825a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   825a4:	f000 be94 	b.w	832d0 <__malloc_unlock>
   825a8:	6895      	ldr	r5, [r2, #8]
   825aa:	4f3b      	ldr	r7, [pc, #236]	; (82698 <_free_r+0x1c0>)
   825ac:	4403      	add	r3, r0
   825ae:	42bd      	cmp	r5, r7
   825b0:	d040      	beq.n	82634 <_free_r+0x15c>
   825b2:	68d0      	ldr	r0, [r2, #12]
   825b4:	f043 0201 	orr.w	r2, r3, #1
   825b8:	60e8      	str	r0, [r5, #12]
   825ba:	6085      	str	r5, [r0, #8]
   825bc:	6062      	str	r2, [r4, #4]
   825be:	50e3      	str	r3, [r4, r3]
   825c0:	e7b7      	b.n	82532 <_free_r+0x5a>
   825c2:	07ff      	lsls	r7, r7, #31
   825c4:	4403      	add	r3, r0
   825c6:	d407      	bmi.n	825d8 <_free_r+0x100>
   825c8:	f855 5c08 	ldr.w	r5, [r5, #-8]
   825cc:	1b64      	subs	r4, r4, r5
   825ce:	68e2      	ldr	r2, [r4, #12]
   825d0:	68a0      	ldr	r0, [r4, #8]
   825d2:	442b      	add	r3, r5
   825d4:	60c2      	str	r2, [r0, #12]
   825d6:	6090      	str	r0, [r2, #8]
   825d8:	4a30      	ldr	r2, [pc, #192]	; (8269c <_free_r+0x1c4>)
   825da:	f043 0001 	orr.w	r0, r3, #1
   825de:	6812      	ldr	r2, [r2, #0]
   825e0:	6060      	str	r0, [r4, #4]
   825e2:	4293      	cmp	r3, r2
   825e4:	608c      	str	r4, [r1, #8]
   825e6:	d3b9      	bcc.n	8255c <_free_r+0x84>
   825e8:	4b2d      	ldr	r3, [pc, #180]	; (826a0 <_free_r+0x1c8>)
   825ea:	4640      	mov	r0, r8
   825ec:	6819      	ldr	r1, [r3, #0]
   825ee:	f7ff ff23 	bl	82438 <_malloc_trim_r>
   825f2:	e7b3      	b.n	8255c <_free_r+0x84>
   825f4:	4610      	mov	r0, r2
   825f6:	e7cd      	b.n	82594 <_free_r+0xbc>
   825f8:	1811      	adds	r1, r2, r0
   825fa:	6849      	ldr	r1, [r1, #4]
   825fc:	07c9      	lsls	r1, r1, #31
   825fe:	d444      	bmi.n	8268a <_free_r+0x1b2>
   82600:	6891      	ldr	r1, [r2, #8]
   82602:	4403      	add	r3, r0
   82604:	68d2      	ldr	r2, [r2, #12]
   82606:	f043 0001 	orr.w	r0, r3, #1
   8260a:	60ca      	str	r2, [r1, #12]
   8260c:	6091      	str	r1, [r2, #8]
   8260e:	6060      	str	r0, [r4, #4]
   82610:	50e3      	str	r3, [r4, r3]
   82612:	e7a3      	b.n	8255c <_free_r+0x84>
   82614:	2a14      	cmp	r2, #20
   82616:	d816      	bhi.n	82646 <_free_r+0x16e>
   82618:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   8261c:	00ff      	lsls	r7, r7, #3
   8261e:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82622:	e7aa      	b.n	8257a <_free_r+0xa2>
   82624:	2301      	movs	r3, #1
   82626:	10aa      	asrs	r2, r5, #2
   82628:	684d      	ldr	r5, [r1, #4]
   8262a:	4093      	lsls	r3, r2
   8262c:	432b      	orrs	r3, r5
   8262e:	604b      	str	r3, [r1, #4]
   82630:	4603      	mov	r3, r0
   82632:	e7b0      	b.n	82596 <_free_r+0xbe>
   82634:	f043 0201 	orr.w	r2, r3, #1
   82638:	614c      	str	r4, [r1, #20]
   8263a:	610c      	str	r4, [r1, #16]
   8263c:	60e5      	str	r5, [r4, #12]
   8263e:	60a5      	str	r5, [r4, #8]
   82640:	6062      	str	r2, [r4, #4]
   82642:	50e3      	str	r3, [r4, r3]
   82644:	e78a      	b.n	8255c <_free_r+0x84>
   82646:	2a54      	cmp	r2, #84	; 0x54
   82648:	d806      	bhi.n	82658 <_free_r+0x180>
   8264a:	0b1a      	lsrs	r2, r3, #12
   8264c:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82650:	00ff      	lsls	r7, r7, #3
   82652:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82656:	e790      	b.n	8257a <_free_r+0xa2>
   82658:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8265c:	d806      	bhi.n	8266c <_free_r+0x194>
   8265e:	0bda      	lsrs	r2, r3, #15
   82660:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82664:	00ff      	lsls	r7, r7, #3
   82666:	f102 0577 	add.w	r5, r2, #119	; 0x77
   8266a:	e786      	b.n	8257a <_free_r+0xa2>
   8266c:	f240 5054 	movw	r0, #1364	; 0x554
   82670:	4282      	cmp	r2, r0
   82672:	d806      	bhi.n	82682 <_free_r+0x1aa>
   82674:	0c9a      	lsrs	r2, r3, #18
   82676:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   8267a:	00ff      	lsls	r7, r7, #3
   8267c:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82680:	e77b      	b.n	8257a <_free_r+0xa2>
   82682:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82686:	257e      	movs	r5, #126	; 0x7e
   82688:	e777      	b.n	8257a <_free_r+0xa2>
   8268a:	f043 0101 	orr.w	r1, r3, #1
   8268e:	6061      	str	r1, [r4, #4]
   82690:	6013      	str	r3, [r2, #0]
   82692:	e763      	b.n	8255c <_free_r+0x84>
   82694:	200706f8 	.word	0x200706f8
   82698:	20070700 	.word	0x20070700
   8269c:	20070b04 	.word	0x20070b04
   826a0:	20070c78 	.word	0x20070c78

000826a4 <__sfvwrite_r>:
   826a4:	6893      	ldr	r3, [r2, #8]
   826a6:	2b00      	cmp	r3, #0
   826a8:	d071      	beq.n	8278e <__sfvwrite_r+0xea>
   826aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   826ae:	898b      	ldrh	r3, [r1, #12]
   826b0:	b083      	sub	sp, #12
   826b2:	460c      	mov	r4, r1
   826b4:	0719      	lsls	r1, r3, #28
   826b6:	9000      	str	r0, [sp, #0]
   826b8:	4616      	mov	r6, r2
   826ba:	d525      	bpl.n	82708 <__sfvwrite_r+0x64>
   826bc:	6922      	ldr	r2, [r4, #16]
   826be:	b31a      	cbz	r2, 82708 <__sfvwrite_r+0x64>
   826c0:	f013 0002 	ands.w	r0, r3, #2
   826c4:	6835      	ldr	r5, [r6, #0]
   826c6:	d02b      	beq.n	82720 <__sfvwrite_r+0x7c>
   826c8:	f04f 0900 	mov.w	r9, #0
   826cc:	46b0      	mov	r8, r6
   826ce:	464f      	mov	r7, r9
   826d0:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82994 <__sfvwrite_r+0x2f0>
   826d4:	2f00      	cmp	r7, #0
   826d6:	d055      	beq.n	82784 <__sfvwrite_r+0xe0>
   826d8:	4557      	cmp	r7, sl
   826da:	463b      	mov	r3, r7
   826dc:	464a      	mov	r2, r9
   826de:	bf28      	it	cs
   826e0:	4653      	movcs	r3, sl
   826e2:	69e1      	ldr	r1, [r4, #28]
   826e4:	9800      	ldr	r0, [sp, #0]
   826e6:	6a66      	ldr	r6, [r4, #36]	; 0x24
   826e8:	47b0      	blx	r6
   826ea:	2800      	cmp	r0, #0
   826ec:	dd56      	ble.n	8279c <__sfvwrite_r+0xf8>
   826ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   826f2:	4481      	add	r9, r0
   826f4:	1a1b      	subs	r3, r3, r0
   826f6:	1a3f      	subs	r7, r7, r0
   826f8:	f8c8 3008 	str.w	r3, [r8, #8]
   826fc:	2b00      	cmp	r3, #0
   826fe:	d1e9      	bne.n	826d4 <__sfvwrite_r+0x30>
   82700:	2000      	movs	r0, #0
   82702:	b003      	add	sp, #12
   82704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82708:	4621      	mov	r1, r4
   8270a:	9800      	ldr	r0, [sp, #0]
   8270c:	f7ff fc56 	bl	81fbc <__swsetup_r>
   82710:	2800      	cmp	r0, #0
   82712:	f040 8135 	bne.w	82980 <__sfvwrite_r+0x2dc>
   82716:	89a3      	ldrh	r3, [r4, #12]
   82718:	6835      	ldr	r5, [r6, #0]
   8271a:	f013 0002 	ands.w	r0, r3, #2
   8271e:	d1d3      	bne.n	826c8 <__sfvwrite_r+0x24>
   82720:	f013 0901 	ands.w	r9, r3, #1
   82724:	d144      	bne.n	827b0 <__sfvwrite_r+0x10c>
   82726:	464f      	mov	r7, r9
   82728:	9601      	str	r6, [sp, #4]
   8272a:	b337      	cbz	r7, 8277a <__sfvwrite_r+0xd6>
   8272c:	059a      	lsls	r2, r3, #22
   8272e:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82732:	f140 8085 	bpl.w	82840 <__sfvwrite_r+0x19c>
   82736:	4547      	cmp	r7, r8
   82738:	46c3      	mov	fp, r8
   8273a:	f0c0 80ad 	bcc.w	82898 <__sfvwrite_r+0x1f4>
   8273e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82742:	f040 80ae 	bne.w	828a2 <__sfvwrite_r+0x1fe>
   82746:	46ba      	mov	sl, r7
   82748:	6820      	ldr	r0, [r4, #0]
   8274a:	465a      	mov	r2, fp
   8274c:	4649      	mov	r1, r9
   8274e:	f000 fd55 	bl	831fc <memmove>
   82752:	68a2      	ldr	r2, [r4, #8]
   82754:	6823      	ldr	r3, [r4, #0]
   82756:	eba2 0208 	sub.w	r2, r2, r8
   8275a:	445b      	add	r3, fp
   8275c:	60a2      	str	r2, [r4, #8]
   8275e:	6023      	str	r3, [r4, #0]
   82760:	9a01      	ldr	r2, [sp, #4]
   82762:	44d1      	add	r9, sl
   82764:	6893      	ldr	r3, [r2, #8]
   82766:	eba7 070a 	sub.w	r7, r7, sl
   8276a:	eba3 030a 	sub.w	r3, r3, sl
   8276e:	6093      	str	r3, [r2, #8]
   82770:	2b00      	cmp	r3, #0
   82772:	d0c5      	beq.n	82700 <__sfvwrite_r+0x5c>
   82774:	89a3      	ldrh	r3, [r4, #12]
   82776:	2f00      	cmp	r7, #0
   82778:	d1d8      	bne.n	8272c <__sfvwrite_r+0x88>
   8277a:	f8d5 9000 	ldr.w	r9, [r5]
   8277e:	686f      	ldr	r7, [r5, #4]
   82780:	3508      	adds	r5, #8
   82782:	e7d2      	b.n	8272a <__sfvwrite_r+0x86>
   82784:	f8d5 9000 	ldr.w	r9, [r5]
   82788:	686f      	ldr	r7, [r5, #4]
   8278a:	3508      	adds	r5, #8
   8278c:	e7a2      	b.n	826d4 <__sfvwrite_r+0x30>
   8278e:	2000      	movs	r0, #0
   82790:	4770      	bx	lr
   82792:	4621      	mov	r1, r4
   82794:	9800      	ldr	r0, [sp, #0]
   82796:	f7ff fd21 	bl	821dc <_fflush_r>
   8279a:	b378      	cbz	r0, 827fc <__sfvwrite_r+0x158>
   8279c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   827a0:	f04f 30ff 	mov.w	r0, #4294967295
   827a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   827a8:	81a3      	strh	r3, [r4, #12]
   827aa:	b003      	add	sp, #12
   827ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   827b0:	4681      	mov	r9, r0
   827b2:	4633      	mov	r3, r6
   827b4:	464e      	mov	r6, r9
   827b6:	46a8      	mov	r8, r5
   827b8:	469a      	mov	sl, r3
   827ba:	464d      	mov	r5, r9
   827bc:	b356      	cbz	r6, 82814 <__sfvwrite_r+0x170>
   827be:	2800      	cmp	r0, #0
   827c0:	d032      	beq.n	82828 <__sfvwrite_r+0x184>
   827c2:	45b1      	cmp	r9, r6
   827c4:	46cb      	mov	fp, r9
   827c6:	bf28      	it	cs
   827c8:	46b3      	movcs	fp, r6
   827ca:	6820      	ldr	r0, [r4, #0]
   827cc:	6923      	ldr	r3, [r4, #16]
   827ce:	465f      	mov	r7, fp
   827d0:	4298      	cmp	r0, r3
   827d2:	6962      	ldr	r2, [r4, #20]
   827d4:	d904      	bls.n	827e0 <__sfvwrite_r+0x13c>
   827d6:	68a3      	ldr	r3, [r4, #8]
   827d8:	4413      	add	r3, r2
   827da:	459b      	cmp	fp, r3
   827dc:	f300 80a8 	bgt.w	82930 <__sfvwrite_r+0x28c>
   827e0:	4593      	cmp	fp, r2
   827e2:	db4d      	blt.n	82880 <__sfvwrite_r+0x1dc>
   827e4:	4613      	mov	r3, r2
   827e6:	6a67      	ldr	r7, [r4, #36]	; 0x24
   827e8:	462a      	mov	r2, r5
   827ea:	69e1      	ldr	r1, [r4, #28]
   827ec:	9800      	ldr	r0, [sp, #0]
   827ee:	47b8      	blx	r7
   827f0:	1e07      	subs	r7, r0, #0
   827f2:	ddd3      	ble.n	8279c <__sfvwrite_r+0xf8>
   827f4:	ebb9 0907 	subs.w	r9, r9, r7
   827f8:	d0cb      	beq.n	82792 <__sfvwrite_r+0xee>
   827fa:	2001      	movs	r0, #1
   827fc:	f8da 3008 	ldr.w	r3, [sl, #8]
   82800:	443d      	add	r5, r7
   82802:	1bdb      	subs	r3, r3, r7
   82804:	1bf6      	subs	r6, r6, r7
   82806:	f8ca 3008 	str.w	r3, [sl, #8]
   8280a:	2b00      	cmp	r3, #0
   8280c:	f43f af78 	beq.w	82700 <__sfvwrite_r+0x5c>
   82810:	2e00      	cmp	r6, #0
   82812:	d1d4      	bne.n	827be <__sfvwrite_r+0x11a>
   82814:	f108 0308 	add.w	r3, r8, #8
   82818:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8281c:	4698      	mov	r8, r3
   8281e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82822:	3308      	adds	r3, #8
   82824:	2e00      	cmp	r6, #0
   82826:	d0f7      	beq.n	82818 <__sfvwrite_r+0x174>
   82828:	4632      	mov	r2, r6
   8282a:	210a      	movs	r1, #10
   8282c:	4628      	mov	r0, r5
   8282e:	f000 fc29 	bl	83084 <memchr>
   82832:	2800      	cmp	r0, #0
   82834:	f000 80a1 	beq.w	8297a <__sfvwrite_r+0x2d6>
   82838:	3001      	adds	r0, #1
   8283a:	eba0 0905 	sub.w	r9, r0, r5
   8283e:	e7c0      	b.n	827c2 <__sfvwrite_r+0x11e>
   82840:	6820      	ldr	r0, [r4, #0]
   82842:	6923      	ldr	r3, [r4, #16]
   82844:	4298      	cmp	r0, r3
   82846:	d802      	bhi.n	8284e <__sfvwrite_r+0x1aa>
   82848:	6963      	ldr	r3, [r4, #20]
   8284a:	429f      	cmp	r7, r3
   8284c:	d25d      	bcs.n	8290a <__sfvwrite_r+0x266>
   8284e:	45b8      	cmp	r8, r7
   82850:	bf28      	it	cs
   82852:	46b8      	movcs	r8, r7
   82854:	4649      	mov	r1, r9
   82856:	4642      	mov	r2, r8
   82858:	f000 fcd0 	bl	831fc <memmove>
   8285c:	68a3      	ldr	r3, [r4, #8]
   8285e:	6822      	ldr	r2, [r4, #0]
   82860:	eba3 0308 	sub.w	r3, r3, r8
   82864:	4442      	add	r2, r8
   82866:	60a3      	str	r3, [r4, #8]
   82868:	6022      	str	r2, [r4, #0]
   8286a:	b10b      	cbz	r3, 82870 <__sfvwrite_r+0x1cc>
   8286c:	46c2      	mov	sl, r8
   8286e:	e777      	b.n	82760 <__sfvwrite_r+0xbc>
   82870:	4621      	mov	r1, r4
   82872:	9800      	ldr	r0, [sp, #0]
   82874:	f7ff fcb2 	bl	821dc <_fflush_r>
   82878:	2800      	cmp	r0, #0
   8287a:	d18f      	bne.n	8279c <__sfvwrite_r+0xf8>
   8287c:	46c2      	mov	sl, r8
   8287e:	e76f      	b.n	82760 <__sfvwrite_r+0xbc>
   82880:	465a      	mov	r2, fp
   82882:	4629      	mov	r1, r5
   82884:	f000 fcba 	bl	831fc <memmove>
   82888:	68a2      	ldr	r2, [r4, #8]
   8288a:	6823      	ldr	r3, [r4, #0]
   8288c:	eba2 020b 	sub.w	r2, r2, fp
   82890:	445b      	add	r3, fp
   82892:	60a2      	str	r2, [r4, #8]
   82894:	6023      	str	r3, [r4, #0]
   82896:	e7ad      	b.n	827f4 <__sfvwrite_r+0x150>
   82898:	46b8      	mov	r8, r7
   8289a:	46ba      	mov	sl, r7
   8289c:	46bb      	mov	fp, r7
   8289e:	6820      	ldr	r0, [r4, #0]
   828a0:	e753      	b.n	8274a <__sfvwrite_r+0xa6>
   828a2:	6962      	ldr	r2, [r4, #20]
   828a4:	6820      	ldr	r0, [r4, #0]
   828a6:	6921      	ldr	r1, [r4, #16]
   828a8:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   828ac:	eba0 0a01 	sub.w	sl, r0, r1
   828b0:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   828b4:	f10a 0001 	add.w	r0, sl, #1
   828b8:	ea4f 0868 	mov.w	r8, r8, asr #1
   828bc:	4438      	add	r0, r7
   828be:	4540      	cmp	r0, r8
   828c0:	4642      	mov	r2, r8
   828c2:	bf84      	itt	hi
   828c4:	4680      	movhi	r8, r0
   828c6:	4642      	movhi	r2, r8
   828c8:	055b      	lsls	r3, r3, #21
   828ca:	d544      	bpl.n	82956 <__sfvwrite_r+0x2b2>
   828cc:	4611      	mov	r1, r2
   828ce:	9800      	ldr	r0, [sp, #0]
   828d0:	f000 f920 	bl	82b14 <_malloc_r>
   828d4:	4683      	mov	fp, r0
   828d6:	2800      	cmp	r0, #0
   828d8:	d055      	beq.n	82986 <__sfvwrite_r+0x2e2>
   828da:	4652      	mov	r2, sl
   828dc:	6921      	ldr	r1, [r4, #16]
   828de:	f000 fc17 	bl	83110 <memcpy>
   828e2:	89a3      	ldrh	r3, [r4, #12]
   828e4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   828e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   828ec:	81a3      	strh	r3, [r4, #12]
   828ee:	eb0b 000a 	add.w	r0, fp, sl
   828f2:	eba8 030a 	sub.w	r3, r8, sl
   828f6:	f8c4 b010 	str.w	fp, [r4, #16]
   828fa:	f8c4 8014 	str.w	r8, [r4, #20]
   828fe:	6020      	str	r0, [r4, #0]
   82900:	60a3      	str	r3, [r4, #8]
   82902:	46b8      	mov	r8, r7
   82904:	46ba      	mov	sl, r7
   82906:	46bb      	mov	fp, r7
   82908:	e71f      	b.n	8274a <__sfvwrite_r+0xa6>
   8290a:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   8290e:	42ba      	cmp	r2, r7
   82910:	bf28      	it	cs
   82912:	463a      	movcs	r2, r7
   82914:	fb92 f2f3 	sdiv	r2, r2, r3
   82918:	69e1      	ldr	r1, [r4, #28]
   8291a:	fb03 f302 	mul.w	r3, r3, r2
   8291e:	9800      	ldr	r0, [sp, #0]
   82920:	464a      	mov	r2, r9
   82922:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82924:	47b0      	blx	r6
   82926:	f1b0 0a00 	subs.w	sl, r0, #0
   8292a:	f73f af19 	bgt.w	82760 <__sfvwrite_r+0xbc>
   8292e:	e735      	b.n	8279c <__sfvwrite_r+0xf8>
   82930:	461a      	mov	r2, r3
   82932:	4629      	mov	r1, r5
   82934:	9301      	str	r3, [sp, #4]
   82936:	f000 fc61 	bl	831fc <memmove>
   8293a:	6822      	ldr	r2, [r4, #0]
   8293c:	9b01      	ldr	r3, [sp, #4]
   8293e:	4621      	mov	r1, r4
   82940:	441a      	add	r2, r3
   82942:	6022      	str	r2, [r4, #0]
   82944:	9800      	ldr	r0, [sp, #0]
   82946:	f7ff fc49 	bl	821dc <_fflush_r>
   8294a:	9b01      	ldr	r3, [sp, #4]
   8294c:	2800      	cmp	r0, #0
   8294e:	f47f af25 	bne.w	8279c <__sfvwrite_r+0xf8>
   82952:	461f      	mov	r7, r3
   82954:	e74e      	b.n	827f4 <__sfvwrite_r+0x150>
   82956:	9800      	ldr	r0, [sp, #0]
   82958:	f000 fcc0 	bl	832dc <_realloc_r>
   8295c:	4683      	mov	fp, r0
   8295e:	2800      	cmp	r0, #0
   82960:	d1c5      	bne.n	828ee <__sfvwrite_r+0x24a>
   82962:	9d00      	ldr	r5, [sp, #0]
   82964:	6921      	ldr	r1, [r4, #16]
   82966:	4628      	mov	r0, r5
   82968:	f7ff fdb6 	bl	824d8 <_free_r>
   8296c:	220c      	movs	r2, #12
   8296e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82972:	602a      	str	r2, [r5, #0]
   82974:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82978:	e712      	b.n	827a0 <__sfvwrite_r+0xfc>
   8297a:	f106 0901 	add.w	r9, r6, #1
   8297e:	e720      	b.n	827c2 <__sfvwrite_r+0x11e>
   82980:	f04f 30ff 	mov.w	r0, #4294967295
   82984:	e6bd      	b.n	82702 <__sfvwrite_r+0x5e>
   82986:	220c      	movs	r2, #12
   82988:	9900      	ldr	r1, [sp, #0]
   8298a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8298e:	600a      	str	r2, [r1, #0]
   82990:	e706      	b.n	827a0 <__sfvwrite_r+0xfc>
   82992:	bf00      	nop
   82994:	7ffffc00 	.word	0x7ffffc00

00082998 <_fwalk_reent>:
   82998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8299c:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   829a0:	d01e      	beq.n	829e0 <_fwalk_reent+0x48>
   829a2:	4688      	mov	r8, r1
   829a4:	4607      	mov	r7, r0
   829a6:	f04f 0900 	mov.w	r9, #0
   829aa:	6875      	ldr	r5, [r6, #4]
   829ac:	68b4      	ldr	r4, [r6, #8]
   829ae:	3d01      	subs	r5, #1
   829b0:	d410      	bmi.n	829d4 <_fwalk_reent+0x3c>
   829b2:	89a3      	ldrh	r3, [r4, #12]
   829b4:	3d01      	subs	r5, #1
   829b6:	2b01      	cmp	r3, #1
   829b8:	d908      	bls.n	829cc <_fwalk_reent+0x34>
   829ba:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   829be:	3301      	adds	r3, #1
   829c0:	d004      	beq.n	829cc <_fwalk_reent+0x34>
   829c2:	4621      	mov	r1, r4
   829c4:	4638      	mov	r0, r7
   829c6:	47c0      	blx	r8
   829c8:	ea49 0900 	orr.w	r9, r9, r0
   829cc:	1c6b      	adds	r3, r5, #1
   829ce:	f104 0468 	add.w	r4, r4, #104	; 0x68
   829d2:	d1ee      	bne.n	829b2 <_fwalk_reent+0x1a>
   829d4:	6836      	ldr	r6, [r6, #0]
   829d6:	2e00      	cmp	r6, #0
   829d8:	d1e7      	bne.n	829aa <_fwalk_reent+0x12>
   829da:	4648      	mov	r0, r9
   829dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   829e0:	46b1      	mov	r9, r6
   829e2:	4648      	mov	r0, r9
   829e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000829e8 <__locale_mb_cur_max>:
   829e8:	4b04      	ldr	r3, [pc, #16]	; (829fc <__locale_mb_cur_max+0x14>)
   829ea:	4a05      	ldr	r2, [pc, #20]	; (82a00 <__locale_mb_cur_max+0x18>)
   829ec:	681b      	ldr	r3, [r3, #0]
   829ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   829f0:	2b00      	cmp	r3, #0
   829f2:	bf08      	it	eq
   829f4:	4613      	moveq	r3, r2
   829f6:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   829fa:	4770      	bx	lr
   829fc:	2007015c 	.word	0x2007015c
   82a00:	2007058c 	.word	0x2007058c

00082a04 <__retarget_lock_init_recursive>:
   82a04:	4770      	bx	lr
   82a06:	bf00      	nop

00082a08 <__retarget_lock_close_recursive>:
   82a08:	4770      	bx	lr
   82a0a:	bf00      	nop

00082a0c <__retarget_lock_acquire_recursive>:
   82a0c:	4770      	bx	lr
   82a0e:	bf00      	nop

00082a10 <__retarget_lock_release_recursive>:
   82a10:	4770      	bx	lr
   82a12:	bf00      	nop

00082a14 <__swhatbuf_r>:
   82a14:	b570      	push	{r4, r5, r6, lr}
   82a16:	460c      	mov	r4, r1
   82a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82a1c:	b090      	sub	sp, #64	; 0x40
   82a1e:	2900      	cmp	r1, #0
   82a20:	4615      	mov	r5, r2
   82a22:	461e      	mov	r6, r3
   82a24:	db14      	blt.n	82a50 <__swhatbuf_r+0x3c>
   82a26:	aa01      	add	r2, sp, #4
   82a28:	f001 f80c 	bl	83a44 <_fstat_r>
   82a2c:	2800      	cmp	r0, #0
   82a2e:	db0f      	blt.n	82a50 <__swhatbuf_r+0x3c>
   82a30:	9a02      	ldr	r2, [sp, #8]
   82a32:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82a3a:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82a3e:	fab2 f282 	clz	r2, r2
   82a42:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82a46:	0952      	lsrs	r2, r2, #5
   82a48:	6032      	str	r2, [r6, #0]
   82a4a:	602b      	str	r3, [r5, #0]
   82a4c:	b010      	add	sp, #64	; 0x40
   82a4e:	bd70      	pop	{r4, r5, r6, pc}
   82a50:	2300      	movs	r3, #0
   82a52:	89a2      	ldrh	r2, [r4, #12]
   82a54:	6033      	str	r3, [r6, #0]
   82a56:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82a5a:	d004      	beq.n	82a66 <__swhatbuf_r+0x52>
   82a5c:	2240      	movs	r2, #64	; 0x40
   82a5e:	4618      	mov	r0, r3
   82a60:	602a      	str	r2, [r5, #0]
   82a62:	b010      	add	sp, #64	; 0x40
   82a64:	bd70      	pop	{r4, r5, r6, pc}
   82a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82a6a:	602b      	str	r3, [r5, #0]
   82a6c:	b010      	add	sp, #64	; 0x40
   82a6e:	bd70      	pop	{r4, r5, r6, pc}

00082a70 <__smakebuf_r>:
   82a70:	898a      	ldrh	r2, [r1, #12]
   82a72:	460b      	mov	r3, r1
   82a74:	0792      	lsls	r2, r2, #30
   82a76:	d506      	bpl.n	82a86 <__smakebuf_r+0x16>
   82a78:	2101      	movs	r1, #1
   82a7a:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82a7e:	6159      	str	r1, [r3, #20]
   82a80:	601a      	str	r2, [r3, #0]
   82a82:	611a      	str	r2, [r3, #16]
   82a84:	4770      	bx	lr
   82a86:	b5f0      	push	{r4, r5, r6, r7, lr}
   82a88:	b083      	sub	sp, #12
   82a8a:	ab01      	add	r3, sp, #4
   82a8c:	466a      	mov	r2, sp
   82a8e:	460c      	mov	r4, r1
   82a90:	4606      	mov	r6, r0
   82a92:	f7ff ffbf 	bl	82a14 <__swhatbuf_r>
   82a96:	9900      	ldr	r1, [sp, #0]
   82a98:	4605      	mov	r5, r0
   82a9a:	4630      	mov	r0, r6
   82a9c:	f000 f83a 	bl	82b14 <_malloc_r>
   82aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82aa4:	b1d8      	cbz	r0, 82ade <__smakebuf_r+0x6e>
   82aa6:	e89d 0006 	ldmia.w	sp, {r1, r2}
   82aaa:	4f15      	ldr	r7, [pc, #84]	; (82b00 <__smakebuf_r+0x90>)
   82aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82ab0:	63f7      	str	r7, [r6, #60]	; 0x3c
   82ab2:	81a3      	strh	r3, [r4, #12]
   82ab4:	6020      	str	r0, [r4, #0]
   82ab6:	6120      	str	r0, [r4, #16]
   82ab8:	6161      	str	r1, [r4, #20]
   82aba:	b91a      	cbnz	r2, 82ac4 <__smakebuf_r+0x54>
   82abc:	432b      	orrs	r3, r5
   82abe:	81a3      	strh	r3, [r4, #12]
   82ac0:	b003      	add	sp, #12
   82ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82ac4:	4630      	mov	r0, r6
   82ac6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   82aca:	f000 ffcf 	bl	83a6c <_isatty_r>
   82ace:	b1a0      	cbz	r0, 82afa <__smakebuf_r+0x8a>
   82ad0:	89a3      	ldrh	r3, [r4, #12]
   82ad2:	f023 0303 	bic.w	r3, r3, #3
   82ad6:	f043 0301 	orr.w	r3, r3, #1
   82ada:	b21b      	sxth	r3, r3
   82adc:	e7ee      	b.n	82abc <__smakebuf_r+0x4c>
   82ade:	059a      	lsls	r2, r3, #22
   82ae0:	d4ee      	bmi.n	82ac0 <__smakebuf_r+0x50>
   82ae2:	2101      	movs	r1, #1
   82ae4:	f023 0303 	bic.w	r3, r3, #3
   82ae8:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82aec:	f043 0302 	orr.w	r3, r3, #2
   82af0:	81a3      	strh	r3, [r4, #12]
   82af2:	6161      	str	r1, [r4, #20]
   82af4:	6022      	str	r2, [r4, #0]
   82af6:	6122      	str	r2, [r4, #16]
   82af8:	e7e2      	b.n	82ac0 <__smakebuf_r+0x50>
   82afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82afe:	e7dd      	b.n	82abc <__smakebuf_r+0x4c>
   82b00:	00082231 	.word	0x00082231

00082b04 <malloc>:
   82b04:	4b02      	ldr	r3, [pc, #8]	; (82b10 <malloc+0xc>)
   82b06:	4601      	mov	r1, r0
   82b08:	6818      	ldr	r0, [r3, #0]
   82b0a:	f000 b803 	b.w	82b14 <_malloc_r>
   82b0e:	bf00      	nop
   82b10:	2007015c 	.word	0x2007015c

00082b14 <_malloc_r>:
   82b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82b18:	f101 060b 	add.w	r6, r1, #11
   82b1c:	2e16      	cmp	r6, #22
   82b1e:	b083      	sub	sp, #12
   82b20:	4605      	mov	r5, r0
   82b22:	f240 809e 	bls.w	82c62 <_malloc_r+0x14e>
   82b26:	f036 0607 	bics.w	r6, r6, #7
   82b2a:	f100 80bd 	bmi.w	82ca8 <_malloc_r+0x194>
   82b2e:	42b1      	cmp	r1, r6
   82b30:	f200 80ba 	bhi.w	82ca8 <_malloc_r+0x194>
   82b34:	f000 fbc6 	bl	832c4 <__malloc_lock>
   82b38:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   82b3c:	f0c0 8285 	bcc.w	8304a <_malloc_r+0x536>
   82b40:	0a73      	lsrs	r3, r6, #9
   82b42:	f000 80b8 	beq.w	82cb6 <_malloc_r+0x1a2>
   82b46:	2b04      	cmp	r3, #4
   82b48:	f200 816c 	bhi.w	82e24 <_malloc_r+0x310>
   82b4c:	09b3      	lsrs	r3, r6, #6
   82b4e:	f103 0039 	add.w	r0, r3, #57	; 0x39
   82b52:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   82b56:	00c1      	lsls	r1, r0, #3
   82b58:	4fb8      	ldr	r7, [pc, #736]	; (82e3c <_malloc_r+0x328>)
   82b5a:	4439      	add	r1, r7
   82b5c:	684c      	ldr	r4, [r1, #4]
   82b5e:	3908      	subs	r1, #8
   82b60:	42a1      	cmp	r1, r4
   82b62:	d106      	bne.n	82b72 <_malloc_r+0x5e>
   82b64:	e00c      	b.n	82b80 <_malloc_r+0x6c>
   82b66:	2a00      	cmp	r2, #0
   82b68:	f280 80ab 	bge.w	82cc2 <_malloc_r+0x1ae>
   82b6c:	68e4      	ldr	r4, [r4, #12]
   82b6e:	42a1      	cmp	r1, r4
   82b70:	d006      	beq.n	82b80 <_malloc_r+0x6c>
   82b72:	6863      	ldr	r3, [r4, #4]
   82b74:	f023 0303 	bic.w	r3, r3, #3
   82b78:	1b9a      	subs	r2, r3, r6
   82b7a:	2a0f      	cmp	r2, #15
   82b7c:	ddf3      	ble.n	82b66 <_malloc_r+0x52>
   82b7e:	4670      	mov	r0, lr
   82b80:	693c      	ldr	r4, [r7, #16]
   82b82:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 82e50 <_malloc_r+0x33c>
   82b86:	4574      	cmp	r4, lr
   82b88:	f000 819e 	beq.w	82ec8 <_malloc_r+0x3b4>
   82b8c:	6863      	ldr	r3, [r4, #4]
   82b8e:	f023 0303 	bic.w	r3, r3, #3
   82b92:	1b9a      	subs	r2, r3, r6
   82b94:	2a0f      	cmp	r2, #15
   82b96:	f300 8183 	bgt.w	82ea0 <_malloc_r+0x38c>
   82b9a:	2a00      	cmp	r2, #0
   82b9c:	f8c7 e014 	str.w	lr, [r7, #20]
   82ba0:	f8c7 e010 	str.w	lr, [r7, #16]
   82ba4:	f280 8091 	bge.w	82cca <_malloc_r+0x1b6>
   82ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82bac:	f080 8154 	bcs.w	82e58 <_malloc_r+0x344>
   82bb0:	2201      	movs	r2, #1
   82bb2:	08db      	lsrs	r3, r3, #3
   82bb4:	6879      	ldr	r1, [r7, #4]
   82bb6:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   82bba:	4413      	add	r3, r2
   82bbc:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   82bc0:	fa02 f20c 	lsl.w	r2, r2, ip
   82bc4:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   82bc8:	430a      	orrs	r2, r1
   82bca:	f1ac 0108 	sub.w	r1, ip, #8
   82bce:	60e1      	str	r1, [r4, #12]
   82bd0:	f8c4 8008 	str.w	r8, [r4, #8]
   82bd4:	607a      	str	r2, [r7, #4]
   82bd6:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   82bda:	f8c8 400c 	str.w	r4, [r8, #12]
   82bde:	2401      	movs	r4, #1
   82be0:	1083      	asrs	r3, r0, #2
   82be2:	409c      	lsls	r4, r3
   82be4:	4294      	cmp	r4, r2
   82be6:	d87d      	bhi.n	82ce4 <_malloc_r+0x1d0>
   82be8:	4214      	tst	r4, r2
   82bea:	d106      	bne.n	82bfa <_malloc_r+0xe6>
   82bec:	f020 0003 	bic.w	r0, r0, #3
   82bf0:	0064      	lsls	r4, r4, #1
   82bf2:	4214      	tst	r4, r2
   82bf4:	f100 0004 	add.w	r0, r0, #4
   82bf8:	d0fa      	beq.n	82bf0 <_malloc_r+0xdc>
   82bfa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   82bfe:	46cc      	mov	ip, r9
   82c00:	4680      	mov	r8, r0
   82c02:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82c06:	459c      	cmp	ip, r3
   82c08:	d107      	bne.n	82c1a <_malloc_r+0x106>
   82c0a:	e15f      	b.n	82ecc <_malloc_r+0x3b8>
   82c0c:	2a00      	cmp	r2, #0
   82c0e:	f280 816d 	bge.w	82eec <_malloc_r+0x3d8>
   82c12:	68db      	ldr	r3, [r3, #12]
   82c14:	459c      	cmp	ip, r3
   82c16:	f000 8159 	beq.w	82ecc <_malloc_r+0x3b8>
   82c1a:	6859      	ldr	r1, [r3, #4]
   82c1c:	f021 0103 	bic.w	r1, r1, #3
   82c20:	1b8a      	subs	r2, r1, r6
   82c22:	2a0f      	cmp	r2, #15
   82c24:	ddf2      	ble.n	82c0c <_malloc_r+0xf8>
   82c26:	68dc      	ldr	r4, [r3, #12]
   82c28:	f8d3 c008 	ldr.w	ip, [r3, #8]
   82c2c:	f046 0801 	orr.w	r8, r6, #1
   82c30:	4628      	mov	r0, r5
   82c32:	441e      	add	r6, r3
   82c34:	f042 0501 	orr.w	r5, r2, #1
   82c38:	f8c3 8004 	str.w	r8, [r3, #4]
   82c3c:	f8cc 400c 	str.w	r4, [ip, #12]
   82c40:	f8c4 c008 	str.w	ip, [r4, #8]
   82c44:	617e      	str	r6, [r7, #20]
   82c46:	613e      	str	r6, [r7, #16]
   82c48:	f8c6 e00c 	str.w	lr, [r6, #12]
   82c4c:	f8c6 e008 	str.w	lr, [r6, #8]
   82c50:	6075      	str	r5, [r6, #4]
   82c52:	505a      	str	r2, [r3, r1]
   82c54:	9300      	str	r3, [sp, #0]
   82c56:	f000 fb3b 	bl	832d0 <__malloc_unlock>
   82c5a:	9b00      	ldr	r3, [sp, #0]
   82c5c:	f103 0408 	add.w	r4, r3, #8
   82c60:	e01e      	b.n	82ca0 <_malloc_r+0x18c>
   82c62:	2910      	cmp	r1, #16
   82c64:	d820      	bhi.n	82ca8 <_malloc_r+0x194>
   82c66:	f000 fb2d 	bl	832c4 <__malloc_lock>
   82c6a:	2610      	movs	r6, #16
   82c6c:	2318      	movs	r3, #24
   82c6e:	2002      	movs	r0, #2
   82c70:	4f72      	ldr	r7, [pc, #456]	; (82e3c <_malloc_r+0x328>)
   82c72:	443b      	add	r3, r7
   82c74:	685c      	ldr	r4, [r3, #4]
   82c76:	f1a3 0208 	sub.w	r2, r3, #8
   82c7a:	4294      	cmp	r4, r2
   82c7c:	f000 812f 	beq.w	82ede <_malloc_r+0x3ca>
   82c80:	6863      	ldr	r3, [r4, #4]
   82c82:	68e1      	ldr	r1, [r4, #12]
   82c84:	f023 0303 	bic.w	r3, r3, #3
   82c88:	4423      	add	r3, r4
   82c8a:	685a      	ldr	r2, [r3, #4]
   82c8c:	68a6      	ldr	r6, [r4, #8]
   82c8e:	f042 0201 	orr.w	r2, r2, #1
   82c92:	60f1      	str	r1, [r6, #12]
   82c94:	4628      	mov	r0, r5
   82c96:	608e      	str	r6, [r1, #8]
   82c98:	605a      	str	r2, [r3, #4]
   82c9a:	f000 fb19 	bl	832d0 <__malloc_unlock>
   82c9e:	3408      	adds	r4, #8
   82ca0:	4620      	mov	r0, r4
   82ca2:	b003      	add	sp, #12
   82ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ca8:	2400      	movs	r4, #0
   82caa:	230c      	movs	r3, #12
   82cac:	4620      	mov	r0, r4
   82cae:	602b      	str	r3, [r5, #0]
   82cb0:	b003      	add	sp, #12
   82cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82cb6:	2040      	movs	r0, #64	; 0x40
   82cb8:	f44f 7100 	mov.w	r1, #512	; 0x200
   82cbc:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   82cc0:	e74a      	b.n	82b58 <_malloc_r+0x44>
   82cc2:	4423      	add	r3, r4
   82cc4:	685a      	ldr	r2, [r3, #4]
   82cc6:	68e1      	ldr	r1, [r4, #12]
   82cc8:	e7e0      	b.n	82c8c <_malloc_r+0x178>
   82cca:	4423      	add	r3, r4
   82ccc:	685a      	ldr	r2, [r3, #4]
   82cce:	4628      	mov	r0, r5
   82cd0:	f042 0201 	orr.w	r2, r2, #1
   82cd4:	605a      	str	r2, [r3, #4]
   82cd6:	3408      	adds	r4, #8
   82cd8:	f000 fafa 	bl	832d0 <__malloc_unlock>
   82cdc:	4620      	mov	r0, r4
   82cde:	b003      	add	sp, #12
   82ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82ce4:	68bc      	ldr	r4, [r7, #8]
   82ce6:	6863      	ldr	r3, [r4, #4]
   82ce8:	f023 0803 	bic.w	r8, r3, #3
   82cec:	45b0      	cmp	r8, r6
   82cee:	d304      	bcc.n	82cfa <_malloc_r+0x1e6>
   82cf0:	eba8 0306 	sub.w	r3, r8, r6
   82cf4:	2b0f      	cmp	r3, #15
   82cf6:	f300 8085 	bgt.w	82e04 <_malloc_r+0x2f0>
   82cfa:	f8df 9158 	ldr.w	r9, [pc, #344]	; 82e54 <_malloc_r+0x340>
   82cfe:	4b50      	ldr	r3, [pc, #320]	; (82e40 <_malloc_r+0x32c>)
   82d00:	f8d9 2000 	ldr.w	r2, [r9]
   82d04:	681b      	ldr	r3, [r3, #0]
   82d06:	3201      	adds	r2, #1
   82d08:	4433      	add	r3, r6
   82d0a:	eb04 0a08 	add.w	sl, r4, r8
   82d0e:	f000 8154 	beq.w	82fba <_malloc_r+0x4a6>
   82d12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   82d16:	330f      	adds	r3, #15
   82d18:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   82d1c:	f02b 0b0f 	bic.w	fp, fp, #15
   82d20:	4659      	mov	r1, fp
   82d22:	4628      	mov	r0, r5
   82d24:	f000 fc90 	bl	83648 <_sbrk_r>
   82d28:	1c41      	adds	r1, r0, #1
   82d2a:	4602      	mov	r2, r0
   82d2c:	f000 80fb 	beq.w	82f26 <_malloc_r+0x412>
   82d30:	4582      	cmp	sl, r0
   82d32:	f200 80f6 	bhi.w	82f22 <_malloc_r+0x40e>
   82d36:	4b43      	ldr	r3, [pc, #268]	; (82e44 <_malloc_r+0x330>)
   82d38:	6819      	ldr	r1, [r3, #0]
   82d3a:	4459      	add	r1, fp
   82d3c:	6019      	str	r1, [r3, #0]
   82d3e:	f000 814c 	beq.w	82fda <_malloc_r+0x4c6>
   82d42:	f8d9 0000 	ldr.w	r0, [r9]
   82d46:	3001      	adds	r0, #1
   82d48:	bf1b      	ittet	ne
   82d4a:	eba2 0a0a 	subne.w	sl, r2, sl
   82d4e:	4451      	addne	r1, sl
   82d50:	f8c9 2000 	streq.w	r2, [r9]
   82d54:	6019      	strne	r1, [r3, #0]
   82d56:	f012 0107 	ands.w	r1, r2, #7
   82d5a:	f000 8114 	beq.w	82f86 <_malloc_r+0x472>
   82d5e:	f1c1 0008 	rsb	r0, r1, #8
   82d62:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   82d66:	4402      	add	r2, r0
   82d68:	3108      	adds	r1, #8
   82d6a:	eb02 090b 	add.w	r9, r2, fp
   82d6e:	f3c9 090b 	ubfx	r9, r9, #0, #12
   82d72:	eba1 0909 	sub.w	r9, r1, r9
   82d76:	4649      	mov	r1, r9
   82d78:	4628      	mov	r0, r5
   82d7a:	9301      	str	r3, [sp, #4]
   82d7c:	9200      	str	r2, [sp, #0]
   82d7e:	f000 fc63 	bl	83648 <_sbrk_r>
   82d82:	1c43      	adds	r3, r0, #1
   82d84:	e89d 000c 	ldmia.w	sp, {r2, r3}
   82d88:	f000 8142 	beq.w	83010 <_malloc_r+0x4fc>
   82d8c:	1a80      	subs	r0, r0, r2
   82d8e:	4448      	add	r0, r9
   82d90:	f040 0001 	orr.w	r0, r0, #1
   82d94:	6819      	ldr	r1, [r3, #0]
   82d96:	42bc      	cmp	r4, r7
   82d98:	4449      	add	r1, r9
   82d9a:	60ba      	str	r2, [r7, #8]
   82d9c:	6019      	str	r1, [r3, #0]
   82d9e:	6050      	str	r0, [r2, #4]
   82da0:	d017      	beq.n	82dd2 <_malloc_r+0x2be>
   82da2:	f1b8 0f0f 	cmp.w	r8, #15
   82da6:	f240 80fa 	bls.w	82f9e <_malloc_r+0x48a>
   82daa:	f04f 0c05 	mov.w	ip, #5
   82dae:	6862      	ldr	r2, [r4, #4]
   82db0:	f1a8 000c 	sub.w	r0, r8, #12
   82db4:	f020 0007 	bic.w	r0, r0, #7
   82db8:	f002 0201 	and.w	r2, r2, #1
   82dbc:	eb04 0e00 	add.w	lr, r4, r0
   82dc0:	4302      	orrs	r2, r0
   82dc2:	280f      	cmp	r0, #15
   82dc4:	6062      	str	r2, [r4, #4]
   82dc6:	f8ce c004 	str.w	ip, [lr, #4]
   82dca:	f8ce c008 	str.w	ip, [lr, #8]
   82dce:	f200 8116 	bhi.w	82ffe <_malloc_r+0x4ea>
   82dd2:	4b1d      	ldr	r3, [pc, #116]	; (82e48 <_malloc_r+0x334>)
   82dd4:	68bc      	ldr	r4, [r7, #8]
   82dd6:	681a      	ldr	r2, [r3, #0]
   82dd8:	4291      	cmp	r1, r2
   82dda:	bf88      	it	hi
   82ddc:	6019      	strhi	r1, [r3, #0]
   82dde:	4b1b      	ldr	r3, [pc, #108]	; (82e4c <_malloc_r+0x338>)
   82de0:	681a      	ldr	r2, [r3, #0]
   82de2:	4291      	cmp	r1, r2
   82de4:	6862      	ldr	r2, [r4, #4]
   82de6:	bf88      	it	hi
   82de8:	6019      	strhi	r1, [r3, #0]
   82dea:	f022 0203 	bic.w	r2, r2, #3
   82dee:	4296      	cmp	r6, r2
   82df0:	eba2 0306 	sub.w	r3, r2, r6
   82df4:	d801      	bhi.n	82dfa <_malloc_r+0x2e6>
   82df6:	2b0f      	cmp	r3, #15
   82df8:	dc04      	bgt.n	82e04 <_malloc_r+0x2f0>
   82dfa:	4628      	mov	r0, r5
   82dfc:	f000 fa68 	bl	832d0 <__malloc_unlock>
   82e00:	2400      	movs	r4, #0
   82e02:	e74d      	b.n	82ca0 <_malloc_r+0x18c>
   82e04:	f046 0201 	orr.w	r2, r6, #1
   82e08:	f043 0301 	orr.w	r3, r3, #1
   82e0c:	4426      	add	r6, r4
   82e0e:	6062      	str	r2, [r4, #4]
   82e10:	4628      	mov	r0, r5
   82e12:	60be      	str	r6, [r7, #8]
   82e14:	3408      	adds	r4, #8
   82e16:	6073      	str	r3, [r6, #4]
   82e18:	f000 fa5a 	bl	832d0 <__malloc_unlock>
   82e1c:	4620      	mov	r0, r4
   82e1e:	b003      	add	sp, #12
   82e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82e24:	2b14      	cmp	r3, #20
   82e26:	d970      	bls.n	82f0a <_malloc_r+0x3f6>
   82e28:	2b54      	cmp	r3, #84	; 0x54
   82e2a:	f200 80a2 	bhi.w	82f72 <_malloc_r+0x45e>
   82e2e:	0b33      	lsrs	r3, r6, #12
   82e30:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   82e34:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   82e38:	00c1      	lsls	r1, r0, #3
   82e3a:	e68d      	b.n	82b58 <_malloc_r+0x44>
   82e3c:	200706f8 	.word	0x200706f8
   82e40:	20070c78 	.word	0x20070c78
   82e44:	20070c48 	.word	0x20070c48
   82e48:	20070c70 	.word	0x20070c70
   82e4c:	20070c74 	.word	0x20070c74
   82e50:	20070700 	.word	0x20070700
   82e54:	20070b00 	.word	0x20070b00
   82e58:	0a5a      	lsrs	r2, r3, #9
   82e5a:	2a04      	cmp	r2, #4
   82e5c:	d95b      	bls.n	82f16 <_malloc_r+0x402>
   82e5e:	2a14      	cmp	r2, #20
   82e60:	f200 80ae 	bhi.w	82fc0 <_malloc_r+0x4ac>
   82e64:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   82e68:	00c9      	lsls	r1, r1, #3
   82e6a:	325b      	adds	r2, #91	; 0x5b
   82e6c:	eb07 0c01 	add.w	ip, r7, r1
   82e70:	5879      	ldr	r1, [r7, r1]
   82e72:	f1ac 0c08 	sub.w	ip, ip, #8
   82e76:	458c      	cmp	ip, r1
   82e78:	f000 8088 	beq.w	82f8c <_malloc_r+0x478>
   82e7c:	684a      	ldr	r2, [r1, #4]
   82e7e:	f022 0203 	bic.w	r2, r2, #3
   82e82:	4293      	cmp	r3, r2
   82e84:	d273      	bcs.n	82f6e <_malloc_r+0x45a>
   82e86:	6889      	ldr	r1, [r1, #8]
   82e88:	458c      	cmp	ip, r1
   82e8a:	d1f7      	bne.n	82e7c <_malloc_r+0x368>
   82e8c:	f8dc 300c 	ldr.w	r3, [ip, #12]
   82e90:	687a      	ldr	r2, [r7, #4]
   82e92:	60e3      	str	r3, [r4, #12]
   82e94:	f8c4 c008 	str.w	ip, [r4, #8]
   82e98:	609c      	str	r4, [r3, #8]
   82e9a:	f8cc 400c 	str.w	r4, [ip, #12]
   82e9e:	e69e      	b.n	82bde <_malloc_r+0xca>
   82ea0:	f046 0c01 	orr.w	ip, r6, #1
   82ea4:	f042 0101 	orr.w	r1, r2, #1
   82ea8:	4426      	add	r6, r4
   82eaa:	f8c4 c004 	str.w	ip, [r4, #4]
   82eae:	4628      	mov	r0, r5
   82eb0:	617e      	str	r6, [r7, #20]
   82eb2:	613e      	str	r6, [r7, #16]
   82eb4:	f8c6 e00c 	str.w	lr, [r6, #12]
   82eb8:	f8c6 e008 	str.w	lr, [r6, #8]
   82ebc:	6071      	str	r1, [r6, #4]
   82ebe:	50e2      	str	r2, [r4, r3]
   82ec0:	f000 fa06 	bl	832d0 <__malloc_unlock>
   82ec4:	3408      	adds	r4, #8
   82ec6:	e6eb      	b.n	82ca0 <_malloc_r+0x18c>
   82ec8:	687a      	ldr	r2, [r7, #4]
   82eca:	e688      	b.n	82bde <_malloc_r+0xca>
   82ecc:	f108 0801 	add.w	r8, r8, #1
   82ed0:	f018 0f03 	tst.w	r8, #3
   82ed4:	f10c 0c08 	add.w	ip, ip, #8
   82ed8:	f47f ae93 	bne.w	82c02 <_malloc_r+0xee>
   82edc:	e02d      	b.n	82f3a <_malloc_r+0x426>
   82ede:	68dc      	ldr	r4, [r3, #12]
   82ee0:	42a3      	cmp	r3, r4
   82ee2:	bf08      	it	eq
   82ee4:	3002      	addeq	r0, #2
   82ee6:	f43f ae4b 	beq.w	82b80 <_malloc_r+0x6c>
   82eea:	e6c9      	b.n	82c80 <_malloc_r+0x16c>
   82eec:	461c      	mov	r4, r3
   82eee:	4419      	add	r1, r3
   82ef0:	684a      	ldr	r2, [r1, #4]
   82ef2:	68db      	ldr	r3, [r3, #12]
   82ef4:	f854 6f08 	ldr.w	r6, [r4, #8]!
   82ef8:	f042 0201 	orr.w	r2, r2, #1
   82efc:	604a      	str	r2, [r1, #4]
   82efe:	4628      	mov	r0, r5
   82f00:	60f3      	str	r3, [r6, #12]
   82f02:	609e      	str	r6, [r3, #8]
   82f04:	f000 f9e4 	bl	832d0 <__malloc_unlock>
   82f08:	e6ca      	b.n	82ca0 <_malloc_r+0x18c>
   82f0a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   82f0e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   82f12:	00c1      	lsls	r1, r0, #3
   82f14:	e620      	b.n	82b58 <_malloc_r+0x44>
   82f16:	099a      	lsrs	r2, r3, #6
   82f18:	f102 0139 	add.w	r1, r2, #57	; 0x39
   82f1c:	00c9      	lsls	r1, r1, #3
   82f1e:	3238      	adds	r2, #56	; 0x38
   82f20:	e7a4      	b.n	82e6c <_malloc_r+0x358>
   82f22:	42bc      	cmp	r4, r7
   82f24:	d054      	beq.n	82fd0 <_malloc_r+0x4bc>
   82f26:	68bc      	ldr	r4, [r7, #8]
   82f28:	6862      	ldr	r2, [r4, #4]
   82f2a:	f022 0203 	bic.w	r2, r2, #3
   82f2e:	e75e      	b.n	82dee <_malloc_r+0x2da>
   82f30:	f859 3908 	ldr.w	r3, [r9], #-8
   82f34:	4599      	cmp	r9, r3
   82f36:	f040 8086 	bne.w	83046 <_malloc_r+0x532>
   82f3a:	f010 0f03 	tst.w	r0, #3
   82f3e:	f100 30ff 	add.w	r0, r0, #4294967295
   82f42:	d1f5      	bne.n	82f30 <_malloc_r+0x41c>
   82f44:	687b      	ldr	r3, [r7, #4]
   82f46:	ea23 0304 	bic.w	r3, r3, r4
   82f4a:	607b      	str	r3, [r7, #4]
   82f4c:	0064      	lsls	r4, r4, #1
   82f4e:	429c      	cmp	r4, r3
   82f50:	f63f aec8 	bhi.w	82ce4 <_malloc_r+0x1d0>
   82f54:	2c00      	cmp	r4, #0
   82f56:	f43f aec5 	beq.w	82ce4 <_malloc_r+0x1d0>
   82f5a:	421c      	tst	r4, r3
   82f5c:	4640      	mov	r0, r8
   82f5e:	f47f ae4c 	bne.w	82bfa <_malloc_r+0xe6>
   82f62:	0064      	lsls	r4, r4, #1
   82f64:	421c      	tst	r4, r3
   82f66:	f100 0004 	add.w	r0, r0, #4
   82f6a:	d0fa      	beq.n	82f62 <_malloc_r+0x44e>
   82f6c:	e645      	b.n	82bfa <_malloc_r+0xe6>
   82f6e:	468c      	mov	ip, r1
   82f70:	e78c      	b.n	82e8c <_malloc_r+0x378>
   82f72:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   82f76:	d815      	bhi.n	82fa4 <_malloc_r+0x490>
   82f78:	0bf3      	lsrs	r3, r6, #15
   82f7a:	f103 0078 	add.w	r0, r3, #120	; 0x78
   82f7e:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   82f82:	00c1      	lsls	r1, r0, #3
   82f84:	e5e8      	b.n	82b58 <_malloc_r+0x44>
   82f86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   82f8a:	e6ee      	b.n	82d6a <_malloc_r+0x256>
   82f8c:	2101      	movs	r1, #1
   82f8e:	687b      	ldr	r3, [r7, #4]
   82f90:	1092      	asrs	r2, r2, #2
   82f92:	fa01 f202 	lsl.w	r2, r1, r2
   82f96:	431a      	orrs	r2, r3
   82f98:	607a      	str	r2, [r7, #4]
   82f9a:	4663      	mov	r3, ip
   82f9c:	e779      	b.n	82e92 <_malloc_r+0x37e>
   82f9e:	2301      	movs	r3, #1
   82fa0:	6053      	str	r3, [r2, #4]
   82fa2:	e72a      	b.n	82dfa <_malloc_r+0x2e6>
   82fa4:	f240 5254 	movw	r2, #1364	; 0x554
   82fa8:	4293      	cmp	r3, r2
   82faa:	d822      	bhi.n	82ff2 <_malloc_r+0x4de>
   82fac:	0cb3      	lsrs	r3, r6, #18
   82fae:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   82fb2:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   82fb6:	00c1      	lsls	r1, r0, #3
   82fb8:	e5ce      	b.n	82b58 <_malloc_r+0x44>
   82fba:	f103 0b10 	add.w	fp, r3, #16
   82fbe:	e6af      	b.n	82d20 <_malloc_r+0x20c>
   82fc0:	2a54      	cmp	r2, #84	; 0x54
   82fc2:	d829      	bhi.n	83018 <_malloc_r+0x504>
   82fc4:	0b1a      	lsrs	r2, r3, #12
   82fc6:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   82fca:	00c9      	lsls	r1, r1, #3
   82fcc:	326e      	adds	r2, #110	; 0x6e
   82fce:	e74d      	b.n	82e6c <_malloc_r+0x358>
   82fd0:	4b20      	ldr	r3, [pc, #128]	; (83054 <_malloc_r+0x540>)
   82fd2:	6819      	ldr	r1, [r3, #0]
   82fd4:	4459      	add	r1, fp
   82fd6:	6019      	str	r1, [r3, #0]
   82fd8:	e6b3      	b.n	82d42 <_malloc_r+0x22e>
   82fda:	f3ca 000b 	ubfx	r0, sl, #0, #12
   82fde:	2800      	cmp	r0, #0
   82fe0:	f47f aeaf 	bne.w	82d42 <_malloc_r+0x22e>
   82fe4:	eb08 030b 	add.w	r3, r8, fp
   82fe8:	68ba      	ldr	r2, [r7, #8]
   82fea:	f043 0301 	orr.w	r3, r3, #1
   82fee:	6053      	str	r3, [r2, #4]
   82ff0:	e6ef      	b.n	82dd2 <_malloc_r+0x2be>
   82ff2:	207f      	movs	r0, #127	; 0x7f
   82ff4:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   82ff8:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   82ffc:	e5ac      	b.n	82b58 <_malloc_r+0x44>
   82ffe:	f104 0108 	add.w	r1, r4, #8
   83002:	4628      	mov	r0, r5
   83004:	9300      	str	r3, [sp, #0]
   83006:	f7ff fa67 	bl	824d8 <_free_r>
   8300a:	9b00      	ldr	r3, [sp, #0]
   8300c:	6819      	ldr	r1, [r3, #0]
   8300e:	e6e0      	b.n	82dd2 <_malloc_r+0x2be>
   83010:	2001      	movs	r0, #1
   83012:	f04f 0900 	mov.w	r9, #0
   83016:	e6bd      	b.n	82d94 <_malloc_r+0x280>
   83018:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8301c:	d805      	bhi.n	8302a <_malloc_r+0x516>
   8301e:	0bda      	lsrs	r2, r3, #15
   83020:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83024:	00c9      	lsls	r1, r1, #3
   83026:	3277      	adds	r2, #119	; 0x77
   83028:	e720      	b.n	82e6c <_malloc_r+0x358>
   8302a:	f240 5154 	movw	r1, #1364	; 0x554
   8302e:	428a      	cmp	r2, r1
   83030:	d805      	bhi.n	8303e <_malloc_r+0x52a>
   83032:	0c9a      	lsrs	r2, r3, #18
   83034:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83038:	00c9      	lsls	r1, r1, #3
   8303a:	327c      	adds	r2, #124	; 0x7c
   8303c:	e716      	b.n	82e6c <_malloc_r+0x358>
   8303e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83042:	227e      	movs	r2, #126	; 0x7e
   83044:	e712      	b.n	82e6c <_malloc_r+0x358>
   83046:	687b      	ldr	r3, [r7, #4]
   83048:	e780      	b.n	82f4c <_malloc_r+0x438>
   8304a:	08f0      	lsrs	r0, r6, #3
   8304c:	f106 0308 	add.w	r3, r6, #8
   83050:	e60e      	b.n	82c70 <_malloc_r+0x15c>
   83052:	bf00      	nop
   83054:	20070c48 	.word	0x20070c48

00083058 <__ascii_mbtowc>:
   83058:	b082      	sub	sp, #8
   8305a:	b149      	cbz	r1, 83070 <__ascii_mbtowc+0x18>
   8305c:	b15a      	cbz	r2, 83076 <__ascii_mbtowc+0x1e>
   8305e:	b16b      	cbz	r3, 8307c <__ascii_mbtowc+0x24>
   83060:	7813      	ldrb	r3, [r2, #0]
   83062:	600b      	str	r3, [r1, #0]
   83064:	7812      	ldrb	r2, [r2, #0]
   83066:	1c10      	adds	r0, r2, #0
   83068:	bf18      	it	ne
   8306a:	2001      	movne	r0, #1
   8306c:	b002      	add	sp, #8
   8306e:	4770      	bx	lr
   83070:	a901      	add	r1, sp, #4
   83072:	2a00      	cmp	r2, #0
   83074:	d1f3      	bne.n	8305e <__ascii_mbtowc+0x6>
   83076:	4610      	mov	r0, r2
   83078:	b002      	add	sp, #8
   8307a:	4770      	bx	lr
   8307c:	f06f 0001 	mvn.w	r0, #1
   83080:	e7f4      	b.n	8306c <__ascii_mbtowc+0x14>
   83082:	bf00      	nop

00083084 <memchr>:
   83084:	0783      	lsls	r3, r0, #30
   83086:	b470      	push	{r4, r5, r6}
   83088:	b2cd      	uxtb	r5, r1
   8308a:	d03d      	beq.n	83108 <memchr+0x84>
   8308c:	1e54      	subs	r4, r2, #1
   8308e:	b30a      	cbz	r2, 830d4 <memchr+0x50>
   83090:	7803      	ldrb	r3, [r0, #0]
   83092:	42ab      	cmp	r3, r5
   83094:	d01f      	beq.n	830d6 <memchr+0x52>
   83096:	1c43      	adds	r3, r0, #1
   83098:	e005      	b.n	830a6 <memchr+0x22>
   8309a:	f114 34ff 	adds.w	r4, r4, #4294967295
   8309e:	d319      	bcc.n	830d4 <memchr+0x50>
   830a0:	7802      	ldrb	r2, [r0, #0]
   830a2:	42aa      	cmp	r2, r5
   830a4:	d017      	beq.n	830d6 <memchr+0x52>
   830a6:	f013 0f03 	tst.w	r3, #3
   830aa:	4618      	mov	r0, r3
   830ac:	f103 0301 	add.w	r3, r3, #1
   830b0:	d1f3      	bne.n	8309a <memchr+0x16>
   830b2:	2c03      	cmp	r4, #3
   830b4:	d811      	bhi.n	830da <memchr+0x56>
   830b6:	b34c      	cbz	r4, 8310c <memchr+0x88>
   830b8:	7803      	ldrb	r3, [r0, #0]
   830ba:	42ab      	cmp	r3, r5
   830bc:	d00b      	beq.n	830d6 <memchr+0x52>
   830be:	4404      	add	r4, r0
   830c0:	1c43      	adds	r3, r0, #1
   830c2:	e002      	b.n	830ca <memchr+0x46>
   830c4:	7802      	ldrb	r2, [r0, #0]
   830c6:	42aa      	cmp	r2, r5
   830c8:	d005      	beq.n	830d6 <memchr+0x52>
   830ca:	429c      	cmp	r4, r3
   830cc:	4618      	mov	r0, r3
   830ce:	f103 0301 	add.w	r3, r3, #1
   830d2:	d1f7      	bne.n	830c4 <memchr+0x40>
   830d4:	2000      	movs	r0, #0
   830d6:	bc70      	pop	{r4, r5, r6}
   830d8:	4770      	bx	lr
   830da:	0209      	lsls	r1, r1, #8
   830dc:	b289      	uxth	r1, r1
   830de:	4329      	orrs	r1, r5
   830e0:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   830e4:	6803      	ldr	r3, [r0, #0]
   830e6:	4606      	mov	r6, r0
   830e8:	404b      	eors	r3, r1
   830ea:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   830ee:	ea22 0303 	bic.w	r3, r2, r3
   830f2:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   830f6:	f100 0004 	add.w	r0, r0, #4
   830fa:	d103      	bne.n	83104 <memchr+0x80>
   830fc:	3c04      	subs	r4, #4
   830fe:	2c03      	cmp	r4, #3
   83100:	d8f0      	bhi.n	830e4 <memchr+0x60>
   83102:	e7d8      	b.n	830b6 <memchr+0x32>
   83104:	4630      	mov	r0, r6
   83106:	e7d7      	b.n	830b8 <memchr+0x34>
   83108:	4614      	mov	r4, r2
   8310a:	e7d2      	b.n	830b2 <memchr+0x2e>
   8310c:	4620      	mov	r0, r4
   8310e:	e7e2      	b.n	830d6 <memchr+0x52>

00083110 <memcpy>:
   83110:	4684      	mov	ip, r0
   83112:	ea41 0300 	orr.w	r3, r1, r0
   83116:	f013 0303 	ands.w	r3, r3, #3
   8311a:	d149      	bne.n	831b0 <memcpy+0xa0>
   8311c:	3a40      	subs	r2, #64	; 0x40
   8311e:	d323      	bcc.n	83168 <memcpy+0x58>
   83120:	680b      	ldr	r3, [r1, #0]
   83122:	6003      	str	r3, [r0, #0]
   83124:	684b      	ldr	r3, [r1, #4]
   83126:	6043      	str	r3, [r0, #4]
   83128:	688b      	ldr	r3, [r1, #8]
   8312a:	6083      	str	r3, [r0, #8]
   8312c:	68cb      	ldr	r3, [r1, #12]
   8312e:	60c3      	str	r3, [r0, #12]
   83130:	690b      	ldr	r3, [r1, #16]
   83132:	6103      	str	r3, [r0, #16]
   83134:	694b      	ldr	r3, [r1, #20]
   83136:	6143      	str	r3, [r0, #20]
   83138:	698b      	ldr	r3, [r1, #24]
   8313a:	6183      	str	r3, [r0, #24]
   8313c:	69cb      	ldr	r3, [r1, #28]
   8313e:	61c3      	str	r3, [r0, #28]
   83140:	6a0b      	ldr	r3, [r1, #32]
   83142:	6203      	str	r3, [r0, #32]
   83144:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   83146:	6243      	str	r3, [r0, #36]	; 0x24
   83148:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8314a:	6283      	str	r3, [r0, #40]	; 0x28
   8314c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8314e:	62c3      	str	r3, [r0, #44]	; 0x2c
   83150:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83152:	6303      	str	r3, [r0, #48]	; 0x30
   83154:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   83156:	6343      	str	r3, [r0, #52]	; 0x34
   83158:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8315a:	6383      	str	r3, [r0, #56]	; 0x38
   8315c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8315e:	63c3      	str	r3, [r0, #60]	; 0x3c
   83160:	3040      	adds	r0, #64	; 0x40
   83162:	3140      	adds	r1, #64	; 0x40
   83164:	3a40      	subs	r2, #64	; 0x40
   83166:	d2db      	bcs.n	83120 <memcpy+0x10>
   83168:	3230      	adds	r2, #48	; 0x30
   8316a:	d30b      	bcc.n	83184 <memcpy+0x74>
   8316c:	680b      	ldr	r3, [r1, #0]
   8316e:	6003      	str	r3, [r0, #0]
   83170:	684b      	ldr	r3, [r1, #4]
   83172:	6043      	str	r3, [r0, #4]
   83174:	688b      	ldr	r3, [r1, #8]
   83176:	6083      	str	r3, [r0, #8]
   83178:	68cb      	ldr	r3, [r1, #12]
   8317a:	60c3      	str	r3, [r0, #12]
   8317c:	3010      	adds	r0, #16
   8317e:	3110      	adds	r1, #16
   83180:	3a10      	subs	r2, #16
   83182:	d2f3      	bcs.n	8316c <memcpy+0x5c>
   83184:	320c      	adds	r2, #12
   83186:	d305      	bcc.n	83194 <memcpy+0x84>
   83188:	f851 3b04 	ldr.w	r3, [r1], #4
   8318c:	f840 3b04 	str.w	r3, [r0], #4
   83190:	3a04      	subs	r2, #4
   83192:	d2f9      	bcs.n	83188 <memcpy+0x78>
   83194:	3204      	adds	r2, #4
   83196:	d008      	beq.n	831aa <memcpy+0x9a>
   83198:	07d2      	lsls	r2, r2, #31
   8319a:	bf1c      	itt	ne
   8319c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831a0:	f800 3b01 	strbne.w	r3, [r0], #1
   831a4:	d301      	bcc.n	831aa <memcpy+0x9a>
   831a6:	880b      	ldrh	r3, [r1, #0]
   831a8:	8003      	strh	r3, [r0, #0]
   831aa:	4660      	mov	r0, ip
   831ac:	4770      	bx	lr
   831ae:	bf00      	nop
   831b0:	2a08      	cmp	r2, #8
   831b2:	d313      	bcc.n	831dc <memcpy+0xcc>
   831b4:	078b      	lsls	r3, r1, #30
   831b6:	d0b1      	beq.n	8311c <memcpy+0xc>
   831b8:	f010 0303 	ands.w	r3, r0, #3
   831bc:	d0ae      	beq.n	8311c <memcpy+0xc>
   831be:	f1c3 0304 	rsb	r3, r3, #4
   831c2:	1ad2      	subs	r2, r2, r3
   831c4:	07db      	lsls	r3, r3, #31
   831c6:	bf1c      	itt	ne
   831c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   831cc:	f800 3b01 	strbne.w	r3, [r0], #1
   831d0:	d3a4      	bcc.n	8311c <memcpy+0xc>
   831d2:	f831 3b02 	ldrh.w	r3, [r1], #2
   831d6:	f820 3b02 	strh.w	r3, [r0], #2
   831da:	e79f      	b.n	8311c <memcpy+0xc>
   831dc:	3a04      	subs	r2, #4
   831de:	d3d9      	bcc.n	83194 <memcpy+0x84>
   831e0:	3a01      	subs	r2, #1
   831e2:	f811 3b01 	ldrb.w	r3, [r1], #1
   831e6:	f800 3b01 	strb.w	r3, [r0], #1
   831ea:	d2f9      	bcs.n	831e0 <memcpy+0xd0>
   831ec:	780b      	ldrb	r3, [r1, #0]
   831ee:	7003      	strb	r3, [r0, #0]
   831f0:	784b      	ldrb	r3, [r1, #1]
   831f2:	7043      	strb	r3, [r0, #1]
   831f4:	788b      	ldrb	r3, [r1, #2]
   831f6:	7083      	strb	r3, [r0, #2]
   831f8:	4660      	mov	r0, ip
   831fa:	4770      	bx	lr

000831fc <memmove>:
   831fc:	4288      	cmp	r0, r1
   831fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   83200:	d90d      	bls.n	8321e <memmove+0x22>
   83202:	188b      	adds	r3, r1, r2
   83204:	4298      	cmp	r0, r3
   83206:	d20a      	bcs.n	8321e <memmove+0x22>
   83208:	1884      	adds	r4, r0, r2
   8320a:	2a00      	cmp	r2, #0
   8320c:	d051      	beq.n	832b2 <memmove+0xb6>
   8320e:	4622      	mov	r2, r4
   83210:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83214:	4299      	cmp	r1, r3
   83216:	f802 4d01 	strb.w	r4, [r2, #-1]!
   8321a:	d1f9      	bne.n	83210 <memmove+0x14>
   8321c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8321e:	2a0f      	cmp	r2, #15
   83220:	d948      	bls.n	832b4 <memmove+0xb8>
   83222:	ea41 0300 	orr.w	r3, r1, r0
   83226:	079b      	lsls	r3, r3, #30
   83228:	d146      	bne.n	832b8 <memmove+0xbc>
   8322a:	4615      	mov	r5, r2
   8322c:	f100 0410 	add.w	r4, r0, #16
   83230:	f101 0310 	add.w	r3, r1, #16
   83234:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83238:	3d10      	subs	r5, #16
   8323a:	f844 6c10 	str.w	r6, [r4, #-16]
   8323e:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83242:	2d0f      	cmp	r5, #15
   83244:	f844 6c0c 	str.w	r6, [r4, #-12]
   83248:	f853 6c08 	ldr.w	r6, [r3, #-8]
   8324c:	f104 0410 	add.w	r4, r4, #16
   83250:	f844 6c18 	str.w	r6, [r4, #-24]
   83254:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83258:	f103 0310 	add.w	r3, r3, #16
   8325c:	f844 6c14 	str.w	r6, [r4, #-20]
   83260:	d8e8      	bhi.n	83234 <memmove+0x38>
   83262:	f1a2 0310 	sub.w	r3, r2, #16
   83266:	f023 030f 	bic.w	r3, r3, #15
   8326a:	f002 0e0f 	and.w	lr, r2, #15
   8326e:	3310      	adds	r3, #16
   83270:	f1be 0f03 	cmp.w	lr, #3
   83274:	4419      	add	r1, r3
   83276:	4403      	add	r3, r0
   83278:	d921      	bls.n	832be <memmove+0xc2>
   8327a:	460e      	mov	r6, r1
   8327c:	4674      	mov	r4, lr
   8327e:	1f1d      	subs	r5, r3, #4
   83280:	f856 7b04 	ldr.w	r7, [r6], #4
   83284:	3c04      	subs	r4, #4
   83286:	2c03      	cmp	r4, #3
   83288:	f845 7f04 	str.w	r7, [r5, #4]!
   8328c:	d8f8      	bhi.n	83280 <memmove+0x84>
   8328e:	f1ae 0404 	sub.w	r4, lr, #4
   83292:	f024 0403 	bic.w	r4, r4, #3
   83296:	3404      	adds	r4, #4
   83298:	4421      	add	r1, r4
   8329a:	4423      	add	r3, r4
   8329c:	f002 0203 	and.w	r2, r2, #3
   832a0:	b162      	cbz	r2, 832bc <memmove+0xc0>
   832a2:	3b01      	subs	r3, #1
   832a4:	440a      	add	r2, r1
   832a6:	f811 4b01 	ldrb.w	r4, [r1], #1
   832aa:	428a      	cmp	r2, r1
   832ac:	f803 4f01 	strb.w	r4, [r3, #1]!
   832b0:	d1f9      	bne.n	832a6 <memmove+0xaa>
   832b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832b4:	4603      	mov	r3, r0
   832b6:	e7f3      	b.n	832a0 <memmove+0xa4>
   832b8:	4603      	mov	r3, r0
   832ba:	e7f2      	b.n	832a2 <memmove+0xa6>
   832bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   832be:	4672      	mov	r2, lr
   832c0:	e7ee      	b.n	832a0 <memmove+0xa4>
   832c2:	bf00      	nop

000832c4 <__malloc_lock>:
   832c4:	4801      	ldr	r0, [pc, #4]	; (832cc <__malloc_lock+0x8>)
   832c6:	f7ff bba1 	b.w	82a0c <__retarget_lock_acquire_recursive>
   832ca:	bf00      	nop
   832cc:	20070c98 	.word	0x20070c98

000832d0 <__malloc_unlock>:
   832d0:	4801      	ldr	r0, [pc, #4]	; (832d8 <__malloc_unlock+0x8>)
   832d2:	f7ff bb9d 	b.w	82a10 <__retarget_lock_release_recursive>
   832d6:	bf00      	nop
   832d8:	20070c98 	.word	0x20070c98

000832dc <_realloc_r>:
   832dc:	2900      	cmp	r1, #0
   832de:	f000 8094 	beq.w	8340a <_realloc_r+0x12e>
   832e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   832e6:	460c      	mov	r4, r1
   832e8:	4615      	mov	r5, r2
   832ea:	b083      	sub	sp, #12
   832ec:	4680      	mov	r8, r0
   832ee:	f105 060b 	add.w	r6, r5, #11
   832f2:	f7ff ffe7 	bl	832c4 <__malloc_lock>
   832f6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   832fa:	2e16      	cmp	r6, #22
   832fc:	f02e 0703 	bic.w	r7, lr, #3
   83300:	f1a4 0908 	sub.w	r9, r4, #8
   83304:	d83c      	bhi.n	83380 <_realloc_r+0xa4>
   83306:	2210      	movs	r2, #16
   83308:	4616      	mov	r6, r2
   8330a:	42b5      	cmp	r5, r6
   8330c:	d83d      	bhi.n	8338a <_realloc_r+0xae>
   8330e:	4297      	cmp	r7, r2
   83310:	da43      	bge.n	8339a <_realloc_r+0xbe>
   83312:	4bc6      	ldr	r3, [pc, #792]	; (8362c <_realloc_r+0x350>)
   83314:	eb09 0007 	add.w	r0, r9, r7
   83318:	6899      	ldr	r1, [r3, #8]
   8331a:	4288      	cmp	r0, r1
   8331c:	f000 80c3 	beq.w	834a6 <_realloc_r+0x1ca>
   83320:	6843      	ldr	r3, [r0, #4]
   83322:	f023 0101 	bic.w	r1, r3, #1
   83326:	4401      	add	r1, r0
   83328:	6849      	ldr	r1, [r1, #4]
   8332a:	07c9      	lsls	r1, r1, #31
   8332c:	d54d      	bpl.n	833ca <_realloc_r+0xee>
   8332e:	f01e 0f01 	tst.w	lr, #1
   83332:	f000 809b 	beq.w	8346c <_realloc_r+0x190>
   83336:	4629      	mov	r1, r5
   83338:	4640      	mov	r0, r8
   8333a:	f7ff fbeb 	bl	82b14 <_malloc_r>
   8333e:	4605      	mov	r5, r0
   83340:	2800      	cmp	r0, #0
   83342:	d03b      	beq.n	833bc <_realloc_r+0xe0>
   83344:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83348:	f1a0 0208 	sub.w	r2, r0, #8
   8334c:	f023 0301 	bic.w	r3, r3, #1
   83350:	444b      	add	r3, r9
   83352:	429a      	cmp	r2, r3
   83354:	f000 812b 	beq.w	835ae <_realloc_r+0x2d2>
   83358:	1f3a      	subs	r2, r7, #4
   8335a:	2a24      	cmp	r2, #36	; 0x24
   8335c:	f200 8118 	bhi.w	83590 <_realloc_r+0x2b4>
   83360:	2a13      	cmp	r2, #19
   83362:	f200 80eb 	bhi.w	8353c <_realloc_r+0x260>
   83366:	4603      	mov	r3, r0
   83368:	4622      	mov	r2, r4
   8336a:	6811      	ldr	r1, [r2, #0]
   8336c:	6019      	str	r1, [r3, #0]
   8336e:	6851      	ldr	r1, [r2, #4]
   83370:	6059      	str	r1, [r3, #4]
   83372:	6892      	ldr	r2, [r2, #8]
   83374:	609a      	str	r2, [r3, #8]
   83376:	4621      	mov	r1, r4
   83378:	4640      	mov	r0, r8
   8337a:	f7ff f8ad 	bl	824d8 <_free_r>
   8337e:	e01d      	b.n	833bc <_realloc_r+0xe0>
   83380:	f026 0607 	bic.w	r6, r6, #7
   83384:	2e00      	cmp	r6, #0
   83386:	4632      	mov	r2, r6
   83388:	dabf      	bge.n	8330a <_realloc_r+0x2e>
   8338a:	2500      	movs	r5, #0
   8338c:	230c      	movs	r3, #12
   8338e:	4628      	mov	r0, r5
   83390:	f8c8 3000 	str.w	r3, [r8]
   83394:	b003      	add	sp, #12
   83396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8339a:	4625      	mov	r5, r4
   8339c:	1bbb      	subs	r3, r7, r6
   8339e:	2b0f      	cmp	r3, #15
   833a0:	f8d9 2004 	ldr.w	r2, [r9, #4]
   833a4:	d81d      	bhi.n	833e2 <_realloc_r+0x106>
   833a6:	f002 0201 	and.w	r2, r2, #1
   833aa:	433a      	orrs	r2, r7
   833ac:	eb09 0107 	add.w	r1, r9, r7
   833b0:	f8c9 2004 	str.w	r2, [r9, #4]
   833b4:	684b      	ldr	r3, [r1, #4]
   833b6:	f043 0301 	orr.w	r3, r3, #1
   833ba:	604b      	str	r3, [r1, #4]
   833bc:	4640      	mov	r0, r8
   833be:	f7ff ff87 	bl	832d0 <__malloc_unlock>
   833c2:	4628      	mov	r0, r5
   833c4:	b003      	add	sp, #12
   833c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   833ca:	f023 0303 	bic.w	r3, r3, #3
   833ce:	18f9      	adds	r1, r7, r3
   833d0:	4291      	cmp	r1, r2
   833d2:	db1d      	blt.n	83410 <_realloc_r+0x134>
   833d4:	68c3      	ldr	r3, [r0, #12]
   833d6:	6882      	ldr	r2, [r0, #8]
   833d8:	4625      	mov	r5, r4
   833da:	60d3      	str	r3, [r2, #12]
   833dc:	460f      	mov	r7, r1
   833de:	609a      	str	r2, [r3, #8]
   833e0:	e7dc      	b.n	8339c <_realloc_r+0xc0>
   833e2:	f002 0201 	and.w	r2, r2, #1
   833e6:	eb09 0106 	add.w	r1, r9, r6
   833ea:	f043 0301 	orr.w	r3, r3, #1
   833ee:	4332      	orrs	r2, r6
   833f0:	f8c9 2004 	str.w	r2, [r9, #4]
   833f4:	444f      	add	r7, r9
   833f6:	604b      	str	r3, [r1, #4]
   833f8:	687b      	ldr	r3, [r7, #4]
   833fa:	3108      	adds	r1, #8
   833fc:	f043 0301 	orr.w	r3, r3, #1
   83400:	607b      	str	r3, [r7, #4]
   83402:	4640      	mov	r0, r8
   83404:	f7ff f868 	bl	824d8 <_free_r>
   83408:	e7d8      	b.n	833bc <_realloc_r+0xe0>
   8340a:	4611      	mov	r1, r2
   8340c:	f7ff bb82 	b.w	82b14 <_malloc_r>
   83410:	f01e 0f01 	tst.w	lr, #1
   83414:	d18f      	bne.n	83336 <_realloc_r+0x5a>
   83416:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8341a:	eba9 0a01 	sub.w	sl, r9, r1
   8341e:	f8da 1004 	ldr.w	r1, [sl, #4]
   83422:	f021 0103 	bic.w	r1, r1, #3
   83426:	440b      	add	r3, r1
   83428:	443b      	add	r3, r7
   8342a:	4293      	cmp	r3, r2
   8342c:	db26      	blt.n	8347c <_realloc_r+0x1a0>
   8342e:	4655      	mov	r5, sl
   83430:	68c1      	ldr	r1, [r0, #12]
   83432:	6880      	ldr	r0, [r0, #8]
   83434:	1f3a      	subs	r2, r7, #4
   83436:	60c1      	str	r1, [r0, #12]
   83438:	6088      	str	r0, [r1, #8]
   8343a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8343e:	f8da 100c 	ldr.w	r1, [sl, #12]
   83442:	2a24      	cmp	r2, #36	; 0x24
   83444:	60c1      	str	r1, [r0, #12]
   83446:	6088      	str	r0, [r1, #8]
   83448:	d826      	bhi.n	83498 <_realloc_r+0x1bc>
   8344a:	2a13      	cmp	r2, #19
   8344c:	f240 8081 	bls.w	83552 <_realloc_r+0x276>
   83450:	6821      	ldr	r1, [r4, #0]
   83452:	2a1b      	cmp	r2, #27
   83454:	f8ca 1008 	str.w	r1, [sl, #8]
   83458:	6861      	ldr	r1, [r4, #4]
   8345a:	f8ca 100c 	str.w	r1, [sl, #12]
   8345e:	f200 80ad 	bhi.w	835bc <_realloc_r+0x2e0>
   83462:	f104 0008 	add.w	r0, r4, #8
   83466:	f10a 0210 	add.w	r2, sl, #16
   8346a:	e074      	b.n	83556 <_realloc_r+0x27a>
   8346c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83470:	eba9 0a03 	sub.w	sl, r9, r3
   83474:	f8da 1004 	ldr.w	r1, [sl, #4]
   83478:	f021 0103 	bic.w	r1, r1, #3
   8347c:	187b      	adds	r3, r7, r1
   8347e:	4293      	cmp	r3, r2
   83480:	f6ff af59 	blt.w	83336 <_realloc_r+0x5a>
   83484:	4655      	mov	r5, sl
   83486:	f8da 100c 	ldr.w	r1, [sl, #12]
   8348a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8348e:	1f3a      	subs	r2, r7, #4
   83490:	2a24      	cmp	r2, #36	; 0x24
   83492:	60c1      	str	r1, [r0, #12]
   83494:	6088      	str	r0, [r1, #8]
   83496:	d9d8      	bls.n	8344a <_realloc_r+0x16e>
   83498:	4621      	mov	r1, r4
   8349a:	4628      	mov	r0, r5
   8349c:	461f      	mov	r7, r3
   8349e:	46d1      	mov	r9, sl
   834a0:	f7ff feac 	bl	831fc <memmove>
   834a4:	e77a      	b.n	8339c <_realloc_r+0xc0>
   834a6:	6841      	ldr	r1, [r0, #4]
   834a8:	f106 0010 	add.w	r0, r6, #16
   834ac:	f021 0b03 	bic.w	fp, r1, #3
   834b0:	44bb      	add	fp, r7
   834b2:	4583      	cmp	fp, r0
   834b4:	da58      	bge.n	83568 <_realloc_r+0x28c>
   834b6:	f01e 0f01 	tst.w	lr, #1
   834ba:	f47f af3c 	bne.w	83336 <_realloc_r+0x5a>
   834be:	f854 1c08 	ldr.w	r1, [r4, #-8]
   834c2:	eba9 0a01 	sub.w	sl, r9, r1
   834c6:	f8da 1004 	ldr.w	r1, [sl, #4]
   834ca:	f021 0103 	bic.w	r1, r1, #3
   834ce:	448b      	add	fp, r1
   834d0:	4558      	cmp	r0, fp
   834d2:	dcd3      	bgt.n	8347c <_realloc_r+0x1a0>
   834d4:	4655      	mov	r5, sl
   834d6:	f8da 100c 	ldr.w	r1, [sl, #12]
   834da:	f855 0f08 	ldr.w	r0, [r5, #8]!
   834de:	1f3a      	subs	r2, r7, #4
   834e0:	2a24      	cmp	r2, #36	; 0x24
   834e2:	60c1      	str	r1, [r0, #12]
   834e4:	6088      	str	r0, [r1, #8]
   834e6:	f200 808d 	bhi.w	83604 <_realloc_r+0x328>
   834ea:	2a13      	cmp	r2, #19
   834ec:	f240 8087 	bls.w	835fe <_realloc_r+0x322>
   834f0:	6821      	ldr	r1, [r4, #0]
   834f2:	2a1b      	cmp	r2, #27
   834f4:	f8ca 1008 	str.w	r1, [sl, #8]
   834f8:	6861      	ldr	r1, [r4, #4]
   834fa:	f8ca 100c 	str.w	r1, [sl, #12]
   834fe:	f200 8088 	bhi.w	83612 <_realloc_r+0x336>
   83502:	f104 0108 	add.w	r1, r4, #8
   83506:	f10a 0210 	add.w	r2, sl, #16
   8350a:	6808      	ldr	r0, [r1, #0]
   8350c:	6010      	str	r0, [r2, #0]
   8350e:	6848      	ldr	r0, [r1, #4]
   83510:	6050      	str	r0, [r2, #4]
   83512:	6889      	ldr	r1, [r1, #8]
   83514:	6091      	str	r1, [r2, #8]
   83516:	ebab 0206 	sub.w	r2, fp, r6
   8351a:	eb0a 0106 	add.w	r1, sl, r6
   8351e:	f042 0201 	orr.w	r2, r2, #1
   83522:	6099      	str	r1, [r3, #8]
   83524:	604a      	str	r2, [r1, #4]
   83526:	f8da 3004 	ldr.w	r3, [sl, #4]
   8352a:	4640      	mov	r0, r8
   8352c:	f003 0301 	and.w	r3, r3, #1
   83530:	431e      	orrs	r6, r3
   83532:	f8ca 6004 	str.w	r6, [sl, #4]
   83536:	f7ff fecb 	bl	832d0 <__malloc_unlock>
   8353a:	e742      	b.n	833c2 <_realloc_r+0xe6>
   8353c:	6823      	ldr	r3, [r4, #0]
   8353e:	2a1b      	cmp	r2, #27
   83540:	6003      	str	r3, [r0, #0]
   83542:	6863      	ldr	r3, [r4, #4]
   83544:	6043      	str	r3, [r0, #4]
   83546:	d827      	bhi.n	83598 <_realloc_r+0x2bc>
   83548:	f100 0308 	add.w	r3, r0, #8
   8354c:	f104 0208 	add.w	r2, r4, #8
   83550:	e70b      	b.n	8336a <_realloc_r+0x8e>
   83552:	4620      	mov	r0, r4
   83554:	462a      	mov	r2, r5
   83556:	6801      	ldr	r1, [r0, #0]
   83558:	461f      	mov	r7, r3
   8355a:	6011      	str	r1, [r2, #0]
   8355c:	6841      	ldr	r1, [r0, #4]
   8355e:	46d1      	mov	r9, sl
   83560:	6051      	str	r1, [r2, #4]
   83562:	6883      	ldr	r3, [r0, #8]
   83564:	6093      	str	r3, [r2, #8]
   83566:	e719      	b.n	8339c <_realloc_r+0xc0>
   83568:	ebab 0b06 	sub.w	fp, fp, r6
   8356c:	eb09 0106 	add.w	r1, r9, r6
   83570:	f04b 0201 	orr.w	r2, fp, #1
   83574:	6099      	str	r1, [r3, #8]
   83576:	604a      	str	r2, [r1, #4]
   83578:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8357c:	4640      	mov	r0, r8
   8357e:	f003 0301 	and.w	r3, r3, #1
   83582:	431e      	orrs	r6, r3
   83584:	f844 6c04 	str.w	r6, [r4, #-4]
   83588:	f7ff fea2 	bl	832d0 <__malloc_unlock>
   8358c:	4625      	mov	r5, r4
   8358e:	e718      	b.n	833c2 <_realloc_r+0xe6>
   83590:	4621      	mov	r1, r4
   83592:	f7ff fe33 	bl	831fc <memmove>
   83596:	e6ee      	b.n	83376 <_realloc_r+0x9a>
   83598:	68a3      	ldr	r3, [r4, #8]
   8359a:	2a24      	cmp	r2, #36	; 0x24
   8359c:	6083      	str	r3, [r0, #8]
   8359e:	68e3      	ldr	r3, [r4, #12]
   835a0:	60c3      	str	r3, [r0, #12]
   835a2:	d018      	beq.n	835d6 <_realloc_r+0x2fa>
   835a4:	f100 0310 	add.w	r3, r0, #16
   835a8:	f104 0210 	add.w	r2, r4, #16
   835ac:	e6dd      	b.n	8336a <_realloc_r+0x8e>
   835ae:	f850 3c04 	ldr.w	r3, [r0, #-4]
   835b2:	4625      	mov	r5, r4
   835b4:	f023 0303 	bic.w	r3, r3, #3
   835b8:	441f      	add	r7, r3
   835ba:	e6ef      	b.n	8339c <_realloc_r+0xc0>
   835bc:	68a1      	ldr	r1, [r4, #8]
   835be:	2a24      	cmp	r2, #36	; 0x24
   835c0:	f8ca 1010 	str.w	r1, [sl, #16]
   835c4:	68e1      	ldr	r1, [r4, #12]
   835c6:	f8ca 1014 	str.w	r1, [sl, #20]
   835ca:	d00d      	beq.n	835e8 <_realloc_r+0x30c>
   835cc:	f104 0010 	add.w	r0, r4, #16
   835d0:	f10a 0218 	add.w	r2, sl, #24
   835d4:	e7bf      	b.n	83556 <_realloc_r+0x27a>
   835d6:	6922      	ldr	r2, [r4, #16]
   835d8:	f100 0318 	add.w	r3, r0, #24
   835dc:	6102      	str	r2, [r0, #16]
   835de:	6961      	ldr	r1, [r4, #20]
   835e0:	f104 0218 	add.w	r2, r4, #24
   835e4:	6141      	str	r1, [r0, #20]
   835e6:	e6c0      	b.n	8336a <_realloc_r+0x8e>
   835e8:	6922      	ldr	r2, [r4, #16]
   835ea:	f104 0018 	add.w	r0, r4, #24
   835ee:	f8ca 2018 	str.w	r2, [sl, #24]
   835f2:	6961      	ldr	r1, [r4, #20]
   835f4:	f10a 0220 	add.w	r2, sl, #32
   835f8:	f8ca 101c 	str.w	r1, [sl, #28]
   835fc:	e7ab      	b.n	83556 <_realloc_r+0x27a>
   835fe:	4621      	mov	r1, r4
   83600:	462a      	mov	r2, r5
   83602:	e782      	b.n	8350a <_realloc_r+0x22e>
   83604:	4621      	mov	r1, r4
   83606:	4628      	mov	r0, r5
   83608:	9301      	str	r3, [sp, #4]
   8360a:	f7ff fdf7 	bl	831fc <memmove>
   8360e:	9b01      	ldr	r3, [sp, #4]
   83610:	e781      	b.n	83516 <_realloc_r+0x23a>
   83612:	68a1      	ldr	r1, [r4, #8]
   83614:	2a24      	cmp	r2, #36	; 0x24
   83616:	f8ca 1010 	str.w	r1, [sl, #16]
   8361a:	68e1      	ldr	r1, [r4, #12]
   8361c:	f8ca 1014 	str.w	r1, [sl, #20]
   83620:	d006      	beq.n	83630 <_realloc_r+0x354>
   83622:	f104 0110 	add.w	r1, r4, #16
   83626:	f10a 0218 	add.w	r2, sl, #24
   8362a:	e76e      	b.n	8350a <_realloc_r+0x22e>
   8362c:	200706f8 	.word	0x200706f8
   83630:	6922      	ldr	r2, [r4, #16]
   83632:	f104 0118 	add.w	r1, r4, #24
   83636:	f8ca 2018 	str.w	r2, [sl, #24]
   8363a:	6960      	ldr	r0, [r4, #20]
   8363c:	f10a 0220 	add.w	r2, sl, #32
   83640:	f8ca 001c 	str.w	r0, [sl, #28]
   83644:	e761      	b.n	8350a <_realloc_r+0x22e>
   83646:	bf00      	nop

00083648 <_sbrk_r>:
   83648:	b538      	push	{r3, r4, r5, lr}
   8364a:	2300      	movs	r3, #0
   8364c:	4c06      	ldr	r4, [pc, #24]	; (83668 <_sbrk_r+0x20>)
   8364e:	4605      	mov	r5, r0
   83650:	4608      	mov	r0, r1
   83652:	6023      	str	r3, [r4, #0]
   83654:	f7fd fc4e 	bl	80ef4 <_sbrk>
   83658:	1c43      	adds	r3, r0, #1
   8365a:	d000      	beq.n	8365e <_sbrk_r+0x16>
   8365c:	bd38      	pop	{r3, r4, r5, pc}
   8365e:	6823      	ldr	r3, [r4, #0]
   83660:	2b00      	cmp	r3, #0
   83662:	d0fb      	beq.n	8365c <_sbrk_r+0x14>
   83664:	602b      	str	r3, [r5, #0]
   83666:	bd38      	pop	{r3, r4, r5, pc}
   83668:	20070cac 	.word	0x20070cac

0008366c <__sread>:
   8366c:	b510      	push	{r4, lr}
   8366e:	460c      	mov	r4, r1
   83670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83674:	f000 fa22 	bl	83abc <_read_r>
   83678:	2800      	cmp	r0, #0
   8367a:	db03      	blt.n	83684 <__sread+0x18>
   8367c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8367e:	4403      	add	r3, r0
   83680:	6523      	str	r3, [r4, #80]	; 0x50
   83682:	bd10      	pop	{r4, pc}
   83684:	89a3      	ldrh	r3, [r4, #12]
   83686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8368a:	81a3      	strh	r3, [r4, #12]
   8368c:	bd10      	pop	{r4, pc}
   8368e:	bf00      	nop

00083690 <__swrite>:
   83690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83694:	460c      	mov	r4, r1
   83696:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8369a:	461f      	mov	r7, r3
   8369c:	05cb      	lsls	r3, r1, #23
   8369e:	4616      	mov	r6, r2
   836a0:	4605      	mov	r5, r0
   836a2:	d507      	bpl.n	836b4 <__swrite+0x24>
   836a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836a8:	2302      	movs	r3, #2
   836aa:	2200      	movs	r2, #0
   836ac:	f000 f9f0 	bl	83a90 <_lseek_r>
   836b0:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   836b4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   836b8:	81a1      	strh	r1, [r4, #12]
   836ba:	463b      	mov	r3, r7
   836bc:	4632      	mov	r2, r6
   836be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   836c2:	4628      	mov	r0, r5
   836c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   836c8:	f000 b8d0 	b.w	8386c <_write_r>

000836cc <__sseek>:
   836cc:	b510      	push	{r4, lr}
   836ce:	460c      	mov	r4, r1
   836d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836d4:	f000 f9dc 	bl	83a90 <_lseek_r>
   836d8:	89a3      	ldrh	r3, [r4, #12]
   836da:	1c42      	adds	r2, r0, #1
   836dc:	bf0e      	itee	eq
   836de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   836e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   836e6:	6520      	strne	r0, [r4, #80]	; 0x50
   836e8:	81a3      	strh	r3, [r4, #12]
   836ea:	bd10      	pop	{r4, pc}

000836ec <__sclose>:
   836ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   836f0:	f000 b934 	b.w	8395c <_close_r>

000836f4 <strlen>:
   836f4:	f020 0103 	bic.w	r1, r0, #3
   836f8:	f010 0003 	ands.w	r0, r0, #3
   836fc:	f1c0 0000 	rsb	r0, r0, #0
   83700:	f851 3b04 	ldr.w	r3, [r1], #4
   83704:	f100 0c04 	add.w	ip, r0, #4
   83708:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   8370c:	f06f 0200 	mvn.w	r2, #0
   83710:	bf1c      	itt	ne
   83712:	fa22 f20c 	lsrne.w	r2, r2, ip
   83716:	4313      	orrne	r3, r2
   83718:	f04f 0c01 	mov.w	ip, #1
   8371c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   83720:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   83724:	eba3 020c 	sub.w	r2, r3, ip
   83728:	ea22 0203 	bic.w	r2, r2, r3
   8372c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   83730:	bf04      	itt	eq
   83732:	f851 3b04 	ldreq.w	r3, [r1], #4
   83736:	3004      	addeq	r0, #4
   83738:	d0f4      	beq.n	83724 <strlen+0x30>
   8373a:	f1c2 0100 	rsb	r1, r2, #0
   8373e:	ea02 0201 	and.w	r2, r2, r1
   83742:	fab2 f282 	clz	r2, r2
   83746:	f1c2 021f 	rsb	r2, r2, #31
   8374a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8374e:	4770      	bx	lr

00083750 <__swbuf_r>:
   83750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83752:	460d      	mov	r5, r1
   83754:	4614      	mov	r4, r2
   83756:	4606      	mov	r6, r0
   83758:	b110      	cbz	r0, 83760 <__swbuf_r+0x10>
   8375a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8375c:	2b00      	cmp	r3, #0
   8375e:	d04b      	beq.n	837f8 <__swbuf_r+0xa8>
   83760:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83764:	69a3      	ldr	r3, [r4, #24]
   83766:	b291      	uxth	r1, r2
   83768:	0708      	lsls	r0, r1, #28
   8376a:	60a3      	str	r3, [r4, #8]
   8376c:	d539      	bpl.n	837e2 <__swbuf_r+0x92>
   8376e:	6923      	ldr	r3, [r4, #16]
   83770:	2b00      	cmp	r3, #0
   83772:	d036      	beq.n	837e2 <__swbuf_r+0x92>
   83774:	b2ed      	uxtb	r5, r5
   83776:	0489      	lsls	r1, r1, #18
   83778:	462f      	mov	r7, r5
   8377a:	d515      	bpl.n	837a8 <__swbuf_r+0x58>
   8377c:	6822      	ldr	r2, [r4, #0]
   8377e:	6961      	ldr	r1, [r4, #20]
   83780:	1ad3      	subs	r3, r2, r3
   83782:	428b      	cmp	r3, r1
   83784:	da1c      	bge.n	837c0 <__swbuf_r+0x70>
   83786:	3301      	adds	r3, #1
   83788:	68a1      	ldr	r1, [r4, #8]
   8378a:	1c50      	adds	r0, r2, #1
   8378c:	3901      	subs	r1, #1
   8378e:	60a1      	str	r1, [r4, #8]
   83790:	6020      	str	r0, [r4, #0]
   83792:	7015      	strb	r5, [r2, #0]
   83794:	6962      	ldr	r2, [r4, #20]
   83796:	429a      	cmp	r2, r3
   83798:	d01a      	beq.n	837d0 <__swbuf_r+0x80>
   8379a:	89a3      	ldrh	r3, [r4, #12]
   8379c:	07db      	lsls	r3, r3, #31
   8379e:	d501      	bpl.n	837a4 <__swbuf_r+0x54>
   837a0:	2d0a      	cmp	r5, #10
   837a2:	d015      	beq.n	837d0 <__swbuf_r+0x80>
   837a4:	4638      	mov	r0, r7
   837a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   837a8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   837aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   837ae:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   837b2:	81a2      	strh	r2, [r4, #12]
   837b4:	6822      	ldr	r2, [r4, #0]
   837b6:	6661      	str	r1, [r4, #100]	; 0x64
   837b8:	6961      	ldr	r1, [r4, #20]
   837ba:	1ad3      	subs	r3, r2, r3
   837bc:	428b      	cmp	r3, r1
   837be:	dbe2      	blt.n	83786 <__swbuf_r+0x36>
   837c0:	4621      	mov	r1, r4
   837c2:	4630      	mov	r0, r6
   837c4:	f7fe fd0a 	bl	821dc <_fflush_r>
   837c8:	b940      	cbnz	r0, 837dc <__swbuf_r+0x8c>
   837ca:	2301      	movs	r3, #1
   837cc:	6822      	ldr	r2, [r4, #0]
   837ce:	e7db      	b.n	83788 <__swbuf_r+0x38>
   837d0:	4621      	mov	r1, r4
   837d2:	4630      	mov	r0, r6
   837d4:	f7fe fd02 	bl	821dc <_fflush_r>
   837d8:	2800      	cmp	r0, #0
   837da:	d0e3      	beq.n	837a4 <__swbuf_r+0x54>
   837dc:	f04f 37ff 	mov.w	r7, #4294967295
   837e0:	e7e0      	b.n	837a4 <__swbuf_r+0x54>
   837e2:	4621      	mov	r1, r4
   837e4:	4630      	mov	r0, r6
   837e6:	f7fe fbe9 	bl	81fbc <__swsetup_r>
   837ea:	2800      	cmp	r0, #0
   837ec:	d1f6      	bne.n	837dc <__swbuf_r+0x8c>
   837ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   837f2:	6923      	ldr	r3, [r4, #16]
   837f4:	b291      	uxth	r1, r2
   837f6:	e7bd      	b.n	83774 <__swbuf_r+0x24>
   837f8:	f7fe fd48 	bl	8228c <__sinit>
   837fc:	e7b0      	b.n	83760 <__swbuf_r+0x10>
   837fe:	bf00      	nop

00083800 <_wcrtomb_r>:
   83800:	b5f0      	push	{r4, r5, r6, r7, lr}
   83802:	4606      	mov	r6, r0
   83804:	b085      	sub	sp, #20
   83806:	461f      	mov	r7, r3
   83808:	b189      	cbz	r1, 8382e <_wcrtomb_r+0x2e>
   8380a:	4c10      	ldr	r4, [pc, #64]	; (8384c <_wcrtomb_r+0x4c>)
   8380c:	4d10      	ldr	r5, [pc, #64]	; (83850 <_wcrtomb_r+0x50>)
   8380e:	6824      	ldr	r4, [r4, #0]
   83810:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83812:	2c00      	cmp	r4, #0
   83814:	bf08      	it	eq
   83816:	462c      	moveq	r4, r5
   83818:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8381c:	47a0      	blx	r4
   8381e:	1c43      	adds	r3, r0, #1
   83820:	d103      	bne.n	8382a <_wcrtomb_r+0x2a>
   83822:	2200      	movs	r2, #0
   83824:	238a      	movs	r3, #138	; 0x8a
   83826:	603a      	str	r2, [r7, #0]
   83828:	6033      	str	r3, [r6, #0]
   8382a:	b005      	add	sp, #20
   8382c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8382e:	460c      	mov	r4, r1
   83830:	4a06      	ldr	r2, [pc, #24]	; (8384c <_wcrtomb_r+0x4c>)
   83832:	4d07      	ldr	r5, [pc, #28]	; (83850 <_wcrtomb_r+0x50>)
   83834:	6811      	ldr	r1, [r2, #0]
   83836:	4622      	mov	r2, r4
   83838:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8383a:	a901      	add	r1, sp, #4
   8383c:	2c00      	cmp	r4, #0
   8383e:	bf08      	it	eq
   83840:	462c      	moveq	r4, r5
   83842:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83846:	47a0      	blx	r4
   83848:	e7e9      	b.n	8381e <_wcrtomb_r+0x1e>
   8384a:	bf00      	nop
   8384c:	2007015c 	.word	0x2007015c
   83850:	2007058c 	.word	0x2007058c

00083854 <__ascii_wctomb>:
   83854:	b119      	cbz	r1, 8385e <__ascii_wctomb+0xa>
   83856:	2aff      	cmp	r2, #255	; 0xff
   83858:	d803      	bhi.n	83862 <__ascii_wctomb+0xe>
   8385a:	700a      	strb	r2, [r1, #0]
   8385c:	2101      	movs	r1, #1
   8385e:	4608      	mov	r0, r1
   83860:	4770      	bx	lr
   83862:	238a      	movs	r3, #138	; 0x8a
   83864:	f04f 31ff 	mov.w	r1, #4294967295
   83868:	6003      	str	r3, [r0, #0]
   8386a:	e7f8      	b.n	8385e <__ascii_wctomb+0xa>

0008386c <_write_r>:
   8386c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8386e:	460e      	mov	r6, r1
   83870:	2500      	movs	r5, #0
   83872:	4c08      	ldr	r4, [pc, #32]	; (83894 <_write_r+0x28>)
   83874:	4611      	mov	r1, r2
   83876:	4607      	mov	r7, r0
   83878:	461a      	mov	r2, r3
   8387a:	4630      	mov	r0, r6
   8387c:	6025      	str	r5, [r4, #0]
   8387e:	f7fc ff31 	bl	806e4 <_write>
   83882:	1c43      	adds	r3, r0, #1
   83884:	d000      	beq.n	83888 <_write_r+0x1c>
   83886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83888:	6823      	ldr	r3, [r4, #0]
   8388a:	2b00      	cmp	r3, #0
   8388c:	d0fb      	beq.n	83886 <_write_r+0x1a>
   8388e:	603b      	str	r3, [r7, #0]
   83890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83892:	bf00      	nop
   83894:	20070cac 	.word	0x20070cac

00083898 <__register_exitproc>:
   83898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8389c:	4d2c      	ldr	r5, [pc, #176]	; (83950 <__register_exitproc+0xb8>)
   8389e:	4606      	mov	r6, r0
   838a0:	6828      	ldr	r0, [r5, #0]
   838a2:	4698      	mov	r8, r3
   838a4:	460f      	mov	r7, r1
   838a6:	4691      	mov	r9, r2
   838a8:	f7ff f8b0 	bl	82a0c <__retarget_lock_acquire_recursive>
   838ac:	4b29      	ldr	r3, [pc, #164]	; (83954 <__register_exitproc+0xbc>)
   838ae:	681c      	ldr	r4, [r3, #0]
   838b0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   838b4:	2b00      	cmp	r3, #0
   838b6:	d03e      	beq.n	83936 <__register_exitproc+0x9e>
   838b8:	685a      	ldr	r2, [r3, #4]
   838ba:	2a1f      	cmp	r2, #31
   838bc:	dc1c      	bgt.n	838f8 <__register_exitproc+0x60>
   838be:	f102 0e01 	add.w	lr, r2, #1
   838c2:	b176      	cbz	r6, 838e2 <__register_exitproc+0x4a>
   838c4:	2101      	movs	r1, #1
   838c6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   838ca:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   838ce:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   838d2:	4091      	lsls	r1, r2
   838d4:	4308      	orrs	r0, r1
   838d6:	2e02      	cmp	r6, #2
   838d8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   838dc:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   838e0:	d023      	beq.n	8392a <__register_exitproc+0x92>
   838e2:	3202      	adds	r2, #2
   838e4:	f8c3 e004 	str.w	lr, [r3, #4]
   838e8:	6828      	ldr	r0, [r5, #0]
   838ea:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   838ee:	f7ff f88f 	bl	82a10 <__retarget_lock_release_recursive>
   838f2:	2000      	movs	r0, #0
   838f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   838f8:	4b17      	ldr	r3, [pc, #92]	; (83958 <__register_exitproc+0xc0>)
   838fa:	b30b      	cbz	r3, 83940 <__register_exitproc+0xa8>
   838fc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83900:	f7ff f900 	bl	82b04 <malloc>
   83904:	4603      	mov	r3, r0
   83906:	b1d8      	cbz	r0, 83940 <__register_exitproc+0xa8>
   83908:	2000      	movs	r0, #0
   8390a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8390e:	f04f 0e01 	mov.w	lr, #1
   83912:	6058      	str	r0, [r3, #4]
   83914:	6019      	str	r1, [r3, #0]
   83916:	4602      	mov	r2, r0
   83918:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8391c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83920:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83924:	2e00      	cmp	r6, #0
   83926:	d0dc      	beq.n	838e2 <__register_exitproc+0x4a>
   83928:	e7cc      	b.n	838c4 <__register_exitproc+0x2c>
   8392a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8392e:	4301      	orrs	r1, r0
   83930:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83934:	e7d5      	b.n	838e2 <__register_exitproc+0x4a>
   83936:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8393a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8393e:	e7bb      	b.n	838b8 <__register_exitproc+0x20>
   83940:	6828      	ldr	r0, [r5, #0]
   83942:	f7ff f865 	bl	82a10 <__retarget_lock_release_recursive>
   83946:	f04f 30ff 	mov.w	r0, #4294967295
   8394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8394e:	bf00      	nop
   83950:	20070588 	.word	0x20070588
   83954:	00083e48 	.word	0x00083e48
   83958:	00082b05 	.word	0x00082b05

0008395c <_close_r>:
   8395c:	b538      	push	{r3, r4, r5, lr}
   8395e:	2300      	movs	r3, #0
   83960:	4c06      	ldr	r4, [pc, #24]	; (8397c <_close_r+0x20>)
   83962:	4605      	mov	r5, r0
   83964:	4608      	mov	r0, r1
   83966:	6023      	str	r3, [r4, #0]
   83968:	f7fd fae0 	bl	80f2c <_close>
   8396c:	1c43      	adds	r3, r0, #1
   8396e:	d000      	beq.n	83972 <_close_r+0x16>
   83970:	bd38      	pop	{r3, r4, r5, pc}
   83972:	6823      	ldr	r3, [r4, #0]
   83974:	2b00      	cmp	r3, #0
   83976:	d0fb      	beq.n	83970 <_close_r+0x14>
   83978:	602b      	str	r3, [r5, #0]
   8397a:	bd38      	pop	{r3, r4, r5, pc}
   8397c:	20070cac 	.word	0x20070cac

00083980 <_fclose_r>:
   83980:	b570      	push	{r4, r5, r6, lr}
   83982:	b159      	cbz	r1, 8399c <_fclose_r+0x1c>
   83984:	4605      	mov	r5, r0
   83986:	460c      	mov	r4, r1
   83988:	b110      	cbz	r0, 83990 <_fclose_r+0x10>
   8398a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8398c:	2b00      	cmp	r3, #0
   8398e:	d03c      	beq.n	83a0a <_fclose_r+0x8a>
   83990:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83992:	07d8      	lsls	r0, r3, #31
   83994:	d505      	bpl.n	839a2 <_fclose_r+0x22>
   83996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8399a:	b92b      	cbnz	r3, 839a8 <_fclose_r+0x28>
   8399c:	2600      	movs	r6, #0
   8399e:	4630      	mov	r0, r6
   839a0:	bd70      	pop	{r4, r5, r6, pc}
   839a2:	89a3      	ldrh	r3, [r4, #12]
   839a4:	0599      	lsls	r1, r3, #22
   839a6:	d53c      	bpl.n	83a22 <_fclose_r+0xa2>
   839a8:	4621      	mov	r1, r4
   839aa:	4628      	mov	r0, r5
   839ac:	f7fe fb7a 	bl	820a4 <__sflush_r>
   839b0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   839b2:	4606      	mov	r6, r0
   839b4:	b133      	cbz	r3, 839c4 <_fclose_r+0x44>
   839b6:	69e1      	ldr	r1, [r4, #28]
   839b8:	4628      	mov	r0, r5
   839ba:	4798      	blx	r3
   839bc:	2800      	cmp	r0, #0
   839be:	bfb8      	it	lt
   839c0:	f04f 36ff 	movlt.w	r6, #4294967295
   839c4:	89a3      	ldrh	r3, [r4, #12]
   839c6:	061a      	lsls	r2, r3, #24
   839c8:	d422      	bmi.n	83a10 <_fclose_r+0x90>
   839ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
   839cc:	b141      	cbz	r1, 839e0 <_fclose_r+0x60>
   839ce:	f104 0340 	add.w	r3, r4, #64	; 0x40
   839d2:	4299      	cmp	r1, r3
   839d4:	d002      	beq.n	839dc <_fclose_r+0x5c>
   839d6:	4628      	mov	r0, r5
   839d8:	f7fe fd7e 	bl	824d8 <_free_r>
   839dc:	2300      	movs	r3, #0
   839de:	6323      	str	r3, [r4, #48]	; 0x30
   839e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   839e2:	b121      	cbz	r1, 839ee <_fclose_r+0x6e>
   839e4:	4628      	mov	r0, r5
   839e6:	f7fe fd77 	bl	824d8 <_free_r>
   839ea:	2300      	movs	r3, #0
   839ec:	6463      	str	r3, [r4, #68]	; 0x44
   839ee:	f7fe fc7d 	bl	822ec <__sfp_lock_acquire>
   839f2:	2200      	movs	r2, #0
   839f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   839f6:	81a2      	strh	r2, [r4, #12]
   839f8:	07db      	lsls	r3, r3, #31
   839fa:	d50e      	bpl.n	83a1a <_fclose_r+0x9a>
   839fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   839fe:	f7ff f803 	bl	82a08 <__retarget_lock_close_recursive>
   83a02:	f7fe fc79 	bl	822f8 <__sfp_lock_release>
   83a06:	4630      	mov	r0, r6
   83a08:	bd70      	pop	{r4, r5, r6, pc}
   83a0a:	f7fe fc3f 	bl	8228c <__sinit>
   83a0e:	e7bf      	b.n	83990 <_fclose_r+0x10>
   83a10:	6921      	ldr	r1, [r4, #16]
   83a12:	4628      	mov	r0, r5
   83a14:	f7fe fd60 	bl	824d8 <_free_r>
   83a18:	e7d7      	b.n	839ca <_fclose_r+0x4a>
   83a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a1c:	f7fe fff8 	bl	82a10 <__retarget_lock_release_recursive>
   83a20:	e7ec      	b.n	839fc <_fclose_r+0x7c>
   83a22:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a24:	f7fe fff2 	bl	82a0c <__retarget_lock_acquire_recursive>
   83a28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83a2c:	2b00      	cmp	r3, #0
   83a2e:	d1bb      	bne.n	839a8 <_fclose_r+0x28>
   83a30:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83a32:	f016 0601 	ands.w	r6, r6, #1
   83a36:	d1b1      	bne.n	8399c <_fclose_r+0x1c>
   83a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83a3a:	f7fe ffe9 	bl	82a10 <__retarget_lock_release_recursive>
   83a3e:	4630      	mov	r0, r6
   83a40:	bd70      	pop	{r4, r5, r6, pc}
   83a42:	bf00      	nop

00083a44 <_fstat_r>:
   83a44:	b570      	push	{r4, r5, r6, lr}
   83a46:	460d      	mov	r5, r1
   83a48:	2300      	movs	r3, #0
   83a4a:	4c07      	ldr	r4, [pc, #28]	; (83a68 <_fstat_r+0x24>)
   83a4c:	4606      	mov	r6, r0
   83a4e:	4611      	mov	r1, r2
   83a50:	4628      	mov	r0, r5
   83a52:	6023      	str	r3, [r4, #0]
   83a54:	f7fd fa6d 	bl	80f32 <_fstat>
   83a58:	1c43      	adds	r3, r0, #1
   83a5a:	d000      	beq.n	83a5e <_fstat_r+0x1a>
   83a5c:	bd70      	pop	{r4, r5, r6, pc}
   83a5e:	6823      	ldr	r3, [r4, #0]
   83a60:	2b00      	cmp	r3, #0
   83a62:	d0fb      	beq.n	83a5c <_fstat_r+0x18>
   83a64:	6033      	str	r3, [r6, #0]
   83a66:	bd70      	pop	{r4, r5, r6, pc}
   83a68:	20070cac 	.word	0x20070cac

00083a6c <_isatty_r>:
   83a6c:	b538      	push	{r3, r4, r5, lr}
   83a6e:	2300      	movs	r3, #0
   83a70:	4c06      	ldr	r4, [pc, #24]	; (83a8c <_isatty_r+0x20>)
   83a72:	4605      	mov	r5, r0
   83a74:	4608      	mov	r0, r1
   83a76:	6023      	str	r3, [r4, #0]
   83a78:	f7fd fa60 	bl	80f3c <_isatty>
   83a7c:	1c43      	adds	r3, r0, #1
   83a7e:	d000      	beq.n	83a82 <_isatty_r+0x16>
   83a80:	bd38      	pop	{r3, r4, r5, pc}
   83a82:	6823      	ldr	r3, [r4, #0]
   83a84:	2b00      	cmp	r3, #0
   83a86:	d0fb      	beq.n	83a80 <_isatty_r+0x14>
   83a88:	602b      	str	r3, [r5, #0]
   83a8a:	bd38      	pop	{r3, r4, r5, pc}
   83a8c:	20070cac 	.word	0x20070cac

00083a90 <_lseek_r>:
   83a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83a92:	460e      	mov	r6, r1
   83a94:	2500      	movs	r5, #0
   83a96:	4c08      	ldr	r4, [pc, #32]	; (83ab8 <_lseek_r+0x28>)
   83a98:	4611      	mov	r1, r2
   83a9a:	4607      	mov	r7, r0
   83a9c:	461a      	mov	r2, r3
   83a9e:	4630      	mov	r0, r6
   83aa0:	6025      	str	r5, [r4, #0]
   83aa2:	f7fd fa4d 	bl	80f40 <_lseek>
   83aa6:	1c43      	adds	r3, r0, #1
   83aa8:	d000      	beq.n	83aac <_lseek_r+0x1c>
   83aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83aac:	6823      	ldr	r3, [r4, #0]
   83aae:	2b00      	cmp	r3, #0
   83ab0:	d0fb      	beq.n	83aaa <_lseek_r+0x1a>
   83ab2:	603b      	str	r3, [r7, #0]
   83ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ab6:	bf00      	nop
   83ab8:	20070cac 	.word	0x20070cac

00083abc <_read_r>:
   83abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83abe:	460e      	mov	r6, r1
   83ac0:	2500      	movs	r5, #0
   83ac2:	4c08      	ldr	r4, [pc, #32]	; (83ae4 <_read_r+0x28>)
   83ac4:	4611      	mov	r1, r2
   83ac6:	4607      	mov	r7, r0
   83ac8:	461a      	mov	r2, r3
   83aca:	4630      	mov	r0, r6
   83acc:	6025      	str	r5, [r4, #0]
   83ace:	f7fc fc35 	bl	8033c <_read>
   83ad2:	1c43      	adds	r3, r0, #1
   83ad4:	d000      	beq.n	83ad8 <_read_r+0x1c>
   83ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ad8:	6823      	ldr	r3, [r4, #0]
   83ada:	2b00      	cmp	r3, #0
   83adc:	d0fb      	beq.n	83ad6 <_read_r+0x1a>
   83ade:	603b      	str	r3, [r7, #0]
   83ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ae2:	bf00      	nop
   83ae4:	20070cac 	.word	0x20070cac

00083ae8 <__aeabi_uldivmod>:
   83ae8:	b953      	cbnz	r3, 83b00 <__aeabi_uldivmod+0x18>
   83aea:	b94a      	cbnz	r2, 83b00 <__aeabi_uldivmod+0x18>
   83aec:	2900      	cmp	r1, #0
   83aee:	bf08      	it	eq
   83af0:	2800      	cmpeq	r0, #0
   83af2:	bf1c      	itt	ne
   83af4:	f04f 31ff 	movne.w	r1, #4294967295
   83af8:	f04f 30ff 	movne.w	r0, #4294967295
   83afc:	f000 b97a 	b.w	83df4 <__aeabi_idiv0>
   83b00:	f1ad 0c08 	sub.w	ip, sp, #8
   83b04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83b08:	f000 f806 	bl	83b18 <__udivmoddi4>
   83b0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   83b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83b14:	b004      	add	sp, #16
   83b16:	4770      	bx	lr

00083b18 <__udivmoddi4>:
   83b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83b1c:	468c      	mov	ip, r1
   83b1e:	460e      	mov	r6, r1
   83b20:	4604      	mov	r4, r0
   83b22:	9d08      	ldr	r5, [sp, #32]
   83b24:	2b00      	cmp	r3, #0
   83b26:	d150      	bne.n	83bca <__udivmoddi4+0xb2>
   83b28:	428a      	cmp	r2, r1
   83b2a:	4617      	mov	r7, r2
   83b2c:	d96c      	bls.n	83c08 <__udivmoddi4+0xf0>
   83b2e:	fab2 fe82 	clz	lr, r2
   83b32:	f1be 0f00 	cmp.w	lr, #0
   83b36:	d00b      	beq.n	83b50 <__udivmoddi4+0x38>
   83b38:	f1ce 0c20 	rsb	ip, lr, #32
   83b3c:	fa01 f60e 	lsl.w	r6, r1, lr
   83b40:	fa20 fc0c 	lsr.w	ip, r0, ip
   83b44:	fa02 f70e 	lsl.w	r7, r2, lr
   83b48:	ea4c 0c06 	orr.w	ip, ip, r6
   83b4c:	fa00 f40e 	lsl.w	r4, r0, lr
   83b50:	0c3a      	lsrs	r2, r7, #16
   83b52:	fbbc f9f2 	udiv	r9, ip, r2
   83b56:	b2bb      	uxth	r3, r7
   83b58:	fb02 cc19 	mls	ip, r2, r9, ip
   83b5c:	fb09 fa03 	mul.w	sl, r9, r3
   83b60:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83b64:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83b68:	45b2      	cmp	sl, r6
   83b6a:	d90a      	bls.n	83b82 <__udivmoddi4+0x6a>
   83b6c:	19f6      	adds	r6, r6, r7
   83b6e:	f109 31ff 	add.w	r1, r9, #4294967295
   83b72:	f080 8125 	bcs.w	83dc0 <__udivmoddi4+0x2a8>
   83b76:	45b2      	cmp	sl, r6
   83b78:	f240 8122 	bls.w	83dc0 <__udivmoddi4+0x2a8>
   83b7c:	f1a9 0902 	sub.w	r9, r9, #2
   83b80:	443e      	add	r6, r7
   83b82:	eba6 060a 	sub.w	r6, r6, sl
   83b86:	fbb6 f0f2 	udiv	r0, r6, r2
   83b8a:	fb02 6610 	mls	r6, r2, r0, r6
   83b8e:	fb00 f303 	mul.w	r3, r0, r3
   83b92:	b2a4      	uxth	r4, r4
   83b94:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83b98:	42a3      	cmp	r3, r4
   83b9a:	d909      	bls.n	83bb0 <__udivmoddi4+0x98>
   83b9c:	19e4      	adds	r4, r4, r7
   83b9e:	f100 32ff 	add.w	r2, r0, #4294967295
   83ba2:	f080 810b 	bcs.w	83dbc <__udivmoddi4+0x2a4>
   83ba6:	42a3      	cmp	r3, r4
   83ba8:	f240 8108 	bls.w	83dbc <__udivmoddi4+0x2a4>
   83bac:	3802      	subs	r0, #2
   83bae:	443c      	add	r4, r7
   83bb0:	2100      	movs	r1, #0
   83bb2:	1ae4      	subs	r4, r4, r3
   83bb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83bb8:	2d00      	cmp	r5, #0
   83bba:	d062      	beq.n	83c82 <__udivmoddi4+0x16a>
   83bbc:	2300      	movs	r3, #0
   83bbe:	fa24 f40e 	lsr.w	r4, r4, lr
   83bc2:	602c      	str	r4, [r5, #0]
   83bc4:	606b      	str	r3, [r5, #4]
   83bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83bca:	428b      	cmp	r3, r1
   83bcc:	d907      	bls.n	83bde <__udivmoddi4+0xc6>
   83bce:	2d00      	cmp	r5, #0
   83bd0:	d055      	beq.n	83c7e <__udivmoddi4+0x166>
   83bd2:	2100      	movs	r1, #0
   83bd4:	e885 0041 	stmia.w	r5, {r0, r6}
   83bd8:	4608      	mov	r0, r1
   83bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83bde:	fab3 f183 	clz	r1, r3
   83be2:	2900      	cmp	r1, #0
   83be4:	f040 808f 	bne.w	83d06 <__udivmoddi4+0x1ee>
   83be8:	42b3      	cmp	r3, r6
   83bea:	d302      	bcc.n	83bf2 <__udivmoddi4+0xda>
   83bec:	4282      	cmp	r2, r0
   83bee:	f200 80fc 	bhi.w	83dea <__udivmoddi4+0x2d2>
   83bf2:	1a84      	subs	r4, r0, r2
   83bf4:	eb66 0603 	sbc.w	r6, r6, r3
   83bf8:	2001      	movs	r0, #1
   83bfa:	46b4      	mov	ip, r6
   83bfc:	2d00      	cmp	r5, #0
   83bfe:	d040      	beq.n	83c82 <__udivmoddi4+0x16a>
   83c00:	e885 1010 	stmia.w	r5, {r4, ip}
   83c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c08:	b912      	cbnz	r2, 83c10 <__udivmoddi4+0xf8>
   83c0a:	2701      	movs	r7, #1
   83c0c:	fbb7 f7f2 	udiv	r7, r7, r2
   83c10:	fab7 fe87 	clz	lr, r7
   83c14:	f1be 0f00 	cmp.w	lr, #0
   83c18:	d135      	bne.n	83c86 <__udivmoddi4+0x16e>
   83c1a:	2101      	movs	r1, #1
   83c1c:	1bf6      	subs	r6, r6, r7
   83c1e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83c22:	fa1f f887 	uxth.w	r8, r7
   83c26:	fbb6 f2fc 	udiv	r2, r6, ip
   83c2a:	fb0c 6612 	mls	r6, ip, r2, r6
   83c2e:	fb08 f002 	mul.w	r0, r8, r2
   83c32:	0c23      	lsrs	r3, r4, #16
   83c34:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   83c38:	42b0      	cmp	r0, r6
   83c3a:	d907      	bls.n	83c4c <__udivmoddi4+0x134>
   83c3c:	19f6      	adds	r6, r6, r7
   83c3e:	f102 33ff 	add.w	r3, r2, #4294967295
   83c42:	d202      	bcs.n	83c4a <__udivmoddi4+0x132>
   83c44:	42b0      	cmp	r0, r6
   83c46:	f200 80d2 	bhi.w	83dee <__udivmoddi4+0x2d6>
   83c4a:	461a      	mov	r2, r3
   83c4c:	1a36      	subs	r6, r6, r0
   83c4e:	fbb6 f0fc 	udiv	r0, r6, ip
   83c52:	fb0c 6610 	mls	r6, ip, r0, r6
   83c56:	fb08 f800 	mul.w	r8, r8, r0
   83c5a:	b2a3      	uxth	r3, r4
   83c5c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   83c60:	45a0      	cmp	r8, r4
   83c62:	d907      	bls.n	83c74 <__udivmoddi4+0x15c>
   83c64:	19e4      	adds	r4, r4, r7
   83c66:	f100 33ff 	add.w	r3, r0, #4294967295
   83c6a:	d202      	bcs.n	83c72 <__udivmoddi4+0x15a>
   83c6c:	45a0      	cmp	r8, r4
   83c6e:	f200 80b9 	bhi.w	83de4 <__udivmoddi4+0x2cc>
   83c72:	4618      	mov	r0, r3
   83c74:	eba4 0408 	sub.w	r4, r4, r8
   83c78:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   83c7c:	e79c      	b.n	83bb8 <__udivmoddi4+0xa0>
   83c7e:	4629      	mov	r1, r5
   83c80:	4628      	mov	r0, r5
   83c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83c86:	fa07 f70e 	lsl.w	r7, r7, lr
   83c8a:	f1ce 0320 	rsb	r3, lr, #32
   83c8e:	fa26 f203 	lsr.w	r2, r6, r3
   83c92:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   83c96:	fbb2 f1fc 	udiv	r1, r2, ip
   83c9a:	fa1f f887 	uxth.w	r8, r7
   83c9e:	fb0c 2211 	mls	r2, ip, r1, r2
   83ca2:	fa06 f60e 	lsl.w	r6, r6, lr
   83ca6:	fa20 f303 	lsr.w	r3, r0, r3
   83caa:	fb01 f908 	mul.w	r9, r1, r8
   83cae:	4333      	orrs	r3, r6
   83cb0:	0c1e      	lsrs	r6, r3, #16
   83cb2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83cb6:	45b1      	cmp	r9, r6
   83cb8:	fa00 f40e 	lsl.w	r4, r0, lr
   83cbc:	d909      	bls.n	83cd2 <__udivmoddi4+0x1ba>
   83cbe:	19f6      	adds	r6, r6, r7
   83cc0:	f101 32ff 	add.w	r2, r1, #4294967295
   83cc4:	f080 808c 	bcs.w	83de0 <__udivmoddi4+0x2c8>
   83cc8:	45b1      	cmp	r9, r6
   83cca:	f240 8089 	bls.w	83de0 <__udivmoddi4+0x2c8>
   83cce:	3902      	subs	r1, #2
   83cd0:	443e      	add	r6, r7
   83cd2:	eba6 0609 	sub.w	r6, r6, r9
   83cd6:	fbb6 f0fc 	udiv	r0, r6, ip
   83cda:	fb0c 6210 	mls	r2, ip, r0, r6
   83cde:	fb00 f908 	mul.w	r9, r0, r8
   83ce2:	b29e      	uxth	r6, r3
   83ce4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   83ce8:	45b1      	cmp	r9, r6
   83cea:	d907      	bls.n	83cfc <__udivmoddi4+0x1e4>
   83cec:	19f6      	adds	r6, r6, r7
   83cee:	f100 33ff 	add.w	r3, r0, #4294967295
   83cf2:	d271      	bcs.n	83dd8 <__udivmoddi4+0x2c0>
   83cf4:	45b1      	cmp	r9, r6
   83cf6:	d96f      	bls.n	83dd8 <__udivmoddi4+0x2c0>
   83cf8:	3802      	subs	r0, #2
   83cfa:	443e      	add	r6, r7
   83cfc:	eba6 0609 	sub.w	r6, r6, r9
   83d00:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   83d04:	e78f      	b.n	83c26 <__udivmoddi4+0x10e>
   83d06:	f1c1 0720 	rsb	r7, r1, #32
   83d0a:	fa22 f807 	lsr.w	r8, r2, r7
   83d0e:	408b      	lsls	r3, r1
   83d10:	ea48 0303 	orr.w	r3, r8, r3
   83d14:	fa26 f407 	lsr.w	r4, r6, r7
   83d18:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   83d1c:	fbb4 f9fe 	udiv	r9, r4, lr
   83d20:	fa1f fc83 	uxth.w	ip, r3
   83d24:	fb0e 4419 	mls	r4, lr, r9, r4
   83d28:	408e      	lsls	r6, r1
   83d2a:	fa20 f807 	lsr.w	r8, r0, r7
   83d2e:	fb09 fa0c 	mul.w	sl, r9, ip
   83d32:	ea48 0806 	orr.w	r8, r8, r6
   83d36:	ea4f 4618 	mov.w	r6, r8, lsr #16
   83d3a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   83d3e:	45a2      	cmp	sl, r4
   83d40:	fa02 f201 	lsl.w	r2, r2, r1
   83d44:	fa00 f601 	lsl.w	r6, r0, r1
   83d48:	d908      	bls.n	83d5c <__udivmoddi4+0x244>
   83d4a:	18e4      	adds	r4, r4, r3
   83d4c:	f109 30ff 	add.w	r0, r9, #4294967295
   83d50:	d244      	bcs.n	83ddc <__udivmoddi4+0x2c4>
   83d52:	45a2      	cmp	sl, r4
   83d54:	d942      	bls.n	83ddc <__udivmoddi4+0x2c4>
   83d56:	f1a9 0902 	sub.w	r9, r9, #2
   83d5a:	441c      	add	r4, r3
   83d5c:	eba4 040a 	sub.w	r4, r4, sl
   83d60:	fbb4 f0fe 	udiv	r0, r4, lr
   83d64:	fb0e 4410 	mls	r4, lr, r0, r4
   83d68:	fb00 fc0c 	mul.w	ip, r0, ip
   83d6c:	fa1f f888 	uxth.w	r8, r8
   83d70:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   83d74:	45a4      	cmp	ip, r4
   83d76:	d907      	bls.n	83d88 <__udivmoddi4+0x270>
   83d78:	18e4      	adds	r4, r4, r3
   83d7a:	f100 3eff 	add.w	lr, r0, #4294967295
   83d7e:	d229      	bcs.n	83dd4 <__udivmoddi4+0x2bc>
   83d80:	45a4      	cmp	ip, r4
   83d82:	d927      	bls.n	83dd4 <__udivmoddi4+0x2bc>
   83d84:	3802      	subs	r0, #2
   83d86:	441c      	add	r4, r3
   83d88:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83d8c:	fba0 8902 	umull	r8, r9, r0, r2
   83d90:	eba4 0c0c 	sub.w	ip, r4, ip
   83d94:	45cc      	cmp	ip, r9
   83d96:	46c2      	mov	sl, r8
   83d98:	46ce      	mov	lr, r9
   83d9a:	d315      	bcc.n	83dc8 <__udivmoddi4+0x2b0>
   83d9c:	d012      	beq.n	83dc4 <__udivmoddi4+0x2ac>
   83d9e:	b155      	cbz	r5, 83db6 <__udivmoddi4+0x29e>
   83da0:	ebb6 030a 	subs.w	r3, r6, sl
   83da4:	eb6c 060e 	sbc.w	r6, ip, lr
   83da8:	fa06 f707 	lsl.w	r7, r6, r7
   83dac:	40cb      	lsrs	r3, r1
   83dae:	431f      	orrs	r7, r3
   83db0:	40ce      	lsrs	r6, r1
   83db2:	602f      	str	r7, [r5, #0]
   83db4:	606e      	str	r6, [r5, #4]
   83db6:	2100      	movs	r1, #0
   83db8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83dbc:	4610      	mov	r0, r2
   83dbe:	e6f7      	b.n	83bb0 <__udivmoddi4+0x98>
   83dc0:	4689      	mov	r9, r1
   83dc2:	e6de      	b.n	83b82 <__udivmoddi4+0x6a>
   83dc4:	4546      	cmp	r6, r8
   83dc6:	d2ea      	bcs.n	83d9e <__udivmoddi4+0x286>
   83dc8:	ebb8 0a02 	subs.w	sl, r8, r2
   83dcc:	eb69 0e03 	sbc.w	lr, r9, r3
   83dd0:	3801      	subs	r0, #1
   83dd2:	e7e4      	b.n	83d9e <__udivmoddi4+0x286>
   83dd4:	4670      	mov	r0, lr
   83dd6:	e7d7      	b.n	83d88 <__udivmoddi4+0x270>
   83dd8:	4618      	mov	r0, r3
   83dda:	e78f      	b.n	83cfc <__udivmoddi4+0x1e4>
   83ddc:	4681      	mov	r9, r0
   83dde:	e7bd      	b.n	83d5c <__udivmoddi4+0x244>
   83de0:	4611      	mov	r1, r2
   83de2:	e776      	b.n	83cd2 <__udivmoddi4+0x1ba>
   83de4:	3802      	subs	r0, #2
   83de6:	443c      	add	r4, r7
   83de8:	e744      	b.n	83c74 <__udivmoddi4+0x15c>
   83dea:	4608      	mov	r0, r1
   83dec:	e706      	b.n	83bfc <__udivmoddi4+0xe4>
   83dee:	3a02      	subs	r2, #2
   83df0:	443e      	add	r6, r7
   83df2:	e72b      	b.n	83c4c <__udivmoddi4+0x134>

00083df4 <__aeabi_idiv0>:
   83df4:	4770      	bx	lr
   83df6:	bf00      	nop
   83df8:	736e6f43 	.word	0x736e6f43
   83dfc:	20656c6f 	.word	0x20656c6f
   83e00:	64616572 	.word	0x64616572
   83e04:	00000a79 	.word	0x00000a79
   83e08:	3d3d3d3d 	.word	0x3d3d3d3d
   83e0c:	3d3d3d3d 	.word	0x3d3d3d3d
   83e10:	3d3d3d3d 	.word	0x3d3d3d3d
   83e14:	00000a3d 	.word	0x00000a3d
   83e18:	5453414d 	.word	0x5453414d
   83e1c:	53205245 	.word	0x53205245
   83e20:	50555445 	.word	0x50555445
   83e24:	0a4b4f20 	.word	0x0a4b4f20
   83e28:	00000000 	.word	0x00000000
   83e2c:	5453414d 	.word	0x5453414d
   83e30:	53205245 	.word	0x53205245
   83e34:	50555445 	.word	0x50555445
   83e38:	544f4e20 	.word	0x544f4e20
   83e3c:	0a4b4f20 	.word	0x0a4b4f20
   83e40:	00000000 	.word	0x00000000
   83e44:	000a6925 	.word	0x000a6925

00083e48 <_global_impure_ptr>:
   83e48:	20070160 33323130 37363534 42413938     `.. 0123456789AB
   83e58:	46454443 00000000 33323130 37363534     CDEF....01234567
   83e68:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   83e78:	0000296c                                l)..

00083e7c <blanks.7217>:
   83e7c:	20202020 20202020 20202020 20202020                     

00083e8c <zeroes.7218>:
   83e8c:	30303030 30303030 30303030 30303030     0000000000000000
   83e9c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00083eac <_ctype_>:
   83eac:	20202000 20202020 28282020 20282828     .         ((((( 
   83ebc:	20202020 20202020 20202020 20202020                     
   83ecc:	10108820 10101010 10101010 10101010      ...............
   83edc:	04040410 04040404 10040404 10101010     ................
   83eec:	41411010 41414141 01010101 01010101     ..AAAAAA........
   83efc:	01010101 01010101 01010101 10101010     ................
   83f0c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   83f1c:	02020202 02020202 02020202 10101010     ................
   83f2c:	00000020 00000000 00000000 00000000      ...............
	...

00083fb0 <_init>:
   83fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fb2:	bf00      	nop
   83fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fb6:	bc08      	pop	{r3}
   83fb8:	469e      	mov	lr, r3
   83fba:	4770      	bx	lr

00083fbc <__init_array_start>:
   83fbc:	00082085 	.word	0x00082085

00083fc0 <__frame_dummy_init_array_entry>:
   83fc0:	00080119                                ....

00083fc4 <_fini>:
   83fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83fc6:	bf00      	nop
   83fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   83fca:	bc08      	pop	{r3}
   83fcc:	469e      	mov	lr, r3
   83fce:	4770      	bx	lr

00083fd0 <__fini_array_start>:
   83fd0:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070158 	.word	0x20070158

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <packet_rec_pab>:
	...
20070134:	20070bc4 00000001 00000008              ... ........

20070140 <packet_rec_pos>:
	...
20070148:	20070bc8 0000000a 00000010              ... ........

20070154 <g_interrupt_enabled>:
20070154:	00000001                                ....

20070158 <SystemCoreClock>:
20070158:	003d0900                                ..=.

2007015c <_impure_ptr>:
2007015c:	20070160                                `.. 

20070160 <impure_data>:
20070160:	00000000 2007044c 200704b4 2007051c     ....L.. ... ... 
	...
20070208:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070218:	0005deec 0000000b 00000000 00000000     ................
	...

20070588 <__atexit_recursive_mutex>:
20070588:	20070c88                                ... 

2007058c <__global_locale>:
2007058c:	00000043 00000000 00000000 00000000     C...............
	...
200705ac:	00000043 00000000 00000000 00000000     C...............
	...
200705cc:	00000043 00000000 00000000 00000000     C...............
	...
200705ec:	00000043 00000000 00000000 00000000     C...............
	...
2007060c:	00000043 00000000 00000000 00000000     C...............
	...
2007062c:	00000043 00000000 00000000 00000000     C...............
	...
2007064c:	00000043 00000000 00000000 00000000     C...............
	...
2007066c:	00083855 00083059 00000000 00083eac     U8..Y0.......>..
2007067c:	00083ea8 00083e28 00083e28 00083e28     .>..(>..(>..(>..
2007068c:	00083e28 00083e28 00083e28 00083e28     (>..(>..(>..(>..
2007069c:	00083e28 00083e28 ffffffff ffffffff     (>..(>..........
200706ac:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706d4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706f8 <__malloc_av_>:
	...
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 
20070ae0:	20070ad8 20070ad8 20070ae0 20070ae0     ... ... ... ... 
20070af0:	20070ae8 20070ae8 20070af0 20070af0     ... ... ... ... 

20070b00 <__malloc_sbrk_base>:
20070b00:	ffffffff                                ....

20070b04 <__malloc_trim_threshold>:
20070b04:	00020000                                ....

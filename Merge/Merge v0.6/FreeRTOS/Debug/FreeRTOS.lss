
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000044d8  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  000844d8  000844d8  000144d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae0  20070000  000844e0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001cc  20070ae0  00084fc0  00020ae0  2**2
                  ALLOC
  4 .stack        00002004  20070cac  0008518c  00020ae0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b09  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001b12b  00000000  00000000  00020b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003dae  00000000  00000000  0003bc8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000062e5  00000000  00000000  0003fa3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000d18  00000000  00000000  00045d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000cb0  00000000  00000000  00046a38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009ebd  00000000  00000000  000476e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000127c0  00000000  00000000  000515a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006a84d  00000000  00000000  00063d65  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002acc  00000000  00000000  000ce5b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	b0 2c 07 20 85 11 08 00 81 11 08 00 81 11 08 00     .,. ............
   80010:	81 11 08 00 81 11 08 00 81 11 08 00 00 00 00 00     ................
	...
   8002c:	8d 09 08 00 81 11 08 00 00 00 00 00 c5 09 08 00     ................
   8003c:	01 0a 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   8004c:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   8005c:	81 11 08 00 81 11 08 00 81 11 08 00 00 00 00 00     ................
   8006c:	f5 0f 08 00 09 10 08 00 1d 10 08 00 31 10 08 00     ............1...
	...
   80084:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   80094:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   800a4:	00 00 00 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   800b4:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   800c4:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   800d4:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................
   800e4:	81 11 08 00 81 11 08 00 81 11 08 00 81 11 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae0 	.word	0x20070ae0
   80110:	00000000 	.word	0x00000000
   80114:	000844e0 	.word	0x000844e0

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	000844e0 	.word	0x000844e0
   80154:	20070ae4 	.word	0x20070ae4
   80158:	000844e0 	.word	0x000844e0
   8015c:	00000000 	.word	0x00000000

00080160 <twi_set_speed>:
{
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	if (ul_speed > I2C_FAST_MODE_SPEED) {
   80160:	4b2a      	ldr	r3, [pc, #168]	; (8020c <twi_set_speed+0xac>)
   80162:	4299      	cmp	r1, r3
   80164:	d849      	bhi.n	801fa <twi_set_speed+0x9a>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   80166:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
   8016a:	4299      	cmp	r1, r3
   8016c:	d92b      	bls.n	801c6 <twi_set_speed+0x66>
{
   8016e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   80170:	4c27      	ldr	r4, [pc, #156]	; (80210 <twi_set_speed+0xb0>)
   80172:	fba4 3402 	umull	r3, r4, r4, r2
   80176:	0ba4      	lsrs	r4, r4, #14
   80178:	3c04      	subs	r4, #4
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8017a:	4b26      	ldr	r3, [pc, #152]	; (80214 <twi_set_speed+0xb4>)
   8017c:	440b      	add	r3, r1
   8017e:	009b      	lsls	r3, r3, #2
   80180:	fbb2 f2f3 	udiv	r2, r2, r3
   80184:	3a04      	subs	r2, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80186:	2cff      	cmp	r4, #255	; 0xff
   80188:	d939      	bls.n	801fe <twi_set_speed+0x9e>
   8018a:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
   8018c:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   8018e:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80190:	2cff      	cmp	r4, #255	; 0xff
   80192:	d90d      	bls.n	801b0 <twi_set_speed+0x50>
   80194:	2907      	cmp	r1, #7
   80196:	d1f9      	bne.n	8018c <twi_set_speed+0x2c>
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   80198:	0213      	lsls	r3, r2, #8
   8019a:	b29b      	uxth	r3, r3
				TWI_CWGR_CKDIV(ckdiv);		
   8019c:	0409      	lsls	r1, r1, #16
   8019e:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   801a2:	430b      	orrs	r3, r1
   801a4:	b2e4      	uxtb	r4, r4
   801a6:	4323      	orrs	r3, r4
		p_twi->TWI_CWGR =
   801a8:	6103      	str	r3, [r0, #16]
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
   801aa:	2000      	movs	r0, #0
}
   801ac:	bc10      	pop	{r4}
   801ae:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801b0:	2aff      	cmp	r2, #255	; 0xff
   801b2:	d9f1      	bls.n	80198 <twi_set_speed+0x38>
   801b4:	2906      	cmp	r1, #6
   801b6:	d8ef      	bhi.n	80198 <twi_set_speed+0x38>
			ckdiv++;
   801b8:	3101      	adds	r1, #1
			chdiv /= TWI_CLK_DIVIDER;
   801ba:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801bc:	2aff      	cmp	r2, #255	; 0xff
   801be:	d9eb      	bls.n	80198 <twi_set_speed+0x38>
   801c0:	2906      	cmp	r1, #6
   801c2:	d9f9      	bls.n	801b8 <twi_set_speed+0x58>
   801c4:	e7e8      	b.n	80198 <twi_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   801c6:	0049      	lsls	r1, r1, #1
   801c8:	fbb2 f2f1 	udiv	r2, r2, r1
   801cc:	3a04      	subs	r2, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801ce:	2aff      	cmp	r2, #255	; 0xff
   801d0:	d911      	bls.n	801f6 <twi_set_speed+0x96>
   801d2:	2300      	movs	r3, #0
			ckdiv++;
   801d4:	3301      	adds	r3, #1
			c_lh_div /= TWI_CLK_DIVIDER;
   801d6:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801d8:	2aff      	cmp	r2, #255	; 0xff
   801da:	d901      	bls.n	801e0 <twi_set_speed+0x80>
   801dc:	2b07      	cmp	r3, #7
   801de:	d1f9      	bne.n	801d4 <twi_set_speed+0x74>
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801e0:	0211      	lsls	r1, r2, #8
   801e2:	b289      	uxth	r1, r1
				TWI_CWGR_CKDIV(ckdiv);
   801e4:	041b      	lsls	r3, r3, #16
   801e6:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   801ea:	430b      	orrs	r3, r1
   801ec:	b2d2      	uxtb	r2, r2
   801ee:	431a      	orrs	r2, r3
		p_twi->TWI_CWGR =
   801f0:	6102      	str	r2, [r0, #16]
	return PASS;
   801f2:	2000      	movs	r0, #0
   801f4:	4770      	bx	lr
	uint32_t ckdiv = 0;
   801f6:	2300      	movs	r3, #0
   801f8:	e7f2      	b.n	801e0 <twi_set_speed+0x80>
		return FAIL;
   801fa:	2001      	movs	r0, #1
   801fc:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   801fe:	2aff      	cmp	r2, #255	; 0xff
	uint32_t ckdiv = 0;
   80200:	bf88      	it	hi
   80202:	2100      	movhi	r1, #0
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   80204:	d8d8      	bhi.n	801b8 <twi_set_speed+0x58>
	uint32_t ckdiv = 0;
   80206:	2100      	movs	r1, #0
   80208:	e7c6      	b.n	80198 <twi_set_speed+0x38>
   8020a:	bf00      	nop
   8020c:	00061a80 	.word	0x00061a80
   80210:	057619f1 	.word	0x057619f1
   80214:	3ffd1200 	.word	0x3ffd1200

00080218 <twi_master_init>:
{
   80218:	b538      	push	{r3, r4, r5, lr}
   8021a:	4604      	mov	r4, r0
   8021c:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   8021e:	f04f 33ff 	mov.w	r3, #4294967295
   80222:	6283      	str	r3, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   80224:	6a03      	ldr	r3, [r0, #32]
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   80226:	2380      	movs	r3, #128	; 0x80
   80228:	6003      	str	r3, [r0, #0]
	p_twi->TWI_RHR;
   8022a:	6b03      	ldr	r3, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   8022c:	2308      	movs	r3, #8
   8022e:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   80230:	2320      	movs	r3, #32
   80232:	6003      	str	r3, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   80234:	2304      	movs	r3, #4
   80236:	6003      	str	r3, [r0, #0]
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   80238:	680a      	ldr	r2, [r1, #0]
   8023a:	6849      	ldr	r1, [r1, #4]
   8023c:	4b05      	ldr	r3, [pc, #20]	; (80254 <twi_master_init+0x3c>)
   8023e:	4798      	blx	r3
   80240:	2801      	cmp	r0, #1
   80242:	bf14      	ite	ne
   80244:	2000      	movne	r0, #0
   80246:	2001      	moveq	r0, #1
	if (p_opt->smbus == 1) {
   80248:	7a6b      	ldrb	r3, [r5, #9]
   8024a:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8024c:	bf04      	itt	eq
   8024e:	2340      	moveq	r3, #64	; 0x40
   80250:	6023      	streq	r3, [r4, #0]
}
   80252:	bd38      	pop	{r3, r4, r5, pc}
   80254:	00080161 	.word	0x00080161

00080258 <rightEncoderAISR>:
	printf("%i\n",lTickTime);
	
} 
*/
//////////////////////////////ENCODER ISR//////////////////////////////////////////
void rightEncoderAISR(){ //ISR for the right encoder A
   80258:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder	
	if(getSetRDirection()>0){
   8025a:	4b14      	ldr	r3, [pc, #80]	; (802ac <rightEncoderAISR+0x54>)
   8025c:	4798      	blx	r3
   8025e:	2800      	cmp	r0, #0
   80260:	dd12      	ble.n	80288 <rightEncoderAISR+0x30>
		rAPulses++; 
   80262:	4a13      	ldr	r2, [pc, #76]	; (802b0 <rightEncoderAISR+0x58>)
   80264:	6813      	ldr	r3, [r2, #0]
   80266:	3301      	adds	r3, #1
   80268:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}

	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference 
	rAPrevTick = rACurrentTick;
   8026a:	4c12      	ldr	r4, [pc, #72]	; (802b4 <rightEncoderAISR+0x5c>)
   8026c:	4d12      	ldr	r5, [pc, #72]	; (802b8 <rightEncoderAISR+0x60>)
   8026e:	682b      	ldr	r3, [r5, #0]
   80270:	6023      	str	r3, [r4, #0]
	rACurrentTick = xTaskGetTickCountFromISR();
   80272:	4b12      	ldr	r3, [pc, #72]	; (802bc <rightEncoderAISR+0x64>)
   80274:	4798      	blx	r3
   80276:	6028      	str	r0, [r5, #0]
	rAPulseTime = rACurrentTick-rAPrevTick*msPerTick;
   80278:	4b11      	ldr	r3, [pc, #68]	; (802c0 <rightEncoderAISR+0x68>)
   8027a:	781a      	ldrb	r2, [r3, #0]
   8027c:	6823      	ldr	r3, [r4, #0]
   8027e:	fb02 0013 	mls	r0, r2, r3, r0
   80282:	4b10      	ldr	r3, [pc, #64]	; (802c4 <rightEncoderAISR+0x6c>)
   80284:	8018      	strh	r0, [r3, #0]
   80286:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   80288:	4b08      	ldr	r3, [pc, #32]	; (802ac <rightEncoderAISR+0x54>)
   8028a:	4798      	blx	r3
   8028c:	2800      	cmp	r0, #0
   8028e:	db07      	blt.n	802a0 <rightEncoderAISR+0x48>
	}else if(getSetRDirection()==0){
   80290:	4b06      	ldr	r3, [pc, #24]	; (802ac <rightEncoderAISR+0x54>)
   80292:	4798      	blx	r3
   80294:	2800      	cmp	r0, #0
   80296:	d1e8      	bne.n	8026a <rightEncoderAISR+0x12>
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80298:	480b      	ldr	r0, [pc, #44]	; (802c8 <rightEncoderAISR+0x70>)
   8029a:	4b0c      	ldr	r3, [pc, #48]	; (802cc <rightEncoderAISR+0x74>)
   8029c:	4798      	blx	r3
   8029e:	e7e4      	b.n	8026a <rightEncoderAISR+0x12>
		rAPulses--;
   802a0:	4a03      	ldr	r2, [pc, #12]	; (802b0 <rightEncoderAISR+0x58>)
   802a2:	6813      	ldr	r3, [r2, #0]
   802a4:	3b01      	subs	r3, #1
   802a6:	6013      	str	r3, [r2, #0]
   802a8:	e7df      	b.n	8026a <rightEncoderAISR+0x12>
   802aa:	bf00      	nop
   802ac:	000805e1 	.word	0x000805e1
   802b0:	20070c34 	.word	0x20070c34
   802b4:	20070c60 	.word	0x20070c60
   802b8:	20070c50 	.word	0x20070c50
   802bc:	00080a2d 	.word	0x00080a2d
   802c0:	20070c58 	.word	0x20070c58
   802c4:	20070c4c 	.word	0x20070c4c
   802c8:	000842a8 	.word	0x000842a8
   802cc:	000813f9 	.word	0x000813f9

000802d0 <rightEncoderBISR>:
	//printf("RightPulseTime A: %i ms\n",rAPulseTime);
	
}

void rightEncoderBISR(){ //ISR for the right encoder B
   802d0:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder
	if(getSetRDirection()>0){
   802d2:	4b14      	ldr	r3, [pc, #80]	; (80324 <rightEncoderBISR+0x54>)
   802d4:	4798      	blx	r3
   802d6:	2800      	cmp	r0, #0
   802d8:	dd12      	ble.n	80300 <rightEncoderBISR+0x30>
		rBPulses++;
   802da:	4a13      	ldr	r2, [pc, #76]	; (80328 <rightEncoderBISR+0x58>)
   802dc:	6813      	ldr	r3, [r2, #0]
   802de:	3301      	adds	r3, #1
   802e0:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	rBPrevTick = rBCurrentTick;
   802e2:	4c12      	ldr	r4, [pc, #72]	; (8032c <rightEncoderBISR+0x5c>)
   802e4:	4d12      	ldr	r5, [pc, #72]	; (80330 <rightEncoderBISR+0x60>)
   802e6:	682b      	ldr	r3, [r5, #0]
   802e8:	6023      	str	r3, [r4, #0]
	rBCurrentTick = xTaskGetTickCountFromISR();
   802ea:	4b12      	ldr	r3, [pc, #72]	; (80334 <rightEncoderBISR+0x64>)
   802ec:	4798      	blx	r3
   802ee:	6028      	str	r0, [r5, #0]
	rBPulseTime = rBCurrentTick-rBPrevTick*msPerTick;
   802f0:	4b11      	ldr	r3, [pc, #68]	; (80338 <rightEncoderBISR+0x68>)
   802f2:	781a      	ldrb	r2, [r3, #0]
   802f4:	6823      	ldr	r3, [r4, #0]
   802f6:	fb02 0013 	mls	r0, r2, r3, r0
   802fa:	4b10      	ldr	r3, [pc, #64]	; (8033c <rightEncoderBISR+0x6c>)
   802fc:	8018      	strh	r0, [r3, #0]
   802fe:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   80300:	4b08      	ldr	r3, [pc, #32]	; (80324 <rightEncoderBISR+0x54>)
   80302:	4798      	blx	r3
   80304:	2800      	cmp	r0, #0
   80306:	db07      	blt.n	80318 <rightEncoderBISR+0x48>
	}else if(getSetRDirection()==0){
   80308:	4b06      	ldr	r3, [pc, #24]	; (80324 <rightEncoderBISR+0x54>)
   8030a:	4798      	blx	r3
   8030c:	2800      	cmp	r0, #0
   8030e:	d1e8      	bne.n	802e2 <rightEncoderBISR+0x12>
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80310:	480b      	ldr	r0, [pc, #44]	; (80340 <rightEncoderBISR+0x70>)
   80312:	4b0c      	ldr	r3, [pc, #48]	; (80344 <rightEncoderBISR+0x74>)
   80314:	4798      	blx	r3
   80316:	e7e4      	b.n	802e2 <rightEncoderBISR+0x12>
		rBPulses--;
   80318:	4a03      	ldr	r2, [pc, #12]	; (80328 <rightEncoderBISR+0x58>)
   8031a:	6813      	ldr	r3, [r2, #0]
   8031c:	3b01      	subs	r3, #1
   8031e:	6013      	str	r3, [r2, #0]
   80320:	e7df      	b.n	802e2 <rightEncoderBISR+0x12>
   80322:	bf00      	nop
   80324:	000805e1 	.word	0x000805e1
   80328:	20070c40 	.word	0x20070c40
   8032c:	20070c48 	.word	0x20070c48
   80330:	20070c68 	.word	0x20070c68
   80334:	00080a2d 	.word	0x00080a2d
   80338:	20070c58 	.word	0x20070c58
   8033c:	20070c3c 	.word	0x20070c3c
   80340:	000842a8 	.word	0x000842a8
   80344:	000813f9 	.word	0x000813f9

00080348 <leftEncoderAISR>:
	//printf("RightPulseTime B: %i ms\n",rBPulseTime);
	
}

void leftEncoderAISR(){ //ISR for the left encoder A
   80348:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   8034a:	4b14      	ldr	r3, [pc, #80]	; (8039c <leftEncoderAISR+0x54>)
   8034c:	4798      	blx	r3
   8034e:	2800      	cmp	r0, #0
   80350:	dd13      	ble.n	8037a <leftEncoderAISR+0x32>
		lAPulses++;
   80352:	4a13      	ldr	r2, [pc, #76]	; (803a0 <leftEncoderAISR+0x58>)
   80354:	6813      	ldr	r3, [r2, #0]
   80356:	3301      	adds	r3, #1
   80358:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lAPrevTick = lACurrentTick;
   8035a:	4c12      	ldr	r4, [pc, #72]	; (803a4 <leftEncoderAISR+0x5c>)
   8035c:	4d12      	ldr	r5, [pc, #72]	; (803a8 <leftEncoderAISR+0x60>)
   8035e:	682b      	ldr	r3, [r5, #0]
   80360:	6023      	str	r3, [r4, #0]
	lACurrentTick = xTaskGetTickCountFromISR();
   80362:	4b12      	ldr	r3, [pc, #72]	; (803ac <leftEncoderAISR+0x64>)
   80364:	4798      	blx	r3
   80366:	6028      	str	r0, [r5, #0]
	lAPulseTime = (lACurrentTick-lAPrevTick)*msPerTick;
   80368:	6823      	ldr	r3, [r4, #0]
   8036a:	1ac0      	subs	r0, r0, r3
   8036c:	4b10      	ldr	r3, [pc, #64]	; (803b0 <leftEncoderAISR+0x68>)
   8036e:	781b      	ldrb	r3, [r3, #0]
   80370:	fb03 f000 	mul.w	r0, r3, r0
   80374:	4b0f      	ldr	r3, [pc, #60]	; (803b4 <leftEncoderAISR+0x6c>)
   80376:	8018      	strh	r0, [r3, #0]
   80378:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   8037a:	4b08      	ldr	r3, [pc, #32]	; (8039c <leftEncoderAISR+0x54>)
   8037c:	4798      	blx	r3
   8037e:	2800      	cmp	r0, #0
   80380:	db07      	blt.n	80392 <leftEncoderAISR+0x4a>
		}else if(getSetLDirection()==0){
   80382:	4b06      	ldr	r3, [pc, #24]	; (8039c <leftEncoderAISR+0x54>)
   80384:	4798      	blx	r3
   80386:	2800      	cmp	r0, #0
   80388:	d1e7      	bne.n	8035a <leftEncoderAISR+0x12>
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   8038a:	480b      	ldr	r0, [pc, #44]	; (803b8 <leftEncoderAISR+0x70>)
   8038c:	4b0b      	ldr	r3, [pc, #44]	; (803bc <leftEncoderAISR+0x74>)
   8038e:	4798      	blx	r3
   80390:	e7e3      	b.n	8035a <leftEncoderAISR+0x12>
		lAPulses--;
   80392:	4a03      	ldr	r2, [pc, #12]	; (803a0 <leftEncoderAISR+0x58>)
   80394:	6813      	ldr	r3, [r2, #0]
   80396:	3b01      	subs	r3, #1
   80398:	6013      	str	r3, [r2, #0]
   8039a:	e7de      	b.n	8035a <leftEncoderAISR+0x12>
   8039c:	000805d5 	.word	0x000805d5
   803a0:	20070c54 	.word	0x20070c54
   803a4:	20070c44 	.word	0x20070c44
   803a8:	20070c70 	.word	0x20070c70
   803ac:	00080a2d 	.word	0x00080a2d
   803b0:	20070c58 	.word	0x20070c58
   803b4:	20070c74 	.word	0x20070c74
   803b8:	00084228 	.word	0x00084228
   803bc:	000813f9 	.word	0x000813f9

000803c0 <leftEncoderBISR>:
	//printf("LeftPulseTime A: %i ms\n",lAPulseTime);
	
}

void leftEncoderBISR(){ //ISR for the left encoder B
   803c0:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   803c2:	4b14      	ldr	r3, [pc, #80]	; (80414 <leftEncoderBISR+0x54>)
   803c4:	4798      	blx	r3
   803c6:	2800      	cmp	r0, #0
   803c8:	dd13      	ble.n	803f2 <leftEncoderBISR+0x32>
		lBPulses++;
   803ca:	4a13      	ldr	r2, [pc, #76]	; (80418 <leftEncoderBISR+0x58>)
   803cc:	6813      	ldr	r3, [r2, #0]
   803ce:	3301      	adds	r3, #1
   803d0:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lBPrevTick = lBCurrentTick;
   803d2:	4c12      	ldr	r4, [pc, #72]	; (8041c <leftEncoderBISR+0x5c>)
   803d4:	4d12      	ldr	r5, [pc, #72]	; (80420 <leftEncoderBISR+0x60>)
   803d6:	682b      	ldr	r3, [r5, #0]
   803d8:	6023      	str	r3, [r4, #0]
	lBCurrentTick = xTaskGetTickCountFromISR();
   803da:	4b12      	ldr	r3, [pc, #72]	; (80424 <leftEncoderBISR+0x64>)
   803dc:	4798      	blx	r3
   803de:	6028      	str	r0, [r5, #0]
	lBPulseTime = (lBCurrentTick-lBPrevTick)*msPerTick;
   803e0:	6823      	ldr	r3, [r4, #0]
   803e2:	1ac0      	subs	r0, r0, r3
   803e4:	4b10      	ldr	r3, [pc, #64]	; (80428 <leftEncoderBISR+0x68>)
   803e6:	781b      	ldrb	r3, [r3, #0]
   803e8:	fb03 f000 	mul.w	r0, r3, r0
   803ec:	4b0f      	ldr	r3, [pc, #60]	; (8042c <leftEncoderBISR+0x6c>)
   803ee:	8018      	strh	r0, [r3, #0]
   803f0:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   803f2:	4b08      	ldr	r3, [pc, #32]	; (80414 <leftEncoderBISR+0x54>)
   803f4:	4798      	blx	r3
   803f6:	2800      	cmp	r0, #0
   803f8:	db07      	blt.n	8040a <leftEncoderBISR+0x4a>
	}else if(getSetLDirection()==0){
   803fa:	4b06      	ldr	r3, [pc, #24]	; (80414 <leftEncoderBISR+0x54>)
   803fc:	4798      	blx	r3
   803fe:	2800      	cmp	r0, #0
   80400:	d1e7      	bne.n	803d2 <leftEncoderBISR+0x12>
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80402:	480b      	ldr	r0, [pc, #44]	; (80430 <leftEncoderBISR+0x70>)
   80404:	4b0b      	ldr	r3, [pc, #44]	; (80434 <leftEncoderBISR+0x74>)
   80406:	4798      	blx	r3
   80408:	e7e3      	b.n	803d2 <leftEncoderBISR+0x12>
		lBPulses--;
   8040a:	4a03      	ldr	r2, [pc, #12]	; (80418 <leftEncoderBISR+0x58>)
   8040c:	6813      	ldr	r3, [r2, #0]
   8040e:	3b01      	subs	r3, #1
   80410:	6013      	str	r3, [r2, #0]
   80412:	e7de      	b.n	803d2 <leftEncoderBISR+0x12>
   80414:	000805d5 	.word	0x000805d5
   80418:	20070c64 	.word	0x20070c64
   8041c:	20070c38 	.word	0x20070c38
   80420:	20070c5c 	.word	0x20070c5c
   80424:	00080a2d 	.word	0x00080a2d
   80428:	20070c58 	.word	0x20070c58
   8042c:	20070c6c 	.word	0x20070c6c
   80430:	00084228 	.word	0x00084228
   80434:	000813f9 	.word	0x000813f9

00080438 <encoder_init>:
void encoder_init(){ //initialise the encoders
   80438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8043c:	b082      	sub	sp, #8
	lAPrevTick=0; 
   8043e:	2400      	movs	r4, #0
   80440:	4b39      	ldr	r3, [pc, #228]	; (80528 <encoder_init+0xf0>)
   80442:	601c      	str	r4, [r3, #0]
	rAPrevTick=0;
   80444:	4b39      	ldr	r3, [pc, #228]	; (8052c <encoder_init+0xf4>)
   80446:	601c      	str	r4, [r3, #0]
	lACurrentTick=0;
   80448:	4b39      	ldr	r3, [pc, #228]	; (80530 <encoder_init+0xf8>)
   8044a:	601c      	str	r4, [r3, #0]
	rACurrentTick=0;
   8044c:	4b39      	ldr	r3, [pc, #228]	; (80534 <encoder_init+0xfc>)
   8044e:	601c      	str	r4, [r3, #0]
	lBPrevTick=0;
   80450:	4b39      	ldr	r3, [pc, #228]	; (80538 <encoder_init+0x100>)
   80452:	601c      	str	r4, [r3, #0]
	rBPrevTick=0;
   80454:	4b39      	ldr	r3, [pc, #228]	; (8053c <encoder_init+0x104>)
   80456:	601c      	str	r4, [r3, #0]
	lBCurrentTick=0;
   80458:	4b39      	ldr	r3, [pc, #228]	; (80540 <encoder_init+0x108>)
   8045a:	601c      	str	r4, [r3, #0]
	rBCurrentTick=0;
   8045c:	4b39      	ldr	r3, [pc, #228]	; (80544 <encoder_init+0x10c>)
   8045e:	601c      	str	r4, [r3, #0]
	lAPulses=0;
   80460:	4b39      	ldr	r3, [pc, #228]	; (80548 <encoder_init+0x110>)
   80462:	601c      	str	r4, [r3, #0]
	lAPulseTime=0;
   80464:	4b39      	ldr	r3, [pc, #228]	; (8054c <encoder_init+0x114>)
   80466:	801c      	strh	r4, [r3, #0]
	rAPulses=0;
   80468:	4b39      	ldr	r3, [pc, #228]	; (80550 <encoder_init+0x118>)
   8046a:	601c      	str	r4, [r3, #0]
	rAPulseTime=0;
   8046c:	4b39      	ldr	r3, [pc, #228]	; (80554 <encoder_init+0x11c>)
   8046e:	801c      	strh	r4, [r3, #0]
	lBPulses=0;
   80470:	4b39      	ldr	r3, [pc, #228]	; (80558 <encoder_init+0x120>)
   80472:	601c      	str	r4, [r3, #0]
	lBPulseTime=0;
   80474:	4b39      	ldr	r3, [pc, #228]	; (8055c <encoder_init+0x124>)
   80476:	801c      	strh	r4, [r3, #0]
	rBPulses=0;
   80478:	4b39      	ldr	r3, [pc, #228]	; (80560 <encoder_init+0x128>)
   8047a:	601c      	str	r4, [r3, #0]
	rBPulseTime=0;
   8047c:	4b39      	ldr	r3, [pc, #228]	; (80564 <encoder_init+0x12c>)
   8047e:	801c      	strh	r4, [r3, #0]
	msPerTick=1; // Time for a tick is 1 ms on SAM3X8E CPU
   80480:	2201      	movs	r2, #1
   80482:	4b39      	ldr	r3, [pc, #228]	; (80568 <encoder_init+0x130>)
   80484:	701a      	strb	r2, [r3, #0]
	pmc_enable_periph_clk(ID_PIOC);
   80486:	200d      	movs	r0, #13
   80488:	4b38      	ldr	r3, [pc, #224]	; (8056c <encoder_init+0x134>)
   8048a:	4798      	blx	r3
pio_set_input(PIOC,pin7i,NULL);
   8048c:	4d38      	ldr	r5, [pc, #224]	; (80570 <encoder_init+0x138>)
   8048e:	4622      	mov	r2, r4
   80490:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80494:	4628      	mov	r0, r5
   80496:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80590 <encoder_init+0x158>
   8049a:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin7i,PIO_IT_RE_OR_HL,rightEncoderAISR);
   8049c:	4b35      	ldr	r3, [pc, #212]	; (80574 <encoder_init+0x13c>)
   8049e:	9300      	str	r3, [sp, #0]
   804a0:	2320      	movs	r3, #32
   804a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   804a6:	210d      	movs	r1, #13
   804a8:	4628      	mov	r0, r5
   804aa:	4f33      	ldr	r7, [pc, #204]	; (80578 <encoder_init+0x140>)
   804ac:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin7i); //digital pin 7
   804ae:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   804b2:	4628      	mov	r0, r5
   804b4:	4e31      	ldr	r6, [pc, #196]	; (8057c <encoder_init+0x144>)
   804b6:	47b0      	blx	r6
pio_set_input(PIOC,pin5i,NULL);
   804b8:	4622      	mov	r2, r4
   804ba:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   804be:	4628      	mov	r0, r5
   804c0:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin5i,PIO_IT_RE_OR_HL, leftEncoderAISR);
   804c2:	4b2f      	ldr	r3, [pc, #188]	; (80580 <encoder_init+0x148>)
   804c4:	9300      	str	r3, [sp, #0]
   804c6:	2320      	movs	r3, #32
   804c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   804cc:	210d      	movs	r1, #13
   804ce:	4628      	mov	r0, r5
   804d0:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin5i); //digital pin 5 
   804d2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   804d6:	4628      	mov	r0, r5
   804d8:	47b0      	blx	r6
pio_set_input(PIOC,pin33,NULL);
   804da:	4622      	mov	r2, r4
   804dc:	2102      	movs	r1, #2
   804de:	4628      	mov	r0, r5
   804e0:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin33,PIO_IT_RE_OR_HL, rightEncoderBISR);
   804e2:	4b28      	ldr	r3, [pc, #160]	; (80584 <encoder_init+0x14c>)
   804e4:	9300      	str	r3, [sp, #0]
   804e6:	2320      	movs	r3, #32
   804e8:	2202      	movs	r2, #2
   804ea:	210d      	movs	r1, #13
   804ec:	4628      	mov	r0, r5
   804ee:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin33); //digital pin 33 
   804f0:	2102      	movs	r1, #2
   804f2:	4628      	mov	r0, r5
   804f4:	47b0      	blx	r6
pio_set_input(PIOC,pin10i,NULL);
   804f6:	4622      	mov	r2, r4
   804f8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   804fc:	4628      	mov	r0, r5
   804fe:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin10i,PIO_IT_RE_OR_HL,leftEncoderBISR);
   80500:	4b21      	ldr	r3, [pc, #132]	; (80588 <encoder_init+0x150>)
   80502:	9300      	str	r3, [sp, #0]
   80504:	2320      	movs	r3, #32
   80506:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8050a:	210d      	movs	r1, #13
   8050c:	4628      	mov	r0, r5
   8050e:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin10i); //digital pin 10 
   80510:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   80514:	4628      	mov	r0, r5
   80516:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80518:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8051c:	4b1b      	ldr	r3, [pc, #108]	; (8058c <encoder_init+0x154>)
   8051e:	601a      	str	r2, [r3, #0]
}
   80520:	b002      	add	sp, #8
   80522:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80526:	bf00      	nop
   80528:	20070c44 	.word	0x20070c44
   8052c:	20070c60 	.word	0x20070c60
   80530:	20070c70 	.word	0x20070c70
   80534:	20070c50 	.word	0x20070c50
   80538:	20070c38 	.word	0x20070c38
   8053c:	20070c48 	.word	0x20070c48
   80540:	20070c5c 	.word	0x20070c5c
   80544:	20070c68 	.word	0x20070c68
   80548:	20070c54 	.word	0x20070c54
   8054c:	20070c74 	.word	0x20070c74
   80550:	20070c34 	.word	0x20070c34
   80554:	20070c4c 	.word	0x20070c4c
   80558:	20070c64 	.word	0x20070c64
   8055c:	20070c6c 	.word	0x20070c6c
   80560:	20070c40 	.word	0x20070c40
   80564:	20070c3c 	.word	0x20070c3c
   80568:	20070c58 	.word	0x20070c58
   8056c:	0008112d 	.word	0x0008112d
   80570:	400e1200 	.word	0x400e1200
   80574:	00080259 	.word	0x00080259
   80578:	00080f85 	.word	0x00080f85
   8057c:	00080dbd 	.word	0x00080dbd
   80580:	00080349 	.word	0x00080349
   80584:	000802d1 	.word	0x000802d1
   80588:	000803c1 	.word	0x000803c1
   8058c:	e000e100 	.word	0xe000e100
   80590:	00080d37 	.word	0x00080d37

00080594 <init_twi>:
/*
*  Setup the Arduino due card as the master on pin 20 and 21 (SDA, SCL) with a fixed transfer rate.
*  The function returns 1 if the master was successfully initialized else 0.
*/
uint8_t init_twi(void)
{
   80594:	b500      	push	{lr}
   80596:	b085      	sub	sp, #20
	twi_master_options_t opt;
	opt.speed = TWI_DEF_SPEED;
   80598:	4b09      	ldr	r3, [pc, #36]	; (805c0 <init_twi+0x2c>)
   8059a:	9302      	str	r3, [sp, #8]
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   8059c:	4b09      	ldr	r3, [pc, #36]	; (805c4 <init_twi+0x30>)
   8059e:	9301      	str	r3, [sp, #4]
	p_opt->smbus      = 0;
   805a0:	2300      	movs	r3, #0
   805a2:	f88d 300d 	strb.w	r3, [sp, #13]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805a6:	2017      	movs	r0, #23
   805a8:	4b07      	ldr	r3, [pc, #28]	; (805c8 <init_twi+0x34>)
   805aa:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   805ac:	a901      	add	r1, sp, #4
   805ae:	4807      	ldr	r0, [pc, #28]	; (805cc <init_twi+0x38>)
   805b0:	4b07      	ldr	r3, [pc, #28]	; (805d0 <init_twi+0x3c>)
   805b2:	4798      	blx	r3
	return twi_master_setup(TWI_PORT, &opt) == TWI_SUCCESS;
}
   805b4:	fab0 f080 	clz	r0, r0
   805b8:	0940      	lsrs	r0, r0, #5
   805ba:	b005      	add	sp, #20
   805bc:	f85d fb04 	ldr.w	pc, [sp], #4
   805c0:	000186a0 	.word	0x000186a0
   805c4:	0501bd00 	.word	0x0501bd00
   805c8:	0008112d 	.word	0x0008112d
   805cc:	40090000 	.word	0x40090000
   805d0:	00080219 	.word	0x00080219

000805d4 <getSetLDirection>:
}
/*Returns the value of latest direction set for the left motor*/
int8_t getSetLDirection(){
	//printf("Set Direction for Left Motor is: %i\n",lDirectionLatest);
	return lDirectionLatest;
}
   805d4:	4b01      	ldr	r3, [pc, #4]	; (805dc <getSetLDirection+0x8>)
   805d6:	f993 0000 	ldrsb.w	r0, [r3]
   805da:	4770      	bx	lr
   805dc:	20070afc 	.word	0x20070afc

000805e0 <getSetRDirection>:
/*Returns the value of latest direction set for the right motor*/
int8_t getSetRDirection(){
	//printf("Set Direction for Right Motor is: %i\n",rDirectionLatest);
	return rDirectionLatest;
   805e0:	4b01      	ldr	r3, [pc, #4]	; (805e8 <getSetRDirection+0x8>)
   805e2:	f993 0000 	ldrsb.w	r0, [r3]
   805e6:	4770      	bx	lr
   805e8:	20070afd 	.word	0x20070afd

000805ec <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   805ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   805f0:	b980      	cbnz	r0, 80614 <_read+0x28>
   805f2:	460c      	mov	r4, r1
   805f4:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   805f6:	2a00      	cmp	r2, #0
   805f8:	dd0f      	ble.n	8061a <_read+0x2e>
   805fa:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   805fc:	4e08      	ldr	r6, [pc, #32]	; (80620 <_read+0x34>)
   805fe:	4d09      	ldr	r5, [pc, #36]	; (80624 <_read+0x38>)
   80600:	6830      	ldr	r0, [r6, #0]
   80602:	4621      	mov	r1, r4
   80604:	682b      	ldr	r3, [r5, #0]
   80606:	4798      	blx	r3
		ptr++;
   80608:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   8060a:	42bc      	cmp	r4, r7
   8060c:	d1f8      	bne.n	80600 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   8060e:	4640      	mov	r0, r8
   80610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80614:	f04f 38ff 	mov.w	r8, #4294967295
   80618:	e7f9      	b.n	8060e <_read+0x22>
	for (; len > 0; --len) {
   8061a:	4680      	mov	r8, r0
   8061c:	e7f7      	b.n	8060e <_read+0x22>
   8061e:	bf00      	nop
   80620:	20070c80 	.word	0x20070c80
   80624:	20070c78 	.word	0x20070c78

00080628 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80628:	3801      	subs	r0, #1
   8062a:	2802      	cmp	r0, #2
   8062c:	d815      	bhi.n	8065a <_write+0x32>
{
   8062e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80632:	460e      	mov	r6, r1
   80634:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   80636:	b19a      	cbz	r2, 80660 <_write+0x38>
   80638:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8063a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80674 <_write+0x4c>
   8063e:	4f0c      	ldr	r7, [pc, #48]	; (80670 <_write+0x48>)
   80640:	f8d8 0000 	ldr.w	r0, [r8]
   80644:	f815 1b01 	ldrb.w	r1, [r5], #1
   80648:	683b      	ldr	r3, [r7, #0]
   8064a:	4798      	blx	r3
   8064c:	2800      	cmp	r0, #0
   8064e:	db0a      	blt.n	80666 <_write+0x3e>
   80650:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   80652:	3c01      	subs	r4, #1
   80654:	d1f4      	bne.n	80640 <_write+0x18>
   80656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8065a:	f04f 30ff 	mov.w	r0, #4294967295
   8065e:	4770      	bx	lr
	for (; len != 0; --len) {
   80660:	4610      	mov	r0, r2
   80662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80666:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8066a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8066e:	bf00      	nop
   80670:	20070c7c 	.word	0x20070c7c
   80674:	20070c80 	.word	0x20070c80

00080678 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80678:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8067a:	23ac      	movs	r3, #172	; 0xac
   8067c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8067e:	680b      	ldr	r3, [r1, #0]
   80680:	684a      	ldr	r2, [r1, #4]
   80682:	fbb3 f3f2 	udiv	r3, r3, r2
   80686:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80688:	1e5c      	subs	r4, r3, #1
   8068a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8068e:	4294      	cmp	r4, r2
   80690:	d80b      	bhi.n	806aa <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80692:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80694:	688b      	ldr	r3, [r1, #8]
   80696:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80698:	f240 2302 	movw	r3, #514	; 0x202
   8069c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   806a0:	2350      	movs	r3, #80	; 0x50
   806a2:	6003      	str	r3, [r0, #0]

	return 0;
   806a4:	2000      	movs	r0, #0
}
   806a6:	bc10      	pop	{r4}
   806a8:	4770      	bx	lr
		return 1;
   806aa:	2001      	movs	r0, #1
   806ac:	e7fb      	b.n	806a6 <uart_init+0x2e>

000806ae <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   806ae:	6943      	ldr	r3, [r0, #20]
   806b0:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   806b4:	bf1a      	itte	ne
   806b6:	61c1      	strne	r1, [r0, #28]
	return 0;
   806b8:	2000      	movne	r0, #0
		return 1;
   806ba:	2001      	moveq	r0, #1
}
   806bc:	4770      	bx	lr

000806be <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   806be:	6943      	ldr	r3, [r0, #20]
   806c0:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   806c4:	bf1d      	ittte	ne
   806c6:	6983      	ldrne	r3, [r0, #24]
   806c8:	700b      	strbne	r3, [r1, #0]
	return 0;
   806ca:	2000      	movne	r0, #0
		return 1;
   806cc:	2001      	moveq	r0, #1
}
   806ce:	4770      	bx	lr

000806d0 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   806d0:	6943      	ldr	r3, [r0, #20]
   806d2:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   806d6:	bf1d      	ittte	ne
   806d8:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   806dc:	61c1      	strne	r1, [r0, #28]
	return 0;
   806de:	2000      	movne	r0, #0
		return 1;
   806e0:	2001      	moveq	r0, #1
}
   806e2:	4770      	bx	lr

000806e4 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   806e4:	6943      	ldr	r3, [r0, #20]
   806e6:	f013 0f01 	tst.w	r3, #1
   806ea:	d005      	beq.n	806f8 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   806ec:	6983      	ldr	r3, [r0, #24]
   806ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
   806f2:	600b      	str	r3, [r1, #0]

	return 0;
   806f4:	2000      	movs	r0, #0
   806f6:	4770      	bx	lr
		return 1;
   806f8:	2001      	movs	r0, #1
}
   806fa:	4770      	bx	lr

000806fc <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   806fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   806fe:	b083      	sub	sp, #12
   80700:	4604      	mov	r4, r0
   80702:	460d      	mov	r5, r1
	uint32_t val = 0;
   80704:	2300      	movs	r3, #0
   80706:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80708:	4b20      	ldr	r3, [pc, #128]	; (8078c <usart_serial_getchar+0x90>)
   8070a:	4298      	cmp	r0, r3
   8070c:	d00d      	beq.n	8072a <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   8070e:	4b20      	ldr	r3, [pc, #128]	; (80790 <usart_serial_getchar+0x94>)
   80710:	4298      	cmp	r0, r3
   80712:	d012      	beq.n	8073a <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   80714:	4b1f      	ldr	r3, [pc, #124]	; (80794 <usart_serial_getchar+0x98>)
   80716:	4298      	cmp	r0, r3
   80718:	d019      	beq.n	8074e <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8071a:	4b1f      	ldr	r3, [pc, #124]	; (80798 <usart_serial_getchar+0x9c>)
   8071c:	429c      	cmp	r4, r3
   8071e:	d020      	beq.n	80762 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80720:	4b1e      	ldr	r3, [pc, #120]	; (8079c <usart_serial_getchar+0xa0>)
   80722:	429c      	cmp	r4, r3
   80724:	d027      	beq.n	80776 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   80726:	b003      	add	sp, #12
   80728:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   8072a:	461f      	mov	r7, r3
   8072c:	4e1c      	ldr	r6, [pc, #112]	; (807a0 <usart_serial_getchar+0xa4>)
   8072e:	4629      	mov	r1, r5
   80730:	4638      	mov	r0, r7
   80732:	47b0      	blx	r6
   80734:	2800      	cmp	r0, #0
   80736:	d1fa      	bne.n	8072e <usart_serial_getchar+0x32>
   80738:	e7ef      	b.n	8071a <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   8073a:	461f      	mov	r7, r3
   8073c:	4e19      	ldr	r6, [pc, #100]	; (807a4 <usart_serial_getchar+0xa8>)
   8073e:	a901      	add	r1, sp, #4
   80740:	4638      	mov	r0, r7
   80742:	47b0      	blx	r6
   80744:	2800      	cmp	r0, #0
   80746:	d1fa      	bne.n	8073e <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80748:	9b01      	ldr	r3, [sp, #4]
   8074a:	702b      	strb	r3, [r5, #0]
   8074c:	e7e8      	b.n	80720 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   8074e:	461e      	mov	r6, r3
   80750:	4c14      	ldr	r4, [pc, #80]	; (807a4 <usart_serial_getchar+0xa8>)
   80752:	a901      	add	r1, sp, #4
   80754:	4630      	mov	r0, r6
   80756:	47a0      	blx	r4
   80758:	2800      	cmp	r0, #0
   8075a:	d1fa      	bne.n	80752 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   8075c:	9b01      	ldr	r3, [sp, #4]
   8075e:	702b      	strb	r3, [r5, #0]
   80760:	e7e1      	b.n	80726 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80762:	461e      	mov	r6, r3
   80764:	4c0f      	ldr	r4, [pc, #60]	; (807a4 <usart_serial_getchar+0xa8>)
   80766:	a901      	add	r1, sp, #4
   80768:	4630      	mov	r0, r6
   8076a:	47a0      	blx	r4
   8076c:	2800      	cmp	r0, #0
   8076e:	d1fa      	bne.n	80766 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80770:	9b01      	ldr	r3, [sp, #4]
   80772:	702b      	strb	r3, [r5, #0]
   80774:	e7d7      	b.n	80726 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80776:	461e      	mov	r6, r3
   80778:	4c0a      	ldr	r4, [pc, #40]	; (807a4 <usart_serial_getchar+0xa8>)
   8077a:	a901      	add	r1, sp, #4
   8077c:	4630      	mov	r0, r6
   8077e:	47a0      	blx	r4
   80780:	2800      	cmp	r0, #0
   80782:	d1fa      	bne.n	8077a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80784:	9b01      	ldr	r3, [sp, #4]
   80786:	702b      	strb	r3, [r5, #0]
}
   80788:	e7cd      	b.n	80726 <usart_serial_getchar+0x2a>
   8078a:	bf00      	nop
   8078c:	400e0800 	.word	0x400e0800
   80790:	40098000 	.word	0x40098000
   80794:	4009c000 	.word	0x4009c000
   80798:	400a0000 	.word	0x400a0000
   8079c:	400a4000 	.word	0x400a4000
   807a0:	000806bf 	.word	0x000806bf
   807a4:	000806e5 	.word	0x000806e5

000807a8 <usart_serial_putchar>:
{
   807a8:	b570      	push	{r4, r5, r6, lr}
   807aa:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   807ac:	4b1e      	ldr	r3, [pc, #120]	; (80828 <usart_serial_putchar+0x80>)
   807ae:	4298      	cmp	r0, r3
   807b0:	d00d      	beq.n	807ce <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   807b2:	4b1e      	ldr	r3, [pc, #120]	; (8082c <usart_serial_putchar+0x84>)
   807b4:	4298      	cmp	r0, r3
   807b6:	d013      	beq.n	807e0 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   807b8:	4b1d      	ldr	r3, [pc, #116]	; (80830 <usart_serial_putchar+0x88>)
   807ba:	4298      	cmp	r0, r3
   807bc:	d019      	beq.n	807f2 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   807be:	4b1d      	ldr	r3, [pc, #116]	; (80834 <usart_serial_putchar+0x8c>)
   807c0:	4298      	cmp	r0, r3
   807c2:	d01f      	beq.n	80804 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   807c4:	4b1c      	ldr	r3, [pc, #112]	; (80838 <usart_serial_putchar+0x90>)
   807c6:	4298      	cmp	r0, r3
   807c8:	d025      	beq.n	80816 <usart_serial_putchar+0x6e>
	return 0;
   807ca:	2000      	movs	r0, #0
}
   807cc:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   807ce:	461e      	mov	r6, r3
   807d0:	4d1a      	ldr	r5, [pc, #104]	; (8083c <usart_serial_putchar+0x94>)
   807d2:	4621      	mov	r1, r4
   807d4:	4630      	mov	r0, r6
   807d6:	47a8      	blx	r5
   807d8:	2800      	cmp	r0, #0
   807da:	d1fa      	bne.n	807d2 <usart_serial_putchar+0x2a>
		return 1;
   807dc:	2001      	movs	r0, #1
   807de:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   807e0:	461e      	mov	r6, r3
   807e2:	4d17      	ldr	r5, [pc, #92]	; (80840 <usart_serial_putchar+0x98>)
   807e4:	4621      	mov	r1, r4
   807e6:	4630      	mov	r0, r6
   807e8:	47a8      	blx	r5
   807ea:	2800      	cmp	r0, #0
   807ec:	d1fa      	bne.n	807e4 <usart_serial_putchar+0x3c>
		return 1;
   807ee:	2001      	movs	r0, #1
   807f0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   807f2:	461e      	mov	r6, r3
   807f4:	4d12      	ldr	r5, [pc, #72]	; (80840 <usart_serial_putchar+0x98>)
   807f6:	4621      	mov	r1, r4
   807f8:	4630      	mov	r0, r6
   807fa:	47a8      	blx	r5
   807fc:	2800      	cmp	r0, #0
   807fe:	d1fa      	bne.n	807f6 <usart_serial_putchar+0x4e>
		return 1;
   80800:	2001      	movs	r0, #1
   80802:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80804:	461e      	mov	r6, r3
   80806:	4d0e      	ldr	r5, [pc, #56]	; (80840 <usart_serial_putchar+0x98>)
   80808:	4621      	mov	r1, r4
   8080a:	4630      	mov	r0, r6
   8080c:	47a8      	blx	r5
   8080e:	2800      	cmp	r0, #0
   80810:	d1fa      	bne.n	80808 <usart_serial_putchar+0x60>
		return 1;
   80812:	2001      	movs	r0, #1
   80814:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80816:	461e      	mov	r6, r3
   80818:	4d09      	ldr	r5, [pc, #36]	; (80840 <usart_serial_putchar+0x98>)
   8081a:	4621      	mov	r1, r4
   8081c:	4630      	mov	r0, r6
   8081e:	47a8      	blx	r5
   80820:	2800      	cmp	r0, #0
   80822:	d1fa      	bne.n	8081a <usart_serial_putchar+0x72>
		return 1;
   80824:	2001      	movs	r0, #1
   80826:	bd70      	pop	{r4, r5, r6, pc}
   80828:	400e0800 	.word	0x400e0800
   8082c:	40098000 	.word	0x40098000
   80830:	4009c000 	.word	0x4009c000
   80834:	400a0000 	.word	0x400a0000
   80838:	400a4000 	.word	0x400a4000
   8083c:	000806af 	.word	0x000806af
   80840:	000806d1 	.word	0x000806d1

00080844 <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   80844:	b510      	push	{r4, lr}
	sysclk_init();
   80846:	4b17      	ldr	r3, [pc, #92]	; (808a4 <misc_init+0x60>)
   80848:	4798      	blx	r3
	board_init();
   8084a:	4b17      	ldr	r3, [pc, #92]	; (808a8 <misc_init+0x64>)
   8084c:	4798      	blx	r3
   8084e:	200b      	movs	r0, #11
   80850:	4c16      	ldr	r4, [pc, #88]	; (808ac <misc_init+0x68>)
   80852:	47a0      	blx	r4
   80854:	200c      	movs	r0, #12
   80856:	47a0      	blx	r4
   80858:	200d      	movs	r0, #13
   8085a:	47a0      	blx	r4
   8085c:	200e      	movs	r0, #14
   8085e:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80860:	4b13      	ldr	r3, [pc, #76]	; (808b0 <misc_init+0x6c>)
   80862:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80866:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80868:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8086c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80870:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80872:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80876:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8087a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8087c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80880:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80884:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80886:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8088a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   8088e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80892:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80894:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80898:	2204      	movs	r2, #4
   8089a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8089c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//ioport_set_pin_level(pin13, LOW); 
	//ioport_set_pin_level(pin12, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   808a0:	2000      	movs	r0, #0
   808a2:	bd10      	pop	{r4, pc}
   808a4:	00080c15 	.word	0x00080c15
   808a8:	00080c79 	.word	0x00080c79
   808ac:	0008112d 	.word	0x0008112d
   808b0:	400e1000 	.word	0x400e1000

000808b4 <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   808b4:	b530      	push	{r4, r5, lr}
   808b6:	b085      	sub	sp, #20
   808b8:	2008      	movs	r0, #8
   808ba:	4d15      	ldr	r5, [pc, #84]	; (80910 <console_init+0x5c>)
   808bc:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   808be:	4c15      	ldr	r4, [pc, #84]	; (80914 <console_init+0x60>)
   808c0:	4b15      	ldr	r3, [pc, #84]	; (80918 <console_init+0x64>)
   808c2:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   808c4:	4a15      	ldr	r2, [pc, #84]	; (8091c <console_init+0x68>)
   808c6:	4b16      	ldr	r3, [pc, #88]	; (80920 <console_init+0x6c>)
   808c8:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   808ca:	4a16      	ldr	r2, [pc, #88]	; (80924 <console_init+0x70>)
   808cc:	4b16      	ldr	r3, [pc, #88]	; (80928 <console_init+0x74>)
   808ce:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   808d0:	4b16      	ldr	r3, [pc, #88]	; (8092c <console_init+0x78>)
   808d2:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   808d4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   808d8:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   808da:	f44f 6300 	mov.w	r3, #2048	; 0x800
   808de:	9303      	str	r3, [sp, #12]
   808e0:	2008      	movs	r0, #8
   808e2:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   808e4:	a901      	add	r1, sp, #4
   808e6:	4620      	mov	r0, r4
   808e8:	4b11      	ldr	r3, [pc, #68]	; (80930 <console_init+0x7c>)
   808ea:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   808ec:	4d11      	ldr	r5, [pc, #68]	; (80934 <console_init+0x80>)
   808ee:	682b      	ldr	r3, [r5, #0]
   808f0:	2100      	movs	r1, #0
   808f2:	6898      	ldr	r0, [r3, #8]
   808f4:	4c10      	ldr	r4, [pc, #64]	; (80938 <console_init+0x84>)
   808f6:	47a0      	blx	r4
	setbuf(stdin, NULL);
   808f8:	682b      	ldr	r3, [r5, #0]
   808fa:	2100      	movs	r1, #0
   808fc:	6858      	ldr	r0, [r3, #4]
   808fe:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80900:	480e      	ldr	r0, [pc, #56]	; (8093c <console_init+0x88>)
   80902:	4c0f      	ldr	r4, [pc, #60]	; (80940 <console_init+0x8c>)
   80904:	47a0      	blx	r4
	printf("=============\n");
   80906:	480f      	ldr	r0, [pc, #60]	; (80944 <console_init+0x90>)
   80908:	47a0      	blx	r4
	return 0;
}
   8090a:	2000      	movs	r0, #0
   8090c:	b005      	add	sp, #20
   8090e:	bd30      	pop	{r4, r5, pc}
   80910:	0008112d 	.word	0x0008112d
   80914:	400e0800 	.word	0x400e0800
   80918:	20070c80 	.word	0x20070c80
   8091c:	000807a9 	.word	0x000807a9
   80920:	20070c7c 	.word	0x20070c7c
   80924:	000806fd 	.word	0x000806fd
   80928:	20070c78 	.word	0x20070c78
   8092c:	0501bd00 	.word	0x0501bd00
   80930:	00080679 	.word	0x00080679
   80934:	20070134 	.word	0x20070134
   80938:	000815a9 	.word	0x000815a9
   8093c:	0008432c 	.word	0x0008432c
   80940:	000813f9 	.word	0x000813f9
   80944:	0008433c 	.word	0x0008433c

00080948 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80948:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   8094a:	685a      	ldr	r2, [r3, #4]
   8094c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   8094e:	6842      	ldr	r2, [r0, #4]
   80950:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80952:	685a      	ldr	r2, [r3, #4]
   80954:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80956:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80958:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8095a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8095c:	6803      	ldr	r3, [r0, #0]
   8095e:	3301      	adds	r3, #1
   80960:	6003      	str	r3, [r0, #0]
   80962:	4770      	bx	lr

00080964 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80964:	6843      	ldr	r3, [r0, #4]
   80966:	6882      	ldr	r2, [r0, #8]
   80968:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8096a:	6883      	ldr	r3, [r0, #8]
   8096c:	6842      	ldr	r2, [r0, #4]
   8096e:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80970:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80972:	685a      	ldr	r2, [r3, #4]
   80974:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80976:	bf04      	itt	eq
   80978:	6882      	ldreq	r2, [r0, #8]
   8097a:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   8097c:	2200      	movs	r2, #0
   8097e:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80980:	681a      	ldr	r2, [r3, #0]
   80982:	3a01      	subs	r2, #1
   80984:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80986:	6818      	ldr	r0, [r3, #0]
}
   80988:	4770      	bx	lr
	...

0008098c <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   8098c:	4b06      	ldr	r3, [pc, #24]	; (809a8 <pxCurrentTCBConst2>)
   8098e:	6819      	ldr	r1, [r3, #0]
   80990:	6808      	ldr	r0, [r1, #0]
   80992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80996:	f380 8809 	msr	PSP, r0
   8099a:	f04f 0000 	mov.w	r0, #0
   8099e:	f380 8811 	msr	BASEPRI, r0
   809a2:	f04e 0e0d 	orr.w	lr, lr, #13
   809a6:	4770      	bx	lr

000809a8 <pxCurrentTCBConst2>:
   809a8:	20070b00 	.word	0x20070b00

000809ac <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   809ac:	f3ef 8011 	mrs	r0, BASEPRI
   809b0:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   809b4:	f381 8811 	msr	BASEPRI, r1
   809b8:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   809ba:	2000      	movs	r0, #0

000809bc <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   809bc:	f380 8811 	msr	BASEPRI, r0
   809c0:	4770      	bx	lr
	...

000809c4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   809c4:	f3ef 8009 	mrs	r0, PSP
   809c8:	4b0c      	ldr	r3, [pc, #48]	; (809fc <pxCurrentTCBConst>)
   809ca:	681a      	ldr	r2, [r3, #0]
   809cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   809d0:	6010      	str	r0, [r2, #0]
   809d2:	e92d 4008 	stmdb	sp!, {r3, lr}
   809d6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   809da:	f380 8811 	msr	BASEPRI, r0
   809de:	f000 f8c9 	bl	80b74 <vTaskSwitchContext>
   809e2:	f04f 0000 	mov.w	r0, #0
   809e6:	f380 8811 	msr	BASEPRI, r0
   809ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   809ee:	6819      	ldr	r1, [r3, #0]
   809f0:	6808      	ldr	r0, [r1, #0]
   809f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   809f6:	f380 8809 	msr	PSP, r0
   809fa:	4770      	bx	lr

000809fc <pxCurrentTCBConst>:
   809fc:	20070b00 	.word	0x20070b00

00080a00 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80a00:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80a06:	4b05      	ldr	r3, [pc, #20]	; (80a1c <SysTick_Handler+0x1c>)
   80a08:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80a0a:	4b05      	ldr	r3, [pc, #20]	; (80a20 <SysTick_Handler+0x20>)
   80a0c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80a0e:	4b05      	ldr	r3, [pc, #20]	; (80a24 <SysTick_Handler+0x24>)
   80a10:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80a12:	2000      	movs	r0, #0
   80a14:	4b04      	ldr	r3, [pc, #16]	; (80a28 <SysTick_Handler+0x28>)
   80a16:	4798      	blx	r3
   80a18:	bd08      	pop	{r3, pc}
   80a1a:	bf00      	nop
   80a1c:	e000ed04 	.word	0xe000ed04
   80a20:	000809ad 	.word	0x000809ad
   80a24:	00080a4d 	.word	0x00080a4d
   80a28:	000809bd 	.word	0x000809bd

00080a2c <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   80a2c:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80a2e:	4b04      	ldr	r3, [pc, #16]	; (80a40 <xTaskGetTickCountFromISR+0x14>)
   80a30:	4798      	blx	r3
	xReturn = xTickCount;
   80a32:	4b04      	ldr	r3, [pc, #16]	; (80a44 <xTaskGetTickCountFromISR+0x18>)
   80a34:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80a36:	4b04      	ldr	r3, [pc, #16]	; (80a48 <xTaskGetTickCountFromISR+0x1c>)
   80a38:	4798      	blx	r3

	return xReturn;
}
   80a3a:	4620      	mov	r0, r4
   80a3c:	bd10      	pop	{r4, pc}
   80a3e:	bf00      	nop
   80a40:	000809ad 	.word	0x000809ad
   80a44:	20070b84 	.word	0x20070b84
   80a48:	000809bd 	.word	0x000809bd

00080a4c <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80a4c:	4b3d      	ldr	r3, [pc, #244]	; (80b44 <vTaskIncrementTick+0xf8>)
   80a4e:	681b      	ldr	r3, [r3, #0]
   80a50:	2b00      	cmp	r3, #0
   80a52:	d16f      	bne.n	80b34 <vTaskIncrementTick+0xe8>
{
   80a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80a58:	4b3b      	ldr	r3, [pc, #236]	; (80b48 <vTaskIncrementTick+0xfc>)
   80a5a:	681a      	ldr	r2, [r3, #0]
   80a5c:	3201      	adds	r2, #1
   80a5e:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80a60:	681b      	ldr	r3, [r3, #0]
   80a62:	b9ab      	cbnz	r3, 80a90 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80a64:	4b39      	ldr	r3, [pc, #228]	; (80b4c <vTaskIncrementTick+0x100>)
   80a66:	681b      	ldr	r3, [r3, #0]
   80a68:	681b      	ldr	r3, [r3, #0]
   80a6a:	2b00      	cmp	r3, #0
   80a6c:	d128      	bne.n	80ac0 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80a6e:	4b37      	ldr	r3, [pc, #220]	; (80b4c <vTaskIncrementTick+0x100>)
   80a70:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80a72:	4a37      	ldr	r2, [pc, #220]	; (80b50 <vTaskIncrementTick+0x104>)
   80a74:	6810      	ldr	r0, [r2, #0]
   80a76:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80a78:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80a7a:	4936      	ldr	r1, [pc, #216]	; (80b54 <vTaskIncrementTick+0x108>)
   80a7c:	680a      	ldr	r2, [r1, #0]
   80a7e:	3201      	adds	r2, #1
   80a80:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80a82:	681b      	ldr	r3, [r3, #0]
   80a84:	681b      	ldr	r3, [r3, #0]
   80a86:	b9fb      	cbnz	r3, 80ac8 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80a88:	f04f 32ff 	mov.w	r2, #4294967295
   80a8c:	4b32      	ldr	r3, [pc, #200]	; (80b58 <vTaskIncrementTick+0x10c>)
   80a8e:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80a90:	4b2d      	ldr	r3, [pc, #180]	; (80b48 <vTaskIncrementTick+0xfc>)
   80a92:	681a      	ldr	r2, [r3, #0]
   80a94:	4b30      	ldr	r3, [pc, #192]	; (80b58 <vTaskIncrementTick+0x10c>)
   80a96:	681b      	ldr	r3, [r3, #0]
   80a98:	429a      	cmp	r2, r3
   80a9a:	d350      	bcc.n	80b3e <vTaskIncrementTick+0xf2>
   80a9c:	4b2b      	ldr	r3, [pc, #172]	; (80b4c <vTaskIncrementTick+0x100>)
   80a9e:	681b      	ldr	r3, [r3, #0]
   80aa0:	681b      	ldr	r3, [r3, #0]
   80aa2:	b1cb      	cbz	r3, 80ad8 <vTaskIncrementTick+0x8c>
   80aa4:	4b29      	ldr	r3, [pc, #164]	; (80b4c <vTaskIncrementTick+0x100>)
   80aa6:	681b      	ldr	r3, [r3, #0]
   80aa8:	68db      	ldr	r3, [r3, #12]
   80aaa:	68dc      	ldr	r4, [r3, #12]
   80aac:	6863      	ldr	r3, [r4, #4]
   80aae:	4a26      	ldr	r2, [pc, #152]	; (80b48 <vTaskIncrementTick+0xfc>)
   80ab0:	6812      	ldr	r2, [r2, #0]
   80ab2:	4293      	cmp	r3, r2
   80ab4:	d816      	bhi.n	80ae4 <vTaskIncrementTick+0x98>
   80ab6:	4e29      	ldr	r6, [pc, #164]	; (80b5c <vTaskIncrementTick+0x110>)
   80ab8:	4f29      	ldr	r7, [pc, #164]	; (80b60 <vTaskIncrementTick+0x114>)
   80aba:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80b70 <vTaskIncrementTick+0x124>
   80abe:	e02f      	b.n	80b20 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80ac0:	4b28      	ldr	r3, [pc, #160]	; (80b64 <vTaskIncrementTick+0x118>)
   80ac2:	4798      	blx	r3
   80ac4:	bf00      	nop
   80ac6:	e7fd      	b.n	80ac4 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80ac8:	4b20      	ldr	r3, [pc, #128]	; (80b4c <vTaskIncrementTick+0x100>)
   80aca:	681b      	ldr	r3, [r3, #0]
   80acc:	68db      	ldr	r3, [r3, #12]
   80ace:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80ad0:	685a      	ldr	r2, [r3, #4]
   80ad2:	4b21      	ldr	r3, [pc, #132]	; (80b58 <vTaskIncrementTick+0x10c>)
   80ad4:	601a      	str	r2, [r3, #0]
   80ad6:	e7db      	b.n	80a90 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80ad8:	f04f 32ff 	mov.w	r2, #4294967295
   80adc:	4b1e      	ldr	r3, [pc, #120]	; (80b58 <vTaskIncrementTick+0x10c>)
   80ade:	601a      	str	r2, [r3, #0]
   80ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ae4:	4a1c      	ldr	r2, [pc, #112]	; (80b58 <vTaskIncrementTick+0x10c>)
   80ae6:	6013      	str	r3, [r2, #0]
   80ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80aec:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80aee:	683b      	ldr	r3, [r7, #0]
   80af0:	4298      	cmp	r0, r3
   80af2:	bf88      	it	hi
   80af4:	6038      	strhi	r0, [r7, #0]
   80af6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80afa:	4629      	mov	r1, r5
   80afc:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80b00:	4b19      	ldr	r3, [pc, #100]	; (80b68 <vTaskIncrementTick+0x11c>)
   80b02:	4798      	blx	r3
   80b04:	4b11      	ldr	r3, [pc, #68]	; (80b4c <vTaskIncrementTick+0x100>)
   80b06:	681b      	ldr	r3, [r3, #0]
   80b08:	681b      	ldr	r3, [r3, #0]
   80b0a:	2b00      	cmp	r3, #0
   80b0c:	d0e4      	beq.n	80ad8 <vTaskIncrementTick+0x8c>
   80b0e:	4b0f      	ldr	r3, [pc, #60]	; (80b4c <vTaskIncrementTick+0x100>)
   80b10:	681b      	ldr	r3, [r3, #0]
   80b12:	68db      	ldr	r3, [r3, #12]
   80b14:	68dc      	ldr	r4, [r3, #12]
   80b16:	6863      	ldr	r3, [r4, #4]
   80b18:	4a0b      	ldr	r2, [pc, #44]	; (80b48 <vTaskIncrementTick+0xfc>)
   80b1a:	6812      	ldr	r2, [r2, #0]
   80b1c:	4293      	cmp	r3, r2
   80b1e:	d8e1      	bhi.n	80ae4 <vTaskIncrementTick+0x98>
   80b20:	1d25      	adds	r5, r4, #4
   80b22:	4628      	mov	r0, r5
   80b24:	47b0      	blx	r6
   80b26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80b28:	2b00      	cmp	r3, #0
   80b2a:	d0df      	beq.n	80aec <vTaskIncrementTick+0xa0>
   80b2c:	f104 0018 	add.w	r0, r4, #24
   80b30:	47b0      	blx	r6
   80b32:	e7db      	b.n	80aec <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   80b34:	4a0d      	ldr	r2, [pc, #52]	; (80b6c <vTaskIncrementTick+0x120>)
   80b36:	6813      	ldr	r3, [r2, #0]
   80b38:	3301      	adds	r3, #1
   80b3a:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80b3c:	4770      	bx	lr
   80b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b42:	bf00      	nop
   80b44:	20070b74 	.word	0x20070b74
   80b48:	20070b84 	.word	0x20070b84
   80b4c:	20070b04 	.word	0x20070b04
   80b50:	20070b08 	.word	0x20070b08
   80b54:	20070b80 	.word	0x20070b80
   80b58:	2007012c 	.word	0x2007012c
   80b5c:	00080965 	.word	0x00080965
   80b60:	20070b78 	.word	0x20070b78
   80b64:	000809ad 	.word	0x000809ad
   80b68:	00080949 	.word	0x00080949
   80b6c:	20070b70 	.word	0x20070b70
   80b70:	20070b0c 	.word	0x20070b0c

00080b74 <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80b74:	4b21      	ldr	r3, [pc, #132]	; (80bfc <vTaskSwitchContext+0x88>)
   80b76:	681b      	ldr	r3, [r3, #0]
   80b78:	b9eb      	cbnz	r3, 80bb6 <vTaskSwitchContext+0x42>
{
   80b7a:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80b7c:	4b20      	ldr	r3, [pc, #128]	; (80c00 <vTaskSwitchContext+0x8c>)
   80b7e:	681b      	ldr	r3, [r3, #0]
   80b80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80b84:	009b      	lsls	r3, r3, #2
   80b86:	4a1f      	ldr	r2, [pc, #124]	; (80c04 <vTaskSwitchContext+0x90>)
   80b88:	58d3      	ldr	r3, [r2, r3]
   80b8a:	b9c3      	cbnz	r3, 80bbe <vTaskSwitchContext+0x4a>
   80b8c:	4b1c      	ldr	r3, [pc, #112]	; (80c00 <vTaskSwitchContext+0x8c>)
   80b8e:	681b      	ldr	r3, [r3, #0]
   80b90:	b16b      	cbz	r3, 80bae <vTaskSwitchContext+0x3a>
   80b92:	4a1b      	ldr	r2, [pc, #108]	; (80c00 <vTaskSwitchContext+0x8c>)
   80b94:	491b      	ldr	r1, [pc, #108]	; (80c04 <vTaskSwitchContext+0x90>)
   80b96:	6813      	ldr	r3, [r2, #0]
   80b98:	3b01      	subs	r3, #1
   80b9a:	6013      	str	r3, [r2, #0]
   80b9c:	6813      	ldr	r3, [r2, #0]
   80b9e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80ba2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   80ba6:	b953      	cbnz	r3, 80bbe <vTaskSwitchContext+0x4a>
   80ba8:	6813      	ldr	r3, [r2, #0]
   80baa:	2b00      	cmp	r3, #0
   80bac:	d1f3      	bne.n	80b96 <vTaskSwitchContext+0x22>
   80bae:	4b16      	ldr	r3, [pc, #88]	; (80c08 <vTaskSwitchContext+0x94>)
   80bb0:	4798      	blx	r3
   80bb2:	bf00      	nop
   80bb4:	e7fd      	b.n	80bb2 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   80bb6:	2201      	movs	r2, #1
   80bb8:	4b14      	ldr	r3, [pc, #80]	; (80c0c <vTaskSwitchContext+0x98>)
   80bba:	601a      	str	r2, [r3, #0]
   80bbc:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80bbe:	4b10      	ldr	r3, [pc, #64]	; (80c00 <vTaskSwitchContext+0x8c>)
   80bc0:	681b      	ldr	r3, [r3, #0]
   80bc2:	4a10      	ldr	r2, [pc, #64]	; (80c04 <vTaskSwitchContext+0x90>)
   80bc4:	0099      	lsls	r1, r3, #2
   80bc6:	18c8      	adds	r0, r1, r3
   80bc8:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80bcc:	6844      	ldr	r4, [r0, #4]
   80bce:	6864      	ldr	r4, [r4, #4]
   80bd0:	6044      	str	r4, [r0, #4]
   80bd2:	4419      	add	r1, r3
   80bd4:	4602      	mov	r2, r0
   80bd6:	3208      	adds	r2, #8
   80bd8:	4294      	cmp	r4, r2
   80bda:	d009      	beq.n	80bf0 <vTaskSwitchContext+0x7c>
   80bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80be0:	4a08      	ldr	r2, [pc, #32]	; (80c04 <vTaskSwitchContext+0x90>)
   80be2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80be6:	685b      	ldr	r3, [r3, #4]
   80be8:	68da      	ldr	r2, [r3, #12]
   80bea:	4b09      	ldr	r3, [pc, #36]	; (80c10 <vTaskSwitchContext+0x9c>)
   80bec:	601a      	str	r2, [r3, #0]
   80bee:	bd10      	pop	{r4, pc}
   80bf0:	6860      	ldr	r0, [r4, #4]
   80bf2:	4a04      	ldr	r2, [pc, #16]	; (80c04 <vTaskSwitchContext+0x90>)
   80bf4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80bf8:	6050      	str	r0, [r2, #4]
   80bfa:	e7ef      	b.n	80bdc <vTaskSwitchContext+0x68>
   80bfc:	20070b74 	.word	0x20070b74
   80c00:	20070b78 	.word	0x20070b78
   80c04:	20070b0c 	.word	0x20070b0c
   80c08:	000809ad 	.word	0x000809ad
   80c0c:	20070b7c 	.word	0x20070b7c
   80c10:	20070b00 	.word	0x20070b00

00080c14 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80c14:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80c16:	480e      	ldr	r0, [pc, #56]	; (80c50 <sysclk_init+0x3c>)
   80c18:	4b0e      	ldr	r3, [pc, #56]	; (80c54 <sysclk_init+0x40>)
   80c1a:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80c1c:	213e      	movs	r1, #62	; 0x3e
   80c1e:	2000      	movs	r0, #0
   80c20:	4b0d      	ldr	r3, [pc, #52]	; (80c58 <sysclk_init+0x44>)
   80c22:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80c24:	4c0d      	ldr	r4, [pc, #52]	; (80c5c <sysclk_init+0x48>)
   80c26:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80c28:	2800      	cmp	r0, #0
   80c2a:	d0fc      	beq.n	80c26 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80c2c:	4b0c      	ldr	r3, [pc, #48]	; (80c60 <sysclk_init+0x4c>)
   80c2e:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80c30:	4a0c      	ldr	r2, [pc, #48]	; (80c64 <sysclk_init+0x50>)
   80c32:	4b0d      	ldr	r3, [pc, #52]	; (80c68 <sysclk_init+0x54>)
   80c34:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80c36:	4c0d      	ldr	r4, [pc, #52]	; (80c6c <sysclk_init+0x58>)
   80c38:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80c3a:	2800      	cmp	r0, #0
   80c3c:	d0fc      	beq.n	80c38 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80c3e:	2010      	movs	r0, #16
   80c40:	4b0b      	ldr	r3, [pc, #44]	; (80c70 <sysclk_init+0x5c>)
   80c42:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80c44:	4b0b      	ldr	r3, [pc, #44]	; (80c74 <sysclk_init+0x60>)
   80c46:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80c48:	4801      	ldr	r0, [pc, #4]	; (80c50 <sysclk_init+0x3c>)
   80c4a:	4b02      	ldr	r3, [pc, #8]	; (80c54 <sysclk_init+0x40>)
   80c4c:	4798      	blx	r3
   80c4e:	bd10      	pop	{r4, pc}
   80c50:	0501bd00 	.word	0x0501bd00
   80c54:	200700a5 	.word	0x200700a5
   80c58:	000810a9 	.word	0x000810a9
   80c5c:	000810fd 	.word	0x000810fd
   80c60:	0008110d 	.word	0x0008110d
   80c64:	200d3f01 	.word	0x200d3f01
   80c68:	400e0600 	.word	0x400e0600
   80c6c:	0008111d 	.word	0x0008111d
   80c70:	00081045 	.word	0x00081045
   80c74:	0008121d 	.word	0x0008121d

00080c78 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80c78:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80c7a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80c7e:	4b16      	ldr	r3, [pc, #88]	; (80cd8 <board_init+0x60>)
   80c80:	605a      	str	r2, [r3, #4]
   80c82:	200b      	movs	r0, #11
   80c84:	4c15      	ldr	r4, [pc, #84]	; (80cdc <board_init+0x64>)
   80c86:	47a0      	blx	r4
   80c88:	200c      	movs	r0, #12
   80c8a:	47a0      	blx	r4
   80c8c:	200d      	movs	r0, #13
   80c8e:	47a0      	blx	r4
   80c90:	200e      	movs	r0, #14
   80c92:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80c94:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80c98:	203b      	movs	r0, #59	; 0x3b
   80c9a:	4c11      	ldr	r4, [pc, #68]	; (80ce0 <board_init+0x68>)
   80c9c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80c9e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80ca2:	2055      	movs	r0, #85	; 0x55
   80ca4:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80ca6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80caa:	2056      	movs	r0, #86	; 0x56
   80cac:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80cae:	490d      	ldr	r1, [pc, #52]	; (80ce4 <board_init+0x6c>)
   80cb0:	2068      	movs	r0, #104	; 0x68
   80cb2:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80cb4:	490c      	ldr	r1, [pc, #48]	; (80ce8 <board_init+0x70>)
   80cb6:	205c      	movs	r0, #92	; 0x5c
   80cb8:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80cba:	4a0c      	ldr	r2, [pc, #48]	; (80cec <board_init+0x74>)
   80cbc:	f44f 7140 	mov.w	r1, #768	; 0x300
   80cc0:	480b      	ldr	r0, [pc, #44]	; (80cf0 <board_init+0x78>)
   80cc2:	4b0c      	ldr	r3, [pc, #48]	; (80cf4 <board_init+0x7c>)
   80cc4:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80cc6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cca:	202b      	movs	r0, #43	; 0x2b
   80ccc:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80cce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80cd2:	202a      	movs	r0, #42	; 0x2a
   80cd4:	47a0      	blx	r4
   80cd6:	bd10      	pop	{r4, pc}
   80cd8:	400e1a50 	.word	0x400e1a50
   80cdc:	0008112d 	.word	0x0008112d
   80ce0:	00080dc9 	.word	0x00080dc9
   80ce4:	28000079 	.word	0x28000079
   80ce8:	28000001 	.word	0x28000001
   80cec:	08000001 	.word	0x08000001
   80cf0:	400e0e00 	.word	0x400e0e00
   80cf4:	00080e99 	.word	0x00080e99

00080cf8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80cf8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80cfa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80cfe:	d016      	beq.n	80d2e <pio_set_peripheral+0x36>
   80d00:	d80b      	bhi.n	80d1a <pio_set_peripheral+0x22>
   80d02:	b149      	cbz	r1, 80d18 <pio_set_peripheral+0x20>
   80d04:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80d08:	d105      	bne.n	80d16 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80d0a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80d0c:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80d0e:	400b      	ands	r3, r1
   80d10:	ea23 0302 	bic.w	r3, r3, r2
   80d14:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80d16:	6042      	str	r2, [r0, #4]
   80d18:	4770      	bx	lr
	switch (ul_type) {
   80d1a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80d1e:	d0fb      	beq.n	80d18 <pio_set_peripheral+0x20>
   80d20:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80d24:	d0f8      	beq.n	80d18 <pio_set_peripheral+0x20>
   80d26:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80d2a:	d1f4      	bne.n	80d16 <pio_set_peripheral+0x1e>
   80d2c:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80d2e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80d30:	4313      	orrs	r3, r2
   80d32:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80d34:	e7ef      	b.n	80d16 <pio_set_peripheral+0x1e>

00080d36 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80d36:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80d38:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80d3c:	bf14      	ite	ne
   80d3e:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80d40:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80d42:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80d46:	bf14      	ite	ne
   80d48:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80d4a:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80d4c:	f012 0f02 	tst.w	r2, #2
   80d50:	d107      	bne.n	80d62 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80d52:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80d56:	bf18      	it	ne
   80d58:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80d5c:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80d5e:	6001      	str	r1, [r0, #0]
   80d60:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80d62:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80d66:	e7f9      	b.n	80d5c <pio_set_input+0x26>

00080d68 <pio_set_output>:
{
   80d68:	b410      	push	{r4}
   80d6a:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80d6c:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80d6e:	b944      	cbnz	r4, 80d82 <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80d70:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80d72:	b143      	cbz	r3, 80d86 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80d74:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80d76:	b942      	cbnz	r2, 80d8a <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80d78:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80d7a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80d7c:	6001      	str	r1, [r0, #0]
}
   80d7e:	bc10      	pop	{r4}
   80d80:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80d82:	6641      	str	r1, [r0, #100]	; 0x64
   80d84:	e7f5      	b.n	80d72 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80d86:	6541      	str	r1, [r0, #84]	; 0x54
   80d88:	e7f5      	b.n	80d76 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80d8a:	6301      	str	r1, [r0, #48]	; 0x30
   80d8c:	e7f5      	b.n	80d7a <pio_set_output+0x12>

00080d8e <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80d8e:	f012 0f10 	tst.w	r2, #16
   80d92:	d010      	beq.n	80db6 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80d94:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80d98:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80d9c:	bf14      	ite	ne
   80d9e:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80da2:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80da6:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80daa:	bf14      	ite	ne
   80dac:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80db0:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80db4:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80db6:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80dba:	4770      	bx	lr

00080dbc <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80dbc:	6401      	str	r1, [r0, #64]	; 0x40
   80dbe:	4770      	bx	lr

00080dc0 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80dc0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80dc2:	4770      	bx	lr

00080dc4 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80dc4:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80dc6:	4770      	bx	lr

00080dc8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80dc8:	b570      	push	{r4, r5, r6, lr}
   80dca:	b082      	sub	sp, #8
   80dcc:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80dce:	0943      	lsrs	r3, r0, #5
   80dd0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80dd4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80dd8:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80dda:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80dde:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80de2:	d031      	beq.n	80e48 <pio_configure_pin+0x80>
   80de4:	d816      	bhi.n	80e14 <pio_configure_pin+0x4c>
   80de6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80dea:	d01b      	beq.n	80e24 <pio_configure_pin+0x5c>
   80dec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80df0:	d116      	bne.n	80e20 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80df2:	f000 001f 	and.w	r0, r0, #31
   80df6:	2601      	movs	r6, #1
   80df8:	4086      	lsls	r6, r0
   80dfa:	4632      	mov	r2, r6
   80dfc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80e00:	4620      	mov	r0, r4
   80e02:	4b22      	ldr	r3, [pc, #136]	; (80e8c <pio_configure_pin+0xc4>)
   80e04:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80e06:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80e0a:	bf14      	ite	ne
   80e0c:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80e0e:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80e10:	2001      	movs	r0, #1
   80e12:	e017      	b.n	80e44 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80e14:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80e18:	d021      	beq.n	80e5e <pio_configure_pin+0x96>
   80e1a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80e1e:	d01e      	beq.n	80e5e <pio_configure_pin+0x96>
		return 0;
   80e20:	2000      	movs	r0, #0
   80e22:	e00f      	b.n	80e44 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80e24:	f000 001f 	and.w	r0, r0, #31
   80e28:	2601      	movs	r6, #1
   80e2a:	4086      	lsls	r6, r0
   80e2c:	4632      	mov	r2, r6
   80e2e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80e32:	4620      	mov	r0, r4
   80e34:	4b15      	ldr	r3, [pc, #84]	; (80e8c <pio_configure_pin+0xc4>)
   80e36:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80e38:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80e3c:	bf14      	ite	ne
   80e3e:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80e40:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80e42:	2001      	movs	r0, #1
}
   80e44:	b002      	add	sp, #8
   80e46:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80e48:	f000 011f 	and.w	r1, r0, #31
   80e4c:	2601      	movs	r6, #1
   80e4e:	462a      	mov	r2, r5
   80e50:	fa06 f101 	lsl.w	r1, r6, r1
   80e54:	4620      	mov	r0, r4
   80e56:	4b0e      	ldr	r3, [pc, #56]	; (80e90 <pio_configure_pin+0xc8>)
   80e58:	4798      	blx	r3
	return 1;
   80e5a:	4630      	mov	r0, r6
		break;
   80e5c:	e7f2      	b.n	80e44 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80e5e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80e62:	f000 011f 	and.w	r1, r0, #31
   80e66:	2601      	movs	r6, #1
   80e68:	ea05 0306 	and.w	r3, r5, r6
   80e6c:	9300      	str	r3, [sp, #0]
   80e6e:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80e72:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80e76:	bf14      	ite	ne
   80e78:	2200      	movne	r2, #0
   80e7a:	2201      	moveq	r2, #1
   80e7c:	fa06 f101 	lsl.w	r1, r6, r1
   80e80:	4620      	mov	r0, r4
   80e82:	4c04      	ldr	r4, [pc, #16]	; (80e94 <pio_configure_pin+0xcc>)
   80e84:	47a0      	blx	r4
	return 1;
   80e86:	4630      	mov	r0, r6
		break;
   80e88:	e7dc      	b.n	80e44 <pio_configure_pin+0x7c>
   80e8a:	bf00      	nop
   80e8c:	00080cf9 	.word	0x00080cf9
   80e90:	00080d37 	.word	0x00080d37
   80e94:	00080d69 	.word	0x00080d69

00080e98 <pio_configure_pin_group>:
{
   80e98:	b570      	push	{r4, r5, r6, lr}
   80e9a:	b082      	sub	sp, #8
   80e9c:	4605      	mov	r5, r0
   80e9e:	460e      	mov	r6, r1
   80ea0:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80ea2:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80ea6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80eaa:	d027      	beq.n	80efc <pio_configure_pin_group+0x64>
   80eac:	d811      	bhi.n	80ed2 <pio_configure_pin_group+0x3a>
   80eae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80eb2:	d016      	beq.n	80ee2 <pio_configure_pin_group+0x4a>
   80eb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80eb8:	d111      	bne.n	80ede <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80eba:	460a      	mov	r2, r1
   80ebc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80ec0:	4b19      	ldr	r3, [pc, #100]	; (80f28 <pio_configure_pin_group+0x90>)
   80ec2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ec4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80ec8:	bf14      	ite	ne
   80eca:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ecc:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80ece:	2001      	movs	r0, #1
   80ed0:	e012      	b.n	80ef8 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80ed2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ed6:	d015      	beq.n	80f04 <pio_configure_pin_group+0x6c>
   80ed8:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80edc:	d012      	beq.n	80f04 <pio_configure_pin_group+0x6c>
		return 0;
   80ede:	2000      	movs	r0, #0
   80ee0:	e00a      	b.n	80ef8 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80ee2:	460a      	mov	r2, r1
   80ee4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80ee8:	4b0f      	ldr	r3, [pc, #60]	; (80f28 <pio_configure_pin_group+0x90>)
   80eea:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80eec:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80ef0:	bf14      	ite	ne
   80ef2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ef4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80ef6:	2001      	movs	r0, #1
}
   80ef8:	b002      	add	sp, #8
   80efa:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80efc:	4b0b      	ldr	r3, [pc, #44]	; (80f2c <pio_configure_pin_group+0x94>)
   80efe:	4798      	blx	r3
	return 1;
   80f00:	2001      	movs	r0, #1
		break;
   80f02:	e7f9      	b.n	80ef8 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f04:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80f08:	f004 0301 	and.w	r3, r4, #1
   80f0c:	9300      	str	r3, [sp, #0]
   80f0e:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80f12:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80f16:	bf14      	ite	ne
   80f18:	2200      	movne	r2, #0
   80f1a:	2201      	moveq	r2, #1
   80f1c:	4631      	mov	r1, r6
   80f1e:	4628      	mov	r0, r5
   80f20:	4c03      	ldr	r4, [pc, #12]	; (80f30 <pio_configure_pin_group+0x98>)
   80f22:	47a0      	blx	r4
	return 1;
   80f24:	2001      	movs	r0, #1
		break;
   80f26:	e7e7      	b.n	80ef8 <pio_configure_pin_group+0x60>
   80f28:	00080cf9 	.word	0x00080cf9
   80f2c:	00080d37 	.word	0x00080d37
   80f30:	00080d69 	.word	0x00080d69

00080f34 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80f38:	4604      	mov	r4, r0
   80f3a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80f3c:	4b0e      	ldr	r3, [pc, #56]	; (80f78 <pio_handler_process+0x44>)
   80f3e:	4798      	blx	r3
   80f40:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80f42:	4620      	mov	r0, r4
   80f44:	4b0d      	ldr	r3, [pc, #52]	; (80f7c <pio_handler_process+0x48>)
   80f46:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80f48:	4005      	ands	r5, r0
   80f4a:	d013      	beq.n	80f74 <pio_handler_process+0x40>
   80f4c:	4c0c      	ldr	r4, [pc, #48]	; (80f80 <pio_handler_process+0x4c>)
   80f4e:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80f52:	e003      	b.n	80f5c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80f54:	42b4      	cmp	r4, r6
   80f56:	d00d      	beq.n	80f74 <pio_handler_process+0x40>
   80f58:	3410      	adds	r4, #16
		while (status != 0) {
   80f5a:	b15d      	cbz	r5, 80f74 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80f5c:	6820      	ldr	r0, [r4, #0]
   80f5e:	4540      	cmp	r0, r8
   80f60:	d1f8      	bne.n	80f54 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80f62:	6861      	ldr	r1, [r4, #4]
   80f64:	4229      	tst	r1, r5
   80f66:	d0f5      	beq.n	80f54 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80f68:	68e3      	ldr	r3, [r4, #12]
   80f6a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80f6c:	6863      	ldr	r3, [r4, #4]
   80f6e:	ea25 0503 	bic.w	r5, r5, r3
   80f72:	e7ef      	b.n	80f54 <pio_handler_process+0x20>
   80f74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f78:	00080dc1 	.word	0x00080dc1
   80f7c:	00080dc5 	.word	0x00080dc5
   80f80:	20070b88 	.word	0x20070b88

00080f84 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80f86:	4c18      	ldr	r4, [pc, #96]	; (80fe8 <pio_handler_set+0x64>)
   80f88:	6826      	ldr	r6, [r4, #0]
   80f8a:	2e06      	cmp	r6, #6
   80f8c:	d829      	bhi.n	80fe2 <pio_handler_set+0x5e>
   80f8e:	f04f 0c00 	mov.w	ip, #0
   80f92:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80f94:	4f15      	ldr	r7, [pc, #84]	; (80fec <pio_handler_set+0x68>)
   80f96:	e004      	b.n	80fa2 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80f98:	3401      	adds	r4, #1
   80f9a:	b2e4      	uxtb	r4, r4
   80f9c:	46a4      	mov	ip, r4
   80f9e:	42a6      	cmp	r6, r4
   80fa0:	d309      	bcc.n	80fb6 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80fa2:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80fa4:	0125      	lsls	r5, r4, #4
   80fa6:	597d      	ldr	r5, [r7, r5]
   80fa8:	428d      	cmp	r5, r1
   80faa:	d1f5      	bne.n	80f98 <pio_handler_set+0x14>
   80fac:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80fb0:	686d      	ldr	r5, [r5, #4]
   80fb2:	4295      	cmp	r5, r2
   80fb4:	d1f0      	bne.n	80f98 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80fb6:	4d0d      	ldr	r5, [pc, #52]	; (80fec <pio_handler_set+0x68>)
   80fb8:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80fbc:	eb05 040e 	add.w	r4, r5, lr
   80fc0:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80fc4:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80fc6:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80fc8:	9906      	ldr	r1, [sp, #24]
   80fca:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80fcc:	3601      	adds	r6, #1
   80fce:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80fd0:	bf04      	itt	eq
   80fd2:	4905      	ldreq	r1, [pc, #20]	; (80fe8 <pio_handler_set+0x64>)
   80fd4:	600e      	streq	r6, [r1, #0]
   80fd6:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80fd8:	461a      	mov	r2, r3
   80fda:	4b05      	ldr	r3, [pc, #20]	; (80ff0 <pio_handler_set+0x6c>)
   80fdc:	4798      	blx	r3

	return 0;
   80fde:	2000      	movs	r0, #0
   80fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80fe2:	2001      	movs	r0, #1
}
   80fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80fe6:	bf00      	nop
   80fe8:	20070bf8 	.word	0x20070bf8
   80fec:	20070b88 	.word	0x20070b88
   80ff0:	00080d8f 	.word	0x00080d8f

00080ff4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80ff4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80ff6:	210b      	movs	r1, #11
   80ff8:	4801      	ldr	r0, [pc, #4]	; (81000 <PIOA_Handler+0xc>)
   80ffa:	4b02      	ldr	r3, [pc, #8]	; (81004 <PIOA_Handler+0x10>)
   80ffc:	4798      	blx	r3
   80ffe:	bd08      	pop	{r3, pc}
   81000:	400e0e00 	.word	0x400e0e00
   81004:	00080f35 	.word	0x00080f35

00081008 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81008:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   8100a:	210c      	movs	r1, #12
   8100c:	4801      	ldr	r0, [pc, #4]	; (81014 <PIOB_Handler+0xc>)
   8100e:	4b02      	ldr	r3, [pc, #8]	; (81018 <PIOB_Handler+0x10>)
   81010:	4798      	blx	r3
   81012:	bd08      	pop	{r3, pc}
   81014:	400e1000 	.word	0x400e1000
   81018:	00080f35 	.word	0x00080f35

0008101c <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   8101c:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   8101e:	210d      	movs	r1, #13
   81020:	4801      	ldr	r0, [pc, #4]	; (81028 <PIOC_Handler+0xc>)
   81022:	4b02      	ldr	r3, [pc, #8]	; (8102c <PIOC_Handler+0x10>)
   81024:	4798      	blx	r3
   81026:	bd08      	pop	{r3, pc}
   81028:	400e1200 	.word	0x400e1200
   8102c:	00080f35 	.word	0x00080f35

00081030 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81030:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   81032:	210e      	movs	r1, #14
   81034:	4801      	ldr	r0, [pc, #4]	; (8103c <PIOD_Handler+0xc>)
   81036:	4b02      	ldr	r3, [pc, #8]	; (81040 <PIOD_Handler+0x10>)
   81038:	4798      	blx	r3
   8103a:	bd08      	pop	{r3, pc}
   8103c:	400e1400 	.word	0x400e1400
   81040:	00080f35 	.word	0x00080f35

00081044 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   81044:	4a17      	ldr	r2, [pc, #92]	; (810a4 <pmc_switch_mck_to_pllack+0x60>)
   81046:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8104c:	4318      	orrs	r0, r3
   8104e:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81050:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81052:	f013 0f08 	tst.w	r3, #8
   81056:	d10a      	bne.n	8106e <pmc_switch_mck_to_pllack+0x2a>
   81058:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8105c:	4911      	ldr	r1, [pc, #68]	; (810a4 <pmc_switch_mck_to_pllack+0x60>)
   8105e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81060:	f012 0f08 	tst.w	r2, #8
   81064:	d103      	bne.n	8106e <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81066:	3b01      	subs	r3, #1
   81068:	d1f9      	bne.n	8105e <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   8106a:	2001      	movs	r0, #1
   8106c:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8106e:	4a0d      	ldr	r2, [pc, #52]	; (810a4 <pmc_switch_mck_to_pllack+0x60>)
   81070:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81072:	f023 0303 	bic.w	r3, r3, #3
   81076:	f043 0302 	orr.w	r3, r3, #2
   8107a:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8107c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8107e:	f013 0f08 	tst.w	r3, #8
   81082:	d10a      	bne.n	8109a <pmc_switch_mck_to_pllack+0x56>
   81084:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81088:	4906      	ldr	r1, [pc, #24]	; (810a4 <pmc_switch_mck_to_pllack+0x60>)
   8108a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8108c:	f012 0f08 	tst.w	r2, #8
   81090:	d105      	bne.n	8109e <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81092:	3b01      	subs	r3, #1
   81094:	d1f9      	bne.n	8108a <pmc_switch_mck_to_pllack+0x46>
			return 1;
   81096:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81098:	4770      	bx	lr
	return 0;
   8109a:	2000      	movs	r0, #0
   8109c:	4770      	bx	lr
   8109e:	2000      	movs	r0, #0
   810a0:	4770      	bx	lr
   810a2:	bf00      	nop
   810a4:	400e0600 	.word	0x400e0600

000810a8 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   810a8:	b9c8      	cbnz	r0, 810de <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   810aa:	4a11      	ldr	r2, [pc, #68]	; (810f0 <pmc_switch_mainck_to_xtal+0x48>)
   810ac:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   810ae:	0209      	lsls	r1, r1, #8
   810b0:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   810b2:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   810b6:	f023 0303 	bic.w	r3, r3, #3
   810ba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   810be:	f043 0301 	orr.w	r3, r3, #1
   810c2:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   810c4:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   810c6:	6e93      	ldr	r3, [r2, #104]	; 0x68
   810c8:	f013 0f01 	tst.w	r3, #1
   810cc:	d0fb      	beq.n	810c6 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   810ce:	4a08      	ldr	r2, [pc, #32]	; (810f0 <pmc_switch_mainck_to_xtal+0x48>)
   810d0:	6a13      	ldr	r3, [r2, #32]
   810d2:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   810d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   810da:	6213      	str	r3, [r2, #32]
   810dc:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   810de:	4904      	ldr	r1, [pc, #16]	; (810f0 <pmc_switch_mainck_to_xtal+0x48>)
   810e0:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   810e2:	4a04      	ldr	r2, [pc, #16]	; (810f4 <pmc_switch_mainck_to_xtal+0x4c>)
   810e4:	401a      	ands	r2, r3
   810e6:	4b04      	ldr	r3, [pc, #16]	; (810f8 <pmc_switch_mainck_to_xtal+0x50>)
   810e8:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   810ea:	620b      	str	r3, [r1, #32]
   810ec:	4770      	bx	lr
   810ee:	bf00      	nop
   810f0:	400e0600 	.word	0x400e0600
   810f4:	fec8fffc 	.word	0xfec8fffc
   810f8:	01370002 	.word	0x01370002

000810fc <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   810fc:	4b02      	ldr	r3, [pc, #8]	; (81108 <pmc_osc_is_ready_mainck+0xc>)
   810fe:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81100:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   81104:	4770      	bx	lr
   81106:	bf00      	nop
   81108:	400e0600 	.word	0x400e0600

0008110c <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   8110c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81110:	4b01      	ldr	r3, [pc, #4]	; (81118 <pmc_disable_pllack+0xc>)
   81112:	629a      	str	r2, [r3, #40]	; 0x28
   81114:	4770      	bx	lr
   81116:	bf00      	nop
   81118:	400e0600 	.word	0x400e0600

0008111c <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   8111c:	4b02      	ldr	r3, [pc, #8]	; (81128 <pmc_is_locked_pllack+0xc>)
   8111e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81120:	f000 0002 	and.w	r0, r0, #2
   81124:	4770      	bx	lr
   81126:	bf00      	nop
   81128:	400e0600 	.word	0x400e0600

0008112c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8112c:	282c      	cmp	r0, #44	; 0x2c
   8112e:	d81e      	bhi.n	8116e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   81130:	281f      	cmp	r0, #31
   81132:	d80c      	bhi.n	8114e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   81134:	4b11      	ldr	r3, [pc, #68]	; (8117c <pmc_enable_periph_clk+0x50>)
   81136:	699a      	ldr	r2, [r3, #24]
   81138:	2301      	movs	r3, #1
   8113a:	4083      	lsls	r3, r0
   8113c:	4393      	bics	r3, r2
   8113e:	d018      	beq.n	81172 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   81140:	2301      	movs	r3, #1
   81142:	fa03 f000 	lsl.w	r0, r3, r0
   81146:	4b0d      	ldr	r3, [pc, #52]	; (8117c <pmc_enable_periph_clk+0x50>)
   81148:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8114a:	2000      	movs	r0, #0
   8114c:	4770      	bx	lr
		ul_id -= 32;
   8114e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81150:	4b0a      	ldr	r3, [pc, #40]	; (8117c <pmc_enable_periph_clk+0x50>)
   81152:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   81156:	2301      	movs	r3, #1
   81158:	4083      	lsls	r3, r0
   8115a:	4393      	bics	r3, r2
   8115c:	d00b      	beq.n	81176 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8115e:	2301      	movs	r3, #1
   81160:	fa03 f000 	lsl.w	r0, r3, r0
   81164:	4b05      	ldr	r3, [pc, #20]	; (8117c <pmc_enable_periph_clk+0x50>)
   81166:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   8116a:	2000      	movs	r0, #0
   8116c:	4770      	bx	lr
		return 1;
   8116e:	2001      	movs	r0, #1
   81170:	4770      	bx	lr
	return 0;
   81172:	2000      	movs	r0, #0
   81174:	4770      	bx	lr
   81176:	2000      	movs	r0, #0
}
   81178:	4770      	bx	lr
   8117a:	bf00      	nop
   8117c:	400e0600 	.word	0x400e0600

00081180 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81180:	e7fe      	b.n	81180 <Dummy_Handler>
	...

00081184 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81184:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81186:	4b1c      	ldr	r3, [pc, #112]	; (811f8 <Reset_Handler+0x74>)
   81188:	4a1c      	ldr	r2, [pc, #112]	; (811fc <Reset_Handler+0x78>)
   8118a:	429a      	cmp	r2, r3
   8118c:	d010      	beq.n	811b0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8118e:	4b1c      	ldr	r3, [pc, #112]	; (81200 <Reset_Handler+0x7c>)
   81190:	4a19      	ldr	r2, [pc, #100]	; (811f8 <Reset_Handler+0x74>)
   81192:	429a      	cmp	r2, r3
   81194:	d20c      	bcs.n	811b0 <Reset_Handler+0x2c>
   81196:	3b01      	subs	r3, #1
   81198:	1a9b      	subs	r3, r3, r2
   8119a:	f023 0303 	bic.w	r3, r3, #3
   8119e:	3304      	adds	r3, #4
   811a0:	4413      	add	r3, r2
   811a2:	4916      	ldr	r1, [pc, #88]	; (811fc <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   811a4:	f851 0b04 	ldr.w	r0, [r1], #4
   811a8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   811ac:	429a      	cmp	r2, r3
   811ae:	d1f9      	bne.n	811a4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   811b0:	4b14      	ldr	r3, [pc, #80]	; (81204 <Reset_Handler+0x80>)
   811b2:	4a15      	ldr	r2, [pc, #84]	; (81208 <Reset_Handler+0x84>)
   811b4:	429a      	cmp	r2, r3
   811b6:	d20a      	bcs.n	811ce <Reset_Handler+0x4a>
   811b8:	3b01      	subs	r3, #1
   811ba:	1a9b      	subs	r3, r3, r2
   811bc:	f023 0303 	bic.w	r3, r3, #3
   811c0:	3304      	adds	r3, #4
   811c2:	4413      	add	r3, r2
		*pDest++ = 0;
   811c4:	2100      	movs	r1, #0
   811c6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   811ca:	4293      	cmp	r3, r2
   811cc:	d1fb      	bne.n	811c6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   811ce:	4b0f      	ldr	r3, [pc, #60]	; (8120c <Reset_Handler+0x88>)
   811d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   811d4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   811d8:	490d      	ldr	r1, [pc, #52]	; (81210 <Reset_Handler+0x8c>)
   811da:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   811dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   811e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   811e4:	d203      	bcs.n	811ee <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   811e6:	688b      	ldr	r3, [r1, #8]
   811e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   811ec:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   811ee:	4b09      	ldr	r3, [pc, #36]	; (81214 <Reset_Handler+0x90>)
   811f0:	4798      	blx	r3

	/* Branch to main function */
	main();
   811f2:	4b09      	ldr	r3, [pc, #36]	; (81218 <Reset_Handler+0x94>)
   811f4:	4798      	blx	r3
   811f6:	e7fe      	b.n	811f6 <Reset_Handler+0x72>
   811f8:	20070000 	.word	0x20070000
   811fc:	000844e0 	.word	0x000844e0
   81200:	20070ae0 	.word	0x20070ae0
   81204:	20070cac 	.word	0x20070cac
   81208:	20070ae0 	.word	0x20070ae0
   8120c:	00080000 	.word	0x00080000
   81210:	e000ed00 	.word	0xe000ed00
   81214:	000813a9 	.word	0x000813a9
   81218:	00081385 	.word	0x00081385

0008121c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8121c:	4b3d      	ldr	r3, [pc, #244]	; (81314 <SystemCoreClockUpdate+0xf8>)
   8121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81220:	f003 0303 	and.w	r3, r3, #3
   81224:	2b03      	cmp	r3, #3
   81226:	d80e      	bhi.n	81246 <SystemCoreClockUpdate+0x2a>
   81228:	e8df f003 	tbb	[pc, r3]
   8122c:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81230:	4b39      	ldr	r3, [pc, #228]	; (81318 <SystemCoreClockUpdate+0xfc>)
   81232:	695b      	ldr	r3, [r3, #20]
   81234:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81238:	bf14      	ite	ne
   8123a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8123e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   81242:	4b36      	ldr	r3, [pc, #216]	; (8131c <SystemCoreClockUpdate+0x100>)
   81244:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   81246:	4b33      	ldr	r3, [pc, #204]	; (81314 <SystemCoreClockUpdate+0xf8>)
   81248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8124a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8124e:	2b70      	cmp	r3, #112	; 0x70
   81250:	d057      	beq.n	81302 <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   81252:	4b30      	ldr	r3, [pc, #192]	; (81314 <SystemCoreClockUpdate+0xf8>)
   81254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81256:	4931      	ldr	r1, [pc, #196]	; (8131c <SystemCoreClockUpdate+0x100>)
   81258:	f3c2 1202 	ubfx	r2, r2, #4, #3
   8125c:	680b      	ldr	r3, [r1, #0]
   8125e:	40d3      	lsrs	r3, r2
   81260:	600b      	str	r3, [r1, #0]
   81262:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81264:	4b2b      	ldr	r3, [pc, #172]	; (81314 <SystemCoreClockUpdate+0xf8>)
   81266:	6a1b      	ldr	r3, [r3, #32]
   81268:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8126c:	d003      	beq.n	81276 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8126e:	4a2c      	ldr	r2, [pc, #176]	; (81320 <SystemCoreClockUpdate+0x104>)
   81270:	4b2a      	ldr	r3, [pc, #168]	; (8131c <SystemCoreClockUpdate+0x100>)
   81272:	601a      	str	r2, [r3, #0]
   81274:	e7e7      	b.n	81246 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81276:	4a2b      	ldr	r2, [pc, #172]	; (81324 <SystemCoreClockUpdate+0x108>)
   81278:	4b28      	ldr	r3, [pc, #160]	; (8131c <SystemCoreClockUpdate+0x100>)
   8127a:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8127c:	4b25      	ldr	r3, [pc, #148]	; (81314 <SystemCoreClockUpdate+0xf8>)
   8127e:	6a1b      	ldr	r3, [r3, #32]
   81280:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81284:	2b10      	cmp	r3, #16
   81286:	d005      	beq.n	81294 <SystemCoreClockUpdate+0x78>
   81288:	2b20      	cmp	r3, #32
   8128a:	d1dc      	bne.n	81246 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   8128c:	4a24      	ldr	r2, [pc, #144]	; (81320 <SystemCoreClockUpdate+0x104>)
   8128e:	4b23      	ldr	r3, [pc, #140]	; (8131c <SystemCoreClockUpdate+0x100>)
   81290:	601a      	str	r2, [r3, #0]
				break;
   81292:	e7d8      	b.n	81246 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   81294:	4a24      	ldr	r2, [pc, #144]	; (81328 <SystemCoreClockUpdate+0x10c>)
   81296:	4b21      	ldr	r3, [pc, #132]	; (8131c <SystemCoreClockUpdate+0x100>)
   81298:	601a      	str	r2, [r3, #0]
				break;
   8129a:	e7d4      	b.n	81246 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8129c:	4b1d      	ldr	r3, [pc, #116]	; (81314 <SystemCoreClockUpdate+0xf8>)
   8129e:	6a1b      	ldr	r3, [r3, #32]
   812a0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   812a4:	d00c      	beq.n	812c0 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   812a6:	4a1e      	ldr	r2, [pc, #120]	; (81320 <SystemCoreClockUpdate+0x104>)
   812a8:	4b1c      	ldr	r3, [pc, #112]	; (8131c <SystemCoreClockUpdate+0x100>)
   812aa:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   812ac:	4b19      	ldr	r3, [pc, #100]	; (81314 <SystemCoreClockUpdate+0xf8>)
   812ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   812b0:	f003 0303 	and.w	r3, r3, #3
   812b4:	2b02      	cmp	r3, #2
   812b6:	d016      	beq.n	812e6 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   812b8:	4a1c      	ldr	r2, [pc, #112]	; (8132c <SystemCoreClockUpdate+0x110>)
   812ba:	4b18      	ldr	r3, [pc, #96]	; (8131c <SystemCoreClockUpdate+0x100>)
   812bc:	601a      	str	r2, [r3, #0]
   812be:	e7c2      	b.n	81246 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   812c0:	4a18      	ldr	r2, [pc, #96]	; (81324 <SystemCoreClockUpdate+0x108>)
   812c2:	4b16      	ldr	r3, [pc, #88]	; (8131c <SystemCoreClockUpdate+0x100>)
   812c4:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   812c6:	4b13      	ldr	r3, [pc, #76]	; (81314 <SystemCoreClockUpdate+0xf8>)
   812c8:	6a1b      	ldr	r3, [r3, #32]
   812ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
   812ce:	2b10      	cmp	r3, #16
   812d0:	d005      	beq.n	812de <SystemCoreClockUpdate+0xc2>
   812d2:	2b20      	cmp	r3, #32
   812d4:	d1ea      	bne.n	812ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   812d6:	4a12      	ldr	r2, [pc, #72]	; (81320 <SystemCoreClockUpdate+0x104>)
   812d8:	4b10      	ldr	r3, [pc, #64]	; (8131c <SystemCoreClockUpdate+0x100>)
   812da:	601a      	str	r2, [r3, #0]
				break;
   812dc:	e7e6      	b.n	812ac <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   812de:	4a12      	ldr	r2, [pc, #72]	; (81328 <SystemCoreClockUpdate+0x10c>)
   812e0:	4b0e      	ldr	r3, [pc, #56]	; (8131c <SystemCoreClockUpdate+0x100>)
   812e2:	601a      	str	r2, [r3, #0]
				break;
   812e4:	e7e2      	b.n	812ac <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   812e6:	4a0b      	ldr	r2, [pc, #44]	; (81314 <SystemCoreClockUpdate+0xf8>)
   812e8:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   812ea:	6a92      	ldr	r2, [r2, #40]	; 0x28
   812ec:	480b      	ldr	r0, [pc, #44]	; (8131c <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   812ee:	f3c1 410a 	ubfx	r1, r1, #16, #11
   812f2:	6803      	ldr	r3, [r0, #0]
   812f4:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   812f8:	b2d2      	uxtb	r2, r2
   812fa:	fbb3 f3f2 	udiv	r3, r3, r2
   812fe:	6003      	str	r3, [r0, #0]
   81300:	e7a1      	b.n	81246 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   81302:	4a06      	ldr	r2, [pc, #24]	; (8131c <SystemCoreClockUpdate+0x100>)
   81304:	6813      	ldr	r3, [r2, #0]
   81306:	490a      	ldr	r1, [pc, #40]	; (81330 <SystemCoreClockUpdate+0x114>)
   81308:	fba1 1303 	umull	r1, r3, r1, r3
   8130c:	085b      	lsrs	r3, r3, #1
   8130e:	6013      	str	r3, [r2, #0]
   81310:	4770      	bx	lr
   81312:	bf00      	nop
   81314:	400e0600 	.word	0x400e0600
   81318:	400e1a10 	.word	0x400e1a10
   8131c:	20070130 	.word	0x20070130
   81320:	00b71b00 	.word	0x00b71b00
   81324:	003d0900 	.word	0x003d0900
   81328:	007a1200 	.word	0x007a1200
   8132c:	0e4e1c00 	.word	0x0e4e1c00
   81330:	aaaaaaab 	.word	0xaaaaaaab

00081334 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   81334:	4b0a      	ldr	r3, [pc, #40]	; (81360 <_sbrk+0x2c>)
   81336:	681b      	ldr	r3, [r3, #0]
   81338:	b153      	cbz	r3, 81350 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   8133a:	4b09      	ldr	r3, [pc, #36]	; (81360 <_sbrk+0x2c>)
   8133c:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   8133e:	181a      	adds	r2, r3, r0
   81340:	4908      	ldr	r1, [pc, #32]	; (81364 <_sbrk+0x30>)
   81342:	4291      	cmp	r1, r2
   81344:	db08      	blt.n	81358 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   81346:	4610      	mov	r0, r2
   81348:	4a05      	ldr	r2, [pc, #20]	; (81360 <_sbrk+0x2c>)
   8134a:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   8134c:	4618      	mov	r0, r3
   8134e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81350:	4a05      	ldr	r2, [pc, #20]	; (81368 <_sbrk+0x34>)
   81352:	4b03      	ldr	r3, [pc, #12]	; (81360 <_sbrk+0x2c>)
   81354:	601a      	str	r2, [r3, #0]
   81356:	e7f0      	b.n	8133a <_sbrk+0x6>
		return (caddr_t) -1;	
   81358:	f04f 30ff 	mov.w	r0, #4294967295
}
   8135c:	4770      	bx	lr
   8135e:	bf00      	nop
   81360:	20070bfc 	.word	0x20070bfc
   81364:	20087ffc 	.word	0x20087ffc
   81368:	20072cb0 	.word	0x20072cb0

0008136c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   8136c:	f04f 30ff 	mov.w	r0, #4294967295
   81370:	4770      	bx	lr

00081372 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   81372:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   81376:	604b      	str	r3, [r1, #4]

	return 0;
}
   81378:	2000      	movs	r0, #0
   8137a:	4770      	bx	lr

0008137c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   8137c:	2001      	movs	r0, #1
   8137e:	4770      	bx	lr

00081380 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81380:	2000      	movs	r0, #0
   81382:	4770      	bx	lr

00081384 <main>:

Next version (1.4) will test if we can implement PWM to control the signal to the motorcontrollers. Clear?[] 

*/
int main (void)
{
   81384:	b508      	push	{r3, lr}

	misc_init(); //pin 2 out, pin5&7 in
   81386:	4b04      	ldr	r3, [pc, #16]	; (81398 <main+0x14>)
   81388:	4798      	blx	r3
	console_init();
   8138a:	4b04      	ldr	r3, [pc, #16]	; (8139c <main+0x18>)
   8138c:	4798      	blx	r3
	//interrupt_init();	//	pin 7 and 8 as interrupt pins	
	encoder_init(); //also initialises pin 5 (left encoder) & 7 (right encoder) as interrupt pins
   8138e:	4b04      	ldr	r3, [pc, #16]	; (813a0 <main+0x1c>)
   81390:	4798      	blx	r3
	//rtos_init(); //Starts RTOS scheduler
	//delay_us(3000000);
	//controlCenter(50);
	//delay_init();
	init_twi();
   81392:	4b04      	ldr	r3, [pc, #16]	; (813a4 <main+0x20>)
   81394:	4798      	blx	r3
   81396:	e7fe      	b.n	81396 <main+0x12>
   81398:	00080845 	.word	0x00080845
   8139c:	000808b5 	.word	0x000808b5
   813a0:	00080439 	.word	0x00080439
   813a4:	00080595 	.word	0x00080595

000813a8 <__libc_init_array>:
   813a8:	b570      	push	{r4, r5, r6, lr}
   813aa:	4e0f      	ldr	r6, [pc, #60]	; (813e8 <__libc_init_array+0x40>)
   813ac:	4d0f      	ldr	r5, [pc, #60]	; (813ec <__libc_init_array+0x44>)
   813ae:	1b76      	subs	r6, r6, r5
   813b0:	10b6      	asrs	r6, r6, #2
   813b2:	bf18      	it	ne
   813b4:	2400      	movne	r4, #0
   813b6:	d005      	beq.n	813c4 <__libc_init_array+0x1c>
   813b8:	3401      	adds	r4, #1
   813ba:	f855 3b04 	ldr.w	r3, [r5], #4
   813be:	4798      	blx	r3
   813c0:	42a6      	cmp	r6, r4
   813c2:	d1f9      	bne.n	813b8 <__libc_init_array+0x10>
   813c4:	4e0a      	ldr	r6, [pc, #40]	; (813f0 <__libc_init_array+0x48>)
   813c6:	4d0b      	ldr	r5, [pc, #44]	; (813f4 <__libc_init_array+0x4c>)
   813c8:	f003 f874 	bl	844b4 <_init>
   813cc:	1b76      	subs	r6, r6, r5
   813ce:	10b6      	asrs	r6, r6, #2
   813d0:	bf18      	it	ne
   813d2:	2400      	movne	r4, #0
   813d4:	d006      	beq.n	813e4 <__libc_init_array+0x3c>
   813d6:	3401      	adds	r4, #1
   813d8:	f855 3b04 	ldr.w	r3, [r5], #4
   813dc:	4798      	blx	r3
   813de:	42a6      	cmp	r6, r4
   813e0:	d1f9      	bne.n	813d6 <__libc_init_array+0x2e>
   813e2:	bd70      	pop	{r4, r5, r6, pc}
   813e4:	bd70      	pop	{r4, r5, r6, pc}
   813e6:	bf00      	nop
   813e8:	000844c0 	.word	0x000844c0
   813ec:	000844c0 	.word	0x000844c0
   813f0:	000844c8 	.word	0x000844c8
   813f4:	000844c0 	.word	0x000844c0

000813f8 <iprintf>:
   813f8:	b40f      	push	{r0, r1, r2, r3}
   813fa:	b510      	push	{r4, lr}
   813fc:	4b07      	ldr	r3, [pc, #28]	; (8141c <iprintf+0x24>)
   813fe:	b082      	sub	sp, #8
   81400:	ac04      	add	r4, sp, #16
   81402:	f854 2b04 	ldr.w	r2, [r4], #4
   81406:	6818      	ldr	r0, [r3, #0]
   81408:	4623      	mov	r3, r4
   8140a:	6881      	ldr	r1, [r0, #8]
   8140c:	9401      	str	r4, [sp, #4]
   8140e:	f000 fa09 	bl	81824 <_vfiprintf_r>
   81412:	b002      	add	sp, #8
   81414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81418:	b004      	add	sp, #16
   8141a:	4770      	bx	lr
   8141c:	20070134 	.word	0x20070134

00081420 <memcpy>:
   81420:	4684      	mov	ip, r0
   81422:	ea41 0300 	orr.w	r3, r1, r0
   81426:	f013 0303 	ands.w	r3, r3, #3
   8142a:	d149      	bne.n	814c0 <memcpy+0xa0>
   8142c:	3a40      	subs	r2, #64	; 0x40
   8142e:	d323      	bcc.n	81478 <memcpy+0x58>
   81430:	680b      	ldr	r3, [r1, #0]
   81432:	6003      	str	r3, [r0, #0]
   81434:	684b      	ldr	r3, [r1, #4]
   81436:	6043      	str	r3, [r0, #4]
   81438:	688b      	ldr	r3, [r1, #8]
   8143a:	6083      	str	r3, [r0, #8]
   8143c:	68cb      	ldr	r3, [r1, #12]
   8143e:	60c3      	str	r3, [r0, #12]
   81440:	690b      	ldr	r3, [r1, #16]
   81442:	6103      	str	r3, [r0, #16]
   81444:	694b      	ldr	r3, [r1, #20]
   81446:	6143      	str	r3, [r0, #20]
   81448:	698b      	ldr	r3, [r1, #24]
   8144a:	6183      	str	r3, [r0, #24]
   8144c:	69cb      	ldr	r3, [r1, #28]
   8144e:	61c3      	str	r3, [r0, #28]
   81450:	6a0b      	ldr	r3, [r1, #32]
   81452:	6203      	str	r3, [r0, #32]
   81454:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81456:	6243      	str	r3, [r0, #36]	; 0x24
   81458:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8145a:	6283      	str	r3, [r0, #40]	; 0x28
   8145c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8145e:	62c3      	str	r3, [r0, #44]	; 0x2c
   81460:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81462:	6303      	str	r3, [r0, #48]	; 0x30
   81464:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81466:	6343      	str	r3, [r0, #52]	; 0x34
   81468:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8146a:	6383      	str	r3, [r0, #56]	; 0x38
   8146c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8146e:	63c3      	str	r3, [r0, #60]	; 0x3c
   81470:	3040      	adds	r0, #64	; 0x40
   81472:	3140      	adds	r1, #64	; 0x40
   81474:	3a40      	subs	r2, #64	; 0x40
   81476:	d2db      	bcs.n	81430 <memcpy+0x10>
   81478:	3230      	adds	r2, #48	; 0x30
   8147a:	d30b      	bcc.n	81494 <memcpy+0x74>
   8147c:	680b      	ldr	r3, [r1, #0]
   8147e:	6003      	str	r3, [r0, #0]
   81480:	684b      	ldr	r3, [r1, #4]
   81482:	6043      	str	r3, [r0, #4]
   81484:	688b      	ldr	r3, [r1, #8]
   81486:	6083      	str	r3, [r0, #8]
   81488:	68cb      	ldr	r3, [r1, #12]
   8148a:	60c3      	str	r3, [r0, #12]
   8148c:	3010      	adds	r0, #16
   8148e:	3110      	adds	r1, #16
   81490:	3a10      	subs	r2, #16
   81492:	d2f3      	bcs.n	8147c <memcpy+0x5c>
   81494:	320c      	adds	r2, #12
   81496:	d305      	bcc.n	814a4 <memcpy+0x84>
   81498:	f851 3b04 	ldr.w	r3, [r1], #4
   8149c:	f840 3b04 	str.w	r3, [r0], #4
   814a0:	3a04      	subs	r2, #4
   814a2:	d2f9      	bcs.n	81498 <memcpy+0x78>
   814a4:	3204      	adds	r2, #4
   814a6:	d008      	beq.n	814ba <memcpy+0x9a>
   814a8:	07d2      	lsls	r2, r2, #31
   814aa:	bf1c      	itt	ne
   814ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
   814b0:	f800 3b01 	strbne.w	r3, [r0], #1
   814b4:	d301      	bcc.n	814ba <memcpy+0x9a>
   814b6:	880b      	ldrh	r3, [r1, #0]
   814b8:	8003      	strh	r3, [r0, #0]
   814ba:	4660      	mov	r0, ip
   814bc:	4770      	bx	lr
   814be:	bf00      	nop
   814c0:	2a08      	cmp	r2, #8
   814c2:	d313      	bcc.n	814ec <memcpy+0xcc>
   814c4:	078b      	lsls	r3, r1, #30
   814c6:	d0b1      	beq.n	8142c <memcpy+0xc>
   814c8:	f010 0303 	ands.w	r3, r0, #3
   814cc:	d0ae      	beq.n	8142c <memcpy+0xc>
   814ce:	f1c3 0304 	rsb	r3, r3, #4
   814d2:	1ad2      	subs	r2, r2, r3
   814d4:	07db      	lsls	r3, r3, #31
   814d6:	bf1c      	itt	ne
   814d8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   814dc:	f800 3b01 	strbne.w	r3, [r0], #1
   814e0:	d3a4      	bcc.n	8142c <memcpy+0xc>
   814e2:	f831 3b02 	ldrh.w	r3, [r1], #2
   814e6:	f820 3b02 	strh.w	r3, [r0], #2
   814ea:	e79f      	b.n	8142c <memcpy+0xc>
   814ec:	3a04      	subs	r2, #4
   814ee:	d3d9      	bcc.n	814a4 <memcpy+0x84>
   814f0:	3a01      	subs	r2, #1
   814f2:	f811 3b01 	ldrb.w	r3, [r1], #1
   814f6:	f800 3b01 	strb.w	r3, [r0], #1
   814fa:	d2f9      	bcs.n	814f0 <memcpy+0xd0>
   814fc:	780b      	ldrb	r3, [r1, #0]
   814fe:	7003      	strb	r3, [r0, #0]
   81500:	784b      	ldrb	r3, [r1, #1]
   81502:	7043      	strb	r3, [r0, #1]
   81504:	788b      	ldrb	r3, [r1, #2]
   81506:	7083      	strb	r3, [r0, #2]
   81508:	4660      	mov	r0, ip
   8150a:	4770      	bx	lr

0008150c <memset>:
   8150c:	b470      	push	{r4, r5, r6}
   8150e:	0786      	lsls	r6, r0, #30
   81510:	d046      	beq.n	815a0 <memset+0x94>
   81512:	1e54      	subs	r4, r2, #1
   81514:	2a00      	cmp	r2, #0
   81516:	d041      	beq.n	8159c <memset+0x90>
   81518:	b2ca      	uxtb	r2, r1
   8151a:	4603      	mov	r3, r0
   8151c:	e002      	b.n	81524 <memset+0x18>
   8151e:	f114 34ff 	adds.w	r4, r4, #4294967295
   81522:	d33b      	bcc.n	8159c <memset+0x90>
   81524:	f803 2b01 	strb.w	r2, [r3], #1
   81528:	079d      	lsls	r5, r3, #30
   8152a:	d1f8      	bne.n	8151e <memset+0x12>
   8152c:	2c03      	cmp	r4, #3
   8152e:	d92e      	bls.n	8158e <memset+0x82>
   81530:	b2cd      	uxtb	r5, r1
   81532:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81536:	2c0f      	cmp	r4, #15
   81538:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8153c:	d919      	bls.n	81572 <memset+0x66>
   8153e:	4626      	mov	r6, r4
   81540:	f103 0210 	add.w	r2, r3, #16
   81544:	3e10      	subs	r6, #16
   81546:	2e0f      	cmp	r6, #15
   81548:	f842 5c10 	str.w	r5, [r2, #-16]
   8154c:	f842 5c0c 	str.w	r5, [r2, #-12]
   81550:	f842 5c08 	str.w	r5, [r2, #-8]
   81554:	f842 5c04 	str.w	r5, [r2, #-4]
   81558:	f102 0210 	add.w	r2, r2, #16
   8155c:	d8f2      	bhi.n	81544 <memset+0x38>
   8155e:	f1a4 0210 	sub.w	r2, r4, #16
   81562:	f022 020f 	bic.w	r2, r2, #15
   81566:	f004 040f 	and.w	r4, r4, #15
   8156a:	3210      	adds	r2, #16
   8156c:	2c03      	cmp	r4, #3
   8156e:	4413      	add	r3, r2
   81570:	d90d      	bls.n	8158e <memset+0x82>
   81572:	461e      	mov	r6, r3
   81574:	4622      	mov	r2, r4
   81576:	3a04      	subs	r2, #4
   81578:	2a03      	cmp	r2, #3
   8157a:	f846 5b04 	str.w	r5, [r6], #4
   8157e:	d8fa      	bhi.n	81576 <memset+0x6a>
   81580:	1f22      	subs	r2, r4, #4
   81582:	f022 0203 	bic.w	r2, r2, #3
   81586:	3204      	adds	r2, #4
   81588:	4413      	add	r3, r2
   8158a:	f004 0403 	and.w	r4, r4, #3
   8158e:	b12c      	cbz	r4, 8159c <memset+0x90>
   81590:	b2c9      	uxtb	r1, r1
   81592:	441c      	add	r4, r3
   81594:	f803 1b01 	strb.w	r1, [r3], #1
   81598:	429c      	cmp	r4, r3
   8159a:	d1fb      	bne.n	81594 <memset+0x88>
   8159c:	bc70      	pop	{r4, r5, r6}
   8159e:	4770      	bx	lr
   815a0:	4614      	mov	r4, r2
   815a2:	4603      	mov	r3, r0
   815a4:	e7c2      	b.n	8152c <memset+0x20>
   815a6:	bf00      	nop

000815a8 <setbuf>:
   815a8:	2900      	cmp	r1, #0
   815aa:	bf0c      	ite	eq
   815ac:	2202      	moveq	r2, #2
   815ae:	2200      	movne	r2, #0
   815b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   815b4:	f000 b800 	b.w	815b8 <setvbuf>

000815b8 <setvbuf>:
   815b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   815bc:	4d61      	ldr	r5, [pc, #388]	; (81744 <setvbuf+0x18c>)
   815be:	b083      	sub	sp, #12
   815c0:	682d      	ldr	r5, [r5, #0]
   815c2:	4604      	mov	r4, r0
   815c4:	460f      	mov	r7, r1
   815c6:	4690      	mov	r8, r2
   815c8:	461e      	mov	r6, r3
   815ca:	b115      	cbz	r5, 815d2 <setvbuf+0x1a>
   815cc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   815ce:	2b00      	cmp	r3, #0
   815d0:	d064      	beq.n	8169c <setvbuf+0xe4>
   815d2:	f1b8 0f02 	cmp.w	r8, #2
   815d6:	d006      	beq.n	815e6 <setvbuf+0x2e>
   815d8:	f1b8 0f01 	cmp.w	r8, #1
   815dc:	f200 809f 	bhi.w	8171e <setvbuf+0x166>
   815e0:	2e00      	cmp	r6, #0
   815e2:	f2c0 809c 	blt.w	8171e <setvbuf+0x166>
   815e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   815e8:	07d8      	lsls	r0, r3, #31
   815ea:	d534      	bpl.n	81656 <setvbuf+0x9e>
   815ec:	4621      	mov	r1, r4
   815ee:	4628      	mov	r0, r5
   815f0:	f001 f8b0 	bl	82754 <_fflush_r>
   815f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   815f6:	b141      	cbz	r1, 8160a <setvbuf+0x52>
   815f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   815fc:	4299      	cmp	r1, r3
   815fe:	d002      	beq.n	81606 <setvbuf+0x4e>
   81600:	4628      	mov	r0, r5
   81602:	f001 fa25 	bl	82a50 <_free_r>
   81606:	2300      	movs	r3, #0
   81608:	6323      	str	r3, [r4, #48]	; 0x30
   8160a:	2200      	movs	r2, #0
   8160c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81610:	61a2      	str	r2, [r4, #24]
   81612:	6062      	str	r2, [r4, #4]
   81614:	061a      	lsls	r2, r3, #24
   81616:	d43a      	bmi.n	8168e <setvbuf+0xd6>
   81618:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   8161c:	f023 0303 	bic.w	r3, r3, #3
   81620:	f1b8 0f02 	cmp.w	r8, #2
   81624:	81a3      	strh	r3, [r4, #12]
   81626:	d01d      	beq.n	81664 <setvbuf+0xac>
   81628:	ab01      	add	r3, sp, #4
   8162a:	466a      	mov	r2, sp
   8162c:	4621      	mov	r1, r4
   8162e:	4628      	mov	r0, r5
   81630:	f001 fcac 	bl	82f8c <__swhatbuf_r>
   81634:	89a3      	ldrh	r3, [r4, #12]
   81636:	4318      	orrs	r0, r3
   81638:	81a0      	strh	r0, [r4, #12]
   8163a:	2e00      	cmp	r6, #0
   8163c:	d132      	bne.n	816a4 <setvbuf+0xec>
   8163e:	9e00      	ldr	r6, [sp, #0]
   81640:	4630      	mov	r0, r6
   81642:	f001 fd1b 	bl	8307c <malloc>
   81646:	4607      	mov	r7, r0
   81648:	2800      	cmp	r0, #0
   8164a:	d06b      	beq.n	81724 <setvbuf+0x16c>
   8164c:	89a3      	ldrh	r3, [r4, #12]
   8164e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81652:	81a3      	strh	r3, [r4, #12]
   81654:	e028      	b.n	816a8 <setvbuf+0xf0>
   81656:	89a3      	ldrh	r3, [r4, #12]
   81658:	0599      	lsls	r1, r3, #22
   8165a:	d4c7      	bmi.n	815ec <setvbuf+0x34>
   8165c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8165e:	f001 fc91 	bl	82f84 <__retarget_lock_acquire_recursive>
   81662:	e7c3      	b.n	815ec <setvbuf+0x34>
   81664:	2500      	movs	r5, #0
   81666:	2600      	movs	r6, #0
   81668:	2001      	movs	r0, #1
   8166a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8166c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81670:	f043 0302 	orr.w	r3, r3, #2
   81674:	60a6      	str	r6, [r4, #8]
   81676:	07ce      	lsls	r6, r1, #31
   81678:	81a3      	strh	r3, [r4, #12]
   8167a:	6160      	str	r0, [r4, #20]
   8167c:	6022      	str	r2, [r4, #0]
   8167e:	6122      	str	r2, [r4, #16]
   81680:	d401      	bmi.n	81686 <setvbuf+0xce>
   81682:	0598      	lsls	r0, r3, #22
   81684:	d53e      	bpl.n	81704 <setvbuf+0x14c>
   81686:	4628      	mov	r0, r5
   81688:	b003      	add	sp, #12
   8168a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8168e:	6921      	ldr	r1, [r4, #16]
   81690:	4628      	mov	r0, r5
   81692:	f001 f9dd 	bl	82a50 <_free_r>
   81696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8169a:	e7bd      	b.n	81618 <setvbuf+0x60>
   8169c:	4628      	mov	r0, r5
   8169e:	f001 f8b1 	bl	82804 <__sinit>
   816a2:	e796      	b.n	815d2 <setvbuf+0x1a>
   816a4:	2f00      	cmp	r7, #0
   816a6:	d0cb      	beq.n	81640 <setvbuf+0x88>
   816a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   816aa:	2b00      	cmp	r3, #0
   816ac:	d033      	beq.n	81716 <setvbuf+0x15e>
   816ae:	9b00      	ldr	r3, [sp, #0]
   816b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   816b4:	429e      	cmp	r6, r3
   816b6:	bf1c      	itt	ne
   816b8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   816bc:	81a2      	strhne	r2, [r4, #12]
   816be:	f1b8 0f01 	cmp.w	r8, #1
   816c2:	bf04      	itt	eq
   816c4:	f042 0201 	orreq.w	r2, r2, #1
   816c8:	81a2      	strheq	r2, [r4, #12]
   816ca:	b292      	uxth	r2, r2
   816cc:	f012 0308 	ands.w	r3, r2, #8
   816d0:	6027      	str	r7, [r4, #0]
   816d2:	6127      	str	r7, [r4, #16]
   816d4:	6166      	str	r6, [r4, #20]
   816d6:	d00e      	beq.n	816f6 <setvbuf+0x13e>
   816d8:	07d1      	lsls	r1, r2, #31
   816da:	d51a      	bpl.n	81712 <setvbuf+0x15a>
   816dc:	2300      	movs	r3, #0
   816de:	6e65      	ldr	r5, [r4, #100]	; 0x64
   816e0:	4276      	negs	r6, r6
   816e2:	f015 0501 	ands.w	r5, r5, #1
   816e6:	61a6      	str	r6, [r4, #24]
   816e8:	60a3      	str	r3, [r4, #8]
   816ea:	d009      	beq.n	81700 <setvbuf+0x148>
   816ec:	2500      	movs	r5, #0
   816ee:	4628      	mov	r0, r5
   816f0:	b003      	add	sp, #12
   816f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   816f6:	60a3      	str	r3, [r4, #8]
   816f8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   816fa:	f015 0501 	ands.w	r5, r5, #1
   816fe:	d1f5      	bne.n	816ec <setvbuf+0x134>
   81700:	0593      	lsls	r3, r2, #22
   81702:	d4c0      	bmi.n	81686 <setvbuf+0xce>
   81704:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81706:	f001 fc3f 	bl	82f88 <__retarget_lock_release_recursive>
   8170a:	4628      	mov	r0, r5
   8170c:	b003      	add	sp, #12
   8170e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81712:	60a6      	str	r6, [r4, #8]
   81714:	e7f0      	b.n	816f8 <setvbuf+0x140>
   81716:	4628      	mov	r0, r5
   81718:	f001 f874 	bl	82804 <__sinit>
   8171c:	e7c7      	b.n	816ae <setvbuf+0xf6>
   8171e:	f04f 35ff 	mov.w	r5, #4294967295
   81722:	e7b0      	b.n	81686 <setvbuf+0xce>
   81724:	f8dd 9000 	ldr.w	r9, [sp]
   81728:	45b1      	cmp	r9, r6
   8172a:	d004      	beq.n	81736 <setvbuf+0x17e>
   8172c:	4648      	mov	r0, r9
   8172e:	f001 fca5 	bl	8307c <malloc>
   81732:	4607      	mov	r7, r0
   81734:	b920      	cbnz	r0, 81740 <setvbuf+0x188>
   81736:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8173a:	f04f 35ff 	mov.w	r5, #4294967295
   8173e:	e792      	b.n	81666 <setvbuf+0xae>
   81740:	464e      	mov	r6, r9
   81742:	e783      	b.n	8164c <setvbuf+0x94>
   81744:	20070134 	.word	0x20070134

00081748 <strlen>:
   81748:	f020 0103 	bic.w	r1, r0, #3
   8174c:	f010 0003 	ands.w	r0, r0, #3
   81750:	f1c0 0000 	rsb	r0, r0, #0
   81754:	f851 3b04 	ldr.w	r3, [r1], #4
   81758:	f100 0c04 	add.w	ip, r0, #4
   8175c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81760:	f06f 0200 	mvn.w	r2, #0
   81764:	bf1c      	itt	ne
   81766:	fa22 f20c 	lsrne.w	r2, r2, ip
   8176a:	4313      	orrne	r3, r2
   8176c:	f04f 0c01 	mov.w	ip, #1
   81770:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81774:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81778:	eba3 020c 	sub.w	r2, r3, ip
   8177c:	ea22 0203 	bic.w	r2, r2, r3
   81780:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81784:	bf04      	itt	eq
   81786:	f851 3b04 	ldreq.w	r3, [r1], #4
   8178a:	3004      	addeq	r0, #4
   8178c:	d0f4      	beq.n	81778 <strlen+0x30>
   8178e:	f1c2 0100 	rsb	r1, r2, #0
   81792:	ea02 0201 	and.w	r2, r2, r1
   81796:	fab2 f282 	clz	r2, r2
   8179a:	f1c2 021f 	rsb	r2, r2, #31
   8179e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   817a2:	4770      	bx	lr

000817a4 <__sprint_r.part.0>:
   817a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   817a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   817aa:	4693      	mov	fp, r2
   817ac:	049c      	lsls	r4, r3, #18
   817ae:	d52f      	bpl.n	81810 <__sprint_r.part.0+0x6c>
   817b0:	6893      	ldr	r3, [r2, #8]
   817b2:	6812      	ldr	r2, [r2, #0]
   817b4:	b353      	cbz	r3, 8180c <__sprint_r.part.0+0x68>
   817b6:	460e      	mov	r6, r1
   817b8:	4607      	mov	r7, r0
   817ba:	f102 0908 	add.w	r9, r2, #8
   817be:	e919 0420 	ldmdb	r9, {r5, sl}
   817c2:	ea5f 089a 	movs.w	r8, sl, lsr #2
   817c6:	d017      	beq.n	817f8 <__sprint_r.part.0+0x54>
   817c8:	2400      	movs	r4, #0
   817ca:	3d04      	subs	r5, #4
   817cc:	e001      	b.n	817d2 <__sprint_r.part.0+0x2e>
   817ce:	45a0      	cmp	r8, r4
   817d0:	d010      	beq.n	817f4 <__sprint_r.part.0+0x50>
   817d2:	4632      	mov	r2, r6
   817d4:	f855 1f04 	ldr.w	r1, [r5, #4]!
   817d8:	4638      	mov	r0, r7
   817da:	f001 f8b5 	bl	82948 <_fputwc_r>
   817de:	1c43      	adds	r3, r0, #1
   817e0:	f104 0401 	add.w	r4, r4, #1
   817e4:	d1f3      	bne.n	817ce <__sprint_r.part.0+0x2a>
   817e6:	2300      	movs	r3, #0
   817e8:	f8cb 3008 	str.w	r3, [fp, #8]
   817ec:	f8cb 3004 	str.w	r3, [fp, #4]
   817f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   817f4:	f8db 3008 	ldr.w	r3, [fp, #8]
   817f8:	f02a 0a03 	bic.w	sl, sl, #3
   817fc:	eba3 030a 	sub.w	r3, r3, sl
   81800:	f8cb 3008 	str.w	r3, [fp, #8]
   81804:	f109 0908 	add.w	r9, r9, #8
   81808:	2b00      	cmp	r3, #0
   8180a:	d1d8      	bne.n	817be <__sprint_r.part.0+0x1a>
   8180c:	2000      	movs	r0, #0
   8180e:	e7ea      	b.n	817e6 <__sprint_r.part.0+0x42>
   81810:	f001 fa04 	bl	82c1c <__sfvwrite_r>
   81814:	2300      	movs	r3, #0
   81816:	f8cb 3008 	str.w	r3, [fp, #8]
   8181a:	f8cb 3004 	str.w	r3, [fp, #4]
   8181e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81822:	bf00      	nop

00081824 <_vfiprintf_r>:
   81824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81828:	b0ad      	sub	sp, #180	; 0xb4
   8182a:	461d      	mov	r5, r3
   8182c:	468b      	mov	fp, r1
   8182e:	4690      	mov	r8, r2
   81830:	9307      	str	r3, [sp, #28]
   81832:	9006      	str	r0, [sp, #24]
   81834:	b118      	cbz	r0, 8183e <_vfiprintf_r+0x1a>
   81836:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81838:	2b00      	cmp	r3, #0
   8183a:	f000 80f3 	beq.w	81a24 <_vfiprintf_r+0x200>
   8183e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81842:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81846:	07df      	lsls	r7, r3, #31
   81848:	b281      	uxth	r1, r0
   8184a:	d402      	bmi.n	81852 <_vfiprintf_r+0x2e>
   8184c:	058e      	lsls	r6, r1, #22
   8184e:	f140 80fc 	bpl.w	81a4a <_vfiprintf_r+0x226>
   81852:	048c      	lsls	r4, r1, #18
   81854:	d40a      	bmi.n	8186c <_vfiprintf_r+0x48>
   81856:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8185a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   8185e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81862:	f8ab 100c 	strh.w	r1, [fp, #12]
   81866:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   8186a:	b289      	uxth	r1, r1
   8186c:	0708      	lsls	r0, r1, #28
   8186e:	f140 80b3 	bpl.w	819d8 <_vfiprintf_r+0x1b4>
   81872:	f8db 3010 	ldr.w	r3, [fp, #16]
   81876:	2b00      	cmp	r3, #0
   81878:	f000 80ae 	beq.w	819d8 <_vfiprintf_r+0x1b4>
   8187c:	f001 031a 	and.w	r3, r1, #26
   81880:	2b0a      	cmp	r3, #10
   81882:	f000 80b5 	beq.w	819f0 <_vfiprintf_r+0x1cc>
   81886:	2300      	movs	r3, #0
   81888:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8188c:	46d1      	mov	r9, sl
   8188e:	930b      	str	r3, [sp, #44]	; 0x2c
   81890:	9303      	str	r3, [sp, #12]
   81892:	9311      	str	r3, [sp, #68]	; 0x44
   81894:	9310      	str	r3, [sp, #64]	; 0x40
   81896:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8189a:	f8cd b010 	str.w	fp, [sp, #16]
   8189e:	f898 3000 	ldrb.w	r3, [r8]
   818a2:	4644      	mov	r4, r8
   818a4:	b1fb      	cbz	r3, 818e6 <_vfiprintf_r+0xc2>
   818a6:	2b25      	cmp	r3, #37	; 0x25
   818a8:	d102      	bne.n	818b0 <_vfiprintf_r+0x8c>
   818aa:	e01c      	b.n	818e6 <_vfiprintf_r+0xc2>
   818ac:	2b25      	cmp	r3, #37	; 0x25
   818ae:	d003      	beq.n	818b8 <_vfiprintf_r+0x94>
   818b0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   818b4:	2b00      	cmp	r3, #0
   818b6:	d1f9      	bne.n	818ac <_vfiprintf_r+0x88>
   818b8:	eba4 0508 	sub.w	r5, r4, r8
   818bc:	b19d      	cbz	r5, 818e6 <_vfiprintf_r+0xc2>
   818be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   818c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   818c2:	3301      	adds	r3, #1
   818c4:	442a      	add	r2, r5
   818c6:	2b07      	cmp	r3, #7
   818c8:	f8c9 8000 	str.w	r8, [r9]
   818cc:	f8c9 5004 	str.w	r5, [r9, #4]
   818d0:	9211      	str	r2, [sp, #68]	; 0x44
   818d2:	9310      	str	r3, [sp, #64]	; 0x40
   818d4:	dd7a      	ble.n	819cc <_vfiprintf_r+0x1a8>
   818d6:	2a00      	cmp	r2, #0
   818d8:	f040 84b5 	bne.w	82246 <_vfiprintf_r+0xa22>
   818dc:	46d1      	mov	r9, sl
   818de:	9b03      	ldr	r3, [sp, #12]
   818e0:	9210      	str	r2, [sp, #64]	; 0x40
   818e2:	442b      	add	r3, r5
   818e4:	9303      	str	r3, [sp, #12]
   818e6:	7823      	ldrb	r3, [r4, #0]
   818e8:	2b00      	cmp	r3, #0
   818ea:	f000 83e5 	beq.w	820b8 <_vfiprintf_r+0x894>
   818ee:	2000      	movs	r0, #0
   818f0:	f04f 0300 	mov.w	r3, #0
   818f4:	f104 0801 	add.w	r8, r4, #1
   818f8:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   818fc:	7862      	ldrb	r2, [r4, #1]
   818fe:	4606      	mov	r6, r0
   81900:	4605      	mov	r5, r0
   81902:	4603      	mov	r3, r0
   81904:	f04f 34ff 	mov.w	r4, #4294967295
   81908:	f108 0801 	add.w	r8, r8, #1
   8190c:	f1a2 0120 	sub.w	r1, r2, #32
   81910:	2958      	cmp	r1, #88	; 0x58
   81912:	f200 82d9 	bhi.w	81ec8 <_vfiprintf_r+0x6a4>
   81916:	e8df f011 	tbh	[pc, r1, lsl #1]
   8191a:	0228      	.short	0x0228
   8191c:	02d702d7 	.word	0x02d702d7
   81920:	02d70230 	.word	0x02d70230
   81924:	02d702d7 	.word	0x02d702d7
   81928:	02d702d7 	.word	0x02d702d7
   8192c:	00a002d7 	.word	0x00a002d7
   81930:	02d70288 	.word	0x02d70288
   81934:	02b800a8 	.word	0x02b800a8
   81938:	01a602d7 	.word	0x01a602d7
   8193c:	01ab01ab 	.word	0x01ab01ab
   81940:	01ab01ab 	.word	0x01ab01ab
   81944:	01ab01ab 	.word	0x01ab01ab
   81948:	01ab01ab 	.word	0x01ab01ab
   8194c:	02d701ab 	.word	0x02d701ab
   81950:	02d702d7 	.word	0x02d702d7
   81954:	02d702d7 	.word	0x02d702d7
   81958:	02d702d7 	.word	0x02d702d7
   8195c:	02d702d7 	.word	0x02d702d7
   81960:	01b902d7 	.word	0x01b902d7
   81964:	02d702d7 	.word	0x02d702d7
   81968:	02d702d7 	.word	0x02d702d7
   8196c:	02d702d7 	.word	0x02d702d7
   81970:	02d702d7 	.word	0x02d702d7
   81974:	02d702d7 	.word	0x02d702d7
   81978:	02d7019e 	.word	0x02d7019e
   8197c:	02d702d7 	.word	0x02d702d7
   81980:	02d702d7 	.word	0x02d702d7
   81984:	02d701a2 	.word	0x02d701a2
   81988:	025a02d7 	.word	0x025a02d7
   8198c:	02d702d7 	.word	0x02d702d7
   81990:	02d702d7 	.word	0x02d702d7
   81994:	02d702d7 	.word	0x02d702d7
   81998:	02d702d7 	.word	0x02d702d7
   8199c:	02d702d7 	.word	0x02d702d7
   819a0:	02220261 	.word	0x02220261
   819a4:	02d702d7 	.word	0x02d702d7
   819a8:	027602d7 	.word	0x027602d7
   819ac:	02d70222 	.word	0x02d70222
   819b0:	027b02d7 	.word	0x027b02d7
   819b4:	01fc02d7 	.word	0x01fc02d7
   819b8:	02100189 	.word	0x02100189
   819bc:	02d702d2 	.word	0x02d702d2
   819c0:	02d70295 	.word	0x02d70295
   819c4:	02d700ad 	.word	0x02d700ad
   819c8:	023502d7 	.word	0x023502d7
   819cc:	f109 0908 	add.w	r9, r9, #8
   819d0:	9b03      	ldr	r3, [sp, #12]
   819d2:	442b      	add	r3, r5
   819d4:	9303      	str	r3, [sp, #12]
   819d6:	e786      	b.n	818e6 <_vfiprintf_r+0xc2>
   819d8:	4659      	mov	r1, fp
   819da:	9806      	ldr	r0, [sp, #24]
   819dc:	f000 fdaa 	bl	82534 <__swsetup_r>
   819e0:	bb18      	cbnz	r0, 81a2a <_vfiprintf_r+0x206>
   819e2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   819e6:	f001 031a 	and.w	r3, r1, #26
   819ea:	2b0a      	cmp	r3, #10
   819ec:	f47f af4b 	bne.w	81886 <_vfiprintf_r+0x62>
   819f0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   819f4:	2b00      	cmp	r3, #0
   819f6:	f6ff af46 	blt.w	81886 <_vfiprintf_r+0x62>
   819fa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   819fe:	07db      	lsls	r3, r3, #31
   81a00:	d405      	bmi.n	81a0e <_vfiprintf_r+0x1ea>
   81a02:	058f      	lsls	r7, r1, #22
   81a04:	d403      	bmi.n	81a0e <_vfiprintf_r+0x1ea>
   81a06:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81a0a:	f001 fabd 	bl	82f88 <__retarget_lock_release_recursive>
   81a0e:	462b      	mov	r3, r5
   81a10:	4642      	mov	r2, r8
   81a12:	4659      	mov	r1, fp
   81a14:	9806      	ldr	r0, [sp, #24]
   81a16:	f000 fd49 	bl	824ac <__sbprintf>
   81a1a:	9003      	str	r0, [sp, #12]
   81a1c:	9803      	ldr	r0, [sp, #12]
   81a1e:	b02d      	add	sp, #180	; 0xb4
   81a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a24:	f000 feee 	bl	82804 <__sinit>
   81a28:	e709      	b.n	8183e <_vfiprintf_r+0x1a>
   81a2a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81a2e:	07d9      	lsls	r1, r3, #31
   81a30:	d404      	bmi.n	81a3c <_vfiprintf_r+0x218>
   81a32:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81a36:	059a      	lsls	r2, r3, #22
   81a38:	f140 84ae 	bpl.w	82398 <_vfiprintf_r+0xb74>
   81a3c:	f04f 33ff 	mov.w	r3, #4294967295
   81a40:	9303      	str	r3, [sp, #12]
   81a42:	9803      	ldr	r0, [sp, #12]
   81a44:	b02d      	add	sp, #180	; 0xb4
   81a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81a4a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81a4e:	f001 fa99 	bl	82f84 <__retarget_lock_acquire_recursive>
   81a52:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81a56:	b281      	uxth	r1, r0
   81a58:	e6fb      	b.n	81852 <_vfiprintf_r+0x2e>
   81a5a:	9907      	ldr	r1, [sp, #28]
   81a5c:	460a      	mov	r2, r1
   81a5e:	680d      	ldr	r5, [r1, #0]
   81a60:	3204      	adds	r2, #4
   81a62:	2d00      	cmp	r5, #0
   81a64:	9207      	str	r2, [sp, #28]
   81a66:	da02      	bge.n	81a6e <_vfiprintf_r+0x24a>
   81a68:	426d      	negs	r5, r5
   81a6a:	f043 0304 	orr.w	r3, r3, #4
   81a6e:	f898 2000 	ldrb.w	r2, [r8]
   81a72:	e749      	b.n	81908 <_vfiprintf_r+0xe4>
   81a74:	9508      	str	r5, [sp, #32]
   81a76:	069e      	lsls	r6, r3, #26
   81a78:	f100 845a 	bmi.w	82330 <_vfiprintf_r+0xb0c>
   81a7c:	9907      	ldr	r1, [sp, #28]
   81a7e:	06dd      	lsls	r5, r3, #27
   81a80:	460a      	mov	r2, r1
   81a82:	f100 83ef 	bmi.w	82264 <_vfiprintf_r+0xa40>
   81a86:	0658      	lsls	r0, r3, #25
   81a88:	f140 83ec 	bpl.w	82264 <_vfiprintf_r+0xa40>
   81a8c:	2700      	movs	r7, #0
   81a8e:	2201      	movs	r2, #1
   81a90:	880e      	ldrh	r6, [r1, #0]
   81a92:	3104      	adds	r1, #4
   81a94:	9107      	str	r1, [sp, #28]
   81a96:	f04f 0100 	mov.w	r1, #0
   81a9a:	2500      	movs	r5, #0
   81a9c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81aa0:	1c61      	adds	r1, r4, #1
   81aa2:	f000 8117 	beq.w	81cd4 <_vfiprintf_r+0x4b0>
   81aa6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81aaa:	9102      	str	r1, [sp, #8]
   81aac:	ea56 0107 	orrs.w	r1, r6, r7
   81ab0:	f040 8115 	bne.w	81cde <_vfiprintf_r+0x4ba>
   81ab4:	2c00      	cmp	r4, #0
   81ab6:	f040 835b 	bne.w	82170 <_vfiprintf_r+0x94c>
   81aba:	2a00      	cmp	r2, #0
   81abc:	f040 83b6 	bne.w	8222c <_vfiprintf_r+0xa08>
   81ac0:	f013 0301 	ands.w	r3, r3, #1
   81ac4:	9305      	str	r3, [sp, #20]
   81ac6:	f000 8455 	beq.w	82374 <_vfiprintf_r+0xb50>
   81aca:	2330      	movs	r3, #48	; 0x30
   81acc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81ad0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81ad4:	9b05      	ldr	r3, [sp, #20]
   81ad6:	42a3      	cmp	r3, r4
   81ad8:	bfb8      	it	lt
   81ada:	4623      	movlt	r3, r4
   81adc:	9301      	str	r3, [sp, #4]
   81ade:	b10d      	cbz	r5, 81ae4 <_vfiprintf_r+0x2c0>
   81ae0:	3301      	adds	r3, #1
   81ae2:	9301      	str	r3, [sp, #4]
   81ae4:	9b02      	ldr	r3, [sp, #8]
   81ae6:	f013 0302 	ands.w	r3, r3, #2
   81aea:	9309      	str	r3, [sp, #36]	; 0x24
   81aec:	d002      	beq.n	81af4 <_vfiprintf_r+0x2d0>
   81aee:	9b01      	ldr	r3, [sp, #4]
   81af0:	3302      	adds	r3, #2
   81af2:	9301      	str	r3, [sp, #4]
   81af4:	9b02      	ldr	r3, [sp, #8]
   81af6:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81afa:	930a      	str	r3, [sp, #40]	; 0x28
   81afc:	f040 8215 	bne.w	81f2a <_vfiprintf_r+0x706>
   81b00:	9b08      	ldr	r3, [sp, #32]
   81b02:	9a01      	ldr	r2, [sp, #4]
   81b04:	1a9d      	subs	r5, r3, r2
   81b06:	2d00      	cmp	r5, #0
   81b08:	f340 820f 	ble.w	81f2a <_vfiprintf_r+0x706>
   81b0c:	2d10      	cmp	r5, #16
   81b0e:	f340 8484 	ble.w	8241a <_vfiprintf_r+0xbf6>
   81b12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81b14:	46ce      	mov	lr, r9
   81b16:	2710      	movs	r7, #16
   81b18:	46a1      	mov	r9, r4
   81b1a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81b1c:	4ec5      	ldr	r6, [pc, #788]	; (81e34 <_vfiprintf_r+0x610>)
   81b1e:	4619      	mov	r1, r3
   81b20:	9c06      	ldr	r4, [sp, #24]
   81b22:	e007      	b.n	81b34 <_vfiprintf_r+0x310>
   81b24:	f101 0c02 	add.w	ip, r1, #2
   81b28:	4601      	mov	r1, r0
   81b2a:	f10e 0e08 	add.w	lr, lr, #8
   81b2e:	3d10      	subs	r5, #16
   81b30:	2d10      	cmp	r5, #16
   81b32:	dd11      	ble.n	81b58 <_vfiprintf_r+0x334>
   81b34:	1c48      	adds	r0, r1, #1
   81b36:	3210      	adds	r2, #16
   81b38:	2807      	cmp	r0, #7
   81b3a:	9211      	str	r2, [sp, #68]	; 0x44
   81b3c:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81b40:	9010      	str	r0, [sp, #64]	; 0x40
   81b42:	ddef      	ble.n	81b24 <_vfiprintf_r+0x300>
   81b44:	2a00      	cmp	r2, #0
   81b46:	f040 81d9 	bne.w	81efc <_vfiprintf_r+0x6d8>
   81b4a:	3d10      	subs	r5, #16
   81b4c:	2d10      	cmp	r5, #16
   81b4e:	4611      	mov	r1, r2
   81b50:	f04f 0c01 	mov.w	ip, #1
   81b54:	46d6      	mov	lr, sl
   81b56:	dced      	bgt.n	81b34 <_vfiprintf_r+0x310>
   81b58:	464c      	mov	r4, r9
   81b5a:	4661      	mov	r1, ip
   81b5c:	46f1      	mov	r9, lr
   81b5e:	442a      	add	r2, r5
   81b60:	2907      	cmp	r1, #7
   81b62:	9211      	str	r2, [sp, #68]	; 0x44
   81b64:	f8c9 6000 	str.w	r6, [r9]
   81b68:	f8c9 5004 	str.w	r5, [r9, #4]
   81b6c:	9110      	str	r1, [sp, #64]	; 0x40
   81b6e:	f300 82eb 	bgt.w	82148 <_vfiprintf_r+0x924>
   81b72:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81b76:	f109 0908 	add.w	r9, r9, #8
   81b7a:	1c48      	adds	r0, r1, #1
   81b7c:	2d00      	cmp	r5, #0
   81b7e:	f040 81dc 	bne.w	81f3a <_vfiprintf_r+0x716>
   81b82:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81b84:	2b00      	cmp	r3, #0
   81b86:	f000 81f6 	beq.w	81f76 <_vfiprintf_r+0x752>
   81b8a:	2102      	movs	r1, #2
   81b8c:	ab0e      	add	r3, sp, #56	; 0x38
   81b8e:	440a      	add	r2, r1
   81b90:	2807      	cmp	r0, #7
   81b92:	9211      	str	r2, [sp, #68]	; 0x44
   81b94:	9010      	str	r0, [sp, #64]	; 0x40
   81b96:	f8c9 1004 	str.w	r1, [r9, #4]
   81b9a:	f8c9 3000 	str.w	r3, [r9]
   81b9e:	f340 81e6 	ble.w	81f6e <_vfiprintf_r+0x74a>
   81ba2:	2a00      	cmp	r2, #0
   81ba4:	f040 8395 	bne.w	822d2 <_vfiprintf_r+0xaae>
   81ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81baa:	2001      	movs	r0, #1
   81bac:	2b80      	cmp	r3, #128	; 0x80
   81bae:	4611      	mov	r1, r2
   81bb0:	46d1      	mov	r9, sl
   81bb2:	f040 81e4 	bne.w	81f7e <_vfiprintf_r+0x75a>
   81bb6:	9b08      	ldr	r3, [sp, #32]
   81bb8:	9d01      	ldr	r5, [sp, #4]
   81bba:	1b5e      	subs	r6, r3, r5
   81bbc:	2e00      	cmp	r6, #0
   81bbe:	f340 81de 	ble.w	81f7e <_vfiprintf_r+0x75a>
   81bc2:	2e10      	cmp	r6, #16
   81bc4:	f340 843c 	ble.w	82440 <_vfiprintf_r+0xc1c>
   81bc8:	46cc      	mov	ip, r9
   81bca:	2710      	movs	r7, #16
   81bcc:	46a1      	mov	r9, r4
   81bce:	4d9a      	ldr	r5, [pc, #616]	; (81e38 <_vfiprintf_r+0x614>)
   81bd0:	9c06      	ldr	r4, [sp, #24]
   81bd2:	e007      	b.n	81be4 <_vfiprintf_r+0x3c0>
   81bd4:	f101 0e02 	add.w	lr, r1, #2
   81bd8:	4601      	mov	r1, r0
   81bda:	f10c 0c08 	add.w	ip, ip, #8
   81bde:	3e10      	subs	r6, #16
   81be0:	2e10      	cmp	r6, #16
   81be2:	dd11      	ble.n	81c08 <_vfiprintf_r+0x3e4>
   81be4:	1c48      	adds	r0, r1, #1
   81be6:	3210      	adds	r2, #16
   81be8:	2807      	cmp	r0, #7
   81bea:	9211      	str	r2, [sp, #68]	; 0x44
   81bec:	e88c 00a0 	stmia.w	ip, {r5, r7}
   81bf0:	9010      	str	r0, [sp, #64]	; 0x40
   81bf2:	ddef      	ble.n	81bd4 <_vfiprintf_r+0x3b0>
   81bf4:	2a00      	cmp	r2, #0
   81bf6:	f040 829b 	bne.w	82130 <_vfiprintf_r+0x90c>
   81bfa:	3e10      	subs	r6, #16
   81bfc:	2e10      	cmp	r6, #16
   81bfe:	f04f 0e01 	mov.w	lr, #1
   81c02:	4611      	mov	r1, r2
   81c04:	46d4      	mov	ip, sl
   81c06:	dced      	bgt.n	81be4 <_vfiprintf_r+0x3c0>
   81c08:	464c      	mov	r4, r9
   81c0a:	46e1      	mov	r9, ip
   81c0c:	4432      	add	r2, r6
   81c0e:	f1be 0f07 	cmp.w	lr, #7
   81c12:	9211      	str	r2, [sp, #68]	; 0x44
   81c14:	e889 0060 	stmia.w	r9, {r5, r6}
   81c18:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   81c1c:	f300 8366 	bgt.w	822ec <_vfiprintf_r+0xac8>
   81c20:	f109 0908 	add.w	r9, r9, #8
   81c24:	f10e 0001 	add.w	r0, lr, #1
   81c28:	4671      	mov	r1, lr
   81c2a:	e1a8      	b.n	81f7e <_vfiprintf_r+0x75a>
   81c2c:	9508      	str	r5, [sp, #32]
   81c2e:	f013 0220 	ands.w	r2, r3, #32
   81c32:	f040 8389 	bne.w	82348 <_vfiprintf_r+0xb24>
   81c36:	f013 0110 	ands.w	r1, r3, #16
   81c3a:	f040 8319 	bne.w	82270 <_vfiprintf_r+0xa4c>
   81c3e:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   81c42:	f000 8315 	beq.w	82270 <_vfiprintf_r+0xa4c>
   81c46:	9807      	ldr	r0, [sp, #28]
   81c48:	460a      	mov	r2, r1
   81c4a:	4601      	mov	r1, r0
   81c4c:	3104      	adds	r1, #4
   81c4e:	8806      	ldrh	r6, [r0, #0]
   81c50:	2700      	movs	r7, #0
   81c52:	9107      	str	r1, [sp, #28]
   81c54:	e71f      	b.n	81a96 <_vfiprintf_r+0x272>
   81c56:	9508      	str	r5, [sp, #32]
   81c58:	f043 0310 	orr.w	r3, r3, #16
   81c5c:	e7e7      	b.n	81c2e <_vfiprintf_r+0x40a>
   81c5e:	9508      	str	r5, [sp, #32]
   81c60:	f043 0310 	orr.w	r3, r3, #16
   81c64:	e707      	b.n	81a76 <_vfiprintf_r+0x252>
   81c66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81c6a:	f898 2000 	ldrb.w	r2, [r8]
   81c6e:	e64b      	b.n	81908 <_vfiprintf_r+0xe4>
   81c70:	2500      	movs	r5, #0
   81c72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81c76:	f818 2b01 	ldrb.w	r2, [r8], #1
   81c7a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   81c7e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   81c82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81c86:	2909      	cmp	r1, #9
   81c88:	d9f5      	bls.n	81c76 <_vfiprintf_r+0x452>
   81c8a:	e63f      	b.n	8190c <_vfiprintf_r+0xe8>
   81c8c:	9508      	str	r5, [sp, #32]
   81c8e:	2800      	cmp	r0, #0
   81c90:	f040 8402 	bne.w	82498 <_vfiprintf_r+0xc74>
   81c94:	f043 0310 	orr.w	r3, r3, #16
   81c98:	069e      	lsls	r6, r3, #26
   81c9a:	f100 833d 	bmi.w	82318 <_vfiprintf_r+0xaf4>
   81c9e:	9907      	ldr	r1, [sp, #28]
   81ca0:	06dd      	lsls	r5, r3, #27
   81ca2:	460a      	mov	r2, r1
   81ca4:	f100 82f0 	bmi.w	82288 <_vfiprintf_r+0xa64>
   81ca8:	0658      	lsls	r0, r3, #25
   81caa:	f140 82ed 	bpl.w	82288 <_vfiprintf_r+0xa64>
   81cae:	f9b1 6000 	ldrsh.w	r6, [r1]
   81cb2:	3204      	adds	r2, #4
   81cb4:	17f7      	asrs	r7, r6, #31
   81cb6:	4630      	mov	r0, r6
   81cb8:	4639      	mov	r1, r7
   81cba:	9207      	str	r2, [sp, #28]
   81cbc:	2800      	cmp	r0, #0
   81cbe:	f171 0200 	sbcs.w	r2, r1, #0
   81cc2:	f2c0 835a 	blt.w	8237a <_vfiprintf_r+0xb56>
   81cc6:	1c61      	adds	r1, r4, #1
   81cc8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81ccc:	f04f 0201 	mov.w	r2, #1
   81cd0:	f47f aee9 	bne.w	81aa6 <_vfiprintf_r+0x282>
   81cd4:	ea56 0107 	orrs.w	r1, r6, r7
   81cd8:	f000 824b 	beq.w	82172 <_vfiprintf_r+0x94e>
   81cdc:	9302      	str	r3, [sp, #8]
   81cde:	2a01      	cmp	r2, #1
   81ce0:	f000 828a 	beq.w	821f8 <_vfiprintf_r+0x9d4>
   81ce4:	2a02      	cmp	r2, #2
   81ce6:	f040 825a 	bne.w	8219e <_vfiprintf_r+0x97a>
   81cea:	46d3      	mov	fp, sl
   81cec:	980b      	ldr	r0, [sp, #44]	; 0x2c
   81cee:	0933      	lsrs	r3, r6, #4
   81cf0:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   81cf4:	0939      	lsrs	r1, r7, #4
   81cf6:	f006 020f 	and.w	r2, r6, #15
   81cfa:	460f      	mov	r7, r1
   81cfc:	461e      	mov	r6, r3
   81cfe:	5c83      	ldrb	r3, [r0, r2]
   81d00:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   81d04:	ea56 0307 	orrs.w	r3, r6, r7
   81d08:	d1f1      	bne.n	81cee <_vfiprintf_r+0x4ca>
   81d0a:	ebaa 030b 	sub.w	r3, sl, fp
   81d0e:	9305      	str	r3, [sp, #20]
   81d10:	e6e0      	b.n	81ad4 <_vfiprintf_r+0x2b0>
   81d12:	2800      	cmp	r0, #0
   81d14:	f040 83bd 	bne.w	82492 <_vfiprintf_r+0xc6e>
   81d18:	0699      	lsls	r1, r3, #26
   81d1a:	f100 8359 	bmi.w	823d0 <_vfiprintf_r+0xbac>
   81d1e:	06da      	lsls	r2, r3, #27
   81d20:	f100 80e5 	bmi.w	81eee <_vfiprintf_r+0x6ca>
   81d24:	065b      	lsls	r3, r3, #25
   81d26:	f140 80e2 	bpl.w	81eee <_vfiprintf_r+0x6ca>
   81d2a:	9a07      	ldr	r2, [sp, #28]
   81d2c:	6813      	ldr	r3, [r2, #0]
   81d2e:	3204      	adds	r2, #4
   81d30:	9207      	str	r2, [sp, #28]
   81d32:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   81d36:	801a      	strh	r2, [r3, #0]
   81d38:	e5b1      	b.n	8189e <_vfiprintf_r+0x7a>
   81d3a:	2278      	movs	r2, #120	; 0x78
   81d3c:	2130      	movs	r1, #48	; 0x30
   81d3e:	9508      	str	r5, [sp, #32]
   81d40:	9d07      	ldr	r5, [sp, #28]
   81d42:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81d46:	1d2a      	adds	r2, r5, #4
   81d48:	9207      	str	r2, [sp, #28]
   81d4a:	4a3c      	ldr	r2, [pc, #240]	; (81e3c <_vfiprintf_r+0x618>)
   81d4c:	682e      	ldr	r6, [r5, #0]
   81d4e:	920b      	str	r2, [sp, #44]	; 0x2c
   81d50:	f043 0302 	orr.w	r3, r3, #2
   81d54:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81d58:	2700      	movs	r7, #0
   81d5a:	2202      	movs	r2, #2
   81d5c:	e69b      	b.n	81a96 <_vfiprintf_r+0x272>
   81d5e:	9508      	str	r5, [sp, #32]
   81d60:	2800      	cmp	r0, #0
   81d62:	d099      	beq.n	81c98 <_vfiprintf_r+0x474>
   81d64:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   81d68:	e796      	b.n	81c98 <_vfiprintf_r+0x474>
   81d6a:	f898 2000 	ldrb.w	r2, [r8]
   81d6e:	2e00      	cmp	r6, #0
   81d70:	f47f adca 	bne.w	81908 <_vfiprintf_r+0xe4>
   81d74:	2001      	movs	r0, #1
   81d76:	2620      	movs	r6, #32
   81d78:	e5c6      	b.n	81908 <_vfiprintf_r+0xe4>
   81d7a:	f043 0301 	orr.w	r3, r3, #1
   81d7e:	f898 2000 	ldrb.w	r2, [r8]
   81d82:	e5c1      	b.n	81908 <_vfiprintf_r+0xe4>
   81d84:	9508      	str	r5, [sp, #32]
   81d86:	2800      	cmp	r0, #0
   81d88:	f040 8380 	bne.w	8248c <_vfiprintf_r+0xc68>
   81d8c:	492b      	ldr	r1, [pc, #172]	; (81e3c <_vfiprintf_r+0x618>)
   81d8e:	910b      	str	r1, [sp, #44]	; 0x2c
   81d90:	069f      	lsls	r7, r3, #26
   81d92:	f100 82e5 	bmi.w	82360 <_vfiprintf_r+0xb3c>
   81d96:	9807      	ldr	r0, [sp, #28]
   81d98:	06de      	lsls	r6, r3, #27
   81d9a:	4601      	mov	r1, r0
   81d9c:	f100 826f 	bmi.w	8227e <_vfiprintf_r+0xa5a>
   81da0:	065d      	lsls	r5, r3, #25
   81da2:	f140 826c 	bpl.w	8227e <_vfiprintf_r+0xa5a>
   81da6:	2700      	movs	r7, #0
   81da8:	3104      	adds	r1, #4
   81daa:	8806      	ldrh	r6, [r0, #0]
   81dac:	9107      	str	r1, [sp, #28]
   81dae:	07d8      	lsls	r0, r3, #31
   81db0:	f140 8220 	bpl.w	821f4 <_vfiprintf_r+0x9d0>
   81db4:	ea56 0107 	orrs.w	r1, r6, r7
   81db8:	f000 821c 	beq.w	821f4 <_vfiprintf_r+0x9d0>
   81dbc:	2130      	movs	r1, #48	; 0x30
   81dbe:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   81dc2:	f043 0302 	orr.w	r3, r3, #2
   81dc6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   81dca:	2202      	movs	r2, #2
   81dcc:	e663      	b.n	81a96 <_vfiprintf_r+0x272>
   81dce:	9508      	str	r5, [sp, #32]
   81dd0:	2800      	cmp	r0, #0
   81dd2:	f040 8355 	bne.w	82480 <_vfiprintf_r+0xc5c>
   81dd6:	491a      	ldr	r1, [pc, #104]	; (81e40 <_vfiprintf_r+0x61c>)
   81dd8:	910b      	str	r1, [sp, #44]	; 0x2c
   81dda:	e7d9      	b.n	81d90 <_vfiprintf_r+0x56c>
   81ddc:	2201      	movs	r2, #1
   81dde:	9807      	ldr	r0, [sp, #28]
   81de0:	4611      	mov	r1, r2
   81de2:	9201      	str	r2, [sp, #4]
   81de4:	6802      	ldr	r2, [r0, #0]
   81de6:	f04f 0400 	mov.w	r4, #0
   81dea:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81dee:	4602      	mov	r2, r0
   81df0:	3204      	adds	r2, #4
   81df2:	9508      	str	r5, [sp, #32]
   81df4:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   81df8:	9105      	str	r1, [sp, #20]
   81dfa:	9207      	str	r2, [sp, #28]
   81dfc:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81e00:	9302      	str	r3, [sp, #8]
   81e02:	2400      	movs	r4, #0
   81e04:	e66e      	b.n	81ae4 <_vfiprintf_r+0x2c0>
   81e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   81e0a:	f898 2000 	ldrb.w	r2, [r8]
   81e0e:	e57b      	b.n	81908 <_vfiprintf_r+0xe4>
   81e10:	f898 2000 	ldrb.w	r2, [r8]
   81e14:	2a6c      	cmp	r2, #108	; 0x6c
   81e16:	bf03      	ittte	eq
   81e18:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   81e1c:	f043 0320 	orreq.w	r3, r3, #32
   81e20:	f108 0801 	addeq.w	r8, r8, #1
   81e24:	f043 0310 	orrne.w	r3, r3, #16
   81e28:	e56e      	b.n	81908 <_vfiprintf_r+0xe4>
   81e2a:	f898 2000 	ldrb.w	r2, [r8]
   81e2e:	2001      	movs	r0, #1
   81e30:	262b      	movs	r6, #43	; 0x2b
   81e32:	e569      	b.n	81908 <_vfiprintf_r+0xe4>
   81e34:	00084380 	.word	0x00084380
   81e38:	00084390 	.word	0x00084390
   81e3c:	00084364 	.word	0x00084364
   81e40:	00084350 	.word	0x00084350
   81e44:	f04f 0200 	mov.w	r2, #0
   81e48:	9907      	ldr	r1, [sp, #28]
   81e4a:	9508      	str	r5, [sp, #32]
   81e4c:	f8d1 b000 	ldr.w	fp, [r1]
   81e50:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81e54:	1d0d      	adds	r5, r1, #4
   81e56:	f1bb 0f00 	cmp.w	fp, #0
   81e5a:	f000 82e4 	beq.w	82426 <_vfiprintf_r+0xc02>
   81e5e:	1c67      	adds	r7, r4, #1
   81e60:	f000 82c3 	beq.w	823ea <_vfiprintf_r+0xbc6>
   81e64:	4622      	mov	r2, r4
   81e66:	2100      	movs	r1, #0
   81e68:	4658      	mov	r0, fp
   81e6a:	9301      	str	r3, [sp, #4]
   81e6c:	f001 fbc6 	bl	835fc <memchr>
   81e70:	9b01      	ldr	r3, [sp, #4]
   81e72:	2800      	cmp	r0, #0
   81e74:	f000 82e8 	beq.w	82448 <_vfiprintf_r+0xc24>
   81e78:	eba0 020b 	sub.w	r2, r0, fp
   81e7c:	9507      	str	r5, [sp, #28]
   81e7e:	9205      	str	r2, [sp, #20]
   81e80:	9302      	str	r3, [sp, #8]
   81e82:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81e86:	2400      	movs	r4, #0
   81e88:	e624      	b.n	81ad4 <_vfiprintf_r+0x2b0>
   81e8a:	f898 2000 	ldrb.w	r2, [r8]
   81e8e:	f108 0701 	add.w	r7, r8, #1
   81e92:	2a2a      	cmp	r2, #42	; 0x2a
   81e94:	f000 82e9 	beq.w	8246a <_vfiprintf_r+0xc46>
   81e98:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81e9c:	2909      	cmp	r1, #9
   81e9e:	46b8      	mov	r8, r7
   81ea0:	f04f 0400 	mov.w	r4, #0
   81ea4:	f63f ad32 	bhi.w	8190c <_vfiprintf_r+0xe8>
   81ea8:	f818 2b01 	ldrb.w	r2, [r8], #1
   81eac:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   81eb0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   81eb4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   81eb8:	2909      	cmp	r1, #9
   81eba:	d9f5      	bls.n	81ea8 <_vfiprintf_r+0x684>
   81ebc:	e526      	b.n	8190c <_vfiprintf_r+0xe8>
   81ebe:	f043 0320 	orr.w	r3, r3, #32
   81ec2:	f898 2000 	ldrb.w	r2, [r8]
   81ec6:	e51f      	b.n	81908 <_vfiprintf_r+0xe4>
   81ec8:	9508      	str	r5, [sp, #32]
   81eca:	2800      	cmp	r0, #0
   81ecc:	f040 82db 	bne.w	82486 <_vfiprintf_r+0xc62>
   81ed0:	2a00      	cmp	r2, #0
   81ed2:	f000 80f1 	beq.w	820b8 <_vfiprintf_r+0x894>
   81ed6:	2101      	movs	r1, #1
   81ed8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   81edc:	f04f 0200 	mov.w	r2, #0
   81ee0:	9101      	str	r1, [sp, #4]
   81ee2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   81ee6:	9105      	str	r1, [sp, #20]
   81ee8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   81eec:	e788      	b.n	81e00 <_vfiprintf_r+0x5dc>
   81eee:	9a07      	ldr	r2, [sp, #28]
   81ef0:	6813      	ldr	r3, [r2, #0]
   81ef2:	3204      	adds	r2, #4
   81ef4:	9207      	str	r2, [sp, #28]
   81ef6:	9a03      	ldr	r2, [sp, #12]
   81ef8:	601a      	str	r2, [r3, #0]
   81efa:	e4d0      	b.n	8189e <_vfiprintf_r+0x7a>
   81efc:	aa0f      	add	r2, sp, #60	; 0x3c
   81efe:	9904      	ldr	r1, [sp, #16]
   81f00:	4620      	mov	r0, r4
   81f02:	f7ff fc4f 	bl	817a4 <__sprint_r.part.0>
   81f06:	2800      	cmp	r0, #0
   81f08:	f040 8143 	bne.w	82192 <_vfiprintf_r+0x96e>
   81f0c:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f0e:	46d6      	mov	lr, sl
   81f10:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f12:	f101 0c01 	add.w	ip, r1, #1
   81f16:	e60a      	b.n	81b2e <_vfiprintf_r+0x30a>
   81f18:	aa0f      	add	r2, sp, #60	; 0x3c
   81f1a:	9904      	ldr	r1, [sp, #16]
   81f1c:	9806      	ldr	r0, [sp, #24]
   81f1e:	f7ff fc41 	bl	817a4 <__sprint_r.part.0>
   81f22:	2800      	cmp	r0, #0
   81f24:	f040 8135 	bne.w	82192 <_vfiprintf_r+0x96e>
   81f28:	46d1      	mov	r9, sl
   81f2a:	9910      	ldr	r1, [sp, #64]	; 0x40
   81f2c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81f30:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f32:	1c48      	adds	r0, r1, #1
   81f34:	2d00      	cmp	r5, #0
   81f36:	f43f ae24 	beq.w	81b82 <_vfiprintf_r+0x35e>
   81f3a:	2101      	movs	r1, #1
   81f3c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   81f40:	440a      	add	r2, r1
   81f42:	2807      	cmp	r0, #7
   81f44:	9211      	str	r2, [sp, #68]	; 0x44
   81f46:	9010      	str	r0, [sp, #64]	; 0x40
   81f48:	f8c9 1004 	str.w	r1, [r9, #4]
   81f4c:	f8c9 5000 	str.w	r5, [r9]
   81f50:	f340 8109 	ble.w	82166 <_vfiprintf_r+0x942>
   81f54:	2a00      	cmp	r2, #0
   81f56:	f040 81af 	bne.w	822b8 <_vfiprintf_r+0xa94>
   81f5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81f5c:	2b00      	cmp	r3, #0
   81f5e:	f43f ae23 	beq.w	81ba8 <_vfiprintf_r+0x384>
   81f62:	2202      	movs	r2, #2
   81f64:	4608      	mov	r0, r1
   81f66:	46d1      	mov	r9, sl
   81f68:	ab0e      	add	r3, sp, #56	; 0x38
   81f6a:	921d      	str	r2, [sp, #116]	; 0x74
   81f6c:	931c      	str	r3, [sp, #112]	; 0x70
   81f6e:	4601      	mov	r1, r0
   81f70:	f109 0908 	add.w	r9, r9, #8
   81f74:	3001      	adds	r0, #1
   81f76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81f78:	2b80      	cmp	r3, #128	; 0x80
   81f7a:	f43f ae1c 	beq.w	81bb6 <_vfiprintf_r+0x392>
   81f7e:	9b05      	ldr	r3, [sp, #20]
   81f80:	1ae4      	subs	r4, r4, r3
   81f82:	2c00      	cmp	r4, #0
   81f84:	dd2f      	ble.n	81fe6 <_vfiprintf_r+0x7c2>
   81f86:	2c10      	cmp	r4, #16
   81f88:	f340 8220 	ble.w	823cc <_vfiprintf_r+0xba8>
   81f8c:	46ce      	mov	lr, r9
   81f8e:	2610      	movs	r6, #16
   81f90:	4db2      	ldr	r5, [pc, #712]	; (8225c <_vfiprintf_r+0xa38>)
   81f92:	9f06      	ldr	r7, [sp, #24]
   81f94:	f8dd 9010 	ldr.w	r9, [sp, #16]
   81f98:	e006      	b.n	81fa8 <_vfiprintf_r+0x784>
   81f9a:	1c88      	adds	r0, r1, #2
   81f9c:	4619      	mov	r1, r3
   81f9e:	f10e 0e08 	add.w	lr, lr, #8
   81fa2:	3c10      	subs	r4, #16
   81fa4:	2c10      	cmp	r4, #16
   81fa6:	dd10      	ble.n	81fca <_vfiprintf_r+0x7a6>
   81fa8:	1c4b      	adds	r3, r1, #1
   81faa:	3210      	adds	r2, #16
   81fac:	2b07      	cmp	r3, #7
   81fae:	9211      	str	r2, [sp, #68]	; 0x44
   81fb0:	e88e 0060 	stmia.w	lr, {r5, r6}
   81fb4:	9310      	str	r3, [sp, #64]	; 0x40
   81fb6:	ddf0      	ble.n	81f9a <_vfiprintf_r+0x776>
   81fb8:	2a00      	cmp	r2, #0
   81fba:	d165      	bne.n	82088 <_vfiprintf_r+0x864>
   81fbc:	3c10      	subs	r4, #16
   81fbe:	2c10      	cmp	r4, #16
   81fc0:	f04f 0001 	mov.w	r0, #1
   81fc4:	4611      	mov	r1, r2
   81fc6:	46d6      	mov	lr, sl
   81fc8:	dcee      	bgt.n	81fa8 <_vfiprintf_r+0x784>
   81fca:	46f1      	mov	r9, lr
   81fcc:	4422      	add	r2, r4
   81fce:	2807      	cmp	r0, #7
   81fd0:	9211      	str	r2, [sp, #68]	; 0x44
   81fd2:	f8c9 5000 	str.w	r5, [r9]
   81fd6:	f8c9 4004 	str.w	r4, [r9, #4]
   81fda:	9010      	str	r0, [sp, #64]	; 0x40
   81fdc:	f300 8085 	bgt.w	820ea <_vfiprintf_r+0x8c6>
   81fe0:	f109 0908 	add.w	r9, r9, #8
   81fe4:	3001      	adds	r0, #1
   81fe6:	9905      	ldr	r1, [sp, #20]
   81fe8:	2807      	cmp	r0, #7
   81fea:	440a      	add	r2, r1
   81fec:	9211      	str	r2, [sp, #68]	; 0x44
   81fee:	f8c9 b000 	str.w	fp, [r9]
   81ff2:	f8c9 1004 	str.w	r1, [r9, #4]
   81ff6:	9010      	str	r0, [sp, #64]	; 0x40
   81ff8:	f340 8082 	ble.w	82100 <_vfiprintf_r+0x8dc>
   81ffc:	2a00      	cmp	r2, #0
   81ffe:	f040 8118 	bne.w	82232 <_vfiprintf_r+0xa0e>
   82002:	9b02      	ldr	r3, [sp, #8]
   82004:	9210      	str	r2, [sp, #64]	; 0x40
   82006:	0758      	lsls	r0, r3, #29
   82008:	d535      	bpl.n	82076 <_vfiprintf_r+0x852>
   8200a:	9b08      	ldr	r3, [sp, #32]
   8200c:	9901      	ldr	r1, [sp, #4]
   8200e:	1a5c      	subs	r4, r3, r1
   82010:	2c00      	cmp	r4, #0
   82012:	f340 80e7 	ble.w	821e4 <_vfiprintf_r+0x9c0>
   82016:	46d1      	mov	r9, sl
   82018:	2c10      	cmp	r4, #16
   8201a:	f340 820d 	ble.w	82438 <_vfiprintf_r+0xc14>
   8201e:	2510      	movs	r5, #16
   82020:	9910      	ldr	r1, [sp, #64]	; 0x40
   82022:	4e8f      	ldr	r6, [pc, #572]	; (82260 <_vfiprintf_r+0xa3c>)
   82024:	9f06      	ldr	r7, [sp, #24]
   82026:	f8dd b010 	ldr.w	fp, [sp, #16]
   8202a:	e006      	b.n	8203a <_vfiprintf_r+0x816>
   8202c:	1c88      	adds	r0, r1, #2
   8202e:	4619      	mov	r1, r3
   82030:	f109 0908 	add.w	r9, r9, #8
   82034:	3c10      	subs	r4, #16
   82036:	2c10      	cmp	r4, #16
   82038:	dd11      	ble.n	8205e <_vfiprintf_r+0x83a>
   8203a:	1c4b      	adds	r3, r1, #1
   8203c:	3210      	adds	r2, #16
   8203e:	2b07      	cmp	r3, #7
   82040:	9211      	str	r2, [sp, #68]	; 0x44
   82042:	f8c9 6000 	str.w	r6, [r9]
   82046:	f8c9 5004 	str.w	r5, [r9, #4]
   8204a:	9310      	str	r3, [sp, #64]	; 0x40
   8204c:	ddee      	ble.n	8202c <_vfiprintf_r+0x808>
   8204e:	bb42      	cbnz	r2, 820a2 <_vfiprintf_r+0x87e>
   82050:	3c10      	subs	r4, #16
   82052:	2c10      	cmp	r4, #16
   82054:	f04f 0001 	mov.w	r0, #1
   82058:	4611      	mov	r1, r2
   8205a:	46d1      	mov	r9, sl
   8205c:	dced      	bgt.n	8203a <_vfiprintf_r+0x816>
   8205e:	4422      	add	r2, r4
   82060:	2807      	cmp	r0, #7
   82062:	9211      	str	r2, [sp, #68]	; 0x44
   82064:	f8c9 6000 	str.w	r6, [r9]
   82068:	f8c9 4004 	str.w	r4, [r9, #4]
   8206c:	9010      	str	r0, [sp, #64]	; 0x40
   8206e:	dd51      	ble.n	82114 <_vfiprintf_r+0x8f0>
   82070:	2a00      	cmp	r2, #0
   82072:	f040 819a 	bne.w	823aa <_vfiprintf_r+0xb86>
   82076:	9b03      	ldr	r3, [sp, #12]
   82078:	9a08      	ldr	r2, [sp, #32]
   8207a:	9901      	ldr	r1, [sp, #4]
   8207c:	428a      	cmp	r2, r1
   8207e:	bfac      	ite	ge
   82080:	189b      	addge	r3, r3, r2
   82082:	185b      	addlt	r3, r3, r1
   82084:	9303      	str	r3, [sp, #12]
   82086:	e04e      	b.n	82126 <_vfiprintf_r+0x902>
   82088:	aa0f      	add	r2, sp, #60	; 0x3c
   8208a:	4649      	mov	r1, r9
   8208c:	4638      	mov	r0, r7
   8208e:	f7ff fb89 	bl	817a4 <__sprint_r.part.0>
   82092:	2800      	cmp	r0, #0
   82094:	f040 813e 	bne.w	82314 <_vfiprintf_r+0xaf0>
   82098:	9910      	ldr	r1, [sp, #64]	; 0x40
   8209a:	46d6      	mov	lr, sl
   8209c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8209e:	1c48      	adds	r0, r1, #1
   820a0:	e77f      	b.n	81fa2 <_vfiprintf_r+0x77e>
   820a2:	aa0f      	add	r2, sp, #60	; 0x3c
   820a4:	4659      	mov	r1, fp
   820a6:	4638      	mov	r0, r7
   820a8:	f7ff fb7c 	bl	817a4 <__sprint_r.part.0>
   820ac:	b960      	cbnz	r0, 820c8 <_vfiprintf_r+0x8a4>
   820ae:	9910      	ldr	r1, [sp, #64]	; 0x40
   820b0:	46d1      	mov	r9, sl
   820b2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   820b4:	1c48      	adds	r0, r1, #1
   820b6:	e7bd      	b.n	82034 <_vfiprintf_r+0x810>
   820b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   820ba:	f8dd b010 	ldr.w	fp, [sp, #16]
   820be:	2b00      	cmp	r3, #0
   820c0:	f040 81ca 	bne.w	82458 <_vfiprintf_r+0xc34>
   820c4:	2300      	movs	r3, #0
   820c6:	9310      	str	r3, [sp, #64]	; 0x40
   820c8:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   820cc:	f013 0f01 	tst.w	r3, #1
   820d0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   820d4:	d102      	bne.n	820dc <_vfiprintf_r+0x8b8>
   820d6:	059a      	lsls	r2, r3, #22
   820d8:	f140 80dd 	bpl.w	82296 <_vfiprintf_r+0xa72>
   820dc:	065b      	lsls	r3, r3, #25
   820de:	f53f acad 	bmi.w	81a3c <_vfiprintf_r+0x218>
   820e2:	9803      	ldr	r0, [sp, #12]
   820e4:	b02d      	add	sp, #180	; 0xb4
   820e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   820ea:	2a00      	cmp	r2, #0
   820ec:	f040 8105 	bne.w	822fa <_vfiprintf_r+0xad6>
   820f0:	2301      	movs	r3, #1
   820f2:	46d1      	mov	r9, sl
   820f4:	9a05      	ldr	r2, [sp, #20]
   820f6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   820fa:	921d      	str	r2, [sp, #116]	; 0x74
   820fc:	9211      	str	r2, [sp, #68]	; 0x44
   820fe:	9310      	str	r3, [sp, #64]	; 0x40
   82100:	f109 0908 	add.w	r9, r9, #8
   82104:	9b02      	ldr	r3, [sp, #8]
   82106:	0759      	lsls	r1, r3, #29
   82108:	d504      	bpl.n	82114 <_vfiprintf_r+0x8f0>
   8210a:	9b08      	ldr	r3, [sp, #32]
   8210c:	9901      	ldr	r1, [sp, #4]
   8210e:	1a5c      	subs	r4, r3, r1
   82110:	2c00      	cmp	r4, #0
   82112:	dc81      	bgt.n	82018 <_vfiprintf_r+0x7f4>
   82114:	9b03      	ldr	r3, [sp, #12]
   82116:	9908      	ldr	r1, [sp, #32]
   82118:	9801      	ldr	r0, [sp, #4]
   8211a:	4281      	cmp	r1, r0
   8211c:	bfac      	ite	ge
   8211e:	185b      	addge	r3, r3, r1
   82120:	181b      	addlt	r3, r3, r0
   82122:	9303      	str	r3, [sp, #12]
   82124:	bb72      	cbnz	r2, 82184 <_vfiprintf_r+0x960>
   82126:	2300      	movs	r3, #0
   82128:	46d1      	mov	r9, sl
   8212a:	9310      	str	r3, [sp, #64]	; 0x40
   8212c:	f7ff bbb7 	b.w	8189e <_vfiprintf_r+0x7a>
   82130:	aa0f      	add	r2, sp, #60	; 0x3c
   82132:	9904      	ldr	r1, [sp, #16]
   82134:	4620      	mov	r0, r4
   82136:	f7ff fb35 	bl	817a4 <__sprint_r.part.0>
   8213a:	bb50      	cbnz	r0, 82192 <_vfiprintf_r+0x96e>
   8213c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8213e:	46d4      	mov	ip, sl
   82140:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82142:	f101 0e01 	add.w	lr, r1, #1
   82146:	e54a      	b.n	81bde <_vfiprintf_r+0x3ba>
   82148:	2a00      	cmp	r2, #0
   8214a:	f47f aee5 	bne.w	81f18 <_vfiprintf_r+0x6f4>
   8214e:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82152:	2900      	cmp	r1, #0
   82154:	f000 811a 	beq.w	8238c <_vfiprintf_r+0xb68>
   82158:	2201      	movs	r2, #1
   8215a:	46d1      	mov	r9, sl
   8215c:	4610      	mov	r0, r2
   8215e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82162:	921d      	str	r2, [sp, #116]	; 0x74
   82164:	911c      	str	r1, [sp, #112]	; 0x70
   82166:	4601      	mov	r1, r0
   82168:	f109 0908 	add.w	r9, r9, #8
   8216c:	3001      	adds	r0, #1
   8216e:	e508      	b.n	81b82 <_vfiprintf_r+0x35e>
   82170:	9b02      	ldr	r3, [sp, #8]
   82172:	2a01      	cmp	r2, #1
   82174:	f000 8097 	beq.w	822a6 <_vfiprintf_r+0xa82>
   82178:	2a02      	cmp	r2, #2
   8217a:	d10d      	bne.n	82198 <_vfiprintf_r+0x974>
   8217c:	9302      	str	r3, [sp, #8]
   8217e:	2600      	movs	r6, #0
   82180:	2700      	movs	r7, #0
   82182:	e5b2      	b.n	81cea <_vfiprintf_r+0x4c6>
   82184:	aa0f      	add	r2, sp, #60	; 0x3c
   82186:	9904      	ldr	r1, [sp, #16]
   82188:	9806      	ldr	r0, [sp, #24]
   8218a:	f7ff fb0b 	bl	817a4 <__sprint_r.part.0>
   8218e:	2800      	cmp	r0, #0
   82190:	d0c9      	beq.n	82126 <_vfiprintf_r+0x902>
   82192:	f8dd b010 	ldr.w	fp, [sp, #16]
   82196:	e797      	b.n	820c8 <_vfiprintf_r+0x8a4>
   82198:	2600      	movs	r6, #0
   8219a:	2700      	movs	r7, #0
   8219c:	9302      	str	r3, [sp, #8]
   8219e:	4651      	mov	r1, sl
   821a0:	e000      	b.n	821a4 <_vfiprintf_r+0x980>
   821a2:	4659      	mov	r1, fp
   821a4:	08f2      	lsrs	r2, r6, #3
   821a6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   821aa:	08f8      	lsrs	r0, r7, #3
   821ac:	f006 0307 	and.w	r3, r6, #7
   821b0:	4607      	mov	r7, r0
   821b2:	4616      	mov	r6, r2
   821b4:	3330      	adds	r3, #48	; 0x30
   821b6:	ea56 0207 	orrs.w	r2, r6, r7
   821ba:	f801 3c01 	strb.w	r3, [r1, #-1]
   821be:	f101 3bff 	add.w	fp, r1, #4294967295
   821c2:	d1ee      	bne.n	821a2 <_vfiprintf_r+0x97e>
   821c4:	9a02      	ldr	r2, [sp, #8]
   821c6:	07d6      	lsls	r6, r2, #31
   821c8:	f57f ad9f 	bpl.w	81d0a <_vfiprintf_r+0x4e6>
   821cc:	2b30      	cmp	r3, #48	; 0x30
   821ce:	f43f ad9c 	beq.w	81d0a <_vfiprintf_r+0x4e6>
   821d2:	2330      	movs	r3, #48	; 0x30
   821d4:	3902      	subs	r1, #2
   821d6:	f80b 3c01 	strb.w	r3, [fp, #-1]
   821da:	ebaa 0301 	sub.w	r3, sl, r1
   821de:	9305      	str	r3, [sp, #20]
   821e0:	468b      	mov	fp, r1
   821e2:	e477      	b.n	81ad4 <_vfiprintf_r+0x2b0>
   821e4:	9b03      	ldr	r3, [sp, #12]
   821e6:	9a08      	ldr	r2, [sp, #32]
   821e8:	428a      	cmp	r2, r1
   821ea:	bfac      	ite	ge
   821ec:	189b      	addge	r3, r3, r2
   821ee:	185b      	addlt	r3, r3, r1
   821f0:	9303      	str	r3, [sp, #12]
   821f2:	e798      	b.n	82126 <_vfiprintf_r+0x902>
   821f4:	2202      	movs	r2, #2
   821f6:	e44e      	b.n	81a96 <_vfiprintf_r+0x272>
   821f8:	2f00      	cmp	r7, #0
   821fa:	bf08      	it	eq
   821fc:	2e0a      	cmpeq	r6, #10
   821fe:	d351      	bcc.n	822a4 <_vfiprintf_r+0xa80>
   82200:	46d3      	mov	fp, sl
   82202:	4630      	mov	r0, r6
   82204:	4639      	mov	r1, r7
   82206:	220a      	movs	r2, #10
   82208:	2300      	movs	r3, #0
   8220a:	f001 fe85 	bl	83f18 <__aeabi_uldivmod>
   8220e:	3230      	adds	r2, #48	; 0x30
   82210:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82214:	4630      	mov	r0, r6
   82216:	4639      	mov	r1, r7
   82218:	2300      	movs	r3, #0
   8221a:	220a      	movs	r2, #10
   8221c:	f001 fe7c 	bl	83f18 <__aeabi_uldivmod>
   82220:	4606      	mov	r6, r0
   82222:	460f      	mov	r7, r1
   82224:	ea56 0307 	orrs.w	r3, r6, r7
   82228:	d1eb      	bne.n	82202 <_vfiprintf_r+0x9de>
   8222a:	e56e      	b.n	81d0a <_vfiprintf_r+0x4e6>
   8222c:	9405      	str	r4, [sp, #20]
   8222e:	46d3      	mov	fp, sl
   82230:	e450      	b.n	81ad4 <_vfiprintf_r+0x2b0>
   82232:	aa0f      	add	r2, sp, #60	; 0x3c
   82234:	9904      	ldr	r1, [sp, #16]
   82236:	9806      	ldr	r0, [sp, #24]
   82238:	f7ff fab4 	bl	817a4 <__sprint_r.part.0>
   8223c:	2800      	cmp	r0, #0
   8223e:	d1a8      	bne.n	82192 <_vfiprintf_r+0x96e>
   82240:	46d1      	mov	r9, sl
   82242:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82244:	e75e      	b.n	82104 <_vfiprintf_r+0x8e0>
   82246:	aa0f      	add	r2, sp, #60	; 0x3c
   82248:	9904      	ldr	r1, [sp, #16]
   8224a:	9806      	ldr	r0, [sp, #24]
   8224c:	f7ff faaa 	bl	817a4 <__sprint_r.part.0>
   82250:	2800      	cmp	r0, #0
   82252:	d19e      	bne.n	82192 <_vfiprintf_r+0x96e>
   82254:	46d1      	mov	r9, sl
   82256:	f7ff bbbb 	b.w	819d0 <_vfiprintf_r+0x1ac>
   8225a:	bf00      	nop
   8225c:	00084390 	.word	0x00084390
   82260:	00084380 	.word	0x00084380
   82264:	3104      	adds	r1, #4
   82266:	6816      	ldr	r6, [r2, #0]
   82268:	2700      	movs	r7, #0
   8226a:	2201      	movs	r2, #1
   8226c:	9107      	str	r1, [sp, #28]
   8226e:	e412      	b.n	81a96 <_vfiprintf_r+0x272>
   82270:	9807      	ldr	r0, [sp, #28]
   82272:	2700      	movs	r7, #0
   82274:	4601      	mov	r1, r0
   82276:	3104      	adds	r1, #4
   82278:	6806      	ldr	r6, [r0, #0]
   8227a:	9107      	str	r1, [sp, #28]
   8227c:	e40b      	b.n	81a96 <_vfiprintf_r+0x272>
   8227e:	680e      	ldr	r6, [r1, #0]
   82280:	3104      	adds	r1, #4
   82282:	9107      	str	r1, [sp, #28]
   82284:	2700      	movs	r7, #0
   82286:	e592      	b.n	81dae <_vfiprintf_r+0x58a>
   82288:	6816      	ldr	r6, [r2, #0]
   8228a:	3204      	adds	r2, #4
   8228c:	17f7      	asrs	r7, r6, #31
   8228e:	9207      	str	r2, [sp, #28]
   82290:	4630      	mov	r0, r6
   82292:	4639      	mov	r1, r7
   82294:	e512      	b.n	81cbc <_vfiprintf_r+0x498>
   82296:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8229a:	f000 fe75 	bl	82f88 <__retarget_lock_release_recursive>
   8229e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   822a2:	e71b      	b.n	820dc <_vfiprintf_r+0x8b8>
   822a4:	9b02      	ldr	r3, [sp, #8]
   822a6:	9302      	str	r3, [sp, #8]
   822a8:	2301      	movs	r3, #1
   822aa:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   822ae:	3630      	adds	r6, #48	; 0x30
   822b0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   822b4:	9305      	str	r3, [sp, #20]
   822b6:	e40d      	b.n	81ad4 <_vfiprintf_r+0x2b0>
   822b8:	aa0f      	add	r2, sp, #60	; 0x3c
   822ba:	9904      	ldr	r1, [sp, #16]
   822bc:	9806      	ldr	r0, [sp, #24]
   822be:	f7ff fa71 	bl	817a4 <__sprint_r.part.0>
   822c2:	2800      	cmp	r0, #0
   822c4:	f47f af65 	bne.w	82192 <_vfiprintf_r+0x96e>
   822c8:	9910      	ldr	r1, [sp, #64]	; 0x40
   822ca:	46d1      	mov	r9, sl
   822cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822ce:	1c48      	adds	r0, r1, #1
   822d0:	e457      	b.n	81b82 <_vfiprintf_r+0x35e>
   822d2:	aa0f      	add	r2, sp, #60	; 0x3c
   822d4:	9904      	ldr	r1, [sp, #16]
   822d6:	9806      	ldr	r0, [sp, #24]
   822d8:	f7ff fa64 	bl	817a4 <__sprint_r.part.0>
   822dc:	2800      	cmp	r0, #0
   822de:	f47f af58 	bne.w	82192 <_vfiprintf_r+0x96e>
   822e2:	9910      	ldr	r1, [sp, #64]	; 0x40
   822e4:	46d1      	mov	r9, sl
   822e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   822e8:	1c48      	adds	r0, r1, #1
   822ea:	e644      	b.n	81f76 <_vfiprintf_r+0x752>
   822ec:	2a00      	cmp	r2, #0
   822ee:	f040 8087 	bne.w	82400 <_vfiprintf_r+0xbdc>
   822f2:	2001      	movs	r0, #1
   822f4:	4611      	mov	r1, r2
   822f6:	46d1      	mov	r9, sl
   822f8:	e641      	b.n	81f7e <_vfiprintf_r+0x75a>
   822fa:	aa0f      	add	r2, sp, #60	; 0x3c
   822fc:	9904      	ldr	r1, [sp, #16]
   822fe:	9806      	ldr	r0, [sp, #24]
   82300:	f7ff fa50 	bl	817a4 <__sprint_r.part.0>
   82304:	2800      	cmp	r0, #0
   82306:	f47f af44 	bne.w	82192 <_vfiprintf_r+0x96e>
   8230a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8230c:	46d1      	mov	r9, sl
   8230e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82310:	3001      	adds	r0, #1
   82312:	e668      	b.n	81fe6 <_vfiprintf_r+0x7c2>
   82314:	46cb      	mov	fp, r9
   82316:	e6d7      	b.n	820c8 <_vfiprintf_r+0x8a4>
   82318:	9d07      	ldr	r5, [sp, #28]
   8231a:	3507      	adds	r5, #7
   8231c:	f025 0507 	bic.w	r5, r5, #7
   82320:	f105 0208 	add.w	r2, r5, #8
   82324:	e9d5 0100 	ldrd	r0, r1, [r5]
   82328:	9207      	str	r2, [sp, #28]
   8232a:	4606      	mov	r6, r0
   8232c:	460f      	mov	r7, r1
   8232e:	e4c5      	b.n	81cbc <_vfiprintf_r+0x498>
   82330:	9d07      	ldr	r5, [sp, #28]
   82332:	3507      	adds	r5, #7
   82334:	f025 0207 	bic.w	r2, r5, #7
   82338:	f102 0108 	add.w	r1, r2, #8
   8233c:	e9d2 6700 	ldrd	r6, r7, [r2]
   82340:	9107      	str	r1, [sp, #28]
   82342:	2201      	movs	r2, #1
   82344:	f7ff bba7 	b.w	81a96 <_vfiprintf_r+0x272>
   82348:	9d07      	ldr	r5, [sp, #28]
   8234a:	3507      	adds	r5, #7
   8234c:	f025 0207 	bic.w	r2, r5, #7
   82350:	f102 0108 	add.w	r1, r2, #8
   82354:	e9d2 6700 	ldrd	r6, r7, [r2]
   82358:	9107      	str	r1, [sp, #28]
   8235a:	2200      	movs	r2, #0
   8235c:	f7ff bb9b 	b.w	81a96 <_vfiprintf_r+0x272>
   82360:	9d07      	ldr	r5, [sp, #28]
   82362:	3507      	adds	r5, #7
   82364:	f025 0107 	bic.w	r1, r5, #7
   82368:	f101 0008 	add.w	r0, r1, #8
   8236c:	9007      	str	r0, [sp, #28]
   8236e:	e9d1 6700 	ldrd	r6, r7, [r1]
   82372:	e51c      	b.n	81dae <_vfiprintf_r+0x58a>
   82374:	46d3      	mov	fp, sl
   82376:	f7ff bbad 	b.w	81ad4 <_vfiprintf_r+0x2b0>
   8237a:	252d      	movs	r5, #45	; 0x2d
   8237c:	4276      	negs	r6, r6
   8237e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82382:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82386:	2201      	movs	r2, #1
   82388:	f7ff bb8a 	b.w	81aa0 <_vfiprintf_r+0x27c>
   8238c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8238e:	b9b3      	cbnz	r3, 823be <_vfiprintf_r+0xb9a>
   82390:	4611      	mov	r1, r2
   82392:	2001      	movs	r0, #1
   82394:	46d1      	mov	r9, sl
   82396:	e5f2      	b.n	81f7e <_vfiprintf_r+0x75a>
   82398:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8239c:	f000 fdf4 	bl	82f88 <__retarget_lock_release_recursive>
   823a0:	f04f 33ff 	mov.w	r3, #4294967295
   823a4:	9303      	str	r3, [sp, #12]
   823a6:	f7ff bb4c 	b.w	81a42 <_vfiprintf_r+0x21e>
   823aa:	aa0f      	add	r2, sp, #60	; 0x3c
   823ac:	9904      	ldr	r1, [sp, #16]
   823ae:	9806      	ldr	r0, [sp, #24]
   823b0:	f7ff f9f8 	bl	817a4 <__sprint_r.part.0>
   823b4:	2800      	cmp	r0, #0
   823b6:	f47f aeec 	bne.w	82192 <_vfiprintf_r+0x96e>
   823ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
   823bc:	e6aa      	b.n	82114 <_vfiprintf_r+0x8f0>
   823be:	2202      	movs	r2, #2
   823c0:	ab0e      	add	r3, sp, #56	; 0x38
   823c2:	921d      	str	r2, [sp, #116]	; 0x74
   823c4:	931c      	str	r3, [sp, #112]	; 0x70
   823c6:	2001      	movs	r0, #1
   823c8:	46d1      	mov	r9, sl
   823ca:	e5d0      	b.n	81f6e <_vfiprintf_r+0x74a>
   823cc:	4d34      	ldr	r5, [pc, #208]	; (824a0 <_vfiprintf_r+0xc7c>)
   823ce:	e5fd      	b.n	81fcc <_vfiprintf_r+0x7a8>
   823d0:	9a07      	ldr	r2, [sp, #28]
   823d2:	4613      	mov	r3, r2
   823d4:	3304      	adds	r3, #4
   823d6:	9307      	str	r3, [sp, #28]
   823d8:	9b03      	ldr	r3, [sp, #12]
   823da:	6811      	ldr	r1, [r2, #0]
   823dc:	17dd      	asrs	r5, r3, #31
   823de:	461a      	mov	r2, r3
   823e0:	462b      	mov	r3, r5
   823e2:	e9c1 2300 	strd	r2, r3, [r1]
   823e6:	f7ff ba5a 	b.w	8189e <_vfiprintf_r+0x7a>
   823ea:	4658      	mov	r0, fp
   823ec:	9507      	str	r5, [sp, #28]
   823ee:	9302      	str	r3, [sp, #8]
   823f0:	f7ff f9aa 	bl	81748 <strlen>
   823f4:	2400      	movs	r4, #0
   823f6:	9005      	str	r0, [sp, #20]
   823f8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   823fc:	f7ff bb6a 	b.w	81ad4 <_vfiprintf_r+0x2b0>
   82400:	aa0f      	add	r2, sp, #60	; 0x3c
   82402:	9904      	ldr	r1, [sp, #16]
   82404:	9806      	ldr	r0, [sp, #24]
   82406:	f7ff f9cd 	bl	817a4 <__sprint_r.part.0>
   8240a:	2800      	cmp	r0, #0
   8240c:	f47f aec1 	bne.w	82192 <_vfiprintf_r+0x96e>
   82410:	9910      	ldr	r1, [sp, #64]	; 0x40
   82412:	46d1      	mov	r9, sl
   82414:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82416:	1c48      	adds	r0, r1, #1
   82418:	e5b1      	b.n	81f7e <_vfiprintf_r+0x75a>
   8241a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8241c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8241e:	3101      	adds	r1, #1
   82420:	4e20      	ldr	r6, [pc, #128]	; (824a4 <_vfiprintf_r+0xc80>)
   82422:	f7ff bb9c 	b.w	81b5e <_vfiprintf_r+0x33a>
   82426:	2c06      	cmp	r4, #6
   82428:	bf28      	it	cs
   8242a:	2406      	movcs	r4, #6
   8242c:	9507      	str	r5, [sp, #28]
   8242e:	9405      	str	r4, [sp, #20]
   82430:	9401      	str	r4, [sp, #4]
   82432:	f8df b074 	ldr.w	fp, [pc, #116]	; 824a8 <_vfiprintf_r+0xc84>
   82436:	e4e3      	b.n	81e00 <_vfiprintf_r+0x5dc>
   82438:	9810      	ldr	r0, [sp, #64]	; 0x40
   8243a:	4e1a      	ldr	r6, [pc, #104]	; (824a4 <_vfiprintf_r+0xc80>)
   8243c:	3001      	adds	r0, #1
   8243e:	e60e      	b.n	8205e <_vfiprintf_r+0x83a>
   82440:	4686      	mov	lr, r0
   82442:	4d17      	ldr	r5, [pc, #92]	; (824a0 <_vfiprintf_r+0xc7c>)
   82444:	f7ff bbe2 	b.w	81c0c <_vfiprintf_r+0x3e8>
   82448:	9405      	str	r4, [sp, #20]
   8244a:	9507      	str	r5, [sp, #28]
   8244c:	9302      	str	r3, [sp, #8]
   8244e:	4604      	mov	r4, r0
   82450:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82454:	f7ff bb3e 	b.w	81ad4 <_vfiprintf_r+0x2b0>
   82458:	9806      	ldr	r0, [sp, #24]
   8245a:	aa0f      	add	r2, sp, #60	; 0x3c
   8245c:	4659      	mov	r1, fp
   8245e:	f7ff f9a1 	bl	817a4 <__sprint_r.part.0>
   82462:	2800      	cmp	r0, #0
   82464:	f43f ae2e 	beq.w	820c4 <_vfiprintf_r+0x8a0>
   82468:	e62e      	b.n	820c8 <_vfiprintf_r+0x8a4>
   8246a:	9907      	ldr	r1, [sp, #28]
   8246c:	f898 2001 	ldrb.w	r2, [r8, #1]
   82470:	680c      	ldr	r4, [r1, #0]
   82472:	3104      	adds	r1, #4
   82474:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82478:	46b8      	mov	r8, r7
   8247a:	9107      	str	r1, [sp, #28]
   8247c:	f7ff ba44 	b.w	81908 <_vfiprintf_r+0xe4>
   82480:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82484:	e4a7      	b.n	81dd6 <_vfiprintf_r+0x5b2>
   82486:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8248a:	e521      	b.n	81ed0 <_vfiprintf_r+0x6ac>
   8248c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82490:	e47c      	b.n	81d8c <_vfiprintf_r+0x568>
   82492:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82496:	e43f      	b.n	81d18 <_vfiprintf_r+0x4f4>
   82498:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8249c:	f7ff bbfa 	b.w	81c94 <_vfiprintf_r+0x470>
   824a0:	00084390 	.word	0x00084390
   824a4:	00084380 	.word	0x00084380
   824a8:	00084378 	.word	0x00084378

000824ac <__sbprintf>:
   824ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   824b0:	460c      	mov	r4, r1
   824b2:	f04f 0e00 	mov.w	lr, #0
   824b6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   824ba:	4606      	mov	r6, r0
   824bc:	4617      	mov	r7, r2
   824be:	4698      	mov	r8, r3
   824c0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   824c2:	89e3      	ldrh	r3, [r4, #14]
   824c4:	8989      	ldrh	r1, [r1, #12]
   824c6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   824ca:	f021 0102 	bic.w	r1, r1, #2
   824ce:	9219      	str	r2, [sp, #100]	; 0x64
   824d0:	f8ad 300e 	strh.w	r3, [sp, #14]
   824d4:	69e2      	ldr	r2, [r4, #28]
   824d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   824d8:	f8ad 100c 	strh.w	r1, [sp, #12]
   824dc:	a816      	add	r0, sp, #88	; 0x58
   824de:	a91a      	add	r1, sp, #104	; 0x68
   824e0:	f8cd e018 	str.w	lr, [sp, #24]
   824e4:	9207      	str	r2, [sp, #28]
   824e6:	9309      	str	r3, [sp, #36]	; 0x24
   824e8:	9100      	str	r1, [sp, #0]
   824ea:	9104      	str	r1, [sp, #16]
   824ec:	9502      	str	r5, [sp, #8]
   824ee:	9505      	str	r5, [sp, #20]
   824f0:	f000 fd44 	bl	82f7c <__retarget_lock_init_recursive>
   824f4:	4643      	mov	r3, r8
   824f6:	463a      	mov	r2, r7
   824f8:	4669      	mov	r1, sp
   824fa:	4630      	mov	r0, r6
   824fc:	f7ff f992 	bl	81824 <_vfiprintf_r>
   82500:	1e05      	subs	r5, r0, #0
   82502:	db07      	blt.n	82514 <__sbprintf+0x68>
   82504:	4630      	mov	r0, r6
   82506:	4669      	mov	r1, sp
   82508:	f000 f924 	bl	82754 <_fflush_r>
   8250c:	2800      	cmp	r0, #0
   8250e:	bf18      	it	ne
   82510:	f04f 35ff 	movne.w	r5, #4294967295
   82514:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82518:	065b      	lsls	r3, r3, #25
   8251a:	d503      	bpl.n	82524 <__sbprintf+0x78>
   8251c:	89a3      	ldrh	r3, [r4, #12]
   8251e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82522:	81a3      	strh	r3, [r4, #12]
   82524:	9816      	ldr	r0, [sp, #88]	; 0x58
   82526:	f000 fd2b 	bl	82f80 <__retarget_lock_close_recursive>
   8252a:	4628      	mov	r0, r5
   8252c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082534 <__swsetup_r>:
   82534:	b538      	push	{r3, r4, r5, lr}
   82536:	4b30      	ldr	r3, [pc, #192]	; (825f8 <__swsetup_r+0xc4>)
   82538:	4605      	mov	r5, r0
   8253a:	6818      	ldr	r0, [r3, #0]
   8253c:	460c      	mov	r4, r1
   8253e:	b110      	cbz	r0, 82546 <__swsetup_r+0x12>
   82540:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82542:	2b00      	cmp	r3, #0
   82544:	d038      	beq.n	825b8 <__swsetup_r+0x84>
   82546:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8254a:	b293      	uxth	r3, r2
   8254c:	0718      	lsls	r0, r3, #28
   8254e:	d50c      	bpl.n	8256a <__swsetup_r+0x36>
   82550:	6920      	ldr	r0, [r4, #16]
   82552:	b1a8      	cbz	r0, 82580 <__swsetup_r+0x4c>
   82554:	f013 0201 	ands.w	r2, r3, #1
   82558:	d01e      	beq.n	82598 <__swsetup_r+0x64>
   8255a:	2200      	movs	r2, #0
   8255c:	6963      	ldr	r3, [r4, #20]
   8255e:	60a2      	str	r2, [r4, #8]
   82560:	425b      	negs	r3, r3
   82562:	61a3      	str	r3, [r4, #24]
   82564:	b1f0      	cbz	r0, 825a4 <__swsetup_r+0x70>
   82566:	2000      	movs	r0, #0
   82568:	bd38      	pop	{r3, r4, r5, pc}
   8256a:	06d9      	lsls	r1, r3, #27
   8256c:	d53b      	bpl.n	825e6 <__swsetup_r+0xb2>
   8256e:	0758      	lsls	r0, r3, #29
   82570:	d425      	bmi.n	825be <__swsetup_r+0x8a>
   82572:	6920      	ldr	r0, [r4, #16]
   82574:	f042 0308 	orr.w	r3, r2, #8
   82578:	81a3      	strh	r3, [r4, #12]
   8257a:	b29b      	uxth	r3, r3
   8257c:	2800      	cmp	r0, #0
   8257e:	d1e9      	bne.n	82554 <__swsetup_r+0x20>
   82580:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82584:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82588:	d0e4      	beq.n	82554 <__swsetup_r+0x20>
   8258a:	4628      	mov	r0, r5
   8258c:	4621      	mov	r1, r4
   8258e:	f000 fd2b 	bl	82fe8 <__smakebuf_r>
   82592:	89a3      	ldrh	r3, [r4, #12]
   82594:	6920      	ldr	r0, [r4, #16]
   82596:	e7dd      	b.n	82554 <__swsetup_r+0x20>
   82598:	0799      	lsls	r1, r3, #30
   8259a:	bf58      	it	pl
   8259c:	6962      	ldrpl	r2, [r4, #20]
   8259e:	60a2      	str	r2, [r4, #8]
   825a0:	2800      	cmp	r0, #0
   825a2:	d1e0      	bne.n	82566 <__swsetup_r+0x32>
   825a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   825a8:	061a      	lsls	r2, r3, #24
   825aa:	d5dd      	bpl.n	82568 <__swsetup_r+0x34>
   825ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   825b0:	81a3      	strh	r3, [r4, #12]
   825b2:	f04f 30ff 	mov.w	r0, #4294967295
   825b6:	bd38      	pop	{r3, r4, r5, pc}
   825b8:	f000 f924 	bl	82804 <__sinit>
   825bc:	e7c3      	b.n	82546 <__swsetup_r+0x12>
   825be:	6b21      	ldr	r1, [r4, #48]	; 0x30
   825c0:	b151      	cbz	r1, 825d8 <__swsetup_r+0xa4>
   825c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   825c6:	4299      	cmp	r1, r3
   825c8:	d004      	beq.n	825d4 <__swsetup_r+0xa0>
   825ca:	4628      	mov	r0, r5
   825cc:	f000 fa40 	bl	82a50 <_free_r>
   825d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   825d4:	2300      	movs	r3, #0
   825d6:	6323      	str	r3, [r4, #48]	; 0x30
   825d8:	2300      	movs	r3, #0
   825da:	6920      	ldr	r0, [r4, #16]
   825dc:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   825e0:	e884 0009 	stmia.w	r4, {r0, r3}
   825e4:	e7c6      	b.n	82574 <__swsetup_r+0x40>
   825e6:	2309      	movs	r3, #9
   825e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   825ec:	602b      	str	r3, [r5, #0]
   825ee:	f04f 30ff 	mov.w	r0, #4294967295
   825f2:	81a2      	strh	r2, [r4, #12]
   825f4:	bd38      	pop	{r3, r4, r5, pc}
   825f6:	bf00      	nop
   825f8:	20070134 	.word	0x20070134

000825fc <register_fini>:
   825fc:	4b02      	ldr	r3, [pc, #8]	; (82608 <register_fini+0xc>)
   825fe:	b113      	cbz	r3, 82606 <register_fini+0xa>
   82600:	4802      	ldr	r0, [pc, #8]	; (8260c <register_fini+0x10>)
   82602:	f000 b805 	b.w	82610 <atexit>
   82606:	4770      	bx	lr
   82608:	00000000 	.word	0x00000000
   8260c:	0008287d 	.word	0x0008287d

00082610 <atexit>:
   82610:	2300      	movs	r3, #0
   82612:	4601      	mov	r1, r0
   82614:	461a      	mov	r2, r3
   82616:	4618      	mov	r0, r3
   82618:	f001 bb56 	b.w	83cc8 <__register_exitproc>

0008261c <__sflush_r>:
   8261c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82624:	b29a      	uxth	r2, r3
   82626:	460d      	mov	r5, r1
   82628:	0711      	lsls	r1, r2, #28
   8262a:	4680      	mov	r8, r0
   8262c:	d43a      	bmi.n	826a4 <__sflush_r+0x88>
   8262e:	686a      	ldr	r2, [r5, #4]
   82630:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82634:	2a00      	cmp	r2, #0
   82636:	81ab      	strh	r3, [r5, #12]
   82638:	dd70      	ble.n	8271c <__sflush_r+0x100>
   8263a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   8263c:	2c00      	cmp	r4, #0
   8263e:	d04a      	beq.n	826d6 <__sflush_r+0xba>
   82640:	2200      	movs	r2, #0
   82642:	b29b      	uxth	r3, r3
   82644:	f8d8 6000 	ldr.w	r6, [r8]
   82648:	f8c8 2000 	str.w	r2, [r8]
   8264c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82650:	d068      	beq.n	82724 <__sflush_r+0x108>
   82652:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82654:	075f      	lsls	r7, r3, #29
   82656:	d505      	bpl.n	82664 <__sflush_r+0x48>
   82658:	6869      	ldr	r1, [r5, #4]
   8265a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   8265c:	1a52      	subs	r2, r2, r1
   8265e:	b10b      	cbz	r3, 82664 <__sflush_r+0x48>
   82660:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82662:	1ad2      	subs	r2, r2, r3
   82664:	2300      	movs	r3, #0
   82666:	69e9      	ldr	r1, [r5, #28]
   82668:	4640      	mov	r0, r8
   8266a:	47a0      	blx	r4
   8266c:	1c44      	adds	r4, r0, #1
   8266e:	d03d      	beq.n	826ec <__sflush_r+0xd0>
   82670:	2100      	movs	r1, #0
   82672:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82676:	692a      	ldr	r2, [r5, #16]
   82678:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8267c:	81ab      	strh	r3, [r5, #12]
   8267e:	04db      	lsls	r3, r3, #19
   82680:	6069      	str	r1, [r5, #4]
   82682:	602a      	str	r2, [r5, #0]
   82684:	d448      	bmi.n	82718 <__sflush_r+0xfc>
   82686:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82688:	f8c8 6000 	str.w	r6, [r8]
   8268c:	b319      	cbz	r1, 826d6 <__sflush_r+0xba>
   8268e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82692:	4299      	cmp	r1, r3
   82694:	d002      	beq.n	8269c <__sflush_r+0x80>
   82696:	4640      	mov	r0, r8
   82698:	f000 f9da 	bl	82a50 <_free_r>
   8269c:	2000      	movs	r0, #0
   8269e:	6328      	str	r0, [r5, #48]	; 0x30
   826a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826a4:	692e      	ldr	r6, [r5, #16]
   826a6:	b1b6      	cbz	r6, 826d6 <__sflush_r+0xba>
   826a8:	0791      	lsls	r1, r2, #30
   826aa:	bf18      	it	ne
   826ac:	2300      	movne	r3, #0
   826ae:	682c      	ldr	r4, [r5, #0]
   826b0:	bf08      	it	eq
   826b2:	696b      	ldreq	r3, [r5, #20]
   826b4:	602e      	str	r6, [r5, #0]
   826b6:	1ba4      	subs	r4, r4, r6
   826b8:	60ab      	str	r3, [r5, #8]
   826ba:	e00a      	b.n	826d2 <__sflush_r+0xb6>
   826bc:	4623      	mov	r3, r4
   826be:	4632      	mov	r2, r6
   826c0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   826c2:	69e9      	ldr	r1, [r5, #28]
   826c4:	4640      	mov	r0, r8
   826c6:	47b8      	blx	r7
   826c8:	2800      	cmp	r0, #0
   826ca:	eba4 0400 	sub.w	r4, r4, r0
   826ce:	4406      	add	r6, r0
   826d0:	dd04      	ble.n	826dc <__sflush_r+0xc0>
   826d2:	2c00      	cmp	r4, #0
   826d4:	dcf2      	bgt.n	826bc <__sflush_r+0xa0>
   826d6:	2000      	movs	r0, #0
   826d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826dc:	89ab      	ldrh	r3, [r5, #12]
   826de:	f04f 30ff 	mov.w	r0, #4294967295
   826e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   826e6:	81ab      	strh	r3, [r5, #12]
   826e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   826ec:	f8d8 4000 	ldr.w	r4, [r8]
   826f0:	2c1d      	cmp	r4, #29
   826f2:	d8f3      	bhi.n	826dc <__sflush_r+0xc0>
   826f4:	4b16      	ldr	r3, [pc, #88]	; (82750 <__sflush_r+0x134>)
   826f6:	40e3      	lsrs	r3, r4
   826f8:	43db      	mvns	r3, r3
   826fa:	f013 0301 	ands.w	r3, r3, #1
   826fe:	d1ed      	bne.n	826dc <__sflush_r+0xc0>
   82700:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82704:	6929      	ldr	r1, [r5, #16]
   82706:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8270a:	81aa      	strh	r2, [r5, #12]
   8270c:	04d2      	lsls	r2, r2, #19
   8270e:	606b      	str	r3, [r5, #4]
   82710:	6029      	str	r1, [r5, #0]
   82712:	d5b8      	bpl.n	82686 <__sflush_r+0x6a>
   82714:	2c00      	cmp	r4, #0
   82716:	d1b6      	bne.n	82686 <__sflush_r+0x6a>
   82718:	6528      	str	r0, [r5, #80]	; 0x50
   8271a:	e7b4      	b.n	82686 <__sflush_r+0x6a>
   8271c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8271e:	2a00      	cmp	r2, #0
   82720:	dc8b      	bgt.n	8263a <__sflush_r+0x1e>
   82722:	e7d8      	b.n	826d6 <__sflush_r+0xba>
   82724:	2301      	movs	r3, #1
   82726:	69e9      	ldr	r1, [r5, #28]
   82728:	4640      	mov	r0, r8
   8272a:	47a0      	blx	r4
   8272c:	1c43      	adds	r3, r0, #1
   8272e:	4602      	mov	r2, r0
   82730:	d002      	beq.n	82738 <__sflush_r+0x11c>
   82732:	89ab      	ldrh	r3, [r5, #12]
   82734:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82736:	e78d      	b.n	82654 <__sflush_r+0x38>
   82738:	f8d8 3000 	ldr.w	r3, [r8]
   8273c:	2b00      	cmp	r3, #0
   8273e:	d0f8      	beq.n	82732 <__sflush_r+0x116>
   82740:	2b1d      	cmp	r3, #29
   82742:	d001      	beq.n	82748 <__sflush_r+0x12c>
   82744:	2b16      	cmp	r3, #22
   82746:	d1c9      	bne.n	826dc <__sflush_r+0xc0>
   82748:	f8c8 6000 	str.w	r6, [r8]
   8274c:	e7c3      	b.n	826d6 <__sflush_r+0xba>
   8274e:	bf00      	nop
   82750:	20400001 	.word	0x20400001

00082754 <_fflush_r>:
   82754:	b538      	push	{r3, r4, r5, lr}
   82756:	460d      	mov	r5, r1
   82758:	4604      	mov	r4, r0
   8275a:	b108      	cbz	r0, 82760 <_fflush_r+0xc>
   8275c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8275e:	b1bb      	cbz	r3, 82790 <_fflush_r+0x3c>
   82760:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82764:	b188      	cbz	r0, 8278a <_fflush_r+0x36>
   82766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82768:	07db      	lsls	r3, r3, #31
   8276a:	d401      	bmi.n	82770 <_fflush_r+0x1c>
   8276c:	0581      	lsls	r1, r0, #22
   8276e:	d517      	bpl.n	827a0 <_fflush_r+0x4c>
   82770:	4620      	mov	r0, r4
   82772:	4629      	mov	r1, r5
   82774:	f7ff ff52 	bl	8261c <__sflush_r>
   82778:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   8277a:	4604      	mov	r4, r0
   8277c:	07da      	lsls	r2, r3, #31
   8277e:	d402      	bmi.n	82786 <_fflush_r+0x32>
   82780:	89ab      	ldrh	r3, [r5, #12]
   82782:	059b      	lsls	r3, r3, #22
   82784:	d507      	bpl.n	82796 <_fflush_r+0x42>
   82786:	4620      	mov	r0, r4
   82788:	bd38      	pop	{r3, r4, r5, pc}
   8278a:	4604      	mov	r4, r0
   8278c:	4620      	mov	r0, r4
   8278e:	bd38      	pop	{r3, r4, r5, pc}
   82790:	f000 f838 	bl	82804 <__sinit>
   82794:	e7e4      	b.n	82760 <_fflush_r+0xc>
   82796:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82798:	f000 fbf6 	bl	82f88 <__retarget_lock_release_recursive>
   8279c:	4620      	mov	r0, r4
   8279e:	bd38      	pop	{r3, r4, r5, pc}
   827a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   827a2:	f000 fbef 	bl	82f84 <__retarget_lock_acquire_recursive>
   827a6:	e7e3      	b.n	82770 <_fflush_r+0x1c>

000827a8 <_cleanup_r>:
   827a8:	4901      	ldr	r1, [pc, #4]	; (827b0 <_cleanup_r+0x8>)
   827aa:	f000 bbb1 	b.w	82f10 <_fwalk_reent>
   827ae:	bf00      	nop
   827b0:	00083db1 	.word	0x00083db1

000827b4 <std.isra.0>:
   827b4:	2300      	movs	r3, #0
   827b6:	b510      	push	{r4, lr}
   827b8:	4604      	mov	r4, r0
   827ba:	8181      	strh	r1, [r0, #12]
   827bc:	81c2      	strh	r2, [r0, #14]
   827be:	6003      	str	r3, [r0, #0]
   827c0:	6043      	str	r3, [r0, #4]
   827c2:	6083      	str	r3, [r0, #8]
   827c4:	6643      	str	r3, [r0, #100]	; 0x64
   827c6:	6103      	str	r3, [r0, #16]
   827c8:	6143      	str	r3, [r0, #20]
   827ca:	6183      	str	r3, [r0, #24]
   827cc:	4619      	mov	r1, r3
   827ce:	2208      	movs	r2, #8
   827d0:	305c      	adds	r0, #92	; 0x5c
   827d2:	f7fe fe9b 	bl	8150c <memset>
   827d6:	4807      	ldr	r0, [pc, #28]	; (827f4 <std.isra.0+0x40>)
   827d8:	4907      	ldr	r1, [pc, #28]	; (827f8 <std.isra.0+0x44>)
   827da:	4a08      	ldr	r2, [pc, #32]	; (827fc <std.isra.0+0x48>)
   827dc:	4b08      	ldr	r3, [pc, #32]	; (82800 <std.isra.0+0x4c>)
   827de:	6220      	str	r0, [r4, #32]
   827e0:	61e4      	str	r4, [r4, #28]
   827e2:	6261      	str	r1, [r4, #36]	; 0x24
   827e4:	62a2      	str	r2, [r4, #40]	; 0x28
   827e6:	62e3      	str	r3, [r4, #44]	; 0x2c
   827e8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   827ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   827f0:	f000 bbc4 	b.w	82f7c <__retarget_lock_init_recursive>
   827f4:	00083af9 	.word	0x00083af9
   827f8:	00083b1d 	.word	0x00083b1d
   827fc:	00083b59 	.word	0x00083b59
   82800:	00083b79 	.word	0x00083b79

00082804 <__sinit>:
   82804:	b510      	push	{r4, lr}
   82806:	4604      	mov	r4, r0
   82808:	4814      	ldr	r0, [pc, #80]	; (8285c <__sinit+0x58>)
   8280a:	f000 fbbb 	bl	82f84 <__retarget_lock_acquire_recursive>
   8280e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82810:	b9fa      	cbnz	r2, 82852 <__sinit+0x4e>
   82812:	2003      	movs	r0, #3
   82814:	4912      	ldr	r1, [pc, #72]	; (82860 <__sinit+0x5c>)
   82816:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8281a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8281e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82822:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82826:	63e1      	str	r1, [r4, #60]	; 0x3c
   82828:	6860      	ldr	r0, [r4, #4]
   8282a:	2104      	movs	r1, #4
   8282c:	f7ff ffc2 	bl	827b4 <std.isra.0>
   82830:	68a0      	ldr	r0, [r4, #8]
   82832:	2201      	movs	r2, #1
   82834:	2109      	movs	r1, #9
   82836:	f7ff ffbd 	bl	827b4 <std.isra.0>
   8283a:	68e0      	ldr	r0, [r4, #12]
   8283c:	2202      	movs	r2, #2
   8283e:	2112      	movs	r1, #18
   82840:	f7ff ffb8 	bl	827b4 <std.isra.0>
   82844:	2301      	movs	r3, #1
   82846:	4805      	ldr	r0, [pc, #20]	; (8285c <__sinit+0x58>)
   82848:	63a3      	str	r3, [r4, #56]	; 0x38
   8284a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8284e:	f000 bb9b 	b.w	82f88 <__retarget_lock_release_recursive>
   82852:	4802      	ldr	r0, [pc, #8]	; (8285c <__sinit+0x58>)
   82854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82858:	f000 bb96 	b.w	82f88 <__retarget_lock_release_recursive>
   8285c:	20070c90 	.word	0x20070c90
   82860:	000827a9 	.word	0x000827a9

00082864 <__sfp_lock_acquire>:
   82864:	4801      	ldr	r0, [pc, #4]	; (8286c <__sfp_lock_acquire+0x8>)
   82866:	f000 bb8d 	b.w	82f84 <__retarget_lock_acquire_recursive>
   8286a:	bf00      	nop
   8286c:	20070ca4 	.word	0x20070ca4

00082870 <__sfp_lock_release>:
   82870:	4801      	ldr	r0, [pc, #4]	; (82878 <__sfp_lock_release+0x8>)
   82872:	f000 bb89 	b.w	82f88 <__retarget_lock_release_recursive>
   82876:	bf00      	nop
   82878:	20070ca4 	.word	0x20070ca4

0008287c <__libc_fini_array>:
   8287c:	b538      	push	{r3, r4, r5, lr}
   8287e:	4c0a      	ldr	r4, [pc, #40]	; (828a8 <__libc_fini_array+0x2c>)
   82880:	4d0a      	ldr	r5, [pc, #40]	; (828ac <__libc_fini_array+0x30>)
   82882:	1b64      	subs	r4, r4, r5
   82884:	10a4      	asrs	r4, r4, #2
   82886:	d00a      	beq.n	8289e <__libc_fini_array+0x22>
   82888:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8288c:	3b01      	subs	r3, #1
   8288e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82892:	3c01      	subs	r4, #1
   82894:	f855 3904 	ldr.w	r3, [r5], #-4
   82898:	4798      	blx	r3
   8289a:	2c00      	cmp	r4, #0
   8289c:	d1f9      	bne.n	82892 <__libc_fini_array+0x16>
   8289e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   828a2:	f001 be11 	b.w	844c8 <_fini>
   828a6:	bf00      	nop
   828a8:	000844d8 	.word	0x000844d8
   828ac:	000844d4 	.word	0x000844d4

000828b0 <__fputwc>:
   828b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   828b4:	b083      	sub	sp, #12
   828b6:	4607      	mov	r7, r0
   828b8:	4688      	mov	r8, r1
   828ba:	4614      	mov	r4, r2
   828bc:	f000 fb50 	bl	82f60 <__locale_mb_cur_max>
   828c0:	2801      	cmp	r0, #1
   828c2:	d033      	beq.n	8292c <__fputwc+0x7c>
   828c4:	4642      	mov	r2, r8
   828c6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   828ca:	a901      	add	r1, sp, #4
   828cc:	4638      	mov	r0, r7
   828ce:	f001 f9af 	bl	83c30 <_wcrtomb_r>
   828d2:	1c42      	adds	r2, r0, #1
   828d4:	4606      	mov	r6, r0
   828d6:	d022      	beq.n	8291e <__fputwc+0x6e>
   828d8:	b390      	cbz	r0, 82940 <__fputwc+0x90>
   828da:	f89d 1004 	ldrb.w	r1, [sp, #4]
   828de:	2500      	movs	r5, #0
   828e0:	f10d 0904 	add.w	r9, sp, #4
   828e4:	e008      	b.n	828f8 <__fputwc+0x48>
   828e6:	6823      	ldr	r3, [r4, #0]
   828e8:	1c5a      	adds	r2, r3, #1
   828ea:	6022      	str	r2, [r4, #0]
   828ec:	7019      	strb	r1, [r3, #0]
   828ee:	3501      	adds	r5, #1
   828f0:	42b5      	cmp	r5, r6
   828f2:	d225      	bcs.n	82940 <__fputwc+0x90>
   828f4:	f815 1009 	ldrb.w	r1, [r5, r9]
   828f8:	68a3      	ldr	r3, [r4, #8]
   828fa:	3b01      	subs	r3, #1
   828fc:	2b00      	cmp	r3, #0
   828fe:	60a3      	str	r3, [r4, #8]
   82900:	daf1      	bge.n	828e6 <__fputwc+0x36>
   82902:	69a2      	ldr	r2, [r4, #24]
   82904:	4293      	cmp	r3, r2
   82906:	db01      	blt.n	8290c <__fputwc+0x5c>
   82908:	290a      	cmp	r1, #10
   8290a:	d1ec      	bne.n	828e6 <__fputwc+0x36>
   8290c:	4622      	mov	r2, r4
   8290e:	4638      	mov	r0, r7
   82910:	f001 f936 	bl	83b80 <__swbuf_r>
   82914:	1c43      	adds	r3, r0, #1
   82916:	d1ea      	bne.n	828ee <__fputwc+0x3e>
   82918:	b003      	add	sp, #12
   8291a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8291e:	89a3      	ldrh	r3, [r4, #12]
   82920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82924:	81a3      	strh	r3, [r4, #12]
   82926:	b003      	add	sp, #12
   82928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8292c:	f108 33ff 	add.w	r3, r8, #4294967295
   82930:	2bfe      	cmp	r3, #254	; 0xfe
   82932:	d8c7      	bhi.n	828c4 <__fputwc+0x14>
   82934:	fa5f f188 	uxtb.w	r1, r8
   82938:	4606      	mov	r6, r0
   8293a:	f88d 1004 	strb.w	r1, [sp, #4]
   8293e:	e7ce      	b.n	828de <__fputwc+0x2e>
   82940:	4640      	mov	r0, r8
   82942:	b003      	add	sp, #12
   82944:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082948 <_fputwc_r>:
   82948:	b530      	push	{r4, r5, lr}
   8294a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8294c:	4614      	mov	r4, r2
   8294e:	f013 0f01 	tst.w	r3, #1
   82952:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82956:	b083      	sub	sp, #12
   82958:	4605      	mov	r5, r0
   8295a:	b29a      	uxth	r2, r3
   8295c:	d101      	bne.n	82962 <_fputwc_r+0x1a>
   8295e:	0590      	lsls	r0, r2, #22
   82960:	d51c      	bpl.n	8299c <_fputwc_r+0x54>
   82962:	0490      	lsls	r0, r2, #18
   82964:	d406      	bmi.n	82974 <_fputwc_r+0x2c>
   82966:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8296c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82970:	81a3      	strh	r3, [r4, #12]
   82972:	6662      	str	r2, [r4, #100]	; 0x64
   82974:	4628      	mov	r0, r5
   82976:	4622      	mov	r2, r4
   82978:	f7ff ff9a 	bl	828b0 <__fputwc>
   8297c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8297e:	4605      	mov	r5, r0
   82980:	07da      	lsls	r2, r3, #31
   82982:	d402      	bmi.n	8298a <_fputwc_r+0x42>
   82984:	89a3      	ldrh	r3, [r4, #12]
   82986:	059b      	lsls	r3, r3, #22
   82988:	d502      	bpl.n	82990 <_fputwc_r+0x48>
   8298a:	4628      	mov	r0, r5
   8298c:	b003      	add	sp, #12
   8298e:	bd30      	pop	{r4, r5, pc}
   82990:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82992:	f000 faf9 	bl	82f88 <__retarget_lock_release_recursive>
   82996:	4628      	mov	r0, r5
   82998:	b003      	add	sp, #12
   8299a:	bd30      	pop	{r4, r5, pc}
   8299c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8299e:	9101      	str	r1, [sp, #4]
   829a0:	f000 faf0 	bl	82f84 <__retarget_lock_acquire_recursive>
   829a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829a8:	9901      	ldr	r1, [sp, #4]
   829aa:	b29a      	uxth	r2, r3
   829ac:	e7d9      	b.n	82962 <_fputwc_r+0x1a>
   829ae:	bf00      	nop

000829b0 <_malloc_trim_r>:
   829b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   829b2:	460c      	mov	r4, r1
   829b4:	4f23      	ldr	r7, [pc, #140]	; (82a44 <_malloc_trim_r+0x94>)
   829b6:	4606      	mov	r6, r0
   829b8:	f000 feca 	bl	83750 <__malloc_lock>
   829bc:	68bb      	ldr	r3, [r7, #8]
   829be:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   829c2:	685d      	ldr	r5, [r3, #4]
   829c4:	310f      	adds	r1, #15
   829c6:	f025 0503 	bic.w	r5, r5, #3
   829ca:	4429      	add	r1, r5
   829cc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   829d0:	f021 010f 	bic.w	r1, r1, #15
   829d4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   829d8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   829dc:	db07      	blt.n	829ee <_malloc_trim_r+0x3e>
   829de:	2100      	movs	r1, #0
   829e0:	4630      	mov	r0, r6
   829e2:	f001 f877 	bl	83ad4 <_sbrk_r>
   829e6:	68bb      	ldr	r3, [r7, #8]
   829e8:	442b      	add	r3, r5
   829ea:	4298      	cmp	r0, r3
   829ec:	d004      	beq.n	829f8 <_malloc_trim_r+0x48>
   829ee:	4630      	mov	r0, r6
   829f0:	f000 feb4 	bl	8375c <__malloc_unlock>
   829f4:	2000      	movs	r0, #0
   829f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   829f8:	4261      	negs	r1, r4
   829fa:	4630      	mov	r0, r6
   829fc:	f001 f86a 	bl	83ad4 <_sbrk_r>
   82a00:	3001      	adds	r0, #1
   82a02:	d00d      	beq.n	82a20 <_malloc_trim_r+0x70>
   82a04:	4b10      	ldr	r3, [pc, #64]	; (82a48 <_malloc_trim_r+0x98>)
   82a06:	68ba      	ldr	r2, [r7, #8]
   82a08:	6819      	ldr	r1, [r3, #0]
   82a0a:	1b2d      	subs	r5, r5, r4
   82a0c:	f045 0501 	orr.w	r5, r5, #1
   82a10:	4630      	mov	r0, r6
   82a12:	1b09      	subs	r1, r1, r4
   82a14:	6055      	str	r5, [r2, #4]
   82a16:	6019      	str	r1, [r3, #0]
   82a18:	f000 fea0 	bl	8375c <__malloc_unlock>
   82a1c:	2001      	movs	r0, #1
   82a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82a20:	2100      	movs	r1, #0
   82a22:	4630      	mov	r0, r6
   82a24:	f001 f856 	bl	83ad4 <_sbrk_r>
   82a28:	68ba      	ldr	r2, [r7, #8]
   82a2a:	1a83      	subs	r3, r0, r2
   82a2c:	2b0f      	cmp	r3, #15
   82a2e:	ddde      	ble.n	829ee <_malloc_trim_r+0x3e>
   82a30:	4c06      	ldr	r4, [pc, #24]	; (82a4c <_malloc_trim_r+0x9c>)
   82a32:	4905      	ldr	r1, [pc, #20]	; (82a48 <_malloc_trim_r+0x98>)
   82a34:	6824      	ldr	r4, [r4, #0]
   82a36:	f043 0301 	orr.w	r3, r3, #1
   82a3a:	1b00      	subs	r0, r0, r4
   82a3c:	6053      	str	r3, [r2, #4]
   82a3e:	6008      	str	r0, [r1, #0]
   82a40:	e7d5      	b.n	829ee <_malloc_trim_r+0x3e>
   82a42:	bf00      	nop
   82a44:	200706d0 	.word	0x200706d0
   82a48:	20070c00 	.word	0x20070c00
   82a4c:	20070ad8 	.word	0x20070ad8

00082a50 <_free_r>:
   82a50:	2900      	cmp	r1, #0
   82a52:	d044      	beq.n	82ade <_free_r+0x8e>
   82a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a58:	460d      	mov	r5, r1
   82a5a:	4680      	mov	r8, r0
   82a5c:	f000 fe78 	bl	83750 <__malloc_lock>
   82a60:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82a64:	4969      	ldr	r1, [pc, #420]	; (82c0c <_free_r+0x1bc>)
   82a66:	f1a5 0408 	sub.w	r4, r5, #8
   82a6a:	f027 0301 	bic.w	r3, r7, #1
   82a6e:	18e2      	adds	r2, r4, r3
   82a70:	688e      	ldr	r6, [r1, #8]
   82a72:	6850      	ldr	r0, [r2, #4]
   82a74:	42b2      	cmp	r2, r6
   82a76:	f020 0003 	bic.w	r0, r0, #3
   82a7a:	d05e      	beq.n	82b3a <_free_r+0xea>
   82a7c:	07fe      	lsls	r6, r7, #31
   82a7e:	6050      	str	r0, [r2, #4]
   82a80:	d40b      	bmi.n	82a9a <_free_r+0x4a>
   82a82:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82a86:	f101 0e08 	add.w	lr, r1, #8
   82a8a:	1be4      	subs	r4, r4, r7
   82a8c:	68a5      	ldr	r5, [r4, #8]
   82a8e:	443b      	add	r3, r7
   82a90:	4575      	cmp	r5, lr
   82a92:	d06d      	beq.n	82b70 <_free_r+0x120>
   82a94:	68e7      	ldr	r7, [r4, #12]
   82a96:	60ef      	str	r7, [r5, #12]
   82a98:	60bd      	str	r5, [r7, #8]
   82a9a:	1815      	adds	r5, r2, r0
   82a9c:	686d      	ldr	r5, [r5, #4]
   82a9e:	07ed      	lsls	r5, r5, #31
   82aa0:	d53e      	bpl.n	82b20 <_free_r+0xd0>
   82aa2:	f043 0201 	orr.w	r2, r3, #1
   82aa6:	6062      	str	r2, [r4, #4]
   82aa8:	50e3      	str	r3, [r4, r3]
   82aaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82aae:	d217      	bcs.n	82ae0 <_free_r+0x90>
   82ab0:	2201      	movs	r2, #1
   82ab2:	08db      	lsrs	r3, r3, #3
   82ab4:	1098      	asrs	r0, r3, #2
   82ab6:	684d      	ldr	r5, [r1, #4]
   82ab8:	4413      	add	r3, r2
   82aba:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82abe:	4082      	lsls	r2, r0
   82ac0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82ac4:	432a      	orrs	r2, r5
   82ac6:	3808      	subs	r0, #8
   82ac8:	60e0      	str	r0, [r4, #12]
   82aca:	60a7      	str	r7, [r4, #8]
   82acc:	604a      	str	r2, [r1, #4]
   82ace:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82ad2:	60fc      	str	r4, [r7, #12]
   82ad4:	4640      	mov	r0, r8
   82ad6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82ada:	f000 be3f 	b.w	8375c <__malloc_unlock>
   82ade:	4770      	bx	lr
   82ae0:	0a5a      	lsrs	r2, r3, #9
   82ae2:	2a04      	cmp	r2, #4
   82ae4:	d852      	bhi.n	82b8c <_free_r+0x13c>
   82ae6:	099a      	lsrs	r2, r3, #6
   82ae8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82aec:	00ff      	lsls	r7, r7, #3
   82aee:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82af2:	19c8      	adds	r0, r1, r7
   82af4:	59ca      	ldr	r2, [r1, r7]
   82af6:	3808      	subs	r0, #8
   82af8:	4290      	cmp	r0, r2
   82afa:	d04f      	beq.n	82b9c <_free_r+0x14c>
   82afc:	6851      	ldr	r1, [r2, #4]
   82afe:	f021 0103 	bic.w	r1, r1, #3
   82b02:	428b      	cmp	r3, r1
   82b04:	d232      	bcs.n	82b6c <_free_r+0x11c>
   82b06:	6892      	ldr	r2, [r2, #8]
   82b08:	4290      	cmp	r0, r2
   82b0a:	d1f7      	bne.n	82afc <_free_r+0xac>
   82b0c:	68c3      	ldr	r3, [r0, #12]
   82b0e:	60a0      	str	r0, [r4, #8]
   82b10:	60e3      	str	r3, [r4, #12]
   82b12:	609c      	str	r4, [r3, #8]
   82b14:	60c4      	str	r4, [r0, #12]
   82b16:	4640      	mov	r0, r8
   82b18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82b1c:	f000 be1e 	b.w	8375c <__malloc_unlock>
   82b20:	6895      	ldr	r5, [r2, #8]
   82b22:	4f3b      	ldr	r7, [pc, #236]	; (82c10 <_free_r+0x1c0>)
   82b24:	4403      	add	r3, r0
   82b26:	42bd      	cmp	r5, r7
   82b28:	d040      	beq.n	82bac <_free_r+0x15c>
   82b2a:	68d0      	ldr	r0, [r2, #12]
   82b2c:	f043 0201 	orr.w	r2, r3, #1
   82b30:	60e8      	str	r0, [r5, #12]
   82b32:	6085      	str	r5, [r0, #8]
   82b34:	6062      	str	r2, [r4, #4]
   82b36:	50e3      	str	r3, [r4, r3]
   82b38:	e7b7      	b.n	82aaa <_free_r+0x5a>
   82b3a:	07ff      	lsls	r7, r7, #31
   82b3c:	4403      	add	r3, r0
   82b3e:	d407      	bmi.n	82b50 <_free_r+0x100>
   82b40:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82b44:	1b64      	subs	r4, r4, r5
   82b46:	68e2      	ldr	r2, [r4, #12]
   82b48:	68a0      	ldr	r0, [r4, #8]
   82b4a:	442b      	add	r3, r5
   82b4c:	60c2      	str	r2, [r0, #12]
   82b4e:	6090      	str	r0, [r2, #8]
   82b50:	4a30      	ldr	r2, [pc, #192]	; (82c14 <_free_r+0x1c4>)
   82b52:	f043 0001 	orr.w	r0, r3, #1
   82b56:	6812      	ldr	r2, [r2, #0]
   82b58:	6060      	str	r0, [r4, #4]
   82b5a:	4293      	cmp	r3, r2
   82b5c:	608c      	str	r4, [r1, #8]
   82b5e:	d3b9      	bcc.n	82ad4 <_free_r+0x84>
   82b60:	4b2d      	ldr	r3, [pc, #180]	; (82c18 <_free_r+0x1c8>)
   82b62:	4640      	mov	r0, r8
   82b64:	6819      	ldr	r1, [r3, #0]
   82b66:	f7ff ff23 	bl	829b0 <_malloc_trim_r>
   82b6a:	e7b3      	b.n	82ad4 <_free_r+0x84>
   82b6c:	4610      	mov	r0, r2
   82b6e:	e7cd      	b.n	82b0c <_free_r+0xbc>
   82b70:	1811      	adds	r1, r2, r0
   82b72:	6849      	ldr	r1, [r1, #4]
   82b74:	07c9      	lsls	r1, r1, #31
   82b76:	d444      	bmi.n	82c02 <_free_r+0x1b2>
   82b78:	6891      	ldr	r1, [r2, #8]
   82b7a:	4403      	add	r3, r0
   82b7c:	68d2      	ldr	r2, [r2, #12]
   82b7e:	f043 0001 	orr.w	r0, r3, #1
   82b82:	60ca      	str	r2, [r1, #12]
   82b84:	6091      	str	r1, [r2, #8]
   82b86:	6060      	str	r0, [r4, #4]
   82b88:	50e3      	str	r3, [r4, r3]
   82b8a:	e7a3      	b.n	82ad4 <_free_r+0x84>
   82b8c:	2a14      	cmp	r2, #20
   82b8e:	d816      	bhi.n	82bbe <_free_r+0x16e>
   82b90:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82b94:	00ff      	lsls	r7, r7, #3
   82b96:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82b9a:	e7aa      	b.n	82af2 <_free_r+0xa2>
   82b9c:	2301      	movs	r3, #1
   82b9e:	10aa      	asrs	r2, r5, #2
   82ba0:	684d      	ldr	r5, [r1, #4]
   82ba2:	4093      	lsls	r3, r2
   82ba4:	432b      	orrs	r3, r5
   82ba6:	604b      	str	r3, [r1, #4]
   82ba8:	4603      	mov	r3, r0
   82baa:	e7b0      	b.n	82b0e <_free_r+0xbe>
   82bac:	f043 0201 	orr.w	r2, r3, #1
   82bb0:	614c      	str	r4, [r1, #20]
   82bb2:	610c      	str	r4, [r1, #16]
   82bb4:	60e5      	str	r5, [r4, #12]
   82bb6:	60a5      	str	r5, [r4, #8]
   82bb8:	6062      	str	r2, [r4, #4]
   82bba:	50e3      	str	r3, [r4, r3]
   82bbc:	e78a      	b.n	82ad4 <_free_r+0x84>
   82bbe:	2a54      	cmp	r2, #84	; 0x54
   82bc0:	d806      	bhi.n	82bd0 <_free_r+0x180>
   82bc2:	0b1a      	lsrs	r2, r3, #12
   82bc4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82bc8:	00ff      	lsls	r7, r7, #3
   82bca:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82bce:	e790      	b.n	82af2 <_free_r+0xa2>
   82bd0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82bd4:	d806      	bhi.n	82be4 <_free_r+0x194>
   82bd6:	0bda      	lsrs	r2, r3, #15
   82bd8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82bdc:	00ff      	lsls	r7, r7, #3
   82bde:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82be2:	e786      	b.n	82af2 <_free_r+0xa2>
   82be4:	f240 5054 	movw	r0, #1364	; 0x554
   82be8:	4282      	cmp	r2, r0
   82bea:	d806      	bhi.n	82bfa <_free_r+0x1aa>
   82bec:	0c9a      	lsrs	r2, r3, #18
   82bee:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   82bf2:	00ff      	lsls	r7, r7, #3
   82bf4:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   82bf8:	e77b      	b.n	82af2 <_free_r+0xa2>
   82bfa:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   82bfe:	257e      	movs	r5, #126	; 0x7e
   82c00:	e777      	b.n	82af2 <_free_r+0xa2>
   82c02:	f043 0101 	orr.w	r1, r3, #1
   82c06:	6061      	str	r1, [r4, #4]
   82c08:	6013      	str	r3, [r2, #0]
   82c0a:	e763      	b.n	82ad4 <_free_r+0x84>
   82c0c:	200706d0 	.word	0x200706d0
   82c10:	200706d8 	.word	0x200706d8
   82c14:	20070adc 	.word	0x20070adc
   82c18:	20070c30 	.word	0x20070c30

00082c1c <__sfvwrite_r>:
   82c1c:	6893      	ldr	r3, [r2, #8]
   82c1e:	2b00      	cmp	r3, #0
   82c20:	d071      	beq.n	82d06 <__sfvwrite_r+0xea>
   82c22:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82c26:	898b      	ldrh	r3, [r1, #12]
   82c28:	b083      	sub	sp, #12
   82c2a:	460c      	mov	r4, r1
   82c2c:	0719      	lsls	r1, r3, #28
   82c2e:	9000      	str	r0, [sp, #0]
   82c30:	4616      	mov	r6, r2
   82c32:	d525      	bpl.n	82c80 <__sfvwrite_r+0x64>
   82c34:	6922      	ldr	r2, [r4, #16]
   82c36:	b31a      	cbz	r2, 82c80 <__sfvwrite_r+0x64>
   82c38:	f013 0002 	ands.w	r0, r3, #2
   82c3c:	6835      	ldr	r5, [r6, #0]
   82c3e:	d02b      	beq.n	82c98 <__sfvwrite_r+0x7c>
   82c40:	f04f 0900 	mov.w	r9, #0
   82c44:	46b0      	mov	r8, r6
   82c46:	464f      	mov	r7, r9
   82c48:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 82f0c <__sfvwrite_r+0x2f0>
   82c4c:	2f00      	cmp	r7, #0
   82c4e:	d055      	beq.n	82cfc <__sfvwrite_r+0xe0>
   82c50:	4557      	cmp	r7, sl
   82c52:	463b      	mov	r3, r7
   82c54:	464a      	mov	r2, r9
   82c56:	bf28      	it	cs
   82c58:	4653      	movcs	r3, sl
   82c5a:	69e1      	ldr	r1, [r4, #28]
   82c5c:	9800      	ldr	r0, [sp, #0]
   82c5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82c60:	47b0      	blx	r6
   82c62:	2800      	cmp	r0, #0
   82c64:	dd56      	ble.n	82d14 <__sfvwrite_r+0xf8>
   82c66:	f8d8 3008 	ldr.w	r3, [r8, #8]
   82c6a:	4481      	add	r9, r0
   82c6c:	1a1b      	subs	r3, r3, r0
   82c6e:	1a3f      	subs	r7, r7, r0
   82c70:	f8c8 3008 	str.w	r3, [r8, #8]
   82c74:	2b00      	cmp	r3, #0
   82c76:	d1e9      	bne.n	82c4c <__sfvwrite_r+0x30>
   82c78:	2000      	movs	r0, #0
   82c7a:	b003      	add	sp, #12
   82c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82c80:	4621      	mov	r1, r4
   82c82:	9800      	ldr	r0, [sp, #0]
   82c84:	f7ff fc56 	bl	82534 <__swsetup_r>
   82c88:	2800      	cmp	r0, #0
   82c8a:	f040 8135 	bne.w	82ef8 <__sfvwrite_r+0x2dc>
   82c8e:	89a3      	ldrh	r3, [r4, #12]
   82c90:	6835      	ldr	r5, [r6, #0]
   82c92:	f013 0002 	ands.w	r0, r3, #2
   82c96:	d1d3      	bne.n	82c40 <__sfvwrite_r+0x24>
   82c98:	f013 0901 	ands.w	r9, r3, #1
   82c9c:	d144      	bne.n	82d28 <__sfvwrite_r+0x10c>
   82c9e:	464f      	mov	r7, r9
   82ca0:	9601      	str	r6, [sp, #4]
   82ca2:	b337      	cbz	r7, 82cf2 <__sfvwrite_r+0xd6>
   82ca4:	059a      	lsls	r2, r3, #22
   82ca6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   82caa:	f140 8085 	bpl.w	82db8 <__sfvwrite_r+0x19c>
   82cae:	4547      	cmp	r7, r8
   82cb0:	46c3      	mov	fp, r8
   82cb2:	f0c0 80ad 	bcc.w	82e10 <__sfvwrite_r+0x1f4>
   82cb6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   82cba:	f040 80ae 	bne.w	82e1a <__sfvwrite_r+0x1fe>
   82cbe:	46ba      	mov	sl, r7
   82cc0:	6820      	ldr	r0, [r4, #0]
   82cc2:	465a      	mov	r2, fp
   82cc4:	4649      	mov	r1, r9
   82cc6:	f000 fcdf 	bl	83688 <memmove>
   82cca:	68a2      	ldr	r2, [r4, #8]
   82ccc:	6823      	ldr	r3, [r4, #0]
   82cce:	eba2 0208 	sub.w	r2, r2, r8
   82cd2:	445b      	add	r3, fp
   82cd4:	60a2      	str	r2, [r4, #8]
   82cd6:	6023      	str	r3, [r4, #0]
   82cd8:	9a01      	ldr	r2, [sp, #4]
   82cda:	44d1      	add	r9, sl
   82cdc:	6893      	ldr	r3, [r2, #8]
   82cde:	eba7 070a 	sub.w	r7, r7, sl
   82ce2:	eba3 030a 	sub.w	r3, r3, sl
   82ce6:	6093      	str	r3, [r2, #8]
   82ce8:	2b00      	cmp	r3, #0
   82cea:	d0c5      	beq.n	82c78 <__sfvwrite_r+0x5c>
   82cec:	89a3      	ldrh	r3, [r4, #12]
   82cee:	2f00      	cmp	r7, #0
   82cf0:	d1d8      	bne.n	82ca4 <__sfvwrite_r+0x88>
   82cf2:	f8d5 9000 	ldr.w	r9, [r5]
   82cf6:	686f      	ldr	r7, [r5, #4]
   82cf8:	3508      	adds	r5, #8
   82cfa:	e7d2      	b.n	82ca2 <__sfvwrite_r+0x86>
   82cfc:	f8d5 9000 	ldr.w	r9, [r5]
   82d00:	686f      	ldr	r7, [r5, #4]
   82d02:	3508      	adds	r5, #8
   82d04:	e7a2      	b.n	82c4c <__sfvwrite_r+0x30>
   82d06:	2000      	movs	r0, #0
   82d08:	4770      	bx	lr
   82d0a:	4621      	mov	r1, r4
   82d0c:	9800      	ldr	r0, [sp, #0]
   82d0e:	f7ff fd21 	bl	82754 <_fflush_r>
   82d12:	b378      	cbz	r0, 82d74 <__sfvwrite_r+0x158>
   82d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d18:	f04f 30ff 	mov.w	r0, #4294967295
   82d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d20:	81a3      	strh	r3, [r4, #12]
   82d22:	b003      	add	sp, #12
   82d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82d28:	4681      	mov	r9, r0
   82d2a:	4633      	mov	r3, r6
   82d2c:	464e      	mov	r6, r9
   82d2e:	46a8      	mov	r8, r5
   82d30:	469a      	mov	sl, r3
   82d32:	464d      	mov	r5, r9
   82d34:	b356      	cbz	r6, 82d8c <__sfvwrite_r+0x170>
   82d36:	2800      	cmp	r0, #0
   82d38:	d032      	beq.n	82da0 <__sfvwrite_r+0x184>
   82d3a:	45b1      	cmp	r9, r6
   82d3c:	46cb      	mov	fp, r9
   82d3e:	bf28      	it	cs
   82d40:	46b3      	movcs	fp, r6
   82d42:	6820      	ldr	r0, [r4, #0]
   82d44:	6923      	ldr	r3, [r4, #16]
   82d46:	465f      	mov	r7, fp
   82d48:	4298      	cmp	r0, r3
   82d4a:	6962      	ldr	r2, [r4, #20]
   82d4c:	d904      	bls.n	82d58 <__sfvwrite_r+0x13c>
   82d4e:	68a3      	ldr	r3, [r4, #8]
   82d50:	4413      	add	r3, r2
   82d52:	459b      	cmp	fp, r3
   82d54:	f300 80a8 	bgt.w	82ea8 <__sfvwrite_r+0x28c>
   82d58:	4593      	cmp	fp, r2
   82d5a:	db4d      	blt.n	82df8 <__sfvwrite_r+0x1dc>
   82d5c:	4613      	mov	r3, r2
   82d5e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   82d60:	462a      	mov	r2, r5
   82d62:	69e1      	ldr	r1, [r4, #28]
   82d64:	9800      	ldr	r0, [sp, #0]
   82d66:	47b8      	blx	r7
   82d68:	1e07      	subs	r7, r0, #0
   82d6a:	ddd3      	ble.n	82d14 <__sfvwrite_r+0xf8>
   82d6c:	ebb9 0907 	subs.w	r9, r9, r7
   82d70:	d0cb      	beq.n	82d0a <__sfvwrite_r+0xee>
   82d72:	2001      	movs	r0, #1
   82d74:	f8da 3008 	ldr.w	r3, [sl, #8]
   82d78:	443d      	add	r5, r7
   82d7a:	1bdb      	subs	r3, r3, r7
   82d7c:	1bf6      	subs	r6, r6, r7
   82d7e:	f8ca 3008 	str.w	r3, [sl, #8]
   82d82:	2b00      	cmp	r3, #0
   82d84:	f43f af78 	beq.w	82c78 <__sfvwrite_r+0x5c>
   82d88:	2e00      	cmp	r6, #0
   82d8a:	d1d4      	bne.n	82d36 <__sfvwrite_r+0x11a>
   82d8c:	f108 0308 	add.w	r3, r8, #8
   82d90:	f853 6c04 	ldr.w	r6, [r3, #-4]
   82d94:	4698      	mov	r8, r3
   82d96:	f853 5c08 	ldr.w	r5, [r3, #-8]
   82d9a:	3308      	adds	r3, #8
   82d9c:	2e00      	cmp	r6, #0
   82d9e:	d0f7      	beq.n	82d90 <__sfvwrite_r+0x174>
   82da0:	4632      	mov	r2, r6
   82da2:	210a      	movs	r1, #10
   82da4:	4628      	mov	r0, r5
   82da6:	f000 fc29 	bl	835fc <memchr>
   82daa:	2800      	cmp	r0, #0
   82dac:	f000 80a1 	beq.w	82ef2 <__sfvwrite_r+0x2d6>
   82db0:	3001      	adds	r0, #1
   82db2:	eba0 0905 	sub.w	r9, r0, r5
   82db6:	e7c0      	b.n	82d3a <__sfvwrite_r+0x11e>
   82db8:	6820      	ldr	r0, [r4, #0]
   82dba:	6923      	ldr	r3, [r4, #16]
   82dbc:	4298      	cmp	r0, r3
   82dbe:	d802      	bhi.n	82dc6 <__sfvwrite_r+0x1aa>
   82dc0:	6963      	ldr	r3, [r4, #20]
   82dc2:	429f      	cmp	r7, r3
   82dc4:	d25d      	bcs.n	82e82 <__sfvwrite_r+0x266>
   82dc6:	45b8      	cmp	r8, r7
   82dc8:	bf28      	it	cs
   82dca:	46b8      	movcs	r8, r7
   82dcc:	4649      	mov	r1, r9
   82dce:	4642      	mov	r2, r8
   82dd0:	f000 fc5a 	bl	83688 <memmove>
   82dd4:	68a3      	ldr	r3, [r4, #8]
   82dd6:	6822      	ldr	r2, [r4, #0]
   82dd8:	eba3 0308 	sub.w	r3, r3, r8
   82ddc:	4442      	add	r2, r8
   82dde:	60a3      	str	r3, [r4, #8]
   82de0:	6022      	str	r2, [r4, #0]
   82de2:	b10b      	cbz	r3, 82de8 <__sfvwrite_r+0x1cc>
   82de4:	46c2      	mov	sl, r8
   82de6:	e777      	b.n	82cd8 <__sfvwrite_r+0xbc>
   82de8:	4621      	mov	r1, r4
   82dea:	9800      	ldr	r0, [sp, #0]
   82dec:	f7ff fcb2 	bl	82754 <_fflush_r>
   82df0:	2800      	cmp	r0, #0
   82df2:	d18f      	bne.n	82d14 <__sfvwrite_r+0xf8>
   82df4:	46c2      	mov	sl, r8
   82df6:	e76f      	b.n	82cd8 <__sfvwrite_r+0xbc>
   82df8:	465a      	mov	r2, fp
   82dfa:	4629      	mov	r1, r5
   82dfc:	f000 fc44 	bl	83688 <memmove>
   82e00:	68a2      	ldr	r2, [r4, #8]
   82e02:	6823      	ldr	r3, [r4, #0]
   82e04:	eba2 020b 	sub.w	r2, r2, fp
   82e08:	445b      	add	r3, fp
   82e0a:	60a2      	str	r2, [r4, #8]
   82e0c:	6023      	str	r3, [r4, #0]
   82e0e:	e7ad      	b.n	82d6c <__sfvwrite_r+0x150>
   82e10:	46b8      	mov	r8, r7
   82e12:	46ba      	mov	sl, r7
   82e14:	46bb      	mov	fp, r7
   82e16:	6820      	ldr	r0, [r4, #0]
   82e18:	e753      	b.n	82cc2 <__sfvwrite_r+0xa6>
   82e1a:	6962      	ldr	r2, [r4, #20]
   82e1c:	6820      	ldr	r0, [r4, #0]
   82e1e:	6921      	ldr	r1, [r4, #16]
   82e20:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   82e24:	eba0 0a01 	sub.w	sl, r0, r1
   82e28:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   82e2c:	f10a 0001 	add.w	r0, sl, #1
   82e30:	ea4f 0868 	mov.w	r8, r8, asr #1
   82e34:	4438      	add	r0, r7
   82e36:	4540      	cmp	r0, r8
   82e38:	4642      	mov	r2, r8
   82e3a:	bf84      	itt	hi
   82e3c:	4680      	movhi	r8, r0
   82e3e:	4642      	movhi	r2, r8
   82e40:	055b      	lsls	r3, r3, #21
   82e42:	d544      	bpl.n	82ece <__sfvwrite_r+0x2b2>
   82e44:	4611      	mov	r1, r2
   82e46:	9800      	ldr	r0, [sp, #0]
   82e48:	f000 f920 	bl	8308c <_malloc_r>
   82e4c:	4683      	mov	fp, r0
   82e4e:	2800      	cmp	r0, #0
   82e50:	d055      	beq.n	82efe <__sfvwrite_r+0x2e2>
   82e52:	4652      	mov	r2, sl
   82e54:	6921      	ldr	r1, [r4, #16]
   82e56:	f7fe fae3 	bl	81420 <memcpy>
   82e5a:	89a3      	ldrh	r3, [r4, #12]
   82e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   82e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82e64:	81a3      	strh	r3, [r4, #12]
   82e66:	eb0b 000a 	add.w	r0, fp, sl
   82e6a:	eba8 030a 	sub.w	r3, r8, sl
   82e6e:	f8c4 b010 	str.w	fp, [r4, #16]
   82e72:	f8c4 8014 	str.w	r8, [r4, #20]
   82e76:	6020      	str	r0, [r4, #0]
   82e78:	60a3      	str	r3, [r4, #8]
   82e7a:	46b8      	mov	r8, r7
   82e7c:	46ba      	mov	sl, r7
   82e7e:	46bb      	mov	fp, r7
   82e80:	e71f      	b.n	82cc2 <__sfvwrite_r+0xa6>
   82e82:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   82e86:	42ba      	cmp	r2, r7
   82e88:	bf28      	it	cs
   82e8a:	463a      	movcs	r2, r7
   82e8c:	fb92 f2f3 	sdiv	r2, r2, r3
   82e90:	69e1      	ldr	r1, [r4, #28]
   82e92:	fb03 f302 	mul.w	r3, r3, r2
   82e96:	9800      	ldr	r0, [sp, #0]
   82e98:	464a      	mov	r2, r9
   82e9a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   82e9c:	47b0      	blx	r6
   82e9e:	f1b0 0a00 	subs.w	sl, r0, #0
   82ea2:	f73f af19 	bgt.w	82cd8 <__sfvwrite_r+0xbc>
   82ea6:	e735      	b.n	82d14 <__sfvwrite_r+0xf8>
   82ea8:	461a      	mov	r2, r3
   82eaa:	4629      	mov	r1, r5
   82eac:	9301      	str	r3, [sp, #4]
   82eae:	f000 fbeb 	bl	83688 <memmove>
   82eb2:	6822      	ldr	r2, [r4, #0]
   82eb4:	9b01      	ldr	r3, [sp, #4]
   82eb6:	4621      	mov	r1, r4
   82eb8:	441a      	add	r2, r3
   82eba:	6022      	str	r2, [r4, #0]
   82ebc:	9800      	ldr	r0, [sp, #0]
   82ebe:	f7ff fc49 	bl	82754 <_fflush_r>
   82ec2:	9b01      	ldr	r3, [sp, #4]
   82ec4:	2800      	cmp	r0, #0
   82ec6:	f47f af25 	bne.w	82d14 <__sfvwrite_r+0xf8>
   82eca:	461f      	mov	r7, r3
   82ecc:	e74e      	b.n	82d6c <__sfvwrite_r+0x150>
   82ece:	9800      	ldr	r0, [sp, #0]
   82ed0:	f000 fc4a 	bl	83768 <_realloc_r>
   82ed4:	4683      	mov	fp, r0
   82ed6:	2800      	cmp	r0, #0
   82ed8:	d1c5      	bne.n	82e66 <__sfvwrite_r+0x24a>
   82eda:	9d00      	ldr	r5, [sp, #0]
   82edc:	6921      	ldr	r1, [r4, #16]
   82ede:	4628      	mov	r0, r5
   82ee0:	f7ff fdb6 	bl	82a50 <_free_r>
   82ee4:	220c      	movs	r2, #12
   82ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82eea:	602a      	str	r2, [r5, #0]
   82eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   82ef0:	e712      	b.n	82d18 <__sfvwrite_r+0xfc>
   82ef2:	f106 0901 	add.w	r9, r6, #1
   82ef6:	e720      	b.n	82d3a <__sfvwrite_r+0x11e>
   82ef8:	f04f 30ff 	mov.w	r0, #4294967295
   82efc:	e6bd      	b.n	82c7a <__sfvwrite_r+0x5e>
   82efe:	220c      	movs	r2, #12
   82f00:	9900      	ldr	r1, [sp, #0]
   82f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f06:	600a      	str	r2, [r1, #0]
   82f08:	e706      	b.n	82d18 <__sfvwrite_r+0xfc>
   82f0a:	bf00      	nop
   82f0c:	7ffffc00 	.word	0x7ffffc00

00082f10 <_fwalk_reent>:
   82f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82f14:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   82f18:	d01e      	beq.n	82f58 <_fwalk_reent+0x48>
   82f1a:	4688      	mov	r8, r1
   82f1c:	4607      	mov	r7, r0
   82f1e:	f04f 0900 	mov.w	r9, #0
   82f22:	6875      	ldr	r5, [r6, #4]
   82f24:	68b4      	ldr	r4, [r6, #8]
   82f26:	3d01      	subs	r5, #1
   82f28:	d410      	bmi.n	82f4c <_fwalk_reent+0x3c>
   82f2a:	89a3      	ldrh	r3, [r4, #12]
   82f2c:	3d01      	subs	r5, #1
   82f2e:	2b01      	cmp	r3, #1
   82f30:	d908      	bls.n	82f44 <_fwalk_reent+0x34>
   82f32:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   82f36:	3301      	adds	r3, #1
   82f38:	d004      	beq.n	82f44 <_fwalk_reent+0x34>
   82f3a:	4621      	mov	r1, r4
   82f3c:	4638      	mov	r0, r7
   82f3e:	47c0      	blx	r8
   82f40:	ea49 0900 	orr.w	r9, r9, r0
   82f44:	1c6b      	adds	r3, r5, #1
   82f46:	f104 0468 	add.w	r4, r4, #104	; 0x68
   82f4a:	d1ee      	bne.n	82f2a <_fwalk_reent+0x1a>
   82f4c:	6836      	ldr	r6, [r6, #0]
   82f4e:	2e00      	cmp	r6, #0
   82f50:	d1e7      	bne.n	82f22 <_fwalk_reent+0x12>
   82f52:	4648      	mov	r0, r9
   82f54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82f58:	46b1      	mov	r9, r6
   82f5a:	4648      	mov	r0, r9
   82f5c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00082f60 <__locale_mb_cur_max>:
   82f60:	4b04      	ldr	r3, [pc, #16]	; (82f74 <__locale_mb_cur_max+0x14>)
   82f62:	4a05      	ldr	r2, [pc, #20]	; (82f78 <__locale_mb_cur_max+0x18>)
   82f64:	681b      	ldr	r3, [r3, #0]
   82f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   82f68:	2b00      	cmp	r3, #0
   82f6a:	bf08      	it	eq
   82f6c:	4613      	moveq	r3, r2
   82f6e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   82f72:	4770      	bx	lr
   82f74:	20070134 	.word	0x20070134
   82f78:	20070564 	.word	0x20070564

00082f7c <__retarget_lock_init_recursive>:
   82f7c:	4770      	bx	lr
   82f7e:	bf00      	nop

00082f80 <__retarget_lock_close_recursive>:
   82f80:	4770      	bx	lr
   82f82:	bf00      	nop

00082f84 <__retarget_lock_acquire_recursive>:
   82f84:	4770      	bx	lr
   82f86:	bf00      	nop

00082f88 <__retarget_lock_release_recursive>:
   82f88:	4770      	bx	lr
   82f8a:	bf00      	nop

00082f8c <__swhatbuf_r>:
   82f8c:	b570      	push	{r4, r5, r6, lr}
   82f8e:	460c      	mov	r4, r1
   82f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   82f94:	b090      	sub	sp, #64	; 0x40
   82f96:	2900      	cmp	r1, #0
   82f98:	4615      	mov	r5, r2
   82f9a:	461e      	mov	r6, r3
   82f9c:	db14      	blt.n	82fc8 <__swhatbuf_r+0x3c>
   82f9e:	aa01      	add	r2, sp, #4
   82fa0:	f000 ff68 	bl	83e74 <_fstat_r>
   82fa4:	2800      	cmp	r0, #0
   82fa6:	db0f      	blt.n	82fc8 <__swhatbuf_r+0x3c>
   82fa8:	9a02      	ldr	r2, [sp, #8]
   82faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82fae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   82fb2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   82fb6:	fab2 f282 	clz	r2, r2
   82fba:	f44f 6000 	mov.w	r0, #2048	; 0x800
   82fbe:	0952      	lsrs	r2, r2, #5
   82fc0:	6032      	str	r2, [r6, #0]
   82fc2:	602b      	str	r3, [r5, #0]
   82fc4:	b010      	add	sp, #64	; 0x40
   82fc6:	bd70      	pop	{r4, r5, r6, pc}
   82fc8:	2300      	movs	r3, #0
   82fca:	89a2      	ldrh	r2, [r4, #12]
   82fcc:	6033      	str	r3, [r6, #0]
   82fce:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   82fd2:	d004      	beq.n	82fde <__swhatbuf_r+0x52>
   82fd4:	2240      	movs	r2, #64	; 0x40
   82fd6:	4618      	mov	r0, r3
   82fd8:	602a      	str	r2, [r5, #0]
   82fda:	b010      	add	sp, #64	; 0x40
   82fdc:	bd70      	pop	{r4, r5, r6, pc}
   82fde:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82fe2:	602b      	str	r3, [r5, #0]
   82fe4:	b010      	add	sp, #64	; 0x40
   82fe6:	bd70      	pop	{r4, r5, r6, pc}

00082fe8 <__smakebuf_r>:
   82fe8:	898a      	ldrh	r2, [r1, #12]
   82fea:	460b      	mov	r3, r1
   82fec:	0792      	lsls	r2, r2, #30
   82fee:	d506      	bpl.n	82ffe <__smakebuf_r+0x16>
   82ff0:	2101      	movs	r1, #1
   82ff2:	f103 0243 	add.w	r2, r3, #67	; 0x43
   82ff6:	6159      	str	r1, [r3, #20]
   82ff8:	601a      	str	r2, [r3, #0]
   82ffa:	611a      	str	r2, [r3, #16]
   82ffc:	4770      	bx	lr
   82ffe:	b5f0      	push	{r4, r5, r6, r7, lr}
   83000:	b083      	sub	sp, #12
   83002:	ab01      	add	r3, sp, #4
   83004:	466a      	mov	r2, sp
   83006:	460c      	mov	r4, r1
   83008:	4606      	mov	r6, r0
   8300a:	f7ff ffbf 	bl	82f8c <__swhatbuf_r>
   8300e:	9900      	ldr	r1, [sp, #0]
   83010:	4605      	mov	r5, r0
   83012:	4630      	mov	r0, r6
   83014:	f000 f83a 	bl	8308c <_malloc_r>
   83018:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8301c:	b1d8      	cbz	r0, 83056 <__smakebuf_r+0x6e>
   8301e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83022:	4f15      	ldr	r7, [pc, #84]	; (83078 <__smakebuf_r+0x90>)
   83024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83028:	63f7      	str	r7, [r6, #60]	; 0x3c
   8302a:	81a3      	strh	r3, [r4, #12]
   8302c:	6020      	str	r0, [r4, #0]
   8302e:	6120      	str	r0, [r4, #16]
   83030:	6161      	str	r1, [r4, #20]
   83032:	b91a      	cbnz	r2, 8303c <__smakebuf_r+0x54>
   83034:	432b      	orrs	r3, r5
   83036:	81a3      	strh	r3, [r4, #12]
   83038:	b003      	add	sp, #12
   8303a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8303c:	4630      	mov	r0, r6
   8303e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83042:	f000 ff2b 	bl	83e9c <_isatty_r>
   83046:	b1a0      	cbz	r0, 83072 <__smakebuf_r+0x8a>
   83048:	89a3      	ldrh	r3, [r4, #12]
   8304a:	f023 0303 	bic.w	r3, r3, #3
   8304e:	f043 0301 	orr.w	r3, r3, #1
   83052:	b21b      	sxth	r3, r3
   83054:	e7ee      	b.n	83034 <__smakebuf_r+0x4c>
   83056:	059a      	lsls	r2, r3, #22
   83058:	d4ee      	bmi.n	83038 <__smakebuf_r+0x50>
   8305a:	2101      	movs	r1, #1
   8305c:	f023 0303 	bic.w	r3, r3, #3
   83060:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83064:	f043 0302 	orr.w	r3, r3, #2
   83068:	81a3      	strh	r3, [r4, #12]
   8306a:	6161      	str	r1, [r4, #20]
   8306c:	6022      	str	r2, [r4, #0]
   8306e:	6122      	str	r2, [r4, #16]
   83070:	e7e2      	b.n	83038 <__smakebuf_r+0x50>
   83072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83076:	e7dd      	b.n	83034 <__smakebuf_r+0x4c>
   83078:	000827a9 	.word	0x000827a9

0008307c <malloc>:
   8307c:	4b02      	ldr	r3, [pc, #8]	; (83088 <malloc+0xc>)
   8307e:	4601      	mov	r1, r0
   83080:	6818      	ldr	r0, [r3, #0]
   83082:	f000 b803 	b.w	8308c <_malloc_r>
   83086:	bf00      	nop
   83088:	20070134 	.word	0x20070134

0008308c <_malloc_r>:
   8308c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83090:	f101 060b 	add.w	r6, r1, #11
   83094:	2e16      	cmp	r6, #22
   83096:	b083      	sub	sp, #12
   83098:	4605      	mov	r5, r0
   8309a:	f240 809e 	bls.w	831da <_malloc_r+0x14e>
   8309e:	f036 0607 	bics.w	r6, r6, #7
   830a2:	f100 80bd 	bmi.w	83220 <_malloc_r+0x194>
   830a6:	42b1      	cmp	r1, r6
   830a8:	f200 80ba 	bhi.w	83220 <_malloc_r+0x194>
   830ac:	f000 fb50 	bl	83750 <__malloc_lock>
   830b0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   830b4:	f0c0 8285 	bcc.w	835c2 <_malloc_r+0x536>
   830b8:	0a73      	lsrs	r3, r6, #9
   830ba:	f000 80b8 	beq.w	8322e <_malloc_r+0x1a2>
   830be:	2b04      	cmp	r3, #4
   830c0:	f200 816c 	bhi.w	8339c <_malloc_r+0x310>
   830c4:	09b3      	lsrs	r3, r6, #6
   830c6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   830ca:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   830ce:	00c1      	lsls	r1, r0, #3
   830d0:	4fb8      	ldr	r7, [pc, #736]	; (833b4 <_malloc_r+0x328>)
   830d2:	4439      	add	r1, r7
   830d4:	684c      	ldr	r4, [r1, #4]
   830d6:	3908      	subs	r1, #8
   830d8:	42a1      	cmp	r1, r4
   830da:	d106      	bne.n	830ea <_malloc_r+0x5e>
   830dc:	e00c      	b.n	830f8 <_malloc_r+0x6c>
   830de:	2a00      	cmp	r2, #0
   830e0:	f280 80ab 	bge.w	8323a <_malloc_r+0x1ae>
   830e4:	68e4      	ldr	r4, [r4, #12]
   830e6:	42a1      	cmp	r1, r4
   830e8:	d006      	beq.n	830f8 <_malloc_r+0x6c>
   830ea:	6863      	ldr	r3, [r4, #4]
   830ec:	f023 0303 	bic.w	r3, r3, #3
   830f0:	1b9a      	subs	r2, r3, r6
   830f2:	2a0f      	cmp	r2, #15
   830f4:	ddf3      	ble.n	830de <_malloc_r+0x52>
   830f6:	4670      	mov	r0, lr
   830f8:	693c      	ldr	r4, [r7, #16]
   830fa:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 833c8 <_malloc_r+0x33c>
   830fe:	4574      	cmp	r4, lr
   83100:	f000 819e 	beq.w	83440 <_malloc_r+0x3b4>
   83104:	6863      	ldr	r3, [r4, #4]
   83106:	f023 0303 	bic.w	r3, r3, #3
   8310a:	1b9a      	subs	r2, r3, r6
   8310c:	2a0f      	cmp	r2, #15
   8310e:	f300 8183 	bgt.w	83418 <_malloc_r+0x38c>
   83112:	2a00      	cmp	r2, #0
   83114:	f8c7 e014 	str.w	lr, [r7, #20]
   83118:	f8c7 e010 	str.w	lr, [r7, #16]
   8311c:	f280 8091 	bge.w	83242 <_malloc_r+0x1b6>
   83120:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83124:	f080 8154 	bcs.w	833d0 <_malloc_r+0x344>
   83128:	2201      	movs	r2, #1
   8312a:	08db      	lsrs	r3, r3, #3
   8312c:	6879      	ldr	r1, [r7, #4]
   8312e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83132:	4413      	add	r3, r2
   83134:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83138:	fa02 f20c 	lsl.w	r2, r2, ip
   8313c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83140:	430a      	orrs	r2, r1
   83142:	f1ac 0108 	sub.w	r1, ip, #8
   83146:	60e1      	str	r1, [r4, #12]
   83148:	f8c4 8008 	str.w	r8, [r4, #8]
   8314c:	607a      	str	r2, [r7, #4]
   8314e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83152:	f8c8 400c 	str.w	r4, [r8, #12]
   83156:	2401      	movs	r4, #1
   83158:	1083      	asrs	r3, r0, #2
   8315a:	409c      	lsls	r4, r3
   8315c:	4294      	cmp	r4, r2
   8315e:	d87d      	bhi.n	8325c <_malloc_r+0x1d0>
   83160:	4214      	tst	r4, r2
   83162:	d106      	bne.n	83172 <_malloc_r+0xe6>
   83164:	f020 0003 	bic.w	r0, r0, #3
   83168:	0064      	lsls	r4, r4, #1
   8316a:	4214      	tst	r4, r2
   8316c:	f100 0004 	add.w	r0, r0, #4
   83170:	d0fa      	beq.n	83168 <_malloc_r+0xdc>
   83172:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83176:	46cc      	mov	ip, r9
   83178:	4680      	mov	r8, r0
   8317a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8317e:	459c      	cmp	ip, r3
   83180:	d107      	bne.n	83192 <_malloc_r+0x106>
   83182:	e15f      	b.n	83444 <_malloc_r+0x3b8>
   83184:	2a00      	cmp	r2, #0
   83186:	f280 816d 	bge.w	83464 <_malloc_r+0x3d8>
   8318a:	68db      	ldr	r3, [r3, #12]
   8318c:	459c      	cmp	ip, r3
   8318e:	f000 8159 	beq.w	83444 <_malloc_r+0x3b8>
   83192:	6859      	ldr	r1, [r3, #4]
   83194:	f021 0103 	bic.w	r1, r1, #3
   83198:	1b8a      	subs	r2, r1, r6
   8319a:	2a0f      	cmp	r2, #15
   8319c:	ddf2      	ble.n	83184 <_malloc_r+0xf8>
   8319e:	68dc      	ldr	r4, [r3, #12]
   831a0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   831a4:	f046 0801 	orr.w	r8, r6, #1
   831a8:	4628      	mov	r0, r5
   831aa:	441e      	add	r6, r3
   831ac:	f042 0501 	orr.w	r5, r2, #1
   831b0:	f8c3 8004 	str.w	r8, [r3, #4]
   831b4:	f8cc 400c 	str.w	r4, [ip, #12]
   831b8:	f8c4 c008 	str.w	ip, [r4, #8]
   831bc:	617e      	str	r6, [r7, #20]
   831be:	613e      	str	r6, [r7, #16]
   831c0:	f8c6 e00c 	str.w	lr, [r6, #12]
   831c4:	f8c6 e008 	str.w	lr, [r6, #8]
   831c8:	6075      	str	r5, [r6, #4]
   831ca:	505a      	str	r2, [r3, r1]
   831cc:	9300      	str	r3, [sp, #0]
   831ce:	f000 fac5 	bl	8375c <__malloc_unlock>
   831d2:	9b00      	ldr	r3, [sp, #0]
   831d4:	f103 0408 	add.w	r4, r3, #8
   831d8:	e01e      	b.n	83218 <_malloc_r+0x18c>
   831da:	2910      	cmp	r1, #16
   831dc:	d820      	bhi.n	83220 <_malloc_r+0x194>
   831de:	f000 fab7 	bl	83750 <__malloc_lock>
   831e2:	2610      	movs	r6, #16
   831e4:	2318      	movs	r3, #24
   831e6:	2002      	movs	r0, #2
   831e8:	4f72      	ldr	r7, [pc, #456]	; (833b4 <_malloc_r+0x328>)
   831ea:	443b      	add	r3, r7
   831ec:	685c      	ldr	r4, [r3, #4]
   831ee:	f1a3 0208 	sub.w	r2, r3, #8
   831f2:	4294      	cmp	r4, r2
   831f4:	f000 812f 	beq.w	83456 <_malloc_r+0x3ca>
   831f8:	6863      	ldr	r3, [r4, #4]
   831fa:	68e1      	ldr	r1, [r4, #12]
   831fc:	f023 0303 	bic.w	r3, r3, #3
   83200:	4423      	add	r3, r4
   83202:	685a      	ldr	r2, [r3, #4]
   83204:	68a6      	ldr	r6, [r4, #8]
   83206:	f042 0201 	orr.w	r2, r2, #1
   8320a:	60f1      	str	r1, [r6, #12]
   8320c:	4628      	mov	r0, r5
   8320e:	608e      	str	r6, [r1, #8]
   83210:	605a      	str	r2, [r3, #4]
   83212:	f000 faa3 	bl	8375c <__malloc_unlock>
   83216:	3408      	adds	r4, #8
   83218:	4620      	mov	r0, r4
   8321a:	b003      	add	sp, #12
   8321c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83220:	2400      	movs	r4, #0
   83222:	230c      	movs	r3, #12
   83224:	4620      	mov	r0, r4
   83226:	602b      	str	r3, [r5, #0]
   83228:	b003      	add	sp, #12
   8322a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8322e:	2040      	movs	r0, #64	; 0x40
   83230:	f44f 7100 	mov.w	r1, #512	; 0x200
   83234:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83238:	e74a      	b.n	830d0 <_malloc_r+0x44>
   8323a:	4423      	add	r3, r4
   8323c:	685a      	ldr	r2, [r3, #4]
   8323e:	68e1      	ldr	r1, [r4, #12]
   83240:	e7e0      	b.n	83204 <_malloc_r+0x178>
   83242:	4423      	add	r3, r4
   83244:	685a      	ldr	r2, [r3, #4]
   83246:	4628      	mov	r0, r5
   83248:	f042 0201 	orr.w	r2, r2, #1
   8324c:	605a      	str	r2, [r3, #4]
   8324e:	3408      	adds	r4, #8
   83250:	f000 fa84 	bl	8375c <__malloc_unlock>
   83254:	4620      	mov	r0, r4
   83256:	b003      	add	sp, #12
   83258:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8325c:	68bc      	ldr	r4, [r7, #8]
   8325e:	6863      	ldr	r3, [r4, #4]
   83260:	f023 0803 	bic.w	r8, r3, #3
   83264:	45b0      	cmp	r8, r6
   83266:	d304      	bcc.n	83272 <_malloc_r+0x1e6>
   83268:	eba8 0306 	sub.w	r3, r8, r6
   8326c:	2b0f      	cmp	r3, #15
   8326e:	f300 8085 	bgt.w	8337c <_malloc_r+0x2f0>
   83272:	f8df 9158 	ldr.w	r9, [pc, #344]	; 833cc <_malloc_r+0x340>
   83276:	4b50      	ldr	r3, [pc, #320]	; (833b8 <_malloc_r+0x32c>)
   83278:	f8d9 2000 	ldr.w	r2, [r9]
   8327c:	681b      	ldr	r3, [r3, #0]
   8327e:	3201      	adds	r2, #1
   83280:	4433      	add	r3, r6
   83282:	eb04 0a08 	add.w	sl, r4, r8
   83286:	f000 8154 	beq.w	83532 <_malloc_r+0x4a6>
   8328a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8328e:	330f      	adds	r3, #15
   83290:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83294:	f02b 0b0f 	bic.w	fp, fp, #15
   83298:	4659      	mov	r1, fp
   8329a:	4628      	mov	r0, r5
   8329c:	f000 fc1a 	bl	83ad4 <_sbrk_r>
   832a0:	1c41      	adds	r1, r0, #1
   832a2:	4602      	mov	r2, r0
   832a4:	f000 80fb 	beq.w	8349e <_malloc_r+0x412>
   832a8:	4582      	cmp	sl, r0
   832aa:	f200 80f6 	bhi.w	8349a <_malloc_r+0x40e>
   832ae:	4b43      	ldr	r3, [pc, #268]	; (833bc <_malloc_r+0x330>)
   832b0:	6819      	ldr	r1, [r3, #0]
   832b2:	4459      	add	r1, fp
   832b4:	6019      	str	r1, [r3, #0]
   832b6:	f000 814c 	beq.w	83552 <_malloc_r+0x4c6>
   832ba:	f8d9 0000 	ldr.w	r0, [r9]
   832be:	3001      	adds	r0, #1
   832c0:	bf1b      	ittet	ne
   832c2:	eba2 0a0a 	subne.w	sl, r2, sl
   832c6:	4451      	addne	r1, sl
   832c8:	f8c9 2000 	streq.w	r2, [r9]
   832cc:	6019      	strne	r1, [r3, #0]
   832ce:	f012 0107 	ands.w	r1, r2, #7
   832d2:	f000 8114 	beq.w	834fe <_malloc_r+0x472>
   832d6:	f1c1 0008 	rsb	r0, r1, #8
   832da:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   832de:	4402      	add	r2, r0
   832e0:	3108      	adds	r1, #8
   832e2:	eb02 090b 	add.w	r9, r2, fp
   832e6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   832ea:	eba1 0909 	sub.w	r9, r1, r9
   832ee:	4649      	mov	r1, r9
   832f0:	4628      	mov	r0, r5
   832f2:	9301      	str	r3, [sp, #4]
   832f4:	9200      	str	r2, [sp, #0]
   832f6:	f000 fbed 	bl	83ad4 <_sbrk_r>
   832fa:	1c43      	adds	r3, r0, #1
   832fc:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83300:	f000 8142 	beq.w	83588 <_malloc_r+0x4fc>
   83304:	1a80      	subs	r0, r0, r2
   83306:	4448      	add	r0, r9
   83308:	f040 0001 	orr.w	r0, r0, #1
   8330c:	6819      	ldr	r1, [r3, #0]
   8330e:	42bc      	cmp	r4, r7
   83310:	4449      	add	r1, r9
   83312:	60ba      	str	r2, [r7, #8]
   83314:	6019      	str	r1, [r3, #0]
   83316:	6050      	str	r0, [r2, #4]
   83318:	d017      	beq.n	8334a <_malloc_r+0x2be>
   8331a:	f1b8 0f0f 	cmp.w	r8, #15
   8331e:	f240 80fa 	bls.w	83516 <_malloc_r+0x48a>
   83322:	f04f 0c05 	mov.w	ip, #5
   83326:	6862      	ldr	r2, [r4, #4]
   83328:	f1a8 000c 	sub.w	r0, r8, #12
   8332c:	f020 0007 	bic.w	r0, r0, #7
   83330:	f002 0201 	and.w	r2, r2, #1
   83334:	eb04 0e00 	add.w	lr, r4, r0
   83338:	4302      	orrs	r2, r0
   8333a:	280f      	cmp	r0, #15
   8333c:	6062      	str	r2, [r4, #4]
   8333e:	f8ce c004 	str.w	ip, [lr, #4]
   83342:	f8ce c008 	str.w	ip, [lr, #8]
   83346:	f200 8116 	bhi.w	83576 <_malloc_r+0x4ea>
   8334a:	4b1d      	ldr	r3, [pc, #116]	; (833c0 <_malloc_r+0x334>)
   8334c:	68bc      	ldr	r4, [r7, #8]
   8334e:	681a      	ldr	r2, [r3, #0]
   83350:	4291      	cmp	r1, r2
   83352:	bf88      	it	hi
   83354:	6019      	strhi	r1, [r3, #0]
   83356:	4b1b      	ldr	r3, [pc, #108]	; (833c4 <_malloc_r+0x338>)
   83358:	681a      	ldr	r2, [r3, #0]
   8335a:	4291      	cmp	r1, r2
   8335c:	6862      	ldr	r2, [r4, #4]
   8335e:	bf88      	it	hi
   83360:	6019      	strhi	r1, [r3, #0]
   83362:	f022 0203 	bic.w	r2, r2, #3
   83366:	4296      	cmp	r6, r2
   83368:	eba2 0306 	sub.w	r3, r2, r6
   8336c:	d801      	bhi.n	83372 <_malloc_r+0x2e6>
   8336e:	2b0f      	cmp	r3, #15
   83370:	dc04      	bgt.n	8337c <_malloc_r+0x2f0>
   83372:	4628      	mov	r0, r5
   83374:	f000 f9f2 	bl	8375c <__malloc_unlock>
   83378:	2400      	movs	r4, #0
   8337a:	e74d      	b.n	83218 <_malloc_r+0x18c>
   8337c:	f046 0201 	orr.w	r2, r6, #1
   83380:	f043 0301 	orr.w	r3, r3, #1
   83384:	4426      	add	r6, r4
   83386:	6062      	str	r2, [r4, #4]
   83388:	4628      	mov	r0, r5
   8338a:	60be      	str	r6, [r7, #8]
   8338c:	3408      	adds	r4, #8
   8338e:	6073      	str	r3, [r6, #4]
   83390:	f000 f9e4 	bl	8375c <__malloc_unlock>
   83394:	4620      	mov	r0, r4
   83396:	b003      	add	sp, #12
   83398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8339c:	2b14      	cmp	r3, #20
   8339e:	d970      	bls.n	83482 <_malloc_r+0x3f6>
   833a0:	2b54      	cmp	r3, #84	; 0x54
   833a2:	f200 80a2 	bhi.w	834ea <_malloc_r+0x45e>
   833a6:	0b33      	lsrs	r3, r6, #12
   833a8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   833ac:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   833b0:	00c1      	lsls	r1, r0, #3
   833b2:	e68d      	b.n	830d0 <_malloc_r+0x44>
   833b4:	200706d0 	.word	0x200706d0
   833b8:	20070c30 	.word	0x20070c30
   833bc:	20070c00 	.word	0x20070c00
   833c0:	20070c28 	.word	0x20070c28
   833c4:	20070c2c 	.word	0x20070c2c
   833c8:	200706d8 	.word	0x200706d8
   833cc:	20070ad8 	.word	0x20070ad8
   833d0:	0a5a      	lsrs	r2, r3, #9
   833d2:	2a04      	cmp	r2, #4
   833d4:	d95b      	bls.n	8348e <_malloc_r+0x402>
   833d6:	2a14      	cmp	r2, #20
   833d8:	f200 80ae 	bhi.w	83538 <_malloc_r+0x4ac>
   833dc:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   833e0:	00c9      	lsls	r1, r1, #3
   833e2:	325b      	adds	r2, #91	; 0x5b
   833e4:	eb07 0c01 	add.w	ip, r7, r1
   833e8:	5879      	ldr	r1, [r7, r1]
   833ea:	f1ac 0c08 	sub.w	ip, ip, #8
   833ee:	458c      	cmp	ip, r1
   833f0:	f000 8088 	beq.w	83504 <_malloc_r+0x478>
   833f4:	684a      	ldr	r2, [r1, #4]
   833f6:	f022 0203 	bic.w	r2, r2, #3
   833fa:	4293      	cmp	r3, r2
   833fc:	d273      	bcs.n	834e6 <_malloc_r+0x45a>
   833fe:	6889      	ldr	r1, [r1, #8]
   83400:	458c      	cmp	ip, r1
   83402:	d1f7      	bne.n	833f4 <_malloc_r+0x368>
   83404:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83408:	687a      	ldr	r2, [r7, #4]
   8340a:	60e3      	str	r3, [r4, #12]
   8340c:	f8c4 c008 	str.w	ip, [r4, #8]
   83410:	609c      	str	r4, [r3, #8]
   83412:	f8cc 400c 	str.w	r4, [ip, #12]
   83416:	e69e      	b.n	83156 <_malloc_r+0xca>
   83418:	f046 0c01 	orr.w	ip, r6, #1
   8341c:	f042 0101 	orr.w	r1, r2, #1
   83420:	4426      	add	r6, r4
   83422:	f8c4 c004 	str.w	ip, [r4, #4]
   83426:	4628      	mov	r0, r5
   83428:	617e      	str	r6, [r7, #20]
   8342a:	613e      	str	r6, [r7, #16]
   8342c:	f8c6 e00c 	str.w	lr, [r6, #12]
   83430:	f8c6 e008 	str.w	lr, [r6, #8]
   83434:	6071      	str	r1, [r6, #4]
   83436:	50e2      	str	r2, [r4, r3]
   83438:	f000 f990 	bl	8375c <__malloc_unlock>
   8343c:	3408      	adds	r4, #8
   8343e:	e6eb      	b.n	83218 <_malloc_r+0x18c>
   83440:	687a      	ldr	r2, [r7, #4]
   83442:	e688      	b.n	83156 <_malloc_r+0xca>
   83444:	f108 0801 	add.w	r8, r8, #1
   83448:	f018 0f03 	tst.w	r8, #3
   8344c:	f10c 0c08 	add.w	ip, ip, #8
   83450:	f47f ae93 	bne.w	8317a <_malloc_r+0xee>
   83454:	e02d      	b.n	834b2 <_malloc_r+0x426>
   83456:	68dc      	ldr	r4, [r3, #12]
   83458:	42a3      	cmp	r3, r4
   8345a:	bf08      	it	eq
   8345c:	3002      	addeq	r0, #2
   8345e:	f43f ae4b 	beq.w	830f8 <_malloc_r+0x6c>
   83462:	e6c9      	b.n	831f8 <_malloc_r+0x16c>
   83464:	461c      	mov	r4, r3
   83466:	4419      	add	r1, r3
   83468:	684a      	ldr	r2, [r1, #4]
   8346a:	68db      	ldr	r3, [r3, #12]
   8346c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83470:	f042 0201 	orr.w	r2, r2, #1
   83474:	604a      	str	r2, [r1, #4]
   83476:	4628      	mov	r0, r5
   83478:	60f3      	str	r3, [r6, #12]
   8347a:	609e      	str	r6, [r3, #8]
   8347c:	f000 f96e 	bl	8375c <__malloc_unlock>
   83480:	e6ca      	b.n	83218 <_malloc_r+0x18c>
   83482:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83486:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8348a:	00c1      	lsls	r1, r0, #3
   8348c:	e620      	b.n	830d0 <_malloc_r+0x44>
   8348e:	099a      	lsrs	r2, r3, #6
   83490:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83494:	00c9      	lsls	r1, r1, #3
   83496:	3238      	adds	r2, #56	; 0x38
   83498:	e7a4      	b.n	833e4 <_malloc_r+0x358>
   8349a:	42bc      	cmp	r4, r7
   8349c:	d054      	beq.n	83548 <_malloc_r+0x4bc>
   8349e:	68bc      	ldr	r4, [r7, #8]
   834a0:	6862      	ldr	r2, [r4, #4]
   834a2:	f022 0203 	bic.w	r2, r2, #3
   834a6:	e75e      	b.n	83366 <_malloc_r+0x2da>
   834a8:	f859 3908 	ldr.w	r3, [r9], #-8
   834ac:	4599      	cmp	r9, r3
   834ae:	f040 8086 	bne.w	835be <_malloc_r+0x532>
   834b2:	f010 0f03 	tst.w	r0, #3
   834b6:	f100 30ff 	add.w	r0, r0, #4294967295
   834ba:	d1f5      	bne.n	834a8 <_malloc_r+0x41c>
   834bc:	687b      	ldr	r3, [r7, #4]
   834be:	ea23 0304 	bic.w	r3, r3, r4
   834c2:	607b      	str	r3, [r7, #4]
   834c4:	0064      	lsls	r4, r4, #1
   834c6:	429c      	cmp	r4, r3
   834c8:	f63f aec8 	bhi.w	8325c <_malloc_r+0x1d0>
   834cc:	2c00      	cmp	r4, #0
   834ce:	f43f aec5 	beq.w	8325c <_malloc_r+0x1d0>
   834d2:	421c      	tst	r4, r3
   834d4:	4640      	mov	r0, r8
   834d6:	f47f ae4c 	bne.w	83172 <_malloc_r+0xe6>
   834da:	0064      	lsls	r4, r4, #1
   834dc:	421c      	tst	r4, r3
   834de:	f100 0004 	add.w	r0, r0, #4
   834e2:	d0fa      	beq.n	834da <_malloc_r+0x44e>
   834e4:	e645      	b.n	83172 <_malloc_r+0xe6>
   834e6:	468c      	mov	ip, r1
   834e8:	e78c      	b.n	83404 <_malloc_r+0x378>
   834ea:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   834ee:	d815      	bhi.n	8351c <_malloc_r+0x490>
   834f0:	0bf3      	lsrs	r3, r6, #15
   834f2:	f103 0078 	add.w	r0, r3, #120	; 0x78
   834f6:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   834fa:	00c1      	lsls	r1, r0, #3
   834fc:	e5e8      	b.n	830d0 <_malloc_r+0x44>
   834fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83502:	e6ee      	b.n	832e2 <_malloc_r+0x256>
   83504:	2101      	movs	r1, #1
   83506:	687b      	ldr	r3, [r7, #4]
   83508:	1092      	asrs	r2, r2, #2
   8350a:	fa01 f202 	lsl.w	r2, r1, r2
   8350e:	431a      	orrs	r2, r3
   83510:	607a      	str	r2, [r7, #4]
   83512:	4663      	mov	r3, ip
   83514:	e779      	b.n	8340a <_malloc_r+0x37e>
   83516:	2301      	movs	r3, #1
   83518:	6053      	str	r3, [r2, #4]
   8351a:	e72a      	b.n	83372 <_malloc_r+0x2e6>
   8351c:	f240 5254 	movw	r2, #1364	; 0x554
   83520:	4293      	cmp	r3, r2
   83522:	d822      	bhi.n	8356a <_malloc_r+0x4de>
   83524:	0cb3      	lsrs	r3, r6, #18
   83526:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8352a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8352e:	00c1      	lsls	r1, r0, #3
   83530:	e5ce      	b.n	830d0 <_malloc_r+0x44>
   83532:	f103 0b10 	add.w	fp, r3, #16
   83536:	e6af      	b.n	83298 <_malloc_r+0x20c>
   83538:	2a54      	cmp	r2, #84	; 0x54
   8353a:	d829      	bhi.n	83590 <_malloc_r+0x504>
   8353c:	0b1a      	lsrs	r2, r3, #12
   8353e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83542:	00c9      	lsls	r1, r1, #3
   83544:	326e      	adds	r2, #110	; 0x6e
   83546:	e74d      	b.n	833e4 <_malloc_r+0x358>
   83548:	4b20      	ldr	r3, [pc, #128]	; (835cc <_malloc_r+0x540>)
   8354a:	6819      	ldr	r1, [r3, #0]
   8354c:	4459      	add	r1, fp
   8354e:	6019      	str	r1, [r3, #0]
   83550:	e6b3      	b.n	832ba <_malloc_r+0x22e>
   83552:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83556:	2800      	cmp	r0, #0
   83558:	f47f aeaf 	bne.w	832ba <_malloc_r+0x22e>
   8355c:	eb08 030b 	add.w	r3, r8, fp
   83560:	68ba      	ldr	r2, [r7, #8]
   83562:	f043 0301 	orr.w	r3, r3, #1
   83566:	6053      	str	r3, [r2, #4]
   83568:	e6ef      	b.n	8334a <_malloc_r+0x2be>
   8356a:	207f      	movs	r0, #127	; 0x7f
   8356c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83570:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83574:	e5ac      	b.n	830d0 <_malloc_r+0x44>
   83576:	f104 0108 	add.w	r1, r4, #8
   8357a:	4628      	mov	r0, r5
   8357c:	9300      	str	r3, [sp, #0]
   8357e:	f7ff fa67 	bl	82a50 <_free_r>
   83582:	9b00      	ldr	r3, [sp, #0]
   83584:	6819      	ldr	r1, [r3, #0]
   83586:	e6e0      	b.n	8334a <_malloc_r+0x2be>
   83588:	2001      	movs	r0, #1
   8358a:	f04f 0900 	mov.w	r9, #0
   8358e:	e6bd      	b.n	8330c <_malloc_r+0x280>
   83590:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83594:	d805      	bhi.n	835a2 <_malloc_r+0x516>
   83596:	0bda      	lsrs	r2, r3, #15
   83598:	f102 0178 	add.w	r1, r2, #120	; 0x78
   8359c:	00c9      	lsls	r1, r1, #3
   8359e:	3277      	adds	r2, #119	; 0x77
   835a0:	e720      	b.n	833e4 <_malloc_r+0x358>
   835a2:	f240 5154 	movw	r1, #1364	; 0x554
   835a6:	428a      	cmp	r2, r1
   835a8:	d805      	bhi.n	835b6 <_malloc_r+0x52a>
   835aa:	0c9a      	lsrs	r2, r3, #18
   835ac:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   835b0:	00c9      	lsls	r1, r1, #3
   835b2:	327c      	adds	r2, #124	; 0x7c
   835b4:	e716      	b.n	833e4 <_malloc_r+0x358>
   835b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   835ba:	227e      	movs	r2, #126	; 0x7e
   835bc:	e712      	b.n	833e4 <_malloc_r+0x358>
   835be:	687b      	ldr	r3, [r7, #4]
   835c0:	e780      	b.n	834c4 <_malloc_r+0x438>
   835c2:	08f0      	lsrs	r0, r6, #3
   835c4:	f106 0308 	add.w	r3, r6, #8
   835c8:	e60e      	b.n	831e8 <_malloc_r+0x15c>
   835ca:	bf00      	nop
   835cc:	20070c00 	.word	0x20070c00

000835d0 <__ascii_mbtowc>:
   835d0:	b082      	sub	sp, #8
   835d2:	b149      	cbz	r1, 835e8 <__ascii_mbtowc+0x18>
   835d4:	b15a      	cbz	r2, 835ee <__ascii_mbtowc+0x1e>
   835d6:	b16b      	cbz	r3, 835f4 <__ascii_mbtowc+0x24>
   835d8:	7813      	ldrb	r3, [r2, #0]
   835da:	600b      	str	r3, [r1, #0]
   835dc:	7812      	ldrb	r2, [r2, #0]
   835de:	1c10      	adds	r0, r2, #0
   835e0:	bf18      	it	ne
   835e2:	2001      	movne	r0, #1
   835e4:	b002      	add	sp, #8
   835e6:	4770      	bx	lr
   835e8:	a901      	add	r1, sp, #4
   835ea:	2a00      	cmp	r2, #0
   835ec:	d1f3      	bne.n	835d6 <__ascii_mbtowc+0x6>
   835ee:	4610      	mov	r0, r2
   835f0:	b002      	add	sp, #8
   835f2:	4770      	bx	lr
   835f4:	f06f 0001 	mvn.w	r0, #1
   835f8:	e7f4      	b.n	835e4 <__ascii_mbtowc+0x14>
   835fa:	bf00      	nop

000835fc <memchr>:
   835fc:	0783      	lsls	r3, r0, #30
   835fe:	b470      	push	{r4, r5, r6}
   83600:	b2cd      	uxtb	r5, r1
   83602:	d03d      	beq.n	83680 <memchr+0x84>
   83604:	1e54      	subs	r4, r2, #1
   83606:	b30a      	cbz	r2, 8364c <memchr+0x50>
   83608:	7803      	ldrb	r3, [r0, #0]
   8360a:	42ab      	cmp	r3, r5
   8360c:	d01f      	beq.n	8364e <memchr+0x52>
   8360e:	1c43      	adds	r3, r0, #1
   83610:	e005      	b.n	8361e <memchr+0x22>
   83612:	f114 34ff 	adds.w	r4, r4, #4294967295
   83616:	d319      	bcc.n	8364c <memchr+0x50>
   83618:	7802      	ldrb	r2, [r0, #0]
   8361a:	42aa      	cmp	r2, r5
   8361c:	d017      	beq.n	8364e <memchr+0x52>
   8361e:	f013 0f03 	tst.w	r3, #3
   83622:	4618      	mov	r0, r3
   83624:	f103 0301 	add.w	r3, r3, #1
   83628:	d1f3      	bne.n	83612 <memchr+0x16>
   8362a:	2c03      	cmp	r4, #3
   8362c:	d811      	bhi.n	83652 <memchr+0x56>
   8362e:	b34c      	cbz	r4, 83684 <memchr+0x88>
   83630:	7803      	ldrb	r3, [r0, #0]
   83632:	42ab      	cmp	r3, r5
   83634:	d00b      	beq.n	8364e <memchr+0x52>
   83636:	4404      	add	r4, r0
   83638:	1c43      	adds	r3, r0, #1
   8363a:	e002      	b.n	83642 <memchr+0x46>
   8363c:	7802      	ldrb	r2, [r0, #0]
   8363e:	42aa      	cmp	r2, r5
   83640:	d005      	beq.n	8364e <memchr+0x52>
   83642:	429c      	cmp	r4, r3
   83644:	4618      	mov	r0, r3
   83646:	f103 0301 	add.w	r3, r3, #1
   8364a:	d1f7      	bne.n	8363c <memchr+0x40>
   8364c:	2000      	movs	r0, #0
   8364e:	bc70      	pop	{r4, r5, r6}
   83650:	4770      	bx	lr
   83652:	0209      	lsls	r1, r1, #8
   83654:	b289      	uxth	r1, r1
   83656:	4329      	orrs	r1, r5
   83658:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   8365c:	6803      	ldr	r3, [r0, #0]
   8365e:	4606      	mov	r6, r0
   83660:	404b      	eors	r3, r1
   83662:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83666:	ea22 0303 	bic.w	r3, r2, r3
   8366a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8366e:	f100 0004 	add.w	r0, r0, #4
   83672:	d103      	bne.n	8367c <memchr+0x80>
   83674:	3c04      	subs	r4, #4
   83676:	2c03      	cmp	r4, #3
   83678:	d8f0      	bhi.n	8365c <memchr+0x60>
   8367a:	e7d8      	b.n	8362e <memchr+0x32>
   8367c:	4630      	mov	r0, r6
   8367e:	e7d7      	b.n	83630 <memchr+0x34>
   83680:	4614      	mov	r4, r2
   83682:	e7d2      	b.n	8362a <memchr+0x2e>
   83684:	4620      	mov	r0, r4
   83686:	e7e2      	b.n	8364e <memchr+0x52>

00083688 <memmove>:
   83688:	4288      	cmp	r0, r1
   8368a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8368c:	d90d      	bls.n	836aa <memmove+0x22>
   8368e:	188b      	adds	r3, r1, r2
   83690:	4298      	cmp	r0, r3
   83692:	d20a      	bcs.n	836aa <memmove+0x22>
   83694:	1884      	adds	r4, r0, r2
   83696:	2a00      	cmp	r2, #0
   83698:	d051      	beq.n	8373e <memmove+0xb6>
   8369a:	4622      	mov	r2, r4
   8369c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   836a0:	4299      	cmp	r1, r3
   836a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   836a6:	d1f9      	bne.n	8369c <memmove+0x14>
   836a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   836aa:	2a0f      	cmp	r2, #15
   836ac:	d948      	bls.n	83740 <memmove+0xb8>
   836ae:	ea41 0300 	orr.w	r3, r1, r0
   836b2:	079b      	lsls	r3, r3, #30
   836b4:	d146      	bne.n	83744 <memmove+0xbc>
   836b6:	4615      	mov	r5, r2
   836b8:	f100 0410 	add.w	r4, r0, #16
   836bc:	f101 0310 	add.w	r3, r1, #16
   836c0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   836c4:	3d10      	subs	r5, #16
   836c6:	f844 6c10 	str.w	r6, [r4, #-16]
   836ca:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   836ce:	2d0f      	cmp	r5, #15
   836d0:	f844 6c0c 	str.w	r6, [r4, #-12]
   836d4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   836d8:	f104 0410 	add.w	r4, r4, #16
   836dc:	f844 6c18 	str.w	r6, [r4, #-24]
   836e0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   836e4:	f103 0310 	add.w	r3, r3, #16
   836e8:	f844 6c14 	str.w	r6, [r4, #-20]
   836ec:	d8e8      	bhi.n	836c0 <memmove+0x38>
   836ee:	f1a2 0310 	sub.w	r3, r2, #16
   836f2:	f023 030f 	bic.w	r3, r3, #15
   836f6:	f002 0e0f 	and.w	lr, r2, #15
   836fa:	3310      	adds	r3, #16
   836fc:	f1be 0f03 	cmp.w	lr, #3
   83700:	4419      	add	r1, r3
   83702:	4403      	add	r3, r0
   83704:	d921      	bls.n	8374a <memmove+0xc2>
   83706:	460e      	mov	r6, r1
   83708:	4674      	mov	r4, lr
   8370a:	1f1d      	subs	r5, r3, #4
   8370c:	f856 7b04 	ldr.w	r7, [r6], #4
   83710:	3c04      	subs	r4, #4
   83712:	2c03      	cmp	r4, #3
   83714:	f845 7f04 	str.w	r7, [r5, #4]!
   83718:	d8f8      	bhi.n	8370c <memmove+0x84>
   8371a:	f1ae 0404 	sub.w	r4, lr, #4
   8371e:	f024 0403 	bic.w	r4, r4, #3
   83722:	3404      	adds	r4, #4
   83724:	4421      	add	r1, r4
   83726:	4423      	add	r3, r4
   83728:	f002 0203 	and.w	r2, r2, #3
   8372c:	b162      	cbz	r2, 83748 <memmove+0xc0>
   8372e:	3b01      	subs	r3, #1
   83730:	440a      	add	r2, r1
   83732:	f811 4b01 	ldrb.w	r4, [r1], #1
   83736:	428a      	cmp	r2, r1
   83738:	f803 4f01 	strb.w	r4, [r3, #1]!
   8373c:	d1f9      	bne.n	83732 <memmove+0xaa>
   8373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83740:	4603      	mov	r3, r0
   83742:	e7f3      	b.n	8372c <memmove+0xa4>
   83744:	4603      	mov	r3, r0
   83746:	e7f2      	b.n	8372e <memmove+0xa6>
   83748:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8374a:	4672      	mov	r2, lr
   8374c:	e7ee      	b.n	8372c <memmove+0xa4>
   8374e:	bf00      	nop

00083750 <__malloc_lock>:
   83750:	4801      	ldr	r0, [pc, #4]	; (83758 <__malloc_lock+0x8>)
   83752:	f7ff bc17 	b.w	82f84 <__retarget_lock_acquire_recursive>
   83756:	bf00      	nop
   83758:	20070c94 	.word	0x20070c94

0008375c <__malloc_unlock>:
   8375c:	4801      	ldr	r0, [pc, #4]	; (83764 <__malloc_unlock+0x8>)
   8375e:	f7ff bc13 	b.w	82f88 <__retarget_lock_release_recursive>
   83762:	bf00      	nop
   83764:	20070c94 	.word	0x20070c94

00083768 <_realloc_r>:
   83768:	2900      	cmp	r1, #0
   8376a:	f000 8094 	beq.w	83896 <_realloc_r+0x12e>
   8376e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83772:	460c      	mov	r4, r1
   83774:	4615      	mov	r5, r2
   83776:	b083      	sub	sp, #12
   83778:	4680      	mov	r8, r0
   8377a:	f105 060b 	add.w	r6, r5, #11
   8377e:	f7ff ffe7 	bl	83750 <__malloc_lock>
   83782:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83786:	2e16      	cmp	r6, #22
   83788:	f02e 0703 	bic.w	r7, lr, #3
   8378c:	f1a4 0908 	sub.w	r9, r4, #8
   83790:	d83c      	bhi.n	8380c <_realloc_r+0xa4>
   83792:	2210      	movs	r2, #16
   83794:	4616      	mov	r6, r2
   83796:	42b5      	cmp	r5, r6
   83798:	d83d      	bhi.n	83816 <_realloc_r+0xae>
   8379a:	4297      	cmp	r7, r2
   8379c:	da43      	bge.n	83826 <_realloc_r+0xbe>
   8379e:	4bc6      	ldr	r3, [pc, #792]	; (83ab8 <_realloc_r+0x350>)
   837a0:	eb09 0007 	add.w	r0, r9, r7
   837a4:	6899      	ldr	r1, [r3, #8]
   837a6:	4288      	cmp	r0, r1
   837a8:	f000 80c3 	beq.w	83932 <_realloc_r+0x1ca>
   837ac:	6843      	ldr	r3, [r0, #4]
   837ae:	f023 0101 	bic.w	r1, r3, #1
   837b2:	4401      	add	r1, r0
   837b4:	6849      	ldr	r1, [r1, #4]
   837b6:	07c9      	lsls	r1, r1, #31
   837b8:	d54d      	bpl.n	83856 <_realloc_r+0xee>
   837ba:	f01e 0f01 	tst.w	lr, #1
   837be:	f000 809b 	beq.w	838f8 <_realloc_r+0x190>
   837c2:	4629      	mov	r1, r5
   837c4:	4640      	mov	r0, r8
   837c6:	f7ff fc61 	bl	8308c <_malloc_r>
   837ca:	4605      	mov	r5, r0
   837cc:	2800      	cmp	r0, #0
   837ce:	d03b      	beq.n	83848 <_realloc_r+0xe0>
   837d0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   837d4:	f1a0 0208 	sub.w	r2, r0, #8
   837d8:	f023 0301 	bic.w	r3, r3, #1
   837dc:	444b      	add	r3, r9
   837de:	429a      	cmp	r2, r3
   837e0:	f000 812b 	beq.w	83a3a <_realloc_r+0x2d2>
   837e4:	1f3a      	subs	r2, r7, #4
   837e6:	2a24      	cmp	r2, #36	; 0x24
   837e8:	f200 8118 	bhi.w	83a1c <_realloc_r+0x2b4>
   837ec:	2a13      	cmp	r2, #19
   837ee:	f200 80eb 	bhi.w	839c8 <_realloc_r+0x260>
   837f2:	4603      	mov	r3, r0
   837f4:	4622      	mov	r2, r4
   837f6:	6811      	ldr	r1, [r2, #0]
   837f8:	6019      	str	r1, [r3, #0]
   837fa:	6851      	ldr	r1, [r2, #4]
   837fc:	6059      	str	r1, [r3, #4]
   837fe:	6892      	ldr	r2, [r2, #8]
   83800:	609a      	str	r2, [r3, #8]
   83802:	4621      	mov	r1, r4
   83804:	4640      	mov	r0, r8
   83806:	f7ff f923 	bl	82a50 <_free_r>
   8380a:	e01d      	b.n	83848 <_realloc_r+0xe0>
   8380c:	f026 0607 	bic.w	r6, r6, #7
   83810:	2e00      	cmp	r6, #0
   83812:	4632      	mov	r2, r6
   83814:	dabf      	bge.n	83796 <_realloc_r+0x2e>
   83816:	2500      	movs	r5, #0
   83818:	230c      	movs	r3, #12
   8381a:	4628      	mov	r0, r5
   8381c:	f8c8 3000 	str.w	r3, [r8]
   83820:	b003      	add	sp, #12
   83822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83826:	4625      	mov	r5, r4
   83828:	1bbb      	subs	r3, r7, r6
   8382a:	2b0f      	cmp	r3, #15
   8382c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83830:	d81d      	bhi.n	8386e <_realloc_r+0x106>
   83832:	f002 0201 	and.w	r2, r2, #1
   83836:	433a      	orrs	r2, r7
   83838:	eb09 0107 	add.w	r1, r9, r7
   8383c:	f8c9 2004 	str.w	r2, [r9, #4]
   83840:	684b      	ldr	r3, [r1, #4]
   83842:	f043 0301 	orr.w	r3, r3, #1
   83846:	604b      	str	r3, [r1, #4]
   83848:	4640      	mov	r0, r8
   8384a:	f7ff ff87 	bl	8375c <__malloc_unlock>
   8384e:	4628      	mov	r0, r5
   83850:	b003      	add	sp, #12
   83852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83856:	f023 0303 	bic.w	r3, r3, #3
   8385a:	18f9      	adds	r1, r7, r3
   8385c:	4291      	cmp	r1, r2
   8385e:	db1d      	blt.n	8389c <_realloc_r+0x134>
   83860:	68c3      	ldr	r3, [r0, #12]
   83862:	6882      	ldr	r2, [r0, #8]
   83864:	4625      	mov	r5, r4
   83866:	60d3      	str	r3, [r2, #12]
   83868:	460f      	mov	r7, r1
   8386a:	609a      	str	r2, [r3, #8]
   8386c:	e7dc      	b.n	83828 <_realloc_r+0xc0>
   8386e:	f002 0201 	and.w	r2, r2, #1
   83872:	eb09 0106 	add.w	r1, r9, r6
   83876:	f043 0301 	orr.w	r3, r3, #1
   8387a:	4332      	orrs	r2, r6
   8387c:	f8c9 2004 	str.w	r2, [r9, #4]
   83880:	444f      	add	r7, r9
   83882:	604b      	str	r3, [r1, #4]
   83884:	687b      	ldr	r3, [r7, #4]
   83886:	3108      	adds	r1, #8
   83888:	f043 0301 	orr.w	r3, r3, #1
   8388c:	607b      	str	r3, [r7, #4]
   8388e:	4640      	mov	r0, r8
   83890:	f7ff f8de 	bl	82a50 <_free_r>
   83894:	e7d8      	b.n	83848 <_realloc_r+0xe0>
   83896:	4611      	mov	r1, r2
   83898:	f7ff bbf8 	b.w	8308c <_malloc_r>
   8389c:	f01e 0f01 	tst.w	lr, #1
   838a0:	d18f      	bne.n	837c2 <_realloc_r+0x5a>
   838a2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   838a6:	eba9 0a01 	sub.w	sl, r9, r1
   838aa:	f8da 1004 	ldr.w	r1, [sl, #4]
   838ae:	f021 0103 	bic.w	r1, r1, #3
   838b2:	440b      	add	r3, r1
   838b4:	443b      	add	r3, r7
   838b6:	4293      	cmp	r3, r2
   838b8:	db26      	blt.n	83908 <_realloc_r+0x1a0>
   838ba:	4655      	mov	r5, sl
   838bc:	68c1      	ldr	r1, [r0, #12]
   838be:	6880      	ldr	r0, [r0, #8]
   838c0:	1f3a      	subs	r2, r7, #4
   838c2:	60c1      	str	r1, [r0, #12]
   838c4:	6088      	str	r0, [r1, #8]
   838c6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   838ca:	f8da 100c 	ldr.w	r1, [sl, #12]
   838ce:	2a24      	cmp	r2, #36	; 0x24
   838d0:	60c1      	str	r1, [r0, #12]
   838d2:	6088      	str	r0, [r1, #8]
   838d4:	d826      	bhi.n	83924 <_realloc_r+0x1bc>
   838d6:	2a13      	cmp	r2, #19
   838d8:	f240 8081 	bls.w	839de <_realloc_r+0x276>
   838dc:	6821      	ldr	r1, [r4, #0]
   838de:	2a1b      	cmp	r2, #27
   838e0:	f8ca 1008 	str.w	r1, [sl, #8]
   838e4:	6861      	ldr	r1, [r4, #4]
   838e6:	f8ca 100c 	str.w	r1, [sl, #12]
   838ea:	f200 80ad 	bhi.w	83a48 <_realloc_r+0x2e0>
   838ee:	f104 0008 	add.w	r0, r4, #8
   838f2:	f10a 0210 	add.w	r2, sl, #16
   838f6:	e074      	b.n	839e2 <_realloc_r+0x27a>
   838f8:	f854 3c08 	ldr.w	r3, [r4, #-8]
   838fc:	eba9 0a03 	sub.w	sl, r9, r3
   83900:	f8da 1004 	ldr.w	r1, [sl, #4]
   83904:	f021 0103 	bic.w	r1, r1, #3
   83908:	187b      	adds	r3, r7, r1
   8390a:	4293      	cmp	r3, r2
   8390c:	f6ff af59 	blt.w	837c2 <_realloc_r+0x5a>
   83910:	4655      	mov	r5, sl
   83912:	f8da 100c 	ldr.w	r1, [sl, #12]
   83916:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8391a:	1f3a      	subs	r2, r7, #4
   8391c:	2a24      	cmp	r2, #36	; 0x24
   8391e:	60c1      	str	r1, [r0, #12]
   83920:	6088      	str	r0, [r1, #8]
   83922:	d9d8      	bls.n	838d6 <_realloc_r+0x16e>
   83924:	4621      	mov	r1, r4
   83926:	4628      	mov	r0, r5
   83928:	461f      	mov	r7, r3
   8392a:	46d1      	mov	r9, sl
   8392c:	f7ff feac 	bl	83688 <memmove>
   83930:	e77a      	b.n	83828 <_realloc_r+0xc0>
   83932:	6841      	ldr	r1, [r0, #4]
   83934:	f106 0010 	add.w	r0, r6, #16
   83938:	f021 0b03 	bic.w	fp, r1, #3
   8393c:	44bb      	add	fp, r7
   8393e:	4583      	cmp	fp, r0
   83940:	da58      	bge.n	839f4 <_realloc_r+0x28c>
   83942:	f01e 0f01 	tst.w	lr, #1
   83946:	f47f af3c 	bne.w	837c2 <_realloc_r+0x5a>
   8394a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8394e:	eba9 0a01 	sub.w	sl, r9, r1
   83952:	f8da 1004 	ldr.w	r1, [sl, #4]
   83956:	f021 0103 	bic.w	r1, r1, #3
   8395a:	448b      	add	fp, r1
   8395c:	4558      	cmp	r0, fp
   8395e:	dcd3      	bgt.n	83908 <_realloc_r+0x1a0>
   83960:	4655      	mov	r5, sl
   83962:	f8da 100c 	ldr.w	r1, [sl, #12]
   83966:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8396a:	1f3a      	subs	r2, r7, #4
   8396c:	2a24      	cmp	r2, #36	; 0x24
   8396e:	60c1      	str	r1, [r0, #12]
   83970:	6088      	str	r0, [r1, #8]
   83972:	f200 808d 	bhi.w	83a90 <_realloc_r+0x328>
   83976:	2a13      	cmp	r2, #19
   83978:	f240 8087 	bls.w	83a8a <_realloc_r+0x322>
   8397c:	6821      	ldr	r1, [r4, #0]
   8397e:	2a1b      	cmp	r2, #27
   83980:	f8ca 1008 	str.w	r1, [sl, #8]
   83984:	6861      	ldr	r1, [r4, #4]
   83986:	f8ca 100c 	str.w	r1, [sl, #12]
   8398a:	f200 8088 	bhi.w	83a9e <_realloc_r+0x336>
   8398e:	f104 0108 	add.w	r1, r4, #8
   83992:	f10a 0210 	add.w	r2, sl, #16
   83996:	6808      	ldr	r0, [r1, #0]
   83998:	6010      	str	r0, [r2, #0]
   8399a:	6848      	ldr	r0, [r1, #4]
   8399c:	6050      	str	r0, [r2, #4]
   8399e:	6889      	ldr	r1, [r1, #8]
   839a0:	6091      	str	r1, [r2, #8]
   839a2:	ebab 0206 	sub.w	r2, fp, r6
   839a6:	eb0a 0106 	add.w	r1, sl, r6
   839aa:	f042 0201 	orr.w	r2, r2, #1
   839ae:	6099      	str	r1, [r3, #8]
   839b0:	604a      	str	r2, [r1, #4]
   839b2:	f8da 3004 	ldr.w	r3, [sl, #4]
   839b6:	4640      	mov	r0, r8
   839b8:	f003 0301 	and.w	r3, r3, #1
   839bc:	431e      	orrs	r6, r3
   839be:	f8ca 6004 	str.w	r6, [sl, #4]
   839c2:	f7ff fecb 	bl	8375c <__malloc_unlock>
   839c6:	e742      	b.n	8384e <_realloc_r+0xe6>
   839c8:	6823      	ldr	r3, [r4, #0]
   839ca:	2a1b      	cmp	r2, #27
   839cc:	6003      	str	r3, [r0, #0]
   839ce:	6863      	ldr	r3, [r4, #4]
   839d0:	6043      	str	r3, [r0, #4]
   839d2:	d827      	bhi.n	83a24 <_realloc_r+0x2bc>
   839d4:	f100 0308 	add.w	r3, r0, #8
   839d8:	f104 0208 	add.w	r2, r4, #8
   839dc:	e70b      	b.n	837f6 <_realloc_r+0x8e>
   839de:	4620      	mov	r0, r4
   839e0:	462a      	mov	r2, r5
   839e2:	6801      	ldr	r1, [r0, #0]
   839e4:	461f      	mov	r7, r3
   839e6:	6011      	str	r1, [r2, #0]
   839e8:	6841      	ldr	r1, [r0, #4]
   839ea:	46d1      	mov	r9, sl
   839ec:	6051      	str	r1, [r2, #4]
   839ee:	6883      	ldr	r3, [r0, #8]
   839f0:	6093      	str	r3, [r2, #8]
   839f2:	e719      	b.n	83828 <_realloc_r+0xc0>
   839f4:	ebab 0b06 	sub.w	fp, fp, r6
   839f8:	eb09 0106 	add.w	r1, r9, r6
   839fc:	f04b 0201 	orr.w	r2, fp, #1
   83a00:	6099      	str	r1, [r3, #8]
   83a02:	604a      	str	r2, [r1, #4]
   83a04:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83a08:	4640      	mov	r0, r8
   83a0a:	f003 0301 	and.w	r3, r3, #1
   83a0e:	431e      	orrs	r6, r3
   83a10:	f844 6c04 	str.w	r6, [r4, #-4]
   83a14:	f7ff fea2 	bl	8375c <__malloc_unlock>
   83a18:	4625      	mov	r5, r4
   83a1a:	e718      	b.n	8384e <_realloc_r+0xe6>
   83a1c:	4621      	mov	r1, r4
   83a1e:	f7ff fe33 	bl	83688 <memmove>
   83a22:	e6ee      	b.n	83802 <_realloc_r+0x9a>
   83a24:	68a3      	ldr	r3, [r4, #8]
   83a26:	2a24      	cmp	r2, #36	; 0x24
   83a28:	6083      	str	r3, [r0, #8]
   83a2a:	68e3      	ldr	r3, [r4, #12]
   83a2c:	60c3      	str	r3, [r0, #12]
   83a2e:	d018      	beq.n	83a62 <_realloc_r+0x2fa>
   83a30:	f100 0310 	add.w	r3, r0, #16
   83a34:	f104 0210 	add.w	r2, r4, #16
   83a38:	e6dd      	b.n	837f6 <_realloc_r+0x8e>
   83a3a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83a3e:	4625      	mov	r5, r4
   83a40:	f023 0303 	bic.w	r3, r3, #3
   83a44:	441f      	add	r7, r3
   83a46:	e6ef      	b.n	83828 <_realloc_r+0xc0>
   83a48:	68a1      	ldr	r1, [r4, #8]
   83a4a:	2a24      	cmp	r2, #36	; 0x24
   83a4c:	f8ca 1010 	str.w	r1, [sl, #16]
   83a50:	68e1      	ldr	r1, [r4, #12]
   83a52:	f8ca 1014 	str.w	r1, [sl, #20]
   83a56:	d00d      	beq.n	83a74 <_realloc_r+0x30c>
   83a58:	f104 0010 	add.w	r0, r4, #16
   83a5c:	f10a 0218 	add.w	r2, sl, #24
   83a60:	e7bf      	b.n	839e2 <_realloc_r+0x27a>
   83a62:	6922      	ldr	r2, [r4, #16]
   83a64:	f100 0318 	add.w	r3, r0, #24
   83a68:	6102      	str	r2, [r0, #16]
   83a6a:	6961      	ldr	r1, [r4, #20]
   83a6c:	f104 0218 	add.w	r2, r4, #24
   83a70:	6141      	str	r1, [r0, #20]
   83a72:	e6c0      	b.n	837f6 <_realloc_r+0x8e>
   83a74:	6922      	ldr	r2, [r4, #16]
   83a76:	f104 0018 	add.w	r0, r4, #24
   83a7a:	f8ca 2018 	str.w	r2, [sl, #24]
   83a7e:	6961      	ldr	r1, [r4, #20]
   83a80:	f10a 0220 	add.w	r2, sl, #32
   83a84:	f8ca 101c 	str.w	r1, [sl, #28]
   83a88:	e7ab      	b.n	839e2 <_realloc_r+0x27a>
   83a8a:	4621      	mov	r1, r4
   83a8c:	462a      	mov	r2, r5
   83a8e:	e782      	b.n	83996 <_realloc_r+0x22e>
   83a90:	4621      	mov	r1, r4
   83a92:	4628      	mov	r0, r5
   83a94:	9301      	str	r3, [sp, #4]
   83a96:	f7ff fdf7 	bl	83688 <memmove>
   83a9a:	9b01      	ldr	r3, [sp, #4]
   83a9c:	e781      	b.n	839a2 <_realloc_r+0x23a>
   83a9e:	68a1      	ldr	r1, [r4, #8]
   83aa0:	2a24      	cmp	r2, #36	; 0x24
   83aa2:	f8ca 1010 	str.w	r1, [sl, #16]
   83aa6:	68e1      	ldr	r1, [r4, #12]
   83aa8:	f8ca 1014 	str.w	r1, [sl, #20]
   83aac:	d006      	beq.n	83abc <_realloc_r+0x354>
   83aae:	f104 0110 	add.w	r1, r4, #16
   83ab2:	f10a 0218 	add.w	r2, sl, #24
   83ab6:	e76e      	b.n	83996 <_realloc_r+0x22e>
   83ab8:	200706d0 	.word	0x200706d0
   83abc:	6922      	ldr	r2, [r4, #16]
   83abe:	f104 0118 	add.w	r1, r4, #24
   83ac2:	f8ca 2018 	str.w	r2, [sl, #24]
   83ac6:	6960      	ldr	r0, [r4, #20]
   83ac8:	f10a 0220 	add.w	r2, sl, #32
   83acc:	f8ca 001c 	str.w	r0, [sl, #28]
   83ad0:	e761      	b.n	83996 <_realloc_r+0x22e>
   83ad2:	bf00      	nop

00083ad4 <_sbrk_r>:
   83ad4:	b538      	push	{r3, r4, r5, lr}
   83ad6:	2300      	movs	r3, #0
   83ad8:	4c06      	ldr	r4, [pc, #24]	; (83af4 <_sbrk_r+0x20>)
   83ada:	4605      	mov	r5, r0
   83adc:	4608      	mov	r0, r1
   83ade:	6023      	str	r3, [r4, #0]
   83ae0:	f7fd fc28 	bl	81334 <_sbrk>
   83ae4:	1c43      	adds	r3, r0, #1
   83ae6:	d000      	beq.n	83aea <_sbrk_r+0x16>
   83ae8:	bd38      	pop	{r3, r4, r5, pc}
   83aea:	6823      	ldr	r3, [r4, #0]
   83aec:	2b00      	cmp	r3, #0
   83aee:	d0fb      	beq.n	83ae8 <_sbrk_r+0x14>
   83af0:	602b      	str	r3, [r5, #0]
   83af2:	bd38      	pop	{r3, r4, r5, pc}
   83af4:	20070ca8 	.word	0x20070ca8

00083af8 <__sread>:
   83af8:	b510      	push	{r4, lr}
   83afa:	460c      	mov	r4, r1
   83afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b00:	f000 f9f4 	bl	83eec <_read_r>
   83b04:	2800      	cmp	r0, #0
   83b06:	db03      	blt.n	83b10 <__sread+0x18>
   83b08:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83b0a:	4403      	add	r3, r0
   83b0c:	6523      	str	r3, [r4, #80]	; 0x50
   83b0e:	bd10      	pop	{r4, pc}
   83b10:	89a3      	ldrh	r3, [r4, #12]
   83b12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83b16:	81a3      	strh	r3, [r4, #12]
   83b18:	bd10      	pop	{r4, pc}
   83b1a:	bf00      	nop

00083b1c <__swrite>:
   83b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83b20:	460c      	mov	r4, r1
   83b22:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83b26:	461f      	mov	r7, r3
   83b28:	05cb      	lsls	r3, r1, #23
   83b2a:	4616      	mov	r6, r2
   83b2c:	4605      	mov	r5, r0
   83b2e:	d507      	bpl.n	83b40 <__swrite+0x24>
   83b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b34:	2302      	movs	r3, #2
   83b36:	2200      	movs	r2, #0
   83b38:	f000 f9c2 	bl	83ec0 <_lseek_r>
   83b3c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83b40:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83b44:	81a1      	strh	r1, [r4, #12]
   83b46:	463b      	mov	r3, r7
   83b48:	4632      	mov	r2, r6
   83b4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83b4e:	4628      	mov	r0, r5
   83b50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83b54:	f000 b8a2 	b.w	83c9c <_write_r>

00083b58 <__sseek>:
   83b58:	b510      	push	{r4, lr}
   83b5a:	460c      	mov	r4, r1
   83b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b60:	f000 f9ae 	bl	83ec0 <_lseek_r>
   83b64:	89a3      	ldrh	r3, [r4, #12]
   83b66:	1c42      	adds	r2, r0, #1
   83b68:	bf0e      	itee	eq
   83b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83b72:	6520      	strne	r0, [r4, #80]	; 0x50
   83b74:	81a3      	strh	r3, [r4, #12]
   83b76:	bd10      	pop	{r4, pc}

00083b78 <__sclose>:
   83b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83b7c:	f000 b906 	b.w	83d8c <_close_r>

00083b80 <__swbuf_r>:
   83b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83b82:	460d      	mov	r5, r1
   83b84:	4614      	mov	r4, r2
   83b86:	4606      	mov	r6, r0
   83b88:	b110      	cbz	r0, 83b90 <__swbuf_r+0x10>
   83b8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83b8c:	2b00      	cmp	r3, #0
   83b8e:	d04b      	beq.n	83c28 <__swbuf_r+0xa8>
   83b90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83b94:	69a3      	ldr	r3, [r4, #24]
   83b96:	b291      	uxth	r1, r2
   83b98:	0708      	lsls	r0, r1, #28
   83b9a:	60a3      	str	r3, [r4, #8]
   83b9c:	d539      	bpl.n	83c12 <__swbuf_r+0x92>
   83b9e:	6923      	ldr	r3, [r4, #16]
   83ba0:	2b00      	cmp	r3, #0
   83ba2:	d036      	beq.n	83c12 <__swbuf_r+0x92>
   83ba4:	b2ed      	uxtb	r5, r5
   83ba6:	0489      	lsls	r1, r1, #18
   83ba8:	462f      	mov	r7, r5
   83baa:	d515      	bpl.n	83bd8 <__swbuf_r+0x58>
   83bac:	6822      	ldr	r2, [r4, #0]
   83bae:	6961      	ldr	r1, [r4, #20]
   83bb0:	1ad3      	subs	r3, r2, r3
   83bb2:	428b      	cmp	r3, r1
   83bb4:	da1c      	bge.n	83bf0 <__swbuf_r+0x70>
   83bb6:	3301      	adds	r3, #1
   83bb8:	68a1      	ldr	r1, [r4, #8]
   83bba:	1c50      	adds	r0, r2, #1
   83bbc:	3901      	subs	r1, #1
   83bbe:	60a1      	str	r1, [r4, #8]
   83bc0:	6020      	str	r0, [r4, #0]
   83bc2:	7015      	strb	r5, [r2, #0]
   83bc4:	6962      	ldr	r2, [r4, #20]
   83bc6:	429a      	cmp	r2, r3
   83bc8:	d01a      	beq.n	83c00 <__swbuf_r+0x80>
   83bca:	89a3      	ldrh	r3, [r4, #12]
   83bcc:	07db      	lsls	r3, r3, #31
   83bce:	d501      	bpl.n	83bd4 <__swbuf_r+0x54>
   83bd0:	2d0a      	cmp	r5, #10
   83bd2:	d015      	beq.n	83c00 <__swbuf_r+0x80>
   83bd4:	4638      	mov	r0, r7
   83bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83bd8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83bde:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83be2:	81a2      	strh	r2, [r4, #12]
   83be4:	6822      	ldr	r2, [r4, #0]
   83be6:	6661      	str	r1, [r4, #100]	; 0x64
   83be8:	6961      	ldr	r1, [r4, #20]
   83bea:	1ad3      	subs	r3, r2, r3
   83bec:	428b      	cmp	r3, r1
   83bee:	dbe2      	blt.n	83bb6 <__swbuf_r+0x36>
   83bf0:	4621      	mov	r1, r4
   83bf2:	4630      	mov	r0, r6
   83bf4:	f7fe fdae 	bl	82754 <_fflush_r>
   83bf8:	b940      	cbnz	r0, 83c0c <__swbuf_r+0x8c>
   83bfa:	2301      	movs	r3, #1
   83bfc:	6822      	ldr	r2, [r4, #0]
   83bfe:	e7db      	b.n	83bb8 <__swbuf_r+0x38>
   83c00:	4621      	mov	r1, r4
   83c02:	4630      	mov	r0, r6
   83c04:	f7fe fda6 	bl	82754 <_fflush_r>
   83c08:	2800      	cmp	r0, #0
   83c0a:	d0e3      	beq.n	83bd4 <__swbuf_r+0x54>
   83c0c:	f04f 37ff 	mov.w	r7, #4294967295
   83c10:	e7e0      	b.n	83bd4 <__swbuf_r+0x54>
   83c12:	4621      	mov	r1, r4
   83c14:	4630      	mov	r0, r6
   83c16:	f7fe fc8d 	bl	82534 <__swsetup_r>
   83c1a:	2800      	cmp	r0, #0
   83c1c:	d1f6      	bne.n	83c0c <__swbuf_r+0x8c>
   83c1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83c22:	6923      	ldr	r3, [r4, #16]
   83c24:	b291      	uxth	r1, r2
   83c26:	e7bd      	b.n	83ba4 <__swbuf_r+0x24>
   83c28:	f7fe fdec 	bl	82804 <__sinit>
   83c2c:	e7b0      	b.n	83b90 <__swbuf_r+0x10>
   83c2e:	bf00      	nop

00083c30 <_wcrtomb_r>:
   83c30:	b5f0      	push	{r4, r5, r6, r7, lr}
   83c32:	4606      	mov	r6, r0
   83c34:	b085      	sub	sp, #20
   83c36:	461f      	mov	r7, r3
   83c38:	b189      	cbz	r1, 83c5e <_wcrtomb_r+0x2e>
   83c3a:	4c10      	ldr	r4, [pc, #64]	; (83c7c <_wcrtomb_r+0x4c>)
   83c3c:	4d10      	ldr	r5, [pc, #64]	; (83c80 <_wcrtomb_r+0x50>)
   83c3e:	6824      	ldr	r4, [r4, #0]
   83c40:	6b64      	ldr	r4, [r4, #52]	; 0x34
   83c42:	2c00      	cmp	r4, #0
   83c44:	bf08      	it	eq
   83c46:	462c      	moveq	r4, r5
   83c48:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c4c:	47a0      	blx	r4
   83c4e:	1c43      	adds	r3, r0, #1
   83c50:	d103      	bne.n	83c5a <_wcrtomb_r+0x2a>
   83c52:	2200      	movs	r2, #0
   83c54:	238a      	movs	r3, #138	; 0x8a
   83c56:	603a      	str	r2, [r7, #0]
   83c58:	6033      	str	r3, [r6, #0]
   83c5a:	b005      	add	sp, #20
   83c5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83c5e:	460c      	mov	r4, r1
   83c60:	4a06      	ldr	r2, [pc, #24]	; (83c7c <_wcrtomb_r+0x4c>)
   83c62:	4d07      	ldr	r5, [pc, #28]	; (83c80 <_wcrtomb_r+0x50>)
   83c64:	6811      	ldr	r1, [r2, #0]
   83c66:	4622      	mov	r2, r4
   83c68:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   83c6a:	a901      	add	r1, sp, #4
   83c6c:	2c00      	cmp	r4, #0
   83c6e:	bf08      	it	eq
   83c70:	462c      	moveq	r4, r5
   83c72:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   83c76:	47a0      	blx	r4
   83c78:	e7e9      	b.n	83c4e <_wcrtomb_r+0x1e>
   83c7a:	bf00      	nop
   83c7c:	20070134 	.word	0x20070134
   83c80:	20070564 	.word	0x20070564

00083c84 <__ascii_wctomb>:
   83c84:	b119      	cbz	r1, 83c8e <__ascii_wctomb+0xa>
   83c86:	2aff      	cmp	r2, #255	; 0xff
   83c88:	d803      	bhi.n	83c92 <__ascii_wctomb+0xe>
   83c8a:	700a      	strb	r2, [r1, #0]
   83c8c:	2101      	movs	r1, #1
   83c8e:	4608      	mov	r0, r1
   83c90:	4770      	bx	lr
   83c92:	238a      	movs	r3, #138	; 0x8a
   83c94:	f04f 31ff 	mov.w	r1, #4294967295
   83c98:	6003      	str	r3, [r0, #0]
   83c9a:	e7f8      	b.n	83c8e <__ascii_wctomb+0xa>

00083c9c <_write_r>:
   83c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83c9e:	460e      	mov	r6, r1
   83ca0:	2500      	movs	r5, #0
   83ca2:	4c08      	ldr	r4, [pc, #32]	; (83cc4 <_write_r+0x28>)
   83ca4:	4611      	mov	r1, r2
   83ca6:	4607      	mov	r7, r0
   83ca8:	461a      	mov	r2, r3
   83caa:	4630      	mov	r0, r6
   83cac:	6025      	str	r5, [r4, #0]
   83cae:	f7fc fcbb 	bl	80628 <_write>
   83cb2:	1c43      	adds	r3, r0, #1
   83cb4:	d000      	beq.n	83cb8 <_write_r+0x1c>
   83cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cb8:	6823      	ldr	r3, [r4, #0]
   83cba:	2b00      	cmp	r3, #0
   83cbc:	d0fb      	beq.n	83cb6 <_write_r+0x1a>
   83cbe:	603b      	str	r3, [r7, #0]
   83cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83cc2:	bf00      	nop
   83cc4:	20070ca8 	.word	0x20070ca8

00083cc8 <__register_exitproc>:
   83cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83ccc:	4d2c      	ldr	r5, [pc, #176]	; (83d80 <__register_exitproc+0xb8>)
   83cce:	4606      	mov	r6, r0
   83cd0:	6828      	ldr	r0, [r5, #0]
   83cd2:	4698      	mov	r8, r3
   83cd4:	460f      	mov	r7, r1
   83cd6:	4691      	mov	r9, r2
   83cd8:	f7ff f954 	bl	82f84 <__retarget_lock_acquire_recursive>
   83cdc:	4b29      	ldr	r3, [pc, #164]	; (83d84 <__register_exitproc+0xbc>)
   83cde:	681c      	ldr	r4, [r3, #0]
   83ce0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   83ce4:	2b00      	cmp	r3, #0
   83ce6:	d03e      	beq.n	83d66 <__register_exitproc+0x9e>
   83ce8:	685a      	ldr	r2, [r3, #4]
   83cea:	2a1f      	cmp	r2, #31
   83cec:	dc1c      	bgt.n	83d28 <__register_exitproc+0x60>
   83cee:	f102 0e01 	add.w	lr, r2, #1
   83cf2:	b176      	cbz	r6, 83d12 <__register_exitproc+0x4a>
   83cf4:	2101      	movs	r1, #1
   83cf6:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   83cfa:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   83cfe:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   83d02:	4091      	lsls	r1, r2
   83d04:	4308      	orrs	r0, r1
   83d06:	2e02      	cmp	r6, #2
   83d08:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d0c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   83d10:	d023      	beq.n	83d5a <__register_exitproc+0x92>
   83d12:	3202      	adds	r2, #2
   83d14:	f8c3 e004 	str.w	lr, [r3, #4]
   83d18:	6828      	ldr	r0, [r5, #0]
   83d1a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   83d1e:	f7ff f933 	bl	82f88 <__retarget_lock_release_recursive>
   83d22:	2000      	movs	r0, #0
   83d24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d28:	4b17      	ldr	r3, [pc, #92]	; (83d88 <__register_exitproc+0xc0>)
   83d2a:	b30b      	cbz	r3, 83d70 <__register_exitproc+0xa8>
   83d2c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83d30:	f7ff f9a4 	bl	8307c <malloc>
   83d34:	4603      	mov	r3, r0
   83d36:	b1d8      	cbz	r0, 83d70 <__register_exitproc+0xa8>
   83d38:	2000      	movs	r0, #0
   83d3a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   83d3e:	f04f 0e01 	mov.w	lr, #1
   83d42:	6058      	str	r0, [r3, #4]
   83d44:	6019      	str	r1, [r3, #0]
   83d46:	4602      	mov	r2, r0
   83d48:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d4c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   83d50:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   83d54:	2e00      	cmp	r6, #0
   83d56:	d0dc      	beq.n	83d12 <__register_exitproc+0x4a>
   83d58:	e7cc      	b.n	83cf4 <__register_exitproc+0x2c>
   83d5a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   83d5e:	4301      	orrs	r1, r0
   83d60:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   83d64:	e7d5      	b.n	83d12 <__register_exitproc+0x4a>
   83d66:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   83d6a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   83d6e:	e7bb      	b.n	83ce8 <__register_exitproc+0x20>
   83d70:	6828      	ldr	r0, [r5, #0]
   83d72:	f7ff f909 	bl	82f88 <__retarget_lock_release_recursive>
   83d76:	f04f 30ff 	mov.w	r0, #4294967295
   83d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83d7e:	bf00      	nop
   83d80:	20070560 	.word	0x20070560
   83d84:	0008434c 	.word	0x0008434c
   83d88:	0008307d 	.word	0x0008307d

00083d8c <_close_r>:
   83d8c:	b538      	push	{r3, r4, r5, lr}
   83d8e:	2300      	movs	r3, #0
   83d90:	4c06      	ldr	r4, [pc, #24]	; (83dac <_close_r+0x20>)
   83d92:	4605      	mov	r5, r0
   83d94:	4608      	mov	r0, r1
   83d96:	6023      	str	r3, [r4, #0]
   83d98:	f7fd fae8 	bl	8136c <_close>
   83d9c:	1c43      	adds	r3, r0, #1
   83d9e:	d000      	beq.n	83da2 <_close_r+0x16>
   83da0:	bd38      	pop	{r3, r4, r5, pc}
   83da2:	6823      	ldr	r3, [r4, #0]
   83da4:	2b00      	cmp	r3, #0
   83da6:	d0fb      	beq.n	83da0 <_close_r+0x14>
   83da8:	602b      	str	r3, [r5, #0]
   83daa:	bd38      	pop	{r3, r4, r5, pc}
   83dac:	20070ca8 	.word	0x20070ca8

00083db0 <_fclose_r>:
   83db0:	b570      	push	{r4, r5, r6, lr}
   83db2:	b159      	cbz	r1, 83dcc <_fclose_r+0x1c>
   83db4:	4605      	mov	r5, r0
   83db6:	460c      	mov	r4, r1
   83db8:	b110      	cbz	r0, 83dc0 <_fclose_r+0x10>
   83dba:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83dbc:	2b00      	cmp	r3, #0
   83dbe:	d03c      	beq.n	83e3a <_fclose_r+0x8a>
   83dc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83dc2:	07d8      	lsls	r0, r3, #31
   83dc4:	d505      	bpl.n	83dd2 <_fclose_r+0x22>
   83dc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83dca:	b92b      	cbnz	r3, 83dd8 <_fclose_r+0x28>
   83dcc:	2600      	movs	r6, #0
   83dce:	4630      	mov	r0, r6
   83dd0:	bd70      	pop	{r4, r5, r6, pc}
   83dd2:	89a3      	ldrh	r3, [r4, #12]
   83dd4:	0599      	lsls	r1, r3, #22
   83dd6:	d53c      	bpl.n	83e52 <_fclose_r+0xa2>
   83dd8:	4621      	mov	r1, r4
   83dda:	4628      	mov	r0, r5
   83ddc:	f7fe fc1e 	bl	8261c <__sflush_r>
   83de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   83de2:	4606      	mov	r6, r0
   83de4:	b133      	cbz	r3, 83df4 <_fclose_r+0x44>
   83de6:	69e1      	ldr	r1, [r4, #28]
   83de8:	4628      	mov	r0, r5
   83dea:	4798      	blx	r3
   83dec:	2800      	cmp	r0, #0
   83dee:	bfb8      	it	lt
   83df0:	f04f 36ff 	movlt.w	r6, #4294967295
   83df4:	89a3      	ldrh	r3, [r4, #12]
   83df6:	061a      	lsls	r2, r3, #24
   83df8:	d422      	bmi.n	83e40 <_fclose_r+0x90>
   83dfa:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83dfc:	b141      	cbz	r1, 83e10 <_fclose_r+0x60>
   83dfe:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83e02:	4299      	cmp	r1, r3
   83e04:	d002      	beq.n	83e0c <_fclose_r+0x5c>
   83e06:	4628      	mov	r0, r5
   83e08:	f7fe fe22 	bl	82a50 <_free_r>
   83e0c:	2300      	movs	r3, #0
   83e0e:	6323      	str	r3, [r4, #48]	; 0x30
   83e10:	6c61      	ldr	r1, [r4, #68]	; 0x44
   83e12:	b121      	cbz	r1, 83e1e <_fclose_r+0x6e>
   83e14:	4628      	mov	r0, r5
   83e16:	f7fe fe1b 	bl	82a50 <_free_r>
   83e1a:	2300      	movs	r3, #0
   83e1c:	6463      	str	r3, [r4, #68]	; 0x44
   83e1e:	f7fe fd21 	bl	82864 <__sfp_lock_acquire>
   83e22:	2200      	movs	r2, #0
   83e24:	6e63      	ldr	r3, [r4, #100]	; 0x64
   83e26:	81a2      	strh	r2, [r4, #12]
   83e28:	07db      	lsls	r3, r3, #31
   83e2a:	d50e      	bpl.n	83e4a <_fclose_r+0x9a>
   83e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e2e:	f7ff f8a7 	bl	82f80 <__retarget_lock_close_recursive>
   83e32:	f7fe fd1d 	bl	82870 <__sfp_lock_release>
   83e36:	4630      	mov	r0, r6
   83e38:	bd70      	pop	{r4, r5, r6, pc}
   83e3a:	f7fe fce3 	bl	82804 <__sinit>
   83e3e:	e7bf      	b.n	83dc0 <_fclose_r+0x10>
   83e40:	6921      	ldr	r1, [r4, #16]
   83e42:	4628      	mov	r0, r5
   83e44:	f7fe fe04 	bl	82a50 <_free_r>
   83e48:	e7d7      	b.n	83dfa <_fclose_r+0x4a>
   83e4a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e4c:	f7ff f89c 	bl	82f88 <__retarget_lock_release_recursive>
   83e50:	e7ec      	b.n	83e2c <_fclose_r+0x7c>
   83e52:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e54:	f7ff f896 	bl	82f84 <__retarget_lock_acquire_recursive>
   83e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83e5c:	2b00      	cmp	r3, #0
   83e5e:	d1bb      	bne.n	83dd8 <_fclose_r+0x28>
   83e60:	6e66      	ldr	r6, [r4, #100]	; 0x64
   83e62:	f016 0601 	ands.w	r6, r6, #1
   83e66:	d1b1      	bne.n	83dcc <_fclose_r+0x1c>
   83e68:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83e6a:	f7ff f88d 	bl	82f88 <__retarget_lock_release_recursive>
   83e6e:	4630      	mov	r0, r6
   83e70:	bd70      	pop	{r4, r5, r6, pc}
   83e72:	bf00      	nop

00083e74 <_fstat_r>:
   83e74:	b570      	push	{r4, r5, r6, lr}
   83e76:	460d      	mov	r5, r1
   83e78:	2300      	movs	r3, #0
   83e7a:	4c07      	ldr	r4, [pc, #28]	; (83e98 <_fstat_r+0x24>)
   83e7c:	4606      	mov	r6, r0
   83e7e:	4611      	mov	r1, r2
   83e80:	4628      	mov	r0, r5
   83e82:	6023      	str	r3, [r4, #0]
   83e84:	f7fd fa75 	bl	81372 <_fstat>
   83e88:	1c43      	adds	r3, r0, #1
   83e8a:	d000      	beq.n	83e8e <_fstat_r+0x1a>
   83e8c:	bd70      	pop	{r4, r5, r6, pc}
   83e8e:	6823      	ldr	r3, [r4, #0]
   83e90:	2b00      	cmp	r3, #0
   83e92:	d0fb      	beq.n	83e8c <_fstat_r+0x18>
   83e94:	6033      	str	r3, [r6, #0]
   83e96:	bd70      	pop	{r4, r5, r6, pc}
   83e98:	20070ca8 	.word	0x20070ca8

00083e9c <_isatty_r>:
   83e9c:	b538      	push	{r3, r4, r5, lr}
   83e9e:	2300      	movs	r3, #0
   83ea0:	4c06      	ldr	r4, [pc, #24]	; (83ebc <_isatty_r+0x20>)
   83ea2:	4605      	mov	r5, r0
   83ea4:	4608      	mov	r0, r1
   83ea6:	6023      	str	r3, [r4, #0]
   83ea8:	f7fd fa68 	bl	8137c <_isatty>
   83eac:	1c43      	adds	r3, r0, #1
   83eae:	d000      	beq.n	83eb2 <_isatty_r+0x16>
   83eb0:	bd38      	pop	{r3, r4, r5, pc}
   83eb2:	6823      	ldr	r3, [r4, #0]
   83eb4:	2b00      	cmp	r3, #0
   83eb6:	d0fb      	beq.n	83eb0 <_isatty_r+0x14>
   83eb8:	602b      	str	r3, [r5, #0]
   83eba:	bd38      	pop	{r3, r4, r5, pc}
   83ebc:	20070ca8 	.word	0x20070ca8

00083ec0 <_lseek_r>:
   83ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83ec2:	460e      	mov	r6, r1
   83ec4:	2500      	movs	r5, #0
   83ec6:	4c08      	ldr	r4, [pc, #32]	; (83ee8 <_lseek_r+0x28>)
   83ec8:	4611      	mov	r1, r2
   83eca:	4607      	mov	r7, r0
   83ecc:	461a      	mov	r2, r3
   83ece:	4630      	mov	r0, r6
   83ed0:	6025      	str	r5, [r4, #0]
   83ed2:	f7fd fa55 	bl	81380 <_lseek>
   83ed6:	1c43      	adds	r3, r0, #1
   83ed8:	d000      	beq.n	83edc <_lseek_r+0x1c>
   83eda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83edc:	6823      	ldr	r3, [r4, #0]
   83ede:	2b00      	cmp	r3, #0
   83ee0:	d0fb      	beq.n	83eda <_lseek_r+0x1a>
   83ee2:	603b      	str	r3, [r7, #0]
   83ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83ee6:	bf00      	nop
   83ee8:	20070ca8 	.word	0x20070ca8

00083eec <_read_r>:
   83eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83eee:	460e      	mov	r6, r1
   83ef0:	2500      	movs	r5, #0
   83ef2:	4c08      	ldr	r4, [pc, #32]	; (83f14 <_read_r+0x28>)
   83ef4:	4611      	mov	r1, r2
   83ef6:	4607      	mov	r7, r0
   83ef8:	461a      	mov	r2, r3
   83efa:	4630      	mov	r0, r6
   83efc:	6025      	str	r5, [r4, #0]
   83efe:	f7fc fb75 	bl	805ec <_read>
   83f02:	1c43      	adds	r3, r0, #1
   83f04:	d000      	beq.n	83f08 <_read_r+0x1c>
   83f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f08:	6823      	ldr	r3, [r4, #0]
   83f0a:	2b00      	cmp	r3, #0
   83f0c:	d0fb      	beq.n	83f06 <_read_r+0x1a>
   83f0e:	603b      	str	r3, [r7, #0]
   83f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83f12:	bf00      	nop
   83f14:	20070ca8 	.word	0x20070ca8

00083f18 <__aeabi_uldivmod>:
   83f18:	b953      	cbnz	r3, 83f30 <__aeabi_uldivmod+0x18>
   83f1a:	b94a      	cbnz	r2, 83f30 <__aeabi_uldivmod+0x18>
   83f1c:	2900      	cmp	r1, #0
   83f1e:	bf08      	it	eq
   83f20:	2800      	cmpeq	r0, #0
   83f22:	bf1c      	itt	ne
   83f24:	f04f 31ff 	movne.w	r1, #4294967295
   83f28:	f04f 30ff 	movne.w	r0, #4294967295
   83f2c:	f000 b97a 	b.w	84224 <__aeabi_idiv0>
   83f30:	f1ad 0c08 	sub.w	ip, sp, #8
   83f34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   83f38:	f000 f806 	bl	83f48 <__udivmoddi4>
   83f3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   83f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   83f44:	b004      	add	sp, #16
   83f46:	4770      	bx	lr

00083f48 <__udivmoddi4>:
   83f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83f4c:	468c      	mov	ip, r1
   83f4e:	460e      	mov	r6, r1
   83f50:	4604      	mov	r4, r0
   83f52:	9d08      	ldr	r5, [sp, #32]
   83f54:	2b00      	cmp	r3, #0
   83f56:	d150      	bne.n	83ffa <__udivmoddi4+0xb2>
   83f58:	428a      	cmp	r2, r1
   83f5a:	4617      	mov	r7, r2
   83f5c:	d96c      	bls.n	84038 <__udivmoddi4+0xf0>
   83f5e:	fab2 fe82 	clz	lr, r2
   83f62:	f1be 0f00 	cmp.w	lr, #0
   83f66:	d00b      	beq.n	83f80 <__udivmoddi4+0x38>
   83f68:	f1ce 0c20 	rsb	ip, lr, #32
   83f6c:	fa01 f60e 	lsl.w	r6, r1, lr
   83f70:	fa20 fc0c 	lsr.w	ip, r0, ip
   83f74:	fa02 f70e 	lsl.w	r7, r2, lr
   83f78:	ea4c 0c06 	orr.w	ip, ip, r6
   83f7c:	fa00 f40e 	lsl.w	r4, r0, lr
   83f80:	0c3a      	lsrs	r2, r7, #16
   83f82:	fbbc f9f2 	udiv	r9, ip, r2
   83f86:	b2bb      	uxth	r3, r7
   83f88:	fb02 cc19 	mls	ip, r2, r9, ip
   83f8c:	fb09 fa03 	mul.w	sl, r9, r3
   83f90:	ea4f 4814 	mov.w	r8, r4, lsr #16
   83f94:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   83f98:	45b2      	cmp	sl, r6
   83f9a:	d90a      	bls.n	83fb2 <__udivmoddi4+0x6a>
   83f9c:	19f6      	adds	r6, r6, r7
   83f9e:	f109 31ff 	add.w	r1, r9, #4294967295
   83fa2:	f080 8125 	bcs.w	841f0 <__udivmoddi4+0x2a8>
   83fa6:	45b2      	cmp	sl, r6
   83fa8:	f240 8122 	bls.w	841f0 <__udivmoddi4+0x2a8>
   83fac:	f1a9 0902 	sub.w	r9, r9, #2
   83fb0:	443e      	add	r6, r7
   83fb2:	eba6 060a 	sub.w	r6, r6, sl
   83fb6:	fbb6 f0f2 	udiv	r0, r6, r2
   83fba:	fb02 6610 	mls	r6, r2, r0, r6
   83fbe:	fb00 f303 	mul.w	r3, r0, r3
   83fc2:	b2a4      	uxth	r4, r4
   83fc4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   83fc8:	42a3      	cmp	r3, r4
   83fca:	d909      	bls.n	83fe0 <__udivmoddi4+0x98>
   83fcc:	19e4      	adds	r4, r4, r7
   83fce:	f100 32ff 	add.w	r2, r0, #4294967295
   83fd2:	f080 810b 	bcs.w	841ec <__udivmoddi4+0x2a4>
   83fd6:	42a3      	cmp	r3, r4
   83fd8:	f240 8108 	bls.w	841ec <__udivmoddi4+0x2a4>
   83fdc:	3802      	subs	r0, #2
   83fde:	443c      	add	r4, r7
   83fe0:	2100      	movs	r1, #0
   83fe2:	1ae4      	subs	r4, r4, r3
   83fe4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   83fe8:	2d00      	cmp	r5, #0
   83fea:	d062      	beq.n	840b2 <__udivmoddi4+0x16a>
   83fec:	2300      	movs	r3, #0
   83fee:	fa24 f40e 	lsr.w	r4, r4, lr
   83ff2:	602c      	str	r4, [r5, #0]
   83ff4:	606b      	str	r3, [r5, #4]
   83ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83ffa:	428b      	cmp	r3, r1
   83ffc:	d907      	bls.n	8400e <__udivmoddi4+0xc6>
   83ffe:	2d00      	cmp	r5, #0
   84000:	d055      	beq.n	840ae <__udivmoddi4+0x166>
   84002:	2100      	movs	r1, #0
   84004:	e885 0041 	stmia.w	r5, {r0, r6}
   84008:	4608      	mov	r0, r1
   8400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8400e:	fab3 f183 	clz	r1, r3
   84012:	2900      	cmp	r1, #0
   84014:	f040 808f 	bne.w	84136 <__udivmoddi4+0x1ee>
   84018:	42b3      	cmp	r3, r6
   8401a:	d302      	bcc.n	84022 <__udivmoddi4+0xda>
   8401c:	4282      	cmp	r2, r0
   8401e:	f200 80fc 	bhi.w	8421a <__udivmoddi4+0x2d2>
   84022:	1a84      	subs	r4, r0, r2
   84024:	eb66 0603 	sbc.w	r6, r6, r3
   84028:	2001      	movs	r0, #1
   8402a:	46b4      	mov	ip, r6
   8402c:	2d00      	cmp	r5, #0
   8402e:	d040      	beq.n	840b2 <__udivmoddi4+0x16a>
   84030:	e885 1010 	stmia.w	r5, {r4, ip}
   84034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84038:	b912      	cbnz	r2, 84040 <__udivmoddi4+0xf8>
   8403a:	2701      	movs	r7, #1
   8403c:	fbb7 f7f2 	udiv	r7, r7, r2
   84040:	fab7 fe87 	clz	lr, r7
   84044:	f1be 0f00 	cmp.w	lr, #0
   84048:	d135      	bne.n	840b6 <__udivmoddi4+0x16e>
   8404a:	2101      	movs	r1, #1
   8404c:	1bf6      	subs	r6, r6, r7
   8404e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   84052:	fa1f f887 	uxth.w	r8, r7
   84056:	fbb6 f2fc 	udiv	r2, r6, ip
   8405a:	fb0c 6612 	mls	r6, ip, r2, r6
   8405e:	fb08 f002 	mul.w	r0, r8, r2
   84062:	0c23      	lsrs	r3, r4, #16
   84064:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   84068:	42b0      	cmp	r0, r6
   8406a:	d907      	bls.n	8407c <__udivmoddi4+0x134>
   8406c:	19f6      	adds	r6, r6, r7
   8406e:	f102 33ff 	add.w	r3, r2, #4294967295
   84072:	d202      	bcs.n	8407a <__udivmoddi4+0x132>
   84074:	42b0      	cmp	r0, r6
   84076:	f200 80d2 	bhi.w	8421e <__udivmoddi4+0x2d6>
   8407a:	461a      	mov	r2, r3
   8407c:	1a36      	subs	r6, r6, r0
   8407e:	fbb6 f0fc 	udiv	r0, r6, ip
   84082:	fb0c 6610 	mls	r6, ip, r0, r6
   84086:	fb08 f800 	mul.w	r8, r8, r0
   8408a:	b2a3      	uxth	r3, r4
   8408c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   84090:	45a0      	cmp	r8, r4
   84092:	d907      	bls.n	840a4 <__udivmoddi4+0x15c>
   84094:	19e4      	adds	r4, r4, r7
   84096:	f100 33ff 	add.w	r3, r0, #4294967295
   8409a:	d202      	bcs.n	840a2 <__udivmoddi4+0x15a>
   8409c:	45a0      	cmp	r8, r4
   8409e:	f200 80b9 	bhi.w	84214 <__udivmoddi4+0x2cc>
   840a2:	4618      	mov	r0, r3
   840a4:	eba4 0408 	sub.w	r4, r4, r8
   840a8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   840ac:	e79c      	b.n	83fe8 <__udivmoddi4+0xa0>
   840ae:	4629      	mov	r1, r5
   840b0:	4628      	mov	r0, r5
   840b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   840b6:	fa07 f70e 	lsl.w	r7, r7, lr
   840ba:	f1ce 0320 	rsb	r3, lr, #32
   840be:	fa26 f203 	lsr.w	r2, r6, r3
   840c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   840c6:	fbb2 f1fc 	udiv	r1, r2, ip
   840ca:	fa1f f887 	uxth.w	r8, r7
   840ce:	fb0c 2211 	mls	r2, ip, r1, r2
   840d2:	fa06 f60e 	lsl.w	r6, r6, lr
   840d6:	fa20 f303 	lsr.w	r3, r0, r3
   840da:	fb01 f908 	mul.w	r9, r1, r8
   840de:	4333      	orrs	r3, r6
   840e0:	0c1e      	lsrs	r6, r3, #16
   840e2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   840e6:	45b1      	cmp	r9, r6
   840e8:	fa00 f40e 	lsl.w	r4, r0, lr
   840ec:	d909      	bls.n	84102 <__udivmoddi4+0x1ba>
   840ee:	19f6      	adds	r6, r6, r7
   840f0:	f101 32ff 	add.w	r2, r1, #4294967295
   840f4:	f080 808c 	bcs.w	84210 <__udivmoddi4+0x2c8>
   840f8:	45b1      	cmp	r9, r6
   840fa:	f240 8089 	bls.w	84210 <__udivmoddi4+0x2c8>
   840fe:	3902      	subs	r1, #2
   84100:	443e      	add	r6, r7
   84102:	eba6 0609 	sub.w	r6, r6, r9
   84106:	fbb6 f0fc 	udiv	r0, r6, ip
   8410a:	fb0c 6210 	mls	r2, ip, r0, r6
   8410e:	fb00 f908 	mul.w	r9, r0, r8
   84112:	b29e      	uxth	r6, r3
   84114:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   84118:	45b1      	cmp	r9, r6
   8411a:	d907      	bls.n	8412c <__udivmoddi4+0x1e4>
   8411c:	19f6      	adds	r6, r6, r7
   8411e:	f100 33ff 	add.w	r3, r0, #4294967295
   84122:	d271      	bcs.n	84208 <__udivmoddi4+0x2c0>
   84124:	45b1      	cmp	r9, r6
   84126:	d96f      	bls.n	84208 <__udivmoddi4+0x2c0>
   84128:	3802      	subs	r0, #2
   8412a:	443e      	add	r6, r7
   8412c:	eba6 0609 	sub.w	r6, r6, r9
   84130:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   84134:	e78f      	b.n	84056 <__udivmoddi4+0x10e>
   84136:	f1c1 0720 	rsb	r7, r1, #32
   8413a:	fa22 f807 	lsr.w	r8, r2, r7
   8413e:	408b      	lsls	r3, r1
   84140:	ea48 0303 	orr.w	r3, r8, r3
   84144:	fa26 f407 	lsr.w	r4, r6, r7
   84148:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   8414c:	fbb4 f9fe 	udiv	r9, r4, lr
   84150:	fa1f fc83 	uxth.w	ip, r3
   84154:	fb0e 4419 	mls	r4, lr, r9, r4
   84158:	408e      	lsls	r6, r1
   8415a:	fa20 f807 	lsr.w	r8, r0, r7
   8415e:	fb09 fa0c 	mul.w	sl, r9, ip
   84162:	ea48 0806 	orr.w	r8, r8, r6
   84166:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8416a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   8416e:	45a2      	cmp	sl, r4
   84170:	fa02 f201 	lsl.w	r2, r2, r1
   84174:	fa00 f601 	lsl.w	r6, r0, r1
   84178:	d908      	bls.n	8418c <__udivmoddi4+0x244>
   8417a:	18e4      	adds	r4, r4, r3
   8417c:	f109 30ff 	add.w	r0, r9, #4294967295
   84180:	d244      	bcs.n	8420c <__udivmoddi4+0x2c4>
   84182:	45a2      	cmp	sl, r4
   84184:	d942      	bls.n	8420c <__udivmoddi4+0x2c4>
   84186:	f1a9 0902 	sub.w	r9, r9, #2
   8418a:	441c      	add	r4, r3
   8418c:	eba4 040a 	sub.w	r4, r4, sl
   84190:	fbb4 f0fe 	udiv	r0, r4, lr
   84194:	fb0e 4410 	mls	r4, lr, r0, r4
   84198:	fb00 fc0c 	mul.w	ip, r0, ip
   8419c:	fa1f f888 	uxth.w	r8, r8
   841a0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   841a4:	45a4      	cmp	ip, r4
   841a6:	d907      	bls.n	841b8 <__udivmoddi4+0x270>
   841a8:	18e4      	adds	r4, r4, r3
   841aa:	f100 3eff 	add.w	lr, r0, #4294967295
   841ae:	d229      	bcs.n	84204 <__udivmoddi4+0x2bc>
   841b0:	45a4      	cmp	ip, r4
   841b2:	d927      	bls.n	84204 <__udivmoddi4+0x2bc>
   841b4:	3802      	subs	r0, #2
   841b6:	441c      	add	r4, r3
   841b8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   841bc:	fba0 8902 	umull	r8, r9, r0, r2
   841c0:	eba4 0c0c 	sub.w	ip, r4, ip
   841c4:	45cc      	cmp	ip, r9
   841c6:	46c2      	mov	sl, r8
   841c8:	46ce      	mov	lr, r9
   841ca:	d315      	bcc.n	841f8 <__udivmoddi4+0x2b0>
   841cc:	d012      	beq.n	841f4 <__udivmoddi4+0x2ac>
   841ce:	b155      	cbz	r5, 841e6 <__udivmoddi4+0x29e>
   841d0:	ebb6 030a 	subs.w	r3, r6, sl
   841d4:	eb6c 060e 	sbc.w	r6, ip, lr
   841d8:	fa06 f707 	lsl.w	r7, r6, r7
   841dc:	40cb      	lsrs	r3, r1
   841de:	431f      	orrs	r7, r3
   841e0:	40ce      	lsrs	r6, r1
   841e2:	602f      	str	r7, [r5, #0]
   841e4:	606e      	str	r6, [r5, #4]
   841e6:	2100      	movs	r1, #0
   841e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   841ec:	4610      	mov	r0, r2
   841ee:	e6f7      	b.n	83fe0 <__udivmoddi4+0x98>
   841f0:	4689      	mov	r9, r1
   841f2:	e6de      	b.n	83fb2 <__udivmoddi4+0x6a>
   841f4:	4546      	cmp	r6, r8
   841f6:	d2ea      	bcs.n	841ce <__udivmoddi4+0x286>
   841f8:	ebb8 0a02 	subs.w	sl, r8, r2
   841fc:	eb69 0e03 	sbc.w	lr, r9, r3
   84200:	3801      	subs	r0, #1
   84202:	e7e4      	b.n	841ce <__udivmoddi4+0x286>
   84204:	4670      	mov	r0, lr
   84206:	e7d7      	b.n	841b8 <__udivmoddi4+0x270>
   84208:	4618      	mov	r0, r3
   8420a:	e78f      	b.n	8412c <__udivmoddi4+0x1e4>
   8420c:	4681      	mov	r9, r0
   8420e:	e7bd      	b.n	8418c <__udivmoddi4+0x244>
   84210:	4611      	mov	r1, r2
   84212:	e776      	b.n	84102 <__udivmoddi4+0x1ba>
   84214:	3802      	subs	r0, #2
   84216:	443c      	add	r4, r7
   84218:	e744      	b.n	840a4 <__udivmoddi4+0x15c>
   8421a:	4608      	mov	r0, r1
   8421c:	e706      	b.n	8402c <__udivmoddi4+0xe4>
   8421e:	3a02      	subs	r2, #2
   84220:	443e      	add	r6, r7
   84222:	e72b      	b.n	8407c <__udivmoddi4+0x134>

00084224 <__aeabi_idiv0>:
   84224:	4770      	bx	lr
   84226:	bf00      	nop
   84228:	4f525245 	.word	0x4f525245
   8422c:	6e203a52 	.word	0x6e203a52
   84230:	6964206f 	.word	0x6964206f
   84234:	74636572 	.word	0x74636572
   84238:	206e6f69 	.word	0x206e6f69
   8423c:	6c756f63 	.word	0x6c756f63
   84240:	65622064 	.word	0x65622064
   84244:	74656620 	.word	0x74656620
   84248:	64656863 	.word	0x64656863
   8424c:	6f726620 	.word	0x6f726620
   84250:	6874206d 	.word	0x6874206d
   84254:	656c2065 	.word	0x656c2065
   84258:	6d207466 	.word	0x6d207466
   8425c:	726f746f 	.word	0x726f746f
   84260:	74756220 	.word	0x74756220
   84264:	6c757020 	.word	0x6c757020
   84268:	77206573 	.word	0x77206573
   8426c:	73207361 	.word	0x73207361
   84270:	6c6c6974 	.word	0x6c6c6974
   84274:	69727420 	.word	0x69727420
   84278:	72656767 	.word	0x72656767
   8427c:	202e6465 	.word	0x202e6465
   84280:	6f636e45 	.word	0x6f636e45
   84284:	20726564 	.word	0x20726564
   84288:	736c7570 	.word	0x736c7570
   8428c:	61642065 	.word	0x61642065
   84290:	77206174 	.word	0x77206174
   84294:	206c6c69 	.word	0x206c6c69
   84298:	75206562 	.word	0x75206562
   8429c:	6c65726e 	.word	0x6c65726e
   842a0:	6c626169 	.word	0x6c626169
   842a4:	000a2e65 	.word	0x000a2e65
   842a8:	4f525245 	.word	0x4f525245
   842ac:	6e203a52 	.word	0x6e203a52
   842b0:	6964206f 	.word	0x6964206f
   842b4:	74636572 	.word	0x74636572
   842b8:	206e6f69 	.word	0x206e6f69
   842bc:	6c756f63 	.word	0x6c756f63
   842c0:	65622064 	.word	0x65622064
   842c4:	74656620 	.word	0x74656620
   842c8:	64656863 	.word	0x64656863
   842cc:	6f726620 	.word	0x6f726620
   842d0:	6874206d 	.word	0x6874206d
   842d4:	69722065 	.word	0x69722065
   842d8:	20746867 	.word	0x20746867
   842dc:	6f746f6d 	.word	0x6f746f6d
   842e0:	75622072 	.word	0x75622072
   842e4:	75702074 	.word	0x75702074
   842e8:	2065736c 	.word	0x2065736c
   842ec:	20736177 	.word	0x20736177
   842f0:	6c697473 	.word	0x6c697473
   842f4:	7274206c 	.word	0x7274206c
   842f8:	65676769 	.word	0x65676769
   842fc:	2e646572 	.word	0x2e646572
   84300:	636e4520 	.word	0x636e4520
   84304:	7265646f 	.word	0x7265646f
   84308:	6c757020 	.word	0x6c757020
   8430c:	64206573 	.word	0x64206573
   84310:	20617461 	.word	0x20617461
   84314:	6c6c6977 	.word	0x6c6c6977
   84318:	20656220 	.word	0x20656220
   8431c:	65726e75 	.word	0x65726e75
   84320:	6261696c 	.word	0x6261696c
   84324:	0a2e656c 	.word	0x0a2e656c
   84328:	00000000 	.word	0x00000000
   8432c:	736e6f43 	.word	0x736e6f43
   84330:	20656c6f 	.word	0x20656c6f
   84334:	64616572 	.word	0x64616572
   84338:	00000a79 	.word	0x00000a79
   8433c:	3d3d3d3d 	.word	0x3d3d3d3d
   84340:	3d3d3d3d 	.word	0x3d3d3d3d
   84344:	3d3d3d3d 	.word	0x3d3d3d3d
   84348:	00000a3d 	.word	0x00000a3d

0008434c <_global_impure_ptr>:
   8434c:	20070138 33323130 37363534 42413938     8.. 0123456789AB
   8435c:	46454443 00000000 33323130 37363534     CDEF....01234567
   8436c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   8437c:	0000296c                                l)..

00084380 <blanks.7217>:
   84380:	20202020 20202020 20202020 20202020                     

00084390 <zeroes.7218>:
   84390:	30303030 30303030 30303030 30303030     0000000000000000
   843a0:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000843b0 <_ctype_>:
   843b0:	20202000 20202020 28282020 20282828     .         ((((( 
   843c0:	20202020 20202020 20202020 20202020                     
   843d0:	10108820 10101010 10101010 10101010      ...............
   843e0:	04040410 04040404 10040404 10101010     ................
   843f0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   84400:	01010101 01010101 01010101 10101010     ................
   84410:	42421010 42424242 02020202 02020202     ..BBBBBB........
   84420:	02020202 02020202 02020202 10101010     ................
   84430:	00000020 00000000 00000000 00000000      ...............
	...

000844b4 <_init>:
   844b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   844b6:	bf00      	nop
   844b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   844ba:	bc08      	pop	{r3}
   844bc:	469e      	mov	lr, r3
   844be:	4770      	bx	lr

000844c0 <__init_array_start>:
   844c0:	000825fd 	.word	0x000825fd

000844c4 <__frame_dummy_init_array_entry>:
   844c4:	00080119                                ....

000844c8 <_fini>:
   844c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   844ca:	bf00      	nop
   844cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   844ce:	bc08      	pop	{r3}
   844d0:	469e      	mov	lr, r3
   844d2:	4770      	bx	lr

000844d4 <__fini_array_start>:
   844d4:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <xNextTaskUnblockTime>:
2007012c:	ffffffff                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900                                ..=.

20070134 <_impure_ptr>:
20070134:	20070138                                8.. 

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <__atexit_recursive_mutex>:
20070560:	20070c84                                ... 

20070564 <__global_locale>:
20070564:	00000043 00000000 00000000 00000000     C...............
	...
20070584:	00000043 00000000 00000000 00000000     C...............
	...
200705a4:	00000043 00000000 00000000 00000000     C...............
	...
200705c4:	00000043 00000000 00000000 00000000     C...............
	...
200705e4:	00000043 00000000 00000000 00000000     C...............
	...
20070604:	00000043 00000000 00000000 00000000     C...............
	...
20070624:	00000043 00000000 00000000 00000000     C...............
	...
20070644:	00083c85 000835d1 00000000 000843b0     .<...5.......C..
20070654:	000843ac 00084328 00084328 00084328     .C..(C..(C..(C..
20070664:	00084328 00084328 00084328 00084328     (C..(C..(C..(C..
20070674:	00084328 00084328 ffffffff ffffffff     (C..(C..........
20070684:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706ac:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d0 <__malloc_av_>:
	...
200706d8:	200706d0 200706d0 200706d8 200706d8     ... ... ... ... 
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 

20070ad8 <__malloc_sbrk_base>:
20070ad8:	ffffffff                                ....

20070adc <__malloc_trim_threshold>:
20070adc:	00020000                                ....


FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a64  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084a64  00084a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  00084a6c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001a4  20070af0  0008555c  00020af0  2**2
                  ALLOC
  4 .stack        00002004  20070c94  00085700  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00019bad  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003b89  00000000  00000000  0003a71f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000bc0  00000000  00000000  0003e2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b58  00000000  00000000  0003ee68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001af00  00000000  00000000  0003f9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011ea3  00000000  00000000  0005a8c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00069097  00000000  00000000  0006c763  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000027d8  00000000  00000000  000d57fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000052b4  00000000  00000000  000d7fd4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	98 2c 07 20 dd 0f 08 00 d9 0f 08 00 d9 0f 08 00     .,. ............
   80010:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 00 00 00 00     ................
	...
   8002c:	e5 07 08 00 d9 0f 08 00 00 00 00 00 1d 08 08 00     ................
   8003c:	59 08 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     Y...............
   8004c:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   8005c:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 00 00 00 00     ................
   8006c:	4d 0e 08 00 61 0e 08 00 75 0e 08 00 89 0e 08 00     M...a...u.......
	...
   80084:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   80094:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   800a4:	00 00 00 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   800b4:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   800c4:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   800d4:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................
   800e4:	d9 0f 08 00 d9 0f 08 00 d9 0f 08 00 d9 0f 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	00084a6c 	.word	0x00084a6c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00084a6c 	.word	0x00084a6c
   80154:	20070af4 	.word	0x20070af4
   80158:	00084a6c 	.word	0x00084a6c
   8015c:	00000000 	.word	0x00000000

00080160 <rightEncoder>:
	printf("%i\n",lTickTime);
	
	
}

void rightEncoder(){ //ISR for the right encoder
   80160:	b538      	push	{r3, r4, r5, lr}
	rTick++;
   80162:	4a0b      	ldr	r2, [pc, #44]	; (80190 <rightEncoder+0x30>)
   80164:	6813      	ldr	r3, [r2, #0]
   80166:	3301      	adds	r3, #1
   80168:	6013      	str	r3, [r2, #0]
	rPrevTick = rCurrentTick;
   8016a:	4c0a      	ldr	r4, [pc, #40]	; (80194 <rightEncoder+0x34>)
   8016c:	4d0a      	ldr	r5, [pc, #40]	; (80198 <rightEncoder+0x38>)
   8016e:	682b      	ldr	r3, [r5, #0]
   80170:	6023      	str	r3, [r4, #0]
	rCurrentTick = xTaskGetTickCountFromISR();
   80172:	4b0a      	ldr	r3, [pc, #40]	; (8019c <rightEncoder+0x3c>)
   80174:	4798      	blx	r3
   80176:	6028      	str	r0, [r5, #0]
	rTickTime = rCurrentTick-rPrevTick;
   80178:	4d09      	ldr	r5, [pc, #36]	; (801a0 <rightEncoder+0x40>)
   8017a:	6823      	ldr	r3, [r4, #0]
   8017c:	1ac0      	subs	r0, r0, r3
   8017e:	6028      	str	r0, [r5, #0]
	printf("Right Time:\n");
   80180:	4808      	ldr	r0, [pc, #32]	; (801a4 <rightEncoder+0x44>)
   80182:	4c09      	ldr	r4, [pc, #36]	; (801a8 <rightEncoder+0x48>)
   80184:	47a0      	blx	r4
	printf("%i\n",rTickTime);
   80186:	6829      	ldr	r1, [r5, #0]
   80188:	4808      	ldr	r0, [pc, #32]	; (801ac <rightEncoder+0x4c>)
   8018a:	47a0      	blx	r4
   8018c:	bd38      	pop	{r3, r4, r5, pc}
   8018e:	bf00      	nop
   80190:	20070c44 	.word	0x20070c44
   80194:	20070c54 	.word	0x20070c54
   80198:	20070c48 	.word	0x20070c48
   8019c:	00080885 	.word	0x00080885
   801a0:	20070c4c 	.word	0x20070c4c
   801a4:	000848a4 	.word	0x000848a4
   801a8:	00081d79 	.word	0x00081d79
   801ac:	000848b4 	.word	0x000848b4

000801b0 <leftEncoder>:
	
}
void leftEncoder(){ //ISR for the left encoder
   801b0:	b538      	push	{r3, r4, r5, lr}
	lTick++;
   801b2:	4a0b      	ldr	r2, [pc, #44]	; (801e0 <leftEncoder+0x30>)
   801b4:	6813      	ldr	r3, [r2, #0]
   801b6:	3301      	adds	r3, #1
   801b8:	6013      	str	r3, [r2, #0]
	lPrevTick = lCurrentTick;
   801ba:	4c0a      	ldr	r4, [pc, #40]	; (801e4 <leftEncoder+0x34>)
   801bc:	4d0a      	ldr	r5, [pc, #40]	; (801e8 <leftEncoder+0x38>)
   801be:	682b      	ldr	r3, [r5, #0]
   801c0:	6023      	str	r3, [r4, #0]
	lCurrentTick = xTaskGetTickCountFromISR();
   801c2:	4b0a      	ldr	r3, [pc, #40]	; (801ec <leftEncoder+0x3c>)
   801c4:	4798      	blx	r3
   801c6:	6028      	str	r0, [r5, #0]
	lTickTime = lCurrentTick-lPrevTick;
   801c8:	4d09      	ldr	r5, [pc, #36]	; (801f0 <leftEncoder+0x40>)
   801ca:	6823      	ldr	r3, [r4, #0]
   801cc:	1ac0      	subs	r0, r0, r3
   801ce:	6028      	str	r0, [r5, #0]
	printf("Left Time:\n");
   801d0:	4808      	ldr	r0, [pc, #32]	; (801f4 <leftEncoder+0x44>)
   801d2:	4c09      	ldr	r4, [pc, #36]	; (801f8 <leftEncoder+0x48>)
   801d4:	47a0      	blx	r4
	printf("%i\n",lTickTime);
   801d6:	6829      	ldr	r1, [r5, #0]
   801d8:	4808      	ldr	r0, [pc, #32]	; (801fc <leftEncoder+0x4c>)
   801da:	47a0      	blx	r4
   801dc:	bd38      	pop	{r3, r4, r5, pc}
   801de:	bf00      	nop
   801e0:	20070c50 	.word	0x20070c50
   801e4:	20070c5c 	.word	0x20070c5c
   801e8:	20070c58 	.word	0x20070c58
   801ec:	00080885 	.word	0x00080885
   801f0:	20070c40 	.word	0x20070c40
   801f4:	00084898 	.word	0x00084898
   801f8:	00081d79 	.word	0x00081d79
   801fc:	000848b4 	.word	0x000848b4

00080200 <encoder_init>:
void encoder_init(){ //initialise the encoders
   80200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80204:	b082      	sub	sp, #8
	lPrevTick=0; //leftbprevious tick time
   80206:	2400      	movs	r4, #0
   80208:	4b20      	ldr	r3, [pc, #128]	; (8028c <encoder_init+0x8c>)
   8020a:	601c      	str	r4, [r3, #0]
	lTickTime=0;
   8020c:	4b20      	ldr	r3, [pc, #128]	; (80290 <encoder_init+0x90>)
   8020e:	601c      	str	r4, [r3, #0]
	lCurrentTick=0;
   80210:	4b20      	ldr	r3, [pc, #128]	; (80294 <encoder_init+0x94>)
   80212:	601c      	str	r4, [r3, #0]
	rPrevTick=0;
   80214:	4b20      	ldr	r3, [pc, #128]	; (80298 <encoder_init+0x98>)
   80216:	601c      	str	r4, [r3, #0]
	rTickTime=0;
   80218:	4b20      	ldr	r3, [pc, #128]	; (8029c <encoder_init+0x9c>)
   8021a:	601c      	str	r4, [r3, #0]
	rCurrentTick=0;
   8021c:	4b20      	ldr	r3, [pc, #128]	; (802a0 <encoder_init+0xa0>)
   8021e:	601c      	str	r4, [r3, #0]
	lTick=0;
   80220:	4b20      	ldr	r3, [pc, #128]	; (802a4 <encoder_init+0xa4>)
   80222:	601c      	str	r4, [r3, #0]
	rTick=0;
   80224:	4b20      	ldr	r3, [pc, #128]	; (802a8 <encoder_init+0xa8>)
   80226:	601c      	str	r4, [r3, #0]
	pmc_enable_periph_clk(ID_PIOC);
   80228:	200d      	movs	r0, #13
   8022a:	4b20      	ldr	r3, [pc, #128]	; (802ac <encoder_init+0xac>)
   8022c:	4798      	blx	r3
	pio_set_input(PIOC, PIO_PC25,NULL);
   8022e:	4d20      	ldr	r5, [pc, #128]	; (802b0 <encoder_init+0xb0>)
   80230:	4622      	mov	r2, r4
   80232:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   80236:	4628      	mov	r0, r5
   80238:	f8df 808c 	ldr.w	r8, [pc, #140]	; 802c8 <encoder_init+0xc8>
   8023c:	47c0      	blx	r8
	pio_handler_set(PIOC, ID_PIOC, PIO_PC25, PIO_IT_RISE_EDGE , leftEncoder);
   8023e:	4b1d      	ldr	r3, [pc, #116]	; (802b4 <encoder_init+0xb4>)
   80240:	9300      	str	r3, [sp, #0]
   80242:	2370      	movs	r3, #112	; 0x70
   80244:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80248:	210d      	movs	r1, #13
   8024a:	4628      	mov	r0, r5
   8024c:	4f1a      	ldr	r7, [pc, #104]	; (802b8 <encoder_init+0xb8>)
   8024e:	47b8      	blx	r7
	pio_enable_interrupt(PIOC, PIO_PC25); //digital pin 5
   80250:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   80254:	4628      	mov	r0, r5
   80256:	4e19      	ldr	r6, [pc, #100]	; (802bc <encoder_init+0xbc>)
   80258:	47b0      	blx	r6
	pio_set_input(PIOC, PIO_PC23,NULL);
   8025a:	4622      	mov	r2, r4
   8025c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80260:	4628      	mov	r0, r5
   80262:	47c0      	blx	r8
	pio_handler_set(PIOC,ID_PIOC, PIO_PC23,PIO_IT_RISE_EDGE,rightEncoder);
   80264:	4b16      	ldr	r3, [pc, #88]	; (802c0 <encoder_init+0xc0>)
   80266:	9300      	str	r3, [sp, #0]
   80268:	2370      	movs	r3, #112	; 0x70
   8026a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8026e:	210d      	movs	r1, #13
   80270:	4628      	mov	r0, r5
   80272:	47b8      	blx	r7
	pio_enable_interrupt(PIOC, PIO_PC23); //digital pin 7
   80274:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80278:	4628      	mov	r0, r5
   8027a:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8027c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80280:	4b10      	ldr	r3, [pc, #64]	; (802c4 <encoder_init+0xc4>)
   80282:	601a      	str	r2, [r3, #0]
}
   80284:	b002      	add	sp, #8
   80286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8028a:	bf00      	nop
   8028c:	20070c5c 	.word	0x20070c5c
   80290:	20070c40 	.word	0x20070c40
   80294:	20070c58 	.word	0x20070c58
   80298:	20070c54 	.word	0x20070c54
   8029c:	20070c4c 	.word	0x20070c4c
   802a0:	20070c48 	.word	0x20070c48
   802a4:	20070c50 	.word	0x20070c50
   802a8:	20070c44 	.word	0x20070c44
   802ac:	00080f85 	.word	0x00080f85
   802b0:	400e1200 	.word	0x400e1200
   802b4:	000801b1 	.word	0x000801b1
   802b8:	00080ddd 	.word	0x00080ddd
   802bc:	00080c15 	.word	0x00080c15
   802c0:	00080161 	.word	0x00080161
   802c4:	e000e100 	.word	0xe000e100
   802c8:	00080b8f 	.word	0x00080b8f

000802cc <getLeftTicks>:
	lTick=0;
	rTick=0;
}
int getLeftTicks(){ //returns the amount of ticks from left encoder since last reset
	return lTick;
}
   802cc:	4b01      	ldr	r3, [pc, #4]	; (802d4 <getLeftTicks+0x8>)
   802ce:	6818      	ldr	r0, [r3, #0]
   802d0:	4770      	bx	lr
   802d2:	bf00      	nop
   802d4:	20070c50 	.word	0x20070c50

000802d8 <getRightTickTime>:
int getRightTicks(){ //returns the amount of ticks from right encoder since last reset
	return rTick;
}
int getRightTickTime(){ //returns the tick time for the right encoder in milliseconds
	return rTickTime;
}
   802d8:	4b01      	ldr	r3, [pc, #4]	; (802e0 <getRightTickTime+0x8>)
   802da:	6818      	ldr	r0, [r3, #0]
   802dc:	4770      	bx	lr
   802de:	bf00      	nop
   802e0:	20070c4c 	.word	0x20070c4c

000802e4 <getLeftTickTime>:
int getLeftTickTime(){  //returns the tick time for the left encoder  in milliseconds
	return lTickTime;
}
   802e4:	4b01      	ldr	r3, [pc, #4]	; (802ec <getLeftTickTime+0x8>)
   802e6:	6818      	ldr	r0, [r3, #0]
   802e8:	4770      	bx	lr
   802ea:	bf00      	nop
   802ec:	20070c40 	.word	0x20070c40

000802f0 <drive>:
 *
 * Created: 2018-04-18 13:01:59
 *  Author: filip
 */ 
 #include <asf.h>
 void drive(int rSpeed, int lSpeed, int rDirection, int lDirection) { //speed 0-100, direction -1,1
   802f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rMotorSpeed = (1500 + 7 * rSpeed * rDirection);
   802f2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   802f6:	fb02 f000 	mul.w	r0, r2, r0
   802fa:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
	int lMotorSpeed = (1500 + 7 * lSpeed * lDirection);
   802fe:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   80302:	fb03 f301 	mul.w	r3, r3, r1
   80306:	f203 54dc 	addw	r4, r3, #1500	; 0x5dc
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   8030a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8030e:	4b22      	ldr	r3, [pc, #136]	; (80398 <drive+0xa8>)
   80310:	631a      	str	r2, [r3, #48]	; 0x30
	
	ioport_set_pin_level(PIO_PB25_IDX, HIGH);
	delay_us(rMotorSpeed);
   80312:	b330      	cbz	r0, 80362 <drive+0x72>
   80314:	17c7      	asrs	r7, r0, #31
   80316:	4b21      	ldr	r3, [pc, #132]	; (8039c <drive+0xac>)
   80318:	fba0 0103 	umull	r0, r1, r0, r3
   8031c:	fb03 1107 	mla	r1, r3, r7, r1
   80320:	4a1f      	ldr	r2, [pc, #124]	; (803a0 <drive+0xb0>)
   80322:	2300      	movs	r3, #0
   80324:	a71a      	add	r7, pc, #104	; (adr r7, 80390 <drive+0xa0>)
   80326:	e9d7 6700 	ldrd	r6, r7, [r7]
   8032a:	1980      	adds	r0, r0, r6
   8032c:	4179      	adcs	r1, r7
   8032e:	4d1d      	ldr	r5, [pc, #116]	; (803a4 <drive+0xb4>)
   80330:	47a8      	blx	r5
   80332:	4b1d      	ldr	r3, [pc, #116]	; (803a8 <drive+0xb8>)
   80334:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80336:	4d18      	ldr	r5, [pc, #96]	; (80398 <drive+0xa8>)
   80338:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   8033c:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(PIO_PB25_IDX, LOW);
	delay_us(1100);
   8033e:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80342:	4b19      	ldr	r3, [pc, #100]	; (803a8 <drive+0xb8>)
   80344:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80346:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(PIO_PB25_IDX, HIGH);
	delay_us(lMotorSpeed);
   80348:	b97c      	cbnz	r4, 8036a <drive+0x7a>
   8034a:	2006      	movs	r0, #6
   8034c:	4b16      	ldr	r3, [pc, #88]	; (803a8 <drive+0xb8>)
   8034e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80350:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80354:	4b10      	ldr	r3, [pc, #64]	; (80398 <drive+0xa8>)
   80356:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(PIO_PB25_IDX, LOW);
	delay_us(5250);
   80358:	f647 300c 	movw	r0, #31500	; 0x7b0c
   8035c:	4b12      	ldr	r3, [pc, #72]	; (803a8 <drive+0xb8>)
   8035e:	4798      	blx	r3
   80360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	delay_us(rMotorSpeed);
   80362:	2006      	movs	r0, #6
   80364:	4b10      	ldr	r3, [pc, #64]	; (803a8 <drive+0xb8>)
   80366:	4798      	blx	r3
   80368:	e7e5      	b.n	80336 <drive+0x46>
	delay_us(lMotorSpeed);
   8036a:	17e7      	asrs	r7, r4, #31
   8036c:	4b0b      	ldr	r3, [pc, #44]	; (8039c <drive+0xac>)
   8036e:	fba4 0103 	umull	r0, r1, r4, r3
   80372:	fb03 1107 	mla	r1, r3, r7, r1
   80376:	4a0a      	ldr	r2, [pc, #40]	; (803a0 <drive+0xb0>)
   80378:	2300      	movs	r3, #0
   8037a:	a505      	add	r5, pc, #20	; (adr r5, 80390 <drive+0xa0>)
   8037c:	e9d5 4500 	ldrd	r4, r5, [r5]
   80380:	1900      	adds	r0, r0, r4
   80382:	4169      	adcs	r1, r5
   80384:	4c07      	ldr	r4, [pc, #28]	; (803a4 <drive+0xb4>)
   80386:	47a0      	blx	r4
   80388:	4b07      	ldr	r3, [pc, #28]	; (803a8 <drive+0xb8>)
   8038a:	4798      	blx	r3
   8038c:	e7e0      	b.n	80350 <drive+0x60>
   8038e:	bf00      	nop
   80390:	00d59f7f 	.word	0x00d59f7f
   80394:	00000000 	.word	0x00000000
   80398:	400e1000 	.word	0x400e1000
   8039c:	0501bd00 	.word	0x0501bd00
   803a0:	00d59f80 	.word	0x00d59f80
   803a4:	00081a19 	.word	0x00081a19
   803a8:	20070001 	.word	0x20070001
   803ac:	00000000 	.word	0x00000000

000803b0 <controlCenter>:
#include <asf.h>
#include <stdio.h>
#include "encoderISR.h"
#include "motorController.h"

void controlCenter( int distans){
   803b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int tiks= distans/1.379;
   803b4:	4b18      	ldr	r3, [pc, #96]	; (80418 <controlCenter+0x68>)
   803b6:	4798      	blx	r3
   803b8:	a315      	add	r3, pc, #84	; (adr r3, 80410 <controlCenter+0x60>)
   803ba:	e9d3 2300 	ldrd	r2, r3, [r3]
   803be:	4c17      	ldr	r4, [pc, #92]	; (8041c <controlCenter+0x6c>)
   803c0:	47a0      	blx	r4
   803c2:	4b17      	ldr	r3, [pc, #92]	; (80420 <controlCenter+0x70>)
   803c4:	4798      	blx	r3
   803c6:	4606      	mov	r6, r0
	drive(50,  50, 1, 1);
   803c8:	2301      	movs	r3, #1
   803ca:	461a      	mov	r2, r3
   803cc:	2132      	movs	r1, #50	; 0x32
   803ce:	4608      	mov	r0, r1
   803d0:	4c14      	ldr	r4, [pc, #80]	; (80424 <controlCenter+0x74>)
   803d2:	47a0      	blx	r4
	
	while(tiks<getLeftTicks()){
   803d4:	4d14      	ldr	r5, [pc, #80]	; (80428 <controlCenter+0x78>)
		int Vl=getLeftTickTime();
   803d6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 80430 <controlCenter+0x80>
		int Vh=getRightTickTime();
   803da:	4f14      	ldr	r7, [pc, #80]	; (8042c <controlCenter+0x7c>)
	while(tiks<getLeftTicks()){
   803dc:	e00b      	b.n	803f6 <controlCenter+0x46>
		int Vl=getLeftTickTime();
   803de:	47c0      	blx	r8
   803e0:	4604      	mov	r4, r0
		int Vh=getRightTickTime();
   803e2:	47b8      	blx	r7
		int lineDef= Vl-Vh;
   803e4:	1a20      	subs	r0, r4, r0
		drive(50-lineDef,  50+lineDef, 1, 1);
   803e6:	2301      	movs	r3, #1
   803e8:	461a      	mov	r2, r3
   803ea:	f100 0132 	add.w	r1, r0, #50	; 0x32
   803ee:	f1c0 0032 	rsb	r0, r0, #50	; 0x32
   803f2:	4c0c      	ldr	r4, [pc, #48]	; (80424 <controlCenter+0x74>)
   803f4:	47a0      	blx	r4
	while(tiks<getLeftTicks()){
   803f6:	47a8      	blx	r5
   803f8:	4286      	cmp	r6, r0
   803fa:	dbf0      	blt.n	803de <controlCenter+0x2e>
		
	}
		drive(0,0,1,1);
   803fc:	2301      	movs	r3, #1
   803fe:	461a      	mov	r2, r3
   80400:	2100      	movs	r1, #0
   80402:	4608      	mov	r0, r1
   80404:	4c07      	ldr	r4, [pc, #28]	; (80424 <controlCenter+0x74>)
   80406:	47a0      	blx	r4
   80408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8040c:	f3af 8000 	nop.w
   80410:	4dd2f1aa 	.word	0x4dd2f1aa
   80414:	3ff61062 	.word	0x3ff61062
   80418:	000814d9 	.word	0x000814d9
   8041c:	000817f9 	.word	0x000817f9
   80420:	000819c9 	.word	0x000819c9
   80424:	000802f1 	.word	0x000802f1
   80428:	000802cd 	.word	0x000802cd
   8042c:	000802d9 	.word	0x000802d9
   80430:	000802e5 	.word	0x000802e5

00080434 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   80434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80438:	b980      	cbnz	r0, 8045c <_read+0x28>
   8043a:	460c      	mov	r4, r1
   8043c:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   8043e:	2a00      	cmp	r2, #0
   80440:	dd0f      	ble.n	80462 <_read+0x2e>
   80442:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   80444:	4e08      	ldr	r6, [pc, #32]	; (80468 <_read+0x34>)
   80446:	4d09      	ldr	r5, [pc, #36]	; (8046c <_read+0x38>)
   80448:	6830      	ldr	r0, [r6, #0]
   8044a:	4621      	mov	r1, r4
   8044c:	682b      	ldr	r3, [r5, #0]
   8044e:	4798      	blx	r3
		ptr++;
   80450:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   80452:	42bc      	cmp	r4, r7
   80454:	d1f8      	bne.n	80448 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   80456:	4640      	mov	r0, r8
   80458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8045c:	f04f 38ff 	mov.w	r8, #4294967295
   80460:	e7f9      	b.n	80456 <_read+0x22>
	for (; len > 0; --len) {
   80462:	4680      	mov	r8, r0
   80464:	e7f7      	b.n	80456 <_read+0x22>
   80466:	bf00      	nop
   80468:	20070c68 	.word	0x20070c68
   8046c:	20070c60 	.word	0x20070c60

00080470 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80470:	3801      	subs	r0, #1
   80472:	2802      	cmp	r0, #2
   80474:	d815      	bhi.n	804a2 <_write+0x32>
{
   80476:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8047a:	460e      	mov	r6, r1
   8047c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8047e:	b19a      	cbz	r2, 804a8 <_write+0x38>
   80480:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80482:	f8df 8038 	ldr.w	r8, [pc, #56]	; 804bc <_write+0x4c>
   80486:	4f0c      	ldr	r7, [pc, #48]	; (804b8 <_write+0x48>)
   80488:	f8d8 0000 	ldr.w	r0, [r8]
   8048c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80490:	683b      	ldr	r3, [r7, #0]
   80492:	4798      	blx	r3
   80494:	2800      	cmp	r0, #0
   80496:	db0a      	blt.n	804ae <_write+0x3e>
   80498:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8049a:	3c01      	subs	r4, #1
   8049c:	d1f4      	bne.n	80488 <_write+0x18>
   8049e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   804a2:	f04f 30ff 	mov.w	r0, #4294967295
   804a6:	4770      	bx	lr
	for (; len != 0; --len) {
   804a8:	4610      	mov	r0, r2
   804aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   804ae:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   804b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804b6:	bf00      	nop
   804b8:	20070c64 	.word	0x20070c64
   804bc:	20070c68 	.word	0x20070c68

000804c0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   804c0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   804c2:	23ac      	movs	r3, #172	; 0xac
   804c4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   804c6:	680b      	ldr	r3, [r1, #0]
   804c8:	684a      	ldr	r2, [r1, #4]
   804ca:	fbb3 f3f2 	udiv	r3, r3, r2
   804ce:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   804d0:	1e5c      	subs	r4, r3, #1
   804d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   804d6:	4294      	cmp	r4, r2
   804d8:	d80b      	bhi.n	804f2 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   804da:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   804dc:	688b      	ldr	r3, [r1, #8]
   804de:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   804e0:	f240 2302 	movw	r3, #514	; 0x202
   804e4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   804e8:	2350      	movs	r3, #80	; 0x50
   804ea:	6003      	str	r3, [r0, #0]

	return 0;
   804ec:	2000      	movs	r0, #0
}
   804ee:	bc10      	pop	{r4}
   804f0:	4770      	bx	lr
		return 1;
   804f2:	2001      	movs	r0, #1
   804f4:	e7fb      	b.n	804ee <uart_init+0x2e>

000804f6 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   804f6:	6943      	ldr	r3, [r0, #20]
   804f8:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   804fc:	bf1a      	itte	ne
   804fe:	61c1      	strne	r1, [r0, #28]
	return 0;
   80500:	2000      	movne	r0, #0
		return 1;
   80502:	2001      	moveq	r0, #1
}
   80504:	4770      	bx	lr

00080506 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80506:	6943      	ldr	r3, [r0, #20]
   80508:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8050c:	bf1d      	ittte	ne
   8050e:	6983      	ldrne	r3, [r0, #24]
   80510:	700b      	strbne	r3, [r1, #0]
	return 0;
   80512:	2000      	movne	r0, #0
		return 1;
   80514:	2001      	moveq	r0, #1
}
   80516:	4770      	bx	lr

00080518 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80518:	6943      	ldr	r3, [r0, #20]
   8051a:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   8051e:	bf1d      	ittte	ne
   80520:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   80524:	61c1      	strne	r1, [r0, #28]
	return 0;
   80526:	2000      	movne	r0, #0
		return 1;
   80528:	2001      	moveq	r0, #1
}
   8052a:	4770      	bx	lr

0008052c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8052c:	6943      	ldr	r3, [r0, #20]
   8052e:	f013 0f01 	tst.w	r3, #1
   80532:	d005      	beq.n	80540 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80534:	6983      	ldr	r3, [r0, #24]
   80536:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8053a:	600b      	str	r3, [r1, #0]

	return 0;
   8053c:	2000      	movs	r0, #0
   8053e:	4770      	bx	lr
		return 1;
   80540:	2001      	movs	r0, #1
}
   80542:	4770      	bx	lr

00080544 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   80544:	b5f0      	push	{r4, r5, r6, r7, lr}
   80546:	b083      	sub	sp, #12
   80548:	4604      	mov	r4, r0
   8054a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8054c:	2300      	movs	r3, #0
   8054e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   80550:	4b20      	ldr	r3, [pc, #128]	; (805d4 <usart_serial_getchar+0x90>)
   80552:	4298      	cmp	r0, r3
   80554:	d00d      	beq.n	80572 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80556:	4b20      	ldr	r3, [pc, #128]	; (805d8 <usart_serial_getchar+0x94>)
   80558:	4298      	cmp	r0, r3
   8055a:	d012      	beq.n	80582 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8055c:	4b1f      	ldr	r3, [pc, #124]	; (805dc <usart_serial_getchar+0x98>)
   8055e:	4298      	cmp	r0, r3
   80560:	d019      	beq.n	80596 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80562:	4b1f      	ldr	r3, [pc, #124]	; (805e0 <usart_serial_getchar+0x9c>)
   80564:	429c      	cmp	r4, r3
   80566:	d020      	beq.n	805aa <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80568:	4b1e      	ldr	r3, [pc, #120]	; (805e4 <usart_serial_getchar+0xa0>)
   8056a:	429c      	cmp	r4, r3
   8056c:	d027      	beq.n	805be <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8056e:	b003      	add	sp, #12
   80570:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80572:	461f      	mov	r7, r3
   80574:	4e1c      	ldr	r6, [pc, #112]	; (805e8 <usart_serial_getchar+0xa4>)
   80576:	4629      	mov	r1, r5
   80578:	4638      	mov	r0, r7
   8057a:	47b0      	blx	r6
   8057c:	2800      	cmp	r0, #0
   8057e:	d1fa      	bne.n	80576 <usart_serial_getchar+0x32>
   80580:	e7ef      	b.n	80562 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80582:	461f      	mov	r7, r3
   80584:	4e19      	ldr	r6, [pc, #100]	; (805ec <usart_serial_getchar+0xa8>)
   80586:	a901      	add	r1, sp, #4
   80588:	4638      	mov	r0, r7
   8058a:	47b0      	blx	r6
   8058c:	2800      	cmp	r0, #0
   8058e:	d1fa      	bne.n	80586 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80590:	9b01      	ldr	r3, [sp, #4]
   80592:	702b      	strb	r3, [r5, #0]
   80594:	e7e8      	b.n	80568 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80596:	461e      	mov	r6, r3
   80598:	4c14      	ldr	r4, [pc, #80]	; (805ec <usart_serial_getchar+0xa8>)
   8059a:	a901      	add	r1, sp, #4
   8059c:	4630      	mov	r0, r6
   8059e:	47a0      	blx	r4
   805a0:	2800      	cmp	r0, #0
   805a2:	d1fa      	bne.n	8059a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   805a4:	9b01      	ldr	r3, [sp, #4]
   805a6:	702b      	strb	r3, [r5, #0]
   805a8:	e7e1      	b.n	8056e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805aa:	461e      	mov	r6, r3
   805ac:	4c0f      	ldr	r4, [pc, #60]	; (805ec <usart_serial_getchar+0xa8>)
   805ae:	a901      	add	r1, sp, #4
   805b0:	4630      	mov	r0, r6
   805b2:	47a0      	blx	r4
   805b4:	2800      	cmp	r0, #0
   805b6:	d1fa      	bne.n	805ae <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   805b8:	9b01      	ldr	r3, [sp, #4]
   805ba:	702b      	strb	r3, [r5, #0]
   805bc:	e7d7      	b.n	8056e <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   805be:	461e      	mov	r6, r3
   805c0:	4c0a      	ldr	r4, [pc, #40]	; (805ec <usart_serial_getchar+0xa8>)
   805c2:	a901      	add	r1, sp, #4
   805c4:	4630      	mov	r0, r6
   805c6:	47a0      	blx	r4
   805c8:	2800      	cmp	r0, #0
   805ca:	d1fa      	bne.n	805c2 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   805cc:	9b01      	ldr	r3, [sp, #4]
   805ce:	702b      	strb	r3, [r5, #0]
}
   805d0:	e7cd      	b.n	8056e <usart_serial_getchar+0x2a>
   805d2:	bf00      	nop
   805d4:	400e0800 	.word	0x400e0800
   805d8:	40098000 	.word	0x40098000
   805dc:	4009c000 	.word	0x4009c000
   805e0:	400a0000 	.word	0x400a0000
   805e4:	400a4000 	.word	0x400a4000
   805e8:	00080507 	.word	0x00080507
   805ec:	0008052d 	.word	0x0008052d

000805f0 <usart_serial_putchar>:
{
   805f0:	b570      	push	{r4, r5, r6, lr}
   805f2:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   805f4:	4b1e      	ldr	r3, [pc, #120]	; (80670 <usart_serial_putchar+0x80>)
   805f6:	4298      	cmp	r0, r3
   805f8:	d00d      	beq.n	80616 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   805fa:	4b1e      	ldr	r3, [pc, #120]	; (80674 <usart_serial_putchar+0x84>)
   805fc:	4298      	cmp	r0, r3
   805fe:	d013      	beq.n	80628 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80600:	4b1d      	ldr	r3, [pc, #116]	; (80678 <usart_serial_putchar+0x88>)
   80602:	4298      	cmp	r0, r3
   80604:	d019      	beq.n	8063a <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80606:	4b1d      	ldr	r3, [pc, #116]	; (8067c <usart_serial_putchar+0x8c>)
   80608:	4298      	cmp	r0, r3
   8060a:	d01f      	beq.n	8064c <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8060c:	4b1c      	ldr	r3, [pc, #112]	; (80680 <usart_serial_putchar+0x90>)
   8060e:	4298      	cmp	r0, r3
   80610:	d025      	beq.n	8065e <usart_serial_putchar+0x6e>
	return 0;
   80612:	2000      	movs	r0, #0
}
   80614:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80616:	461e      	mov	r6, r3
   80618:	4d1a      	ldr	r5, [pc, #104]	; (80684 <usart_serial_putchar+0x94>)
   8061a:	4621      	mov	r1, r4
   8061c:	4630      	mov	r0, r6
   8061e:	47a8      	blx	r5
   80620:	2800      	cmp	r0, #0
   80622:	d1fa      	bne.n	8061a <usart_serial_putchar+0x2a>
		return 1;
   80624:	2001      	movs	r0, #1
   80626:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80628:	461e      	mov	r6, r3
   8062a:	4d17      	ldr	r5, [pc, #92]	; (80688 <usart_serial_putchar+0x98>)
   8062c:	4621      	mov	r1, r4
   8062e:	4630      	mov	r0, r6
   80630:	47a8      	blx	r5
   80632:	2800      	cmp	r0, #0
   80634:	d1fa      	bne.n	8062c <usart_serial_putchar+0x3c>
		return 1;
   80636:	2001      	movs	r0, #1
   80638:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8063a:	461e      	mov	r6, r3
   8063c:	4d12      	ldr	r5, [pc, #72]	; (80688 <usart_serial_putchar+0x98>)
   8063e:	4621      	mov	r1, r4
   80640:	4630      	mov	r0, r6
   80642:	47a8      	blx	r5
   80644:	2800      	cmp	r0, #0
   80646:	d1fa      	bne.n	8063e <usart_serial_putchar+0x4e>
		return 1;
   80648:	2001      	movs	r0, #1
   8064a:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8064c:	461e      	mov	r6, r3
   8064e:	4d0e      	ldr	r5, [pc, #56]	; (80688 <usart_serial_putchar+0x98>)
   80650:	4621      	mov	r1, r4
   80652:	4630      	mov	r0, r6
   80654:	47a8      	blx	r5
   80656:	2800      	cmp	r0, #0
   80658:	d1fa      	bne.n	80650 <usart_serial_putchar+0x60>
		return 1;
   8065a:	2001      	movs	r0, #1
   8065c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   8065e:	461e      	mov	r6, r3
   80660:	4d09      	ldr	r5, [pc, #36]	; (80688 <usart_serial_putchar+0x98>)
   80662:	4621      	mov	r1, r4
   80664:	4630      	mov	r0, r6
   80666:	47a8      	blx	r5
   80668:	2800      	cmp	r0, #0
   8066a:	d1fa      	bne.n	80662 <usart_serial_putchar+0x72>
		return 1;
   8066c:	2001      	movs	r0, #1
   8066e:	bd70      	pop	{r4, r5, r6, pc}
   80670:	400e0800 	.word	0x400e0800
   80674:	40098000 	.word	0x40098000
   80678:	4009c000 	.word	0x4009c000
   8067c:	400a0000 	.word	0x400a0000
   80680:	400a4000 	.word	0x400a4000
   80684:	000804f7 	.word	0x000804f7
   80688:	00080519 	.word	0x00080519

0008068c <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   8068c:	b538      	push	{r3, r4, r5, lr}
	sysclk_init();
   8068e:	4b19      	ldr	r3, [pc, #100]	; (806f4 <misc_init+0x68>)
   80690:	4798      	blx	r3
	board_init();
   80692:	4b19      	ldr	r3, [pc, #100]	; (806f8 <misc_init+0x6c>)
   80694:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80696:	200b      	movs	r0, #11
   80698:	4c18      	ldr	r4, [pc, #96]	; (806fc <misc_init+0x70>)
   8069a:	47a0      	blx	r4
   8069c:	200c      	movs	r0, #12
   8069e:	47a0      	blx	r4
   806a0:	200d      	movs	r0, #13
   806a2:	47a0      	blx	r4
   806a4:	200e      	movs	r0, #14
   806a6:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806a8:	4815      	ldr	r0, [pc, #84]	; (80700 <misc_init+0x74>)
   806aa:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
   806ae:	6104      	str	r4, [r0, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806b0:	f8c0 40a0 	str.w	r4, [r0, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806b4:	4b13      	ldr	r3, [pc, #76]	; (80704 <misc_init+0x78>)
   806b6:	f44f 7180 	mov.w	r1, #256	; 0x100
   806ba:	6119      	str	r1, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806bc:	f8c3 10a0 	str.w	r1, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806c0:	2280      	movs	r2, #128	; 0x80
   806c2:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806c4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   806c8:	4a0f      	ldr	r2, [pc, #60]	; (80708 <misc_init+0x7c>)
   806ca:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   806ce:	6115      	str	r5, [r2, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806d0:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
   806d8:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
   806dc:	6155      	str	r5, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806de:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   806e2:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
   806e6:	6155      	str	r5, [r2, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   806e8:	f8c2 50a0 	str.w	r5, [r2, #160]	; 0xa0
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   806ec:	6344      	str	r4, [r0, #52]	; 0x34
   806ee:	6359      	str	r1, [r3, #52]	; 0x34
	ioport_set_pin_level(pin13, LOW);
	ioport_set_pin_level(pin12, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   806f0:	2000      	movs	r0, #0
   806f2:	bd38      	pop	{r3, r4, r5, pc}
   806f4:	00080a6d 	.word	0x00080a6d
   806f8:	00080ad1 	.word	0x00080ad1
   806fc:	00080f85 	.word	0x00080f85
   80700:	400e1000 	.word	0x400e1000
   80704:	400e1400 	.word	0x400e1400
   80708:	400e0e00 	.word	0x400e0e00

0008070c <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   8070c:	b530      	push	{r4, r5, lr}
   8070e:	b085      	sub	sp, #20
   80710:	2008      	movs	r0, #8
   80712:	4d15      	ldr	r5, [pc, #84]	; (80768 <console_init+0x5c>)
   80714:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80716:	4c15      	ldr	r4, [pc, #84]	; (8076c <console_init+0x60>)
   80718:	4b15      	ldr	r3, [pc, #84]	; (80770 <console_init+0x64>)
   8071a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8071c:	4a15      	ldr	r2, [pc, #84]	; (80774 <console_init+0x68>)
   8071e:	4b16      	ldr	r3, [pc, #88]	; (80778 <console_init+0x6c>)
   80720:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80722:	4a16      	ldr	r2, [pc, #88]	; (8077c <console_init+0x70>)
   80724:	4b16      	ldr	r3, [pc, #88]	; (80780 <console_init+0x74>)
   80726:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80728:	4b16      	ldr	r3, [pc, #88]	; (80784 <console_init+0x78>)
   8072a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8072c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80730:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80732:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80736:	9303      	str	r3, [sp, #12]
   80738:	2008      	movs	r0, #8
   8073a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   8073c:	a901      	add	r1, sp, #4
   8073e:	4620      	mov	r0, r4
   80740:	4b11      	ldr	r3, [pc, #68]	; (80788 <console_init+0x7c>)
   80742:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80744:	4d11      	ldr	r5, [pc, #68]	; (8078c <console_init+0x80>)
   80746:	682b      	ldr	r3, [r5, #0]
   80748:	2100      	movs	r1, #0
   8074a:	6898      	ldr	r0, [r3, #8]
   8074c:	4c10      	ldr	r4, [pc, #64]	; (80790 <console_init+0x84>)
   8074e:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80750:	682b      	ldr	r3, [r5, #0]
   80752:	2100      	movs	r1, #0
   80754:	6858      	ldr	r0, [r3, #4]
   80756:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80758:	480e      	ldr	r0, [pc, #56]	; (80794 <console_init+0x88>)
   8075a:	4c0f      	ldr	r4, [pc, #60]	; (80798 <console_init+0x8c>)
   8075c:	47a0      	blx	r4
	printf("=============\n");
   8075e:	480f      	ldr	r0, [pc, #60]	; (8079c <console_init+0x90>)
   80760:	47a0      	blx	r4
	return 0;
}
   80762:	2000      	movs	r0, #0
   80764:	b005      	add	sp, #20
   80766:	bd30      	pop	{r4, r5, pc}
   80768:	00080f85 	.word	0x00080f85
   8076c:	400e0800 	.word	0x400e0800
   80770:	20070c68 	.word	0x20070c68
   80774:	000805f1 	.word	0x000805f1
   80778:	20070c64 	.word	0x20070c64
   8077c:	00080545 	.word	0x00080545
   80780:	20070c60 	.word	0x20070c60
   80784:	0501bd00 	.word	0x0501bd00
   80788:	000804c1 	.word	0x000804c1
   8078c:	20070140 	.word	0x20070140
   80790:	00081f29 	.word	0x00081f29
   80794:	000848b8 	.word	0x000848b8
   80798:	00081d79 	.word	0x00081d79
   8079c:	000848c8 	.word	0x000848c8

000807a0 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   807a0:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   807a2:	685a      	ldr	r2, [r3, #4]
   807a4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   807a6:	6842      	ldr	r2, [r0, #4]
   807a8:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   807aa:	685a      	ldr	r2, [r3, #4]
   807ac:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   807ae:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   807b0:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   807b2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   807b4:	6803      	ldr	r3, [r0, #0]
   807b6:	3301      	adds	r3, #1
   807b8:	6003      	str	r3, [r0, #0]
   807ba:	4770      	bx	lr

000807bc <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   807bc:	6843      	ldr	r3, [r0, #4]
   807be:	6882      	ldr	r2, [r0, #8]
   807c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   807c2:	6883      	ldr	r3, [r0, #8]
   807c4:	6842      	ldr	r2, [r0, #4]
   807c6:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   807c8:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   807ca:	685a      	ldr	r2, [r3, #4]
   807cc:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   807ce:	bf04      	itt	eq
   807d0:	6882      	ldreq	r2, [r0, #8]
   807d2:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   807d4:	2200      	movs	r2, #0
   807d6:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   807d8:	681a      	ldr	r2, [r3, #0]
   807da:	3a01      	subs	r2, #1
   807dc:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   807de:	6818      	ldr	r0, [r3, #0]
}
   807e0:	4770      	bx	lr
	...

000807e4 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   807e4:	4b06      	ldr	r3, [pc, #24]	; (80800 <pxCurrentTCBConst2>)
   807e6:	6819      	ldr	r1, [r3, #0]
   807e8:	6808      	ldr	r0, [r1, #0]
   807ea:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   807ee:	f380 8809 	msr	PSP, r0
   807f2:	f04f 0000 	mov.w	r0, #0
   807f6:	f380 8811 	msr	BASEPRI, r0
   807fa:	f04e 0e0d 	orr.w	lr, lr, #13
   807fe:	4770      	bx	lr

00080800 <pxCurrentTCBConst2>:
   80800:	20070b0c 	.word	0x20070b0c

00080804 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80804:	f3ef 8011 	mrs	r0, BASEPRI
   80808:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   8080c:	f381 8811 	msr	BASEPRI, r1
   80810:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80812:	2000      	movs	r0, #0

00080814 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80814:	f380 8811 	msr	BASEPRI, r0
   80818:	4770      	bx	lr
	...

0008081c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8081c:	f3ef 8009 	mrs	r0, PSP
   80820:	4b0c      	ldr	r3, [pc, #48]	; (80854 <pxCurrentTCBConst>)
   80822:	681a      	ldr	r2, [r3, #0]
   80824:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80828:	6010      	str	r0, [r2, #0]
   8082a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8082e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80832:	f380 8811 	msr	BASEPRI, r0
   80836:	f000 f8c9 	bl	809cc <vTaskSwitchContext>
   8083a:	f04f 0000 	mov.w	r0, #0
   8083e:	f380 8811 	msr	BASEPRI, r0
   80842:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80846:	6819      	ldr	r1, [r3, #0]
   80848:	6808      	ldr	r0, [r1, #0]
   8084a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8084e:	f380 8809 	msr	PSP, r0
   80852:	4770      	bx	lr

00080854 <pxCurrentTCBConst>:
   80854:	20070b0c 	.word	0x20070b0c

00080858 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80858:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8085a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8085e:	4b05      	ldr	r3, [pc, #20]	; (80874 <SysTick_Handler+0x1c>)
   80860:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80862:	4b05      	ldr	r3, [pc, #20]	; (80878 <SysTick_Handler+0x20>)
   80864:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80866:	4b05      	ldr	r3, [pc, #20]	; (8087c <SysTick_Handler+0x24>)
   80868:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8086a:	2000      	movs	r0, #0
   8086c:	4b04      	ldr	r3, [pc, #16]	; (80880 <SysTick_Handler+0x28>)
   8086e:	4798      	blx	r3
   80870:	bd08      	pop	{r3, pc}
   80872:	bf00      	nop
   80874:	e000ed04 	.word	0xe000ed04
   80878:	00080805 	.word	0x00080805
   8087c:	000808a5 	.word	0x000808a5
   80880:	00080815 	.word	0x00080815

00080884 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   80884:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80886:	4b04      	ldr	r3, [pc, #16]	; (80898 <xTaskGetTickCountFromISR+0x14>)
   80888:	4798      	blx	r3
	xReturn = xTickCount;
   8088a:	4b04      	ldr	r3, [pc, #16]	; (8089c <xTaskGetTickCountFromISR+0x18>)
   8088c:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   8088e:	4b04      	ldr	r3, [pc, #16]	; (808a0 <xTaskGetTickCountFromISR+0x1c>)
   80890:	4798      	blx	r3

	return xReturn;
}
   80892:	4620      	mov	r0, r4
   80894:	bd10      	pop	{r4, pc}
   80896:	bf00      	nop
   80898:	00080805 	.word	0x00080805
   8089c:	20070b90 	.word	0x20070b90
   808a0:	00080815 	.word	0x00080815

000808a4 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   808a4:	4b3d      	ldr	r3, [pc, #244]	; (8099c <vTaskIncrementTick+0xf8>)
   808a6:	681b      	ldr	r3, [r3, #0]
   808a8:	2b00      	cmp	r3, #0
   808aa:	d16f      	bne.n	8098c <vTaskIncrementTick+0xe8>
{
   808ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   808b0:	4b3b      	ldr	r3, [pc, #236]	; (809a0 <vTaskIncrementTick+0xfc>)
   808b2:	681a      	ldr	r2, [r3, #0]
   808b4:	3201      	adds	r2, #1
   808b6:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   808b8:	681b      	ldr	r3, [r3, #0]
   808ba:	b9ab      	cbnz	r3, 808e8 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   808bc:	4b39      	ldr	r3, [pc, #228]	; (809a4 <vTaskIncrementTick+0x100>)
   808be:	681b      	ldr	r3, [r3, #0]
   808c0:	681b      	ldr	r3, [r3, #0]
   808c2:	2b00      	cmp	r3, #0
   808c4:	d128      	bne.n	80918 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   808c6:	4b37      	ldr	r3, [pc, #220]	; (809a4 <vTaskIncrementTick+0x100>)
   808c8:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   808ca:	4a37      	ldr	r2, [pc, #220]	; (809a8 <vTaskIncrementTick+0x104>)
   808cc:	6810      	ldr	r0, [r2, #0]
   808ce:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   808d0:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   808d2:	4936      	ldr	r1, [pc, #216]	; (809ac <vTaskIncrementTick+0x108>)
   808d4:	680a      	ldr	r2, [r1, #0]
   808d6:	3201      	adds	r2, #1
   808d8:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   808da:	681b      	ldr	r3, [r3, #0]
   808dc:	681b      	ldr	r3, [r3, #0]
   808de:	b9fb      	cbnz	r3, 80920 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   808e0:	f04f 32ff 	mov.w	r2, #4294967295
   808e4:	4b32      	ldr	r3, [pc, #200]	; (809b0 <vTaskIncrementTick+0x10c>)
   808e6:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   808e8:	4b2d      	ldr	r3, [pc, #180]	; (809a0 <vTaskIncrementTick+0xfc>)
   808ea:	681a      	ldr	r2, [r3, #0]
   808ec:	4b30      	ldr	r3, [pc, #192]	; (809b0 <vTaskIncrementTick+0x10c>)
   808ee:	681b      	ldr	r3, [r3, #0]
   808f0:	429a      	cmp	r2, r3
   808f2:	d350      	bcc.n	80996 <vTaskIncrementTick+0xf2>
   808f4:	4b2b      	ldr	r3, [pc, #172]	; (809a4 <vTaskIncrementTick+0x100>)
   808f6:	681b      	ldr	r3, [r3, #0]
   808f8:	681b      	ldr	r3, [r3, #0]
   808fa:	b1cb      	cbz	r3, 80930 <vTaskIncrementTick+0x8c>
   808fc:	4b29      	ldr	r3, [pc, #164]	; (809a4 <vTaskIncrementTick+0x100>)
   808fe:	681b      	ldr	r3, [r3, #0]
   80900:	68db      	ldr	r3, [r3, #12]
   80902:	68dc      	ldr	r4, [r3, #12]
   80904:	6863      	ldr	r3, [r4, #4]
   80906:	4a26      	ldr	r2, [pc, #152]	; (809a0 <vTaskIncrementTick+0xfc>)
   80908:	6812      	ldr	r2, [r2, #0]
   8090a:	4293      	cmp	r3, r2
   8090c:	d816      	bhi.n	8093c <vTaskIncrementTick+0x98>
   8090e:	4e29      	ldr	r6, [pc, #164]	; (809b4 <vTaskIncrementTick+0x110>)
   80910:	4f29      	ldr	r7, [pc, #164]	; (809b8 <vTaskIncrementTick+0x114>)
   80912:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 809c8 <vTaskIncrementTick+0x124>
   80916:	e02f      	b.n	80978 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80918:	4b28      	ldr	r3, [pc, #160]	; (809bc <vTaskIncrementTick+0x118>)
   8091a:	4798      	blx	r3
   8091c:	bf00      	nop
   8091e:	e7fd      	b.n	8091c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80920:	4b20      	ldr	r3, [pc, #128]	; (809a4 <vTaskIncrementTick+0x100>)
   80922:	681b      	ldr	r3, [r3, #0]
   80924:	68db      	ldr	r3, [r3, #12]
   80926:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80928:	685a      	ldr	r2, [r3, #4]
   8092a:	4b21      	ldr	r3, [pc, #132]	; (809b0 <vTaskIncrementTick+0x10c>)
   8092c:	601a      	str	r2, [r3, #0]
   8092e:	e7db      	b.n	808e8 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80930:	f04f 32ff 	mov.w	r2, #4294967295
   80934:	4b1e      	ldr	r3, [pc, #120]	; (809b0 <vTaskIncrementTick+0x10c>)
   80936:	601a      	str	r2, [r3, #0]
   80938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8093c:	4a1c      	ldr	r2, [pc, #112]	; (809b0 <vTaskIncrementTick+0x10c>)
   8093e:	6013      	str	r3, [r2, #0]
   80940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80944:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80946:	683b      	ldr	r3, [r7, #0]
   80948:	4298      	cmp	r0, r3
   8094a:	bf88      	it	hi
   8094c:	6038      	strhi	r0, [r7, #0]
   8094e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80952:	4629      	mov	r1, r5
   80954:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80958:	4b19      	ldr	r3, [pc, #100]	; (809c0 <vTaskIncrementTick+0x11c>)
   8095a:	4798      	blx	r3
   8095c:	4b11      	ldr	r3, [pc, #68]	; (809a4 <vTaskIncrementTick+0x100>)
   8095e:	681b      	ldr	r3, [r3, #0]
   80960:	681b      	ldr	r3, [r3, #0]
   80962:	2b00      	cmp	r3, #0
   80964:	d0e4      	beq.n	80930 <vTaskIncrementTick+0x8c>
   80966:	4b0f      	ldr	r3, [pc, #60]	; (809a4 <vTaskIncrementTick+0x100>)
   80968:	681b      	ldr	r3, [r3, #0]
   8096a:	68db      	ldr	r3, [r3, #12]
   8096c:	68dc      	ldr	r4, [r3, #12]
   8096e:	6863      	ldr	r3, [r4, #4]
   80970:	4a0b      	ldr	r2, [pc, #44]	; (809a0 <vTaskIncrementTick+0xfc>)
   80972:	6812      	ldr	r2, [r2, #0]
   80974:	4293      	cmp	r3, r2
   80976:	d8e1      	bhi.n	8093c <vTaskIncrementTick+0x98>
   80978:	1d25      	adds	r5, r4, #4
   8097a:	4628      	mov	r0, r5
   8097c:	47b0      	blx	r6
   8097e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80980:	2b00      	cmp	r3, #0
   80982:	d0df      	beq.n	80944 <vTaskIncrementTick+0xa0>
   80984:	f104 0018 	add.w	r0, r4, #24
   80988:	47b0      	blx	r6
   8098a:	e7db      	b.n	80944 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   8098c:	4a0d      	ldr	r2, [pc, #52]	; (809c4 <vTaskIncrementTick+0x120>)
   8098e:	6813      	ldr	r3, [r2, #0]
   80990:	3301      	adds	r3, #1
   80992:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80994:	4770      	bx	lr
   80996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8099a:	bf00      	nop
   8099c:	20070b80 	.word	0x20070b80
   809a0:	20070b90 	.word	0x20070b90
   809a4:	20070b10 	.word	0x20070b10
   809a8:	20070b14 	.word	0x20070b14
   809ac:	20070b8c 	.word	0x20070b8c
   809b0:	20070138 	.word	0x20070138
   809b4:	000807bd 	.word	0x000807bd
   809b8:	20070b84 	.word	0x20070b84
   809bc:	00080805 	.word	0x00080805
   809c0:	000807a1 	.word	0x000807a1
   809c4:	20070b7c 	.word	0x20070b7c
   809c8:	20070b18 	.word	0x20070b18

000809cc <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   809cc:	4b21      	ldr	r3, [pc, #132]	; (80a54 <vTaskSwitchContext+0x88>)
   809ce:	681b      	ldr	r3, [r3, #0]
   809d0:	b9eb      	cbnz	r3, 80a0e <vTaskSwitchContext+0x42>
{
   809d2:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   809d4:	4b20      	ldr	r3, [pc, #128]	; (80a58 <vTaskSwitchContext+0x8c>)
   809d6:	681b      	ldr	r3, [r3, #0]
   809d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   809dc:	009b      	lsls	r3, r3, #2
   809de:	4a1f      	ldr	r2, [pc, #124]	; (80a5c <vTaskSwitchContext+0x90>)
   809e0:	58d3      	ldr	r3, [r2, r3]
   809e2:	b9c3      	cbnz	r3, 80a16 <vTaskSwitchContext+0x4a>
   809e4:	4b1c      	ldr	r3, [pc, #112]	; (80a58 <vTaskSwitchContext+0x8c>)
   809e6:	681b      	ldr	r3, [r3, #0]
   809e8:	b16b      	cbz	r3, 80a06 <vTaskSwitchContext+0x3a>
   809ea:	4a1b      	ldr	r2, [pc, #108]	; (80a58 <vTaskSwitchContext+0x8c>)
   809ec:	491b      	ldr	r1, [pc, #108]	; (80a5c <vTaskSwitchContext+0x90>)
   809ee:	6813      	ldr	r3, [r2, #0]
   809f0:	3b01      	subs	r3, #1
   809f2:	6013      	str	r3, [r2, #0]
   809f4:	6813      	ldr	r3, [r2, #0]
   809f6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   809fa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   809fe:	b953      	cbnz	r3, 80a16 <vTaskSwitchContext+0x4a>
   80a00:	6813      	ldr	r3, [r2, #0]
   80a02:	2b00      	cmp	r3, #0
   80a04:	d1f3      	bne.n	809ee <vTaskSwitchContext+0x22>
   80a06:	4b16      	ldr	r3, [pc, #88]	; (80a60 <vTaskSwitchContext+0x94>)
   80a08:	4798      	blx	r3
   80a0a:	bf00      	nop
   80a0c:	e7fd      	b.n	80a0a <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   80a0e:	2201      	movs	r2, #1
   80a10:	4b14      	ldr	r3, [pc, #80]	; (80a64 <vTaskSwitchContext+0x98>)
   80a12:	601a      	str	r2, [r3, #0]
   80a14:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80a16:	4b10      	ldr	r3, [pc, #64]	; (80a58 <vTaskSwitchContext+0x8c>)
   80a18:	681b      	ldr	r3, [r3, #0]
   80a1a:	4a10      	ldr	r2, [pc, #64]	; (80a5c <vTaskSwitchContext+0x90>)
   80a1c:	0099      	lsls	r1, r3, #2
   80a1e:	18c8      	adds	r0, r1, r3
   80a20:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80a24:	6844      	ldr	r4, [r0, #4]
   80a26:	6864      	ldr	r4, [r4, #4]
   80a28:	6044      	str	r4, [r0, #4]
   80a2a:	4419      	add	r1, r3
   80a2c:	4602      	mov	r2, r0
   80a2e:	3208      	adds	r2, #8
   80a30:	4294      	cmp	r4, r2
   80a32:	d009      	beq.n	80a48 <vTaskSwitchContext+0x7c>
   80a34:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80a38:	4a08      	ldr	r2, [pc, #32]	; (80a5c <vTaskSwitchContext+0x90>)
   80a3a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80a3e:	685b      	ldr	r3, [r3, #4]
   80a40:	68da      	ldr	r2, [r3, #12]
   80a42:	4b09      	ldr	r3, [pc, #36]	; (80a68 <vTaskSwitchContext+0x9c>)
   80a44:	601a      	str	r2, [r3, #0]
   80a46:	bd10      	pop	{r4, pc}
   80a48:	6860      	ldr	r0, [r4, #4]
   80a4a:	4a04      	ldr	r2, [pc, #16]	; (80a5c <vTaskSwitchContext+0x90>)
   80a4c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80a50:	6050      	str	r0, [r2, #4]
   80a52:	e7ef      	b.n	80a34 <vTaskSwitchContext+0x68>
   80a54:	20070b80 	.word	0x20070b80
   80a58:	20070b84 	.word	0x20070b84
   80a5c:	20070b18 	.word	0x20070b18
   80a60:	00080805 	.word	0x00080805
   80a64:	20070b88 	.word	0x20070b88
   80a68:	20070b0c 	.word	0x20070b0c

00080a6c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80a6c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80a6e:	480e      	ldr	r0, [pc, #56]	; (80aa8 <sysclk_init+0x3c>)
   80a70:	4b0e      	ldr	r3, [pc, #56]	; (80aac <sysclk_init+0x40>)
   80a72:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80a74:	213e      	movs	r1, #62	; 0x3e
   80a76:	2000      	movs	r0, #0
   80a78:	4b0d      	ldr	r3, [pc, #52]	; (80ab0 <sysclk_init+0x44>)
   80a7a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80a7c:	4c0d      	ldr	r4, [pc, #52]	; (80ab4 <sysclk_init+0x48>)
   80a7e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80a80:	2800      	cmp	r0, #0
   80a82:	d0fc      	beq.n	80a7e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80a84:	4b0c      	ldr	r3, [pc, #48]	; (80ab8 <sysclk_init+0x4c>)
   80a86:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80a88:	4a0c      	ldr	r2, [pc, #48]	; (80abc <sysclk_init+0x50>)
   80a8a:	4b0d      	ldr	r3, [pc, #52]	; (80ac0 <sysclk_init+0x54>)
   80a8c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80a8e:	4c0d      	ldr	r4, [pc, #52]	; (80ac4 <sysclk_init+0x58>)
   80a90:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80a92:	2800      	cmp	r0, #0
   80a94:	d0fc      	beq.n	80a90 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80a96:	2010      	movs	r0, #16
   80a98:	4b0b      	ldr	r3, [pc, #44]	; (80ac8 <sysclk_init+0x5c>)
   80a9a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80a9c:	4b0b      	ldr	r3, [pc, #44]	; (80acc <sysclk_init+0x60>)
   80a9e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80aa0:	4801      	ldr	r0, [pc, #4]	; (80aa8 <sysclk_init+0x3c>)
   80aa2:	4b02      	ldr	r3, [pc, #8]	; (80aac <sysclk_init+0x40>)
   80aa4:	4798      	blx	r3
   80aa6:	bd10      	pop	{r4, pc}
   80aa8:	0501bd00 	.word	0x0501bd00
   80aac:	200700b1 	.word	0x200700b1
   80ab0:	00080f01 	.word	0x00080f01
   80ab4:	00080f55 	.word	0x00080f55
   80ab8:	00080f65 	.word	0x00080f65
   80abc:	200d3f01 	.word	0x200d3f01
   80ac0:	400e0600 	.word	0x400e0600
   80ac4:	00080f75 	.word	0x00080f75
   80ac8:	00080e9d 	.word	0x00080e9d
   80acc:	00081075 	.word	0x00081075

00080ad0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80ad0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80ad2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80ad6:	4b16      	ldr	r3, [pc, #88]	; (80b30 <board_init+0x60>)
   80ad8:	605a      	str	r2, [r3, #4]
   80ada:	200b      	movs	r0, #11
   80adc:	4c15      	ldr	r4, [pc, #84]	; (80b34 <board_init+0x64>)
   80ade:	47a0      	blx	r4
   80ae0:	200c      	movs	r0, #12
   80ae2:	47a0      	blx	r4
   80ae4:	200d      	movs	r0, #13
   80ae6:	47a0      	blx	r4
   80ae8:	200e      	movs	r0, #14
   80aea:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80aec:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80af0:	203b      	movs	r0, #59	; 0x3b
   80af2:	4c11      	ldr	r4, [pc, #68]	; (80b38 <board_init+0x68>)
   80af4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80af6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80afa:	2055      	movs	r0, #85	; 0x55
   80afc:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80afe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80b02:	2056      	movs	r0, #86	; 0x56
   80b04:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80b06:	490d      	ldr	r1, [pc, #52]	; (80b3c <board_init+0x6c>)
   80b08:	2068      	movs	r0, #104	; 0x68
   80b0a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80b0c:	490c      	ldr	r1, [pc, #48]	; (80b40 <board_init+0x70>)
   80b0e:	205c      	movs	r0, #92	; 0x5c
   80b10:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80b12:	4a0c      	ldr	r2, [pc, #48]	; (80b44 <board_init+0x74>)
   80b14:	f44f 7140 	mov.w	r1, #768	; 0x300
   80b18:	480b      	ldr	r0, [pc, #44]	; (80b48 <board_init+0x78>)
   80b1a:	4b0c      	ldr	r3, [pc, #48]	; (80b4c <board_init+0x7c>)
   80b1c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80b1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b22:	202b      	movs	r0, #43	; 0x2b
   80b24:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80b26:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80b2a:	202a      	movs	r0, #42	; 0x2a
   80b2c:	47a0      	blx	r4
   80b2e:	bd10      	pop	{r4, pc}
   80b30:	400e1a50 	.word	0x400e1a50
   80b34:	00080f85 	.word	0x00080f85
   80b38:	00080c21 	.word	0x00080c21
   80b3c:	28000079 	.word	0x28000079
   80b40:	28000001 	.word	0x28000001
   80b44:	08000001 	.word	0x08000001
   80b48:	400e0e00 	.word	0x400e0e00
   80b4c:	00080cf1 	.word	0x00080cf1

00080b50 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80b50:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80b52:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80b56:	d016      	beq.n	80b86 <pio_set_peripheral+0x36>
   80b58:	d80b      	bhi.n	80b72 <pio_set_peripheral+0x22>
   80b5a:	b149      	cbz	r1, 80b70 <pio_set_peripheral+0x20>
   80b5c:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80b60:	d105      	bne.n	80b6e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80b62:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80b64:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80b66:	400b      	ands	r3, r1
   80b68:	ea23 0302 	bic.w	r3, r3, r2
   80b6c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80b6e:	6042      	str	r2, [r0, #4]
   80b70:	4770      	bx	lr
	switch (ul_type) {
   80b72:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80b76:	d0fb      	beq.n	80b70 <pio_set_peripheral+0x20>
   80b78:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80b7c:	d0f8      	beq.n	80b70 <pio_set_peripheral+0x20>
   80b7e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80b82:	d1f4      	bne.n	80b6e <pio_set_peripheral+0x1e>
   80b84:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80b86:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80b88:	4313      	orrs	r3, r2
   80b8a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80b8c:	e7ef      	b.n	80b6e <pio_set_peripheral+0x1e>

00080b8e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80b8e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80b90:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80b94:	bf14      	ite	ne
   80b96:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80b98:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80b9a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80b9e:	bf14      	ite	ne
   80ba0:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80ba2:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80ba4:	f012 0f02 	tst.w	r2, #2
   80ba8:	d107      	bne.n	80bba <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80baa:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80bae:	bf18      	it	ne
   80bb0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80bb4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80bb6:	6001      	str	r1, [r0, #0]
   80bb8:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80bba:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80bbe:	e7f9      	b.n	80bb4 <pio_set_input+0x26>

00080bc0 <pio_set_output>:
{
   80bc0:	b410      	push	{r4}
   80bc2:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80bc4:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80bc6:	b944      	cbnz	r4, 80bda <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80bc8:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80bca:	b143      	cbz	r3, 80bde <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80bcc:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80bce:	b942      	cbnz	r2, 80be2 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80bd0:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80bd2:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80bd4:	6001      	str	r1, [r0, #0]
}
   80bd6:	bc10      	pop	{r4}
   80bd8:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80bda:	6641      	str	r1, [r0, #100]	; 0x64
   80bdc:	e7f5      	b.n	80bca <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80bde:	6541      	str	r1, [r0, #84]	; 0x54
   80be0:	e7f5      	b.n	80bce <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80be2:	6301      	str	r1, [r0, #48]	; 0x30
   80be4:	e7f5      	b.n	80bd2 <pio_set_output+0x12>

00080be6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80be6:	f012 0f10 	tst.w	r2, #16
   80bea:	d010      	beq.n	80c0e <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80bec:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80bf0:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80bf4:	bf14      	ite	ne
   80bf6:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80bfa:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80bfe:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80c02:	bf14      	ite	ne
   80c04:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80c08:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80c0c:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80c0e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80c12:	4770      	bx	lr

00080c14 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80c14:	6401      	str	r1, [r0, #64]	; 0x40
   80c16:	4770      	bx	lr

00080c18 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80c18:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80c1a:	4770      	bx	lr

00080c1c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80c1c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80c1e:	4770      	bx	lr

00080c20 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80c20:	b570      	push	{r4, r5, r6, lr}
   80c22:	b082      	sub	sp, #8
   80c24:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80c26:	0943      	lsrs	r3, r0, #5
   80c28:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80c2c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80c30:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80c32:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80c36:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80c3a:	d031      	beq.n	80ca0 <pio_configure_pin+0x80>
   80c3c:	d816      	bhi.n	80c6c <pio_configure_pin+0x4c>
   80c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80c42:	d01b      	beq.n	80c7c <pio_configure_pin+0x5c>
   80c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80c48:	d116      	bne.n	80c78 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80c4a:	f000 001f 	and.w	r0, r0, #31
   80c4e:	2601      	movs	r6, #1
   80c50:	4086      	lsls	r6, r0
   80c52:	4632      	mov	r2, r6
   80c54:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80c58:	4620      	mov	r0, r4
   80c5a:	4b22      	ldr	r3, [pc, #136]	; (80ce4 <pio_configure_pin+0xc4>)
   80c5c:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c5e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80c62:	bf14      	ite	ne
   80c64:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c66:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80c68:	2001      	movs	r0, #1
   80c6a:	e017      	b.n	80c9c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80c6c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80c70:	d021      	beq.n	80cb6 <pio_configure_pin+0x96>
   80c72:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80c76:	d01e      	beq.n	80cb6 <pio_configure_pin+0x96>
		return 0;
   80c78:	2000      	movs	r0, #0
   80c7a:	e00f      	b.n	80c9c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80c7c:	f000 001f 	and.w	r0, r0, #31
   80c80:	2601      	movs	r6, #1
   80c82:	4086      	lsls	r6, r0
   80c84:	4632      	mov	r2, r6
   80c86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80c8a:	4620      	mov	r0, r4
   80c8c:	4b15      	ldr	r3, [pc, #84]	; (80ce4 <pio_configure_pin+0xc4>)
   80c8e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80c90:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80c94:	bf14      	ite	ne
   80c96:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80c98:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80c9a:	2001      	movs	r0, #1
}
   80c9c:	b002      	add	sp, #8
   80c9e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80ca0:	f000 011f 	and.w	r1, r0, #31
   80ca4:	2601      	movs	r6, #1
   80ca6:	462a      	mov	r2, r5
   80ca8:	fa06 f101 	lsl.w	r1, r6, r1
   80cac:	4620      	mov	r0, r4
   80cae:	4b0e      	ldr	r3, [pc, #56]	; (80ce8 <pio_configure_pin+0xc8>)
   80cb0:	4798      	blx	r3
	return 1;
   80cb2:	4630      	mov	r0, r6
		break;
   80cb4:	e7f2      	b.n	80c9c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80cb6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80cba:	f000 011f 	and.w	r1, r0, #31
   80cbe:	2601      	movs	r6, #1
   80cc0:	ea05 0306 	and.w	r3, r5, r6
   80cc4:	9300      	str	r3, [sp, #0]
   80cc6:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80cca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80cce:	bf14      	ite	ne
   80cd0:	2200      	movne	r2, #0
   80cd2:	2201      	moveq	r2, #1
   80cd4:	fa06 f101 	lsl.w	r1, r6, r1
   80cd8:	4620      	mov	r0, r4
   80cda:	4c04      	ldr	r4, [pc, #16]	; (80cec <pio_configure_pin+0xcc>)
   80cdc:	47a0      	blx	r4
	return 1;
   80cde:	4630      	mov	r0, r6
		break;
   80ce0:	e7dc      	b.n	80c9c <pio_configure_pin+0x7c>
   80ce2:	bf00      	nop
   80ce4:	00080b51 	.word	0x00080b51
   80ce8:	00080b8f 	.word	0x00080b8f
   80cec:	00080bc1 	.word	0x00080bc1

00080cf0 <pio_configure_pin_group>:
{
   80cf0:	b570      	push	{r4, r5, r6, lr}
   80cf2:	b082      	sub	sp, #8
   80cf4:	4605      	mov	r5, r0
   80cf6:	460e      	mov	r6, r1
   80cf8:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80cfa:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80cfe:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80d02:	d027      	beq.n	80d54 <pio_configure_pin_group+0x64>
   80d04:	d811      	bhi.n	80d2a <pio_configure_pin_group+0x3a>
   80d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80d0a:	d016      	beq.n	80d3a <pio_configure_pin_group+0x4a>
   80d0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80d10:	d111      	bne.n	80d36 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80d12:	460a      	mov	r2, r1
   80d14:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80d18:	4b19      	ldr	r3, [pc, #100]	; (80d80 <pio_configure_pin_group+0x90>)
   80d1a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80d1c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80d20:	bf14      	ite	ne
   80d22:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80d24:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80d26:	2001      	movs	r0, #1
   80d28:	e012      	b.n	80d50 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80d2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80d2e:	d015      	beq.n	80d5c <pio_configure_pin_group+0x6c>
   80d30:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80d34:	d012      	beq.n	80d5c <pio_configure_pin_group+0x6c>
		return 0;
   80d36:	2000      	movs	r0, #0
   80d38:	e00a      	b.n	80d50 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80d3a:	460a      	mov	r2, r1
   80d3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d40:	4b0f      	ldr	r3, [pc, #60]	; (80d80 <pio_configure_pin_group+0x90>)
   80d42:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80d44:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80d48:	bf14      	ite	ne
   80d4a:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80d4c:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80d4e:	2001      	movs	r0, #1
}
   80d50:	b002      	add	sp, #8
   80d52:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80d54:	4b0b      	ldr	r3, [pc, #44]	; (80d84 <pio_configure_pin_group+0x94>)
   80d56:	4798      	blx	r3
	return 1;
   80d58:	2001      	movs	r0, #1
		break;
   80d5a:	e7f9      	b.n	80d50 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80d5c:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80d60:	f004 0301 	and.w	r3, r4, #1
   80d64:	9300      	str	r3, [sp, #0]
   80d66:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80d6a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80d6e:	bf14      	ite	ne
   80d70:	2200      	movne	r2, #0
   80d72:	2201      	moveq	r2, #1
   80d74:	4631      	mov	r1, r6
   80d76:	4628      	mov	r0, r5
   80d78:	4c03      	ldr	r4, [pc, #12]	; (80d88 <pio_configure_pin_group+0x98>)
   80d7a:	47a0      	blx	r4
	return 1;
   80d7c:	2001      	movs	r0, #1
		break;
   80d7e:	e7e7      	b.n	80d50 <pio_configure_pin_group+0x60>
   80d80:	00080b51 	.word	0x00080b51
   80d84:	00080b8f 	.word	0x00080b8f
   80d88:	00080bc1 	.word	0x00080bc1

00080d8c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d90:	4604      	mov	r4, r0
   80d92:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80d94:	4b0e      	ldr	r3, [pc, #56]	; (80dd0 <pio_handler_process+0x44>)
   80d96:	4798      	blx	r3
   80d98:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80d9a:	4620      	mov	r0, r4
   80d9c:	4b0d      	ldr	r3, [pc, #52]	; (80dd4 <pio_handler_process+0x48>)
   80d9e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80da0:	4005      	ands	r5, r0
   80da2:	d013      	beq.n	80dcc <pio_handler_process+0x40>
   80da4:	4c0c      	ldr	r4, [pc, #48]	; (80dd8 <pio_handler_process+0x4c>)
   80da6:	f104 0660 	add.w	r6, r4, #96	; 0x60
   80daa:	e003      	b.n	80db4 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80dac:	42b4      	cmp	r4, r6
   80dae:	d00d      	beq.n	80dcc <pio_handler_process+0x40>
   80db0:	3410      	adds	r4, #16
		while (status != 0) {
   80db2:	b15d      	cbz	r5, 80dcc <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80db4:	6820      	ldr	r0, [r4, #0]
   80db6:	4540      	cmp	r0, r8
   80db8:	d1f8      	bne.n	80dac <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80dba:	6861      	ldr	r1, [r4, #4]
   80dbc:	4229      	tst	r1, r5
   80dbe:	d0f5      	beq.n	80dac <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80dc0:	68e3      	ldr	r3, [r4, #12]
   80dc2:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80dc4:	6863      	ldr	r3, [r4, #4]
   80dc6:	ea25 0503 	bic.w	r5, r5, r3
   80dca:	e7ef      	b.n	80dac <pio_handler_process+0x20>
   80dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80dd0:	00080c19 	.word	0x00080c19
   80dd4:	00080c1d 	.word	0x00080c1d
   80dd8:	20070b94 	.word	0x20070b94

00080ddc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   80ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   80dde:	4c18      	ldr	r4, [pc, #96]	; (80e40 <pio_handler_set+0x64>)
   80de0:	6826      	ldr	r6, [r4, #0]
   80de2:	2e06      	cmp	r6, #6
   80de4:	d829      	bhi.n	80e3a <pio_handler_set+0x5e>
   80de6:	f04f 0c00 	mov.w	ip, #0
   80dea:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80dec:	4f15      	ldr	r7, [pc, #84]	; (80e44 <pio_handler_set+0x68>)
   80dee:	e004      	b.n	80dfa <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80df0:	3401      	adds	r4, #1
   80df2:	b2e4      	uxtb	r4, r4
   80df4:	46a4      	mov	ip, r4
   80df6:	42a6      	cmp	r6, r4
   80df8:	d309      	bcc.n	80e0e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   80dfa:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   80dfc:	0125      	lsls	r5, r4, #4
   80dfe:	597d      	ldr	r5, [r7, r5]
   80e00:	428d      	cmp	r5, r1
   80e02:	d1f5      	bne.n	80df0 <pio_handler_set+0x14>
   80e04:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   80e08:	686d      	ldr	r5, [r5, #4]
   80e0a:	4295      	cmp	r5, r2
   80e0c:	d1f0      	bne.n	80df0 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   80e0e:	4d0d      	ldr	r5, [pc, #52]	; (80e44 <pio_handler_set+0x68>)
   80e10:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   80e14:	eb05 040e 	add.w	r4, r5, lr
   80e18:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   80e1c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   80e1e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   80e20:	9906      	ldr	r1, [sp, #24]
   80e22:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   80e24:	3601      	adds	r6, #1
   80e26:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   80e28:	bf04      	itt	eq
   80e2a:	4905      	ldreq	r1, [pc, #20]	; (80e40 <pio_handler_set+0x64>)
   80e2c:	600e      	streq	r6, [r1, #0]
   80e2e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   80e30:	461a      	mov	r2, r3
   80e32:	4b05      	ldr	r3, [pc, #20]	; (80e48 <pio_handler_set+0x6c>)
   80e34:	4798      	blx	r3

	return 0;
   80e36:	2000      	movs	r0, #0
   80e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   80e3a:	2001      	movs	r0, #1
}
   80e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e3e:	bf00      	nop
   80e40:	20070c04 	.word	0x20070c04
   80e44:	20070b94 	.word	0x20070b94
   80e48:	00080be7 	.word	0x00080be7

00080e4c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   80e4c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   80e4e:	210b      	movs	r1, #11
   80e50:	4801      	ldr	r0, [pc, #4]	; (80e58 <PIOA_Handler+0xc>)
   80e52:	4b02      	ldr	r3, [pc, #8]	; (80e5c <PIOA_Handler+0x10>)
   80e54:	4798      	blx	r3
   80e56:	bd08      	pop	{r3, pc}
   80e58:	400e0e00 	.word	0x400e0e00
   80e5c:	00080d8d 	.word	0x00080d8d

00080e60 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80e60:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80e62:	210c      	movs	r1, #12
   80e64:	4801      	ldr	r0, [pc, #4]	; (80e6c <PIOB_Handler+0xc>)
   80e66:	4b02      	ldr	r3, [pc, #8]	; (80e70 <PIOB_Handler+0x10>)
   80e68:	4798      	blx	r3
   80e6a:	bd08      	pop	{r3, pc}
   80e6c:	400e1000 	.word	0x400e1000
   80e70:	00080d8d 	.word	0x00080d8d

00080e74 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80e74:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80e76:	210d      	movs	r1, #13
   80e78:	4801      	ldr	r0, [pc, #4]	; (80e80 <PIOC_Handler+0xc>)
   80e7a:	4b02      	ldr	r3, [pc, #8]	; (80e84 <PIOC_Handler+0x10>)
   80e7c:	4798      	blx	r3
   80e7e:	bd08      	pop	{r3, pc}
   80e80:	400e1200 	.word	0x400e1200
   80e84:	00080d8d 	.word	0x00080d8d

00080e88 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80e88:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80e8a:	210e      	movs	r1, #14
   80e8c:	4801      	ldr	r0, [pc, #4]	; (80e94 <PIOD_Handler+0xc>)
   80e8e:	4b02      	ldr	r3, [pc, #8]	; (80e98 <PIOD_Handler+0x10>)
   80e90:	4798      	blx	r3
   80e92:	bd08      	pop	{r3, pc}
   80e94:	400e1400 	.word	0x400e1400
   80e98:	00080d8d 	.word	0x00080d8d

00080e9c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80e9c:	4a17      	ldr	r2, [pc, #92]	; (80efc <pmc_switch_mck_to_pllack+0x60>)
   80e9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   80ea4:	4318      	orrs	r0, r3
   80ea6:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ea8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80eaa:	f013 0f08 	tst.w	r3, #8
   80eae:	d10a      	bne.n	80ec6 <pmc_switch_mck_to_pllack+0x2a>
   80eb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80eb4:	4911      	ldr	r1, [pc, #68]	; (80efc <pmc_switch_mck_to_pllack+0x60>)
   80eb6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80eb8:	f012 0f08 	tst.w	r2, #8
   80ebc:	d103      	bne.n	80ec6 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80ebe:	3b01      	subs	r3, #1
   80ec0:	d1f9      	bne.n	80eb6 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   80ec2:	2001      	movs	r0, #1
   80ec4:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80ec6:	4a0d      	ldr	r2, [pc, #52]	; (80efc <pmc_switch_mck_to_pllack+0x60>)
   80ec8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   80eca:	f023 0303 	bic.w	r3, r3, #3
   80ece:	f043 0302 	orr.w	r3, r3, #2
   80ed2:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80ed4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80ed6:	f013 0f08 	tst.w	r3, #8
   80eda:	d10a      	bne.n	80ef2 <pmc_switch_mck_to_pllack+0x56>
   80edc:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80ee0:	4906      	ldr	r1, [pc, #24]	; (80efc <pmc_switch_mck_to_pllack+0x60>)
   80ee2:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80ee4:	f012 0f08 	tst.w	r2, #8
   80ee8:	d105      	bne.n	80ef6 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80eea:	3b01      	subs	r3, #1
   80eec:	d1f9      	bne.n	80ee2 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   80eee:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80ef0:	4770      	bx	lr
	return 0;
   80ef2:	2000      	movs	r0, #0
   80ef4:	4770      	bx	lr
   80ef6:	2000      	movs	r0, #0
   80ef8:	4770      	bx	lr
   80efa:	bf00      	nop
   80efc:	400e0600 	.word	0x400e0600

00080f00 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80f00:	b9c8      	cbnz	r0, 80f36 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80f02:	4a11      	ldr	r2, [pc, #68]	; (80f48 <pmc_switch_mainck_to_xtal+0x48>)
   80f04:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80f06:	0209      	lsls	r1, r1, #8
   80f08:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80f0a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80f0e:	f023 0303 	bic.w	r3, r3, #3
   80f12:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80f16:	f043 0301 	orr.w	r3, r3, #1
   80f1a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80f1c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   80f1e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80f20:	f013 0f01 	tst.w	r3, #1
   80f24:	d0fb      	beq.n	80f1e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80f26:	4a08      	ldr	r2, [pc, #32]	; (80f48 <pmc_switch_mainck_to_xtal+0x48>)
   80f28:	6a13      	ldr	r3, [r2, #32]
   80f2a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   80f2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80f32:	6213      	str	r3, [r2, #32]
   80f34:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80f36:	4904      	ldr	r1, [pc, #16]	; (80f48 <pmc_switch_mainck_to_xtal+0x48>)
   80f38:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80f3a:	4a04      	ldr	r2, [pc, #16]	; (80f4c <pmc_switch_mainck_to_xtal+0x4c>)
   80f3c:	401a      	ands	r2, r3
   80f3e:	4b04      	ldr	r3, [pc, #16]	; (80f50 <pmc_switch_mainck_to_xtal+0x50>)
   80f40:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80f42:	620b      	str	r3, [r1, #32]
   80f44:	4770      	bx	lr
   80f46:	bf00      	nop
   80f48:	400e0600 	.word	0x400e0600
   80f4c:	fec8fffc 	.word	0xfec8fffc
   80f50:	01370002 	.word	0x01370002

00080f54 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   80f54:	4b02      	ldr	r3, [pc, #8]	; (80f60 <pmc_osc_is_ready_mainck+0xc>)
   80f56:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80f58:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   80f5c:	4770      	bx	lr
   80f5e:	bf00      	nop
   80f60:	400e0600 	.word	0x400e0600

00080f64 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   80f64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   80f68:	4b01      	ldr	r3, [pc, #4]	; (80f70 <pmc_disable_pllack+0xc>)
   80f6a:	629a      	str	r2, [r3, #40]	; 0x28
   80f6c:	4770      	bx	lr
   80f6e:	bf00      	nop
   80f70:	400e0600 	.word	0x400e0600

00080f74 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   80f74:	4b02      	ldr	r3, [pc, #8]	; (80f80 <pmc_is_locked_pllack+0xc>)
   80f76:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   80f78:	f000 0002 	and.w	r0, r0, #2
   80f7c:	4770      	bx	lr
   80f7e:	bf00      	nop
   80f80:	400e0600 	.word	0x400e0600

00080f84 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80f84:	282c      	cmp	r0, #44	; 0x2c
   80f86:	d81e      	bhi.n	80fc6 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80f88:	281f      	cmp	r0, #31
   80f8a:	d80c      	bhi.n	80fa6 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80f8c:	4b11      	ldr	r3, [pc, #68]	; (80fd4 <pmc_enable_periph_clk+0x50>)
   80f8e:	699a      	ldr	r2, [r3, #24]
   80f90:	2301      	movs	r3, #1
   80f92:	4083      	lsls	r3, r0
   80f94:	4393      	bics	r3, r2
   80f96:	d018      	beq.n	80fca <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80f98:	2301      	movs	r3, #1
   80f9a:	fa03 f000 	lsl.w	r0, r3, r0
   80f9e:	4b0d      	ldr	r3, [pc, #52]	; (80fd4 <pmc_enable_periph_clk+0x50>)
   80fa0:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80fa2:	2000      	movs	r0, #0
   80fa4:	4770      	bx	lr
		ul_id -= 32;
   80fa6:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80fa8:	4b0a      	ldr	r3, [pc, #40]	; (80fd4 <pmc_enable_periph_clk+0x50>)
   80faa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80fae:	2301      	movs	r3, #1
   80fb0:	4083      	lsls	r3, r0
   80fb2:	4393      	bics	r3, r2
   80fb4:	d00b      	beq.n	80fce <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   80fb6:	2301      	movs	r3, #1
   80fb8:	fa03 f000 	lsl.w	r0, r3, r0
   80fbc:	4b05      	ldr	r3, [pc, #20]	; (80fd4 <pmc_enable_periph_clk+0x50>)
   80fbe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   80fc2:	2000      	movs	r0, #0
   80fc4:	4770      	bx	lr
		return 1;
   80fc6:	2001      	movs	r0, #1
   80fc8:	4770      	bx	lr
	return 0;
   80fca:	2000      	movs	r0, #0
   80fcc:	4770      	bx	lr
   80fce:	2000      	movs	r0, #0
}
   80fd0:	4770      	bx	lr
   80fd2:	bf00      	nop
   80fd4:	400e0600 	.word	0x400e0600

00080fd8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80fd8:	e7fe      	b.n	80fd8 <Dummy_Handler>
	...

00080fdc <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80fdc:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80fde:	4b1c      	ldr	r3, [pc, #112]	; (81050 <Reset_Handler+0x74>)
   80fe0:	4a1c      	ldr	r2, [pc, #112]	; (81054 <Reset_Handler+0x78>)
   80fe2:	429a      	cmp	r2, r3
   80fe4:	d010      	beq.n	81008 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   80fe6:	4b1c      	ldr	r3, [pc, #112]	; (81058 <Reset_Handler+0x7c>)
   80fe8:	4a19      	ldr	r2, [pc, #100]	; (81050 <Reset_Handler+0x74>)
   80fea:	429a      	cmp	r2, r3
   80fec:	d20c      	bcs.n	81008 <Reset_Handler+0x2c>
   80fee:	3b01      	subs	r3, #1
   80ff0:	1a9b      	subs	r3, r3, r2
   80ff2:	f023 0303 	bic.w	r3, r3, #3
   80ff6:	3304      	adds	r3, #4
   80ff8:	4413      	add	r3, r2
   80ffa:	4916      	ldr	r1, [pc, #88]	; (81054 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   80ffc:	f851 0b04 	ldr.w	r0, [r1], #4
   81000:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81004:	429a      	cmp	r2, r3
   81006:	d1f9      	bne.n	80ffc <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81008:	4b14      	ldr	r3, [pc, #80]	; (8105c <Reset_Handler+0x80>)
   8100a:	4a15      	ldr	r2, [pc, #84]	; (81060 <Reset_Handler+0x84>)
   8100c:	429a      	cmp	r2, r3
   8100e:	d20a      	bcs.n	81026 <Reset_Handler+0x4a>
   81010:	3b01      	subs	r3, #1
   81012:	1a9b      	subs	r3, r3, r2
   81014:	f023 0303 	bic.w	r3, r3, #3
   81018:	3304      	adds	r3, #4
   8101a:	4413      	add	r3, r2
		*pDest++ = 0;
   8101c:	2100      	movs	r1, #0
   8101e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81022:	4293      	cmp	r3, r2
   81024:	d1fb      	bne.n	8101e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81026:	4b0f      	ldr	r3, [pc, #60]	; (81064 <Reset_Handler+0x88>)
   81028:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8102c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81030:	490d      	ldr	r1, [pc, #52]	; (81068 <Reset_Handler+0x8c>)
   81032:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81034:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8103c:	d203      	bcs.n	81046 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8103e:	688b      	ldr	r3, [r1, #8]
   81040:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   81044:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81046:	4b09      	ldr	r3, [pc, #36]	; (8106c <Reset_Handler+0x90>)
   81048:	4798      	blx	r3

	/* Branch to main function */
	main();
   8104a:	4b09      	ldr	r3, [pc, #36]	; (81070 <Reset_Handler+0x94>)
   8104c:	4798      	blx	r3
   8104e:	e7fe      	b.n	8104e <Reset_Handler+0x72>
   81050:	20070000 	.word	0x20070000
   81054:	00084a6c 	.word	0x00084a6c
   81058:	20070af0 	.word	0x20070af0
   8105c:	20070c94 	.word	0x20070c94
   81060:	20070af0 	.word	0x20070af0
   81064:	00080000 	.word	0x00080000
   81068:	e000ed00 	.word	0xe000ed00
   8106c:	00081d29 	.word	0x00081d29
   81070:	000811dd 	.word	0x000811dd

00081074 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   81074:	4b3d      	ldr	r3, [pc, #244]	; (8116c <SystemCoreClockUpdate+0xf8>)
   81076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81078:	f003 0303 	and.w	r3, r3, #3
   8107c:	2b03      	cmp	r3, #3
   8107e:	d80e      	bhi.n	8109e <SystemCoreClockUpdate+0x2a>
   81080:	e8df f003 	tbb	[pc, r3]
   81084:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   81088:	4b39      	ldr	r3, [pc, #228]	; (81170 <SystemCoreClockUpdate+0xfc>)
   8108a:	695b      	ldr	r3, [r3, #20]
   8108c:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   81090:	bf14      	ite	ne
   81092:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   81096:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8109a:	4b36      	ldr	r3, [pc, #216]	; (81174 <SystemCoreClockUpdate+0x100>)
   8109c:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   8109e:	4b33      	ldr	r3, [pc, #204]	; (8116c <SystemCoreClockUpdate+0xf8>)
   810a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   810a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810a6:	2b70      	cmp	r3, #112	; 0x70
   810a8:	d057      	beq.n	8115a <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   810aa:	4b30      	ldr	r3, [pc, #192]	; (8116c <SystemCoreClockUpdate+0xf8>)
   810ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   810ae:	4931      	ldr	r1, [pc, #196]	; (81174 <SystemCoreClockUpdate+0x100>)
   810b0:	f3c2 1202 	ubfx	r2, r2, #4, #3
   810b4:	680b      	ldr	r3, [r1, #0]
   810b6:	40d3      	lsrs	r3, r2
   810b8:	600b      	str	r3, [r1, #0]
   810ba:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810bc:	4b2b      	ldr	r3, [pc, #172]	; (8116c <SystemCoreClockUpdate+0xf8>)
   810be:	6a1b      	ldr	r3, [r3, #32]
   810c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810c4:	d003      	beq.n	810ce <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810c6:	4a2c      	ldr	r2, [pc, #176]	; (81178 <SystemCoreClockUpdate+0x104>)
   810c8:	4b2a      	ldr	r3, [pc, #168]	; (81174 <SystemCoreClockUpdate+0x100>)
   810ca:	601a      	str	r2, [r3, #0]
   810cc:	e7e7      	b.n	8109e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   810ce:	4a2b      	ldr	r2, [pc, #172]	; (8117c <SystemCoreClockUpdate+0x108>)
   810d0:	4b28      	ldr	r3, [pc, #160]	; (81174 <SystemCoreClockUpdate+0x100>)
   810d2:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   810d4:	4b25      	ldr	r3, [pc, #148]	; (8116c <SystemCoreClockUpdate+0xf8>)
   810d6:	6a1b      	ldr	r3, [r3, #32]
   810d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
   810dc:	2b10      	cmp	r3, #16
   810de:	d005      	beq.n	810ec <SystemCoreClockUpdate+0x78>
   810e0:	2b20      	cmp	r3, #32
   810e2:	d1dc      	bne.n	8109e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   810e4:	4a24      	ldr	r2, [pc, #144]	; (81178 <SystemCoreClockUpdate+0x104>)
   810e6:	4b23      	ldr	r3, [pc, #140]	; (81174 <SystemCoreClockUpdate+0x100>)
   810e8:	601a      	str	r2, [r3, #0]
				break;
   810ea:	e7d8      	b.n	8109e <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   810ec:	4a24      	ldr	r2, [pc, #144]	; (81180 <SystemCoreClockUpdate+0x10c>)
   810ee:	4b21      	ldr	r3, [pc, #132]	; (81174 <SystemCoreClockUpdate+0x100>)
   810f0:	601a      	str	r2, [r3, #0]
				break;
   810f2:	e7d4      	b.n	8109e <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   810f4:	4b1d      	ldr	r3, [pc, #116]	; (8116c <SystemCoreClockUpdate+0xf8>)
   810f6:	6a1b      	ldr	r3, [r3, #32]
   810f8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   810fc:	d00c      	beq.n	81118 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   810fe:	4a1e      	ldr	r2, [pc, #120]	; (81178 <SystemCoreClockUpdate+0x104>)
   81100:	4b1c      	ldr	r3, [pc, #112]	; (81174 <SystemCoreClockUpdate+0x100>)
   81102:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81104:	4b19      	ldr	r3, [pc, #100]	; (8116c <SystemCoreClockUpdate+0xf8>)
   81106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81108:	f003 0303 	and.w	r3, r3, #3
   8110c:	2b02      	cmp	r3, #2
   8110e:	d016      	beq.n	8113e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81110:	4a1c      	ldr	r2, [pc, #112]	; (81184 <SystemCoreClockUpdate+0x110>)
   81112:	4b18      	ldr	r3, [pc, #96]	; (81174 <SystemCoreClockUpdate+0x100>)
   81114:	601a      	str	r2, [r3, #0]
   81116:	e7c2      	b.n	8109e <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81118:	4a18      	ldr	r2, [pc, #96]	; (8117c <SystemCoreClockUpdate+0x108>)
   8111a:	4b16      	ldr	r3, [pc, #88]	; (81174 <SystemCoreClockUpdate+0x100>)
   8111c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8111e:	4b13      	ldr	r3, [pc, #76]	; (8116c <SystemCoreClockUpdate+0xf8>)
   81120:	6a1b      	ldr	r3, [r3, #32]
   81122:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81126:	2b10      	cmp	r3, #16
   81128:	d005      	beq.n	81136 <SystemCoreClockUpdate+0xc2>
   8112a:	2b20      	cmp	r3, #32
   8112c:	d1ea      	bne.n	81104 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8112e:	4a12      	ldr	r2, [pc, #72]	; (81178 <SystemCoreClockUpdate+0x104>)
   81130:	4b10      	ldr	r3, [pc, #64]	; (81174 <SystemCoreClockUpdate+0x100>)
   81132:	601a      	str	r2, [r3, #0]
				break;
   81134:	e7e6      	b.n	81104 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81136:	4a12      	ldr	r2, [pc, #72]	; (81180 <SystemCoreClockUpdate+0x10c>)
   81138:	4b0e      	ldr	r3, [pc, #56]	; (81174 <SystemCoreClockUpdate+0x100>)
   8113a:	601a      	str	r2, [r3, #0]
				break;
   8113c:	e7e2      	b.n	81104 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8113e:	4a0b      	ldr	r2, [pc, #44]	; (8116c <SystemCoreClockUpdate+0xf8>)
   81140:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81142:	6a92      	ldr	r2, [r2, #40]	; 0x28
   81144:	480b      	ldr	r0, [pc, #44]	; (81174 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81146:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8114a:	6803      	ldr	r3, [r0, #0]
   8114c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81150:	b2d2      	uxtb	r2, r2
   81152:	fbb3 f3f2 	udiv	r3, r3, r2
   81156:	6003      	str	r3, [r0, #0]
   81158:	e7a1      	b.n	8109e <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   8115a:	4a06      	ldr	r2, [pc, #24]	; (81174 <SystemCoreClockUpdate+0x100>)
   8115c:	6813      	ldr	r3, [r2, #0]
   8115e:	490a      	ldr	r1, [pc, #40]	; (81188 <SystemCoreClockUpdate+0x114>)
   81160:	fba1 1303 	umull	r1, r3, r1, r3
   81164:	085b      	lsrs	r3, r3, #1
   81166:	6013      	str	r3, [r2, #0]
   81168:	4770      	bx	lr
   8116a:	bf00      	nop
   8116c:	400e0600 	.word	0x400e0600
   81170:	400e1a10 	.word	0x400e1a10
   81174:	2007013c 	.word	0x2007013c
   81178:	00b71b00 	.word	0x00b71b00
   8117c:	003d0900 	.word	0x003d0900
   81180:	007a1200 	.word	0x007a1200
   81184:	0e4e1c00 	.word	0x0e4e1c00
   81188:	aaaaaaab 	.word	0xaaaaaaab

0008118c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   8118c:	4b0a      	ldr	r3, [pc, #40]	; (811b8 <_sbrk+0x2c>)
   8118e:	681b      	ldr	r3, [r3, #0]
   81190:	b153      	cbz	r3, 811a8 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   81192:	4b09      	ldr	r3, [pc, #36]	; (811b8 <_sbrk+0x2c>)
   81194:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   81196:	181a      	adds	r2, r3, r0
   81198:	4908      	ldr	r1, [pc, #32]	; (811bc <_sbrk+0x30>)
   8119a:	4291      	cmp	r1, r2
   8119c:	db08      	blt.n	811b0 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   8119e:	4610      	mov	r0, r2
   811a0:	4a05      	ldr	r2, [pc, #20]	; (811b8 <_sbrk+0x2c>)
   811a2:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   811a4:	4618      	mov	r0, r3
   811a6:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   811a8:	4a05      	ldr	r2, [pc, #20]	; (811c0 <_sbrk+0x34>)
   811aa:	4b03      	ldr	r3, [pc, #12]	; (811b8 <_sbrk+0x2c>)
   811ac:	601a      	str	r2, [r3, #0]
   811ae:	e7f0      	b.n	81192 <_sbrk+0x6>
		return (caddr_t) -1;	
   811b0:	f04f 30ff 	mov.w	r0, #4294967295
}
   811b4:	4770      	bx	lr
   811b6:	bf00      	nop
   811b8:	20070c08 	.word	0x20070c08
   811bc:	20087ffc 	.word	0x20087ffc
   811c0:	20072c98 	.word	0x20072c98

000811c4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   811c4:	f04f 30ff 	mov.w	r0, #4294967295
   811c8:	4770      	bx	lr

000811ca <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   811ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   811ce:	604b      	str	r3, [r1, #4]

	return 0;
}
   811d0:	2000      	movs	r0, #0
   811d2:	4770      	bx	lr

000811d4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   811d4:	2001      	movs	r0, #1
   811d6:	4770      	bx	lr

000811d8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   811d8:	2000      	movs	r0, #0
   811da:	4770      	bx	lr

000811dc <main>:
#include "Reglering/Reglering.h"
#include "encoderISR.h"
#include <asf.h>

int main (void)
{
   811dc:	b508      	push	{r3, lr}
	sysclk_init();
   811de:	4b0c      	ldr	r3, [pc, #48]	; (81210 <main+0x34>)
   811e0:	4798      	blx	r3
	board_init();
   811e2:	4b0c      	ldr	r3, [pc, #48]	; (81214 <main+0x38>)
   811e4:	4798      	blx	r3
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   811e6:	4b0c      	ldr	r3, [pc, #48]	; (81218 <main+0x3c>)
   811e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   811ec:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   811ee:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	ioport_set_pin_dir(PIO_PB25_IDX, IOPORT_DIR_OUTPUT);
	misc_init();
   811f2:	4b0a      	ldr	r3, [pc, #40]	; (8121c <main+0x40>)
   811f4:	4798      	blx	r3
	console_init();
   811f6:	4b0a      	ldr	r3, [pc, #40]	; (81220 <main+0x44>)
   811f8:	4798      	blx	r3
	//interrupt_init();		
	//rtos_init();
	encoder_init();
   811fa:	4b0a      	ldr	r3, [pc, #40]	; (81224 <main+0x48>)
   811fc:	4798      	blx	r3
	delay_us(3000000);
   811fe:	480a      	ldr	r0, [pc, #40]	; (81228 <main+0x4c>)
   81200:	4b0a      	ldr	r3, [pc, #40]	; (8122c <main+0x50>)
   81202:	4798      	blx	r3
	controlCenter(50);
   81204:	2032      	movs	r0, #50	; 0x32
   81206:	4b0a      	ldr	r3, [pc, #40]	; (81230 <main+0x54>)
   81208:	4798      	blx	r3
   8120a:	2000      	movs	r0, #0
   8120c:	bd08      	pop	{r3, pc}
   8120e:	bf00      	nop
   81210:	00080a6d 	.word	0x00080a6d
   81214:	00080ad1 	.word	0x00080ad1
   81218:	400e1000 	.word	0x400e1000
   8121c:	0008068d 	.word	0x0008068d
   81220:	0008070d 	.word	0x0008070d
   81224:	00080201 	.word	0x00080201
   81228:	0112a880 	.word	0x0112a880
   8122c:	20070001 	.word	0x20070001
   81230:	000803b1 	.word	0x000803b1

00081234 <__aeabi_drsub>:
   81234:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   81238:	e002      	b.n	81240 <__adddf3>
   8123a:	bf00      	nop

0008123c <__aeabi_dsub>:
   8123c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00081240 <__adddf3>:
   81240:	b530      	push	{r4, r5, lr}
   81242:	ea4f 0441 	mov.w	r4, r1, lsl #1
   81246:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8124a:	ea94 0f05 	teq	r4, r5
   8124e:	bf08      	it	eq
   81250:	ea90 0f02 	teqeq	r0, r2
   81254:	bf1f      	itttt	ne
   81256:	ea54 0c00 	orrsne.w	ip, r4, r0
   8125a:	ea55 0c02 	orrsne.w	ip, r5, r2
   8125e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   81262:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81266:	f000 80e2 	beq.w	8142e <__adddf3+0x1ee>
   8126a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8126e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   81272:	bfb8      	it	lt
   81274:	426d      	neglt	r5, r5
   81276:	dd0c      	ble.n	81292 <__adddf3+0x52>
   81278:	442c      	add	r4, r5
   8127a:	ea80 0202 	eor.w	r2, r0, r2
   8127e:	ea81 0303 	eor.w	r3, r1, r3
   81282:	ea82 0000 	eor.w	r0, r2, r0
   81286:	ea83 0101 	eor.w	r1, r3, r1
   8128a:	ea80 0202 	eor.w	r2, r0, r2
   8128e:	ea81 0303 	eor.w	r3, r1, r3
   81292:	2d36      	cmp	r5, #54	; 0x36
   81294:	bf88      	it	hi
   81296:	bd30      	pophi	{r4, r5, pc}
   81298:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8129c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   812a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   812a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   812a8:	d002      	beq.n	812b0 <__adddf3+0x70>
   812aa:	4240      	negs	r0, r0
   812ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   812b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   812b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   812b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   812bc:	d002      	beq.n	812c4 <__adddf3+0x84>
   812be:	4252      	negs	r2, r2
   812c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   812c4:	ea94 0f05 	teq	r4, r5
   812c8:	f000 80a7 	beq.w	8141a <__adddf3+0x1da>
   812cc:	f1a4 0401 	sub.w	r4, r4, #1
   812d0:	f1d5 0e20 	rsbs	lr, r5, #32
   812d4:	db0d      	blt.n	812f2 <__adddf3+0xb2>
   812d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   812da:	fa22 f205 	lsr.w	r2, r2, r5
   812de:	1880      	adds	r0, r0, r2
   812e0:	f141 0100 	adc.w	r1, r1, #0
   812e4:	fa03 f20e 	lsl.w	r2, r3, lr
   812e8:	1880      	adds	r0, r0, r2
   812ea:	fa43 f305 	asr.w	r3, r3, r5
   812ee:	4159      	adcs	r1, r3
   812f0:	e00e      	b.n	81310 <__adddf3+0xd0>
   812f2:	f1a5 0520 	sub.w	r5, r5, #32
   812f6:	f10e 0e20 	add.w	lr, lr, #32
   812fa:	2a01      	cmp	r2, #1
   812fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   81300:	bf28      	it	cs
   81302:	f04c 0c02 	orrcs.w	ip, ip, #2
   81306:	fa43 f305 	asr.w	r3, r3, r5
   8130a:	18c0      	adds	r0, r0, r3
   8130c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   81310:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81314:	d507      	bpl.n	81326 <__adddf3+0xe6>
   81316:	f04f 0e00 	mov.w	lr, #0
   8131a:	f1dc 0c00 	rsbs	ip, ip, #0
   8131e:	eb7e 0000 	sbcs.w	r0, lr, r0
   81322:	eb6e 0101 	sbc.w	r1, lr, r1
   81326:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8132a:	d31b      	bcc.n	81364 <__adddf3+0x124>
   8132c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   81330:	d30c      	bcc.n	8134c <__adddf3+0x10c>
   81332:	0849      	lsrs	r1, r1, #1
   81334:	ea5f 0030 	movs.w	r0, r0, rrx
   81338:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8133c:	f104 0401 	add.w	r4, r4, #1
   81340:	ea4f 5244 	mov.w	r2, r4, lsl #21
   81344:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   81348:	f080 809a 	bcs.w	81480 <__adddf3+0x240>
   8134c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   81350:	bf08      	it	eq
   81352:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81356:	f150 0000 	adcs.w	r0, r0, #0
   8135a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8135e:	ea41 0105 	orr.w	r1, r1, r5
   81362:	bd30      	pop	{r4, r5, pc}
   81364:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   81368:	4140      	adcs	r0, r0
   8136a:	eb41 0101 	adc.w	r1, r1, r1
   8136e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81372:	f1a4 0401 	sub.w	r4, r4, #1
   81376:	d1e9      	bne.n	8134c <__adddf3+0x10c>
   81378:	f091 0f00 	teq	r1, #0
   8137c:	bf04      	itt	eq
   8137e:	4601      	moveq	r1, r0
   81380:	2000      	moveq	r0, #0
   81382:	fab1 f381 	clz	r3, r1
   81386:	bf08      	it	eq
   81388:	3320      	addeq	r3, #32
   8138a:	f1a3 030b 	sub.w	r3, r3, #11
   8138e:	f1b3 0220 	subs.w	r2, r3, #32
   81392:	da0c      	bge.n	813ae <__adddf3+0x16e>
   81394:	320c      	adds	r2, #12
   81396:	dd08      	ble.n	813aa <__adddf3+0x16a>
   81398:	f102 0c14 	add.w	ip, r2, #20
   8139c:	f1c2 020c 	rsb	r2, r2, #12
   813a0:	fa01 f00c 	lsl.w	r0, r1, ip
   813a4:	fa21 f102 	lsr.w	r1, r1, r2
   813a8:	e00c      	b.n	813c4 <__adddf3+0x184>
   813aa:	f102 0214 	add.w	r2, r2, #20
   813ae:	bfd8      	it	le
   813b0:	f1c2 0c20 	rsble	ip, r2, #32
   813b4:	fa01 f102 	lsl.w	r1, r1, r2
   813b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   813bc:	bfdc      	itt	le
   813be:	ea41 010c 	orrle.w	r1, r1, ip
   813c2:	4090      	lslle	r0, r2
   813c4:	1ae4      	subs	r4, r4, r3
   813c6:	bfa2      	ittt	ge
   813c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   813cc:	4329      	orrge	r1, r5
   813ce:	bd30      	popge	{r4, r5, pc}
   813d0:	ea6f 0404 	mvn.w	r4, r4
   813d4:	3c1f      	subs	r4, #31
   813d6:	da1c      	bge.n	81412 <__adddf3+0x1d2>
   813d8:	340c      	adds	r4, #12
   813da:	dc0e      	bgt.n	813fa <__adddf3+0x1ba>
   813dc:	f104 0414 	add.w	r4, r4, #20
   813e0:	f1c4 0220 	rsb	r2, r4, #32
   813e4:	fa20 f004 	lsr.w	r0, r0, r4
   813e8:	fa01 f302 	lsl.w	r3, r1, r2
   813ec:	ea40 0003 	orr.w	r0, r0, r3
   813f0:	fa21 f304 	lsr.w	r3, r1, r4
   813f4:	ea45 0103 	orr.w	r1, r5, r3
   813f8:	bd30      	pop	{r4, r5, pc}
   813fa:	f1c4 040c 	rsb	r4, r4, #12
   813fe:	f1c4 0220 	rsb	r2, r4, #32
   81402:	fa20 f002 	lsr.w	r0, r0, r2
   81406:	fa01 f304 	lsl.w	r3, r1, r4
   8140a:	ea40 0003 	orr.w	r0, r0, r3
   8140e:	4629      	mov	r1, r5
   81410:	bd30      	pop	{r4, r5, pc}
   81412:	fa21 f004 	lsr.w	r0, r1, r4
   81416:	4629      	mov	r1, r5
   81418:	bd30      	pop	{r4, r5, pc}
   8141a:	f094 0f00 	teq	r4, #0
   8141e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   81422:	bf06      	itte	eq
   81424:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   81428:	3401      	addeq	r4, #1
   8142a:	3d01      	subne	r5, #1
   8142c:	e74e      	b.n	812cc <__adddf3+0x8c>
   8142e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81432:	bf18      	it	ne
   81434:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   81438:	d029      	beq.n	8148e <__adddf3+0x24e>
   8143a:	ea94 0f05 	teq	r4, r5
   8143e:	bf08      	it	eq
   81440:	ea90 0f02 	teqeq	r0, r2
   81444:	d005      	beq.n	81452 <__adddf3+0x212>
   81446:	ea54 0c00 	orrs.w	ip, r4, r0
   8144a:	bf04      	itt	eq
   8144c:	4619      	moveq	r1, r3
   8144e:	4610      	moveq	r0, r2
   81450:	bd30      	pop	{r4, r5, pc}
   81452:	ea91 0f03 	teq	r1, r3
   81456:	bf1e      	ittt	ne
   81458:	2100      	movne	r1, #0
   8145a:	2000      	movne	r0, #0
   8145c:	bd30      	popne	{r4, r5, pc}
   8145e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   81462:	d105      	bne.n	81470 <__adddf3+0x230>
   81464:	0040      	lsls	r0, r0, #1
   81466:	4149      	adcs	r1, r1
   81468:	bf28      	it	cs
   8146a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8146e:	bd30      	pop	{r4, r5, pc}
   81470:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   81474:	bf3c      	itt	cc
   81476:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8147a:	bd30      	popcc	{r4, r5, pc}
   8147c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81480:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   81484:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   81488:	f04f 0000 	mov.w	r0, #0
   8148c:	bd30      	pop	{r4, r5, pc}
   8148e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   81492:	bf1a      	itte	ne
   81494:	4619      	movne	r1, r3
   81496:	4610      	movne	r0, r2
   81498:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8149c:	bf1c      	itt	ne
   8149e:	460b      	movne	r3, r1
   814a0:	4602      	movne	r2, r0
   814a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   814a6:	bf06      	itte	eq
   814a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   814ac:	ea91 0f03 	teqeq	r1, r3
   814b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   814b4:	bd30      	pop	{r4, r5, pc}
   814b6:	bf00      	nop

000814b8 <__aeabi_ui2d>:
   814b8:	f090 0f00 	teq	r0, #0
   814bc:	bf04      	itt	eq
   814be:	2100      	moveq	r1, #0
   814c0:	4770      	bxeq	lr
   814c2:	b530      	push	{r4, r5, lr}
   814c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   814c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   814cc:	f04f 0500 	mov.w	r5, #0
   814d0:	f04f 0100 	mov.w	r1, #0
   814d4:	e750      	b.n	81378 <__adddf3+0x138>
   814d6:	bf00      	nop

000814d8 <__aeabi_i2d>:
   814d8:	f090 0f00 	teq	r0, #0
   814dc:	bf04      	itt	eq
   814de:	2100      	moveq	r1, #0
   814e0:	4770      	bxeq	lr
   814e2:	b530      	push	{r4, r5, lr}
   814e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   814e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   814ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   814f0:	bf48      	it	mi
   814f2:	4240      	negmi	r0, r0
   814f4:	f04f 0100 	mov.w	r1, #0
   814f8:	e73e      	b.n	81378 <__adddf3+0x138>
   814fa:	bf00      	nop

000814fc <__aeabi_f2d>:
   814fc:	0042      	lsls	r2, r0, #1
   814fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   81502:	ea4f 0131 	mov.w	r1, r1, rrx
   81506:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8150a:	bf1f      	itttt	ne
   8150c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   81510:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81514:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   81518:	4770      	bxne	lr
   8151a:	f092 0f00 	teq	r2, #0
   8151e:	bf14      	ite	ne
   81520:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   81524:	4770      	bxeq	lr
   81526:	b530      	push	{r4, r5, lr}
   81528:	f44f 7460 	mov.w	r4, #896	; 0x380
   8152c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   81530:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   81534:	e720      	b.n	81378 <__adddf3+0x138>
   81536:	bf00      	nop

00081538 <__aeabi_ul2d>:
   81538:	ea50 0201 	orrs.w	r2, r0, r1
   8153c:	bf08      	it	eq
   8153e:	4770      	bxeq	lr
   81540:	b530      	push	{r4, r5, lr}
   81542:	f04f 0500 	mov.w	r5, #0
   81546:	e00a      	b.n	8155e <__aeabi_l2d+0x16>

00081548 <__aeabi_l2d>:
   81548:	ea50 0201 	orrs.w	r2, r0, r1
   8154c:	bf08      	it	eq
   8154e:	4770      	bxeq	lr
   81550:	b530      	push	{r4, r5, lr}
   81552:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   81556:	d502      	bpl.n	8155e <__aeabi_l2d+0x16>
   81558:	4240      	negs	r0, r0
   8155a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8155e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   81562:	f104 0432 	add.w	r4, r4, #50	; 0x32
   81566:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8156a:	f43f aedc 	beq.w	81326 <__adddf3+0xe6>
   8156e:	f04f 0203 	mov.w	r2, #3
   81572:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   81576:	bf18      	it	ne
   81578:	3203      	addne	r2, #3
   8157a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8157e:	bf18      	it	ne
   81580:	3203      	addne	r2, #3
   81582:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   81586:	f1c2 0320 	rsb	r3, r2, #32
   8158a:	fa00 fc03 	lsl.w	ip, r0, r3
   8158e:	fa20 f002 	lsr.w	r0, r0, r2
   81592:	fa01 fe03 	lsl.w	lr, r1, r3
   81596:	ea40 000e 	orr.w	r0, r0, lr
   8159a:	fa21 f102 	lsr.w	r1, r1, r2
   8159e:	4414      	add	r4, r2
   815a0:	e6c1      	b.n	81326 <__adddf3+0xe6>
   815a2:	bf00      	nop

000815a4 <__aeabi_dmul>:
   815a4:	b570      	push	{r4, r5, r6, lr}
   815a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   815aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   815ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   815b2:	bf1d      	ittte	ne
   815b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   815b8:	ea94 0f0c 	teqne	r4, ip
   815bc:	ea95 0f0c 	teqne	r5, ip
   815c0:	f000 f8de 	bleq	81780 <__aeabi_dmul+0x1dc>
   815c4:	442c      	add	r4, r5
   815c6:	ea81 0603 	eor.w	r6, r1, r3
   815ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   815ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   815d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   815d6:	bf18      	it	ne
   815d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   815dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   815e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   815e4:	d038      	beq.n	81658 <__aeabi_dmul+0xb4>
   815e6:	fba0 ce02 	umull	ip, lr, r0, r2
   815ea:	f04f 0500 	mov.w	r5, #0
   815ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   815f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   815f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   815fa:	f04f 0600 	mov.w	r6, #0
   815fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   81602:	f09c 0f00 	teq	ip, #0
   81606:	bf18      	it	ne
   81608:	f04e 0e01 	orrne.w	lr, lr, #1
   8160c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   81610:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   81614:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   81618:	d204      	bcs.n	81624 <__aeabi_dmul+0x80>
   8161a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8161e:	416d      	adcs	r5, r5
   81620:	eb46 0606 	adc.w	r6, r6, r6
   81624:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   81628:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8162c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   81630:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   81634:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   81638:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8163c:	bf88      	it	hi
   8163e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81642:	d81e      	bhi.n	81682 <__aeabi_dmul+0xde>
   81644:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   81648:	bf08      	it	eq
   8164a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8164e:	f150 0000 	adcs.w	r0, r0, #0
   81652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   81656:	bd70      	pop	{r4, r5, r6, pc}
   81658:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8165c:	ea46 0101 	orr.w	r1, r6, r1
   81660:	ea40 0002 	orr.w	r0, r0, r2
   81664:	ea81 0103 	eor.w	r1, r1, r3
   81668:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8166c:	bfc2      	ittt	gt
   8166e:	ebd4 050c 	rsbsgt	r5, r4, ip
   81672:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81676:	bd70      	popgt	{r4, r5, r6, pc}
   81678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8167c:	f04f 0e00 	mov.w	lr, #0
   81680:	3c01      	subs	r4, #1
   81682:	f300 80ab 	bgt.w	817dc <__aeabi_dmul+0x238>
   81686:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8168a:	bfde      	ittt	le
   8168c:	2000      	movle	r0, #0
   8168e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   81692:	bd70      	pople	{r4, r5, r6, pc}
   81694:	f1c4 0400 	rsb	r4, r4, #0
   81698:	3c20      	subs	r4, #32
   8169a:	da35      	bge.n	81708 <__aeabi_dmul+0x164>
   8169c:	340c      	adds	r4, #12
   8169e:	dc1b      	bgt.n	816d8 <__aeabi_dmul+0x134>
   816a0:	f104 0414 	add.w	r4, r4, #20
   816a4:	f1c4 0520 	rsb	r5, r4, #32
   816a8:	fa00 f305 	lsl.w	r3, r0, r5
   816ac:	fa20 f004 	lsr.w	r0, r0, r4
   816b0:	fa01 f205 	lsl.w	r2, r1, r5
   816b4:	ea40 0002 	orr.w	r0, r0, r2
   816b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   816bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   816c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   816c4:	fa21 f604 	lsr.w	r6, r1, r4
   816c8:	eb42 0106 	adc.w	r1, r2, r6
   816cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   816d0:	bf08      	it	eq
   816d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   816d6:	bd70      	pop	{r4, r5, r6, pc}
   816d8:	f1c4 040c 	rsb	r4, r4, #12
   816dc:	f1c4 0520 	rsb	r5, r4, #32
   816e0:	fa00 f304 	lsl.w	r3, r0, r4
   816e4:	fa20 f005 	lsr.w	r0, r0, r5
   816e8:	fa01 f204 	lsl.w	r2, r1, r4
   816ec:	ea40 0002 	orr.w	r0, r0, r2
   816f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   816f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   816f8:	f141 0100 	adc.w	r1, r1, #0
   816fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81700:	bf08      	it	eq
   81702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   81706:	bd70      	pop	{r4, r5, r6, pc}
   81708:	f1c4 0520 	rsb	r5, r4, #32
   8170c:	fa00 f205 	lsl.w	r2, r0, r5
   81710:	ea4e 0e02 	orr.w	lr, lr, r2
   81714:	fa20 f304 	lsr.w	r3, r0, r4
   81718:	fa01 f205 	lsl.w	r2, r1, r5
   8171c:	ea43 0302 	orr.w	r3, r3, r2
   81720:	fa21 f004 	lsr.w	r0, r1, r4
   81724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   81728:	fa21 f204 	lsr.w	r2, r1, r4
   8172c:	ea20 0002 	bic.w	r0, r0, r2
   81730:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   81734:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   81738:	bf08      	it	eq
   8173a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8173e:	bd70      	pop	{r4, r5, r6, pc}
   81740:	f094 0f00 	teq	r4, #0
   81744:	d10f      	bne.n	81766 <__aeabi_dmul+0x1c2>
   81746:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8174a:	0040      	lsls	r0, r0, #1
   8174c:	eb41 0101 	adc.w	r1, r1, r1
   81750:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81754:	bf08      	it	eq
   81756:	3c01      	subeq	r4, #1
   81758:	d0f7      	beq.n	8174a <__aeabi_dmul+0x1a6>
   8175a:	ea41 0106 	orr.w	r1, r1, r6
   8175e:	f095 0f00 	teq	r5, #0
   81762:	bf18      	it	ne
   81764:	4770      	bxne	lr
   81766:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8176a:	0052      	lsls	r2, r2, #1
   8176c:	eb43 0303 	adc.w	r3, r3, r3
   81770:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   81774:	bf08      	it	eq
   81776:	3d01      	subeq	r5, #1
   81778:	d0f7      	beq.n	8176a <__aeabi_dmul+0x1c6>
   8177a:	ea43 0306 	orr.w	r3, r3, r6
   8177e:	4770      	bx	lr
   81780:	ea94 0f0c 	teq	r4, ip
   81784:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   81788:	bf18      	it	ne
   8178a:	ea95 0f0c 	teqne	r5, ip
   8178e:	d00c      	beq.n	817aa <__aeabi_dmul+0x206>
   81790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   81794:	bf18      	it	ne
   81796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8179a:	d1d1      	bne.n	81740 <__aeabi_dmul+0x19c>
   8179c:	ea81 0103 	eor.w	r1, r1, r3
   817a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817a4:	f04f 0000 	mov.w	r0, #0
   817a8:	bd70      	pop	{r4, r5, r6, pc}
   817aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   817ae:	bf06      	itte	eq
   817b0:	4610      	moveq	r0, r2
   817b2:	4619      	moveq	r1, r3
   817b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   817b8:	d019      	beq.n	817ee <__aeabi_dmul+0x24a>
   817ba:	ea94 0f0c 	teq	r4, ip
   817be:	d102      	bne.n	817c6 <__aeabi_dmul+0x222>
   817c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   817c4:	d113      	bne.n	817ee <__aeabi_dmul+0x24a>
   817c6:	ea95 0f0c 	teq	r5, ip
   817ca:	d105      	bne.n	817d8 <__aeabi_dmul+0x234>
   817cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   817d0:	bf1c      	itt	ne
   817d2:	4610      	movne	r0, r2
   817d4:	4619      	movne	r1, r3
   817d6:	d10a      	bne.n	817ee <__aeabi_dmul+0x24a>
   817d8:	ea81 0103 	eor.w	r1, r1, r3
   817dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   817e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   817e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   817e8:	f04f 0000 	mov.w	r0, #0
   817ec:	bd70      	pop	{r4, r5, r6, pc}
   817ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   817f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   817f6:	bd70      	pop	{r4, r5, r6, pc}

000817f8 <__aeabi_ddiv>:
   817f8:	b570      	push	{r4, r5, r6, lr}
   817fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   817fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   81802:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   81806:	bf1d      	ittte	ne
   81808:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8180c:	ea94 0f0c 	teqne	r4, ip
   81810:	ea95 0f0c 	teqne	r5, ip
   81814:	f000 f8a7 	bleq	81966 <__aeabi_ddiv+0x16e>
   81818:	eba4 0405 	sub.w	r4, r4, r5
   8181c:	ea81 0e03 	eor.w	lr, r1, r3
   81820:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   81824:	ea4f 3101 	mov.w	r1, r1, lsl #12
   81828:	f000 8088 	beq.w	8193c <__aeabi_ddiv+0x144>
   8182c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   81830:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   81834:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   81838:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8183c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   81840:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   81844:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   81848:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8184c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   81850:	429d      	cmp	r5, r3
   81852:	bf08      	it	eq
   81854:	4296      	cmpeq	r6, r2
   81856:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8185a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8185e:	d202      	bcs.n	81866 <__aeabi_ddiv+0x6e>
   81860:	085b      	lsrs	r3, r3, #1
   81862:	ea4f 0232 	mov.w	r2, r2, rrx
   81866:	1ab6      	subs	r6, r6, r2
   81868:	eb65 0503 	sbc.w	r5, r5, r3
   8186c:	085b      	lsrs	r3, r3, #1
   8186e:	ea4f 0232 	mov.w	r2, r2, rrx
   81872:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   81876:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8187a:	ebb6 0e02 	subs.w	lr, r6, r2
   8187e:	eb75 0e03 	sbcs.w	lr, r5, r3
   81882:	bf22      	ittt	cs
   81884:	1ab6      	subcs	r6, r6, r2
   81886:	4675      	movcs	r5, lr
   81888:	ea40 000c 	orrcs.w	r0, r0, ip
   8188c:	085b      	lsrs	r3, r3, #1
   8188e:	ea4f 0232 	mov.w	r2, r2, rrx
   81892:	ebb6 0e02 	subs.w	lr, r6, r2
   81896:	eb75 0e03 	sbcs.w	lr, r5, r3
   8189a:	bf22      	ittt	cs
   8189c:	1ab6      	subcs	r6, r6, r2
   8189e:	4675      	movcs	r5, lr
   818a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   818a4:	085b      	lsrs	r3, r3, #1
   818a6:	ea4f 0232 	mov.w	r2, r2, rrx
   818aa:	ebb6 0e02 	subs.w	lr, r6, r2
   818ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   818b2:	bf22      	ittt	cs
   818b4:	1ab6      	subcs	r6, r6, r2
   818b6:	4675      	movcs	r5, lr
   818b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   818bc:	085b      	lsrs	r3, r3, #1
   818be:	ea4f 0232 	mov.w	r2, r2, rrx
   818c2:	ebb6 0e02 	subs.w	lr, r6, r2
   818c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   818ca:	bf22      	ittt	cs
   818cc:	1ab6      	subcs	r6, r6, r2
   818ce:	4675      	movcs	r5, lr
   818d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   818d4:	ea55 0e06 	orrs.w	lr, r5, r6
   818d8:	d018      	beq.n	8190c <__aeabi_ddiv+0x114>
   818da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   818de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   818e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   818e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   818ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   818ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   818f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   818f6:	d1c0      	bne.n	8187a <__aeabi_ddiv+0x82>
   818f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   818fc:	d10b      	bne.n	81916 <__aeabi_ddiv+0x11e>
   818fe:	ea41 0100 	orr.w	r1, r1, r0
   81902:	f04f 0000 	mov.w	r0, #0
   81906:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8190a:	e7b6      	b.n	8187a <__aeabi_ddiv+0x82>
   8190c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   81910:	bf04      	itt	eq
   81912:	4301      	orreq	r1, r0
   81914:	2000      	moveq	r0, #0
   81916:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8191a:	bf88      	it	hi
   8191c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   81920:	f63f aeaf 	bhi.w	81682 <__aeabi_dmul+0xde>
   81924:	ebb5 0c03 	subs.w	ip, r5, r3
   81928:	bf04      	itt	eq
   8192a:	ebb6 0c02 	subseq.w	ip, r6, r2
   8192e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   81932:	f150 0000 	adcs.w	r0, r0, #0
   81936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8193a:	bd70      	pop	{r4, r5, r6, pc}
   8193c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   81940:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   81944:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   81948:	bfc2      	ittt	gt
   8194a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8194e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   81952:	bd70      	popgt	{r4, r5, r6, pc}
   81954:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   81958:	f04f 0e00 	mov.w	lr, #0
   8195c:	3c01      	subs	r4, #1
   8195e:	e690      	b.n	81682 <__aeabi_dmul+0xde>
   81960:	ea45 0e06 	orr.w	lr, r5, r6
   81964:	e68d      	b.n	81682 <__aeabi_dmul+0xde>
   81966:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8196a:	ea94 0f0c 	teq	r4, ip
   8196e:	bf08      	it	eq
   81970:	ea95 0f0c 	teqeq	r5, ip
   81974:	f43f af3b 	beq.w	817ee <__aeabi_dmul+0x24a>
   81978:	ea94 0f0c 	teq	r4, ip
   8197c:	d10a      	bne.n	81994 <__aeabi_ddiv+0x19c>
   8197e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   81982:	f47f af34 	bne.w	817ee <__aeabi_dmul+0x24a>
   81986:	ea95 0f0c 	teq	r5, ip
   8198a:	f47f af25 	bne.w	817d8 <__aeabi_dmul+0x234>
   8198e:	4610      	mov	r0, r2
   81990:	4619      	mov	r1, r3
   81992:	e72c      	b.n	817ee <__aeabi_dmul+0x24a>
   81994:	ea95 0f0c 	teq	r5, ip
   81998:	d106      	bne.n	819a8 <__aeabi_ddiv+0x1b0>
   8199a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8199e:	f43f aefd 	beq.w	8179c <__aeabi_dmul+0x1f8>
   819a2:	4610      	mov	r0, r2
   819a4:	4619      	mov	r1, r3
   819a6:	e722      	b.n	817ee <__aeabi_dmul+0x24a>
   819a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   819ac:	bf18      	it	ne
   819ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   819b2:	f47f aec5 	bne.w	81740 <__aeabi_dmul+0x19c>
   819b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   819ba:	f47f af0d 	bne.w	817d8 <__aeabi_dmul+0x234>
   819be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   819c2:	f47f aeeb 	bne.w	8179c <__aeabi_dmul+0x1f8>
   819c6:	e712      	b.n	817ee <__aeabi_dmul+0x24a>

000819c8 <__aeabi_d2iz>:
   819c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   819cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   819d0:	d215      	bcs.n	819fe <__aeabi_d2iz+0x36>
   819d2:	d511      	bpl.n	819f8 <__aeabi_d2iz+0x30>
   819d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   819d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   819dc:	d912      	bls.n	81a04 <__aeabi_d2iz+0x3c>
   819de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   819e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   819e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   819ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   819ee:	fa23 f002 	lsr.w	r0, r3, r2
   819f2:	bf18      	it	ne
   819f4:	4240      	negne	r0, r0
   819f6:	4770      	bx	lr
   819f8:	f04f 0000 	mov.w	r0, #0
   819fc:	4770      	bx	lr
   819fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   81a02:	d105      	bne.n	81a10 <__aeabi_d2iz+0x48>
   81a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   81a08:	bf08      	it	eq
   81a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   81a0e:	4770      	bx	lr
   81a10:	f04f 0000 	mov.w	r0, #0
   81a14:	4770      	bx	lr
   81a16:	bf00      	nop

00081a18 <__aeabi_uldivmod>:
   81a18:	b953      	cbnz	r3, 81a30 <__aeabi_uldivmod+0x18>
   81a1a:	b94a      	cbnz	r2, 81a30 <__aeabi_uldivmod+0x18>
   81a1c:	2900      	cmp	r1, #0
   81a1e:	bf08      	it	eq
   81a20:	2800      	cmpeq	r0, #0
   81a22:	bf1c      	itt	ne
   81a24:	f04f 31ff 	movne.w	r1, #4294967295
   81a28:	f04f 30ff 	movne.w	r0, #4294967295
   81a2c:	f000 b97a 	b.w	81d24 <__aeabi_idiv0>
   81a30:	f1ad 0c08 	sub.w	ip, sp, #8
   81a34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   81a38:	f000 f806 	bl	81a48 <__udivmoddi4>
   81a3c:	f8dd e004 	ldr.w	lr, [sp, #4]
   81a40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   81a44:	b004      	add	sp, #16
   81a46:	4770      	bx	lr

00081a48 <__udivmoddi4>:
   81a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81a4c:	468c      	mov	ip, r1
   81a4e:	460e      	mov	r6, r1
   81a50:	4604      	mov	r4, r0
   81a52:	9d08      	ldr	r5, [sp, #32]
   81a54:	2b00      	cmp	r3, #0
   81a56:	d150      	bne.n	81afa <__udivmoddi4+0xb2>
   81a58:	428a      	cmp	r2, r1
   81a5a:	4617      	mov	r7, r2
   81a5c:	d96c      	bls.n	81b38 <__udivmoddi4+0xf0>
   81a5e:	fab2 fe82 	clz	lr, r2
   81a62:	f1be 0f00 	cmp.w	lr, #0
   81a66:	d00b      	beq.n	81a80 <__udivmoddi4+0x38>
   81a68:	f1ce 0c20 	rsb	ip, lr, #32
   81a6c:	fa01 f60e 	lsl.w	r6, r1, lr
   81a70:	fa20 fc0c 	lsr.w	ip, r0, ip
   81a74:	fa02 f70e 	lsl.w	r7, r2, lr
   81a78:	ea4c 0c06 	orr.w	ip, ip, r6
   81a7c:	fa00 f40e 	lsl.w	r4, r0, lr
   81a80:	0c3a      	lsrs	r2, r7, #16
   81a82:	fbbc f9f2 	udiv	r9, ip, r2
   81a86:	b2bb      	uxth	r3, r7
   81a88:	fb02 cc19 	mls	ip, r2, r9, ip
   81a8c:	fb09 fa03 	mul.w	sl, r9, r3
   81a90:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81a94:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   81a98:	45b2      	cmp	sl, r6
   81a9a:	d90a      	bls.n	81ab2 <__udivmoddi4+0x6a>
   81a9c:	19f6      	adds	r6, r6, r7
   81a9e:	f109 31ff 	add.w	r1, r9, #4294967295
   81aa2:	f080 8125 	bcs.w	81cf0 <__udivmoddi4+0x2a8>
   81aa6:	45b2      	cmp	sl, r6
   81aa8:	f240 8122 	bls.w	81cf0 <__udivmoddi4+0x2a8>
   81aac:	f1a9 0902 	sub.w	r9, r9, #2
   81ab0:	443e      	add	r6, r7
   81ab2:	eba6 060a 	sub.w	r6, r6, sl
   81ab6:	fbb6 f0f2 	udiv	r0, r6, r2
   81aba:	fb02 6610 	mls	r6, r2, r0, r6
   81abe:	fb00 f303 	mul.w	r3, r0, r3
   81ac2:	b2a4      	uxth	r4, r4
   81ac4:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81ac8:	42a3      	cmp	r3, r4
   81aca:	d909      	bls.n	81ae0 <__udivmoddi4+0x98>
   81acc:	19e4      	adds	r4, r4, r7
   81ace:	f100 32ff 	add.w	r2, r0, #4294967295
   81ad2:	f080 810b 	bcs.w	81cec <__udivmoddi4+0x2a4>
   81ad6:	42a3      	cmp	r3, r4
   81ad8:	f240 8108 	bls.w	81cec <__udivmoddi4+0x2a4>
   81adc:	3802      	subs	r0, #2
   81ade:	443c      	add	r4, r7
   81ae0:	2100      	movs	r1, #0
   81ae2:	1ae4      	subs	r4, r4, r3
   81ae4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   81ae8:	2d00      	cmp	r5, #0
   81aea:	d062      	beq.n	81bb2 <__udivmoddi4+0x16a>
   81aec:	2300      	movs	r3, #0
   81aee:	fa24 f40e 	lsr.w	r4, r4, lr
   81af2:	602c      	str	r4, [r5, #0]
   81af4:	606b      	str	r3, [r5, #4]
   81af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81afa:	428b      	cmp	r3, r1
   81afc:	d907      	bls.n	81b0e <__udivmoddi4+0xc6>
   81afe:	2d00      	cmp	r5, #0
   81b00:	d055      	beq.n	81bae <__udivmoddi4+0x166>
   81b02:	2100      	movs	r1, #0
   81b04:	e885 0041 	stmia.w	r5, {r0, r6}
   81b08:	4608      	mov	r0, r1
   81b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b0e:	fab3 f183 	clz	r1, r3
   81b12:	2900      	cmp	r1, #0
   81b14:	f040 808f 	bne.w	81c36 <__udivmoddi4+0x1ee>
   81b18:	42b3      	cmp	r3, r6
   81b1a:	d302      	bcc.n	81b22 <__udivmoddi4+0xda>
   81b1c:	4282      	cmp	r2, r0
   81b1e:	f200 80fc 	bhi.w	81d1a <__udivmoddi4+0x2d2>
   81b22:	1a84      	subs	r4, r0, r2
   81b24:	eb66 0603 	sbc.w	r6, r6, r3
   81b28:	2001      	movs	r0, #1
   81b2a:	46b4      	mov	ip, r6
   81b2c:	2d00      	cmp	r5, #0
   81b2e:	d040      	beq.n	81bb2 <__udivmoddi4+0x16a>
   81b30:	e885 1010 	stmia.w	r5, {r4, ip}
   81b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81b38:	b912      	cbnz	r2, 81b40 <__udivmoddi4+0xf8>
   81b3a:	2701      	movs	r7, #1
   81b3c:	fbb7 f7f2 	udiv	r7, r7, r2
   81b40:	fab7 fe87 	clz	lr, r7
   81b44:	f1be 0f00 	cmp.w	lr, #0
   81b48:	d135      	bne.n	81bb6 <__udivmoddi4+0x16e>
   81b4a:	2101      	movs	r1, #1
   81b4c:	1bf6      	subs	r6, r6, r7
   81b4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   81b52:	fa1f f887 	uxth.w	r8, r7
   81b56:	fbb6 f2fc 	udiv	r2, r6, ip
   81b5a:	fb0c 6612 	mls	r6, ip, r2, r6
   81b5e:	fb08 f002 	mul.w	r0, r8, r2
   81b62:	0c23      	lsrs	r3, r4, #16
   81b64:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   81b68:	42b0      	cmp	r0, r6
   81b6a:	d907      	bls.n	81b7c <__udivmoddi4+0x134>
   81b6c:	19f6      	adds	r6, r6, r7
   81b6e:	f102 33ff 	add.w	r3, r2, #4294967295
   81b72:	d202      	bcs.n	81b7a <__udivmoddi4+0x132>
   81b74:	42b0      	cmp	r0, r6
   81b76:	f200 80d2 	bhi.w	81d1e <__udivmoddi4+0x2d6>
   81b7a:	461a      	mov	r2, r3
   81b7c:	1a36      	subs	r6, r6, r0
   81b7e:	fbb6 f0fc 	udiv	r0, r6, ip
   81b82:	fb0c 6610 	mls	r6, ip, r0, r6
   81b86:	fb08 f800 	mul.w	r8, r8, r0
   81b8a:	b2a3      	uxth	r3, r4
   81b8c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   81b90:	45a0      	cmp	r8, r4
   81b92:	d907      	bls.n	81ba4 <__udivmoddi4+0x15c>
   81b94:	19e4      	adds	r4, r4, r7
   81b96:	f100 33ff 	add.w	r3, r0, #4294967295
   81b9a:	d202      	bcs.n	81ba2 <__udivmoddi4+0x15a>
   81b9c:	45a0      	cmp	r8, r4
   81b9e:	f200 80b9 	bhi.w	81d14 <__udivmoddi4+0x2cc>
   81ba2:	4618      	mov	r0, r3
   81ba4:	eba4 0408 	sub.w	r4, r4, r8
   81ba8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   81bac:	e79c      	b.n	81ae8 <__udivmoddi4+0xa0>
   81bae:	4629      	mov	r1, r5
   81bb0:	4628      	mov	r0, r5
   81bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81bb6:	fa07 f70e 	lsl.w	r7, r7, lr
   81bba:	f1ce 0320 	rsb	r3, lr, #32
   81bbe:	fa26 f203 	lsr.w	r2, r6, r3
   81bc2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   81bc6:	fbb2 f1fc 	udiv	r1, r2, ip
   81bca:	fa1f f887 	uxth.w	r8, r7
   81bce:	fb0c 2211 	mls	r2, ip, r1, r2
   81bd2:	fa06 f60e 	lsl.w	r6, r6, lr
   81bd6:	fa20 f303 	lsr.w	r3, r0, r3
   81bda:	fb01 f908 	mul.w	r9, r1, r8
   81bde:	4333      	orrs	r3, r6
   81be0:	0c1e      	lsrs	r6, r3, #16
   81be2:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   81be6:	45b1      	cmp	r9, r6
   81be8:	fa00 f40e 	lsl.w	r4, r0, lr
   81bec:	d909      	bls.n	81c02 <__udivmoddi4+0x1ba>
   81bee:	19f6      	adds	r6, r6, r7
   81bf0:	f101 32ff 	add.w	r2, r1, #4294967295
   81bf4:	f080 808c 	bcs.w	81d10 <__udivmoddi4+0x2c8>
   81bf8:	45b1      	cmp	r9, r6
   81bfa:	f240 8089 	bls.w	81d10 <__udivmoddi4+0x2c8>
   81bfe:	3902      	subs	r1, #2
   81c00:	443e      	add	r6, r7
   81c02:	eba6 0609 	sub.w	r6, r6, r9
   81c06:	fbb6 f0fc 	udiv	r0, r6, ip
   81c0a:	fb0c 6210 	mls	r2, ip, r0, r6
   81c0e:	fb00 f908 	mul.w	r9, r0, r8
   81c12:	b29e      	uxth	r6, r3
   81c14:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   81c18:	45b1      	cmp	r9, r6
   81c1a:	d907      	bls.n	81c2c <__udivmoddi4+0x1e4>
   81c1c:	19f6      	adds	r6, r6, r7
   81c1e:	f100 33ff 	add.w	r3, r0, #4294967295
   81c22:	d271      	bcs.n	81d08 <__udivmoddi4+0x2c0>
   81c24:	45b1      	cmp	r9, r6
   81c26:	d96f      	bls.n	81d08 <__udivmoddi4+0x2c0>
   81c28:	3802      	subs	r0, #2
   81c2a:	443e      	add	r6, r7
   81c2c:	eba6 0609 	sub.w	r6, r6, r9
   81c30:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   81c34:	e78f      	b.n	81b56 <__udivmoddi4+0x10e>
   81c36:	f1c1 0720 	rsb	r7, r1, #32
   81c3a:	fa22 f807 	lsr.w	r8, r2, r7
   81c3e:	408b      	lsls	r3, r1
   81c40:	ea48 0303 	orr.w	r3, r8, r3
   81c44:	fa26 f407 	lsr.w	r4, r6, r7
   81c48:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   81c4c:	fbb4 f9fe 	udiv	r9, r4, lr
   81c50:	fa1f fc83 	uxth.w	ip, r3
   81c54:	fb0e 4419 	mls	r4, lr, r9, r4
   81c58:	408e      	lsls	r6, r1
   81c5a:	fa20 f807 	lsr.w	r8, r0, r7
   81c5e:	fb09 fa0c 	mul.w	sl, r9, ip
   81c62:	ea48 0806 	orr.w	r8, r8, r6
   81c66:	ea4f 4618 	mov.w	r6, r8, lsr #16
   81c6a:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   81c6e:	45a2      	cmp	sl, r4
   81c70:	fa02 f201 	lsl.w	r2, r2, r1
   81c74:	fa00 f601 	lsl.w	r6, r0, r1
   81c78:	d908      	bls.n	81c8c <__udivmoddi4+0x244>
   81c7a:	18e4      	adds	r4, r4, r3
   81c7c:	f109 30ff 	add.w	r0, r9, #4294967295
   81c80:	d244      	bcs.n	81d0c <__udivmoddi4+0x2c4>
   81c82:	45a2      	cmp	sl, r4
   81c84:	d942      	bls.n	81d0c <__udivmoddi4+0x2c4>
   81c86:	f1a9 0902 	sub.w	r9, r9, #2
   81c8a:	441c      	add	r4, r3
   81c8c:	eba4 040a 	sub.w	r4, r4, sl
   81c90:	fbb4 f0fe 	udiv	r0, r4, lr
   81c94:	fb0e 4410 	mls	r4, lr, r0, r4
   81c98:	fb00 fc0c 	mul.w	ip, r0, ip
   81c9c:	fa1f f888 	uxth.w	r8, r8
   81ca0:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   81ca4:	45a4      	cmp	ip, r4
   81ca6:	d907      	bls.n	81cb8 <__udivmoddi4+0x270>
   81ca8:	18e4      	adds	r4, r4, r3
   81caa:	f100 3eff 	add.w	lr, r0, #4294967295
   81cae:	d229      	bcs.n	81d04 <__udivmoddi4+0x2bc>
   81cb0:	45a4      	cmp	ip, r4
   81cb2:	d927      	bls.n	81d04 <__udivmoddi4+0x2bc>
   81cb4:	3802      	subs	r0, #2
   81cb6:	441c      	add	r4, r3
   81cb8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   81cbc:	fba0 8902 	umull	r8, r9, r0, r2
   81cc0:	eba4 0c0c 	sub.w	ip, r4, ip
   81cc4:	45cc      	cmp	ip, r9
   81cc6:	46c2      	mov	sl, r8
   81cc8:	46ce      	mov	lr, r9
   81cca:	d315      	bcc.n	81cf8 <__udivmoddi4+0x2b0>
   81ccc:	d012      	beq.n	81cf4 <__udivmoddi4+0x2ac>
   81cce:	b155      	cbz	r5, 81ce6 <__udivmoddi4+0x29e>
   81cd0:	ebb6 030a 	subs.w	r3, r6, sl
   81cd4:	eb6c 060e 	sbc.w	r6, ip, lr
   81cd8:	fa06 f707 	lsl.w	r7, r6, r7
   81cdc:	40cb      	lsrs	r3, r1
   81cde:	431f      	orrs	r7, r3
   81ce0:	40ce      	lsrs	r6, r1
   81ce2:	602f      	str	r7, [r5, #0]
   81ce4:	606e      	str	r6, [r5, #4]
   81ce6:	2100      	movs	r1, #0
   81ce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81cec:	4610      	mov	r0, r2
   81cee:	e6f7      	b.n	81ae0 <__udivmoddi4+0x98>
   81cf0:	4689      	mov	r9, r1
   81cf2:	e6de      	b.n	81ab2 <__udivmoddi4+0x6a>
   81cf4:	4546      	cmp	r6, r8
   81cf6:	d2ea      	bcs.n	81cce <__udivmoddi4+0x286>
   81cf8:	ebb8 0a02 	subs.w	sl, r8, r2
   81cfc:	eb69 0e03 	sbc.w	lr, r9, r3
   81d00:	3801      	subs	r0, #1
   81d02:	e7e4      	b.n	81cce <__udivmoddi4+0x286>
   81d04:	4670      	mov	r0, lr
   81d06:	e7d7      	b.n	81cb8 <__udivmoddi4+0x270>
   81d08:	4618      	mov	r0, r3
   81d0a:	e78f      	b.n	81c2c <__udivmoddi4+0x1e4>
   81d0c:	4681      	mov	r9, r0
   81d0e:	e7bd      	b.n	81c8c <__udivmoddi4+0x244>
   81d10:	4611      	mov	r1, r2
   81d12:	e776      	b.n	81c02 <__udivmoddi4+0x1ba>
   81d14:	3802      	subs	r0, #2
   81d16:	443c      	add	r4, r7
   81d18:	e744      	b.n	81ba4 <__udivmoddi4+0x15c>
   81d1a:	4608      	mov	r0, r1
   81d1c:	e706      	b.n	81b2c <__udivmoddi4+0xe4>
   81d1e:	3a02      	subs	r2, #2
   81d20:	443e      	add	r6, r7
   81d22:	e72b      	b.n	81b7c <__udivmoddi4+0x134>

00081d24 <__aeabi_idiv0>:
   81d24:	4770      	bx	lr
   81d26:	bf00      	nop

00081d28 <__libc_init_array>:
   81d28:	b570      	push	{r4, r5, r6, lr}
   81d2a:	4e0f      	ldr	r6, [pc, #60]	; (81d68 <__libc_init_array+0x40>)
   81d2c:	4d0f      	ldr	r5, [pc, #60]	; (81d6c <__libc_init_array+0x44>)
   81d2e:	1b76      	subs	r6, r6, r5
   81d30:	10b6      	asrs	r6, r6, #2
   81d32:	bf18      	it	ne
   81d34:	2400      	movne	r4, #0
   81d36:	d005      	beq.n	81d44 <__libc_init_array+0x1c>
   81d38:	3401      	adds	r4, #1
   81d3a:	f855 3b04 	ldr.w	r3, [r5], #4
   81d3e:	4798      	blx	r3
   81d40:	42a6      	cmp	r6, r4
   81d42:	d1f9      	bne.n	81d38 <__libc_init_array+0x10>
   81d44:	4e0a      	ldr	r6, [pc, #40]	; (81d70 <__libc_init_array+0x48>)
   81d46:	4d0b      	ldr	r5, [pc, #44]	; (81d74 <__libc_init_array+0x4c>)
   81d48:	f002 fe7a 	bl	84a40 <_init>
   81d4c:	1b76      	subs	r6, r6, r5
   81d4e:	10b6      	asrs	r6, r6, #2
   81d50:	bf18      	it	ne
   81d52:	2400      	movne	r4, #0
   81d54:	d006      	beq.n	81d64 <__libc_init_array+0x3c>
   81d56:	3401      	adds	r4, #1
   81d58:	f855 3b04 	ldr.w	r3, [r5], #4
   81d5c:	4798      	blx	r3
   81d5e:	42a6      	cmp	r6, r4
   81d60:	d1f9      	bne.n	81d56 <__libc_init_array+0x2e>
   81d62:	bd70      	pop	{r4, r5, r6, pc}
   81d64:	bd70      	pop	{r4, r5, r6, pc}
   81d66:	bf00      	nop
   81d68:	00084a4c 	.word	0x00084a4c
   81d6c:	00084a4c 	.word	0x00084a4c
   81d70:	00084a54 	.word	0x00084a54
   81d74:	00084a4c 	.word	0x00084a4c

00081d78 <iprintf>:
   81d78:	b40f      	push	{r0, r1, r2, r3}
   81d7a:	b510      	push	{r4, lr}
   81d7c:	4b07      	ldr	r3, [pc, #28]	; (81d9c <iprintf+0x24>)
   81d7e:	b082      	sub	sp, #8
   81d80:	ac04      	add	r4, sp, #16
   81d82:	f854 2b04 	ldr.w	r2, [r4], #4
   81d86:	6818      	ldr	r0, [r3, #0]
   81d88:	4623      	mov	r3, r4
   81d8a:	6881      	ldr	r1, [r0, #8]
   81d8c:	9401      	str	r4, [sp, #4]
   81d8e:	f000 fa09 	bl	821a4 <_vfiprintf_r>
   81d92:	b002      	add	sp, #8
   81d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81d98:	b004      	add	sp, #16
   81d9a:	4770      	bx	lr
   81d9c:	20070140 	.word	0x20070140

00081da0 <memcpy>:
   81da0:	4684      	mov	ip, r0
   81da2:	ea41 0300 	orr.w	r3, r1, r0
   81da6:	f013 0303 	ands.w	r3, r3, #3
   81daa:	d149      	bne.n	81e40 <memcpy+0xa0>
   81dac:	3a40      	subs	r2, #64	; 0x40
   81dae:	d323      	bcc.n	81df8 <memcpy+0x58>
   81db0:	680b      	ldr	r3, [r1, #0]
   81db2:	6003      	str	r3, [r0, #0]
   81db4:	684b      	ldr	r3, [r1, #4]
   81db6:	6043      	str	r3, [r0, #4]
   81db8:	688b      	ldr	r3, [r1, #8]
   81dba:	6083      	str	r3, [r0, #8]
   81dbc:	68cb      	ldr	r3, [r1, #12]
   81dbe:	60c3      	str	r3, [r0, #12]
   81dc0:	690b      	ldr	r3, [r1, #16]
   81dc2:	6103      	str	r3, [r0, #16]
   81dc4:	694b      	ldr	r3, [r1, #20]
   81dc6:	6143      	str	r3, [r0, #20]
   81dc8:	698b      	ldr	r3, [r1, #24]
   81dca:	6183      	str	r3, [r0, #24]
   81dcc:	69cb      	ldr	r3, [r1, #28]
   81dce:	61c3      	str	r3, [r0, #28]
   81dd0:	6a0b      	ldr	r3, [r1, #32]
   81dd2:	6203      	str	r3, [r0, #32]
   81dd4:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81dd6:	6243      	str	r3, [r0, #36]	; 0x24
   81dd8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   81dda:	6283      	str	r3, [r0, #40]	; 0x28
   81ddc:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   81dde:	62c3      	str	r3, [r0, #44]	; 0x2c
   81de0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81de2:	6303      	str	r3, [r0, #48]	; 0x30
   81de4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81de6:	6343      	str	r3, [r0, #52]	; 0x34
   81de8:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   81dea:	6383      	str	r3, [r0, #56]	; 0x38
   81dec:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   81dee:	63c3      	str	r3, [r0, #60]	; 0x3c
   81df0:	3040      	adds	r0, #64	; 0x40
   81df2:	3140      	adds	r1, #64	; 0x40
   81df4:	3a40      	subs	r2, #64	; 0x40
   81df6:	d2db      	bcs.n	81db0 <memcpy+0x10>
   81df8:	3230      	adds	r2, #48	; 0x30
   81dfa:	d30b      	bcc.n	81e14 <memcpy+0x74>
   81dfc:	680b      	ldr	r3, [r1, #0]
   81dfe:	6003      	str	r3, [r0, #0]
   81e00:	684b      	ldr	r3, [r1, #4]
   81e02:	6043      	str	r3, [r0, #4]
   81e04:	688b      	ldr	r3, [r1, #8]
   81e06:	6083      	str	r3, [r0, #8]
   81e08:	68cb      	ldr	r3, [r1, #12]
   81e0a:	60c3      	str	r3, [r0, #12]
   81e0c:	3010      	adds	r0, #16
   81e0e:	3110      	adds	r1, #16
   81e10:	3a10      	subs	r2, #16
   81e12:	d2f3      	bcs.n	81dfc <memcpy+0x5c>
   81e14:	320c      	adds	r2, #12
   81e16:	d305      	bcc.n	81e24 <memcpy+0x84>
   81e18:	f851 3b04 	ldr.w	r3, [r1], #4
   81e1c:	f840 3b04 	str.w	r3, [r0], #4
   81e20:	3a04      	subs	r2, #4
   81e22:	d2f9      	bcs.n	81e18 <memcpy+0x78>
   81e24:	3204      	adds	r2, #4
   81e26:	d008      	beq.n	81e3a <memcpy+0x9a>
   81e28:	07d2      	lsls	r2, r2, #31
   81e2a:	bf1c      	itt	ne
   81e2c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81e30:	f800 3b01 	strbne.w	r3, [r0], #1
   81e34:	d301      	bcc.n	81e3a <memcpy+0x9a>
   81e36:	880b      	ldrh	r3, [r1, #0]
   81e38:	8003      	strh	r3, [r0, #0]
   81e3a:	4660      	mov	r0, ip
   81e3c:	4770      	bx	lr
   81e3e:	bf00      	nop
   81e40:	2a08      	cmp	r2, #8
   81e42:	d313      	bcc.n	81e6c <memcpy+0xcc>
   81e44:	078b      	lsls	r3, r1, #30
   81e46:	d0b1      	beq.n	81dac <memcpy+0xc>
   81e48:	f010 0303 	ands.w	r3, r0, #3
   81e4c:	d0ae      	beq.n	81dac <memcpy+0xc>
   81e4e:	f1c3 0304 	rsb	r3, r3, #4
   81e52:	1ad2      	subs	r2, r2, r3
   81e54:	07db      	lsls	r3, r3, #31
   81e56:	bf1c      	itt	ne
   81e58:	f811 3b01 	ldrbne.w	r3, [r1], #1
   81e5c:	f800 3b01 	strbne.w	r3, [r0], #1
   81e60:	d3a4      	bcc.n	81dac <memcpy+0xc>
   81e62:	f831 3b02 	ldrh.w	r3, [r1], #2
   81e66:	f820 3b02 	strh.w	r3, [r0], #2
   81e6a:	e79f      	b.n	81dac <memcpy+0xc>
   81e6c:	3a04      	subs	r2, #4
   81e6e:	d3d9      	bcc.n	81e24 <memcpy+0x84>
   81e70:	3a01      	subs	r2, #1
   81e72:	f811 3b01 	ldrb.w	r3, [r1], #1
   81e76:	f800 3b01 	strb.w	r3, [r0], #1
   81e7a:	d2f9      	bcs.n	81e70 <memcpy+0xd0>
   81e7c:	780b      	ldrb	r3, [r1, #0]
   81e7e:	7003      	strb	r3, [r0, #0]
   81e80:	784b      	ldrb	r3, [r1, #1]
   81e82:	7043      	strb	r3, [r0, #1]
   81e84:	788b      	ldrb	r3, [r1, #2]
   81e86:	7083      	strb	r3, [r0, #2]
   81e88:	4660      	mov	r0, ip
   81e8a:	4770      	bx	lr

00081e8c <memset>:
   81e8c:	b470      	push	{r4, r5, r6}
   81e8e:	0786      	lsls	r6, r0, #30
   81e90:	d046      	beq.n	81f20 <memset+0x94>
   81e92:	1e54      	subs	r4, r2, #1
   81e94:	2a00      	cmp	r2, #0
   81e96:	d041      	beq.n	81f1c <memset+0x90>
   81e98:	b2ca      	uxtb	r2, r1
   81e9a:	4603      	mov	r3, r0
   81e9c:	e002      	b.n	81ea4 <memset+0x18>
   81e9e:	f114 34ff 	adds.w	r4, r4, #4294967295
   81ea2:	d33b      	bcc.n	81f1c <memset+0x90>
   81ea4:	f803 2b01 	strb.w	r2, [r3], #1
   81ea8:	079d      	lsls	r5, r3, #30
   81eaa:	d1f8      	bne.n	81e9e <memset+0x12>
   81eac:	2c03      	cmp	r4, #3
   81eae:	d92e      	bls.n	81f0e <memset+0x82>
   81eb0:	b2cd      	uxtb	r5, r1
   81eb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81eb6:	2c0f      	cmp	r4, #15
   81eb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   81ebc:	d919      	bls.n	81ef2 <memset+0x66>
   81ebe:	4626      	mov	r6, r4
   81ec0:	f103 0210 	add.w	r2, r3, #16
   81ec4:	3e10      	subs	r6, #16
   81ec6:	2e0f      	cmp	r6, #15
   81ec8:	f842 5c10 	str.w	r5, [r2, #-16]
   81ecc:	f842 5c0c 	str.w	r5, [r2, #-12]
   81ed0:	f842 5c08 	str.w	r5, [r2, #-8]
   81ed4:	f842 5c04 	str.w	r5, [r2, #-4]
   81ed8:	f102 0210 	add.w	r2, r2, #16
   81edc:	d8f2      	bhi.n	81ec4 <memset+0x38>
   81ede:	f1a4 0210 	sub.w	r2, r4, #16
   81ee2:	f022 020f 	bic.w	r2, r2, #15
   81ee6:	f004 040f 	and.w	r4, r4, #15
   81eea:	3210      	adds	r2, #16
   81eec:	2c03      	cmp	r4, #3
   81eee:	4413      	add	r3, r2
   81ef0:	d90d      	bls.n	81f0e <memset+0x82>
   81ef2:	461e      	mov	r6, r3
   81ef4:	4622      	mov	r2, r4
   81ef6:	3a04      	subs	r2, #4
   81ef8:	2a03      	cmp	r2, #3
   81efa:	f846 5b04 	str.w	r5, [r6], #4
   81efe:	d8fa      	bhi.n	81ef6 <memset+0x6a>
   81f00:	1f22      	subs	r2, r4, #4
   81f02:	f022 0203 	bic.w	r2, r2, #3
   81f06:	3204      	adds	r2, #4
   81f08:	4413      	add	r3, r2
   81f0a:	f004 0403 	and.w	r4, r4, #3
   81f0e:	b12c      	cbz	r4, 81f1c <memset+0x90>
   81f10:	b2c9      	uxtb	r1, r1
   81f12:	441c      	add	r4, r3
   81f14:	f803 1b01 	strb.w	r1, [r3], #1
   81f18:	429c      	cmp	r4, r3
   81f1a:	d1fb      	bne.n	81f14 <memset+0x88>
   81f1c:	bc70      	pop	{r4, r5, r6}
   81f1e:	4770      	bx	lr
   81f20:	4614      	mov	r4, r2
   81f22:	4603      	mov	r3, r0
   81f24:	e7c2      	b.n	81eac <memset+0x20>
   81f26:	bf00      	nop

00081f28 <setbuf>:
   81f28:	2900      	cmp	r1, #0
   81f2a:	bf0c      	ite	eq
   81f2c:	2202      	moveq	r2, #2
   81f2e:	2200      	movne	r2, #0
   81f30:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81f34:	f000 b800 	b.w	81f38 <setvbuf>

00081f38 <setvbuf>:
   81f38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   81f3c:	4d61      	ldr	r5, [pc, #388]	; (820c4 <setvbuf+0x18c>)
   81f3e:	b083      	sub	sp, #12
   81f40:	682d      	ldr	r5, [r5, #0]
   81f42:	4604      	mov	r4, r0
   81f44:	460f      	mov	r7, r1
   81f46:	4690      	mov	r8, r2
   81f48:	461e      	mov	r6, r3
   81f4a:	b115      	cbz	r5, 81f52 <setvbuf+0x1a>
   81f4c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81f4e:	2b00      	cmp	r3, #0
   81f50:	d064      	beq.n	8201c <setvbuf+0xe4>
   81f52:	f1b8 0f02 	cmp.w	r8, #2
   81f56:	d006      	beq.n	81f66 <setvbuf+0x2e>
   81f58:	f1b8 0f01 	cmp.w	r8, #1
   81f5c:	f200 809f 	bhi.w	8209e <setvbuf+0x166>
   81f60:	2e00      	cmp	r6, #0
   81f62:	f2c0 809c 	blt.w	8209e <setvbuf+0x166>
   81f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
   81f68:	07d8      	lsls	r0, r3, #31
   81f6a:	d534      	bpl.n	81fd6 <setvbuf+0x9e>
   81f6c:	4621      	mov	r1, r4
   81f6e:	4628      	mov	r0, r5
   81f70:	f001 f8b0 	bl	830d4 <_fflush_r>
   81f74:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81f76:	b141      	cbz	r1, 81f8a <setvbuf+0x52>
   81f78:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81f7c:	4299      	cmp	r1, r3
   81f7e:	d002      	beq.n	81f86 <setvbuf+0x4e>
   81f80:	4628      	mov	r0, r5
   81f82:	f001 fa25 	bl	833d0 <_free_r>
   81f86:	2300      	movs	r3, #0
   81f88:	6323      	str	r3, [r4, #48]	; 0x30
   81f8a:	2200      	movs	r2, #0
   81f8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81f90:	61a2      	str	r2, [r4, #24]
   81f92:	6062      	str	r2, [r4, #4]
   81f94:	061a      	lsls	r2, r3, #24
   81f96:	d43a      	bmi.n	8200e <setvbuf+0xd6>
   81f98:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81f9c:	f023 0303 	bic.w	r3, r3, #3
   81fa0:	f1b8 0f02 	cmp.w	r8, #2
   81fa4:	81a3      	strh	r3, [r4, #12]
   81fa6:	d01d      	beq.n	81fe4 <setvbuf+0xac>
   81fa8:	ab01      	add	r3, sp, #4
   81faa:	466a      	mov	r2, sp
   81fac:	4621      	mov	r1, r4
   81fae:	4628      	mov	r0, r5
   81fb0:	f001 fcac 	bl	8390c <__swhatbuf_r>
   81fb4:	89a3      	ldrh	r3, [r4, #12]
   81fb6:	4318      	orrs	r0, r3
   81fb8:	81a0      	strh	r0, [r4, #12]
   81fba:	2e00      	cmp	r6, #0
   81fbc:	d132      	bne.n	82024 <setvbuf+0xec>
   81fbe:	9e00      	ldr	r6, [sp, #0]
   81fc0:	4630      	mov	r0, r6
   81fc2:	f001 fd1b 	bl	839fc <malloc>
   81fc6:	4607      	mov	r7, r0
   81fc8:	2800      	cmp	r0, #0
   81fca:	d06b      	beq.n	820a4 <setvbuf+0x16c>
   81fcc:	89a3      	ldrh	r3, [r4, #12]
   81fce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81fd2:	81a3      	strh	r3, [r4, #12]
   81fd4:	e028      	b.n	82028 <setvbuf+0xf0>
   81fd6:	89a3      	ldrh	r3, [r4, #12]
   81fd8:	0599      	lsls	r1, r3, #22
   81fda:	d4c7      	bmi.n	81f6c <setvbuf+0x34>
   81fdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81fde:	f001 fc91 	bl	83904 <__retarget_lock_acquire_recursive>
   81fe2:	e7c3      	b.n	81f6c <setvbuf+0x34>
   81fe4:	2500      	movs	r5, #0
   81fe6:	2600      	movs	r6, #0
   81fe8:	2001      	movs	r0, #1
   81fea:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81fec:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81ff0:	f043 0302 	orr.w	r3, r3, #2
   81ff4:	60a6      	str	r6, [r4, #8]
   81ff6:	07ce      	lsls	r6, r1, #31
   81ff8:	81a3      	strh	r3, [r4, #12]
   81ffa:	6160      	str	r0, [r4, #20]
   81ffc:	6022      	str	r2, [r4, #0]
   81ffe:	6122      	str	r2, [r4, #16]
   82000:	d401      	bmi.n	82006 <setvbuf+0xce>
   82002:	0598      	lsls	r0, r3, #22
   82004:	d53e      	bpl.n	82084 <setvbuf+0x14c>
   82006:	4628      	mov	r0, r5
   82008:	b003      	add	sp, #12
   8200a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8200e:	6921      	ldr	r1, [r4, #16]
   82010:	4628      	mov	r0, r5
   82012:	f001 f9dd 	bl	833d0 <_free_r>
   82016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8201a:	e7bd      	b.n	81f98 <setvbuf+0x60>
   8201c:	4628      	mov	r0, r5
   8201e:	f001 f8b1 	bl	83184 <__sinit>
   82022:	e796      	b.n	81f52 <setvbuf+0x1a>
   82024:	2f00      	cmp	r7, #0
   82026:	d0cb      	beq.n	81fc0 <setvbuf+0x88>
   82028:	6bab      	ldr	r3, [r5, #56]	; 0x38
   8202a:	2b00      	cmp	r3, #0
   8202c:	d033      	beq.n	82096 <setvbuf+0x15e>
   8202e:	9b00      	ldr	r3, [sp, #0]
   82030:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82034:	429e      	cmp	r6, r3
   82036:	bf1c      	itt	ne
   82038:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   8203c:	81a2      	strhne	r2, [r4, #12]
   8203e:	f1b8 0f01 	cmp.w	r8, #1
   82042:	bf04      	itt	eq
   82044:	f042 0201 	orreq.w	r2, r2, #1
   82048:	81a2      	strheq	r2, [r4, #12]
   8204a:	b292      	uxth	r2, r2
   8204c:	f012 0308 	ands.w	r3, r2, #8
   82050:	6027      	str	r7, [r4, #0]
   82052:	6127      	str	r7, [r4, #16]
   82054:	6166      	str	r6, [r4, #20]
   82056:	d00e      	beq.n	82076 <setvbuf+0x13e>
   82058:	07d1      	lsls	r1, r2, #31
   8205a:	d51a      	bpl.n	82092 <setvbuf+0x15a>
   8205c:	2300      	movs	r3, #0
   8205e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82060:	4276      	negs	r6, r6
   82062:	f015 0501 	ands.w	r5, r5, #1
   82066:	61a6      	str	r6, [r4, #24]
   82068:	60a3      	str	r3, [r4, #8]
   8206a:	d009      	beq.n	82080 <setvbuf+0x148>
   8206c:	2500      	movs	r5, #0
   8206e:	4628      	mov	r0, r5
   82070:	b003      	add	sp, #12
   82072:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82076:	60a3      	str	r3, [r4, #8]
   82078:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8207a:	f015 0501 	ands.w	r5, r5, #1
   8207e:	d1f5      	bne.n	8206c <setvbuf+0x134>
   82080:	0593      	lsls	r3, r2, #22
   82082:	d4c0      	bmi.n	82006 <setvbuf+0xce>
   82084:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82086:	f001 fc3f 	bl	83908 <__retarget_lock_release_recursive>
   8208a:	4628      	mov	r0, r5
   8208c:	b003      	add	sp, #12
   8208e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82092:	60a6      	str	r6, [r4, #8]
   82094:	e7f0      	b.n	82078 <setvbuf+0x140>
   82096:	4628      	mov	r0, r5
   82098:	f001 f874 	bl	83184 <__sinit>
   8209c:	e7c7      	b.n	8202e <setvbuf+0xf6>
   8209e:	f04f 35ff 	mov.w	r5, #4294967295
   820a2:	e7b0      	b.n	82006 <setvbuf+0xce>
   820a4:	f8dd 9000 	ldr.w	r9, [sp]
   820a8:	45b1      	cmp	r9, r6
   820aa:	d004      	beq.n	820b6 <setvbuf+0x17e>
   820ac:	4648      	mov	r0, r9
   820ae:	f001 fca5 	bl	839fc <malloc>
   820b2:	4607      	mov	r7, r0
   820b4:	b920      	cbnz	r0, 820c0 <setvbuf+0x188>
   820b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   820ba:	f04f 35ff 	mov.w	r5, #4294967295
   820be:	e792      	b.n	81fe6 <setvbuf+0xae>
   820c0:	464e      	mov	r6, r9
   820c2:	e783      	b.n	81fcc <setvbuf+0x94>
   820c4:	20070140 	.word	0x20070140

000820c8 <strlen>:
   820c8:	f020 0103 	bic.w	r1, r0, #3
   820cc:	f010 0003 	ands.w	r0, r0, #3
   820d0:	f1c0 0000 	rsb	r0, r0, #0
   820d4:	f851 3b04 	ldr.w	r3, [r1], #4
   820d8:	f100 0c04 	add.w	ip, r0, #4
   820dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   820e0:	f06f 0200 	mvn.w	r2, #0
   820e4:	bf1c      	itt	ne
   820e6:	fa22 f20c 	lsrne.w	r2, r2, ip
   820ea:	4313      	orrne	r3, r2
   820ec:	f04f 0c01 	mov.w	ip, #1
   820f0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   820f4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   820f8:	eba3 020c 	sub.w	r2, r3, ip
   820fc:	ea22 0203 	bic.w	r2, r2, r3
   82100:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82104:	bf04      	itt	eq
   82106:	f851 3b04 	ldreq.w	r3, [r1], #4
   8210a:	3004      	addeq	r0, #4
   8210c:	d0f4      	beq.n	820f8 <strlen+0x30>
   8210e:	f1c2 0100 	rsb	r1, r2, #0
   82112:	ea02 0201 	and.w	r2, r2, r1
   82116:	fab2 f282 	clz	r2, r2
   8211a:	f1c2 021f 	rsb	r2, r2, #31
   8211e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82122:	4770      	bx	lr

00082124 <__sprint_r.part.0>:
   82124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82128:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8212a:	4693      	mov	fp, r2
   8212c:	049c      	lsls	r4, r3, #18
   8212e:	d52f      	bpl.n	82190 <__sprint_r.part.0+0x6c>
   82130:	6893      	ldr	r3, [r2, #8]
   82132:	6812      	ldr	r2, [r2, #0]
   82134:	b353      	cbz	r3, 8218c <__sprint_r.part.0+0x68>
   82136:	460e      	mov	r6, r1
   82138:	4607      	mov	r7, r0
   8213a:	f102 0908 	add.w	r9, r2, #8
   8213e:	e919 0420 	ldmdb	r9, {r5, sl}
   82142:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82146:	d017      	beq.n	82178 <__sprint_r.part.0+0x54>
   82148:	2400      	movs	r4, #0
   8214a:	3d04      	subs	r5, #4
   8214c:	e001      	b.n	82152 <__sprint_r.part.0+0x2e>
   8214e:	45a0      	cmp	r8, r4
   82150:	d010      	beq.n	82174 <__sprint_r.part.0+0x50>
   82152:	4632      	mov	r2, r6
   82154:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82158:	4638      	mov	r0, r7
   8215a:	f001 f8b5 	bl	832c8 <_fputwc_r>
   8215e:	1c43      	adds	r3, r0, #1
   82160:	f104 0401 	add.w	r4, r4, #1
   82164:	d1f3      	bne.n	8214e <__sprint_r.part.0+0x2a>
   82166:	2300      	movs	r3, #0
   82168:	f8cb 3008 	str.w	r3, [fp, #8]
   8216c:	f8cb 3004 	str.w	r3, [fp, #4]
   82170:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82174:	f8db 3008 	ldr.w	r3, [fp, #8]
   82178:	f02a 0a03 	bic.w	sl, sl, #3
   8217c:	eba3 030a 	sub.w	r3, r3, sl
   82180:	f8cb 3008 	str.w	r3, [fp, #8]
   82184:	f109 0908 	add.w	r9, r9, #8
   82188:	2b00      	cmp	r3, #0
   8218a:	d1d8      	bne.n	8213e <__sprint_r.part.0+0x1a>
   8218c:	2000      	movs	r0, #0
   8218e:	e7ea      	b.n	82166 <__sprint_r.part.0+0x42>
   82190:	f001 fa04 	bl	8359c <__sfvwrite_r>
   82194:	2300      	movs	r3, #0
   82196:	f8cb 3008 	str.w	r3, [fp, #8]
   8219a:	f8cb 3004 	str.w	r3, [fp, #4]
   8219e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821a2:	bf00      	nop

000821a4 <_vfiprintf_r>:
   821a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821a8:	b0ad      	sub	sp, #180	; 0xb4
   821aa:	461d      	mov	r5, r3
   821ac:	468b      	mov	fp, r1
   821ae:	4690      	mov	r8, r2
   821b0:	9307      	str	r3, [sp, #28]
   821b2:	9006      	str	r0, [sp, #24]
   821b4:	b118      	cbz	r0, 821be <_vfiprintf_r+0x1a>
   821b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
   821b8:	2b00      	cmp	r3, #0
   821ba:	f000 80f3 	beq.w	823a4 <_vfiprintf_r+0x200>
   821be:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   821c2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   821c6:	07df      	lsls	r7, r3, #31
   821c8:	b281      	uxth	r1, r0
   821ca:	d402      	bmi.n	821d2 <_vfiprintf_r+0x2e>
   821cc:	058e      	lsls	r6, r1, #22
   821ce:	f140 80fc 	bpl.w	823ca <_vfiprintf_r+0x226>
   821d2:	048c      	lsls	r4, r1, #18
   821d4:	d40a      	bmi.n	821ec <_vfiprintf_r+0x48>
   821d6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   821da:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   821de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   821e2:	f8ab 100c 	strh.w	r1, [fp, #12]
   821e6:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   821ea:	b289      	uxth	r1, r1
   821ec:	0708      	lsls	r0, r1, #28
   821ee:	f140 80b3 	bpl.w	82358 <_vfiprintf_r+0x1b4>
   821f2:	f8db 3010 	ldr.w	r3, [fp, #16]
   821f6:	2b00      	cmp	r3, #0
   821f8:	f000 80ae 	beq.w	82358 <_vfiprintf_r+0x1b4>
   821fc:	f001 031a 	and.w	r3, r1, #26
   82200:	2b0a      	cmp	r3, #10
   82202:	f000 80b5 	beq.w	82370 <_vfiprintf_r+0x1cc>
   82206:	2300      	movs	r3, #0
   82208:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   8220c:	46d1      	mov	r9, sl
   8220e:	930b      	str	r3, [sp, #44]	; 0x2c
   82210:	9303      	str	r3, [sp, #12]
   82212:	9311      	str	r3, [sp, #68]	; 0x44
   82214:	9310      	str	r3, [sp, #64]	; 0x40
   82216:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   8221a:	f8cd b010 	str.w	fp, [sp, #16]
   8221e:	f898 3000 	ldrb.w	r3, [r8]
   82222:	4644      	mov	r4, r8
   82224:	b1fb      	cbz	r3, 82266 <_vfiprintf_r+0xc2>
   82226:	2b25      	cmp	r3, #37	; 0x25
   82228:	d102      	bne.n	82230 <_vfiprintf_r+0x8c>
   8222a:	e01c      	b.n	82266 <_vfiprintf_r+0xc2>
   8222c:	2b25      	cmp	r3, #37	; 0x25
   8222e:	d003      	beq.n	82238 <_vfiprintf_r+0x94>
   82230:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82234:	2b00      	cmp	r3, #0
   82236:	d1f9      	bne.n	8222c <_vfiprintf_r+0x88>
   82238:	eba4 0508 	sub.w	r5, r4, r8
   8223c:	b19d      	cbz	r5, 82266 <_vfiprintf_r+0xc2>
   8223e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82240:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82242:	3301      	adds	r3, #1
   82244:	442a      	add	r2, r5
   82246:	2b07      	cmp	r3, #7
   82248:	f8c9 8000 	str.w	r8, [r9]
   8224c:	f8c9 5004 	str.w	r5, [r9, #4]
   82250:	9211      	str	r2, [sp, #68]	; 0x44
   82252:	9310      	str	r3, [sp, #64]	; 0x40
   82254:	dd7a      	ble.n	8234c <_vfiprintf_r+0x1a8>
   82256:	2a00      	cmp	r2, #0
   82258:	f040 84b5 	bne.w	82bc6 <_vfiprintf_r+0xa22>
   8225c:	46d1      	mov	r9, sl
   8225e:	9b03      	ldr	r3, [sp, #12]
   82260:	9210      	str	r2, [sp, #64]	; 0x40
   82262:	442b      	add	r3, r5
   82264:	9303      	str	r3, [sp, #12]
   82266:	7823      	ldrb	r3, [r4, #0]
   82268:	2b00      	cmp	r3, #0
   8226a:	f000 83e5 	beq.w	82a38 <_vfiprintf_r+0x894>
   8226e:	2000      	movs	r0, #0
   82270:	f04f 0300 	mov.w	r3, #0
   82274:	f104 0801 	add.w	r8, r4, #1
   82278:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   8227c:	7862      	ldrb	r2, [r4, #1]
   8227e:	4606      	mov	r6, r0
   82280:	4605      	mov	r5, r0
   82282:	4603      	mov	r3, r0
   82284:	f04f 34ff 	mov.w	r4, #4294967295
   82288:	f108 0801 	add.w	r8, r8, #1
   8228c:	f1a2 0120 	sub.w	r1, r2, #32
   82290:	2958      	cmp	r1, #88	; 0x58
   82292:	f200 82d9 	bhi.w	82848 <_vfiprintf_r+0x6a4>
   82296:	e8df f011 	tbh	[pc, r1, lsl #1]
   8229a:	0228      	.short	0x0228
   8229c:	02d702d7 	.word	0x02d702d7
   822a0:	02d70230 	.word	0x02d70230
   822a4:	02d702d7 	.word	0x02d702d7
   822a8:	02d702d7 	.word	0x02d702d7
   822ac:	00a002d7 	.word	0x00a002d7
   822b0:	02d70288 	.word	0x02d70288
   822b4:	02b800a8 	.word	0x02b800a8
   822b8:	01a602d7 	.word	0x01a602d7
   822bc:	01ab01ab 	.word	0x01ab01ab
   822c0:	01ab01ab 	.word	0x01ab01ab
   822c4:	01ab01ab 	.word	0x01ab01ab
   822c8:	01ab01ab 	.word	0x01ab01ab
   822cc:	02d701ab 	.word	0x02d701ab
   822d0:	02d702d7 	.word	0x02d702d7
   822d4:	02d702d7 	.word	0x02d702d7
   822d8:	02d702d7 	.word	0x02d702d7
   822dc:	02d702d7 	.word	0x02d702d7
   822e0:	01b902d7 	.word	0x01b902d7
   822e4:	02d702d7 	.word	0x02d702d7
   822e8:	02d702d7 	.word	0x02d702d7
   822ec:	02d702d7 	.word	0x02d702d7
   822f0:	02d702d7 	.word	0x02d702d7
   822f4:	02d702d7 	.word	0x02d702d7
   822f8:	02d7019e 	.word	0x02d7019e
   822fc:	02d702d7 	.word	0x02d702d7
   82300:	02d702d7 	.word	0x02d702d7
   82304:	02d701a2 	.word	0x02d701a2
   82308:	025a02d7 	.word	0x025a02d7
   8230c:	02d702d7 	.word	0x02d702d7
   82310:	02d702d7 	.word	0x02d702d7
   82314:	02d702d7 	.word	0x02d702d7
   82318:	02d702d7 	.word	0x02d702d7
   8231c:	02d702d7 	.word	0x02d702d7
   82320:	02220261 	.word	0x02220261
   82324:	02d702d7 	.word	0x02d702d7
   82328:	027602d7 	.word	0x027602d7
   8232c:	02d70222 	.word	0x02d70222
   82330:	027b02d7 	.word	0x027b02d7
   82334:	01fc02d7 	.word	0x01fc02d7
   82338:	02100189 	.word	0x02100189
   8233c:	02d702d2 	.word	0x02d702d2
   82340:	02d70295 	.word	0x02d70295
   82344:	02d700ad 	.word	0x02d700ad
   82348:	023502d7 	.word	0x023502d7
   8234c:	f109 0908 	add.w	r9, r9, #8
   82350:	9b03      	ldr	r3, [sp, #12]
   82352:	442b      	add	r3, r5
   82354:	9303      	str	r3, [sp, #12]
   82356:	e786      	b.n	82266 <_vfiprintf_r+0xc2>
   82358:	4659      	mov	r1, fp
   8235a:	9806      	ldr	r0, [sp, #24]
   8235c:	f000 fdaa 	bl	82eb4 <__swsetup_r>
   82360:	bb18      	cbnz	r0, 823aa <_vfiprintf_r+0x206>
   82362:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   82366:	f001 031a 	and.w	r3, r1, #26
   8236a:	2b0a      	cmp	r3, #10
   8236c:	f47f af4b 	bne.w	82206 <_vfiprintf_r+0x62>
   82370:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   82374:	2b00      	cmp	r3, #0
   82376:	f6ff af46 	blt.w	82206 <_vfiprintf_r+0x62>
   8237a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   8237e:	07db      	lsls	r3, r3, #31
   82380:	d405      	bmi.n	8238e <_vfiprintf_r+0x1ea>
   82382:	058f      	lsls	r7, r1, #22
   82384:	d403      	bmi.n	8238e <_vfiprintf_r+0x1ea>
   82386:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8238a:	f001 fabd 	bl	83908 <__retarget_lock_release_recursive>
   8238e:	462b      	mov	r3, r5
   82390:	4642      	mov	r2, r8
   82392:	4659      	mov	r1, fp
   82394:	9806      	ldr	r0, [sp, #24]
   82396:	f000 fd49 	bl	82e2c <__sbprintf>
   8239a:	9003      	str	r0, [sp, #12]
   8239c:	9803      	ldr	r0, [sp, #12]
   8239e:	b02d      	add	sp, #180	; 0xb4
   823a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823a4:	f000 feee 	bl	83184 <__sinit>
   823a8:	e709      	b.n	821be <_vfiprintf_r+0x1a>
   823aa:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   823ae:	07d9      	lsls	r1, r3, #31
   823b0:	d404      	bmi.n	823bc <_vfiprintf_r+0x218>
   823b2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   823b6:	059a      	lsls	r2, r3, #22
   823b8:	f140 84ae 	bpl.w	82d18 <_vfiprintf_r+0xb74>
   823bc:	f04f 33ff 	mov.w	r3, #4294967295
   823c0:	9303      	str	r3, [sp, #12]
   823c2:	9803      	ldr	r0, [sp, #12]
   823c4:	b02d      	add	sp, #180	; 0xb4
   823c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   823ca:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   823ce:	f001 fa99 	bl	83904 <__retarget_lock_acquire_recursive>
   823d2:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   823d6:	b281      	uxth	r1, r0
   823d8:	e6fb      	b.n	821d2 <_vfiprintf_r+0x2e>
   823da:	9907      	ldr	r1, [sp, #28]
   823dc:	460a      	mov	r2, r1
   823de:	680d      	ldr	r5, [r1, #0]
   823e0:	3204      	adds	r2, #4
   823e2:	2d00      	cmp	r5, #0
   823e4:	9207      	str	r2, [sp, #28]
   823e6:	da02      	bge.n	823ee <_vfiprintf_r+0x24a>
   823e8:	426d      	negs	r5, r5
   823ea:	f043 0304 	orr.w	r3, r3, #4
   823ee:	f898 2000 	ldrb.w	r2, [r8]
   823f2:	e749      	b.n	82288 <_vfiprintf_r+0xe4>
   823f4:	9508      	str	r5, [sp, #32]
   823f6:	069e      	lsls	r6, r3, #26
   823f8:	f100 845a 	bmi.w	82cb0 <_vfiprintf_r+0xb0c>
   823fc:	9907      	ldr	r1, [sp, #28]
   823fe:	06dd      	lsls	r5, r3, #27
   82400:	460a      	mov	r2, r1
   82402:	f100 83ef 	bmi.w	82be4 <_vfiprintf_r+0xa40>
   82406:	0658      	lsls	r0, r3, #25
   82408:	f140 83ec 	bpl.w	82be4 <_vfiprintf_r+0xa40>
   8240c:	2700      	movs	r7, #0
   8240e:	2201      	movs	r2, #1
   82410:	880e      	ldrh	r6, [r1, #0]
   82412:	3104      	adds	r1, #4
   82414:	9107      	str	r1, [sp, #28]
   82416:	f04f 0100 	mov.w	r1, #0
   8241a:	2500      	movs	r5, #0
   8241c:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   82420:	1c61      	adds	r1, r4, #1
   82422:	f000 8117 	beq.w	82654 <_vfiprintf_r+0x4b0>
   82426:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   8242a:	9102      	str	r1, [sp, #8]
   8242c:	ea56 0107 	orrs.w	r1, r6, r7
   82430:	f040 8115 	bne.w	8265e <_vfiprintf_r+0x4ba>
   82434:	2c00      	cmp	r4, #0
   82436:	f040 835b 	bne.w	82af0 <_vfiprintf_r+0x94c>
   8243a:	2a00      	cmp	r2, #0
   8243c:	f040 83b6 	bne.w	82bac <_vfiprintf_r+0xa08>
   82440:	f013 0301 	ands.w	r3, r3, #1
   82444:	9305      	str	r3, [sp, #20]
   82446:	f000 8455 	beq.w	82cf4 <_vfiprintf_r+0xb50>
   8244a:	2330      	movs	r3, #48	; 0x30
   8244c:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82450:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   82454:	9b05      	ldr	r3, [sp, #20]
   82456:	42a3      	cmp	r3, r4
   82458:	bfb8      	it	lt
   8245a:	4623      	movlt	r3, r4
   8245c:	9301      	str	r3, [sp, #4]
   8245e:	b10d      	cbz	r5, 82464 <_vfiprintf_r+0x2c0>
   82460:	3301      	adds	r3, #1
   82462:	9301      	str	r3, [sp, #4]
   82464:	9b02      	ldr	r3, [sp, #8]
   82466:	f013 0302 	ands.w	r3, r3, #2
   8246a:	9309      	str	r3, [sp, #36]	; 0x24
   8246c:	d002      	beq.n	82474 <_vfiprintf_r+0x2d0>
   8246e:	9b01      	ldr	r3, [sp, #4]
   82470:	3302      	adds	r3, #2
   82472:	9301      	str	r3, [sp, #4]
   82474:	9b02      	ldr	r3, [sp, #8]
   82476:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8247a:	930a      	str	r3, [sp, #40]	; 0x28
   8247c:	f040 8215 	bne.w	828aa <_vfiprintf_r+0x706>
   82480:	9b08      	ldr	r3, [sp, #32]
   82482:	9a01      	ldr	r2, [sp, #4]
   82484:	1a9d      	subs	r5, r3, r2
   82486:	2d00      	cmp	r5, #0
   82488:	f340 820f 	ble.w	828aa <_vfiprintf_r+0x706>
   8248c:	2d10      	cmp	r5, #16
   8248e:	f340 8484 	ble.w	82d9a <_vfiprintf_r+0xbf6>
   82492:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82494:	46ce      	mov	lr, r9
   82496:	2710      	movs	r7, #16
   82498:	46a1      	mov	r9, r4
   8249a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8249c:	4ec5      	ldr	r6, [pc, #788]	; (827b4 <_vfiprintf_r+0x610>)
   8249e:	4619      	mov	r1, r3
   824a0:	9c06      	ldr	r4, [sp, #24]
   824a2:	e007      	b.n	824b4 <_vfiprintf_r+0x310>
   824a4:	f101 0c02 	add.w	ip, r1, #2
   824a8:	4601      	mov	r1, r0
   824aa:	f10e 0e08 	add.w	lr, lr, #8
   824ae:	3d10      	subs	r5, #16
   824b0:	2d10      	cmp	r5, #16
   824b2:	dd11      	ble.n	824d8 <_vfiprintf_r+0x334>
   824b4:	1c48      	adds	r0, r1, #1
   824b6:	3210      	adds	r2, #16
   824b8:	2807      	cmp	r0, #7
   824ba:	9211      	str	r2, [sp, #68]	; 0x44
   824bc:	e88e 00c0 	stmia.w	lr, {r6, r7}
   824c0:	9010      	str	r0, [sp, #64]	; 0x40
   824c2:	ddef      	ble.n	824a4 <_vfiprintf_r+0x300>
   824c4:	2a00      	cmp	r2, #0
   824c6:	f040 81d9 	bne.w	8287c <_vfiprintf_r+0x6d8>
   824ca:	3d10      	subs	r5, #16
   824cc:	2d10      	cmp	r5, #16
   824ce:	4611      	mov	r1, r2
   824d0:	f04f 0c01 	mov.w	ip, #1
   824d4:	46d6      	mov	lr, sl
   824d6:	dced      	bgt.n	824b4 <_vfiprintf_r+0x310>
   824d8:	464c      	mov	r4, r9
   824da:	4661      	mov	r1, ip
   824dc:	46f1      	mov	r9, lr
   824de:	442a      	add	r2, r5
   824e0:	2907      	cmp	r1, #7
   824e2:	9211      	str	r2, [sp, #68]	; 0x44
   824e4:	f8c9 6000 	str.w	r6, [r9]
   824e8:	f8c9 5004 	str.w	r5, [r9, #4]
   824ec:	9110      	str	r1, [sp, #64]	; 0x40
   824ee:	f300 82eb 	bgt.w	82ac8 <_vfiprintf_r+0x924>
   824f2:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   824f6:	f109 0908 	add.w	r9, r9, #8
   824fa:	1c48      	adds	r0, r1, #1
   824fc:	2d00      	cmp	r5, #0
   824fe:	f040 81dc 	bne.w	828ba <_vfiprintf_r+0x716>
   82502:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82504:	2b00      	cmp	r3, #0
   82506:	f000 81f6 	beq.w	828f6 <_vfiprintf_r+0x752>
   8250a:	2102      	movs	r1, #2
   8250c:	ab0e      	add	r3, sp, #56	; 0x38
   8250e:	440a      	add	r2, r1
   82510:	2807      	cmp	r0, #7
   82512:	9211      	str	r2, [sp, #68]	; 0x44
   82514:	9010      	str	r0, [sp, #64]	; 0x40
   82516:	f8c9 1004 	str.w	r1, [r9, #4]
   8251a:	f8c9 3000 	str.w	r3, [r9]
   8251e:	f340 81e6 	ble.w	828ee <_vfiprintf_r+0x74a>
   82522:	2a00      	cmp	r2, #0
   82524:	f040 8395 	bne.w	82c52 <_vfiprintf_r+0xaae>
   82528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8252a:	2001      	movs	r0, #1
   8252c:	2b80      	cmp	r3, #128	; 0x80
   8252e:	4611      	mov	r1, r2
   82530:	46d1      	mov	r9, sl
   82532:	f040 81e4 	bne.w	828fe <_vfiprintf_r+0x75a>
   82536:	9b08      	ldr	r3, [sp, #32]
   82538:	9d01      	ldr	r5, [sp, #4]
   8253a:	1b5e      	subs	r6, r3, r5
   8253c:	2e00      	cmp	r6, #0
   8253e:	f340 81de 	ble.w	828fe <_vfiprintf_r+0x75a>
   82542:	2e10      	cmp	r6, #16
   82544:	f340 843c 	ble.w	82dc0 <_vfiprintf_r+0xc1c>
   82548:	46cc      	mov	ip, r9
   8254a:	2710      	movs	r7, #16
   8254c:	46a1      	mov	r9, r4
   8254e:	4d9a      	ldr	r5, [pc, #616]	; (827b8 <_vfiprintf_r+0x614>)
   82550:	9c06      	ldr	r4, [sp, #24]
   82552:	e007      	b.n	82564 <_vfiprintf_r+0x3c0>
   82554:	f101 0e02 	add.w	lr, r1, #2
   82558:	4601      	mov	r1, r0
   8255a:	f10c 0c08 	add.w	ip, ip, #8
   8255e:	3e10      	subs	r6, #16
   82560:	2e10      	cmp	r6, #16
   82562:	dd11      	ble.n	82588 <_vfiprintf_r+0x3e4>
   82564:	1c48      	adds	r0, r1, #1
   82566:	3210      	adds	r2, #16
   82568:	2807      	cmp	r0, #7
   8256a:	9211      	str	r2, [sp, #68]	; 0x44
   8256c:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82570:	9010      	str	r0, [sp, #64]	; 0x40
   82572:	ddef      	ble.n	82554 <_vfiprintf_r+0x3b0>
   82574:	2a00      	cmp	r2, #0
   82576:	f040 829b 	bne.w	82ab0 <_vfiprintf_r+0x90c>
   8257a:	3e10      	subs	r6, #16
   8257c:	2e10      	cmp	r6, #16
   8257e:	f04f 0e01 	mov.w	lr, #1
   82582:	4611      	mov	r1, r2
   82584:	46d4      	mov	ip, sl
   82586:	dced      	bgt.n	82564 <_vfiprintf_r+0x3c0>
   82588:	464c      	mov	r4, r9
   8258a:	46e1      	mov	r9, ip
   8258c:	4432      	add	r2, r6
   8258e:	f1be 0f07 	cmp.w	lr, #7
   82592:	9211      	str	r2, [sp, #68]	; 0x44
   82594:	e889 0060 	stmia.w	r9, {r5, r6}
   82598:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8259c:	f300 8366 	bgt.w	82c6c <_vfiprintf_r+0xac8>
   825a0:	f109 0908 	add.w	r9, r9, #8
   825a4:	f10e 0001 	add.w	r0, lr, #1
   825a8:	4671      	mov	r1, lr
   825aa:	e1a8      	b.n	828fe <_vfiprintf_r+0x75a>
   825ac:	9508      	str	r5, [sp, #32]
   825ae:	f013 0220 	ands.w	r2, r3, #32
   825b2:	f040 8389 	bne.w	82cc8 <_vfiprintf_r+0xb24>
   825b6:	f013 0110 	ands.w	r1, r3, #16
   825ba:	f040 8319 	bne.w	82bf0 <_vfiprintf_r+0xa4c>
   825be:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   825c2:	f000 8315 	beq.w	82bf0 <_vfiprintf_r+0xa4c>
   825c6:	9807      	ldr	r0, [sp, #28]
   825c8:	460a      	mov	r2, r1
   825ca:	4601      	mov	r1, r0
   825cc:	3104      	adds	r1, #4
   825ce:	8806      	ldrh	r6, [r0, #0]
   825d0:	2700      	movs	r7, #0
   825d2:	9107      	str	r1, [sp, #28]
   825d4:	e71f      	b.n	82416 <_vfiprintf_r+0x272>
   825d6:	9508      	str	r5, [sp, #32]
   825d8:	f043 0310 	orr.w	r3, r3, #16
   825dc:	e7e7      	b.n	825ae <_vfiprintf_r+0x40a>
   825de:	9508      	str	r5, [sp, #32]
   825e0:	f043 0310 	orr.w	r3, r3, #16
   825e4:	e707      	b.n	823f6 <_vfiprintf_r+0x252>
   825e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   825ea:	f898 2000 	ldrb.w	r2, [r8]
   825ee:	e64b      	b.n	82288 <_vfiprintf_r+0xe4>
   825f0:	2500      	movs	r5, #0
   825f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   825f6:	f818 2b01 	ldrb.w	r2, [r8], #1
   825fa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   825fe:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82602:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82606:	2909      	cmp	r1, #9
   82608:	d9f5      	bls.n	825f6 <_vfiprintf_r+0x452>
   8260a:	e63f      	b.n	8228c <_vfiprintf_r+0xe8>
   8260c:	9508      	str	r5, [sp, #32]
   8260e:	2800      	cmp	r0, #0
   82610:	f040 8402 	bne.w	82e18 <_vfiprintf_r+0xc74>
   82614:	f043 0310 	orr.w	r3, r3, #16
   82618:	069e      	lsls	r6, r3, #26
   8261a:	f100 833d 	bmi.w	82c98 <_vfiprintf_r+0xaf4>
   8261e:	9907      	ldr	r1, [sp, #28]
   82620:	06dd      	lsls	r5, r3, #27
   82622:	460a      	mov	r2, r1
   82624:	f100 82f0 	bmi.w	82c08 <_vfiprintf_r+0xa64>
   82628:	0658      	lsls	r0, r3, #25
   8262a:	f140 82ed 	bpl.w	82c08 <_vfiprintf_r+0xa64>
   8262e:	f9b1 6000 	ldrsh.w	r6, [r1]
   82632:	3204      	adds	r2, #4
   82634:	17f7      	asrs	r7, r6, #31
   82636:	4630      	mov	r0, r6
   82638:	4639      	mov	r1, r7
   8263a:	9207      	str	r2, [sp, #28]
   8263c:	2800      	cmp	r0, #0
   8263e:	f171 0200 	sbcs.w	r2, r1, #0
   82642:	f2c0 835a 	blt.w	82cfa <_vfiprintf_r+0xb56>
   82646:	1c61      	adds	r1, r4, #1
   82648:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8264c:	f04f 0201 	mov.w	r2, #1
   82650:	f47f aee9 	bne.w	82426 <_vfiprintf_r+0x282>
   82654:	ea56 0107 	orrs.w	r1, r6, r7
   82658:	f000 824b 	beq.w	82af2 <_vfiprintf_r+0x94e>
   8265c:	9302      	str	r3, [sp, #8]
   8265e:	2a01      	cmp	r2, #1
   82660:	f000 828a 	beq.w	82b78 <_vfiprintf_r+0x9d4>
   82664:	2a02      	cmp	r2, #2
   82666:	f040 825a 	bne.w	82b1e <_vfiprintf_r+0x97a>
   8266a:	46d3      	mov	fp, sl
   8266c:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8266e:	0933      	lsrs	r3, r6, #4
   82670:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82674:	0939      	lsrs	r1, r7, #4
   82676:	f006 020f 	and.w	r2, r6, #15
   8267a:	460f      	mov	r7, r1
   8267c:	461e      	mov	r6, r3
   8267e:	5c83      	ldrb	r3, [r0, r2]
   82680:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82684:	ea56 0307 	orrs.w	r3, r6, r7
   82688:	d1f1      	bne.n	8266e <_vfiprintf_r+0x4ca>
   8268a:	ebaa 030b 	sub.w	r3, sl, fp
   8268e:	9305      	str	r3, [sp, #20]
   82690:	e6e0      	b.n	82454 <_vfiprintf_r+0x2b0>
   82692:	2800      	cmp	r0, #0
   82694:	f040 83bd 	bne.w	82e12 <_vfiprintf_r+0xc6e>
   82698:	0699      	lsls	r1, r3, #26
   8269a:	f100 8359 	bmi.w	82d50 <_vfiprintf_r+0xbac>
   8269e:	06da      	lsls	r2, r3, #27
   826a0:	f100 80e5 	bmi.w	8286e <_vfiprintf_r+0x6ca>
   826a4:	065b      	lsls	r3, r3, #25
   826a6:	f140 80e2 	bpl.w	8286e <_vfiprintf_r+0x6ca>
   826aa:	9a07      	ldr	r2, [sp, #28]
   826ac:	6813      	ldr	r3, [r2, #0]
   826ae:	3204      	adds	r2, #4
   826b0:	9207      	str	r2, [sp, #28]
   826b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   826b6:	801a      	strh	r2, [r3, #0]
   826b8:	e5b1      	b.n	8221e <_vfiprintf_r+0x7a>
   826ba:	2278      	movs	r2, #120	; 0x78
   826bc:	2130      	movs	r1, #48	; 0x30
   826be:	9508      	str	r5, [sp, #32]
   826c0:	9d07      	ldr	r5, [sp, #28]
   826c2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   826c6:	1d2a      	adds	r2, r5, #4
   826c8:	9207      	str	r2, [sp, #28]
   826ca:	4a3c      	ldr	r2, [pc, #240]	; (827bc <_vfiprintf_r+0x618>)
   826cc:	682e      	ldr	r6, [r5, #0]
   826ce:	920b      	str	r2, [sp, #44]	; 0x2c
   826d0:	f043 0302 	orr.w	r3, r3, #2
   826d4:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   826d8:	2700      	movs	r7, #0
   826da:	2202      	movs	r2, #2
   826dc:	e69b      	b.n	82416 <_vfiprintf_r+0x272>
   826de:	9508      	str	r5, [sp, #32]
   826e0:	2800      	cmp	r0, #0
   826e2:	d099      	beq.n	82618 <_vfiprintf_r+0x474>
   826e4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   826e8:	e796      	b.n	82618 <_vfiprintf_r+0x474>
   826ea:	f898 2000 	ldrb.w	r2, [r8]
   826ee:	2e00      	cmp	r6, #0
   826f0:	f47f adca 	bne.w	82288 <_vfiprintf_r+0xe4>
   826f4:	2001      	movs	r0, #1
   826f6:	2620      	movs	r6, #32
   826f8:	e5c6      	b.n	82288 <_vfiprintf_r+0xe4>
   826fa:	f043 0301 	orr.w	r3, r3, #1
   826fe:	f898 2000 	ldrb.w	r2, [r8]
   82702:	e5c1      	b.n	82288 <_vfiprintf_r+0xe4>
   82704:	9508      	str	r5, [sp, #32]
   82706:	2800      	cmp	r0, #0
   82708:	f040 8380 	bne.w	82e0c <_vfiprintf_r+0xc68>
   8270c:	492b      	ldr	r1, [pc, #172]	; (827bc <_vfiprintf_r+0x618>)
   8270e:	910b      	str	r1, [sp, #44]	; 0x2c
   82710:	069f      	lsls	r7, r3, #26
   82712:	f100 82e5 	bmi.w	82ce0 <_vfiprintf_r+0xb3c>
   82716:	9807      	ldr	r0, [sp, #28]
   82718:	06de      	lsls	r6, r3, #27
   8271a:	4601      	mov	r1, r0
   8271c:	f100 826f 	bmi.w	82bfe <_vfiprintf_r+0xa5a>
   82720:	065d      	lsls	r5, r3, #25
   82722:	f140 826c 	bpl.w	82bfe <_vfiprintf_r+0xa5a>
   82726:	2700      	movs	r7, #0
   82728:	3104      	adds	r1, #4
   8272a:	8806      	ldrh	r6, [r0, #0]
   8272c:	9107      	str	r1, [sp, #28]
   8272e:	07d8      	lsls	r0, r3, #31
   82730:	f140 8220 	bpl.w	82b74 <_vfiprintf_r+0x9d0>
   82734:	ea56 0107 	orrs.w	r1, r6, r7
   82738:	f000 821c 	beq.w	82b74 <_vfiprintf_r+0x9d0>
   8273c:	2130      	movs	r1, #48	; 0x30
   8273e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82742:	f043 0302 	orr.w	r3, r3, #2
   82746:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8274a:	2202      	movs	r2, #2
   8274c:	e663      	b.n	82416 <_vfiprintf_r+0x272>
   8274e:	9508      	str	r5, [sp, #32]
   82750:	2800      	cmp	r0, #0
   82752:	f040 8355 	bne.w	82e00 <_vfiprintf_r+0xc5c>
   82756:	491a      	ldr	r1, [pc, #104]	; (827c0 <_vfiprintf_r+0x61c>)
   82758:	910b      	str	r1, [sp, #44]	; 0x2c
   8275a:	e7d9      	b.n	82710 <_vfiprintf_r+0x56c>
   8275c:	2201      	movs	r2, #1
   8275e:	9807      	ldr	r0, [sp, #28]
   82760:	4611      	mov	r1, r2
   82762:	9201      	str	r2, [sp, #4]
   82764:	6802      	ldr	r2, [r0, #0]
   82766:	f04f 0400 	mov.w	r4, #0
   8276a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8276e:	4602      	mov	r2, r0
   82770:	3204      	adds	r2, #4
   82772:	9508      	str	r5, [sp, #32]
   82774:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82778:	9105      	str	r1, [sp, #20]
   8277a:	9207      	str	r2, [sp, #28]
   8277c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82780:	9302      	str	r3, [sp, #8]
   82782:	2400      	movs	r4, #0
   82784:	e66e      	b.n	82464 <_vfiprintf_r+0x2c0>
   82786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8278a:	f898 2000 	ldrb.w	r2, [r8]
   8278e:	e57b      	b.n	82288 <_vfiprintf_r+0xe4>
   82790:	f898 2000 	ldrb.w	r2, [r8]
   82794:	2a6c      	cmp	r2, #108	; 0x6c
   82796:	bf03      	ittte	eq
   82798:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   8279c:	f043 0320 	orreq.w	r3, r3, #32
   827a0:	f108 0801 	addeq.w	r8, r8, #1
   827a4:	f043 0310 	orrne.w	r3, r3, #16
   827a8:	e56e      	b.n	82288 <_vfiprintf_r+0xe4>
   827aa:	f898 2000 	ldrb.w	r2, [r8]
   827ae:	2001      	movs	r0, #1
   827b0:	262b      	movs	r6, #43	; 0x2b
   827b2:	e569      	b.n	82288 <_vfiprintf_r+0xe4>
   827b4:	0008490c 	.word	0x0008490c
   827b8:	0008491c 	.word	0x0008491c
   827bc:	000848f0 	.word	0x000848f0
   827c0:	000848dc 	.word	0x000848dc
   827c4:	f04f 0200 	mov.w	r2, #0
   827c8:	9907      	ldr	r1, [sp, #28]
   827ca:	9508      	str	r5, [sp, #32]
   827cc:	f8d1 b000 	ldr.w	fp, [r1]
   827d0:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   827d4:	1d0d      	adds	r5, r1, #4
   827d6:	f1bb 0f00 	cmp.w	fp, #0
   827da:	f000 82e4 	beq.w	82da6 <_vfiprintf_r+0xc02>
   827de:	1c67      	adds	r7, r4, #1
   827e0:	f000 82c3 	beq.w	82d6a <_vfiprintf_r+0xbc6>
   827e4:	4622      	mov	r2, r4
   827e6:	2100      	movs	r1, #0
   827e8:	4658      	mov	r0, fp
   827ea:	9301      	str	r3, [sp, #4]
   827ec:	f001 fbc6 	bl	83f7c <memchr>
   827f0:	9b01      	ldr	r3, [sp, #4]
   827f2:	2800      	cmp	r0, #0
   827f4:	f000 82e8 	beq.w	82dc8 <_vfiprintf_r+0xc24>
   827f8:	eba0 020b 	sub.w	r2, r0, fp
   827fc:	9507      	str	r5, [sp, #28]
   827fe:	9205      	str	r2, [sp, #20]
   82800:	9302      	str	r3, [sp, #8]
   82802:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82806:	2400      	movs	r4, #0
   82808:	e624      	b.n	82454 <_vfiprintf_r+0x2b0>
   8280a:	f898 2000 	ldrb.w	r2, [r8]
   8280e:	f108 0701 	add.w	r7, r8, #1
   82812:	2a2a      	cmp	r2, #42	; 0x2a
   82814:	f000 82e9 	beq.w	82dea <_vfiprintf_r+0xc46>
   82818:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8281c:	2909      	cmp	r1, #9
   8281e:	46b8      	mov	r8, r7
   82820:	f04f 0400 	mov.w	r4, #0
   82824:	f63f ad32 	bhi.w	8228c <_vfiprintf_r+0xe8>
   82828:	f818 2b01 	ldrb.w	r2, [r8], #1
   8282c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   82830:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   82834:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82838:	2909      	cmp	r1, #9
   8283a:	d9f5      	bls.n	82828 <_vfiprintf_r+0x684>
   8283c:	e526      	b.n	8228c <_vfiprintf_r+0xe8>
   8283e:	f043 0320 	orr.w	r3, r3, #32
   82842:	f898 2000 	ldrb.w	r2, [r8]
   82846:	e51f      	b.n	82288 <_vfiprintf_r+0xe4>
   82848:	9508      	str	r5, [sp, #32]
   8284a:	2800      	cmp	r0, #0
   8284c:	f040 82db 	bne.w	82e06 <_vfiprintf_r+0xc62>
   82850:	2a00      	cmp	r2, #0
   82852:	f000 80f1 	beq.w	82a38 <_vfiprintf_r+0x894>
   82856:	2101      	movs	r1, #1
   82858:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8285c:	f04f 0200 	mov.w	r2, #0
   82860:	9101      	str	r1, [sp, #4]
   82862:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82866:	9105      	str	r1, [sp, #20]
   82868:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   8286c:	e788      	b.n	82780 <_vfiprintf_r+0x5dc>
   8286e:	9a07      	ldr	r2, [sp, #28]
   82870:	6813      	ldr	r3, [r2, #0]
   82872:	3204      	adds	r2, #4
   82874:	9207      	str	r2, [sp, #28]
   82876:	9a03      	ldr	r2, [sp, #12]
   82878:	601a      	str	r2, [r3, #0]
   8287a:	e4d0      	b.n	8221e <_vfiprintf_r+0x7a>
   8287c:	aa0f      	add	r2, sp, #60	; 0x3c
   8287e:	9904      	ldr	r1, [sp, #16]
   82880:	4620      	mov	r0, r4
   82882:	f7ff fc4f 	bl	82124 <__sprint_r.part.0>
   82886:	2800      	cmp	r0, #0
   82888:	f040 8143 	bne.w	82b12 <_vfiprintf_r+0x96e>
   8288c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8288e:	46d6      	mov	lr, sl
   82890:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82892:	f101 0c01 	add.w	ip, r1, #1
   82896:	e60a      	b.n	824ae <_vfiprintf_r+0x30a>
   82898:	aa0f      	add	r2, sp, #60	; 0x3c
   8289a:	9904      	ldr	r1, [sp, #16]
   8289c:	9806      	ldr	r0, [sp, #24]
   8289e:	f7ff fc41 	bl	82124 <__sprint_r.part.0>
   828a2:	2800      	cmp	r0, #0
   828a4:	f040 8135 	bne.w	82b12 <_vfiprintf_r+0x96e>
   828a8:	46d1      	mov	r9, sl
   828aa:	9910      	ldr	r1, [sp, #64]	; 0x40
   828ac:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   828b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   828b2:	1c48      	adds	r0, r1, #1
   828b4:	2d00      	cmp	r5, #0
   828b6:	f43f ae24 	beq.w	82502 <_vfiprintf_r+0x35e>
   828ba:	2101      	movs	r1, #1
   828bc:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   828c0:	440a      	add	r2, r1
   828c2:	2807      	cmp	r0, #7
   828c4:	9211      	str	r2, [sp, #68]	; 0x44
   828c6:	9010      	str	r0, [sp, #64]	; 0x40
   828c8:	f8c9 1004 	str.w	r1, [r9, #4]
   828cc:	f8c9 5000 	str.w	r5, [r9]
   828d0:	f340 8109 	ble.w	82ae6 <_vfiprintf_r+0x942>
   828d4:	2a00      	cmp	r2, #0
   828d6:	f040 81af 	bne.w	82c38 <_vfiprintf_r+0xa94>
   828da:	9b09      	ldr	r3, [sp, #36]	; 0x24
   828dc:	2b00      	cmp	r3, #0
   828de:	f43f ae23 	beq.w	82528 <_vfiprintf_r+0x384>
   828e2:	2202      	movs	r2, #2
   828e4:	4608      	mov	r0, r1
   828e6:	46d1      	mov	r9, sl
   828e8:	ab0e      	add	r3, sp, #56	; 0x38
   828ea:	921d      	str	r2, [sp, #116]	; 0x74
   828ec:	931c      	str	r3, [sp, #112]	; 0x70
   828ee:	4601      	mov	r1, r0
   828f0:	f109 0908 	add.w	r9, r9, #8
   828f4:	3001      	adds	r0, #1
   828f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   828f8:	2b80      	cmp	r3, #128	; 0x80
   828fa:	f43f ae1c 	beq.w	82536 <_vfiprintf_r+0x392>
   828fe:	9b05      	ldr	r3, [sp, #20]
   82900:	1ae4      	subs	r4, r4, r3
   82902:	2c00      	cmp	r4, #0
   82904:	dd2f      	ble.n	82966 <_vfiprintf_r+0x7c2>
   82906:	2c10      	cmp	r4, #16
   82908:	f340 8220 	ble.w	82d4c <_vfiprintf_r+0xba8>
   8290c:	46ce      	mov	lr, r9
   8290e:	2610      	movs	r6, #16
   82910:	4db2      	ldr	r5, [pc, #712]	; (82bdc <_vfiprintf_r+0xa38>)
   82912:	9f06      	ldr	r7, [sp, #24]
   82914:	f8dd 9010 	ldr.w	r9, [sp, #16]
   82918:	e006      	b.n	82928 <_vfiprintf_r+0x784>
   8291a:	1c88      	adds	r0, r1, #2
   8291c:	4619      	mov	r1, r3
   8291e:	f10e 0e08 	add.w	lr, lr, #8
   82922:	3c10      	subs	r4, #16
   82924:	2c10      	cmp	r4, #16
   82926:	dd10      	ble.n	8294a <_vfiprintf_r+0x7a6>
   82928:	1c4b      	adds	r3, r1, #1
   8292a:	3210      	adds	r2, #16
   8292c:	2b07      	cmp	r3, #7
   8292e:	9211      	str	r2, [sp, #68]	; 0x44
   82930:	e88e 0060 	stmia.w	lr, {r5, r6}
   82934:	9310      	str	r3, [sp, #64]	; 0x40
   82936:	ddf0      	ble.n	8291a <_vfiprintf_r+0x776>
   82938:	2a00      	cmp	r2, #0
   8293a:	d165      	bne.n	82a08 <_vfiprintf_r+0x864>
   8293c:	3c10      	subs	r4, #16
   8293e:	2c10      	cmp	r4, #16
   82940:	f04f 0001 	mov.w	r0, #1
   82944:	4611      	mov	r1, r2
   82946:	46d6      	mov	lr, sl
   82948:	dcee      	bgt.n	82928 <_vfiprintf_r+0x784>
   8294a:	46f1      	mov	r9, lr
   8294c:	4422      	add	r2, r4
   8294e:	2807      	cmp	r0, #7
   82950:	9211      	str	r2, [sp, #68]	; 0x44
   82952:	f8c9 5000 	str.w	r5, [r9]
   82956:	f8c9 4004 	str.w	r4, [r9, #4]
   8295a:	9010      	str	r0, [sp, #64]	; 0x40
   8295c:	f300 8085 	bgt.w	82a6a <_vfiprintf_r+0x8c6>
   82960:	f109 0908 	add.w	r9, r9, #8
   82964:	3001      	adds	r0, #1
   82966:	9905      	ldr	r1, [sp, #20]
   82968:	2807      	cmp	r0, #7
   8296a:	440a      	add	r2, r1
   8296c:	9211      	str	r2, [sp, #68]	; 0x44
   8296e:	f8c9 b000 	str.w	fp, [r9]
   82972:	f8c9 1004 	str.w	r1, [r9, #4]
   82976:	9010      	str	r0, [sp, #64]	; 0x40
   82978:	f340 8082 	ble.w	82a80 <_vfiprintf_r+0x8dc>
   8297c:	2a00      	cmp	r2, #0
   8297e:	f040 8118 	bne.w	82bb2 <_vfiprintf_r+0xa0e>
   82982:	9b02      	ldr	r3, [sp, #8]
   82984:	9210      	str	r2, [sp, #64]	; 0x40
   82986:	0758      	lsls	r0, r3, #29
   82988:	d535      	bpl.n	829f6 <_vfiprintf_r+0x852>
   8298a:	9b08      	ldr	r3, [sp, #32]
   8298c:	9901      	ldr	r1, [sp, #4]
   8298e:	1a5c      	subs	r4, r3, r1
   82990:	2c00      	cmp	r4, #0
   82992:	f340 80e7 	ble.w	82b64 <_vfiprintf_r+0x9c0>
   82996:	46d1      	mov	r9, sl
   82998:	2c10      	cmp	r4, #16
   8299a:	f340 820d 	ble.w	82db8 <_vfiprintf_r+0xc14>
   8299e:	2510      	movs	r5, #16
   829a0:	9910      	ldr	r1, [sp, #64]	; 0x40
   829a2:	4e8f      	ldr	r6, [pc, #572]	; (82be0 <_vfiprintf_r+0xa3c>)
   829a4:	9f06      	ldr	r7, [sp, #24]
   829a6:	f8dd b010 	ldr.w	fp, [sp, #16]
   829aa:	e006      	b.n	829ba <_vfiprintf_r+0x816>
   829ac:	1c88      	adds	r0, r1, #2
   829ae:	4619      	mov	r1, r3
   829b0:	f109 0908 	add.w	r9, r9, #8
   829b4:	3c10      	subs	r4, #16
   829b6:	2c10      	cmp	r4, #16
   829b8:	dd11      	ble.n	829de <_vfiprintf_r+0x83a>
   829ba:	1c4b      	adds	r3, r1, #1
   829bc:	3210      	adds	r2, #16
   829be:	2b07      	cmp	r3, #7
   829c0:	9211      	str	r2, [sp, #68]	; 0x44
   829c2:	f8c9 6000 	str.w	r6, [r9]
   829c6:	f8c9 5004 	str.w	r5, [r9, #4]
   829ca:	9310      	str	r3, [sp, #64]	; 0x40
   829cc:	ddee      	ble.n	829ac <_vfiprintf_r+0x808>
   829ce:	bb42      	cbnz	r2, 82a22 <_vfiprintf_r+0x87e>
   829d0:	3c10      	subs	r4, #16
   829d2:	2c10      	cmp	r4, #16
   829d4:	f04f 0001 	mov.w	r0, #1
   829d8:	4611      	mov	r1, r2
   829da:	46d1      	mov	r9, sl
   829dc:	dced      	bgt.n	829ba <_vfiprintf_r+0x816>
   829de:	4422      	add	r2, r4
   829e0:	2807      	cmp	r0, #7
   829e2:	9211      	str	r2, [sp, #68]	; 0x44
   829e4:	f8c9 6000 	str.w	r6, [r9]
   829e8:	f8c9 4004 	str.w	r4, [r9, #4]
   829ec:	9010      	str	r0, [sp, #64]	; 0x40
   829ee:	dd51      	ble.n	82a94 <_vfiprintf_r+0x8f0>
   829f0:	2a00      	cmp	r2, #0
   829f2:	f040 819a 	bne.w	82d2a <_vfiprintf_r+0xb86>
   829f6:	9b03      	ldr	r3, [sp, #12]
   829f8:	9a08      	ldr	r2, [sp, #32]
   829fa:	9901      	ldr	r1, [sp, #4]
   829fc:	428a      	cmp	r2, r1
   829fe:	bfac      	ite	ge
   82a00:	189b      	addge	r3, r3, r2
   82a02:	185b      	addlt	r3, r3, r1
   82a04:	9303      	str	r3, [sp, #12]
   82a06:	e04e      	b.n	82aa6 <_vfiprintf_r+0x902>
   82a08:	aa0f      	add	r2, sp, #60	; 0x3c
   82a0a:	4649      	mov	r1, r9
   82a0c:	4638      	mov	r0, r7
   82a0e:	f7ff fb89 	bl	82124 <__sprint_r.part.0>
   82a12:	2800      	cmp	r0, #0
   82a14:	f040 813e 	bne.w	82c94 <_vfiprintf_r+0xaf0>
   82a18:	9910      	ldr	r1, [sp, #64]	; 0x40
   82a1a:	46d6      	mov	lr, sl
   82a1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a1e:	1c48      	adds	r0, r1, #1
   82a20:	e77f      	b.n	82922 <_vfiprintf_r+0x77e>
   82a22:	aa0f      	add	r2, sp, #60	; 0x3c
   82a24:	4659      	mov	r1, fp
   82a26:	4638      	mov	r0, r7
   82a28:	f7ff fb7c 	bl	82124 <__sprint_r.part.0>
   82a2c:	b960      	cbnz	r0, 82a48 <_vfiprintf_r+0x8a4>
   82a2e:	9910      	ldr	r1, [sp, #64]	; 0x40
   82a30:	46d1      	mov	r9, sl
   82a32:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82a34:	1c48      	adds	r0, r1, #1
   82a36:	e7bd      	b.n	829b4 <_vfiprintf_r+0x810>
   82a38:	9b11      	ldr	r3, [sp, #68]	; 0x44
   82a3a:	f8dd b010 	ldr.w	fp, [sp, #16]
   82a3e:	2b00      	cmp	r3, #0
   82a40:	f040 81ca 	bne.w	82dd8 <_vfiprintf_r+0xc34>
   82a44:	2300      	movs	r3, #0
   82a46:	9310      	str	r3, [sp, #64]	; 0x40
   82a48:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82a4c:	f013 0f01 	tst.w	r3, #1
   82a50:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82a54:	d102      	bne.n	82a5c <_vfiprintf_r+0x8b8>
   82a56:	059a      	lsls	r2, r3, #22
   82a58:	f140 80dd 	bpl.w	82c16 <_vfiprintf_r+0xa72>
   82a5c:	065b      	lsls	r3, r3, #25
   82a5e:	f53f acad 	bmi.w	823bc <_vfiprintf_r+0x218>
   82a62:	9803      	ldr	r0, [sp, #12]
   82a64:	b02d      	add	sp, #180	; 0xb4
   82a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82a6a:	2a00      	cmp	r2, #0
   82a6c:	f040 8105 	bne.w	82c7a <_vfiprintf_r+0xad6>
   82a70:	2301      	movs	r3, #1
   82a72:	46d1      	mov	r9, sl
   82a74:	9a05      	ldr	r2, [sp, #20]
   82a76:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   82a7a:	921d      	str	r2, [sp, #116]	; 0x74
   82a7c:	9211      	str	r2, [sp, #68]	; 0x44
   82a7e:	9310      	str	r3, [sp, #64]	; 0x40
   82a80:	f109 0908 	add.w	r9, r9, #8
   82a84:	9b02      	ldr	r3, [sp, #8]
   82a86:	0759      	lsls	r1, r3, #29
   82a88:	d504      	bpl.n	82a94 <_vfiprintf_r+0x8f0>
   82a8a:	9b08      	ldr	r3, [sp, #32]
   82a8c:	9901      	ldr	r1, [sp, #4]
   82a8e:	1a5c      	subs	r4, r3, r1
   82a90:	2c00      	cmp	r4, #0
   82a92:	dc81      	bgt.n	82998 <_vfiprintf_r+0x7f4>
   82a94:	9b03      	ldr	r3, [sp, #12]
   82a96:	9908      	ldr	r1, [sp, #32]
   82a98:	9801      	ldr	r0, [sp, #4]
   82a9a:	4281      	cmp	r1, r0
   82a9c:	bfac      	ite	ge
   82a9e:	185b      	addge	r3, r3, r1
   82aa0:	181b      	addlt	r3, r3, r0
   82aa2:	9303      	str	r3, [sp, #12]
   82aa4:	bb72      	cbnz	r2, 82b04 <_vfiprintf_r+0x960>
   82aa6:	2300      	movs	r3, #0
   82aa8:	46d1      	mov	r9, sl
   82aaa:	9310      	str	r3, [sp, #64]	; 0x40
   82aac:	f7ff bbb7 	b.w	8221e <_vfiprintf_r+0x7a>
   82ab0:	aa0f      	add	r2, sp, #60	; 0x3c
   82ab2:	9904      	ldr	r1, [sp, #16]
   82ab4:	4620      	mov	r0, r4
   82ab6:	f7ff fb35 	bl	82124 <__sprint_r.part.0>
   82aba:	bb50      	cbnz	r0, 82b12 <_vfiprintf_r+0x96e>
   82abc:	9910      	ldr	r1, [sp, #64]	; 0x40
   82abe:	46d4      	mov	ip, sl
   82ac0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82ac2:	f101 0e01 	add.w	lr, r1, #1
   82ac6:	e54a      	b.n	8255e <_vfiprintf_r+0x3ba>
   82ac8:	2a00      	cmp	r2, #0
   82aca:	f47f aee5 	bne.w	82898 <_vfiprintf_r+0x6f4>
   82ace:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82ad2:	2900      	cmp	r1, #0
   82ad4:	f000 811a 	beq.w	82d0c <_vfiprintf_r+0xb68>
   82ad8:	2201      	movs	r2, #1
   82ada:	46d1      	mov	r9, sl
   82adc:	4610      	mov	r0, r2
   82ade:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82ae2:	921d      	str	r2, [sp, #116]	; 0x74
   82ae4:	911c      	str	r1, [sp, #112]	; 0x70
   82ae6:	4601      	mov	r1, r0
   82ae8:	f109 0908 	add.w	r9, r9, #8
   82aec:	3001      	adds	r0, #1
   82aee:	e508      	b.n	82502 <_vfiprintf_r+0x35e>
   82af0:	9b02      	ldr	r3, [sp, #8]
   82af2:	2a01      	cmp	r2, #1
   82af4:	f000 8097 	beq.w	82c26 <_vfiprintf_r+0xa82>
   82af8:	2a02      	cmp	r2, #2
   82afa:	d10d      	bne.n	82b18 <_vfiprintf_r+0x974>
   82afc:	9302      	str	r3, [sp, #8]
   82afe:	2600      	movs	r6, #0
   82b00:	2700      	movs	r7, #0
   82b02:	e5b2      	b.n	8266a <_vfiprintf_r+0x4c6>
   82b04:	aa0f      	add	r2, sp, #60	; 0x3c
   82b06:	9904      	ldr	r1, [sp, #16]
   82b08:	9806      	ldr	r0, [sp, #24]
   82b0a:	f7ff fb0b 	bl	82124 <__sprint_r.part.0>
   82b0e:	2800      	cmp	r0, #0
   82b10:	d0c9      	beq.n	82aa6 <_vfiprintf_r+0x902>
   82b12:	f8dd b010 	ldr.w	fp, [sp, #16]
   82b16:	e797      	b.n	82a48 <_vfiprintf_r+0x8a4>
   82b18:	2600      	movs	r6, #0
   82b1a:	2700      	movs	r7, #0
   82b1c:	9302      	str	r3, [sp, #8]
   82b1e:	4651      	mov	r1, sl
   82b20:	e000      	b.n	82b24 <_vfiprintf_r+0x980>
   82b22:	4659      	mov	r1, fp
   82b24:	08f2      	lsrs	r2, r6, #3
   82b26:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   82b2a:	08f8      	lsrs	r0, r7, #3
   82b2c:	f006 0307 	and.w	r3, r6, #7
   82b30:	4607      	mov	r7, r0
   82b32:	4616      	mov	r6, r2
   82b34:	3330      	adds	r3, #48	; 0x30
   82b36:	ea56 0207 	orrs.w	r2, r6, r7
   82b3a:	f801 3c01 	strb.w	r3, [r1, #-1]
   82b3e:	f101 3bff 	add.w	fp, r1, #4294967295
   82b42:	d1ee      	bne.n	82b22 <_vfiprintf_r+0x97e>
   82b44:	9a02      	ldr	r2, [sp, #8]
   82b46:	07d6      	lsls	r6, r2, #31
   82b48:	f57f ad9f 	bpl.w	8268a <_vfiprintf_r+0x4e6>
   82b4c:	2b30      	cmp	r3, #48	; 0x30
   82b4e:	f43f ad9c 	beq.w	8268a <_vfiprintf_r+0x4e6>
   82b52:	2330      	movs	r3, #48	; 0x30
   82b54:	3902      	subs	r1, #2
   82b56:	f80b 3c01 	strb.w	r3, [fp, #-1]
   82b5a:	ebaa 0301 	sub.w	r3, sl, r1
   82b5e:	9305      	str	r3, [sp, #20]
   82b60:	468b      	mov	fp, r1
   82b62:	e477      	b.n	82454 <_vfiprintf_r+0x2b0>
   82b64:	9b03      	ldr	r3, [sp, #12]
   82b66:	9a08      	ldr	r2, [sp, #32]
   82b68:	428a      	cmp	r2, r1
   82b6a:	bfac      	ite	ge
   82b6c:	189b      	addge	r3, r3, r2
   82b6e:	185b      	addlt	r3, r3, r1
   82b70:	9303      	str	r3, [sp, #12]
   82b72:	e798      	b.n	82aa6 <_vfiprintf_r+0x902>
   82b74:	2202      	movs	r2, #2
   82b76:	e44e      	b.n	82416 <_vfiprintf_r+0x272>
   82b78:	2f00      	cmp	r7, #0
   82b7a:	bf08      	it	eq
   82b7c:	2e0a      	cmpeq	r6, #10
   82b7e:	d351      	bcc.n	82c24 <_vfiprintf_r+0xa80>
   82b80:	46d3      	mov	fp, sl
   82b82:	4630      	mov	r0, r6
   82b84:	4639      	mov	r1, r7
   82b86:	220a      	movs	r2, #10
   82b88:	2300      	movs	r3, #0
   82b8a:	f7fe ff45 	bl	81a18 <__aeabi_uldivmod>
   82b8e:	3230      	adds	r2, #48	; 0x30
   82b90:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82b94:	4630      	mov	r0, r6
   82b96:	4639      	mov	r1, r7
   82b98:	2300      	movs	r3, #0
   82b9a:	220a      	movs	r2, #10
   82b9c:	f7fe ff3c 	bl	81a18 <__aeabi_uldivmod>
   82ba0:	4606      	mov	r6, r0
   82ba2:	460f      	mov	r7, r1
   82ba4:	ea56 0307 	orrs.w	r3, r6, r7
   82ba8:	d1eb      	bne.n	82b82 <_vfiprintf_r+0x9de>
   82baa:	e56e      	b.n	8268a <_vfiprintf_r+0x4e6>
   82bac:	9405      	str	r4, [sp, #20]
   82bae:	46d3      	mov	fp, sl
   82bb0:	e450      	b.n	82454 <_vfiprintf_r+0x2b0>
   82bb2:	aa0f      	add	r2, sp, #60	; 0x3c
   82bb4:	9904      	ldr	r1, [sp, #16]
   82bb6:	9806      	ldr	r0, [sp, #24]
   82bb8:	f7ff fab4 	bl	82124 <__sprint_r.part.0>
   82bbc:	2800      	cmp	r0, #0
   82bbe:	d1a8      	bne.n	82b12 <_vfiprintf_r+0x96e>
   82bc0:	46d1      	mov	r9, sl
   82bc2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82bc4:	e75e      	b.n	82a84 <_vfiprintf_r+0x8e0>
   82bc6:	aa0f      	add	r2, sp, #60	; 0x3c
   82bc8:	9904      	ldr	r1, [sp, #16]
   82bca:	9806      	ldr	r0, [sp, #24]
   82bcc:	f7ff faaa 	bl	82124 <__sprint_r.part.0>
   82bd0:	2800      	cmp	r0, #0
   82bd2:	d19e      	bne.n	82b12 <_vfiprintf_r+0x96e>
   82bd4:	46d1      	mov	r9, sl
   82bd6:	f7ff bbbb 	b.w	82350 <_vfiprintf_r+0x1ac>
   82bda:	bf00      	nop
   82bdc:	0008491c 	.word	0x0008491c
   82be0:	0008490c 	.word	0x0008490c
   82be4:	3104      	adds	r1, #4
   82be6:	6816      	ldr	r6, [r2, #0]
   82be8:	2700      	movs	r7, #0
   82bea:	2201      	movs	r2, #1
   82bec:	9107      	str	r1, [sp, #28]
   82bee:	e412      	b.n	82416 <_vfiprintf_r+0x272>
   82bf0:	9807      	ldr	r0, [sp, #28]
   82bf2:	2700      	movs	r7, #0
   82bf4:	4601      	mov	r1, r0
   82bf6:	3104      	adds	r1, #4
   82bf8:	6806      	ldr	r6, [r0, #0]
   82bfa:	9107      	str	r1, [sp, #28]
   82bfc:	e40b      	b.n	82416 <_vfiprintf_r+0x272>
   82bfe:	680e      	ldr	r6, [r1, #0]
   82c00:	3104      	adds	r1, #4
   82c02:	9107      	str	r1, [sp, #28]
   82c04:	2700      	movs	r7, #0
   82c06:	e592      	b.n	8272e <_vfiprintf_r+0x58a>
   82c08:	6816      	ldr	r6, [r2, #0]
   82c0a:	3204      	adds	r2, #4
   82c0c:	17f7      	asrs	r7, r6, #31
   82c0e:	9207      	str	r2, [sp, #28]
   82c10:	4630      	mov	r0, r6
   82c12:	4639      	mov	r1, r7
   82c14:	e512      	b.n	8263c <_vfiprintf_r+0x498>
   82c16:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82c1a:	f000 fe75 	bl	83908 <__retarget_lock_release_recursive>
   82c1e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   82c22:	e71b      	b.n	82a5c <_vfiprintf_r+0x8b8>
   82c24:	9b02      	ldr	r3, [sp, #8]
   82c26:	9302      	str	r3, [sp, #8]
   82c28:	2301      	movs	r3, #1
   82c2a:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   82c2e:	3630      	adds	r6, #48	; 0x30
   82c30:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   82c34:	9305      	str	r3, [sp, #20]
   82c36:	e40d      	b.n	82454 <_vfiprintf_r+0x2b0>
   82c38:	aa0f      	add	r2, sp, #60	; 0x3c
   82c3a:	9904      	ldr	r1, [sp, #16]
   82c3c:	9806      	ldr	r0, [sp, #24]
   82c3e:	f7ff fa71 	bl	82124 <__sprint_r.part.0>
   82c42:	2800      	cmp	r0, #0
   82c44:	f47f af65 	bne.w	82b12 <_vfiprintf_r+0x96e>
   82c48:	9910      	ldr	r1, [sp, #64]	; 0x40
   82c4a:	46d1      	mov	r9, sl
   82c4c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c4e:	1c48      	adds	r0, r1, #1
   82c50:	e457      	b.n	82502 <_vfiprintf_r+0x35e>
   82c52:	aa0f      	add	r2, sp, #60	; 0x3c
   82c54:	9904      	ldr	r1, [sp, #16]
   82c56:	9806      	ldr	r0, [sp, #24]
   82c58:	f7ff fa64 	bl	82124 <__sprint_r.part.0>
   82c5c:	2800      	cmp	r0, #0
   82c5e:	f47f af58 	bne.w	82b12 <_vfiprintf_r+0x96e>
   82c62:	9910      	ldr	r1, [sp, #64]	; 0x40
   82c64:	46d1      	mov	r9, sl
   82c66:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c68:	1c48      	adds	r0, r1, #1
   82c6a:	e644      	b.n	828f6 <_vfiprintf_r+0x752>
   82c6c:	2a00      	cmp	r2, #0
   82c6e:	f040 8087 	bne.w	82d80 <_vfiprintf_r+0xbdc>
   82c72:	2001      	movs	r0, #1
   82c74:	4611      	mov	r1, r2
   82c76:	46d1      	mov	r9, sl
   82c78:	e641      	b.n	828fe <_vfiprintf_r+0x75a>
   82c7a:	aa0f      	add	r2, sp, #60	; 0x3c
   82c7c:	9904      	ldr	r1, [sp, #16]
   82c7e:	9806      	ldr	r0, [sp, #24]
   82c80:	f7ff fa50 	bl	82124 <__sprint_r.part.0>
   82c84:	2800      	cmp	r0, #0
   82c86:	f47f af44 	bne.w	82b12 <_vfiprintf_r+0x96e>
   82c8a:	9810      	ldr	r0, [sp, #64]	; 0x40
   82c8c:	46d1      	mov	r9, sl
   82c8e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82c90:	3001      	adds	r0, #1
   82c92:	e668      	b.n	82966 <_vfiprintf_r+0x7c2>
   82c94:	46cb      	mov	fp, r9
   82c96:	e6d7      	b.n	82a48 <_vfiprintf_r+0x8a4>
   82c98:	9d07      	ldr	r5, [sp, #28]
   82c9a:	3507      	adds	r5, #7
   82c9c:	f025 0507 	bic.w	r5, r5, #7
   82ca0:	f105 0208 	add.w	r2, r5, #8
   82ca4:	e9d5 0100 	ldrd	r0, r1, [r5]
   82ca8:	9207      	str	r2, [sp, #28]
   82caa:	4606      	mov	r6, r0
   82cac:	460f      	mov	r7, r1
   82cae:	e4c5      	b.n	8263c <_vfiprintf_r+0x498>
   82cb0:	9d07      	ldr	r5, [sp, #28]
   82cb2:	3507      	adds	r5, #7
   82cb4:	f025 0207 	bic.w	r2, r5, #7
   82cb8:	f102 0108 	add.w	r1, r2, #8
   82cbc:	e9d2 6700 	ldrd	r6, r7, [r2]
   82cc0:	9107      	str	r1, [sp, #28]
   82cc2:	2201      	movs	r2, #1
   82cc4:	f7ff bba7 	b.w	82416 <_vfiprintf_r+0x272>
   82cc8:	9d07      	ldr	r5, [sp, #28]
   82cca:	3507      	adds	r5, #7
   82ccc:	f025 0207 	bic.w	r2, r5, #7
   82cd0:	f102 0108 	add.w	r1, r2, #8
   82cd4:	e9d2 6700 	ldrd	r6, r7, [r2]
   82cd8:	9107      	str	r1, [sp, #28]
   82cda:	2200      	movs	r2, #0
   82cdc:	f7ff bb9b 	b.w	82416 <_vfiprintf_r+0x272>
   82ce0:	9d07      	ldr	r5, [sp, #28]
   82ce2:	3507      	adds	r5, #7
   82ce4:	f025 0107 	bic.w	r1, r5, #7
   82ce8:	f101 0008 	add.w	r0, r1, #8
   82cec:	9007      	str	r0, [sp, #28]
   82cee:	e9d1 6700 	ldrd	r6, r7, [r1]
   82cf2:	e51c      	b.n	8272e <_vfiprintf_r+0x58a>
   82cf4:	46d3      	mov	fp, sl
   82cf6:	f7ff bbad 	b.w	82454 <_vfiprintf_r+0x2b0>
   82cfa:	252d      	movs	r5, #45	; 0x2d
   82cfc:	4276      	negs	r6, r6
   82cfe:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82d02:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82d06:	2201      	movs	r2, #1
   82d08:	f7ff bb8a 	b.w	82420 <_vfiprintf_r+0x27c>
   82d0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82d0e:	b9b3      	cbnz	r3, 82d3e <_vfiprintf_r+0xb9a>
   82d10:	4611      	mov	r1, r2
   82d12:	2001      	movs	r0, #1
   82d14:	46d1      	mov	r9, sl
   82d16:	e5f2      	b.n	828fe <_vfiprintf_r+0x75a>
   82d18:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   82d1c:	f000 fdf4 	bl	83908 <__retarget_lock_release_recursive>
   82d20:	f04f 33ff 	mov.w	r3, #4294967295
   82d24:	9303      	str	r3, [sp, #12]
   82d26:	f7ff bb4c 	b.w	823c2 <_vfiprintf_r+0x21e>
   82d2a:	aa0f      	add	r2, sp, #60	; 0x3c
   82d2c:	9904      	ldr	r1, [sp, #16]
   82d2e:	9806      	ldr	r0, [sp, #24]
   82d30:	f7ff f9f8 	bl	82124 <__sprint_r.part.0>
   82d34:	2800      	cmp	r0, #0
   82d36:	f47f aeec 	bne.w	82b12 <_vfiprintf_r+0x96e>
   82d3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d3c:	e6aa      	b.n	82a94 <_vfiprintf_r+0x8f0>
   82d3e:	2202      	movs	r2, #2
   82d40:	ab0e      	add	r3, sp, #56	; 0x38
   82d42:	921d      	str	r2, [sp, #116]	; 0x74
   82d44:	931c      	str	r3, [sp, #112]	; 0x70
   82d46:	2001      	movs	r0, #1
   82d48:	46d1      	mov	r9, sl
   82d4a:	e5d0      	b.n	828ee <_vfiprintf_r+0x74a>
   82d4c:	4d34      	ldr	r5, [pc, #208]	; (82e20 <_vfiprintf_r+0xc7c>)
   82d4e:	e5fd      	b.n	8294c <_vfiprintf_r+0x7a8>
   82d50:	9a07      	ldr	r2, [sp, #28]
   82d52:	4613      	mov	r3, r2
   82d54:	3304      	adds	r3, #4
   82d56:	9307      	str	r3, [sp, #28]
   82d58:	9b03      	ldr	r3, [sp, #12]
   82d5a:	6811      	ldr	r1, [r2, #0]
   82d5c:	17dd      	asrs	r5, r3, #31
   82d5e:	461a      	mov	r2, r3
   82d60:	462b      	mov	r3, r5
   82d62:	e9c1 2300 	strd	r2, r3, [r1]
   82d66:	f7ff ba5a 	b.w	8221e <_vfiprintf_r+0x7a>
   82d6a:	4658      	mov	r0, fp
   82d6c:	9507      	str	r5, [sp, #28]
   82d6e:	9302      	str	r3, [sp, #8]
   82d70:	f7ff f9aa 	bl	820c8 <strlen>
   82d74:	2400      	movs	r4, #0
   82d76:	9005      	str	r0, [sp, #20]
   82d78:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82d7c:	f7ff bb6a 	b.w	82454 <_vfiprintf_r+0x2b0>
   82d80:	aa0f      	add	r2, sp, #60	; 0x3c
   82d82:	9904      	ldr	r1, [sp, #16]
   82d84:	9806      	ldr	r0, [sp, #24]
   82d86:	f7ff f9cd 	bl	82124 <__sprint_r.part.0>
   82d8a:	2800      	cmp	r0, #0
   82d8c:	f47f aec1 	bne.w	82b12 <_vfiprintf_r+0x96e>
   82d90:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d92:	46d1      	mov	r9, sl
   82d94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d96:	1c48      	adds	r0, r1, #1
   82d98:	e5b1      	b.n	828fe <_vfiprintf_r+0x75a>
   82d9a:	9910      	ldr	r1, [sp, #64]	; 0x40
   82d9c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82d9e:	3101      	adds	r1, #1
   82da0:	4e20      	ldr	r6, [pc, #128]	; (82e24 <_vfiprintf_r+0xc80>)
   82da2:	f7ff bb9c 	b.w	824de <_vfiprintf_r+0x33a>
   82da6:	2c06      	cmp	r4, #6
   82da8:	bf28      	it	cs
   82daa:	2406      	movcs	r4, #6
   82dac:	9507      	str	r5, [sp, #28]
   82dae:	9405      	str	r4, [sp, #20]
   82db0:	9401      	str	r4, [sp, #4]
   82db2:	f8df b074 	ldr.w	fp, [pc, #116]	; 82e28 <_vfiprintf_r+0xc84>
   82db6:	e4e3      	b.n	82780 <_vfiprintf_r+0x5dc>
   82db8:	9810      	ldr	r0, [sp, #64]	; 0x40
   82dba:	4e1a      	ldr	r6, [pc, #104]	; (82e24 <_vfiprintf_r+0xc80>)
   82dbc:	3001      	adds	r0, #1
   82dbe:	e60e      	b.n	829de <_vfiprintf_r+0x83a>
   82dc0:	4686      	mov	lr, r0
   82dc2:	4d17      	ldr	r5, [pc, #92]	; (82e20 <_vfiprintf_r+0xc7c>)
   82dc4:	f7ff bbe2 	b.w	8258c <_vfiprintf_r+0x3e8>
   82dc8:	9405      	str	r4, [sp, #20]
   82dca:	9507      	str	r5, [sp, #28]
   82dcc:	9302      	str	r3, [sp, #8]
   82dce:	4604      	mov	r4, r0
   82dd0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82dd4:	f7ff bb3e 	b.w	82454 <_vfiprintf_r+0x2b0>
   82dd8:	9806      	ldr	r0, [sp, #24]
   82dda:	aa0f      	add	r2, sp, #60	; 0x3c
   82ddc:	4659      	mov	r1, fp
   82dde:	f7ff f9a1 	bl	82124 <__sprint_r.part.0>
   82de2:	2800      	cmp	r0, #0
   82de4:	f43f ae2e 	beq.w	82a44 <_vfiprintf_r+0x8a0>
   82de8:	e62e      	b.n	82a48 <_vfiprintf_r+0x8a4>
   82dea:	9907      	ldr	r1, [sp, #28]
   82dec:	f898 2001 	ldrb.w	r2, [r8, #1]
   82df0:	680c      	ldr	r4, [r1, #0]
   82df2:	3104      	adds	r1, #4
   82df4:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82df8:	46b8      	mov	r8, r7
   82dfa:	9107      	str	r1, [sp, #28]
   82dfc:	f7ff ba44 	b.w	82288 <_vfiprintf_r+0xe4>
   82e00:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e04:	e4a7      	b.n	82756 <_vfiprintf_r+0x5b2>
   82e06:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e0a:	e521      	b.n	82850 <_vfiprintf_r+0x6ac>
   82e0c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e10:	e47c      	b.n	8270c <_vfiprintf_r+0x568>
   82e12:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e16:	e43f      	b.n	82698 <_vfiprintf_r+0x4f4>
   82e18:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82e1c:	f7ff bbfa 	b.w	82614 <_vfiprintf_r+0x470>
   82e20:	0008491c 	.word	0x0008491c
   82e24:	0008490c 	.word	0x0008490c
   82e28:	00084904 	.word	0x00084904

00082e2c <__sbprintf>:
   82e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e30:	460c      	mov	r4, r1
   82e32:	f04f 0e00 	mov.w	lr, #0
   82e36:	f44f 6580 	mov.w	r5, #1024	; 0x400
   82e3a:	4606      	mov	r6, r0
   82e3c:	4617      	mov	r7, r2
   82e3e:	4698      	mov	r8, r3
   82e40:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82e42:	89e3      	ldrh	r3, [r4, #14]
   82e44:	8989      	ldrh	r1, [r1, #12]
   82e46:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   82e4a:	f021 0102 	bic.w	r1, r1, #2
   82e4e:	9219      	str	r2, [sp, #100]	; 0x64
   82e50:	f8ad 300e 	strh.w	r3, [sp, #14]
   82e54:	69e2      	ldr	r2, [r4, #28]
   82e56:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82e58:	f8ad 100c 	strh.w	r1, [sp, #12]
   82e5c:	a816      	add	r0, sp, #88	; 0x58
   82e5e:	a91a      	add	r1, sp, #104	; 0x68
   82e60:	f8cd e018 	str.w	lr, [sp, #24]
   82e64:	9207      	str	r2, [sp, #28]
   82e66:	9309      	str	r3, [sp, #36]	; 0x24
   82e68:	9100      	str	r1, [sp, #0]
   82e6a:	9104      	str	r1, [sp, #16]
   82e6c:	9502      	str	r5, [sp, #8]
   82e6e:	9505      	str	r5, [sp, #20]
   82e70:	f000 fd44 	bl	838fc <__retarget_lock_init_recursive>
   82e74:	4643      	mov	r3, r8
   82e76:	463a      	mov	r2, r7
   82e78:	4669      	mov	r1, sp
   82e7a:	4630      	mov	r0, r6
   82e7c:	f7ff f992 	bl	821a4 <_vfiprintf_r>
   82e80:	1e05      	subs	r5, r0, #0
   82e82:	db07      	blt.n	82e94 <__sbprintf+0x68>
   82e84:	4630      	mov	r0, r6
   82e86:	4669      	mov	r1, sp
   82e88:	f000 f924 	bl	830d4 <_fflush_r>
   82e8c:	2800      	cmp	r0, #0
   82e8e:	bf18      	it	ne
   82e90:	f04f 35ff 	movne.w	r5, #4294967295
   82e94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82e98:	065b      	lsls	r3, r3, #25
   82e9a:	d503      	bpl.n	82ea4 <__sbprintf+0x78>
   82e9c:	89a3      	ldrh	r3, [r4, #12]
   82e9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82ea2:	81a3      	strh	r3, [r4, #12]
   82ea4:	9816      	ldr	r0, [sp, #88]	; 0x58
   82ea6:	f000 fd2b 	bl	83900 <__retarget_lock_close_recursive>
   82eaa:	4628      	mov	r0, r5
   82eac:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082eb4 <__swsetup_r>:
   82eb4:	b538      	push	{r3, r4, r5, lr}
   82eb6:	4b30      	ldr	r3, [pc, #192]	; (82f78 <__swsetup_r+0xc4>)
   82eb8:	4605      	mov	r5, r0
   82eba:	6818      	ldr	r0, [r3, #0]
   82ebc:	460c      	mov	r4, r1
   82ebe:	b110      	cbz	r0, 82ec6 <__swsetup_r+0x12>
   82ec0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82ec2:	2b00      	cmp	r3, #0
   82ec4:	d038      	beq.n	82f38 <__swsetup_r+0x84>
   82ec6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82eca:	b293      	uxth	r3, r2
   82ecc:	0718      	lsls	r0, r3, #28
   82ece:	d50c      	bpl.n	82eea <__swsetup_r+0x36>
   82ed0:	6920      	ldr	r0, [r4, #16]
   82ed2:	b1a8      	cbz	r0, 82f00 <__swsetup_r+0x4c>
   82ed4:	f013 0201 	ands.w	r2, r3, #1
   82ed8:	d01e      	beq.n	82f18 <__swsetup_r+0x64>
   82eda:	2200      	movs	r2, #0
   82edc:	6963      	ldr	r3, [r4, #20]
   82ede:	60a2      	str	r2, [r4, #8]
   82ee0:	425b      	negs	r3, r3
   82ee2:	61a3      	str	r3, [r4, #24]
   82ee4:	b1f0      	cbz	r0, 82f24 <__swsetup_r+0x70>
   82ee6:	2000      	movs	r0, #0
   82ee8:	bd38      	pop	{r3, r4, r5, pc}
   82eea:	06d9      	lsls	r1, r3, #27
   82eec:	d53b      	bpl.n	82f66 <__swsetup_r+0xb2>
   82eee:	0758      	lsls	r0, r3, #29
   82ef0:	d425      	bmi.n	82f3e <__swsetup_r+0x8a>
   82ef2:	6920      	ldr	r0, [r4, #16]
   82ef4:	f042 0308 	orr.w	r3, r2, #8
   82ef8:	81a3      	strh	r3, [r4, #12]
   82efa:	b29b      	uxth	r3, r3
   82efc:	2800      	cmp	r0, #0
   82efe:	d1e9      	bne.n	82ed4 <__swsetup_r+0x20>
   82f00:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82f04:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82f08:	d0e4      	beq.n	82ed4 <__swsetup_r+0x20>
   82f0a:	4628      	mov	r0, r5
   82f0c:	4621      	mov	r1, r4
   82f0e:	f000 fd2b 	bl	83968 <__smakebuf_r>
   82f12:	89a3      	ldrh	r3, [r4, #12]
   82f14:	6920      	ldr	r0, [r4, #16]
   82f16:	e7dd      	b.n	82ed4 <__swsetup_r+0x20>
   82f18:	0799      	lsls	r1, r3, #30
   82f1a:	bf58      	it	pl
   82f1c:	6962      	ldrpl	r2, [r4, #20]
   82f1e:	60a2      	str	r2, [r4, #8]
   82f20:	2800      	cmp	r0, #0
   82f22:	d1e0      	bne.n	82ee6 <__swsetup_r+0x32>
   82f24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82f28:	061a      	lsls	r2, r3, #24
   82f2a:	d5dd      	bpl.n	82ee8 <__swsetup_r+0x34>
   82f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82f30:	81a3      	strh	r3, [r4, #12]
   82f32:	f04f 30ff 	mov.w	r0, #4294967295
   82f36:	bd38      	pop	{r3, r4, r5, pc}
   82f38:	f000 f924 	bl	83184 <__sinit>
   82f3c:	e7c3      	b.n	82ec6 <__swsetup_r+0x12>
   82f3e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82f40:	b151      	cbz	r1, 82f58 <__swsetup_r+0xa4>
   82f42:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82f46:	4299      	cmp	r1, r3
   82f48:	d004      	beq.n	82f54 <__swsetup_r+0xa0>
   82f4a:	4628      	mov	r0, r5
   82f4c:	f000 fa40 	bl	833d0 <_free_r>
   82f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82f54:	2300      	movs	r3, #0
   82f56:	6323      	str	r3, [r4, #48]	; 0x30
   82f58:	2300      	movs	r3, #0
   82f5a:	6920      	ldr	r0, [r4, #16]
   82f5c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   82f60:	e884 0009 	stmia.w	r4, {r0, r3}
   82f64:	e7c6      	b.n	82ef4 <__swsetup_r+0x40>
   82f66:	2309      	movs	r3, #9
   82f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   82f6c:	602b      	str	r3, [r5, #0]
   82f6e:	f04f 30ff 	mov.w	r0, #4294967295
   82f72:	81a2      	strh	r2, [r4, #12]
   82f74:	bd38      	pop	{r3, r4, r5, pc}
   82f76:	bf00      	nop
   82f78:	20070140 	.word	0x20070140

00082f7c <register_fini>:
   82f7c:	4b02      	ldr	r3, [pc, #8]	; (82f88 <register_fini+0xc>)
   82f7e:	b113      	cbz	r3, 82f86 <register_fini+0xa>
   82f80:	4802      	ldr	r0, [pc, #8]	; (82f8c <register_fini+0x10>)
   82f82:	f000 b805 	b.w	82f90 <atexit>
   82f86:	4770      	bx	lr
   82f88:	00000000 	.word	0x00000000
   82f8c:	000831fd 	.word	0x000831fd

00082f90 <atexit>:
   82f90:	2300      	movs	r3, #0
   82f92:	4601      	mov	r1, r0
   82f94:	461a      	mov	r2, r3
   82f96:	4618      	mov	r0, r3
   82f98:	f001 bb56 	b.w	84648 <__register_exitproc>

00082f9c <__sflush_r>:
   82f9c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82fa4:	b29a      	uxth	r2, r3
   82fa6:	460d      	mov	r5, r1
   82fa8:	0711      	lsls	r1, r2, #28
   82faa:	4680      	mov	r8, r0
   82fac:	d43a      	bmi.n	83024 <__sflush_r+0x88>
   82fae:	686a      	ldr	r2, [r5, #4]
   82fb0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82fb4:	2a00      	cmp	r2, #0
   82fb6:	81ab      	strh	r3, [r5, #12]
   82fb8:	dd70      	ble.n	8309c <__sflush_r+0x100>
   82fba:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82fbc:	2c00      	cmp	r4, #0
   82fbe:	d04a      	beq.n	83056 <__sflush_r+0xba>
   82fc0:	2200      	movs	r2, #0
   82fc2:	b29b      	uxth	r3, r3
   82fc4:	f8d8 6000 	ldr.w	r6, [r8]
   82fc8:	f8c8 2000 	str.w	r2, [r8]
   82fcc:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82fd0:	d068      	beq.n	830a4 <__sflush_r+0x108>
   82fd2:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82fd4:	075f      	lsls	r7, r3, #29
   82fd6:	d505      	bpl.n	82fe4 <__sflush_r+0x48>
   82fd8:	6869      	ldr	r1, [r5, #4]
   82fda:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82fdc:	1a52      	subs	r2, r2, r1
   82fde:	b10b      	cbz	r3, 82fe4 <__sflush_r+0x48>
   82fe0:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82fe2:	1ad2      	subs	r2, r2, r3
   82fe4:	2300      	movs	r3, #0
   82fe6:	69e9      	ldr	r1, [r5, #28]
   82fe8:	4640      	mov	r0, r8
   82fea:	47a0      	blx	r4
   82fec:	1c44      	adds	r4, r0, #1
   82fee:	d03d      	beq.n	8306c <__sflush_r+0xd0>
   82ff0:	2100      	movs	r1, #0
   82ff2:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82ff6:	692a      	ldr	r2, [r5, #16]
   82ff8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82ffc:	81ab      	strh	r3, [r5, #12]
   82ffe:	04db      	lsls	r3, r3, #19
   83000:	6069      	str	r1, [r5, #4]
   83002:	602a      	str	r2, [r5, #0]
   83004:	d448      	bmi.n	83098 <__sflush_r+0xfc>
   83006:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83008:	f8c8 6000 	str.w	r6, [r8]
   8300c:	b319      	cbz	r1, 83056 <__sflush_r+0xba>
   8300e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83012:	4299      	cmp	r1, r3
   83014:	d002      	beq.n	8301c <__sflush_r+0x80>
   83016:	4640      	mov	r0, r8
   83018:	f000 f9da 	bl	833d0 <_free_r>
   8301c:	2000      	movs	r0, #0
   8301e:	6328      	str	r0, [r5, #48]	; 0x30
   83020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83024:	692e      	ldr	r6, [r5, #16]
   83026:	b1b6      	cbz	r6, 83056 <__sflush_r+0xba>
   83028:	0791      	lsls	r1, r2, #30
   8302a:	bf18      	it	ne
   8302c:	2300      	movne	r3, #0
   8302e:	682c      	ldr	r4, [r5, #0]
   83030:	bf08      	it	eq
   83032:	696b      	ldreq	r3, [r5, #20]
   83034:	602e      	str	r6, [r5, #0]
   83036:	1ba4      	subs	r4, r4, r6
   83038:	60ab      	str	r3, [r5, #8]
   8303a:	e00a      	b.n	83052 <__sflush_r+0xb6>
   8303c:	4623      	mov	r3, r4
   8303e:	4632      	mov	r2, r6
   83040:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83042:	69e9      	ldr	r1, [r5, #28]
   83044:	4640      	mov	r0, r8
   83046:	47b8      	blx	r7
   83048:	2800      	cmp	r0, #0
   8304a:	eba4 0400 	sub.w	r4, r4, r0
   8304e:	4406      	add	r6, r0
   83050:	dd04      	ble.n	8305c <__sflush_r+0xc0>
   83052:	2c00      	cmp	r4, #0
   83054:	dcf2      	bgt.n	8303c <__sflush_r+0xa0>
   83056:	2000      	movs	r0, #0
   83058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8305c:	89ab      	ldrh	r3, [r5, #12]
   8305e:	f04f 30ff 	mov.w	r0, #4294967295
   83062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83066:	81ab      	strh	r3, [r5, #12]
   83068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8306c:	f8d8 4000 	ldr.w	r4, [r8]
   83070:	2c1d      	cmp	r4, #29
   83072:	d8f3      	bhi.n	8305c <__sflush_r+0xc0>
   83074:	4b16      	ldr	r3, [pc, #88]	; (830d0 <__sflush_r+0x134>)
   83076:	40e3      	lsrs	r3, r4
   83078:	43db      	mvns	r3, r3
   8307a:	f013 0301 	ands.w	r3, r3, #1
   8307e:	d1ed      	bne.n	8305c <__sflush_r+0xc0>
   83080:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83084:	6929      	ldr	r1, [r5, #16]
   83086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   8308a:	81aa      	strh	r2, [r5, #12]
   8308c:	04d2      	lsls	r2, r2, #19
   8308e:	606b      	str	r3, [r5, #4]
   83090:	6029      	str	r1, [r5, #0]
   83092:	d5b8      	bpl.n	83006 <__sflush_r+0x6a>
   83094:	2c00      	cmp	r4, #0
   83096:	d1b6      	bne.n	83006 <__sflush_r+0x6a>
   83098:	6528      	str	r0, [r5, #80]	; 0x50
   8309a:	e7b4      	b.n	83006 <__sflush_r+0x6a>
   8309c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   8309e:	2a00      	cmp	r2, #0
   830a0:	dc8b      	bgt.n	82fba <__sflush_r+0x1e>
   830a2:	e7d8      	b.n	83056 <__sflush_r+0xba>
   830a4:	2301      	movs	r3, #1
   830a6:	69e9      	ldr	r1, [r5, #28]
   830a8:	4640      	mov	r0, r8
   830aa:	47a0      	blx	r4
   830ac:	1c43      	adds	r3, r0, #1
   830ae:	4602      	mov	r2, r0
   830b0:	d002      	beq.n	830b8 <__sflush_r+0x11c>
   830b2:	89ab      	ldrh	r3, [r5, #12]
   830b4:	6aac      	ldr	r4, [r5, #40]	; 0x28
   830b6:	e78d      	b.n	82fd4 <__sflush_r+0x38>
   830b8:	f8d8 3000 	ldr.w	r3, [r8]
   830bc:	2b00      	cmp	r3, #0
   830be:	d0f8      	beq.n	830b2 <__sflush_r+0x116>
   830c0:	2b1d      	cmp	r3, #29
   830c2:	d001      	beq.n	830c8 <__sflush_r+0x12c>
   830c4:	2b16      	cmp	r3, #22
   830c6:	d1c9      	bne.n	8305c <__sflush_r+0xc0>
   830c8:	f8c8 6000 	str.w	r6, [r8]
   830cc:	e7c3      	b.n	83056 <__sflush_r+0xba>
   830ce:	bf00      	nop
   830d0:	20400001 	.word	0x20400001

000830d4 <_fflush_r>:
   830d4:	b538      	push	{r3, r4, r5, lr}
   830d6:	460d      	mov	r5, r1
   830d8:	4604      	mov	r4, r0
   830da:	b108      	cbz	r0, 830e0 <_fflush_r+0xc>
   830dc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   830de:	b1bb      	cbz	r3, 83110 <_fflush_r+0x3c>
   830e0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   830e4:	b188      	cbz	r0, 8310a <_fflush_r+0x36>
   830e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   830e8:	07db      	lsls	r3, r3, #31
   830ea:	d401      	bmi.n	830f0 <_fflush_r+0x1c>
   830ec:	0581      	lsls	r1, r0, #22
   830ee:	d517      	bpl.n	83120 <_fflush_r+0x4c>
   830f0:	4620      	mov	r0, r4
   830f2:	4629      	mov	r1, r5
   830f4:	f7ff ff52 	bl	82f9c <__sflush_r>
   830f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   830fa:	4604      	mov	r4, r0
   830fc:	07da      	lsls	r2, r3, #31
   830fe:	d402      	bmi.n	83106 <_fflush_r+0x32>
   83100:	89ab      	ldrh	r3, [r5, #12]
   83102:	059b      	lsls	r3, r3, #22
   83104:	d507      	bpl.n	83116 <_fflush_r+0x42>
   83106:	4620      	mov	r0, r4
   83108:	bd38      	pop	{r3, r4, r5, pc}
   8310a:	4604      	mov	r4, r0
   8310c:	4620      	mov	r0, r4
   8310e:	bd38      	pop	{r3, r4, r5, pc}
   83110:	f000 f838 	bl	83184 <__sinit>
   83114:	e7e4      	b.n	830e0 <_fflush_r+0xc>
   83116:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83118:	f000 fbf6 	bl	83908 <__retarget_lock_release_recursive>
   8311c:	4620      	mov	r0, r4
   8311e:	bd38      	pop	{r3, r4, r5, pc}
   83120:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83122:	f000 fbef 	bl	83904 <__retarget_lock_acquire_recursive>
   83126:	e7e3      	b.n	830f0 <_fflush_r+0x1c>

00083128 <_cleanup_r>:
   83128:	4901      	ldr	r1, [pc, #4]	; (83130 <_cleanup_r+0x8>)
   8312a:	f000 bbb1 	b.w	83890 <_fwalk_reent>
   8312e:	bf00      	nop
   83130:	00084731 	.word	0x00084731

00083134 <std.isra.0>:
   83134:	2300      	movs	r3, #0
   83136:	b510      	push	{r4, lr}
   83138:	4604      	mov	r4, r0
   8313a:	8181      	strh	r1, [r0, #12]
   8313c:	81c2      	strh	r2, [r0, #14]
   8313e:	6003      	str	r3, [r0, #0]
   83140:	6043      	str	r3, [r0, #4]
   83142:	6083      	str	r3, [r0, #8]
   83144:	6643      	str	r3, [r0, #100]	; 0x64
   83146:	6103      	str	r3, [r0, #16]
   83148:	6143      	str	r3, [r0, #20]
   8314a:	6183      	str	r3, [r0, #24]
   8314c:	4619      	mov	r1, r3
   8314e:	2208      	movs	r2, #8
   83150:	305c      	adds	r0, #92	; 0x5c
   83152:	f7fe fe9b 	bl	81e8c <memset>
   83156:	4807      	ldr	r0, [pc, #28]	; (83174 <std.isra.0+0x40>)
   83158:	4907      	ldr	r1, [pc, #28]	; (83178 <std.isra.0+0x44>)
   8315a:	4a08      	ldr	r2, [pc, #32]	; (8317c <std.isra.0+0x48>)
   8315c:	4b08      	ldr	r3, [pc, #32]	; (83180 <std.isra.0+0x4c>)
   8315e:	6220      	str	r0, [r4, #32]
   83160:	61e4      	str	r4, [r4, #28]
   83162:	6261      	str	r1, [r4, #36]	; 0x24
   83164:	62a2      	str	r2, [r4, #40]	; 0x28
   83166:	62e3      	str	r3, [r4, #44]	; 0x2c
   83168:	f104 0058 	add.w	r0, r4, #88	; 0x58
   8316c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83170:	f000 bbc4 	b.w	838fc <__retarget_lock_init_recursive>
   83174:	00084479 	.word	0x00084479
   83178:	0008449d 	.word	0x0008449d
   8317c:	000844d9 	.word	0x000844d9
   83180:	000844f9 	.word	0x000844f9

00083184 <__sinit>:
   83184:	b510      	push	{r4, lr}
   83186:	4604      	mov	r4, r0
   83188:	4814      	ldr	r0, [pc, #80]	; (831dc <__sinit+0x58>)
   8318a:	f000 fbbb 	bl	83904 <__retarget_lock_acquire_recursive>
   8318e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83190:	b9fa      	cbnz	r2, 831d2 <__sinit+0x4e>
   83192:	2003      	movs	r0, #3
   83194:	4912      	ldr	r1, [pc, #72]	; (831e0 <__sinit+0x5c>)
   83196:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   8319a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   8319e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   831a2:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   831a6:	63e1      	str	r1, [r4, #60]	; 0x3c
   831a8:	6860      	ldr	r0, [r4, #4]
   831aa:	2104      	movs	r1, #4
   831ac:	f7ff ffc2 	bl	83134 <std.isra.0>
   831b0:	68a0      	ldr	r0, [r4, #8]
   831b2:	2201      	movs	r2, #1
   831b4:	2109      	movs	r1, #9
   831b6:	f7ff ffbd 	bl	83134 <std.isra.0>
   831ba:	68e0      	ldr	r0, [r4, #12]
   831bc:	2202      	movs	r2, #2
   831be:	2112      	movs	r1, #18
   831c0:	f7ff ffb8 	bl	83134 <std.isra.0>
   831c4:	2301      	movs	r3, #1
   831c6:	4805      	ldr	r0, [pc, #20]	; (831dc <__sinit+0x58>)
   831c8:	63a3      	str	r3, [r4, #56]	; 0x38
   831ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   831ce:	f000 bb9b 	b.w	83908 <__retarget_lock_release_recursive>
   831d2:	4802      	ldr	r0, [pc, #8]	; (831dc <__sinit+0x58>)
   831d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   831d8:	f000 bb96 	b.w	83908 <__retarget_lock_release_recursive>
   831dc:	20070c78 	.word	0x20070c78
   831e0:	00083129 	.word	0x00083129

000831e4 <__sfp_lock_acquire>:
   831e4:	4801      	ldr	r0, [pc, #4]	; (831ec <__sfp_lock_acquire+0x8>)
   831e6:	f000 bb8d 	b.w	83904 <__retarget_lock_acquire_recursive>
   831ea:	bf00      	nop
   831ec:	20070c8c 	.word	0x20070c8c

000831f0 <__sfp_lock_release>:
   831f0:	4801      	ldr	r0, [pc, #4]	; (831f8 <__sfp_lock_release+0x8>)
   831f2:	f000 bb89 	b.w	83908 <__retarget_lock_release_recursive>
   831f6:	bf00      	nop
   831f8:	20070c8c 	.word	0x20070c8c

000831fc <__libc_fini_array>:
   831fc:	b538      	push	{r3, r4, r5, lr}
   831fe:	4c0a      	ldr	r4, [pc, #40]	; (83228 <__libc_fini_array+0x2c>)
   83200:	4d0a      	ldr	r5, [pc, #40]	; (8322c <__libc_fini_array+0x30>)
   83202:	1b64      	subs	r4, r4, r5
   83204:	10a4      	asrs	r4, r4, #2
   83206:	d00a      	beq.n	8321e <__libc_fini_array+0x22>
   83208:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   8320c:	3b01      	subs	r3, #1
   8320e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83212:	3c01      	subs	r4, #1
   83214:	f855 3904 	ldr.w	r3, [r5], #-4
   83218:	4798      	blx	r3
   8321a:	2c00      	cmp	r4, #0
   8321c:	d1f9      	bne.n	83212 <__libc_fini_array+0x16>
   8321e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83222:	f001 bc17 	b.w	84a54 <_fini>
   83226:	bf00      	nop
   83228:	00084a64 	.word	0x00084a64
   8322c:	00084a60 	.word	0x00084a60

00083230 <__fputwc>:
   83230:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83234:	b083      	sub	sp, #12
   83236:	4607      	mov	r7, r0
   83238:	4688      	mov	r8, r1
   8323a:	4614      	mov	r4, r2
   8323c:	f000 fb50 	bl	838e0 <__locale_mb_cur_max>
   83240:	2801      	cmp	r0, #1
   83242:	d033      	beq.n	832ac <__fputwc+0x7c>
   83244:	4642      	mov	r2, r8
   83246:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8324a:	a901      	add	r1, sp, #4
   8324c:	4638      	mov	r0, r7
   8324e:	f001 f9af 	bl	845b0 <_wcrtomb_r>
   83252:	1c42      	adds	r2, r0, #1
   83254:	4606      	mov	r6, r0
   83256:	d022      	beq.n	8329e <__fputwc+0x6e>
   83258:	b390      	cbz	r0, 832c0 <__fputwc+0x90>
   8325a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8325e:	2500      	movs	r5, #0
   83260:	f10d 0904 	add.w	r9, sp, #4
   83264:	e008      	b.n	83278 <__fputwc+0x48>
   83266:	6823      	ldr	r3, [r4, #0]
   83268:	1c5a      	adds	r2, r3, #1
   8326a:	6022      	str	r2, [r4, #0]
   8326c:	7019      	strb	r1, [r3, #0]
   8326e:	3501      	adds	r5, #1
   83270:	42b5      	cmp	r5, r6
   83272:	d225      	bcs.n	832c0 <__fputwc+0x90>
   83274:	f815 1009 	ldrb.w	r1, [r5, r9]
   83278:	68a3      	ldr	r3, [r4, #8]
   8327a:	3b01      	subs	r3, #1
   8327c:	2b00      	cmp	r3, #0
   8327e:	60a3      	str	r3, [r4, #8]
   83280:	daf1      	bge.n	83266 <__fputwc+0x36>
   83282:	69a2      	ldr	r2, [r4, #24]
   83284:	4293      	cmp	r3, r2
   83286:	db01      	blt.n	8328c <__fputwc+0x5c>
   83288:	290a      	cmp	r1, #10
   8328a:	d1ec      	bne.n	83266 <__fputwc+0x36>
   8328c:	4622      	mov	r2, r4
   8328e:	4638      	mov	r0, r7
   83290:	f001 f936 	bl	84500 <__swbuf_r>
   83294:	1c43      	adds	r3, r0, #1
   83296:	d1ea      	bne.n	8326e <__fputwc+0x3e>
   83298:	b003      	add	sp, #12
   8329a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8329e:	89a3      	ldrh	r3, [r4, #12]
   832a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   832a4:	81a3      	strh	r3, [r4, #12]
   832a6:	b003      	add	sp, #12
   832a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   832ac:	f108 33ff 	add.w	r3, r8, #4294967295
   832b0:	2bfe      	cmp	r3, #254	; 0xfe
   832b2:	d8c7      	bhi.n	83244 <__fputwc+0x14>
   832b4:	fa5f f188 	uxtb.w	r1, r8
   832b8:	4606      	mov	r6, r0
   832ba:	f88d 1004 	strb.w	r1, [sp, #4]
   832be:	e7ce      	b.n	8325e <__fputwc+0x2e>
   832c0:	4640      	mov	r0, r8
   832c2:	b003      	add	sp, #12
   832c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000832c8 <_fputwc_r>:
   832c8:	b530      	push	{r4, r5, lr}
   832ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
   832cc:	4614      	mov	r4, r2
   832ce:	f013 0f01 	tst.w	r3, #1
   832d2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   832d6:	b083      	sub	sp, #12
   832d8:	4605      	mov	r5, r0
   832da:	b29a      	uxth	r2, r3
   832dc:	d101      	bne.n	832e2 <_fputwc_r+0x1a>
   832de:	0590      	lsls	r0, r2, #22
   832e0:	d51c      	bpl.n	8331c <_fputwc_r+0x54>
   832e2:	0490      	lsls	r0, r2, #18
   832e4:	d406      	bmi.n	832f4 <_fputwc_r+0x2c>
   832e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   832e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   832ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   832f0:	81a3      	strh	r3, [r4, #12]
   832f2:	6662      	str	r2, [r4, #100]	; 0x64
   832f4:	4628      	mov	r0, r5
   832f6:	4622      	mov	r2, r4
   832f8:	f7ff ff9a 	bl	83230 <__fputwc>
   832fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   832fe:	4605      	mov	r5, r0
   83300:	07da      	lsls	r2, r3, #31
   83302:	d402      	bmi.n	8330a <_fputwc_r+0x42>
   83304:	89a3      	ldrh	r3, [r4, #12]
   83306:	059b      	lsls	r3, r3, #22
   83308:	d502      	bpl.n	83310 <_fputwc_r+0x48>
   8330a:	4628      	mov	r0, r5
   8330c:	b003      	add	sp, #12
   8330e:	bd30      	pop	{r4, r5, pc}
   83310:	6da0      	ldr	r0, [r4, #88]	; 0x58
   83312:	f000 faf9 	bl	83908 <__retarget_lock_release_recursive>
   83316:	4628      	mov	r0, r5
   83318:	b003      	add	sp, #12
   8331a:	bd30      	pop	{r4, r5, pc}
   8331c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8331e:	9101      	str	r1, [sp, #4]
   83320:	f000 faf0 	bl	83904 <__retarget_lock_acquire_recursive>
   83324:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83328:	9901      	ldr	r1, [sp, #4]
   8332a:	b29a      	uxth	r2, r3
   8332c:	e7d9      	b.n	832e2 <_fputwc_r+0x1a>
   8332e:	bf00      	nop

00083330 <_malloc_trim_r>:
   83330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83332:	460c      	mov	r4, r1
   83334:	4f23      	ldr	r7, [pc, #140]	; (833c4 <_malloc_trim_r+0x94>)
   83336:	4606      	mov	r6, r0
   83338:	f000 feca 	bl	840d0 <__malloc_lock>
   8333c:	68bb      	ldr	r3, [r7, #8]
   8333e:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   83342:	685d      	ldr	r5, [r3, #4]
   83344:	310f      	adds	r1, #15
   83346:	f025 0503 	bic.w	r5, r5, #3
   8334a:	4429      	add	r1, r5
   8334c:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   83350:	f021 010f 	bic.w	r1, r1, #15
   83354:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   83358:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8335c:	db07      	blt.n	8336e <_malloc_trim_r+0x3e>
   8335e:	2100      	movs	r1, #0
   83360:	4630      	mov	r0, r6
   83362:	f001 f877 	bl	84454 <_sbrk_r>
   83366:	68bb      	ldr	r3, [r7, #8]
   83368:	442b      	add	r3, r5
   8336a:	4298      	cmp	r0, r3
   8336c:	d004      	beq.n	83378 <_malloc_trim_r+0x48>
   8336e:	4630      	mov	r0, r6
   83370:	f000 feb4 	bl	840dc <__malloc_unlock>
   83374:	2000      	movs	r0, #0
   83376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83378:	4261      	negs	r1, r4
   8337a:	4630      	mov	r0, r6
   8337c:	f001 f86a 	bl	84454 <_sbrk_r>
   83380:	3001      	adds	r0, #1
   83382:	d00d      	beq.n	833a0 <_malloc_trim_r+0x70>
   83384:	4b10      	ldr	r3, [pc, #64]	; (833c8 <_malloc_trim_r+0x98>)
   83386:	68ba      	ldr	r2, [r7, #8]
   83388:	6819      	ldr	r1, [r3, #0]
   8338a:	1b2d      	subs	r5, r5, r4
   8338c:	f045 0501 	orr.w	r5, r5, #1
   83390:	4630      	mov	r0, r6
   83392:	1b09      	subs	r1, r1, r4
   83394:	6055      	str	r5, [r2, #4]
   83396:	6019      	str	r1, [r3, #0]
   83398:	f000 fea0 	bl	840dc <__malloc_unlock>
   8339c:	2001      	movs	r0, #1
   8339e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   833a0:	2100      	movs	r1, #0
   833a2:	4630      	mov	r0, r6
   833a4:	f001 f856 	bl	84454 <_sbrk_r>
   833a8:	68ba      	ldr	r2, [r7, #8]
   833aa:	1a83      	subs	r3, r0, r2
   833ac:	2b0f      	cmp	r3, #15
   833ae:	ddde      	ble.n	8336e <_malloc_trim_r+0x3e>
   833b0:	4c06      	ldr	r4, [pc, #24]	; (833cc <_malloc_trim_r+0x9c>)
   833b2:	4905      	ldr	r1, [pc, #20]	; (833c8 <_malloc_trim_r+0x98>)
   833b4:	6824      	ldr	r4, [r4, #0]
   833b6:	f043 0301 	orr.w	r3, r3, #1
   833ba:	1b00      	subs	r0, r0, r4
   833bc:	6053      	str	r3, [r2, #4]
   833be:	6008      	str	r0, [r1, #0]
   833c0:	e7d5      	b.n	8336e <_malloc_trim_r+0x3e>
   833c2:	bf00      	nop
   833c4:	200706e0 	.word	0x200706e0
   833c8:	20070c0c 	.word	0x20070c0c
   833cc:	20070ae8 	.word	0x20070ae8

000833d0 <_free_r>:
   833d0:	2900      	cmp	r1, #0
   833d2:	d044      	beq.n	8345e <_free_r+0x8e>
   833d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833d8:	460d      	mov	r5, r1
   833da:	4680      	mov	r8, r0
   833dc:	f000 fe78 	bl	840d0 <__malloc_lock>
   833e0:	f855 7c04 	ldr.w	r7, [r5, #-4]
   833e4:	4969      	ldr	r1, [pc, #420]	; (8358c <_free_r+0x1bc>)
   833e6:	f1a5 0408 	sub.w	r4, r5, #8
   833ea:	f027 0301 	bic.w	r3, r7, #1
   833ee:	18e2      	adds	r2, r4, r3
   833f0:	688e      	ldr	r6, [r1, #8]
   833f2:	6850      	ldr	r0, [r2, #4]
   833f4:	42b2      	cmp	r2, r6
   833f6:	f020 0003 	bic.w	r0, r0, #3
   833fa:	d05e      	beq.n	834ba <_free_r+0xea>
   833fc:	07fe      	lsls	r6, r7, #31
   833fe:	6050      	str	r0, [r2, #4]
   83400:	d40b      	bmi.n	8341a <_free_r+0x4a>
   83402:	f855 7c08 	ldr.w	r7, [r5, #-8]
   83406:	f101 0e08 	add.w	lr, r1, #8
   8340a:	1be4      	subs	r4, r4, r7
   8340c:	68a5      	ldr	r5, [r4, #8]
   8340e:	443b      	add	r3, r7
   83410:	4575      	cmp	r5, lr
   83412:	d06d      	beq.n	834f0 <_free_r+0x120>
   83414:	68e7      	ldr	r7, [r4, #12]
   83416:	60ef      	str	r7, [r5, #12]
   83418:	60bd      	str	r5, [r7, #8]
   8341a:	1815      	adds	r5, r2, r0
   8341c:	686d      	ldr	r5, [r5, #4]
   8341e:	07ed      	lsls	r5, r5, #31
   83420:	d53e      	bpl.n	834a0 <_free_r+0xd0>
   83422:	f043 0201 	orr.w	r2, r3, #1
   83426:	6062      	str	r2, [r4, #4]
   83428:	50e3      	str	r3, [r4, r3]
   8342a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   8342e:	d217      	bcs.n	83460 <_free_r+0x90>
   83430:	2201      	movs	r2, #1
   83432:	08db      	lsrs	r3, r3, #3
   83434:	1098      	asrs	r0, r3, #2
   83436:	684d      	ldr	r5, [r1, #4]
   83438:	4413      	add	r3, r2
   8343a:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   8343e:	4082      	lsls	r2, r0
   83440:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   83444:	432a      	orrs	r2, r5
   83446:	3808      	subs	r0, #8
   83448:	60e0      	str	r0, [r4, #12]
   8344a:	60a7      	str	r7, [r4, #8]
   8344c:	604a      	str	r2, [r1, #4]
   8344e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   83452:	60fc      	str	r4, [r7, #12]
   83454:	4640      	mov	r0, r8
   83456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8345a:	f000 be3f 	b.w	840dc <__malloc_unlock>
   8345e:	4770      	bx	lr
   83460:	0a5a      	lsrs	r2, r3, #9
   83462:	2a04      	cmp	r2, #4
   83464:	d852      	bhi.n	8350c <_free_r+0x13c>
   83466:	099a      	lsrs	r2, r3, #6
   83468:	f102 0739 	add.w	r7, r2, #57	; 0x39
   8346c:	00ff      	lsls	r7, r7, #3
   8346e:	f102 0538 	add.w	r5, r2, #56	; 0x38
   83472:	19c8      	adds	r0, r1, r7
   83474:	59ca      	ldr	r2, [r1, r7]
   83476:	3808      	subs	r0, #8
   83478:	4290      	cmp	r0, r2
   8347a:	d04f      	beq.n	8351c <_free_r+0x14c>
   8347c:	6851      	ldr	r1, [r2, #4]
   8347e:	f021 0103 	bic.w	r1, r1, #3
   83482:	428b      	cmp	r3, r1
   83484:	d232      	bcs.n	834ec <_free_r+0x11c>
   83486:	6892      	ldr	r2, [r2, #8]
   83488:	4290      	cmp	r0, r2
   8348a:	d1f7      	bne.n	8347c <_free_r+0xac>
   8348c:	68c3      	ldr	r3, [r0, #12]
   8348e:	60a0      	str	r0, [r4, #8]
   83490:	60e3      	str	r3, [r4, #12]
   83492:	609c      	str	r4, [r3, #8]
   83494:	60c4      	str	r4, [r0, #12]
   83496:	4640      	mov	r0, r8
   83498:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8349c:	f000 be1e 	b.w	840dc <__malloc_unlock>
   834a0:	6895      	ldr	r5, [r2, #8]
   834a2:	4f3b      	ldr	r7, [pc, #236]	; (83590 <_free_r+0x1c0>)
   834a4:	4403      	add	r3, r0
   834a6:	42bd      	cmp	r5, r7
   834a8:	d040      	beq.n	8352c <_free_r+0x15c>
   834aa:	68d0      	ldr	r0, [r2, #12]
   834ac:	f043 0201 	orr.w	r2, r3, #1
   834b0:	60e8      	str	r0, [r5, #12]
   834b2:	6085      	str	r5, [r0, #8]
   834b4:	6062      	str	r2, [r4, #4]
   834b6:	50e3      	str	r3, [r4, r3]
   834b8:	e7b7      	b.n	8342a <_free_r+0x5a>
   834ba:	07ff      	lsls	r7, r7, #31
   834bc:	4403      	add	r3, r0
   834be:	d407      	bmi.n	834d0 <_free_r+0x100>
   834c0:	f855 5c08 	ldr.w	r5, [r5, #-8]
   834c4:	1b64      	subs	r4, r4, r5
   834c6:	68e2      	ldr	r2, [r4, #12]
   834c8:	68a0      	ldr	r0, [r4, #8]
   834ca:	442b      	add	r3, r5
   834cc:	60c2      	str	r2, [r0, #12]
   834ce:	6090      	str	r0, [r2, #8]
   834d0:	4a30      	ldr	r2, [pc, #192]	; (83594 <_free_r+0x1c4>)
   834d2:	f043 0001 	orr.w	r0, r3, #1
   834d6:	6812      	ldr	r2, [r2, #0]
   834d8:	6060      	str	r0, [r4, #4]
   834da:	4293      	cmp	r3, r2
   834dc:	608c      	str	r4, [r1, #8]
   834de:	d3b9      	bcc.n	83454 <_free_r+0x84>
   834e0:	4b2d      	ldr	r3, [pc, #180]	; (83598 <_free_r+0x1c8>)
   834e2:	4640      	mov	r0, r8
   834e4:	6819      	ldr	r1, [r3, #0]
   834e6:	f7ff ff23 	bl	83330 <_malloc_trim_r>
   834ea:	e7b3      	b.n	83454 <_free_r+0x84>
   834ec:	4610      	mov	r0, r2
   834ee:	e7cd      	b.n	8348c <_free_r+0xbc>
   834f0:	1811      	adds	r1, r2, r0
   834f2:	6849      	ldr	r1, [r1, #4]
   834f4:	07c9      	lsls	r1, r1, #31
   834f6:	d444      	bmi.n	83582 <_free_r+0x1b2>
   834f8:	6891      	ldr	r1, [r2, #8]
   834fa:	4403      	add	r3, r0
   834fc:	68d2      	ldr	r2, [r2, #12]
   834fe:	f043 0001 	orr.w	r0, r3, #1
   83502:	60ca      	str	r2, [r1, #12]
   83504:	6091      	str	r1, [r2, #8]
   83506:	6060      	str	r0, [r4, #4]
   83508:	50e3      	str	r3, [r4, r3]
   8350a:	e7a3      	b.n	83454 <_free_r+0x84>
   8350c:	2a14      	cmp	r2, #20
   8350e:	d816      	bhi.n	8353e <_free_r+0x16e>
   83510:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   83514:	00ff      	lsls	r7, r7, #3
   83516:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   8351a:	e7aa      	b.n	83472 <_free_r+0xa2>
   8351c:	2301      	movs	r3, #1
   8351e:	10aa      	asrs	r2, r5, #2
   83520:	684d      	ldr	r5, [r1, #4]
   83522:	4093      	lsls	r3, r2
   83524:	432b      	orrs	r3, r5
   83526:	604b      	str	r3, [r1, #4]
   83528:	4603      	mov	r3, r0
   8352a:	e7b0      	b.n	8348e <_free_r+0xbe>
   8352c:	f043 0201 	orr.w	r2, r3, #1
   83530:	614c      	str	r4, [r1, #20]
   83532:	610c      	str	r4, [r1, #16]
   83534:	60e5      	str	r5, [r4, #12]
   83536:	60a5      	str	r5, [r4, #8]
   83538:	6062      	str	r2, [r4, #4]
   8353a:	50e3      	str	r3, [r4, r3]
   8353c:	e78a      	b.n	83454 <_free_r+0x84>
   8353e:	2a54      	cmp	r2, #84	; 0x54
   83540:	d806      	bhi.n	83550 <_free_r+0x180>
   83542:	0b1a      	lsrs	r2, r3, #12
   83544:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   83548:	00ff      	lsls	r7, r7, #3
   8354a:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   8354e:	e790      	b.n	83472 <_free_r+0xa2>
   83550:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83554:	d806      	bhi.n	83564 <_free_r+0x194>
   83556:	0bda      	lsrs	r2, r3, #15
   83558:	f102 0778 	add.w	r7, r2, #120	; 0x78
   8355c:	00ff      	lsls	r7, r7, #3
   8355e:	f102 0577 	add.w	r5, r2, #119	; 0x77
   83562:	e786      	b.n	83472 <_free_r+0xa2>
   83564:	f240 5054 	movw	r0, #1364	; 0x554
   83568:	4282      	cmp	r2, r0
   8356a:	d806      	bhi.n	8357a <_free_r+0x1aa>
   8356c:	0c9a      	lsrs	r2, r3, #18
   8356e:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83572:	00ff      	lsls	r7, r7, #3
   83574:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83578:	e77b      	b.n	83472 <_free_r+0xa2>
   8357a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8357e:	257e      	movs	r5, #126	; 0x7e
   83580:	e777      	b.n	83472 <_free_r+0xa2>
   83582:	f043 0101 	orr.w	r1, r3, #1
   83586:	6061      	str	r1, [r4, #4]
   83588:	6013      	str	r3, [r2, #0]
   8358a:	e763      	b.n	83454 <_free_r+0x84>
   8358c:	200706e0 	.word	0x200706e0
   83590:	200706e8 	.word	0x200706e8
   83594:	20070aec 	.word	0x20070aec
   83598:	20070c3c 	.word	0x20070c3c

0008359c <__sfvwrite_r>:
   8359c:	6893      	ldr	r3, [r2, #8]
   8359e:	2b00      	cmp	r3, #0
   835a0:	d071      	beq.n	83686 <__sfvwrite_r+0xea>
   835a2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   835a6:	898b      	ldrh	r3, [r1, #12]
   835a8:	b083      	sub	sp, #12
   835aa:	460c      	mov	r4, r1
   835ac:	0719      	lsls	r1, r3, #28
   835ae:	9000      	str	r0, [sp, #0]
   835b0:	4616      	mov	r6, r2
   835b2:	d525      	bpl.n	83600 <__sfvwrite_r+0x64>
   835b4:	6922      	ldr	r2, [r4, #16]
   835b6:	b31a      	cbz	r2, 83600 <__sfvwrite_r+0x64>
   835b8:	f013 0002 	ands.w	r0, r3, #2
   835bc:	6835      	ldr	r5, [r6, #0]
   835be:	d02b      	beq.n	83618 <__sfvwrite_r+0x7c>
   835c0:	f04f 0900 	mov.w	r9, #0
   835c4:	46b0      	mov	r8, r6
   835c6:	464f      	mov	r7, r9
   835c8:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8388c <__sfvwrite_r+0x2f0>
   835cc:	2f00      	cmp	r7, #0
   835ce:	d055      	beq.n	8367c <__sfvwrite_r+0xe0>
   835d0:	4557      	cmp	r7, sl
   835d2:	463b      	mov	r3, r7
   835d4:	464a      	mov	r2, r9
   835d6:	bf28      	it	cs
   835d8:	4653      	movcs	r3, sl
   835da:	69e1      	ldr	r1, [r4, #28]
   835dc:	9800      	ldr	r0, [sp, #0]
   835de:	6a66      	ldr	r6, [r4, #36]	; 0x24
   835e0:	47b0      	blx	r6
   835e2:	2800      	cmp	r0, #0
   835e4:	dd56      	ble.n	83694 <__sfvwrite_r+0xf8>
   835e6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   835ea:	4481      	add	r9, r0
   835ec:	1a1b      	subs	r3, r3, r0
   835ee:	1a3f      	subs	r7, r7, r0
   835f0:	f8c8 3008 	str.w	r3, [r8, #8]
   835f4:	2b00      	cmp	r3, #0
   835f6:	d1e9      	bne.n	835cc <__sfvwrite_r+0x30>
   835f8:	2000      	movs	r0, #0
   835fa:	b003      	add	sp, #12
   835fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83600:	4621      	mov	r1, r4
   83602:	9800      	ldr	r0, [sp, #0]
   83604:	f7ff fc56 	bl	82eb4 <__swsetup_r>
   83608:	2800      	cmp	r0, #0
   8360a:	f040 8135 	bne.w	83878 <__sfvwrite_r+0x2dc>
   8360e:	89a3      	ldrh	r3, [r4, #12]
   83610:	6835      	ldr	r5, [r6, #0]
   83612:	f013 0002 	ands.w	r0, r3, #2
   83616:	d1d3      	bne.n	835c0 <__sfvwrite_r+0x24>
   83618:	f013 0901 	ands.w	r9, r3, #1
   8361c:	d144      	bne.n	836a8 <__sfvwrite_r+0x10c>
   8361e:	464f      	mov	r7, r9
   83620:	9601      	str	r6, [sp, #4]
   83622:	b337      	cbz	r7, 83672 <__sfvwrite_r+0xd6>
   83624:	059a      	lsls	r2, r3, #22
   83626:	f8d4 8008 	ldr.w	r8, [r4, #8]
   8362a:	f140 8085 	bpl.w	83738 <__sfvwrite_r+0x19c>
   8362e:	4547      	cmp	r7, r8
   83630:	46c3      	mov	fp, r8
   83632:	f0c0 80ad 	bcc.w	83790 <__sfvwrite_r+0x1f4>
   83636:	f413 6f90 	tst.w	r3, #1152	; 0x480
   8363a:	f040 80ae 	bne.w	8379a <__sfvwrite_r+0x1fe>
   8363e:	46ba      	mov	sl, r7
   83640:	6820      	ldr	r0, [r4, #0]
   83642:	465a      	mov	r2, fp
   83644:	4649      	mov	r1, r9
   83646:	f000 fcdf 	bl	84008 <memmove>
   8364a:	68a2      	ldr	r2, [r4, #8]
   8364c:	6823      	ldr	r3, [r4, #0]
   8364e:	eba2 0208 	sub.w	r2, r2, r8
   83652:	445b      	add	r3, fp
   83654:	60a2      	str	r2, [r4, #8]
   83656:	6023      	str	r3, [r4, #0]
   83658:	9a01      	ldr	r2, [sp, #4]
   8365a:	44d1      	add	r9, sl
   8365c:	6893      	ldr	r3, [r2, #8]
   8365e:	eba7 070a 	sub.w	r7, r7, sl
   83662:	eba3 030a 	sub.w	r3, r3, sl
   83666:	6093      	str	r3, [r2, #8]
   83668:	2b00      	cmp	r3, #0
   8366a:	d0c5      	beq.n	835f8 <__sfvwrite_r+0x5c>
   8366c:	89a3      	ldrh	r3, [r4, #12]
   8366e:	2f00      	cmp	r7, #0
   83670:	d1d8      	bne.n	83624 <__sfvwrite_r+0x88>
   83672:	f8d5 9000 	ldr.w	r9, [r5]
   83676:	686f      	ldr	r7, [r5, #4]
   83678:	3508      	adds	r5, #8
   8367a:	e7d2      	b.n	83622 <__sfvwrite_r+0x86>
   8367c:	f8d5 9000 	ldr.w	r9, [r5]
   83680:	686f      	ldr	r7, [r5, #4]
   83682:	3508      	adds	r5, #8
   83684:	e7a2      	b.n	835cc <__sfvwrite_r+0x30>
   83686:	2000      	movs	r0, #0
   83688:	4770      	bx	lr
   8368a:	4621      	mov	r1, r4
   8368c:	9800      	ldr	r0, [sp, #0]
   8368e:	f7ff fd21 	bl	830d4 <_fflush_r>
   83692:	b378      	cbz	r0, 836f4 <__sfvwrite_r+0x158>
   83694:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83698:	f04f 30ff 	mov.w	r0, #4294967295
   8369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   836a0:	81a3      	strh	r3, [r4, #12]
   836a2:	b003      	add	sp, #12
   836a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836a8:	4681      	mov	r9, r0
   836aa:	4633      	mov	r3, r6
   836ac:	464e      	mov	r6, r9
   836ae:	46a8      	mov	r8, r5
   836b0:	469a      	mov	sl, r3
   836b2:	464d      	mov	r5, r9
   836b4:	b356      	cbz	r6, 8370c <__sfvwrite_r+0x170>
   836b6:	2800      	cmp	r0, #0
   836b8:	d032      	beq.n	83720 <__sfvwrite_r+0x184>
   836ba:	45b1      	cmp	r9, r6
   836bc:	46cb      	mov	fp, r9
   836be:	bf28      	it	cs
   836c0:	46b3      	movcs	fp, r6
   836c2:	6820      	ldr	r0, [r4, #0]
   836c4:	6923      	ldr	r3, [r4, #16]
   836c6:	465f      	mov	r7, fp
   836c8:	4298      	cmp	r0, r3
   836ca:	6962      	ldr	r2, [r4, #20]
   836cc:	d904      	bls.n	836d8 <__sfvwrite_r+0x13c>
   836ce:	68a3      	ldr	r3, [r4, #8]
   836d0:	4413      	add	r3, r2
   836d2:	459b      	cmp	fp, r3
   836d4:	f300 80a8 	bgt.w	83828 <__sfvwrite_r+0x28c>
   836d8:	4593      	cmp	fp, r2
   836da:	db4d      	blt.n	83778 <__sfvwrite_r+0x1dc>
   836dc:	4613      	mov	r3, r2
   836de:	6a67      	ldr	r7, [r4, #36]	; 0x24
   836e0:	462a      	mov	r2, r5
   836e2:	69e1      	ldr	r1, [r4, #28]
   836e4:	9800      	ldr	r0, [sp, #0]
   836e6:	47b8      	blx	r7
   836e8:	1e07      	subs	r7, r0, #0
   836ea:	ddd3      	ble.n	83694 <__sfvwrite_r+0xf8>
   836ec:	ebb9 0907 	subs.w	r9, r9, r7
   836f0:	d0cb      	beq.n	8368a <__sfvwrite_r+0xee>
   836f2:	2001      	movs	r0, #1
   836f4:	f8da 3008 	ldr.w	r3, [sl, #8]
   836f8:	443d      	add	r5, r7
   836fa:	1bdb      	subs	r3, r3, r7
   836fc:	1bf6      	subs	r6, r6, r7
   836fe:	f8ca 3008 	str.w	r3, [sl, #8]
   83702:	2b00      	cmp	r3, #0
   83704:	f43f af78 	beq.w	835f8 <__sfvwrite_r+0x5c>
   83708:	2e00      	cmp	r6, #0
   8370a:	d1d4      	bne.n	836b6 <__sfvwrite_r+0x11a>
   8370c:	f108 0308 	add.w	r3, r8, #8
   83710:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83714:	4698      	mov	r8, r3
   83716:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8371a:	3308      	adds	r3, #8
   8371c:	2e00      	cmp	r6, #0
   8371e:	d0f7      	beq.n	83710 <__sfvwrite_r+0x174>
   83720:	4632      	mov	r2, r6
   83722:	210a      	movs	r1, #10
   83724:	4628      	mov	r0, r5
   83726:	f000 fc29 	bl	83f7c <memchr>
   8372a:	2800      	cmp	r0, #0
   8372c:	f000 80a1 	beq.w	83872 <__sfvwrite_r+0x2d6>
   83730:	3001      	adds	r0, #1
   83732:	eba0 0905 	sub.w	r9, r0, r5
   83736:	e7c0      	b.n	836ba <__sfvwrite_r+0x11e>
   83738:	6820      	ldr	r0, [r4, #0]
   8373a:	6923      	ldr	r3, [r4, #16]
   8373c:	4298      	cmp	r0, r3
   8373e:	d802      	bhi.n	83746 <__sfvwrite_r+0x1aa>
   83740:	6963      	ldr	r3, [r4, #20]
   83742:	429f      	cmp	r7, r3
   83744:	d25d      	bcs.n	83802 <__sfvwrite_r+0x266>
   83746:	45b8      	cmp	r8, r7
   83748:	bf28      	it	cs
   8374a:	46b8      	movcs	r8, r7
   8374c:	4649      	mov	r1, r9
   8374e:	4642      	mov	r2, r8
   83750:	f000 fc5a 	bl	84008 <memmove>
   83754:	68a3      	ldr	r3, [r4, #8]
   83756:	6822      	ldr	r2, [r4, #0]
   83758:	eba3 0308 	sub.w	r3, r3, r8
   8375c:	4442      	add	r2, r8
   8375e:	60a3      	str	r3, [r4, #8]
   83760:	6022      	str	r2, [r4, #0]
   83762:	b10b      	cbz	r3, 83768 <__sfvwrite_r+0x1cc>
   83764:	46c2      	mov	sl, r8
   83766:	e777      	b.n	83658 <__sfvwrite_r+0xbc>
   83768:	4621      	mov	r1, r4
   8376a:	9800      	ldr	r0, [sp, #0]
   8376c:	f7ff fcb2 	bl	830d4 <_fflush_r>
   83770:	2800      	cmp	r0, #0
   83772:	d18f      	bne.n	83694 <__sfvwrite_r+0xf8>
   83774:	46c2      	mov	sl, r8
   83776:	e76f      	b.n	83658 <__sfvwrite_r+0xbc>
   83778:	465a      	mov	r2, fp
   8377a:	4629      	mov	r1, r5
   8377c:	f000 fc44 	bl	84008 <memmove>
   83780:	68a2      	ldr	r2, [r4, #8]
   83782:	6823      	ldr	r3, [r4, #0]
   83784:	eba2 020b 	sub.w	r2, r2, fp
   83788:	445b      	add	r3, fp
   8378a:	60a2      	str	r2, [r4, #8]
   8378c:	6023      	str	r3, [r4, #0]
   8378e:	e7ad      	b.n	836ec <__sfvwrite_r+0x150>
   83790:	46b8      	mov	r8, r7
   83792:	46ba      	mov	sl, r7
   83794:	46bb      	mov	fp, r7
   83796:	6820      	ldr	r0, [r4, #0]
   83798:	e753      	b.n	83642 <__sfvwrite_r+0xa6>
   8379a:	6962      	ldr	r2, [r4, #20]
   8379c:	6820      	ldr	r0, [r4, #0]
   8379e:	6921      	ldr	r1, [r4, #16]
   837a0:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   837a4:	eba0 0a01 	sub.w	sl, r0, r1
   837a8:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   837ac:	f10a 0001 	add.w	r0, sl, #1
   837b0:	ea4f 0868 	mov.w	r8, r8, asr #1
   837b4:	4438      	add	r0, r7
   837b6:	4540      	cmp	r0, r8
   837b8:	4642      	mov	r2, r8
   837ba:	bf84      	itt	hi
   837bc:	4680      	movhi	r8, r0
   837be:	4642      	movhi	r2, r8
   837c0:	055b      	lsls	r3, r3, #21
   837c2:	d544      	bpl.n	8384e <__sfvwrite_r+0x2b2>
   837c4:	4611      	mov	r1, r2
   837c6:	9800      	ldr	r0, [sp, #0]
   837c8:	f000 f920 	bl	83a0c <_malloc_r>
   837cc:	4683      	mov	fp, r0
   837ce:	2800      	cmp	r0, #0
   837d0:	d055      	beq.n	8387e <__sfvwrite_r+0x2e2>
   837d2:	4652      	mov	r2, sl
   837d4:	6921      	ldr	r1, [r4, #16]
   837d6:	f7fe fae3 	bl	81da0 <memcpy>
   837da:	89a3      	ldrh	r3, [r4, #12]
   837dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   837e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   837e4:	81a3      	strh	r3, [r4, #12]
   837e6:	eb0b 000a 	add.w	r0, fp, sl
   837ea:	eba8 030a 	sub.w	r3, r8, sl
   837ee:	f8c4 b010 	str.w	fp, [r4, #16]
   837f2:	f8c4 8014 	str.w	r8, [r4, #20]
   837f6:	6020      	str	r0, [r4, #0]
   837f8:	60a3      	str	r3, [r4, #8]
   837fa:	46b8      	mov	r8, r7
   837fc:	46ba      	mov	sl, r7
   837fe:	46bb      	mov	fp, r7
   83800:	e71f      	b.n	83642 <__sfvwrite_r+0xa6>
   83802:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83806:	42ba      	cmp	r2, r7
   83808:	bf28      	it	cs
   8380a:	463a      	movcs	r2, r7
   8380c:	fb92 f2f3 	sdiv	r2, r2, r3
   83810:	69e1      	ldr	r1, [r4, #28]
   83812:	fb03 f302 	mul.w	r3, r3, r2
   83816:	9800      	ldr	r0, [sp, #0]
   83818:	464a      	mov	r2, r9
   8381a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   8381c:	47b0      	blx	r6
   8381e:	f1b0 0a00 	subs.w	sl, r0, #0
   83822:	f73f af19 	bgt.w	83658 <__sfvwrite_r+0xbc>
   83826:	e735      	b.n	83694 <__sfvwrite_r+0xf8>
   83828:	461a      	mov	r2, r3
   8382a:	4629      	mov	r1, r5
   8382c:	9301      	str	r3, [sp, #4]
   8382e:	f000 fbeb 	bl	84008 <memmove>
   83832:	6822      	ldr	r2, [r4, #0]
   83834:	9b01      	ldr	r3, [sp, #4]
   83836:	4621      	mov	r1, r4
   83838:	441a      	add	r2, r3
   8383a:	6022      	str	r2, [r4, #0]
   8383c:	9800      	ldr	r0, [sp, #0]
   8383e:	f7ff fc49 	bl	830d4 <_fflush_r>
   83842:	9b01      	ldr	r3, [sp, #4]
   83844:	2800      	cmp	r0, #0
   83846:	f47f af25 	bne.w	83694 <__sfvwrite_r+0xf8>
   8384a:	461f      	mov	r7, r3
   8384c:	e74e      	b.n	836ec <__sfvwrite_r+0x150>
   8384e:	9800      	ldr	r0, [sp, #0]
   83850:	f000 fc4a 	bl	840e8 <_realloc_r>
   83854:	4683      	mov	fp, r0
   83856:	2800      	cmp	r0, #0
   83858:	d1c5      	bne.n	837e6 <__sfvwrite_r+0x24a>
   8385a:	9d00      	ldr	r5, [sp, #0]
   8385c:	6921      	ldr	r1, [r4, #16]
   8385e:	4628      	mov	r0, r5
   83860:	f7ff fdb6 	bl	833d0 <_free_r>
   83864:	220c      	movs	r2, #12
   83866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8386a:	602a      	str	r2, [r5, #0]
   8386c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83870:	e712      	b.n	83698 <__sfvwrite_r+0xfc>
   83872:	f106 0901 	add.w	r9, r6, #1
   83876:	e720      	b.n	836ba <__sfvwrite_r+0x11e>
   83878:	f04f 30ff 	mov.w	r0, #4294967295
   8387c:	e6bd      	b.n	835fa <__sfvwrite_r+0x5e>
   8387e:	220c      	movs	r2, #12
   83880:	9900      	ldr	r1, [sp, #0]
   83882:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83886:	600a      	str	r2, [r1, #0]
   83888:	e706      	b.n	83698 <__sfvwrite_r+0xfc>
   8388a:	bf00      	nop
   8388c:	7ffffc00 	.word	0x7ffffc00

00083890 <_fwalk_reent>:
   83890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83894:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83898:	d01e      	beq.n	838d8 <_fwalk_reent+0x48>
   8389a:	4688      	mov	r8, r1
   8389c:	4607      	mov	r7, r0
   8389e:	f04f 0900 	mov.w	r9, #0
   838a2:	6875      	ldr	r5, [r6, #4]
   838a4:	68b4      	ldr	r4, [r6, #8]
   838a6:	3d01      	subs	r5, #1
   838a8:	d410      	bmi.n	838cc <_fwalk_reent+0x3c>
   838aa:	89a3      	ldrh	r3, [r4, #12]
   838ac:	3d01      	subs	r5, #1
   838ae:	2b01      	cmp	r3, #1
   838b0:	d908      	bls.n	838c4 <_fwalk_reent+0x34>
   838b2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   838b6:	3301      	adds	r3, #1
   838b8:	d004      	beq.n	838c4 <_fwalk_reent+0x34>
   838ba:	4621      	mov	r1, r4
   838bc:	4638      	mov	r0, r7
   838be:	47c0      	blx	r8
   838c0:	ea49 0900 	orr.w	r9, r9, r0
   838c4:	1c6b      	adds	r3, r5, #1
   838c6:	f104 0468 	add.w	r4, r4, #104	; 0x68
   838ca:	d1ee      	bne.n	838aa <_fwalk_reent+0x1a>
   838cc:	6836      	ldr	r6, [r6, #0]
   838ce:	2e00      	cmp	r6, #0
   838d0:	d1e7      	bne.n	838a2 <_fwalk_reent+0x12>
   838d2:	4648      	mov	r0, r9
   838d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   838d8:	46b1      	mov	r9, r6
   838da:	4648      	mov	r0, r9
   838dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000838e0 <__locale_mb_cur_max>:
   838e0:	4b04      	ldr	r3, [pc, #16]	; (838f4 <__locale_mb_cur_max+0x14>)
   838e2:	4a05      	ldr	r2, [pc, #20]	; (838f8 <__locale_mb_cur_max+0x18>)
   838e4:	681b      	ldr	r3, [r3, #0]
   838e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   838e8:	2b00      	cmp	r3, #0
   838ea:	bf08      	it	eq
   838ec:	4613      	moveq	r3, r2
   838ee:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   838f2:	4770      	bx	lr
   838f4:	20070140 	.word	0x20070140
   838f8:	20070574 	.word	0x20070574

000838fc <__retarget_lock_init_recursive>:
   838fc:	4770      	bx	lr
   838fe:	bf00      	nop

00083900 <__retarget_lock_close_recursive>:
   83900:	4770      	bx	lr
   83902:	bf00      	nop

00083904 <__retarget_lock_acquire_recursive>:
   83904:	4770      	bx	lr
   83906:	bf00      	nop

00083908 <__retarget_lock_release_recursive>:
   83908:	4770      	bx	lr
   8390a:	bf00      	nop

0008390c <__swhatbuf_r>:
   8390c:	b570      	push	{r4, r5, r6, lr}
   8390e:	460c      	mov	r4, r1
   83910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83914:	b090      	sub	sp, #64	; 0x40
   83916:	2900      	cmp	r1, #0
   83918:	4615      	mov	r5, r2
   8391a:	461e      	mov	r6, r3
   8391c:	db14      	blt.n	83948 <__swhatbuf_r+0x3c>
   8391e:	aa01      	add	r2, sp, #4
   83920:	f000 ff68 	bl	847f4 <_fstat_r>
   83924:	2800      	cmp	r0, #0
   83926:	db0f      	blt.n	83948 <__swhatbuf_r+0x3c>
   83928:	9a02      	ldr	r2, [sp, #8]
   8392a:	f44f 6380 	mov.w	r3, #1024	; 0x400
   8392e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   83932:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   83936:	fab2 f282 	clz	r2, r2
   8393a:	f44f 6000 	mov.w	r0, #2048	; 0x800
   8393e:	0952      	lsrs	r2, r2, #5
   83940:	6032      	str	r2, [r6, #0]
   83942:	602b      	str	r3, [r5, #0]
   83944:	b010      	add	sp, #64	; 0x40
   83946:	bd70      	pop	{r4, r5, r6, pc}
   83948:	2300      	movs	r3, #0
   8394a:	89a2      	ldrh	r2, [r4, #12]
   8394c:	6033      	str	r3, [r6, #0]
   8394e:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   83952:	d004      	beq.n	8395e <__swhatbuf_r+0x52>
   83954:	2240      	movs	r2, #64	; 0x40
   83956:	4618      	mov	r0, r3
   83958:	602a      	str	r2, [r5, #0]
   8395a:	b010      	add	sp, #64	; 0x40
   8395c:	bd70      	pop	{r4, r5, r6, pc}
   8395e:	f44f 6380 	mov.w	r3, #1024	; 0x400
   83962:	602b      	str	r3, [r5, #0]
   83964:	b010      	add	sp, #64	; 0x40
   83966:	bd70      	pop	{r4, r5, r6, pc}

00083968 <__smakebuf_r>:
   83968:	898a      	ldrh	r2, [r1, #12]
   8396a:	460b      	mov	r3, r1
   8396c:	0792      	lsls	r2, r2, #30
   8396e:	d506      	bpl.n	8397e <__smakebuf_r+0x16>
   83970:	2101      	movs	r1, #1
   83972:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83976:	6159      	str	r1, [r3, #20]
   83978:	601a      	str	r2, [r3, #0]
   8397a:	611a      	str	r2, [r3, #16]
   8397c:	4770      	bx	lr
   8397e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83980:	b083      	sub	sp, #12
   83982:	ab01      	add	r3, sp, #4
   83984:	466a      	mov	r2, sp
   83986:	460c      	mov	r4, r1
   83988:	4606      	mov	r6, r0
   8398a:	f7ff ffbf 	bl	8390c <__swhatbuf_r>
   8398e:	9900      	ldr	r1, [sp, #0]
   83990:	4605      	mov	r5, r0
   83992:	4630      	mov	r0, r6
   83994:	f000 f83a 	bl	83a0c <_malloc_r>
   83998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8399c:	b1d8      	cbz	r0, 839d6 <__smakebuf_r+0x6e>
   8399e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   839a2:	4f15      	ldr	r7, [pc, #84]	; (839f8 <__smakebuf_r+0x90>)
   839a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   839a8:	63f7      	str	r7, [r6, #60]	; 0x3c
   839aa:	81a3      	strh	r3, [r4, #12]
   839ac:	6020      	str	r0, [r4, #0]
   839ae:	6120      	str	r0, [r4, #16]
   839b0:	6161      	str	r1, [r4, #20]
   839b2:	b91a      	cbnz	r2, 839bc <__smakebuf_r+0x54>
   839b4:	432b      	orrs	r3, r5
   839b6:	81a3      	strh	r3, [r4, #12]
   839b8:	b003      	add	sp, #12
   839ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   839bc:	4630      	mov	r0, r6
   839be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   839c2:	f000 ff2b 	bl	8481c <_isatty_r>
   839c6:	b1a0      	cbz	r0, 839f2 <__smakebuf_r+0x8a>
   839c8:	89a3      	ldrh	r3, [r4, #12]
   839ca:	f023 0303 	bic.w	r3, r3, #3
   839ce:	f043 0301 	orr.w	r3, r3, #1
   839d2:	b21b      	sxth	r3, r3
   839d4:	e7ee      	b.n	839b4 <__smakebuf_r+0x4c>
   839d6:	059a      	lsls	r2, r3, #22
   839d8:	d4ee      	bmi.n	839b8 <__smakebuf_r+0x50>
   839da:	2101      	movs	r1, #1
   839dc:	f023 0303 	bic.w	r3, r3, #3
   839e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
   839e4:	f043 0302 	orr.w	r3, r3, #2
   839e8:	81a3      	strh	r3, [r4, #12]
   839ea:	6161      	str	r1, [r4, #20]
   839ec:	6022      	str	r2, [r4, #0]
   839ee:	6122      	str	r2, [r4, #16]
   839f0:	e7e2      	b.n	839b8 <__smakebuf_r+0x50>
   839f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   839f6:	e7dd      	b.n	839b4 <__smakebuf_r+0x4c>
   839f8:	00083129 	.word	0x00083129

000839fc <malloc>:
   839fc:	4b02      	ldr	r3, [pc, #8]	; (83a08 <malloc+0xc>)
   839fe:	4601      	mov	r1, r0
   83a00:	6818      	ldr	r0, [r3, #0]
   83a02:	f000 b803 	b.w	83a0c <_malloc_r>
   83a06:	bf00      	nop
   83a08:	20070140 	.word	0x20070140

00083a0c <_malloc_r>:
   83a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83a10:	f101 060b 	add.w	r6, r1, #11
   83a14:	2e16      	cmp	r6, #22
   83a16:	b083      	sub	sp, #12
   83a18:	4605      	mov	r5, r0
   83a1a:	f240 809e 	bls.w	83b5a <_malloc_r+0x14e>
   83a1e:	f036 0607 	bics.w	r6, r6, #7
   83a22:	f100 80bd 	bmi.w	83ba0 <_malloc_r+0x194>
   83a26:	42b1      	cmp	r1, r6
   83a28:	f200 80ba 	bhi.w	83ba0 <_malloc_r+0x194>
   83a2c:	f000 fb50 	bl	840d0 <__malloc_lock>
   83a30:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   83a34:	f0c0 8285 	bcc.w	83f42 <_malloc_r+0x536>
   83a38:	0a73      	lsrs	r3, r6, #9
   83a3a:	f000 80b8 	beq.w	83bae <_malloc_r+0x1a2>
   83a3e:	2b04      	cmp	r3, #4
   83a40:	f200 816c 	bhi.w	83d1c <_malloc_r+0x310>
   83a44:	09b3      	lsrs	r3, r6, #6
   83a46:	f103 0039 	add.w	r0, r3, #57	; 0x39
   83a4a:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   83a4e:	00c1      	lsls	r1, r0, #3
   83a50:	4fb8      	ldr	r7, [pc, #736]	; (83d34 <_malloc_r+0x328>)
   83a52:	4439      	add	r1, r7
   83a54:	684c      	ldr	r4, [r1, #4]
   83a56:	3908      	subs	r1, #8
   83a58:	42a1      	cmp	r1, r4
   83a5a:	d106      	bne.n	83a6a <_malloc_r+0x5e>
   83a5c:	e00c      	b.n	83a78 <_malloc_r+0x6c>
   83a5e:	2a00      	cmp	r2, #0
   83a60:	f280 80ab 	bge.w	83bba <_malloc_r+0x1ae>
   83a64:	68e4      	ldr	r4, [r4, #12]
   83a66:	42a1      	cmp	r1, r4
   83a68:	d006      	beq.n	83a78 <_malloc_r+0x6c>
   83a6a:	6863      	ldr	r3, [r4, #4]
   83a6c:	f023 0303 	bic.w	r3, r3, #3
   83a70:	1b9a      	subs	r2, r3, r6
   83a72:	2a0f      	cmp	r2, #15
   83a74:	ddf3      	ble.n	83a5e <_malloc_r+0x52>
   83a76:	4670      	mov	r0, lr
   83a78:	693c      	ldr	r4, [r7, #16]
   83a7a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 83d48 <_malloc_r+0x33c>
   83a7e:	4574      	cmp	r4, lr
   83a80:	f000 819e 	beq.w	83dc0 <_malloc_r+0x3b4>
   83a84:	6863      	ldr	r3, [r4, #4]
   83a86:	f023 0303 	bic.w	r3, r3, #3
   83a8a:	1b9a      	subs	r2, r3, r6
   83a8c:	2a0f      	cmp	r2, #15
   83a8e:	f300 8183 	bgt.w	83d98 <_malloc_r+0x38c>
   83a92:	2a00      	cmp	r2, #0
   83a94:	f8c7 e014 	str.w	lr, [r7, #20]
   83a98:	f8c7 e010 	str.w	lr, [r7, #16]
   83a9c:	f280 8091 	bge.w	83bc2 <_malloc_r+0x1b6>
   83aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83aa4:	f080 8154 	bcs.w	83d50 <_malloc_r+0x344>
   83aa8:	2201      	movs	r2, #1
   83aaa:	08db      	lsrs	r3, r3, #3
   83aac:	6879      	ldr	r1, [r7, #4]
   83aae:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83ab2:	4413      	add	r3, r2
   83ab4:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83ab8:	fa02 f20c 	lsl.w	r2, r2, ip
   83abc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83ac0:	430a      	orrs	r2, r1
   83ac2:	f1ac 0108 	sub.w	r1, ip, #8
   83ac6:	60e1      	str	r1, [r4, #12]
   83ac8:	f8c4 8008 	str.w	r8, [r4, #8]
   83acc:	607a      	str	r2, [r7, #4]
   83ace:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83ad2:	f8c8 400c 	str.w	r4, [r8, #12]
   83ad6:	2401      	movs	r4, #1
   83ad8:	1083      	asrs	r3, r0, #2
   83ada:	409c      	lsls	r4, r3
   83adc:	4294      	cmp	r4, r2
   83ade:	d87d      	bhi.n	83bdc <_malloc_r+0x1d0>
   83ae0:	4214      	tst	r4, r2
   83ae2:	d106      	bne.n	83af2 <_malloc_r+0xe6>
   83ae4:	f020 0003 	bic.w	r0, r0, #3
   83ae8:	0064      	lsls	r4, r4, #1
   83aea:	4214      	tst	r4, r2
   83aec:	f100 0004 	add.w	r0, r0, #4
   83af0:	d0fa      	beq.n	83ae8 <_malloc_r+0xdc>
   83af2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83af6:	46cc      	mov	ip, r9
   83af8:	4680      	mov	r8, r0
   83afa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83afe:	459c      	cmp	ip, r3
   83b00:	d107      	bne.n	83b12 <_malloc_r+0x106>
   83b02:	e15f      	b.n	83dc4 <_malloc_r+0x3b8>
   83b04:	2a00      	cmp	r2, #0
   83b06:	f280 816d 	bge.w	83de4 <_malloc_r+0x3d8>
   83b0a:	68db      	ldr	r3, [r3, #12]
   83b0c:	459c      	cmp	ip, r3
   83b0e:	f000 8159 	beq.w	83dc4 <_malloc_r+0x3b8>
   83b12:	6859      	ldr	r1, [r3, #4]
   83b14:	f021 0103 	bic.w	r1, r1, #3
   83b18:	1b8a      	subs	r2, r1, r6
   83b1a:	2a0f      	cmp	r2, #15
   83b1c:	ddf2      	ble.n	83b04 <_malloc_r+0xf8>
   83b1e:	68dc      	ldr	r4, [r3, #12]
   83b20:	f8d3 c008 	ldr.w	ip, [r3, #8]
   83b24:	f046 0801 	orr.w	r8, r6, #1
   83b28:	4628      	mov	r0, r5
   83b2a:	441e      	add	r6, r3
   83b2c:	f042 0501 	orr.w	r5, r2, #1
   83b30:	f8c3 8004 	str.w	r8, [r3, #4]
   83b34:	f8cc 400c 	str.w	r4, [ip, #12]
   83b38:	f8c4 c008 	str.w	ip, [r4, #8]
   83b3c:	617e      	str	r6, [r7, #20]
   83b3e:	613e      	str	r6, [r7, #16]
   83b40:	f8c6 e00c 	str.w	lr, [r6, #12]
   83b44:	f8c6 e008 	str.w	lr, [r6, #8]
   83b48:	6075      	str	r5, [r6, #4]
   83b4a:	505a      	str	r2, [r3, r1]
   83b4c:	9300      	str	r3, [sp, #0]
   83b4e:	f000 fac5 	bl	840dc <__malloc_unlock>
   83b52:	9b00      	ldr	r3, [sp, #0]
   83b54:	f103 0408 	add.w	r4, r3, #8
   83b58:	e01e      	b.n	83b98 <_malloc_r+0x18c>
   83b5a:	2910      	cmp	r1, #16
   83b5c:	d820      	bhi.n	83ba0 <_malloc_r+0x194>
   83b5e:	f000 fab7 	bl	840d0 <__malloc_lock>
   83b62:	2610      	movs	r6, #16
   83b64:	2318      	movs	r3, #24
   83b66:	2002      	movs	r0, #2
   83b68:	4f72      	ldr	r7, [pc, #456]	; (83d34 <_malloc_r+0x328>)
   83b6a:	443b      	add	r3, r7
   83b6c:	685c      	ldr	r4, [r3, #4]
   83b6e:	f1a3 0208 	sub.w	r2, r3, #8
   83b72:	4294      	cmp	r4, r2
   83b74:	f000 812f 	beq.w	83dd6 <_malloc_r+0x3ca>
   83b78:	6863      	ldr	r3, [r4, #4]
   83b7a:	68e1      	ldr	r1, [r4, #12]
   83b7c:	f023 0303 	bic.w	r3, r3, #3
   83b80:	4423      	add	r3, r4
   83b82:	685a      	ldr	r2, [r3, #4]
   83b84:	68a6      	ldr	r6, [r4, #8]
   83b86:	f042 0201 	orr.w	r2, r2, #1
   83b8a:	60f1      	str	r1, [r6, #12]
   83b8c:	4628      	mov	r0, r5
   83b8e:	608e      	str	r6, [r1, #8]
   83b90:	605a      	str	r2, [r3, #4]
   83b92:	f000 faa3 	bl	840dc <__malloc_unlock>
   83b96:	3408      	adds	r4, #8
   83b98:	4620      	mov	r0, r4
   83b9a:	b003      	add	sp, #12
   83b9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83ba0:	2400      	movs	r4, #0
   83ba2:	230c      	movs	r3, #12
   83ba4:	4620      	mov	r0, r4
   83ba6:	602b      	str	r3, [r5, #0]
   83ba8:	b003      	add	sp, #12
   83baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bae:	2040      	movs	r0, #64	; 0x40
   83bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
   83bb4:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83bb8:	e74a      	b.n	83a50 <_malloc_r+0x44>
   83bba:	4423      	add	r3, r4
   83bbc:	685a      	ldr	r2, [r3, #4]
   83bbe:	68e1      	ldr	r1, [r4, #12]
   83bc0:	e7e0      	b.n	83b84 <_malloc_r+0x178>
   83bc2:	4423      	add	r3, r4
   83bc4:	685a      	ldr	r2, [r3, #4]
   83bc6:	4628      	mov	r0, r5
   83bc8:	f042 0201 	orr.w	r2, r2, #1
   83bcc:	605a      	str	r2, [r3, #4]
   83bce:	3408      	adds	r4, #8
   83bd0:	f000 fa84 	bl	840dc <__malloc_unlock>
   83bd4:	4620      	mov	r0, r4
   83bd6:	b003      	add	sp, #12
   83bd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83bdc:	68bc      	ldr	r4, [r7, #8]
   83bde:	6863      	ldr	r3, [r4, #4]
   83be0:	f023 0803 	bic.w	r8, r3, #3
   83be4:	45b0      	cmp	r8, r6
   83be6:	d304      	bcc.n	83bf2 <_malloc_r+0x1e6>
   83be8:	eba8 0306 	sub.w	r3, r8, r6
   83bec:	2b0f      	cmp	r3, #15
   83bee:	f300 8085 	bgt.w	83cfc <_malloc_r+0x2f0>
   83bf2:	f8df 9158 	ldr.w	r9, [pc, #344]	; 83d4c <_malloc_r+0x340>
   83bf6:	4b50      	ldr	r3, [pc, #320]	; (83d38 <_malloc_r+0x32c>)
   83bf8:	f8d9 2000 	ldr.w	r2, [r9]
   83bfc:	681b      	ldr	r3, [r3, #0]
   83bfe:	3201      	adds	r2, #1
   83c00:	4433      	add	r3, r6
   83c02:	eb04 0a08 	add.w	sl, r4, r8
   83c06:	f000 8154 	beq.w	83eb2 <_malloc_r+0x4a6>
   83c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   83c0e:	330f      	adds	r3, #15
   83c10:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   83c14:	f02b 0b0f 	bic.w	fp, fp, #15
   83c18:	4659      	mov	r1, fp
   83c1a:	4628      	mov	r0, r5
   83c1c:	f000 fc1a 	bl	84454 <_sbrk_r>
   83c20:	1c41      	adds	r1, r0, #1
   83c22:	4602      	mov	r2, r0
   83c24:	f000 80fb 	beq.w	83e1e <_malloc_r+0x412>
   83c28:	4582      	cmp	sl, r0
   83c2a:	f200 80f6 	bhi.w	83e1a <_malloc_r+0x40e>
   83c2e:	4b43      	ldr	r3, [pc, #268]	; (83d3c <_malloc_r+0x330>)
   83c30:	6819      	ldr	r1, [r3, #0]
   83c32:	4459      	add	r1, fp
   83c34:	6019      	str	r1, [r3, #0]
   83c36:	f000 814c 	beq.w	83ed2 <_malloc_r+0x4c6>
   83c3a:	f8d9 0000 	ldr.w	r0, [r9]
   83c3e:	3001      	adds	r0, #1
   83c40:	bf1b      	ittet	ne
   83c42:	eba2 0a0a 	subne.w	sl, r2, sl
   83c46:	4451      	addne	r1, sl
   83c48:	f8c9 2000 	streq.w	r2, [r9]
   83c4c:	6019      	strne	r1, [r3, #0]
   83c4e:	f012 0107 	ands.w	r1, r2, #7
   83c52:	f000 8114 	beq.w	83e7e <_malloc_r+0x472>
   83c56:	f1c1 0008 	rsb	r0, r1, #8
   83c5a:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   83c5e:	4402      	add	r2, r0
   83c60:	3108      	adds	r1, #8
   83c62:	eb02 090b 	add.w	r9, r2, fp
   83c66:	f3c9 090b 	ubfx	r9, r9, #0, #12
   83c6a:	eba1 0909 	sub.w	r9, r1, r9
   83c6e:	4649      	mov	r1, r9
   83c70:	4628      	mov	r0, r5
   83c72:	9301      	str	r3, [sp, #4]
   83c74:	9200      	str	r2, [sp, #0]
   83c76:	f000 fbed 	bl	84454 <_sbrk_r>
   83c7a:	1c43      	adds	r3, r0, #1
   83c7c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83c80:	f000 8142 	beq.w	83f08 <_malloc_r+0x4fc>
   83c84:	1a80      	subs	r0, r0, r2
   83c86:	4448      	add	r0, r9
   83c88:	f040 0001 	orr.w	r0, r0, #1
   83c8c:	6819      	ldr	r1, [r3, #0]
   83c8e:	42bc      	cmp	r4, r7
   83c90:	4449      	add	r1, r9
   83c92:	60ba      	str	r2, [r7, #8]
   83c94:	6019      	str	r1, [r3, #0]
   83c96:	6050      	str	r0, [r2, #4]
   83c98:	d017      	beq.n	83cca <_malloc_r+0x2be>
   83c9a:	f1b8 0f0f 	cmp.w	r8, #15
   83c9e:	f240 80fa 	bls.w	83e96 <_malloc_r+0x48a>
   83ca2:	f04f 0c05 	mov.w	ip, #5
   83ca6:	6862      	ldr	r2, [r4, #4]
   83ca8:	f1a8 000c 	sub.w	r0, r8, #12
   83cac:	f020 0007 	bic.w	r0, r0, #7
   83cb0:	f002 0201 	and.w	r2, r2, #1
   83cb4:	eb04 0e00 	add.w	lr, r4, r0
   83cb8:	4302      	orrs	r2, r0
   83cba:	280f      	cmp	r0, #15
   83cbc:	6062      	str	r2, [r4, #4]
   83cbe:	f8ce c004 	str.w	ip, [lr, #4]
   83cc2:	f8ce c008 	str.w	ip, [lr, #8]
   83cc6:	f200 8116 	bhi.w	83ef6 <_malloc_r+0x4ea>
   83cca:	4b1d      	ldr	r3, [pc, #116]	; (83d40 <_malloc_r+0x334>)
   83ccc:	68bc      	ldr	r4, [r7, #8]
   83cce:	681a      	ldr	r2, [r3, #0]
   83cd0:	4291      	cmp	r1, r2
   83cd2:	bf88      	it	hi
   83cd4:	6019      	strhi	r1, [r3, #0]
   83cd6:	4b1b      	ldr	r3, [pc, #108]	; (83d44 <_malloc_r+0x338>)
   83cd8:	681a      	ldr	r2, [r3, #0]
   83cda:	4291      	cmp	r1, r2
   83cdc:	6862      	ldr	r2, [r4, #4]
   83cde:	bf88      	it	hi
   83ce0:	6019      	strhi	r1, [r3, #0]
   83ce2:	f022 0203 	bic.w	r2, r2, #3
   83ce6:	4296      	cmp	r6, r2
   83ce8:	eba2 0306 	sub.w	r3, r2, r6
   83cec:	d801      	bhi.n	83cf2 <_malloc_r+0x2e6>
   83cee:	2b0f      	cmp	r3, #15
   83cf0:	dc04      	bgt.n	83cfc <_malloc_r+0x2f0>
   83cf2:	4628      	mov	r0, r5
   83cf4:	f000 f9f2 	bl	840dc <__malloc_unlock>
   83cf8:	2400      	movs	r4, #0
   83cfa:	e74d      	b.n	83b98 <_malloc_r+0x18c>
   83cfc:	f046 0201 	orr.w	r2, r6, #1
   83d00:	f043 0301 	orr.w	r3, r3, #1
   83d04:	4426      	add	r6, r4
   83d06:	6062      	str	r2, [r4, #4]
   83d08:	4628      	mov	r0, r5
   83d0a:	60be      	str	r6, [r7, #8]
   83d0c:	3408      	adds	r4, #8
   83d0e:	6073      	str	r3, [r6, #4]
   83d10:	f000 f9e4 	bl	840dc <__malloc_unlock>
   83d14:	4620      	mov	r0, r4
   83d16:	b003      	add	sp, #12
   83d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83d1c:	2b14      	cmp	r3, #20
   83d1e:	d970      	bls.n	83e02 <_malloc_r+0x3f6>
   83d20:	2b54      	cmp	r3, #84	; 0x54
   83d22:	f200 80a2 	bhi.w	83e6a <_malloc_r+0x45e>
   83d26:	0b33      	lsrs	r3, r6, #12
   83d28:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   83d2c:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   83d30:	00c1      	lsls	r1, r0, #3
   83d32:	e68d      	b.n	83a50 <_malloc_r+0x44>
   83d34:	200706e0 	.word	0x200706e0
   83d38:	20070c3c 	.word	0x20070c3c
   83d3c:	20070c0c 	.word	0x20070c0c
   83d40:	20070c34 	.word	0x20070c34
   83d44:	20070c38 	.word	0x20070c38
   83d48:	200706e8 	.word	0x200706e8
   83d4c:	20070ae8 	.word	0x20070ae8
   83d50:	0a5a      	lsrs	r2, r3, #9
   83d52:	2a04      	cmp	r2, #4
   83d54:	d95b      	bls.n	83e0e <_malloc_r+0x402>
   83d56:	2a14      	cmp	r2, #20
   83d58:	f200 80ae 	bhi.w	83eb8 <_malloc_r+0x4ac>
   83d5c:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   83d60:	00c9      	lsls	r1, r1, #3
   83d62:	325b      	adds	r2, #91	; 0x5b
   83d64:	eb07 0c01 	add.w	ip, r7, r1
   83d68:	5879      	ldr	r1, [r7, r1]
   83d6a:	f1ac 0c08 	sub.w	ip, ip, #8
   83d6e:	458c      	cmp	ip, r1
   83d70:	f000 8088 	beq.w	83e84 <_malloc_r+0x478>
   83d74:	684a      	ldr	r2, [r1, #4]
   83d76:	f022 0203 	bic.w	r2, r2, #3
   83d7a:	4293      	cmp	r3, r2
   83d7c:	d273      	bcs.n	83e66 <_malloc_r+0x45a>
   83d7e:	6889      	ldr	r1, [r1, #8]
   83d80:	458c      	cmp	ip, r1
   83d82:	d1f7      	bne.n	83d74 <_malloc_r+0x368>
   83d84:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83d88:	687a      	ldr	r2, [r7, #4]
   83d8a:	60e3      	str	r3, [r4, #12]
   83d8c:	f8c4 c008 	str.w	ip, [r4, #8]
   83d90:	609c      	str	r4, [r3, #8]
   83d92:	f8cc 400c 	str.w	r4, [ip, #12]
   83d96:	e69e      	b.n	83ad6 <_malloc_r+0xca>
   83d98:	f046 0c01 	orr.w	ip, r6, #1
   83d9c:	f042 0101 	orr.w	r1, r2, #1
   83da0:	4426      	add	r6, r4
   83da2:	f8c4 c004 	str.w	ip, [r4, #4]
   83da6:	4628      	mov	r0, r5
   83da8:	617e      	str	r6, [r7, #20]
   83daa:	613e      	str	r6, [r7, #16]
   83dac:	f8c6 e00c 	str.w	lr, [r6, #12]
   83db0:	f8c6 e008 	str.w	lr, [r6, #8]
   83db4:	6071      	str	r1, [r6, #4]
   83db6:	50e2      	str	r2, [r4, r3]
   83db8:	f000 f990 	bl	840dc <__malloc_unlock>
   83dbc:	3408      	adds	r4, #8
   83dbe:	e6eb      	b.n	83b98 <_malloc_r+0x18c>
   83dc0:	687a      	ldr	r2, [r7, #4]
   83dc2:	e688      	b.n	83ad6 <_malloc_r+0xca>
   83dc4:	f108 0801 	add.w	r8, r8, #1
   83dc8:	f018 0f03 	tst.w	r8, #3
   83dcc:	f10c 0c08 	add.w	ip, ip, #8
   83dd0:	f47f ae93 	bne.w	83afa <_malloc_r+0xee>
   83dd4:	e02d      	b.n	83e32 <_malloc_r+0x426>
   83dd6:	68dc      	ldr	r4, [r3, #12]
   83dd8:	42a3      	cmp	r3, r4
   83dda:	bf08      	it	eq
   83ddc:	3002      	addeq	r0, #2
   83dde:	f43f ae4b 	beq.w	83a78 <_malloc_r+0x6c>
   83de2:	e6c9      	b.n	83b78 <_malloc_r+0x16c>
   83de4:	461c      	mov	r4, r3
   83de6:	4419      	add	r1, r3
   83de8:	684a      	ldr	r2, [r1, #4]
   83dea:	68db      	ldr	r3, [r3, #12]
   83dec:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83df0:	f042 0201 	orr.w	r2, r2, #1
   83df4:	604a      	str	r2, [r1, #4]
   83df6:	4628      	mov	r0, r5
   83df8:	60f3      	str	r3, [r6, #12]
   83dfa:	609e      	str	r6, [r3, #8]
   83dfc:	f000 f96e 	bl	840dc <__malloc_unlock>
   83e00:	e6ca      	b.n	83b98 <_malloc_r+0x18c>
   83e02:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83e06:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   83e0a:	00c1      	lsls	r1, r0, #3
   83e0c:	e620      	b.n	83a50 <_malloc_r+0x44>
   83e0e:	099a      	lsrs	r2, r3, #6
   83e10:	f102 0139 	add.w	r1, r2, #57	; 0x39
   83e14:	00c9      	lsls	r1, r1, #3
   83e16:	3238      	adds	r2, #56	; 0x38
   83e18:	e7a4      	b.n	83d64 <_malloc_r+0x358>
   83e1a:	42bc      	cmp	r4, r7
   83e1c:	d054      	beq.n	83ec8 <_malloc_r+0x4bc>
   83e1e:	68bc      	ldr	r4, [r7, #8]
   83e20:	6862      	ldr	r2, [r4, #4]
   83e22:	f022 0203 	bic.w	r2, r2, #3
   83e26:	e75e      	b.n	83ce6 <_malloc_r+0x2da>
   83e28:	f859 3908 	ldr.w	r3, [r9], #-8
   83e2c:	4599      	cmp	r9, r3
   83e2e:	f040 8086 	bne.w	83f3e <_malloc_r+0x532>
   83e32:	f010 0f03 	tst.w	r0, #3
   83e36:	f100 30ff 	add.w	r0, r0, #4294967295
   83e3a:	d1f5      	bne.n	83e28 <_malloc_r+0x41c>
   83e3c:	687b      	ldr	r3, [r7, #4]
   83e3e:	ea23 0304 	bic.w	r3, r3, r4
   83e42:	607b      	str	r3, [r7, #4]
   83e44:	0064      	lsls	r4, r4, #1
   83e46:	429c      	cmp	r4, r3
   83e48:	f63f aec8 	bhi.w	83bdc <_malloc_r+0x1d0>
   83e4c:	2c00      	cmp	r4, #0
   83e4e:	f43f aec5 	beq.w	83bdc <_malloc_r+0x1d0>
   83e52:	421c      	tst	r4, r3
   83e54:	4640      	mov	r0, r8
   83e56:	f47f ae4c 	bne.w	83af2 <_malloc_r+0xe6>
   83e5a:	0064      	lsls	r4, r4, #1
   83e5c:	421c      	tst	r4, r3
   83e5e:	f100 0004 	add.w	r0, r0, #4
   83e62:	d0fa      	beq.n	83e5a <_malloc_r+0x44e>
   83e64:	e645      	b.n	83af2 <_malloc_r+0xe6>
   83e66:	468c      	mov	ip, r1
   83e68:	e78c      	b.n	83d84 <_malloc_r+0x378>
   83e6a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   83e6e:	d815      	bhi.n	83e9c <_malloc_r+0x490>
   83e70:	0bf3      	lsrs	r3, r6, #15
   83e72:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83e76:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   83e7a:	00c1      	lsls	r1, r0, #3
   83e7c:	e5e8      	b.n	83a50 <_malloc_r+0x44>
   83e7e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83e82:	e6ee      	b.n	83c62 <_malloc_r+0x256>
   83e84:	2101      	movs	r1, #1
   83e86:	687b      	ldr	r3, [r7, #4]
   83e88:	1092      	asrs	r2, r2, #2
   83e8a:	fa01 f202 	lsl.w	r2, r1, r2
   83e8e:	431a      	orrs	r2, r3
   83e90:	607a      	str	r2, [r7, #4]
   83e92:	4663      	mov	r3, ip
   83e94:	e779      	b.n	83d8a <_malloc_r+0x37e>
   83e96:	2301      	movs	r3, #1
   83e98:	6053      	str	r3, [r2, #4]
   83e9a:	e72a      	b.n	83cf2 <_malloc_r+0x2e6>
   83e9c:	f240 5254 	movw	r2, #1364	; 0x554
   83ea0:	4293      	cmp	r3, r2
   83ea2:	d822      	bhi.n	83eea <_malloc_r+0x4de>
   83ea4:	0cb3      	lsrs	r3, r6, #18
   83ea6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   83eaa:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   83eae:	00c1      	lsls	r1, r0, #3
   83eb0:	e5ce      	b.n	83a50 <_malloc_r+0x44>
   83eb2:	f103 0b10 	add.w	fp, r3, #16
   83eb6:	e6af      	b.n	83c18 <_malloc_r+0x20c>
   83eb8:	2a54      	cmp	r2, #84	; 0x54
   83eba:	d829      	bhi.n	83f10 <_malloc_r+0x504>
   83ebc:	0b1a      	lsrs	r2, r3, #12
   83ebe:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83ec2:	00c9      	lsls	r1, r1, #3
   83ec4:	326e      	adds	r2, #110	; 0x6e
   83ec6:	e74d      	b.n	83d64 <_malloc_r+0x358>
   83ec8:	4b20      	ldr	r3, [pc, #128]	; (83f4c <_malloc_r+0x540>)
   83eca:	6819      	ldr	r1, [r3, #0]
   83ecc:	4459      	add	r1, fp
   83ece:	6019      	str	r1, [r3, #0]
   83ed0:	e6b3      	b.n	83c3a <_malloc_r+0x22e>
   83ed2:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83ed6:	2800      	cmp	r0, #0
   83ed8:	f47f aeaf 	bne.w	83c3a <_malloc_r+0x22e>
   83edc:	eb08 030b 	add.w	r3, r8, fp
   83ee0:	68ba      	ldr	r2, [r7, #8]
   83ee2:	f043 0301 	orr.w	r3, r3, #1
   83ee6:	6053      	str	r3, [r2, #4]
   83ee8:	e6ef      	b.n	83cca <_malloc_r+0x2be>
   83eea:	207f      	movs	r0, #127	; 0x7f
   83eec:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83ef0:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83ef4:	e5ac      	b.n	83a50 <_malloc_r+0x44>
   83ef6:	f104 0108 	add.w	r1, r4, #8
   83efa:	4628      	mov	r0, r5
   83efc:	9300      	str	r3, [sp, #0]
   83efe:	f7ff fa67 	bl	833d0 <_free_r>
   83f02:	9b00      	ldr	r3, [sp, #0]
   83f04:	6819      	ldr	r1, [r3, #0]
   83f06:	e6e0      	b.n	83cca <_malloc_r+0x2be>
   83f08:	2001      	movs	r0, #1
   83f0a:	f04f 0900 	mov.w	r9, #0
   83f0e:	e6bd      	b.n	83c8c <_malloc_r+0x280>
   83f10:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   83f14:	d805      	bhi.n	83f22 <_malloc_r+0x516>
   83f16:	0bda      	lsrs	r2, r3, #15
   83f18:	f102 0178 	add.w	r1, r2, #120	; 0x78
   83f1c:	00c9      	lsls	r1, r1, #3
   83f1e:	3277      	adds	r2, #119	; 0x77
   83f20:	e720      	b.n	83d64 <_malloc_r+0x358>
   83f22:	f240 5154 	movw	r1, #1364	; 0x554
   83f26:	428a      	cmp	r2, r1
   83f28:	d805      	bhi.n	83f36 <_malloc_r+0x52a>
   83f2a:	0c9a      	lsrs	r2, r3, #18
   83f2c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   83f30:	00c9      	lsls	r1, r1, #3
   83f32:	327c      	adds	r2, #124	; 0x7c
   83f34:	e716      	b.n	83d64 <_malloc_r+0x358>
   83f36:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83f3a:	227e      	movs	r2, #126	; 0x7e
   83f3c:	e712      	b.n	83d64 <_malloc_r+0x358>
   83f3e:	687b      	ldr	r3, [r7, #4]
   83f40:	e780      	b.n	83e44 <_malloc_r+0x438>
   83f42:	08f0      	lsrs	r0, r6, #3
   83f44:	f106 0308 	add.w	r3, r6, #8
   83f48:	e60e      	b.n	83b68 <_malloc_r+0x15c>
   83f4a:	bf00      	nop
   83f4c:	20070c0c 	.word	0x20070c0c

00083f50 <__ascii_mbtowc>:
   83f50:	b082      	sub	sp, #8
   83f52:	b149      	cbz	r1, 83f68 <__ascii_mbtowc+0x18>
   83f54:	b15a      	cbz	r2, 83f6e <__ascii_mbtowc+0x1e>
   83f56:	b16b      	cbz	r3, 83f74 <__ascii_mbtowc+0x24>
   83f58:	7813      	ldrb	r3, [r2, #0]
   83f5a:	600b      	str	r3, [r1, #0]
   83f5c:	7812      	ldrb	r2, [r2, #0]
   83f5e:	1c10      	adds	r0, r2, #0
   83f60:	bf18      	it	ne
   83f62:	2001      	movne	r0, #1
   83f64:	b002      	add	sp, #8
   83f66:	4770      	bx	lr
   83f68:	a901      	add	r1, sp, #4
   83f6a:	2a00      	cmp	r2, #0
   83f6c:	d1f3      	bne.n	83f56 <__ascii_mbtowc+0x6>
   83f6e:	4610      	mov	r0, r2
   83f70:	b002      	add	sp, #8
   83f72:	4770      	bx	lr
   83f74:	f06f 0001 	mvn.w	r0, #1
   83f78:	e7f4      	b.n	83f64 <__ascii_mbtowc+0x14>
   83f7a:	bf00      	nop

00083f7c <memchr>:
   83f7c:	0783      	lsls	r3, r0, #30
   83f7e:	b470      	push	{r4, r5, r6}
   83f80:	b2cd      	uxtb	r5, r1
   83f82:	d03d      	beq.n	84000 <memchr+0x84>
   83f84:	1e54      	subs	r4, r2, #1
   83f86:	b30a      	cbz	r2, 83fcc <memchr+0x50>
   83f88:	7803      	ldrb	r3, [r0, #0]
   83f8a:	42ab      	cmp	r3, r5
   83f8c:	d01f      	beq.n	83fce <memchr+0x52>
   83f8e:	1c43      	adds	r3, r0, #1
   83f90:	e005      	b.n	83f9e <memchr+0x22>
   83f92:	f114 34ff 	adds.w	r4, r4, #4294967295
   83f96:	d319      	bcc.n	83fcc <memchr+0x50>
   83f98:	7802      	ldrb	r2, [r0, #0]
   83f9a:	42aa      	cmp	r2, r5
   83f9c:	d017      	beq.n	83fce <memchr+0x52>
   83f9e:	f013 0f03 	tst.w	r3, #3
   83fa2:	4618      	mov	r0, r3
   83fa4:	f103 0301 	add.w	r3, r3, #1
   83fa8:	d1f3      	bne.n	83f92 <memchr+0x16>
   83faa:	2c03      	cmp	r4, #3
   83fac:	d811      	bhi.n	83fd2 <memchr+0x56>
   83fae:	b34c      	cbz	r4, 84004 <memchr+0x88>
   83fb0:	7803      	ldrb	r3, [r0, #0]
   83fb2:	42ab      	cmp	r3, r5
   83fb4:	d00b      	beq.n	83fce <memchr+0x52>
   83fb6:	4404      	add	r4, r0
   83fb8:	1c43      	adds	r3, r0, #1
   83fba:	e002      	b.n	83fc2 <memchr+0x46>
   83fbc:	7802      	ldrb	r2, [r0, #0]
   83fbe:	42aa      	cmp	r2, r5
   83fc0:	d005      	beq.n	83fce <memchr+0x52>
   83fc2:	429c      	cmp	r4, r3
   83fc4:	4618      	mov	r0, r3
   83fc6:	f103 0301 	add.w	r3, r3, #1
   83fca:	d1f7      	bne.n	83fbc <memchr+0x40>
   83fcc:	2000      	movs	r0, #0
   83fce:	bc70      	pop	{r4, r5, r6}
   83fd0:	4770      	bx	lr
   83fd2:	0209      	lsls	r1, r1, #8
   83fd4:	b289      	uxth	r1, r1
   83fd6:	4329      	orrs	r1, r5
   83fd8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83fdc:	6803      	ldr	r3, [r0, #0]
   83fde:	4606      	mov	r6, r0
   83fe0:	404b      	eors	r3, r1
   83fe2:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83fe6:	ea22 0303 	bic.w	r3, r2, r3
   83fea:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83fee:	f100 0004 	add.w	r0, r0, #4
   83ff2:	d103      	bne.n	83ffc <memchr+0x80>
   83ff4:	3c04      	subs	r4, #4
   83ff6:	2c03      	cmp	r4, #3
   83ff8:	d8f0      	bhi.n	83fdc <memchr+0x60>
   83ffa:	e7d8      	b.n	83fae <memchr+0x32>
   83ffc:	4630      	mov	r0, r6
   83ffe:	e7d7      	b.n	83fb0 <memchr+0x34>
   84000:	4614      	mov	r4, r2
   84002:	e7d2      	b.n	83faa <memchr+0x2e>
   84004:	4620      	mov	r0, r4
   84006:	e7e2      	b.n	83fce <memchr+0x52>

00084008 <memmove>:
   84008:	4288      	cmp	r0, r1
   8400a:	b5f0      	push	{r4, r5, r6, r7, lr}
   8400c:	d90d      	bls.n	8402a <memmove+0x22>
   8400e:	188b      	adds	r3, r1, r2
   84010:	4298      	cmp	r0, r3
   84012:	d20a      	bcs.n	8402a <memmove+0x22>
   84014:	1884      	adds	r4, r0, r2
   84016:	2a00      	cmp	r2, #0
   84018:	d051      	beq.n	840be <memmove+0xb6>
   8401a:	4622      	mov	r2, r4
   8401c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84020:	4299      	cmp	r1, r3
   84022:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84026:	d1f9      	bne.n	8401c <memmove+0x14>
   84028:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8402a:	2a0f      	cmp	r2, #15
   8402c:	d948      	bls.n	840c0 <memmove+0xb8>
   8402e:	ea41 0300 	orr.w	r3, r1, r0
   84032:	079b      	lsls	r3, r3, #30
   84034:	d146      	bne.n	840c4 <memmove+0xbc>
   84036:	4615      	mov	r5, r2
   84038:	f100 0410 	add.w	r4, r0, #16
   8403c:	f101 0310 	add.w	r3, r1, #16
   84040:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84044:	3d10      	subs	r5, #16
   84046:	f844 6c10 	str.w	r6, [r4, #-16]
   8404a:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   8404e:	2d0f      	cmp	r5, #15
   84050:	f844 6c0c 	str.w	r6, [r4, #-12]
   84054:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84058:	f104 0410 	add.w	r4, r4, #16
   8405c:	f844 6c18 	str.w	r6, [r4, #-24]
   84060:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84064:	f103 0310 	add.w	r3, r3, #16
   84068:	f844 6c14 	str.w	r6, [r4, #-20]
   8406c:	d8e8      	bhi.n	84040 <memmove+0x38>
   8406e:	f1a2 0310 	sub.w	r3, r2, #16
   84072:	f023 030f 	bic.w	r3, r3, #15
   84076:	f002 0e0f 	and.w	lr, r2, #15
   8407a:	3310      	adds	r3, #16
   8407c:	f1be 0f03 	cmp.w	lr, #3
   84080:	4419      	add	r1, r3
   84082:	4403      	add	r3, r0
   84084:	d921      	bls.n	840ca <memmove+0xc2>
   84086:	460e      	mov	r6, r1
   84088:	4674      	mov	r4, lr
   8408a:	1f1d      	subs	r5, r3, #4
   8408c:	f856 7b04 	ldr.w	r7, [r6], #4
   84090:	3c04      	subs	r4, #4
   84092:	2c03      	cmp	r4, #3
   84094:	f845 7f04 	str.w	r7, [r5, #4]!
   84098:	d8f8      	bhi.n	8408c <memmove+0x84>
   8409a:	f1ae 0404 	sub.w	r4, lr, #4
   8409e:	f024 0403 	bic.w	r4, r4, #3
   840a2:	3404      	adds	r4, #4
   840a4:	4421      	add	r1, r4
   840a6:	4423      	add	r3, r4
   840a8:	f002 0203 	and.w	r2, r2, #3
   840ac:	b162      	cbz	r2, 840c8 <memmove+0xc0>
   840ae:	3b01      	subs	r3, #1
   840b0:	440a      	add	r2, r1
   840b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   840b6:	428a      	cmp	r2, r1
   840b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   840bc:	d1f9      	bne.n	840b2 <memmove+0xaa>
   840be:	bdf0      	pop	{r4, r5, r6, r7, pc}
   840c0:	4603      	mov	r3, r0
   840c2:	e7f3      	b.n	840ac <memmove+0xa4>
   840c4:	4603      	mov	r3, r0
   840c6:	e7f2      	b.n	840ae <memmove+0xa6>
   840c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   840ca:	4672      	mov	r2, lr
   840cc:	e7ee      	b.n	840ac <memmove+0xa4>
   840ce:	bf00      	nop

000840d0 <__malloc_lock>:
   840d0:	4801      	ldr	r0, [pc, #4]	; (840d8 <__malloc_lock+0x8>)
   840d2:	f7ff bc17 	b.w	83904 <__retarget_lock_acquire_recursive>
   840d6:	bf00      	nop
   840d8:	20070c7c 	.word	0x20070c7c

000840dc <__malloc_unlock>:
   840dc:	4801      	ldr	r0, [pc, #4]	; (840e4 <__malloc_unlock+0x8>)
   840de:	f7ff bc13 	b.w	83908 <__retarget_lock_release_recursive>
   840e2:	bf00      	nop
   840e4:	20070c7c 	.word	0x20070c7c

000840e8 <_realloc_r>:
   840e8:	2900      	cmp	r1, #0
   840ea:	f000 8094 	beq.w	84216 <_realloc_r+0x12e>
   840ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   840f2:	460c      	mov	r4, r1
   840f4:	4615      	mov	r5, r2
   840f6:	b083      	sub	sp, #12
   840f8:	4680      	mov	r8, r0
   840fa:	f105 060b 	add.w	r6, r5, #11
   840fe:	f7ff ffe7 	bl	840d0 <__malloc_lock>
   84102:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84106:	2e16      	cmp	r6, #22
   84108:	f02e 0703 	bic.w	r7, lr, #3
   8410c:	f1a4 0908 	sub.w	r9, r4, #8
   84110:	d83c      	bhi.n	8418c <_realloc_r+0xa4>
   84112:	2210      	movs	r2, #16
   84114:	4616      	mov	r6, r2
   84116:	42b5      	cmp	r5, r6
   84118:	d83d      	bhi.n	84196 <_realloc_r+0xae>
   8411a:	4297      	cmp	r7, r2
   8411c:	da43      	bge.n	841a6 <_realloc_r+0xbe>
   8411e:	4bc6      	ldr	r3, [pc, #792]	; (84438 <_realloc_r+0x350>)
   84120:	eb09 0007 	add.w	r0, r9, r7
   84124:	6899      	ldr	r1, [r3, #8]
   84126:	4288      	cmp	r0, r1
   84128:	f000 80c3 	beq.w	842b2 <_realloc_r+0x1ca>
   8412c:	6843      	ldr	r3, [r0, #4]
   8412e:	f023 0101 	bic.w	r1, r3, #1
   84132:	4401      	add	r1, r0
   84134:	6849      	ldr	r1, [r1, #4]
   84136:	07c9      	lsls	r1, r1, #31
   84138:	d54d      	bpl.n	841d6 <_realloc_r+0xee>
   8413a:	f01e 0f01 	tst.w	lr, #1
   8413e:	f000 809b 	beq.w	84278 <_realloc_r+0x190>
   84142:	4629      	mov	r1, r5
   84144:	4640      	mov	r0, r8
   84146:	f7ff fc61 	bl	83a0c <_malloc_r>
   8414a:	4605      	mov	r5, r0
   8414c:	2800      	cmp	r0, #0
   8414e:	d03b      	beq.n	841c8 <_realloc_r+0xe0>
   84150:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84154:	f1a0 0208 	sub.w	r2, r0, #8
   84158:	f023 0301 	bic.w	r3, r3, #1
   8415c:	444b      	add	r3, r9
   8415e:	429a      	cmp	r2, r3
   84160:	f000 812b 	beq.w	843ba <_realloc_r+0x2d2>
   84164:	1f3a      	subs	r2, r7, #4
   84166:	2a24      	cmp	r2, #36	; 0x24
   84168:	f200 8118 	bhi.w	8439c <_realloc_r+0x2b4>
   8416c:	2a13      	cmp	r2, #19
   8416e:	f200 80eb 	bhi.w	84348 <_realloc_r+0x260>
   84172:	4603      	mov	r3, r0
   84174:	4622      	mov	r2, r4
   84176:	6811      	ldr	r1, [r2, #0]
   84178:	6019      	str	r1, [r3, #0]
   8417a:	6851      	ldr	r1, [r2, #4]
   8417c:	6059      	str	r1, [r3, #4]
   8417e:	6892      	ldr	r2, [r2, #8]
   84180:	609a      	str	r2, [r3, #8]
   84182:	4621      	mov	r1, r4
   84184:	4640      	mov	r0, r8
   84186:	f7ff f923 	bl	833d0 <_free_r>
   8418a:	e01d      	b.n	841c8 <_realloc_r+0xe0>
   8418c:	f026 0607 	bic.w	r6, r6, #7
   84190:	2e00      	cmp	r6, #0
   84192:	4632      	mov	r2, r6
   84194:	dabf      	bge.n	84116 <_realloc_r+0x2e>
   84196:	2500      	movs	r5, #0
   84198:	230c      	movs	r3, #12
   8419a:	4628      	mov	r0, r5
   8419c:	f8c8 3000 	str.w	r3, [r8]
   841a0:	b003      	add	sp, #12
   841a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841a6:	4625      	mov	r5, r4
   841a8:	1bbb      	subs	r3, r7, r6
   841aa:	2b0f      	cmp	r3, #15
   841ac:	f8d9 2004 	ldr.w	r2, [r9, #4]
   841b0:	d81d      	bhi.n	841ee <_realloc_r+0x106>
   841b2:	f002 0201 	and.w	r2, r2, #1
   841b6:	433a      	orrs	r2, r7
   841b8:	eb09 0107 	add.w	r1, r9, r7
   841bc:	f8c9 2004 	str.w	r2, [r9, #4]
   841c0:	684b      	ldr	r3, [r1, #4]
   841c2:	f043 0301 	orr.w	r3, r3, #1
   841c6:	604b      	str	r3, [r1, #4]
   841c8:	4640      	mov	r0, r8
   841ca:	f7ff ff87 	bl	840dc <__malloc_unlock>
   841ce:	4628      	mov	r0, r5
   841d0:	b003      	add	sp, #12
   841d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   841d6:	f023 0303 	bic.w	r3, r3, #3
   841da:	18f9      	adds	r1, r7, r3
   841dc:	4291      	cmp	r1, r2
   841de:	db1d      	blt.n	8421c <_realloc_r+0x134>
   841e0:	68c3      	ldr	r3, [r0, #12]
   841e2:	6882      	ldr	r2, [r0, #8]
   841e4:	4625      	mov	r5, r4
   841e6:	60d3      	str	r3, [r2, #12]
   841e8:	460f      	mov	r7, r1
   841ea:	609a      	str	r2, [r3, #8]
   841ec:	e7dc      	b.n	841a8 <_realloc_r+0xc0>
   841ee:	f002 0201 	and.w	r2, r2, #1
   841f2:	eb09 0106 	add.w	r1, r9, r6
   841f6:	f043 0301 	orr.w	r3, r3, #1
   841fa:	4332      	orrs	r2, r6
   841fc:	f8c9 2004 	str.w	r2, [r9, #4]
   84200:	444f      	add	r7, r9
   84202:	604b      	str	r3, [r1, #4]
   84204:	687b      	ldr	r3, [r7, #4]
   84206:	3108      	adds	r1, #8
   84208:	f043 0301 	orr.w	r3, r3, #1
   8420c:	607b      	str	r3, [r7, #4]
   8420e:	4640      	mov	r0, r8
   84210:	f7ff f8de 	bl	833d0 <_free_r>
   84214:	e7d8      	b.n	841c8 <_realloc_r+0xe0>
   84216:	4611      	mov	r1, r2
   84218:	f7ff bbf8 	b.w	83a0c <_malloc_r>
   8421c:	f01e 0f01 	tst.w	lr, #1
   84220:	d18f      	bne.n	84142 <_realloc_r+0x5a>
   84222:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84226:	eba9 0a01 	sub.w	sl, r9, r1
   8422a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8422e:	f021 0103 	bic.w	r1, r1, #3
   84232:	440b      	add	r3, r1
   84234:	443b      	add	r3, r7
   84236:	4293      	cmp	r3, r2
   84238:	db26      	blt.n	84288 <_realloc_r+0x1a0>
   8423a:	4655      	mov	r5, sl
   8423c:	68c1      	ldr	r1, [r0, #12]
   8423e:	6880      	ldr	r0, [r0, #8]
   84240:	1f3a      	subs	r2, r7, #4
   84242:	60c1      	str	r1, [r0, #12]
   84244:	6088      	str	r0, [r1, #8]
   84246:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8424a:	f8da 100c 	ldr.w	r1, [sl, #12]
   8424e:	2a24      	cmp	r2, #36	; 0x24
   84250:	60c1      	str	r1, [r0, #12]
   84252:	6088      	str	r0, [r1, #8]
   84254:	d826      	bhi.n	842a4 <_realloc_r+0x1bc>
   84256:	2a13      	cmp	r2, #19
   84258:	f240 8081 	bls.w	8435e <_realloc_r+0x276>
   8425c:	6821      	ldr	r1, [r4, #0]
   8425e:	2a1b      	cmp	r2, #27
   84260:	f8ca 1008 	str.w	r1, [sl, #8]
   84264:	6861      	ldr	r1, [r4, #4]
   84266:	f8ca 100c 	str.w	r1, [sl, #12]
   8426a:	f200 80ad 	bhi.w	843c8 <_realloc_r+0x2e0>
   8426e:	f104 0008 	add.w	r0, r4, #8
   84272:	f10a 0210 	add.w	r2, sl, #16
   84276:	e074      	b.n	84362 <_realloc_r+0x27a>
   84278:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8427c:	eba9 0a03 	sub.w	sl, r9, r3
   84280:	f8da 1004 	ldr.w	r1, [sl, #4]
   84284:	f021 0103 	bic.w	r1, r1, #3
   84288:	187b      	adds	r3, r7, r1
   8428a:	4293      	cmp	r3, r2
   8428c:	f6ff af59 	blt.w	84142 <_realloc_r+0x5a>
   84290:	4655      	mov	r5, sl
   84292:	f8da 100c 	ldr.w	r1, [sl, #12]
   84296:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8429a:	1f3a      	subs	r2, r7, #4
   8429c:	2a24      	cmp	r2, #36	; 0x24
   8429e:	60c1      	str	r1, [r0, #12]
   842a0:	6088      	str	r0, [r1, #8]
   842a2:	d9d8      	bls.n	84256 <_realloc_r+0x16e>
   842a4:	4621      	mov	r1, r4
   842a6:	4628      	mov	r0, r5
   842a8:	461f      	mov	r7, r3
   842aa:	46d1      	mov	r9, sl
   842ac:	f7ff feac 	bl	84008 <memmove>
   842b0:	e77a      	b.n	841a8 <_realloc_r+0xc0>
   842b2:	6841      	ldr	r1, [r0, #4]
   842b4:	f106 0010 	add.w	r0, r6, #16
   842b8:	f021 0b03 	bic.w	fp, r1, #3
   842bc:	44bb      	add	fp, r7
   842be:	4583      	cmp	fp, r0
   842c0:	da58      	bge.n	84374 <_realloc_r+0x28c>
   842c2:	f01e 0f01 	tst.w	lr, #1
   842c6:	f47f af3c 	bne.w	84142 <_realloc_r+0x5a>
   842ca:	f854 1c08 	ldr.w	r1, [r4, #-8]
   842ce:	eba9 0a01 	sub.w	sl, r9, r1
   842d2:	f8da 1004 	ldr.w	r1, [sl, #4]
   842d6:	f021 0103 	bic.w	r1, r1, #3
   842da:	448b      	add	fp, r1
   842dc:	4558      	cmp	r0, fp
   842de:	dcd3      	bgt.n	84288 <_realloc_r+0x1a0>
   842e0:	4655      	mov	r5, sl
   842e2:	f8da 100c 	ldr.w	r1, [sl, #12]
   842e6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   842ea:	1f3a      	subs	r2, r7, #4
   842ec:	2a24      	cmp	r2, #36	; 0x24
   842ee:	60c1      	str	r1, [r0, #12]
   842f0:	6088      	str	r0, [r1, #8]
   842f2:	f200 808d 	bhi.w	84410 <_realloc_r+0x328>
   842f6:	2a13      	cmp	r2, #19
   842f8:	f240 8087 	bls.w	8440a <_realloc_r+0x322>
   842fc:	6821      	ldr	r1, [r4, #0]
   842fe:	2a1b      	cmp	r2, #27
   84300:	f8ca 1008 	str.w	r1, [sl, #8]
   84304:	6861      	ldr	r1, [r4, #4]
   84306:	f8ca 100c 	str.w	r1, [sl, #12]
   8430a:	f200 8088 	bhi.w	8441e <_realloc_r+0x336>
   8430e:	f104 0108 	add.w	r1, r4, #8
   84312:	f10a 0210 	add.w	r2, sl, #16
   84316:	6808      	ldr	r0, [r1, #0]
   84318:	6010      	str	r0, [r2, #0]
   8431a:	6848      	ldr	r0, [r1, #4]
   8431c:	6050      	str	r0, [r2, #4]
   8431e:	6889      	ldr	r1, [r1, #8]
   84320:	6091      	str	r1, [r2, #8]
   84322:	ebab 0206 	sub.w	r2, fp, r6
   84326:	eb0a 0106 	add.w	r1, sl, r6
   8432a:	f042 0201 	orr.w	r2, r2, #1
   8432e:	6099      	str	r1, [r3, #8]
   84330:	604a      	str	r2, [r1, #4]
   84332:	f8da 3004 	ldr.w	r3, [sl, #4]
   84336:	4640      	mov	r0, r8
   84338:	f003 0301 	and.w	r3, r3, #1
   8433c:	431e      	orrs	r6, r3
   8433e:	f8ca 6004 	str.w	r6, [sl, #4]
   84342:	f7ff fecb 	bl	840dc <__malloc_unlock>
   84346:	e742      	b.n	841ce <_realloc_r+0xe6>
   84348:	6823      	ldr	r3, [r4, #0]
   8434a:	2a1b      	cmp	r2, #27
   8434c:	6003      	str	r3, [r0, #0]
   8434e:	6863      	ldr	r3, [r4, #4]
   84350:	6043      	str	r3, [r0, #4]
   84352:	d827      	bhi.n	843a4 <_realloc_r+0x2bc>
   84354:	f100 0308 	add.w	r3, r0, #8
   84358:	f104 0208 	add.w	r2, r4, #8
   8435c:	e70b      	b.n	84176 <_realloc_r+0x8e>
   8435e:	4620      	mov	r0, r4
   84360:	462a      	mov	r2, r5
   84362:	6801      	ldr	r1, [r0, #0]
   84364:	461f      	mov	r7, r3
   84366:	6011      	str	r1, [r2, #0]
   84368:	6841      	ldr	r1, [r0, #4]
   8436a:	46d1      	mov	r9, sl
   8436c:	6051      	str	r1, [r2, #4]
   8436e:	6883      	ldr	r3, [r0, #8]
   84370:	6093      	str	r3, [r2, #8]
   84372:	e719      	b.n	841a8 <_realloc_r+0xc0>
   84374:	ebab 0b06 	sub.w	fp, fp, r6
   84378:	eb09 0106 	add.w	r1, r9, r6
   8437c:	f04b 0201 	orr.w	r2, fp, #1
   84380:	6099      	str	r1, [r3, #8]
   84382:	604a      	str	r2, [r1, #4]
   84384:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84388:	4640      	mov	r0, r8
   8438a:	f003 0301 	and.w	r3, r3, #1
   8438e:	431e      	orrs	r6, r3
   84390:	f844 6c04 	str.w	r6, [r4, #-4]
   84394:	f7ff fea2 	bl	840dc <__malloc_unlock>
   84398:	4625      	mov	r5, r4
   8439a:	e718      	b.n	841ce <_realloc_r+0xe6>
   8439c:	4621      	mov	r1, r4
   8439e:	f7ff fe33 	bl	84008 <memmove>
   843a2:	e6ee      	b.n	84182 <_realloc_r+0x9a>
   843a4:	68a3      	ldr	r3, [r4, #8]
   843a6:	2a24      	cmp	r2, #36	; 0x24
   843a8:	6083      	str	r3, [r0, #8]
   843aa:	68e3      	ldr	r3, [r4, #12]
   843ac:	60c3      	str	r3, [r0, #12]
   843ae:	d018      	beq.n	843e2 <_realloc_r+0x2fa>
   843b0:	f100 0310 	add.w	r3, r0, #16
   843b4:	f104 0210 	add.w	r2, r4, #16
   843b8:	e6dd      	b.n	84176 <_realloc_r+0x8e>
   843ba:	f850 3c04 	ldr.w	r3, [r0, #-4]
   843be:	4625      	mov	r5, r4
   843c0:	f023 0303 	bic.w	r3, r3, #3
   843c4:	441f      	add	r7, r3
   843c6:	e6ef      	b.n	841a8 <_realloc_r+0xc0>
   843c8:	68a1      	ldr	r1, [r4, #8]
   843ca:	2a24      	cmp	r2, #36	; 0x24
   843cc:	f8ca 1010 	str.w	r1, [sl, #16]
   843d0:	68e1      	ldr	r1, [r4, #12]
   843d2:	f8ca 1014 	str.w	r1, [sl, #20]
   843d6:	d00d      	beq.n	843f4 <_realloc_r+0x30c>
   843d8:	f104 0010 	add.w	r0, r4, #16
   843dc:	f10a 0218 	add.w	r2, sl, #24
   843e0:	e7bf      	b.n	84362 <_realloc_r+0x27a>
   843e2:	6922      	ldr	r2, [r4, #16]
   843e4:	f100 0318 	add.w	r3, r0, #24
   843e8:	6102      	str	r2, [r0, #16]
   843ea:	6961      	ldr	r1, [r4, #20]
   843ec:	f104 0218 	add.w	r2, r4, #24
   843f0:	6141      	str	r1, [r0, #20]
   843f2:	e6c0      	b.n	84176 <_realloc_r+0x8e>
   843f4:	6922      	ldr	r2, [r4, #16]
   843f6:	f104 0018 	add.w	r0, r4, #24
   843fa:	f8ca 2018 	str.w	r2, [sl, #24]
   843fe:	6961      	ldr	r1, [r4, #20]
   84400:	f10a 0220 	add.w	r2, sl, #32
   84404:	f8ca 101c 	str.w	r1, [sl, #28]
   84408:	e7ab      	b.n	84362 <_realloc_r+0x27a>
   8440a:	4621      	mov	r1, r4
   8440c:	462a      	mov	r2, r5
   8440e:	e782      	b.n	84316 <_realloc_r+0x22e>
   84410:	4621      	mov	r1, r4
   84412:	4628      	mov	r0, r5
   84414:	9301      	str	r3, [sp, #4]
   84416:	f7ff fdf7 	bl	84008 <memmove>
   8441a:	9b01      	ldr	r3, [sp, #4]
   8441c:	e781      	b.n	84322 <_realloc_r+0x23a>
   8441e:	68a1      	ldr	r1, [r4, #8]
   84420:	2a24      	cmp	r2, #36	; 0x24
   84422:	f8ca 1010 	str.w	r1, [sl, #16]
   84426:	68e1      	ldr	r1, [r4, #12]
   84428:	f8ca 1014 	str.w	r1, [sl, #20]
   8442c:	d006      	beq.n	8443c <_realloc_r+0x354>
   8442e:	f104 0110 	add.w	r1, r4, #16
   84432:	f10a 0218 	add.w	r2, sl, #24
   84436:	e76e      	b.n	84316 <_realloc_r+0x22e>
   84438:	200706e0 	.word	0x200706e0
   8443c:	6922      	ldr	r2, [r4, #16]
   8443e:	f104 0118 	add.w	r1, r4, #24
   84442:	f8ca 2018 	str.w	r2, [sl, #24]
   84446:	6960      	ldr	r0, [r4, #20]
   84448:	f10a 0220 	add.w	r2, sl, #32
   8444c:	f8ca 001c 	str.w	r0, [sl, #28]
   84450:	e761      	b.n	84316 <_realloc_r+0x22e>
   84452:	bf00      	nop

00084454 <_sbrk_r>:
   84454:	b538      	push	{r3, r4, r5, lr}
   84456:	2300      	movs	r3, #0
   84458:	4c06      	ldr	r4, [pc, #24]	; (84474 <_sbrk_r+0x20>)
   8445a:	4605      	mov	r5, r0
   8445c:	4608      	mov	r0, r1
   8445e:	6023      	str	r3, [r4, #0]
   84460:	f7fc fe94 	bl	8118c <_sbrk>
   84464:	1c43      	adds	r3, r0, #1
   84466:	d000      	beq.n	8446a <_sbrk_r+0x16>
   84468:	bd38      	pop	{r3, r4, r5, pc}
   8446a:	6823      	ldr	r3, [r4, #0]
   8446c:	2b00      	cmp	r3, #0
   8446e:	d0fb      	beq.n	84468 <_sbrk_r+0x14>
   84470:	602b      	str	r3, [r5, #0]
   84472:	bd38      	pop	{r3, r4, r5, pc}
   84474:	20070c90 	.word	0x20070c90

00084478 <__sread>:
   84478:	b510      	push	{r4, lr}
   8447a:	460c      	mov	r4, r1
   8447c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   84480:	f000 f9f4 	bl	8486c <_read_r>
   84484:	2800      	cmp	r0, #0
   84486:	db03      	blt.n	84490 <__sread+0x18>
   84488:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8448a:	4403      	add	r3, r0
   8448c:	6523      	str	r3, [r4, #80]	; 0x50
   8448e:	bd10      	pop	{r4, pc}
   84490:	89a3      	ldrh	r3, [r4, #12]
   84492:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   84496:	81a3      	strh	r3, [r4, #12]
   84498:	bd10      	pop	{r4, pc}
   8449a:	bf00      	nop

0008449c <__swrite>:
   8449c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   844a0:	460c      	mov	r4, r1
   844a2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   844a6:	461f      	mov	r7, r3
   844a8:	05cb      	lsls	r3, r1, #23
   844aa:	4616      	mov	r6, r2
   844ac:	4605      	mov	r5, r0
   844ae:	d507      	bpl.n	844c0 <__swrite+0x24>
   844b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   844b4:	2302      	movs	r3, #2
   844b6:	2200      	movs	r2, #0
   844b8:	f000 f9c2 	bl	84840 <_lseek_r>
   844bc:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   844c0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   844c4:	81a1      	strh	r1, [r4, #12]
   844c6:	463b      	mov	r3, r7
   844c8:	4632      	mov	r2, r6
   844ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   844ce:	4628      	mov	r0, r5
   844d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   844d4:	f000 b8a2 	b.w	8461c <_write_r>

000844d8 <__sseek>:
   844d8:	b510      	push	{r4, lr}
   844da:	460c      	mov	r4, r1
   844dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   844e0:	f000 f9ae 	bl	84840 <_lseek_r>
   844e4:	89a3      	ldrh	r3, [r4, #12]
   844e6:	1c42      	adds	r2, r0, #1
   844e8:	bf0e      	itee	eq
   844ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   844ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   844f2:	6520      	strne	r0, [r4, #80]	; 0x50
   844f4:	81a3      	strh	r3, [r4, #12]
   844f6:	bd10      	pop	{r4, pc}

000844f8 <__sclose>:
   844f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   844fc:	f000 b906 	b.w	8470c <_close_r>

00084500 <__swbuf_r>:
   84500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84502:	460d      	mov	r5, r1
   84504:	4614      	mov	r4, r2
   84506:	4606      	mov	r6, r0
   84508:	b110      	cbz	r0, 84510 <__swbuf_r+0x10>
   8450a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8450c:	2b00      	cmp	r3, #0
   8450e:	d04b      	beq.n	845a8 <__swbuf_r+0xa8>
   84510:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84514:	69a3      	ldr	r3, [r4, #24]
   84516:	b291      	uxth	r1, r2
   84518:	0708      	lsls	r0, r1, #28
   8451a:	60a3      	str	r3, [r4, #8]
   8451c:	d539      	bpl.n	84592 <__swbuf_r+0x92>
   8451e:	6923      	ldr	r3, [r4, #16]
   84520:	2b00      	cmp	r3, #0
   84522:	d036      	beq.n	84592 <__swbuf_r+0x92>
   84524:	b2ed      	uxtb	r5, r5
   84526:	0489      	lsls	r1, r1, #18
   84528:	462f      	mov	r7, r5
   8452a:	d515      	bpl.n	84558 <__swbuf_r+0x58>
   8452c:	6822      	ldr	r2, [r4, #0]
   8452e:	6961      	ldr	r1, [r4, #20]
   84530:	1ad3      	subs	r3, r2, r3
   84532:	428b      	cmp	r3, r1
   84534:	da1c      	bge.n	84570 <__swbuf_r+0x70>
   84536:	3301      	adds	r3, #1
   84538:	68a1      	ldr	r1, [r4, #8]
   8453a:	1c50      	adds	r0, r2, #1
   8453c:	3901      	subs	r1, #1
   8453e:	60a1      	str	r1, [r4, #8]
   84540:	6020      	str	r0, [r4, #0]
   84542:	7015      	strb	r5, [r2, #0]
   84544:	6962      	ldr	r2, [r4, #20]
   84546:	429a      	cmp	r2, r3
   84548:	d01a      	beq.n	84580 <__swbuf_r+0x80>
   8454a:	89a3      	ldrh	r3, [r4, #12]
   8454c:	07db      	lsls	r3, r3, #31
   8454e:	d501      	bpl.n	84554 <__swbuf_r+0x54>
   84550:	2d0a      	cmp	r5, #10
   84552:	d015      	beq.n	84580 <__swbuf_r+0x80>
   84554:	4638      	mov	r0, r7
   84556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84558:	6e61      	ldr	r1, [r4, #100]	; 0x64
   8455a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8455e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   84562:	81a2      	strh	r2, [r4, #12]
   84564:	6822      	ldr	r2, [r4, #0]
   84566:	6661      	str	r1, [r4, #100]	; 0x64
   84568:	6961      	ldr	r1, [r4, #20]
   8456a:	1ad3      	subs	r3, r2, r3
   8456c:	428b      	cmp	r3, r1
   8456e:	dbe2      	blt.n	84536 <__swbuf_r+0x36>
   84570:	4621      	mov	r1, r4
   84572:	4630      	mov	r0, r6
   84574:	f7fe fdae 	bl	830d4 <_fflush_r>
   84578:	b940      	cbnz	r0, 8458c <__swbuf_r+0x8c>
   8457a:	2301      	movs	r3, #1
   8457c:	6822      	ldr	r2, [r4, #0]
   8457e:	e7db      	b.n	84538 <__swbuf_r+0x38>
   84580:	4621      	mov	r1, r4
   84582:	4630      	mov	r0, r6
   84584:	f7fe fda6 	bl	830d4 <_fflush_r>
   84588:	2800      	cmp	r0, #0
   8458a:	d0e3      	beq.n	84554 <__swbuf_r+0x54>
   8458c:	f04f 37ff 	mov.w	r7, #4294967295
   84590:	e7e0      	b.n	84554 <__swbuf_r+0x54>
   84592:	4621      	mov	r1, r4
   84594:	4630      	mov	r0, r6
   84596:	f7fe fc8d 	bl	82eb4 <__swsetup_r>
   8459a:	2800      	cmp	r0, #0
   8459c:	d1f6      	bne.n	8458c <__swbuf_r+0x8c>
   8459e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   845a2:	6923      	ldr	r3, [r4, #16]
   845a4:	b291      	uxth	r1, r2
   845a6:	e7bd      	b.n	84524 <__swbuf_r+0x24>
   845a8:	f7fe fdec 	bl	83184 <__sinit>
   845ac:	e7b0      	b.n	84510 <__swbuf_r+0x10>
   845ae:	bf00      	nop

000845b0 <_wcrtomb_r>:
   845b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   845b2:	4606      	mov	r6, r0
   845b4:	b085      	sub	sp, #20
   845b6:	461f      	mov	r7, r3
   845b8:	b189      	cbz	r1, 845de <_wcrtomb_r+0x2e>
   845ba:	4c10      	ldr	r4, [pc, #64]	; (845fc <_wcrtomb_r+0x4c>)
   845bc:	4d10      	ldr	r5, [pc, #64]	; (84600 <_wcrtomb_r+0x50>)
   845be:	6824      	ldr	r4, [r4, #0]
   845c0:	6b64      	ldr	r4, [r4, #52]	; 0x34
   845c2:	2c00      	cmp	r4, #0
   845c4:	bf08      	it	eq
   845c6:	462c      	moveq	r4, r5
   845c8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   845cc:	47a0      	blx	r4
   845ce:	1c43      	adds	r3, r0, #1
   845d0:	d103      	bne.n	845da <_wcrtomb_r+0x2a>
   845d2:	2200      	movs	r2, #0
   845d4:	238a      	movs	r3, #138	; 0x8a
   845d6:	603a      	str	r2, [r7, #0]
   845d8:	6033      	str	r3, [r6, #0]
   845da:	b005      	add	sp, #20
   845dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   845de:	460c      	mov	r4, r1
   845e0:	4a06      	ldr	r2, [pc, #24]	; (845fc <_wcrtomb_r+0x4c>)
   845e2:	4d07      	ldr	r5, [pc, #28]	; (84600 <_wcrtomb_r+0x50>)
   845e4:	6811      	ldr	r1, [r2, #0]
   845e6:	4622      	mov	r2, r4
   845e8:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   845ea:	a901      	add	r1, sp, #4
   845ec:	2c00      	cmp	r4, #0
   845ee:	bf08      	it	eq
   845f0:	462c      	moveq	r4, r5
   845f2:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   845f6:	47a0      	blx	r4
   845f8:	e7e9      	b.n	845ce <_wcrtomb_r+0x1e>
   845fa:	bf00      	nop
   845fc:	20070140 	.word	0x20070140
   84600:	20070574 	.word	0x20070574

00084604 <__ascii_wctomb>:
   84604:	b119      	cbz	r1, 8460e <__ascii_wctomb+0xa>
   84606:	2aff      	cmp	r2, #255	; 0xff
   84608:	d803      	bhi.n	84612 <__ascii_wctomb+0xe>
   8460a:	700a      	strb	r2, [r1, #0]
   8460c:	2101      	movs	r1, #1
   8460e:	4608      	mov	r0, r1
   84610:	4770      	bx	lr
   84612:	238a      	movs	r3, #138	; 0x8a
   84614:	f04f 31ff 	mov.w	r1, #4294967295
   84618:	6003      	str	r3, [r0, #0]
   8461a:	e7f8      	b.n	8460e <__ascii_wctomb+0xa>

0008461c <_write_r>:
   8461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8461e:	460e      	mov	r6, r1
   84620:	2500      	movs	r5, #0
   84622:	4c08      	ldr	r4, [pc, #32]	; (84644 <_write_r+0x28>)
   84624:	4611      	mov	r1, r2
   84626:	4607      	mov	r7, r0
   84628:	461a      	mov	r2, r3
   8462a:	4630      	mov	r0, r6
   8462c:	6025      	str	r5, [r4, #0]
   8462e:	f7fb ff1f 	bl	80470 <_write>
   84632:	1c43      	adds	r3, r0, #1
   84634:	d000      	beq.n	84638 <_write_r+0x1c>
   84636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84638:	6823      	ldr	r3, [r4, #0]
   8463a:	2b00      	cmp	r3, #0
   8463c:	d0fb      	beq.n	84636 <_write_r+0x1a>
   8463e:	603b      	str	r3, [r7, #0]
   84640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84642:	bf00      	nop
   84644:	20070c90 	.word	0x20070c90

00084648 <__register_exitproc>:
   84648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8464c:	4d2c      	ldr	r5, [pc, #176]	; (84700 <__register_exitproc+0xb8>)
   8464e:	4606      	mov	r6, r0
   84650:	6828      	ldr	r0, [r5, #0]
   84652:	4698      	mov	r8, r3
   84654:	460f      	mov	r7, r1
   84656:	4691      	mov	r9, r2
   84658:	f7ff f954 	bl	83904 <__retarget_lock_acquire_recursive>
   8465c:	4b29      	ldr	r3, [pc, #164]	; (84704 <__register_exitproc+0xbc>)
   8465e:	681c      	ldr	r4, [r3, #0]
   84660:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   84664:	2b00      	cmp	r3, #0
   84666:	d03e      	beq.n	846e6 <__register_exitproc+0x9e>
   84668:	685a      	ldr	r2, [r3, #4]
   8466a:	2a1f      	cmp	r2, #31
   8466c:	dc1c      	bgt.n	846a8 <__register_exitproc+0x60>
   8466e:	f102 0e01 	add.w	lr, r2, #1
   84672:	b176      	cbz	r6, 84692 <__register_exitproc+0x4a>
   84674:	2101      	movs	r1, #1
   84676:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8467a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8467e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84682:	4091      	lsls	r1, r2
   84684:	4308      	orrs	r0, r1
   84686:	2e02      	cmp	r6, #2
   84688:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8468c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84690:	d023      	beq.n	846da <__register_exitproc+0x92>
   84692:	3202      	adds	r2, #2
   84694:	f8c3 e004 	str.w	lr, [r3, #4]
   84698:	6828      	ldr	r0, [r5, #0]
   8469a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8469e:	f7ff f933 	bl	83908 <__retarget_lock_release_recursive>
   846a2:	2000      	movs	r0, #0
   846a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   846a8:	4b17      	ldr	r3, [pc, #92]	; (84708 <__register_exitproc+0xc0>)
   846aa:	b30b      	cbz	r3, 846f0 <__register_exitproc+0xa8>
   846ac:	f44f 70c8 	mov.w	r0, #400	; 0x190
   846b0:	f7ff f9a4 	bl	839fc <malloc>
   846b4:	4603      	mov	r3, r0
   846b6:	b1d8      	cbz	r0, 846f0 <__register_exitproc+0xa8>
   846b8:	2000      	movs	r0, #0
   846ba:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   846be:	f04f 0e01 	mov.w	lr, #1
   846c2:	6058      	str	r0, [r3, #4]
   846c4:	6019      	str	r1, [r3, #0]
   846c6:	4602      	mov	r2, r0
   846c8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   846cc:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   846d0:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   846d4:	2e00      	cmp	r6, #0
   846d6:	d0dc      	beq.n	84692 <__register_exitproc+0x4a>
   846d8:	e7cc      	b.n	84674 <__register_exitproc+0x2c>
   846da:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   846de:	4301      	orrs	r1, r0
   846e0:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   846e4:	e7d5      	b.n	84692 <__register_exitproc+0x4a>
   846e6:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   846ea:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   846ee:	e7bb      	b.n	84668 <__register_exitproc+0x20>
   846f0:	6828      	ldr	r0, [r5, #0]
   846f2:	f7ff f909 	bl	83908 <__retarget_lock_release_recursive>
   846f6:	f04f 30ff 	mov.w	r0, #4294967295
   846fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   846fe:	bf00      	nop
   84700:	20070570 	.word	0x20070570
   84704:	000848d8 	.word	0x000848d8
   84708:	000839fd 	.word	0x000839fd

0008470c <_close_r>:
   8470c:	b538      	push	{r3, r4, r5, lr}
   8470e:	2300      	movs	r3, #0
   84710:	4c06      	ldr	r4, [pc, #24]	; (8472c <_close_r+0x20>)
   84712:	4605      	mov	r5, r0
   84714:	4608      	mov	r0, r1
   84716:	6023      	str	r3, [r4, #0]
   84718:	f7fc fd54 	bl	811c4 <_close>
   8471c:	1c43      	adds	r3, r0, #1
   8471e:	d000      	beq.n	84722 <_close_r+0x16>
   84720:	bd38      	pop	{r3, r4, r5, pc}
   84722:	6823      	ldr	r3, [r4, #0]
   84724:	2b00      	cmp	r3, #0
   84726:	d0fb      	beq.n	84720 <_close_r+0x14>
   84728:	602b      	str	r3, [r5, #0]
   8472a:	bd38      	pop	{r3, r4, r5, pc}
   8472c:	20070c90 	.word	0x20070c90

00084730 <_fclose_r>:
   84730:	b570      	push	{r4, r5, r6, lr}
   84732:	b159      	cbz	r1, 8474c <_fclose_r+0x1c>
   84734:	4605      	mov	r5, r0
   84736:	460c      	mov	r4, r1
   84738:	b110      	cbz	r0, 84740 <_fclose_r+0x10>
   8473a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8473c:	2b00      	cmp	r3, #0
   8473e:	d03c      	beq.n	847ba <_fclose_r+0x8a>
   84740:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84742:	07d8      	lsls	r0, r3, #31
   84744:	d505      	bpl.n	84752 <_fclose_r+0x22>
   84746:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8474a:	b92b      	cbnz	r3, 84758 <_fclose_r+0x28>
   8474c:	2600      	movs	r6, #0
   8474e:	4630      	mov	r0, r6
   84750:	bd70      	pop	{r4, r5, r6, pc}
   84752:	89a3      	ldrh	r3, [r4, #12]
   84754:	0599      	lsls	r1, r3, #22
   84756:	d53c      	bpl.n	847d2 <_fclose_r+0xa2>
   84758:	4621      	mov	r1, r4
   8475a:	4628      	mov	r0, r5
   8475c:	f7fe fc1e 	bl	82f9c <__sflush_r>
   84760:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   84762:	4606      	mov	r6, r0
   84764:	b133      	cbz	r3, 84774 <_fclose_r+0x44>
   84766:	69e1      	ldr	r1, [r4, #28]
   84768:	4628      	mov	r0, r5
   8476a:	4798      	blx	r3
   8476c:	2800      	cmp	r0, #0
   8476e:	bfb8      	it	lt
   84770:	f04f 36ff 	movlt.w	r6, #4294967295
   84774:	89a3      	ldrh	r3, [r4, #12]
   84776:	061a      	lsls	r2, r3, #24
   84778:	d422      	bmi.n	847c0 <_fclose_r+0x90>
   8477a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8477c:	b141      	cbz	r1, 84790 <_fclose_r+0x60>
   8477e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84782:	4299      	cmp	r1, r3
   84784:	d002      	beq.n	8478c <_fclose_r+0x5c>
   84786:	4628      	mov	r0, r5
   84788:	f7fe fe22 	bl	833d0 <_free_r>
   8478c:	2300      	movs	r3, #0
   8478e:	6323      	str	r3, [r4, #48]	; 0x30
   84790:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84792:	b121      	cbz	r1, 8479e <_fclose_r+0x6e>
   84794:	4628      	mov	r0, r5
   84796:	f7fe fe1b 	bl	833d0 <_free_r>
   8479a:	2300      	movs	r3, #0
   8479c:	6463      	str	r3, [r4, #68]	; 0x44
   8479e:	f7fe fd21 	bl	831e4 <__sfp_lock_acquire>
   847a2:	2200      	movs	r2, #0
   847a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   847a6:	81a2      	strh	r2, [r4, #12]
   847a8:	07db      	lsls	r3, r3, #31
   847aa:	d50e      	bpl.n	847ca <_fclose_r+0x9a>
   847ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   847ae:	f7ff f8a7 	bl	83900 <__retarget_lock_close_recursive>
   847b2:	f7fe fd1d 	bl	831f0 <__sfp_lock_release>
   847b6:	4630      	mov	r0, r6
   847b8:	bd70      	pop	{r4, r5, r6, pc}
   847ba:	f7fe fce3 	bl	83184 <__sinit>
   847be:	e7bf      	b.n	84740 <_fclose_r+0x10>
   847c0:	6921      	ldr	r1, [r4, #16]
   847c2:	4628      	mov	r0, r5
   847c4:	f7fe fe04 	bl	833d0 <_free_r>
   847c8:	e7d7      	b.n	8477a <_fclose_r+0x4a>
   847ca:	6da0      	ldr	r0, [r4, #88]	; 0x58
   847cc:	f7ff f89c 	bl	83908 <__retarget_lock_release_recursive>
   847d0:	e7ec      	b.n	847ac <_fclose_r+0x7c>
   847d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
   847d4:	f7ff f896 	bl	83904 <__retarget_lock_acquire_recursive>
   847d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   847dc:	2b00      	cmp	r3, #0
   847de:	d1bb      	bne.n	84758 <_fclose_r+0x28>
   847e0:	6e66      	ldr	r6, [r4, #100]	; 0x64
   847e2:	f016 0601 	ands.w	r6, r6, #1
   847e6:	d1b1      	bne.n	8474c <_fclose_r+0x1c>
   847e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   847ea:	f7ff f88d 	bl	83908 <__retarget_lock_release_recursive>
   847ee:	4630      	mov	r0, r6
   847f0:	bd70      	pop	{r4, r5, r6, pc}
   847f2:	bf00      	nop

000847f4 <_fstat_r>:
   847f4:	b570      	push	{r4, r5, r6, lr}
   847f6:	460d      	mov	r5, r1
   847f8:	2300      	movs	r3, #0
   847fa:	4c07      	ldr	r4, [pc, #28]	; (84818 <_fstat_r+0x24>)
   847fc:	4606      	mov	r6, r0
   847fe:	4611      	mov	r1, r2
   84800:	4628      	mov	r0, r5
   84802:	6023      	str	r3, [r4, #0]
   84804:	f7fc fce1 	bl	811ca <_fstat>
   84808:	1c43      	adds	r3, r0, #1
   8480a:	d000      	beq.n	8480e <_fstat_r+0x1a>
   8480c:	bd70      	pop	{r4, r5, r6, pc}
   8480e:	6823      	ldr	r3, [r4, #0]
   84810:	2b00      	cmp	r3, #0
   84812:	d0fb      	beq.n	8480c <_fstat_r+0x18>
   84814:	6033      	str	r3, [r6, #0]
   84816:	bd70      	pop	{r4, r5, r6, pc}
   84818:	20070c90 	.word	0x20070c90

0008481c <_isatty_r>:
   8481c:	b538      	push	{r3, r4, r5, lr}
   8481e:	2300      	movs	r3, #0
   84820:	4c06      	ldr	r4, [pc, #24]	; (8483c <_isatty_r+0x20>)
   84822:	4605      	mov	r5, r0
   84824:	4608      	mov	r0, r1
   84826:	6023      	str	r3, [r4, #0]
   84828:	f7fc fcd4 	bl	811d4 <_isatty>
   8482c:	1c43      	adds	r3, r0, #1
   8482e:	d000      	beq.n	84832 <_isatty_r+0x16>
   84830:	bd38      	pop	{r3, r4, r5, pc}
   84832:	6823      	ldr	r3, [r4, #0]
   84834:	2b00      	cmp	r3, #0
   84836:	d0fb      	beq.n	84830 <_isatty_r+0x14>
   84838:	602b      	str	r3, [r5, #0]
   8483a:	bd38      	pop	{r3, r4, r5, pc}
   8483c:	20070c90 	.word	0x20070c90

00084840 <_lseek_r>:
   84840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84842:	460e      	mov	r6, r1
   84844:	2500      	movs	r5, #0
   84846:	4c08      	ldr	r4, [pc, #32]	; (84868 <_lseek_r+0x28>)
   84848:	4611      	mov	r1, r2
   8484a:	4607      	mov	r7, r0
   8484c:	461a      	mov	r2, r3
   8484e:	4630      	mov	r0, r6
   84850:	6025      	str	r5, [r4, #0]
   84852:	f7fc fcc1 	bl	811d8 <_lseek>
   84856:	1c43      	adds	r3, r0, #1
   84858:	d000      	beq.n	8485c <_lseek_r+0x1c>
   8485a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8485c:	6823      	ldr	r3, [r4, #0]
   8485e:	2b00      	cmp	r3, #0
   84860:	d0fb      	beq.n	8485a <_lseek_r+0x1a>
   84862:	603b      	str	r3, [r7, #0]
   84864:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84866:	bf00      	nop
   84868:	20070c90 	.word	0x20070c90

0008486c <_read_r>:
   8486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8486e:	460e      	mov	r6, r1
   84870:	2500      	movs	r5, #0
   84872:	4c08      	ldr	r4, [pc, #32]	; (84894 <_read_r+0x28>)
   84874:	4611      	mov	r1, r2
   84876:	4607      	mov	r7, r0
   84878:	461a      	mov	r2, r3
   8487a:	4630      	mov	r0, r6
   8487c:	6025      	str	r5, [r4, #0]
   8487e:	f7fb fdd9 	bl	80434 <_read>
   84882:	1c43      	adds	r3, r0, #1
   84884:	d000      	beq.n	84888 <_read_r+0x1c>
   84886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84888:	6823      	ldr	r3, [r4, #0]
   8488a:	2b00      	cmp	r3, #0
   8488c:	d0fb      	beq.n	84886 <_read_r+0x1a>
   8488e:	603b      	str	r3, [r7, #0]
   84890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84892:	bf00      	nop
   84894:	20070c90 	.word	0x20070c90
   84898:	7466654c 	.word	0x7466654c
   8489c:	6d695420 	.word	0x6d695420
   848a0:	000a3a65 	.word	0x000a3a65
   848a4:	68676952 	.word	0x68676952
   848a8:	69542074 	.word	0x69542074
   848ac:	0a3a656d 	.word	0x0a3a656d
   848b0:	00000000 	.word	0x00000000
   848b4:	000a6925 	.word	0x000a6925
   848b8:	736e6f43 	.word	0x736e6f43
   848bc:	20656c6f 	.word	0x20656c6f
   848c0:	64616572 	.word	0x64616572
   848c4:	00000a79 	.word	0x00000a79
   848c8:	3d3d3d3d 	.word	0x3d3d3d3d
   848cc:	3d3d3d3d 	.word	0x3d3d3d3d
   848d0:	3d3d3d3d 	.word	0x3d3d3d3d
   848d4:	00000a3d 	.word	0x00000a3d

000848d8 <_global_impure_ptr>:
   848d8:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   848e8:	46454443 00000000 33323130 37363534     CDEF....01234567
   848f8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   84908:	0000296c                                l)..

0008490c <blanks.7217>:
   8490c:	20202020 20202020 20202020 20202020                     

0008491c <zeroes.7218>:
   8491c:	30303030 30303030 30303030 30303030     0000000000000000
   8492c:	00000043 49534f50 00000058 0000002e     C...POSIX.......

0008493c <_ctype_>:
   8493c:	20202000 20202020 28282020 20282828     .         ((((( 
   8494c:	20202020 20202020 20202020 20202020                     
   8495c:	10108820 10101010 10101010 10101010      ...............
   8496c:	04040410 04040404 10040404 10101010     ................
   8497c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8498c:	01010101 01010101 01010101 10101010     ................
   8499c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   849ac:	02020202 02020202 02020202 10101010     ................
   849bc:	00000020 00000000 00000000 00000000      ...............
	...

00084a40 <_init>:
   84a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a42:	bf00      	nop
   84a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84a46:	bc08      	pop	{r3}
   84a48:	469e      	mov	lr, r3
   84a4a:	4770      	bx	lr

00084a4c <__init_array_start>:
   84a4c:	00082f7d 	.word	0x00082f7d

00084a50 <__frame_dummy_init_array_entry>:
   84a50:	00080119                                ....

00084a54 <_fini>:
   84a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84a56:	bf00      	nop
   84a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84a5a:	bc08      	pop	{r3}
   84a5c:	469e      	mov	lr, r3
   84a5e:	4770      	bx	lr

00084a60 <__fini_array_start>:
   84a60:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070c6c                                l.. 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00084605 00083f51 00000000 0008493c     .F..Q?......<I..
20070664:	00084938 000848b0 000848b0 000848b0     8I...H...H...H..
20070674:	000848b0 000848b0 000848b0 000848b0     .H...H...H...H..
20070684:	000848b0 000848b0 ffffffff ffffffff     .H...H..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....

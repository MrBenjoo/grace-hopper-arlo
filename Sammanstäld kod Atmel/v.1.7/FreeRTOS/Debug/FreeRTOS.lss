
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005dfc  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00085dfc  00085dfc  00015dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ae8  20070000  00085e04  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2bc  20070ae8  000868f0  00020ae8  2**3
                  ALLOC
  4 .stack        00002004  2007ada4  00090bac  00020ae8  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020ae8  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b11  2**0
                  CONTENTS, READONLY
  7 .debug_info   0001ea1e  00000000  00000000  00020b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000044ff  00000000  00000000  0003f588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000820e  00000000  00000000  00043a87  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000ee0  00000000  00000000  0004bc95  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000ed0  00000000  00000000  0004cb75  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009f31  00000000  00000000  0004da45  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000136f8  00000000  00000000  00057976  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0006ab7b  00000000  00000000  0006b06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00002fb4  00000000  00000000  000d5bec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	a8 cd 07 20 41 28 08 00 3d 28 08 00 3d 28 08 00     ... A(..=(..=(..
   80010:	3d 28 08 00 3d 28 08 00 3d 28 08 00 00 00 00 00     =(..=(..=(......
	...
   8002c:	29 0e 08 00 3d 28 08 00 00 00 00 00 a9 0e 08 00     )...=(..........
   8003c:	e5 0e 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     ....=(..=(..=(..
   8004c:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   8005c:	3d 28 08 00 3d 28 08 00 3d 28 08 00 00 00 00 00     =(..=(..=(......
   8006c:	b1 26 08 00 c5 26 08 00 d9 26 08 00 ed 26 08 00     .&...&...&...&..
	...
   80084:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   80094:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   800a4:	00 00 00 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     ....=(..=(..=(..
   800b4:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   800c4:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   800d4:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..
   800e4:	3d 28 08 00 3d 28 08 00 3d 28 08 00 3d 28 08 00     =(..=(..=(..=(..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070ae8 	.word	0x20070ae8
   80110:	00000000 	.word	0x00000000
   80114:	00085e04 	.word	0x00085e04

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00085e04 	.word	0x00085e04
   80154:	20070aec 	.word	0x20070aec
   80158:	00085e04 	.word	0x00085e04
   8015c:	00000000 	.word	0x00000000

00080160 <pwm_clocks_generate>:
 *
 * \retval Return the value to be set in the PWM Clock Register (PWM Mode Register for
 * SAM3N/SAM4N/SAM4C/SAM4CP/SAM4CM) or PWM_INVALID_ARGUMENT if the configuration cannot be met.
 */
static uint32_t pwm_clocks_generate(uint32_t ul_frequency, uint32_t ul_mck)
{
   80160:	b4f0      	push	{r4, r5, r6, r7}
   80162:	b08c      	sub	sp, #48	; 0x30
   80164:	4607      	mov	r7, r0
   80166:	460e      	mov	r6, r1
	uint32_t ul_divisors[PWM_CLOCK_PRE_MAX] =
   80168:	ac01      	add	r4, sp, #4
   8016a:	4d11      	ldr	r5, [pc, #68]	; (801b0 <pwm_clocks_generate+0x50>)
   8016c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   8016e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80170:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   80172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   80174:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   80178:	e884 0007 	stmia.w	r4, {r0, r1, r2}
   8017c:	aa01      	add	r2, sp, #4
			{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024 };
	uint32_t ul_pre = 0;
   8017e:	2300      	movs	r3, #0
	uint32_t ul_div;

	/* Find prescaler and divisor values */
	do {
		ul_div = (ul_mck / ul_divisors[ul_pre]) / ul_frequency;
   80180:	f852 0b04 	ldr.w	r0, [r2], #4
   80184:	fbb6 f0f0 	udiv	r0, r6, r0
   80188:	fbb0 f0f7 	udiv	r0, r0, r7
		if (ul_div <= PWM_CLOCK_DIV_MAX) {
   8018c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   80190:	d907      	bls.n	801a2 <pwm_clocks_generate+0x42>
			break;
		}
		ul_pre++;
   80192:	3301      	adds	r3, #1
	} while (ul_pre < PWM_CLOCK_PRE_MAX);
   80194:	2b0b      	cmp	r3, #11
   80196:	d1f3      	bne.n	80180 <pwm_clocks_generate+0x20>

	/* Return result */
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
		return ul_div | (ul_pre << 8);
	} else {
		return PWM_INVALID_ARGUMENT;
   80198:	f64f 70ff 	movw	r0, #65535	; 0xffff
	}
}
   8019c:	b00c      	add	sp, #48	; 0x30
   8019e:	bcf0      	pop	{r4, r5, r6, r7}
   801a0:	4770      	bx	lr
	if (ul_pre < PWM_CLOCK_PRE_MAX) {
   801a2:	2b0a      	cmp	r3, #10
		return ul_div | (ul_pre << 8);
   801a4:	bf94      	ite	ls
   801a6:	ea40 2003 	orrls.w	r0, r0, r3, lsl #8
		return PWM_INVALID_ARGUMENT;
   801aa:	f64f 70ff 	movwhi	r0, #65535	; 0xffff
   801ae:	e7f5      	b.n	8019c <pwm_clocks_generate+0x3c>
   801b0:	0008594c 	.word	0x0008594c

000801b4 <pwm_init>:
 * \param clock_config PWM clock configuration.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_init(Pwm *p_pwm, pwm_clock_t *clock_config)
{
   801b4:	b570      	push	{r4, r5, r6, lr}
   801b6:	4606      	mov	r6, r0
   801b8:	460d      	mov	r5, r1
	uint32_t clock = 0;
	uint32_t result;

	/* Clock A */
	if (clock_config->ul_clka != 0) {
   801ba:	680c      	ldr	r4, [r1, #0]
   801bc:	b144      	cbz	r4, 801d0 <pwm_init+0x1c>
		result = pwm_clocks_generate(clock_config->ul_clka, clock_config->ul_mck);
   801be:	6889      	ldr	r1, [r1, #8]
   801c0:	4620      	mov	r0, r4
   801c2:	4b0c      	ldr	r3, [pc, #48]	; (801f4 <pwm_init+0x40>)
   801c4:	4798      	blx	r3
   801c6:	4604      	mov	r4, r0
		if (result == PWM_INVALID_ARGUMENT) {
   801c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801cc:	4298      	cmp	r0, r3
   801ce:	d00c      	beq.n	801ea <pwm_init+0x36>

		clock = result;
	}

	/* Clock B */
	if (clock_config->ul_clkb != 0) {
   801d0:	6868      	ldr	r0, [r5, #4]
   801d2:	b140      	cbz	r0, 801e6 <pwm_init+0x32>
		result = pwm_clocks_generate(clock_config->ul_clkb, clock_config->ul_mck);
   801d4:	68a9      	ldr	r1, [r5, #8]
   801d6:	4b07      	ldr	r3, [pc, #28]	; (801f4 <pwm_init+0x40>)
   801d8:	4798      	blx	r3

		if (result == PWM_INVALID_ARGUMENT) {
   801da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   801de:	4298      	cmp	r0, r3
   801e0:	d005      	beq.n	801ee <pwm_init+0x3a>
			return result;
		}

		clock |= (result << 16);
   801e2:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	}
#if (SAM3N || SAM4N || SAM4C || SAM4CP || SAM4CM)
	p_pwm->PWM_MR = clock;
#else
	p_pwm->PWM_CLK = clock;
   801e6:	6034      	str	r4, [r6, #0]
#endif
	return 0;
   801e8:	2400      	movs	r4, #0
}
   801ea:	4620      	mov	r0, r4
   801ec:	bd70      	pop	{r4, r5, r6, pc}
			return result;
   801ee:	4604      	mov	r4, r0
   801f0:	e7fb      	b.n	801ea <pwm_init+0x36>
   801f2:	bf00      	nop
   801f4:	00080161 	.word	0x00080161

000801f8 <pwm_channel_init>:
 * \param p_channel Configurations of the specified PWM channel.
 *
 * \retval 0 if initialization succeeds, otherwise fails.
 */
uint32_t pwm_channel_init(Pwm *p_pwm, pwm_channel_t *p_channel)
{
   801f8:	b470      	push	{r4, r5, r6}
	uint32_t tmp_reg = 0;
	uint32_t ch_num = p_channel->channel;
   801fa:	680a      	ldr	r2, [r1, #0]

	/* Channel Mode/Clock Register */
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   801fc:	684b      	ldr	r3, [r1, #4]
   801fe:	f003 030f 	and.w	r3, r3, #15
			(p_channel->polarity << 9) |
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
			(p_channel->counter_event) |
   80202:	8a8c      	ldrh	r4, [r1, #20]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80204:	4323      	orrs	r3, r4
			(p_channel->b_deadtime_generator << 16) |
			(p_channel->b_pwmh_output_inverted << 17) |
			(p_channel->b_pwml_output_inverted << 18) |
#endif
			(p_channel->alignment);
   80206:	890c      	ldrh	r4, [r1, #8]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80208:	4323      	orrs	r3, r4
			(p_channel->polarity << 9) |
   8020a:	7a8c      	ldrb	r4, [r1, #10]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8020c:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
			(p_channel->b_deadtime_generator << 16) |
   80210:	7d8c      	ldrb	r4, [r1, #22]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80212:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
			(p_channel->b_pwmh_output_inverted << 17) |
   80216:	7dcc      	ldrb	r4, [r1, #23]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   80218:	ea43 4344 	orr.w	r3, r3, r4, lsl #17
			(p_channel->b_pwml_output_inverted << 18) |
   8021c:	7e0c      	ldrb	r4, [r1, #24]
	tmp_reg = (p_channel->ul_prescaler & 0xF) |
   8021e:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
   80222:	eb00 1442 	add.w	r4, r0, r2, lsl #5
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR = tmp_reg;
   80226:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200

	/* Channel Duty Cycle Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CDTY = p_channel->ul_duty;
   8022a:	68cb      	ldr	r3, [r1, #12]
   8022c:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204

	/* Channel Period Register */
	p_pwm->PWM_CH_NUM[ch_num].PWM_CPRD = p_channel->ul_period;
   80230:	690b      	ldr	r3, [r1, #16]
   80232:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
	
#if (SAM3U || SAM3S || SAM3XA || SAM4S || SAM4E || SAMV70 || SAMV71 || SAME70 || SAMS70)
	/* Channel Dead Time Register */
	if (p_channel->b_deadtime_generator) {
   80236:	7d8b      	ldrb	r3, [r1, #22]
   80238:	b13b      	cbz	r3, 8024a <pwm_channel_init+0x52>
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
				PWM_DT_DTL(p_channel->
   8023a:	8b8c      	ldrh	r4, [r1, #28]
				us_deadtime_pwml) | PWM_DT_DTH(p_channel->
   8023c:	8b4b      	ldrh	r3, [r1, #26]
   8023e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
		p_pwm->PWM_CH_NUM[ch_num].PWM_DT =
   80242:	eb00 1442 	add.w	r4, r0, r2, lsl #5
   80246:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
				us_deadtime_pwmh);
	}

	/* Output Selection Register */
	tmp_reg  = p_pwm->PWM_OS & (~((PWM_OS_OSH0 | PWM_OS_OSL0) << ch_num));
   8024a:	6c85      	ldr	r5, [r0, #72]	; 0x48
   8024c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   80250:	4093      	lsls	r3, r2
   80252:	43db      	mvns	r3, r3
   80254:	401d      	ands	r5, r3
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
			(((p_channel->output_selection.b_override_pwml) << ch_num)
   80256:	7fcc      	ldrb	r4, [r1, #31]
   80258:	fa04 f602 	lsl.w	r6, r4, r2
	tmp_reg |= ((p_channel->output_selection.b_override_pwmh) << ch_num) |
   8025c:	7f8c      	ldrb	r4, [r1, #30]
   8025e:	4094      	lsls	r4, r2
   80260:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   80264:	432c      	orrs	r4, r5
					<< 16);
	p_pwm->PWM_OS = tmp_reg;
   80266:	6484      	str	r4, [r0, #72]	; 0x48

	/* Output Override Value Register */
	tmp_reg  = p_pwm->PWM_OOV & (~((PWM_OOV_OOVH0 | PWM_OOV_OOVL0) << ch_num));
   80268:	6c44      	ldr	r4, [r0, #68]	; 0x44
   8026a:	4023      	ands	r3, r4
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
			(((p_channel->output_selection.override_level_pwml) << ch_num)
   8026c:	f891 4021 	ldrb.w	r4, [r1, #33]	; 0x21
   80270:	fa04 f502 	lsl.w	r5, r4, r2
	tmp_reg |= ((p_channel->output_selection.override_level_pwmh) << ch_num) |
   80274:	f891 4020 	ldrb.w	r4, [r1, #32]
   80278:	4094      	lsls	r4, r2
   8027a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8027e:	4323      	orrs	r3, r4
					<< 16);
	p_pwm->PWM_OOV = tmp_reg;
   80280:	6443      	str	r3, [r0, #68]	; 0x44

	/* Sync Channels Mode Register */
	uint32_t channel = (1 << ch_num);
   80282:	2301      	movs	r3, #1
   80284:	4093      	lsls	r3, r2
	if (p_channel->b_sync_ch) {
   80286:	f891 4022 	ldrb.w	r4, [r1, #34]	; 0x22
   8028a:	b334      	cbz	r4, 802da <pwm_channel_init+0xe2>
		p_pwm->PWM_SCM |= channel;
   8028c:	6a04      	ldr	r4, [r0, #32]
   8028e:	431c      	orrs	r4, r3
   80290:	6204      	str	r4, [r0, #32]
		} else {
			p_pwm->PWM_FPV1 &= (~((0x01 << ch_num) << 16));
		}
	}
#else
	if (p_channel->ul_fault_output_pwmh == PWM_HIGH) {
   80292:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
   80296:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= (0x01 << ch_num);
   80298:	6e84      	ldr	r4, [r0, #104]	; 0x68
   8029a:	bf0c      	ite	eq
   8029c:	431c      	orreq	r4, r3
	} else {
		p_pwm->PWM_FPV &= (~(0x01 << ch_num));
   8029e:	439c      	bicne	r4, r3
   802a0:	6684      	str	r4, [r0, #104]	; 0x68
	}
	if (p_channel->ul_fault_output_pwml == PWM_HIGH) {
   802a2:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
   802a6:	2c01      	cmp	r4, #1
		p_pwm->PWM_FPV |= ((0x01 << ch_num) << 16);
   802a8:	6e84      	ldr	r4, [r0, #104]	; 0x68
   802aa:	bf0c      	ite	eq
   802ac:	ea44 4303 	orreq.w	r3, r4, r3, lsl #16
	} else {
		p_pwm->PWM_FPV &= (~((0x01 << ch_num) << 16));
   802b0:	ea24 4303 	bicne.w	r3, r4, r3, lsl #16
   802b4:	6683      	str	r3, [r0, #104]	; 0x68
	}
#endif
	/* Fault Protection Enable Register */
	uint32_t fault_enable_reg = 0;
#if (SAM3XA)
	if (ch_num < 4) {
   802b6:	2a03      	cmp	r2, #3
   802b8:	d914      	bls.n	802e4 <pwm_channel_init+0xec>
		fault_enable_reg = p_pwm->PWM_FPE1;
		fault_enable_reg &= ~(0xFF << ch_num);
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
		p_pwm->PWM_FPE1 = fault_enable_reg;
	} else {
		ch_num -= 4;
   802ba:	3a04      	subs	r2, #4
		ch_num *= 8;
   802bc:	00d2      	lsls	r2, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE2;
   802be:	6f04      	ldr	r4, [r0, #112]	; 0x70
		fault_enable_reg &= ~(0xFF << ch_num);
   802c0:	23ff      	movs	r3, #255	; 0xff
   802c2:	4093      	lsls	r3, r2
   802c4:	ea24 0403 	bic.w	r4, r4, r3
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   802c8:	f891 3023 	ldrb.w	r3, [r1, #35]	; 0x23
   802cc:	fa03 f202 	lsl.w	r2, r3, r2
   802d0:	4322      	orrs	r2, r4
		p_pwm->PWM_FPE2 = fault_enable_reg;
   802d2:	6702      	str	r2, [r0, #112]	; 0x70
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR &= (~PWM_CMR_PPM);
	p_pwm->PWM_CH_NUM[ch_num].PWM_CMR |= (p_channel->ul_ppm_mode & PWM_CMR_PPM);
#endif

	return 0;
}
   802d4:	2000      	movs	r0, #0
   802d6:	bc70      	pop	{r4, r5, r6}
   802d8:	4770      	bx	lr
		p_pwm->PWM_SCM &= ~((uint32_t) channel);
   802da:	6a04      	ldr	r4, [r0, #32]
   802dc:	ea24 0403 	bic.w	r4, r4, r3
   802e0:	6204      	str	r4, [r0, #32]
   802e2:	e7d6      	b.n	80292 <pwm_channel_init+0x9a>
		ch_num *= 8;
   802e4:	00d5      	lsls	r5, r2, #3
		fault_enable_reg = p_pwm->PWM_FPE1;
   802e6:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
		fault_enable_reg &= ~(0xFF << ch_num);
   802e8:	24ff      	movs	r4, #255	; 0xff
   802ea:	40ac      	lsls	r4, r5
   802ec:	ea23 0304 	bic.w	r3, r3, r4
		fault_enable_reg |= ((p_channel->fault_id) << ch_num);
   802f0:	f891 2023 	ldrb.w	r2, [r1, #35]	; 0x23
   802f4:	40aa      	lsls	r2, r5
   802f6:	431a      	orrs	r2, r3
		p_pwm->PWM_FPE1 = fault_enable_reg;
   802f8:	66c2      	str	r2, [r0, #108]	; 0x6c
   802fa:	e7eb      	b.n	802d4 <pwm_channel_init+0xdc>

000802fc <pwm_channel_enable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to enable.
 */
void pwm_channel_enable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_ENA = (1 << ul_channel);
   802fc:	2301      	movs	r3, #1
   802fe:	fa03 f101 	lsl.w	r1, r3, r1
   80302:	6041      	str	r1, [r0, #4]
   80304:	4770      	bx	lr

00080306 <pwm_channel_disable>:
 * \param p_pwm Pointer to a PWM instance.
 * \param ul_channel PWM channel number to disable.
 */
void pwm_channel_disable(Pwm *p_pwm, uint32_t ul_channel)
{
	p_pwm->PWM_DIS = (1 << ul_channel);
   80306:	2301      	movs	r3, #1
   80308:	fa03 f101 	lsl.w	r1, r3, r1
   8030c:	6081      	str	r1, [r0, #8]
   8030e:	4770      	bx	lr

00080310 <rightEncoderAISR>:
	printf("%i\n",lTickTime);
	
} 
*/
//////////////////////////////ENCODER ISR//////////////////////////////////////////
void rightEncoderAISR(){ //ISR for the right encoder A
   80310:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder	
	if(getSetRDirection()>0){
   80312:	4b14      	ldr	r3, [pc, #80]	; (80364 <rightEncoderAISR+0x54>)
   80314:	4798      	blx	r3
   80316:	2800      	cmp	r0, #0
   80318:	dd12      	ble.n	80340 <rightEncoderAISR+0x30>
		rAPulses++; 
   8031a:	4a13      	ldr	r2, [pc, #76]	; (80368 <rightEncoderAISR+0x58>)
   8031c:	6813      	ldr	r3, [r2, #0]
   8031e:	3301      	adds	r3, #1
   80320:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}

	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference 
	rAPrevTick = rACurrentTick;
   80322:	4c12      	ldr	r4, [pc, #72]	; (8036c <rightEncoderAISR+0x5c>)
   80324:	4d12      	ldr	r5, [pc, #72]	; (80370 <rightEncoderAISR+0x60>)
   80326:	682b      	ldr	r3, [r5, #0]
   80328:	6023      	str	r3, [r4, #0]
	rACurrentTick = xTaskGetTickCountFromISR();
   8032a:	4b12      	ldr	r3, [pc, #72]	; (80374 <rightEncoderAISR+0x64>)
   8032c:	4798      	blx	r3
   8032e:	6028      	str	r0, [r5, #0]
	rAPulseTime = rACurrentTick-rAPrevTick*msPerTick;
   80330:	6823      	ldr	r3, [r4, #0]
   80332:	4a11      	ldr	r2, [pc, #68]	; (80378 <rightEncoderAISR+0x68>)
   80334:	6812      	ldr	r2, [r2, #0]
   80336:	fb02 0013 	mls	r0, r2, r3, r0
   8033a:	4b10      	ldr	r3, [pc, #64]	; (8037c <rightEncoderAISR+0x6c>)
   8033c:	6018      	str	r0, [r3, #0]
   8033e:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   80340:	4b08      	ldr	r3, [pc, #32]	; (80364 <rightEncoderAISR+0x54>)
   80342:	4798      	blx	r3
   80344:	2800      	cmp	r0, #0
   80346:	db07      	blt.n	80358 <rightEncoderAISR+0x48>
	}else if(getSetRDirection()==0){
   80348:	4b06      	ldr	r3, [pc, #24]	; (80364 <rightEncoderAISR+0x54>)
   8034a:	4798      	blx	r3
   8034c:	2800      	cmp	r0, #0
   8034e:	d1e8      	bne.n	80322 <rightEncoderAISR+0x12>
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80350:	480b      	ldr	r0, [pc, #44]	; (80380 <rightEncoderAISR+0x70>)
   80352:	4b0c      	ldr	r3, [pc, #48]	; (80384 <rightEncoderAISR+0x74>)
   80354:	4798      	blx	r3
   80356:	e7e4      	b.n	80322 <rightEncoderAISR+0x12>
		rAPulses--;
   80358:	4a03      	ldr	r2, [pc, #12]	; (80368 <rightEncoderAISR+0x58>)
   8035a:	6813      	ldr	r3, [r2, #0]
   8035c:	3b01      	subs	r3, #1
   8035e:	6013      	str	r3, [r2, #0]
   80360:	e7df      	b.n	80322 <rightEncoderAISR+0x12>
   80362:	bf00      	nop
   80364:	00080871 	.word	0x00080871
   80368:	2007ad04 	.word	0x2007ad04
   8036c:	2007ad30 	.word	0x2007ad30
   80370:	2007ad20 	.word	0x2007ad20
   80374:	00081919 	.word	0x00081919
   80378:	2007ad28 	.word	0x2007ad28
   8037c:	2007ad1c 	.word	0x2007ad1c
   80380:	00085a90 	.word	0x00085a90
   80384:	00082ab9 	.word	0x00082ab9

00080388 <rightEncoderBISR>:
	//printf("RightPulseTime A: %i ms\n",rAPulseTime);
	
}

void rightEncoderBISR(){ //ISR for the right encoder B
   80388:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder
	if(getSetRDirection()>0){
   8038a:	4b14      	ldr	r3, [pc, #80]	; (803dc <rightEncoderBISR+0x54>)
   8038c:	4798      	blx	r3
   8038e:	2800      	cmp	r0, #0
   80390:	dd12      	ble.n	803b8 <rightEncoderBISR+0x30>
		rBPulses++;
   80392:	4a13      	ldr	r2, [pc, #76]	; (803e0 <rightEncoderBISR+0x58>)
   80394:	6813      	ldr	r3, [r2, #0]
   80396:	3301      	adds	r3, #1
   80398:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	rBPrevTick = rBCurrentTick;
   8039a:	4c12      	ldr	r4, [pc, #72]	; (803e4 <rightEncoderBISR+0x5c>)
   8039c:	4d12      	ldr	r5, [pc, #72]	; (803e8 <rightEncoderBISR+0x60>)
   8039e:	682b      	ldr	r3, [r5, #0]
   803a0:	6023      	str	r3, [r4, #0]
	rBCurrentTick = xTaskGetTickCountFromISR();
   803a2:	4b12      	ldr	r3, [pc, #72]	; (803ec <rightEncoderBISR+0x64>)
   803a4:	4798      	blx	r3
   803a6:	6028      	str	r0, [r5, #0]
	rBPulseTime = rBCurrentTick-rBPrevTick*msPerTick;
   803a8:	6823      	ldr	r3, [r4, #0]
   803aa:	4a11      	ldr	r2, [pc, #68]	; (803f0 <rightEncoderBISR+0x68>)
   803ac:	6812      	ldr	r2, [r2, #0]
   803ae:	fb02 0013 	mls	r0, r2, r3, r0
   803b2:	4b10      	ldr	r3, [pc, #64]	; (803f4 <rightEncoderBISR+0x6c>)
   803b4:	6018      	str	r0, [r3, #0]
   803b6:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   803b8:	4b08      	ldr	r3, [pc, #32]	; (803dc <rightEncoderBISR+0x54>)
   803ba:	4798      	blx	r3
   803bc:	2800      	cmp	r0, #0
   803be:	db07      	blt.n	803d0 <rightEncoderBISR+0x48>
		}else if(getSetRDirection()==0){
   803c0:	4b06      	ldr	r3, [pc, #24]	; (803dc <rightEncoderBISR+0x54>)
   803c2:	4798      	blx	r3
   803c4:	2800      	cmp	r0, #0
   803c6:	d1e8      	bne.n	8039a <rightEncoderBISR+0x12>
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   803c8:	480b      	ldr	r0, [pc, #44]	; (803f8 <rightEncoderBISR+0x70>)
   803ca:	4b0c      	ldr	r3, [pc, #48]	; (803fc <rightEncoderBISR+0x74>)
   803cc:	4798      	blx	r3
   803ce:	e7e4      	b.n	8039a <rightEncoderBISR+0x12>
		rBPulses--;
   803d0:	4a03      	ldr	r2, [pc, #12]	; (803e0 <rightEncoderBISR+0x58>)
   803d2:	6813      	ldr	r3, [r2, #0]
   803d4:	3b01      	subs	r3, #1
   803d6:	6013      	str	r3, [r2, #0]
   803d8:	e7df      	b.n	8039a <rightEncoderBISR+0x12>
   803da:	bf00      	nop
   803dc:	00080871 	.word	0x00080871
   803e0:	2007ad10 	.word	0x2007ad10
   803e4:	2007ad18 	.word	0x2007ad18
   803e8:	2007ad38 	.word	0x2007ad38
   803ec:	00081919 	.word	0x00081919
   803f0:	2007ad28 	.word	0x2007ad28
   803f4:	2007ad0c 	.word	0x2007ad0c
   803f8:	00085a90 	.word	0x00085a90
   803fc:	00082ab9 	.word	0x00082ab9

00080400 <leftEncoderAISR>:
	//printf("RightPulseTime B: %i ms\n",rBPulseTime);
	
}

void leftEncoderAISR(){ //ISR for the left encoder A
   80400:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   80402:	4b14      	ldr	r3, [pc, #80]	; (80454 <leftEncoderAISR+0x54>)
   80404:	4798      	blx	r3
   80406:	2800      	cmp	r0, #0
   80408:	dd13      	ble.n	80432 <leftEncoderAISR+0x32>
		lAPulses++;
   8040a:	4a13      	ldr	r2, [pc, #76]	; (80458 <leftEncoderAISR+0x58>)
   8040c:	6813      	ldr	r3, [r2, #0]
   8040e:	3301      	adds	r3, #1
   80410:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lAPrevTick = lACurrentTick;
   80412:	4c12      	ldr	r4, [pc, #72]	; (8045c <leftEncoderAISR+0x5c>)
   80414:	4d12      	ldr	r5, [pc, #72]	; (80460 <leftEncoderAISR+0x60>)
   80416:	682b      	ldr	r3, [r5, #0]
   80418:	6023      	str	r3, [r4, #0]
	lACurrentTick = xTaskGetTickCountFromISR();
   8041a:	4b12      	ldr	r3, [pc, #72]	; (80464 <leftEncoderAISR+0x64>)
   8041c:	4798      	blx	r3
   8041e:	6028      	str	r0, [r5, #0]
	lAPulseTime = (lACurrentTick-lAPrevTick)*msPerTick;
   80420:	6823      	ldr	r3, [r4, #0]
   80422:	1ac0      	subs	r0, r0, r3
   80424:	4b10      	ldr	r3, [pc, #64]	; (80468 <leftEncoderAISR+0x68>)
   80426:	681b      	ldr	r3, [r3, #0]
   80428:	fb03 f000 	mul.w	r0, r3, r0
   8042c:	4b0f      	ldr	r3, [pc, #60]	; (8046c <leftEncoderAISR+0x6c>)
   8042e:	6018      	str	r0, [r3, #0]
   80430:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   80432:	4b08      	ldr	r3, [pc, #32]	; (80454 <leftEncoderAISR+0x54>)
   80434:	4798      	blx	r3
   80436:	2800      	cmp	r0, #0
   80438:	db07      	blt.n	8044a <leftEncoderAISR+0x4a>
		}else if(getSetLDirection()==0){
   8043a:	4b06      	ldr	r3, [pc, #24]	; (80454 <leftEncoderAISR+0x54>)
   8043c:	4798      	blx	r3
   8043e:	2800      	cmp	r0, #0
   80440:	d1e7      	bne.n	80412 <leftEncoderAISR+0x12>
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80442:	480b      	ldr	r0, [pc, #44]	; (80470 <leftEncoderAISR+0x70>)
   80444:	4b0b      	ldr	r3, [pc, #44]	; (80474 <leftEncoderAISR+0x74>)
   80446:	4798      	blx	r3
   80448:	e7e3      	b.n	80412 <leftEncoderAISR+0x12>
		lAPulses--;
   8044a:	4a03      	ldr	r2, [pc, #12]	; (80458 <leftEncoderAISR+0x58>)
   8044c:	6813      	ldr	r3, [r2, #0]
   8044e:	3b01      	subs	r3, #1
   80450:	6013      	str	r3, [r2, #0]
   80452:	e7de      	b.n	80412 <leftEncoderAISR+0x12>
   80454:	00080855 	.word	0x00080855
   80458:	2007ad24 	.word	0x2007ad24
   8045c:	2007ad14 	.word	0x2007ad14
   80460:	2007ad40 	.word	0x2007ad40
   80464:	00081919 	.word	0x00081919
   80468:	2007ad28 	.word	0x2007ad28
   8046c:	2007ad44 	.word	0x2007ad44
   80470:	000859a8 	.word	0x000859a8
   80474:	00082ab9 	.word	0x00082ab9

00080478 <leftEncoderBISR>:
	//printf("LeftPulseTime A: %i ms\n",lAPulseTime);
	
}

void leftEncoderBISR(){ //ISR for the left encoder B
   80478:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   8047a:	4b14      	ldr	r3, [pc, #80]	; (804cc <leftEncoderBISR+0x54>)
   8047c:	4798      	blx	r3
   8047e:	2800      	cmp	r0, #0
   80480:	dd13      	ble.n	804aa <leftEncoderBISR+0x32>
		lBPulses++;
   80482:	4a13      	ldr	r2, [pc, #76]	; (804d0 <leftEncoderBISR+0x58>)
   80484:	6813      	ldr	r3, [r2, #0]
   80486:	3301      	adds	r3, #1
   80488:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lBPrevTick = lBCurrentTick;
   8048a:	4c12      	ldr	r4, [pc, #72]	; (804d4 <leftEncoderBISR+0x5c>)
   8048c:	4d12      	ldr	r5, [pc, #72]	; (804d8 <leftEncoderBISR+0x60>)
   8048e:	682b      	ldr	r3, [r5, #0]
   80490:	6023      	str	r3, [r4, #0]
	lBCurrentTick = xTaskGetTickCountFromISR();
   80492:	4b12      	ldr	r3, [pc, #72]	; (804dc <leftEncoderBISR+0x64>)
   80494:	4798      	blx	r3
   80496:	6028      	str	r0, [r5, #0]
	lBPulseTime = (lBCurrentTick-lBPrevTick)*msPerTick;
   80498:	6823      	ldr	r3, [r4, #0]
   8049a:	1ac0      	subs	r0, r0, r3
   8049c:	4b10      	ldr	r3, [pc, #64]	; (804e0 <leftEncoderBISR+0x68>)
   8049e:	681b      	ldr	r3, [r3, #0]
   804a0:	fb03 f000 	mul.w	r0, r3, r0
   804a4:	4b0f      	ldr	r3, [pc, #60]	; (804e4 <leftEncoderBISR+0x6c>)
   804a6:	6018      	str	r0, [r3, #0]
   804a8:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   804aa:	4b08      	ldr	r3, [pc, #32]	; (804cc <leftEncoderBISR+0x54>)
   804ac:	4798      	blx	r3
   804ae:	2800      	cmp	r0, #0
   804b0:	db07      	blt.n	804c2 <leftEncoderBISR+0x4a>
	}else if(getSetLDirection()==0){
   804b2:	4b06      	ldr	r3, [pc, #24]	; (804cc <leftEncoderBISR+0x54>)
   804b4:	4798      	blx	r3
   804b6:	2800      	cmp	r0, #0
   804b8:	d1e7      	bne.n	8048a <leftEncoderBISR+0x12>
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   804ba:	480b      	ldr	r0, [pc, #44]	; (804e8 <leftEncoderBISR+0x70>)
   804bc:	4b0b      	ldr	r3, [pc, #44]	; (804ec <leftEncoderBISR+0x74>)
   804be:	4798      	blx	r3
   804c0:	e7e3      	b.n	8048a <leftEncoderBISR+0x12>
		lBPulses--;
   804c2:	4a03      	ldr	r2, [pc, #12]	; (804d0 <leftEncoderBISR+0x58>)
   804c4:	6813      	ldr	r3, [r2, #0]
   804c6:	3b01      	subs	r3, #1
   804c8:	6013      	str	r3, [r2, #0]
   804ca:	e7de      	b.n	8048a <leftEncoderBISR+0x12>
   804cc:	00080855 	.word	0x00080855
   804d0:	2007ad34 	.word	0x2007ad34
   804d4:	2007ad08 	.word	0x2007ad08
   804d8:	2007ad2c 	.word	0x2007ad2c
   804dc:	00081919 	.word	0x00081919
   804e0:	2007ad28 	.word	0x2007ad28
   804e4:	2007ad3c 	.word	0x2007ad3c
   804e8:	000859a8 	.word	0x000859a8
   804ec:	00082ab9 	.word	0x00082ab9

000804f0 <encoder_init>:
void encoder_init(){ //initialise the encoders
   804f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804f4:	b082      	sub	sp, #8
	lAPrevTick=0; 
   804f6:	2400      	movs	r4, #0
   804f8:	4b39      	ldr	r3, [pc, #228]	; (805e0 <encoder_init+0xf0>)
   804fa:	601c      	str	r4, [r3, #0]
	rAPrevTick=0;
   804fc:	4b39      	ldr	r3, [pc, #228]	; (805e4 <encoder_init+0xf4>)
   804fe:	601c      	str	r4, [r3, #0]
	lACurrentTick=0;
   80500:	4b39      	ldr	r3, [pc, #228]	; (805e8 <encoder_init+0xf8>)
   80502:	601c      	str	r4, [r3, #0]
	rACurrentTick=0;
   80504:	4b39      	ldr	r3, [pc, #228]	; (805ec <encoder_init+0xfc>)
   80506:	601c      	str	r4, [r3, #0]
	lBPrevTick=0;
   80508:	4b39      	ldr	r3, [pc, #228]	; (805f0 <encoder_init+0x100>)
   8050a:	601c      	str	r4, [r3, #0]
	rBPrevTick=0;
   8050c:	4b39      	ldr	r3, [pc, #228]	; (805f4 <encoder_init+0x104>)
   8050e:	601c      	str	r4, [r3, #0]
	lBCurrentTick=0;
   80510:	4b39      	ldr	r3, [pc, #228]	; (805f8 <encoder_init+0x108>)
   80512:	601c      	str	r4, [r3, #0]
	rBCurrentTick=0;
   80514:	4b39      	ldr	r3, [pc, #228]	; (805fc <encoder_init+0x10c>)
   80516:	601c      	str	r4, [r3, #0]
	lAPulses=0;
   80518:	4b39      	ldr	r3, [pc, #228]	; (80600 <encoder_init+0x110>)
   8051a:	601c      	str	r4, [r3, #0]
	lAPulseTime=0;
   8051c:	4b39      	ldr	r3, [pc, #228]	; (80604 <encoder_init+0x114>)
   8051e:	601c      	str	r4, [r3, #0]
	rAPulses=0;
   80520:	4b39      	ldr	r3, [pc, #228]	; (80608 <encoder_init+0x118>)
   80522:	601c      	str	r4, [r3, #0]
	rAPulseTime=0;
   80524:	4b39      	ldr	r3, [pc, #228]	; (8060c <encoder_init+0x11c>)
   80526:	601c      	str	r4, [r3, #0]
	lBPulses=0;
   80528:	4b39      	ldr	r3, [pc, #228]	; (80610 <encoder_init+0x120>)
   8052a:	601c      	str	r4, [r3, #0]
	lBPulseTime=0;
   8052c:	4b39      	ldr	r3, [pc, #228]	; (80614 <encoder_init+0x124>)
   8052e:	601c      	str	r4, [r3, #0]
	rBPulses=0;
   80530:	4b39      	ldr	r3, [pc, #228]	; (80618 <encoder_init+0x128>)
   80532:	601c      	str	r4, [r3, #0]
	rBPulseTime=0;
   80534:	4b39      	ldr	r3, [pc, #228]	; (8061c <encoder_init+0x12c>)
   80536:	601c      	str	r4, [r3, #0]
	msPerTick=1; // Time for a tick is 1 ms on SAM3X8E CPU
   80538:	2201      	movs	r2, #1
   8053a:	4b39      	ldr	r3, [pc, #228]	; (80620 <encoder_init+0x130>)
   8053c:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_PIOC);
   8053e:	200d      	movs	r0, #13
   80540:	4b38      	ldr	r3, [pc, #224]	; (80624 <encoder_init+0x134>)
   80542:	4798      	blx	r3
pio_set_input(PIOC,pin7i,NULL);
   80544:	4d38      	ldr	r5, [pc, #224]	; (80628 <encoder_init+0x138>)
   80546:	4622      	mov	r2, r4
   80548:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   8054c:	4628      	mov	r0, r5
   8054e:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80648 <encoder_init+0x158>
   80552:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin7i,PIO_IT_RISE_EDGE,rightEncoderAISR);
   80554:	4b35      	ldr	r3, [pc, #212]	; (8062c <encoder_init+0x13c>)
   80556:	9300      	str	r3, [sp, #0]
   80558:	2370      	movs	r3, #112	; 0x70
   8055a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8055e:	210d      	movs	r1, #13
   80560:	4628      	mov	r0, r5
   80562:	4f33      	ldr	r7, [pc, #204]	; (80630 <encoder_init+0x140>)
   80564:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin7i); //digital pin 7
   80566:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   8056a:	4628      	mov	r0, r5
   8056c:	4e31      	ldr	r6, [pc, #196]	; (80634 <encoder_init+0x144>)
   8056e:	47b0      	blx	r6
pio_set_input(PIOC,pin5i,NULL);
   80570:	4622      	mov	r2, r4
   80572:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   80576:	4628      	mov	r0, r5
   80578:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin5i, PIO_IT_RISE_EDGE , leftEncoderAISR);
   8057a:	4b2f      	ldr	r3, [pc, #188]	; (80638 <encoder_init+0x148>)
   8057c:	9300      	str	r3, [sp, #0]
   8057e:	2370      	movs	r3, #112	; 0x70
   80580:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80584:	210d      	movs	r1, #13
   80586:	4628      	mov	r0, r5
   80588:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin5i); //digital pin 5 
   8058a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   8058e:	4628      	mov	r0, r5
   80590:	47b0      	blx	r6
pio_set_input(PIOC,pin33,NULL);
   80592:	4622      	mov	r2, r4
   80594:	2102      	movs	r1, #2
   80596:	4628      	mov	r0, r5
   80598:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin33, PIO_IT_RISE_EDGE , rightEncoderBISR);
   8059a:	4b28      	ldr	r3, [pc, #160]	; (8063c <encoder_init+0x14c>)
   8059c:	9300      	str	r3, [sp, #0]
   8059e:	2370      	movs	r3, #112	; 0x70
   805a0:	2202      	movs	r2, #2
   805a2:	210d      	movs	r1, #13
   805a4:	4628      	mov	r0, r5
   805a6:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin33); //digital pin 33 
   805a8:	2102      	movs	r1, #2
   805aa:	4628      	mov	r0, r5
   805ac:	47b0      	blx	r6
pio_set_input(PIOC,pin10i,NULL);
   805ae:	4622      	mov	r2, r4
   805b0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   805b4:	4628      	mov	r0, r5
   805b6:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin10i,PIO_IT_RISE_EDGE,leftEncoderBISR);
   805b8:	4b21      	ldr	r3, [pc, #132]	; (80640 <encoder_init+0x150>)
   805ba:	9300      	str	r3, [sp, #0]
   805bc:	2370      	movs	r3, #112	; 0x70
   805be:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   805c2:	210d      	movs	r1, #13
   805c4:	4628      	mov	r0, r5
   805c6:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin10i); //digital pin 10 
   805c8:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   805cc:	4628      	mov	r0, r5
   805ce:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   805d0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   805d4:	4b1b      	ldr	r3, [pc, #108]	; (80644 <encoder_init+0x154>)
   805d6:	601a      	str	r2, [r3, #0]
}
   805d8:	b002      	add	sp, #8
   805da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   805de:	bf00      	nop
   805e0:	2007ad14 	.word	0x2007ad14
   805e4:	2007ad30 	.word	0x2007ad30
   805e8:	2007ad40 	.word	0x2007ad40
   805ec:	2007ad20 	.word	0x2007ad20
   805f0:	2007ad08 	.word	0x2007ad08
   805f4:	2007ad18 	.word	0x2007ad18
   805f8:	2007ad2c 	.word	0x2007ad2c
   805fc:	2007ad38 	.word	0x2007ad38
   80600:	2007ad24 	.word	0x2007ad24
   80604:	2007ad44 	.word	0x2007ad44
   80608:	2007ad04 	.word	0x2007ad04
   8060c:	2007ad1c 	.word	0x2007ad1c
   80610:	2007ad34 	.word	0x2007ad34
   80614:	2007ad3c 	.word	0x2007ad3c
   80618:	2007ad10 	.word	0x2007ad10
   8061c:	2007ad0c 	.word	0x2007ad0c
   80620:	2007ad28 	.word	0x2007ad28
   80624:	000827e9 	.word	0x000827e9
   80628:	400e1200 	.word	0x400e1200
   8062c:	00080311 	.word	0x00080311
   80630:	00082641 	.word	0x00082641
   80634:	00082479 	.word	0x00082479
   80638:	00080401 	.word	0x00080401
   8063c:	00080389 	.word	0x00080389
   80640:	00080479 	.word	0x00080479
   80644:	e000e100 	.word	0xe000e100
   80648:	000823f3 	.word	0x000823f3

0008064c <resetCounter>:
	//printf("LeftPulseTime B: %i ms\n",lBPulseTime);
	
}

void resetCounter(){ //resets left and right encoders pulse counters
   8064c:	b510      	push	{r4, lr}
   8064e:	b082      	sub	sp, #8
	lAPulses=0;
   80650:	2100      	movs	r1, #0
   80652:	4b08      	ldr	r3, [pc, #32]	; (80674 <resetCounter+0x28>)
   80654:	6019      	str	r1, [r3, #0]
	rAPulses=0;
   80656:	4b08      	ldr	r3, [pc, #32]	; (80678 <resetCounter+0x2c>)
   80658:	6019      	str	r1, [r3, #0]
	rBPulses=0;
   8065a:	4b08      	ldr	r3, [pc, #32]	; (8067c <resetCounter+0x30>)
   8065c:	6019      	str	r1, [r3, #0]
	lBPulses=0;
   8065e:	4b08      	ldr	r3, [pc, #32]	; (80680 <resetCounter+0x34>)
   80660:	6019      	str	r1, [r3, #0]
	printf("Reseting pulse counters:\n LeftPulses A: #%i\n LeftPulses B: #%i\n RightPulses A: #%i\n RightPulses B: #%i\n",lAPulses,lBPulses,rAPulses,rBPulses);
   80662:	9100      	str	r1, [sp, #0]
   80664:	460b      	mov	r3, r1
   80666:	460a      	mov	r2, r1
   80668:	4806      	ldr	r0, [pc, #24]	; (80684 <resetCounter+0x38>)
   8066a:	4c07      	ldr	r4, [pc, #28]	; (80688 <resetCounter+0x3c>)
   8066c:	47a0      	blx	r4
}
   8066e:	b002      	add	sp, #8
   80670:	bd10      	pop	{r4, pc}
   80672:	bf00      	nop
   80674:	2007ad24 	.word	0x2007ad24
   80678:	2007ad04 	.word	0x2007ad04
   8067c:	2007ad10 	.word	0x2007ad10
   80680:	2007ad34 	.word	0x2007ad34
   80684:	00085a28 	.word	0x00085a28
   80688:	00082ab9 	.word	0x00082ab9

0008068c <getLeftPulses>:
/////////////////////PULSE COUNTER//////////////////////////////////////////
int getLeftPulses(){ //returns the sum of pulses from left encoder A and B since last reset
   8068c:	b538      	push	{r3, r4, r5, lr}
	//printf("LeftPulses A: #%i\n",lAPulses);
	return lAPulses;
}
int getLeftBPulses(){ //returns the amount of pulses from left encoder B since last reset
	//printf("LeftPulses B: #%i\n",lBPulses);
	return lBPulses;
   8068e:	4d06      	ldr	r5, [pc, #24]	; (806a8 <getLeftPulses+0x1c>)
	return lAPulses;
   80690:	4c06      	ldr	r4, [pc, #24]	; (806ac <getLeftPulses+0x20>)
	printf("LeftPulses : ##[%i]##\n",(getLeftAPulses()+getLeftBPulses()));
   80692:	6829      	ldr	r1, [r5, #0]
   80694:	6823      	ldr	r3, [r4, #0]
   80696:	4419      	add	r1, r3
   80698:	4805      	ldr	r0, [pc, #20]	; (806b0 <getLeftPulses+0x24>)
   8069a:	4b06      	ldr	r3, [pc, #24]	; (806b4 <getLeftPulses+0x28>)
   8069c:	4798      	blx	r3
	return (getLeftAPulses()+getLeftBPulses());
   8069e:	6828      	ldr	r0, [r5, #0]
   806a0:	6823      	ldr	r3, [r4, #0]
}
   806a2:	4418      	add	r0, r3
   806a4:	bd38      	pop	{r3, r4, r5, pc}
   806a6:	bf00      	nop
   806a8:	2007ad34 	.word	0x2007ad34
   806ac:	2007ad24 	.word	0x2007ad24
   806b0:	00085978 	.word	0x00085978
   806b4:	00082ab9 	.word	0x00082ab9

000806b8 <getRightPulses>:
}
int getRightPulses(){ //returns the sum of pulses from right encoder A and B since last reset
   806b8:	b538      	push	{r3, r4, r5, lr}
	//printf("RightPulses A: #%i\n",rAPulses);
	return rAPulses;
}
int getRightBPulses(){ //returns the amount of pulses from right encoder B since last reset
	//printf("RightPulses B: #%i\n",rBPulses);
	return rBPulses;
   806ba:	4d06      	ldr	r5, [pc, #24]	; (806d4 <getRightPulses+0x1c>)
	return rAPulses;
   806bc:	4c06      	ldr	r4, [pc, #24]	; (806d8 <getRightPulses+0x20>)
	printf("RightPulses : ##[%i]##\n",(getRightAPulses()+getRightBPulses()));
   806be:	6829      	ldr	r1, [r5, #0]
   806c0:	6823      	ldr	r3, [r4, #0]
   806c2:	4419      	add	r1, r3
   806c4:	4805      	ldr	r0, [pc, #20]	; (806dc <getRightPulses+0x24>)
   806c6:	4b06      	ldr	r3, [pc, #24]	; (806e0 <getRightPulses+0x28>)
   806c8:	4798      	blx	r3
	return (getRightAPulses()+getRightBPulses());
   806ca:	6828      	ldr	r0, [r5, #0]
   806cc:	6823      	ldr	r3, [r4, #0]
}
   806ce:	4418      	add	r0, r3
   806d0:	bd38      	pop	{r3, r4, r5, pc}
   806d2:	bf00      	nop
   806d4:	2007ad10 	.word	0x2007ad10
   806d8:	2007ad04 	.word	0x2007ad04
   806dc:	00085990 	.word	0x00085990
   806e0:	00082ab9 	.word	0x00082ab9

000806e4 <testDriveR>:
	//delay_us(lMotorSpeed);
	//ioport_set_pin_level(PIO_PB27_IDX, LOW);
	//delay_us(5250);
}

void testDriveR(int speed, int direction) {
   806e4:	b570      	push	{r4, r5, r6, lr}
   806e6:	b084      	sub	sp, #16
	speed = Abs(speed);
   806e8:	2800      	cmp	r0, #0
   806ea:	bfb8      	it	lt
   806ec:	4240      	neglt	r0, r0
	int motorSpeed = (1500 + 7 * speed * direction);
   806ee:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   806f2:	fb01 f400 	mul.w	r4, r1, r0

	//connect peripheral B to pin C3
	pio_configure_pin(PWM_35, PIO_TYPE_PIO_PERIPH_B);
   806f6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   806fa:	2043      	movs	r0, #67	; 0x43
   806fc:	4b15      	ldr	r3, [pc, #84]	; (80754 <testDriveR+0x70>)
   806fe:	4798      	blx	r3

	//enable the peripheral clock for the PWM hardware
	pmc_enable_periph_clk(ID_PWM);
   80700:	2024      	movs	r0, #36	; 0x24
   80702:	4b15      	ldr	r3, [pc, #84]	; (80758 <testDriveR+0x74>)
   80704:	4798      	blx	r3

	//disable the channel until it is properly configured
	pwm_channel_disable(PWM, PWM_CHANNEL_0);
   80706:	4d15      	ldr	r5, [pc, #84]	; (8075c <testDriveR+0x78>)
   80708:	2100      	movs	r1, #0
   8070a:	4628      	mov	r0, r5
   8070c:	4b14      	ldr	r3, [pc, #80]	; (80760 <testDriveR+0x7c>)
   8070e:	4798      	blx	r3

	//PWM clock configuration
	pwm_clock_t PWMDAC_clock_config =
   80710:	4b14      	ldr	r3, [pc, #80]	; (80764 <testDriveR+0x80>)
   80712:	9301      	str	r3, [sp, #4]
   80714:	2600      	movs	r6, #0
   80716:	9602      	str	r6, [sp, #8]
   80718:	4b13      	ldr	r3, [pc, #76]	; (80768 <testDriveR+0x84>)
   8071a:	9303      	str	r3, [sp, #12]
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	//apply the clock configuration
	pwm_init(PWM, &PWMDAC_clock_config);
   8071c:	a901      	add	r1, sp, #4
   8071e:	4628      	mov	r0, r5
   80720:	4b12      	ldr	r3, [pc, #72]	; (8076c <testDriveR+0x88>)
   80722:	4798      	blx	r3

	//sets the wave pulse properties
	pwm_channel_instance.channel = PWM_CHANNEL_0;
   80724:	4912      	ldr	r1, [pc, #72]	; (80770 <testDriveR+0x8c>)
   80726:	600e      	str	r6, [r1, #0]
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   80728:	230b      	movs	r3, #11
   8072a:	604b      	str	r3, [r1, #4]
	pwm_channel_instance.polarity = PWM_HIGH;
   8072c:	2301      	movs	r3, #1
   8072e:	728b      	strb	r3, [r1, #10]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
   80730:	810e      	strh	r6, [r1, #8]
	pwm_channel_instance.ul_period = 5250 + motorSpeed;
   80732:	f504 53d2 	add.w	r3, r4, #6720	; 0x1a40
   80736:	331e      	adds	r3, #30
   80738:	610b      	str	r3, [r1, #16]
	int motorSpeed = (1500 + 7 * speed * direction);
   8073a:	f204 54dc 	addw	r4, r4, #1500	; 0x5dc
	pwm_channel_instance.ul_duty = motorSpeed;
   8073e:	60cc      	str	r4, [r1, #12]
	//apply the channel configuration
	pwm_channel_init(PWM, &pwm_channel_instance);
   80740:	4628      	mov	r0, r5
   80742:	4b0c      	ldr	r3, [pc, #48]	; (80774 <testDriveR+0x90>)
   80744:	4798      	blx	r3

	//configuration is complete, so enable the channel
	pwm_channel_enable(PWM, PWM_CHANNEL_0);
   80746:	4631      	mov	r1, r6
   80748:	4628      	mov	r0, r5
   8074a:	4b0b      	ldr	r3, [pc, #44]	; (80778 <testDriveR+0x94>)
   8074c:	4798      	blx	r3
}
   8074e:	b004      	add	sp, #16
   80750:	bd70      	pop	{r4, r5, r6, pc}
   80752:	bf00      	nop
   80754:	00082485 	.word	0x00082485
   80758:	000827e9 	.word	0x000827e9
   8075c:	40094000 	.word	0x40094000
   80760:	00080307 	.word	0x00080307
   80764:	000f4240 	.word	0x000f4240
   80768:	0501bd00 	.word	0x0501bd00
   8076c:	000801b5 	.word	0x000801b5
   80770:	2007ad48 	.word	0x2007ad48
   80774:	000801f9 	.word	0x000801f9
   80778:	000802fd 	.word	0x000802fd

0008077c <testDriveL>:

void testDriveL(int speed, int direction) {
   8077c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8077e:	b085      	sub	sp, #20
	speed = Abs(speed);
   80780:	2800      	cmp	r0, #0
   80782:	bfb8      	it	lt
   80784:	4240      	neglt	r0, r0
	int motorSpeed = (1500 + 7 * speed * direction);
   80786:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   8078a:	fb01 f400 	mul.w	r4, r1, r0

	//connect peripheral B to pin A19
	pio_configure_pin(PWM_42, PIO_TYPE_PIO_PERIPH_B);
   8078e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80792:	2013      	movs	r0, #19
   80794:	4b15      	ldr	r3, [pc, #84]	; (807ec <testDriveL+0x70>)
   80796:	4798      	blx	r3

	//enable the peripheral clock for the PWM hardware
	pmc_enable_periph_clk(ID_PWM);
   80798:	2024      	movs	r0, #36	; 0x24
   8079a:	4b15      	ldr	r3, [pc, #84]	; (807f0 <testDriveL+0x74>)
   8079c:	4798      	blx	r3

	//disable the channel until it is properly configured
	pwm_channel_disable(PWM, PWM_CHANNEL_1);
   8079e:	4d15      	ldr	r5, [pc, #84]	; (807f4 <testDriveL+0x78>)
   807a0:	2101      	movs	r1, #1
   807a2:	4628      	mov	r0, r5
   807a4:	4b14      	ldr	r3, [pc, #80]	; (807f8 <testDriveL+0x7c>)
   807a6:	4798      	blx	r3

	//PWM clock configuration
	pwm_clock_t PWMDAC_clock_config =
   807a8:	4b14      	ldr	r3, [pc, #80]	; (807fc <testDriveL+0x80>)
   807aa:	9301      	str	r3, [sp, #4]
   807ac:	2700      	movs	r7, #0
   807ae:	9702      	str	r7, [sp, #8]
   807b0:	4b13      	ldr	r3, [pc, #76]	; (80800 <testDriveL+0x84>)
   807b2:	9303      	str	r3, [sp, #12]
		.ul_clkb = 0,
		.ul_mck = sysclk_get_cpu_hz()
	};

	//apply the clock configuration
	pwm_init(PWM, &PWMDAC_clock_config);
   807b4:	a901      	add	r1, sp, #4
   807b6:	4628      	mov	r0, r5
   807b8:	4b12      	ldr	r3, [pc, #72]	; (80804 <testDriveL+0x88>)
   807ba:	4798      	blx	r3

	//sets the wave pulse properties
	pwm_channel_instance.channel = PWM_CHANNEL_1;
   807bc:	4912      	ldr	r1, [pc, #72]	; (80808 <testDriveL+0x8c>)
   807be:	2601      	movs	r6, #1
   807c0:	600e      	str	r6, [r1, #0]
	pwm_channel_instance.ul_prescaler = PWM_CMR_CPRE_CLKA;
   807c2:	230b      	movs	r3, #11
   807c4:	604b      	str	r3, [r1, #4]
	pwm_channel_instance.polarity = PWM_HIGH;
   807c6:	728e      	strb	r6, [r1, #10]
	pwm_channel_instance.alignment = PWM_ALIGN_LEFT;
   807c8:	810f      	strh	r7, [r1, #8]
	pwm_channel_instance.ul_period = 5250 + motorSpeed;
   807ca:	f504 53d2 	add.w	r3, r4, #6720	; 0x1a40
   807ce:	331e      	adds	r3, #30
   807d0:	610b      	str	r3, [r1, #16]
	int motorSpeed = (1500 + 7 * speed * direction);
   807d2:	f204 54dc 	addw	r4, r4, #1500	; 0x5dc
	pwm_channel_instance.ul_duty = motorSpeed;
   807d6:	60cc      	str	r4, [r1, #12]
	//apply the channel configuration
	pwm_channel_init(PWM, &pwm_channel_instance);
   807d8:	4628      	mov	r0, r5
   807da:	4b0c      	ldr	r3, [pc, #48]	; (8080c <testDriveL+0x90>)
   807dc:	4798      	blx	r3

	//configuration is complete, so enable the channel
	pwm_channel_enable(PWM, PWM_CHANNEL_1);
   807de:	4631      	mov	r1, r6
   807e0:	4628      	mov	r0, r5
   807e2:	4b0b      	ldr	r3, [pc, #44]	; (80810 <testDriveL+0x94>)
   807e4:	4798      	blx	r3
}
   807e6:	b005      	add	sp, #20
   807e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807ea:	bf00      	nop
   807ec:	00082485 	.word	0x00082485
   807f0:	000827e9 	.word	0x000827e9
   807f4:	40094000 	.word	0x40094000
   807f8:	00080307 	.word	0x00080307
   807fc:	000f4240 	.word	0x000f4240
   80800:	0501bd00 	.word	0x0501bd00
   80804:	000801b5 	.word	0x000801b5
   80808:	2007ad48 	.word	0x2007ad48
   8080c:	000801f9 	.word	0x000801f9
   80810:	000802fd 	.word	0x000802fd

00080814 <drive>:
 void drive(int lSpeed, int rSpeed, int lDirection, int rDirection) { //speed 0-100 in %, direction -1,1, where -1 is backwards and 1 is forward.
   80814:	b538      	push	{r3, r4, r5, lr}
   80816:	4604      	mov	r4, r0
   80818:	4608      	mov	r0, r1
   8081a:	4615      	mov	r5, r2
	rSpeedLatest = rSpeed;
   8081c:	4a07      	ldr	r2, [pc, #28]	; (8083c <drive+0x28>)
   8081e:	6011      	str	r1, [r2, #0]
	lSpeedLatest = lSpeed;
   80820:	4a07      	ldr	r2, [pc, #28]	; (80840 <drive+0x2c>)
   80822:	6014      	str	r4, [r2, #0]
	rDirectionLatest = rDirection;
   80824:	4a07      	ldr	r2, [pc, #28]	; (80844 <drive+0x30>)
   80826:	6013      	str	r3, [r2, #0]
	lDirectionLatest = lDirection;
   80828:	4a07      	ldr	r2, [pc, #28]	; (80848 <drive+0x34>)
   8082a:	6015      	str	r5, [r2, #0]
	testDriveR(rSpeed, -1*rDirection); // sets pwm for the right motors 
   8082c:	4259      	negs	r1, r3
   8082e:	4b07      	ldr	r3, [pc, #28]	; (8084c <drive+0x38>)
   80830:	4798      	blx	r3
	testDriveL(lSpeed, -1*lDirection); // sets pwm for the left motors
   80832:	4269      	negs	r1, r5
   80834:	4620      	mov	r0, r4
   80836:	4b06      	ldr	r3, [pc, #24]	; (80850 <drive+0x3c>)
   80838:	4798      	blx	r3
   8083a:	bd38      	pop	{r3, r4, r5, pc}
   8083c:	20070b10 	.word	0x20070b10
   80840:	20070b08 	.word	0x20070b08
   80844:	20070b0c 	.word	0x20070b0c
   80848:	20070b04 	.word	0x20070b04
   8084c:	000806e5 	.word	0x000806e5
   80850:	0008077d 	.word	0x0008077d

00080854 <getSetLDirection>:
int getSetRSpeed(){
	printf("Set Speed for Right Motor is: %i\n%%",rSpeedLatest);
	return rSpeedLatest;
}
/*Returns the value of latest direction set for the left motor*/
int getSetLDirection(){
   80854:	b510      	push	{r4, lr}
	printf("Set Direction for Left Motor is: %i\n",lDirectionLatest);
   80856:	4c03      	ldr	r4, [pc, #12]	; (80864 <getSetLDirection+0x10>)
   80858:	6821      	ldr	r1, [r4, #0]
   8085a:	4803      	ldr	r0, [pc, #12]	; (80868 <getSetLDirection+0x14>)
   8085c:	4b03      	ldr	r3, [pc, #12]	; (8086c <getSetLDirection+0x18>)
   8085e:	4798      	blx	r3
	return lDirectionLatest;
}
   80860:	6820      	ldr	r0, [r4, #0]
   80862:	bd10      	pop	{r4, pc}
   80864:	20070b04 	.word	0x20070b04
   80868:	00085b14 	.word	0x00085b14
   8086c:	00082ab9 	.word	0x00082ab9

00080870 <getSetRDirection>:
/*Returns the value of latest direction set for the right motor*/
int getSetRDirection(){
   80870:	b510      	push	{r4, lr}
	printf("Set Direction for Right Motor is: %i\n",rDirectionLatest);
   80872:	4c03      	ldr	r4, [pc, #12]	; (80880 <getSetRDirection+0x10>)
   80874:	6821      	ldr	r1, [r4, #0]
   80876:	4803      	ldr	r0, [pc, #12]	; (80884 <getSetRDirection+0x14>)
   80878:	4b03      	ldr	r3, [pc, #12]	; (80888 <getSetRDirection+0x18>)
   8087a:	4798      	blx	r3
	return rDirectionLatest;
   8087c:	6820      	ldr	r0, [r4, #0]
   8087e:	bd10      	pop	{r4, pc}
   80880:	20070b0c 	.word	0x20070b0c
   80884:	00085b3c 	.word	0x00085b3c
   80888:	00082ab9 	.word	0x00082ab9

0008088c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8088c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   80890:	b980      	cbnz	r0, 808b4 <_read+0x28>
   80892:	460c      	mov	r4, r1
   80894:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   80896:	2a00      	cmp	r2, #0
   80898:	dd0f      	ble.n	808ba <_read+0x2e>
   8089a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8089c:	4e08      	ldr	r6, [pc, #32]	; (808c0 <_read+0x34>)
   8089e:	4d09      	ldr	r5, [pc, #36]	; (808c4 <_read+0x38>)
   808a0:	6830      	ldr	r0, [r6, #0]
   808a2:	4621      	mov	r1, r4
   808a4:	682b      	ldr	r3, [r5, #0]
   808a6:	4798      	blx	r3
		ptr++;
   808a8:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   808aa:	42bc      	cmp	r4, r7
   808ac:	d1f8      	bne.n	808a0 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   808ae:	4640      	mov	r0, r8
   808b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   808b4:	f04f 38ff 	mov.w	r8, #4294967295
   808b8:	e7f9      	b.n	808ae <_read+0x22>
	for (; len > 0; --len) {
   808ba:	4680      	mov	r8, r0
   808bc:	e7f7      	b.n	808ae <_read+0x22>
   808be:	bf00      	nop
   808c0:	2007ad78 	.word	0x2007ad78
   808c4:	2007ad70 	.word	0x2007ad70

000808c8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   808c8:	3801      	subs	r0, #1
   808ca:	2802      	cmp	r0, #2
   808cc:	d815      	bhi.n	808fa <_write+0x32>
{
   808ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   808d2:	460e      	mov	r6, r1
   808d4:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   808d6:	b19a      	cbz	r2, 80900 <_write+0x38>
   808d8:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   808da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 80914 <_write+0x4c>
   808de:	4f0c      	ldr	r7, [pc, #48]	; (80910 <_write+0x48>)
   808e0:	f8d8 0000 	ldr.w	r0, [r8]
   808e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   808e8:	683b      	ldr	r3, [r7, #0]
   808ea:	4798      	blx	r3
   808ec:	2800      	cmp	r0, #0
   808ee:	db0a      	blt.n	80906 <_write+0x3e>
   808f0:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   808f2:	3c01      	subs	r4, #1
   808f4:	d1f4      	bne.n	808e0 <_write+0x18>
   808f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   808fa:	f04f 30ff 	mov.w	r0, #4294967295
   808fe:	4770      	bx	lr
	for (; len != 0; --len) {
   80900:	4610      	mov	r0, r2
   80902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   80906:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   8090a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8090e:	bf00      	nop
   80910:	2007ad74 	.word	0x2007ad74
   80914:	2007ad78 	.word	0x2007ad78

00080918 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80918:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8091a:	23ac      	movs	r3, #172	; 0xac
   8091c:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   8091e:	680b      	ldr	r3, [r1, #0]
   80920:	684a      	ldr	r2, [r1, #4]
   80922:	fbb3 f3f2 	udiv	r3, r3, r2
   80926:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80928:	1e5c      	subs	r4, r3, #1
   8092a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   8092e:	4294      	cmp	r4, r2
   80930:	d80b      	bhi.n	8094a <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   80932:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   80934:	688b      	ldr	r3, [r1, #8]
   80936:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80938:	f240 2302 	movw	r3, #514	; 0x202
   8093c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80940:	2350      	movs	r3, #80	; 0x50
   80942:	6003      	str	r3, [r0, #0]

	return 0;
   80944:	2000      	movs	r0, #0
}
   80946:	bc10      	pop	{r4}
   80948:	4770      	bx	lr
		return 1;
   8094a:	2001      	movs	r0, #1
   8094c:	e7fb      	b.n	80946 <uart_init+0x2e>

0008094e <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   8094e:	6943      	ldr	r3, [r0, #20]
   80950:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   80954:	bf1a      	itte	ne
   80956:	61c1      	strne	r1, [r0, #28]
	return 0;
   80958:	2000      	movne	r0, #0
		return 1;
   8095a:	2001      	moveq	r0, #1
}
   8095c:	4770      	bx	lr

0008095e <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   8095e:	6943      	ldr	r3, [r0, #20]
   80960:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   80964:	bf1d      	ittte	ne
   80966:	6983      	ldrne	r3, [r0, #24]
   80968:	700b      	strbne	r3, [r1, #0]
	return 0;
   8096a:	2000      	movne	r0, #0
		return 1;
   8096c:	2001      	moveq	r0, #1
}
   8096e:	4770      	bx	lr

00080970 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   80970:	6943      	ldr	r3, [r0, #20]
   80972:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   80976:	bf1d      	ittte	ne
   80978:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   8097c:	61c1      	strne	r1, [r0, #28]
	return 0;
   8097e:	2000      	movne	r0, #0
		return 1;
   80980:	2001      	moveq	r0, #1
}
   80982:	4770      	bx	lr

00080984 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80984:	6943      	ldr	r3, [r0, #20]
   80986:	f013 0f01 	tst.w	r3, #1
   8098a:	d005      	beq.n	80998 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   8098c:	6983      	ldr	r3, [r0, #24]
   8098e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   80992:	600b      	str	r3, [r1, #0]

	return 0;
   80994:	2000      	movs	r0, #0
   80996:	4770      	bx	lr
		return 1;
   80998:	2001      	movs	r0, #1
}
   8099a:	4770      	bx	lr

0008099c <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   8099c:	b5f0      	push	{r4, r5, r6, r7, lr}
   8099e:	b083      	sub	sp, #12
   809a0:	4604      	mov	r4, r0
   809a2:	460d      	mov	r5, r1
	uint32_t val = 0;
   809a4:	2300      	movs	r3, #0
   809a6:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   809a8:	4b20      	ldr	r3, [pc, #128]	; (80a2c <usart_serial_getchar+0x90>)
   809aa:	4298      	cmp	r0, r3
   809ac:	d00d      	beq.n	809ca <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   809ae:	4b20      	ldr	r3, [pc, #128]	; (80a30 <usart_serial_getchar+0x94>)
   809b0:	4298      	cmp	r0, r3
   809b2:	d012      	beq.n	809da <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   809b4:	4b1f      	ldr	r3, [pc, #124]	; (80a34 <usart_serial_getchar+0x98>)
   809b6:	4298      	cmp	r0, r3
   809b8:	d019      	beq.n	809ee <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   809ba:	4b1f      	ldr	r3, [pc, #124]	; (80a38 <usart_serial_getchar+0x9c>)
   809bc:	429c      	cmp	r4, r3
   809be:	d020      	beq.n	80a02 <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   809c0:	4b1e      	ldr	r3, [pc, #120]	; (80a3c <usart_serial_getchar+0xa0>)
   809c2:	429c      	cmp	r4, r3
   809c4:	d027      	beq.n	80a16 <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   809c6:	b003      	add	sp, #12
   809c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   809ca:	461f      	mov	r7, r3
   809cc:	4e1c      	ldr	r6, [pc, #112]	; (80a40 <usart_serial_getchar+0xa4>)
   809ce:	4629      	mov	r1, r5
   809d0:	4638      	mov	r0, r7
   809d2:	47b0      	blx	r6
   809d4:	2800      	cmp	r0, #0
   809d6:	d1fa      	bne.n	809ce <usart_serial_getchar+0x32>
   809d8:	e7ef      	b.n	809ba <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   809da:	461f      	mov	r7, r3
   809dc:	4e19      	ldr	r6, [pc, #100]	; (80a44 <usart_serial_getchar+0xa8>)
   809de:	a901      	add	r1, sp, #4
   809e0:	4638      	mov	r0, r7
   809e2:	47b0      	blx	r6
   809e4:	2800      	cmp	r0, #0
   809e6:	d1fa      	bne.n	809de <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   809e8:	9b01      	ldr	r3, [sp, #4]
   809ea:	702b      	strb	r3, [r5, #0]
   809ec:	e7e8      	b.n	809c0 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   809ee:	461e      	mov	r6, r3
   809f0:	4c14      	ldr	r4, [pc, #80]	; (80a44 <usart_serial_getchar+0xa8>)
   809f2:	a901      	add	r1, sp, #4
   809f4:	4630      	mov	r0, r6
   809f6:	47a0      	blx	r4
   809f8:	2800      	cmp	r0, #0
   809fa:	d1fa      	bne.n	809f2 <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   809fc:	9b01      	ldr	r3, [sp, #4]
   809fe:	702b      	strb	r3, [r5, #0]
   80a00:	e7e1      	b.n	809c6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80a02:	461e      	mov	r6, r3
   80a04:	4c0f      	ldr	r4, [pc, #60]	; (80a44 <usart_serial_getchar+0xa8>)
   80a06:	a901      	add	r1, sp, #4
   80a08:	4630      	mov	r0, r6
   80a0a:	47a0      	blx	r4
   80a0c:	2800      	cmp	r0, #0
   80a0e:	d1fa      	bne.n	80a06 <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80a10:	9b01      	ldr	r3, [sp, #4]
   80a12:	702b      	strb	r3, [r5, #0]
   80a14:	e7d7      	b.n	809c6 <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   80a16:	461e      	mov	r6, r3
   80a18:	4c0a      	ldr	r4, [pc, #40]	; (80a44 <usart_serial_getchar+0xa8>)
   80a1a:	a901      	add	r1, sp, #4
   80a1c:	4630      	mov	r0, r6
   80a1e:	47a0      	blx	r4
   80a20:	2800      	cmp	r0, #0
   80a22:	d1fa      	bne.n	80a1a <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   80a24:	9b01      	ldr	r3, [sp, #4]
   80a26:	702b      	strb	r3, [r5, #0]
}
   80a28:	e7cd      	b.n	809c6 <usart_serial_getchar+0x2a>
   80a2a:	bf00      	nop
   80a2c:	400e0800 	.word	0x400e0800
   80a30:	40098000 	.word	0x40098000
   80a34:	4009c000 	.word	0x4009c000
   80a38:	400a0000 	.word	0x400a0000
   80a3c:	400a4000 	.word	0x400a4000
   80a40:	0008095f 	.word	0x0008095f
   80a44:	00080985 	.word	0x00080985

00080a48 <usart_serial_putchar>:
{
   80a48:	b570      	push	{r4, r5, r6, lr}
   80a4a:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80a4c:	4b1e      	ldr	r3, [pc, #120]	; (80ac8 <usart_serial_putchar+0x80>)
   80a4e:	4298      	cmp	r0, r3
   80a50:	d00d      	beq.n	80a6e <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   80a52:	4b1e      	ldr	r3, [pc, #120]	; (80acc <usart_serial_putchar+0x84>)
   80a54:	4298      	cmp	r0, r3
   80a56:	d013      	beq.n	80a80 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80a58:	4b1d      	ldr	r3, [pc, #116]	; (80ad0 <usart_serial_putchar+0x88>)
   80a5a:	4298      	cmp	r0, r3
   80a5c:	d019      	beq.n	80a92 <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80a5e:	4b1d      	ldr	r3, [pc, #116]	; (80ad4 <usart_serial_putchar+0x8c>)
   80a60:	4298      	cmp	r0, r3
   80a62:	d01f      	beq.n	80aa4 <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   80a64:	4b1c      	ldr	r3, [pc, #112]	; (80ad8 <usart_serial_putchar+0x90>)
   80a66:	4298      	cmp	r0, r3
   80a68:	d025      	beq.n	80ab6 <usart_serial_putchar+0x6e>
	return 0;
   80a6a:	2000      	movs	r0, #0
}
   80a6c:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   80a6e:	461e      	mov	r6, r3
   80a70:	4d1a      	ldr	r5, [pc, #104]	; (80adc <usart_serial_putchar+0x94>)
   80a72:	4621      	mov	r1, r4
   80a74:	4630      	mov	r0, r6
   80a76:	47a8      	blx	r5
   80a78:	2800      	cmp	r0, #0
   80a7a:	d1fa      	bne.n	80a72 <usart_serial_putchar+0x2a>
		return 1;
   80a7c:	2001      	movs	r0, #1
   80a7e:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80a80:	461e      	mov	r6, r3
   80a82:	4d17      	ldr	r5, [pc, #92]	; (80ae0 <usart_serial_putchar+0x98>)
   80a84:	4621      	mov	r1, r4
   80a86:	4630      	mov	r0, r6
   80a88:	47a8      	blx	r5
   80a8a:	2800      	cmp	r0, #0
   80a8c:	d1fa      	bne.n	80a84 <usart_serial_putchar+0x3c>
		return 1;
   80a8e:	2001      	movs	r0, #1
   80a90:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80a92:	461e      	mov	r6, r3
   80a94:	4d12      	ldr	r5, [pc, #72]	; (80ae0 <usart_serial_putchar+0x98>)
   80a96:	4621      	mov	r1, r4
   80a98:	4630      	mov	r0, r6
   80a9a:	47a8      	blx	r5
   80a9c:	2800      	cmp	r0, #0
   80a9e:	d1fa      	bne.n	80a96 <usart_serial_putchar+0x4e>
		return 1;
   80aa0:	2001      	movs	r0, #1
   80aa2:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80aa4:	461e      	mov	r6, r3
   80aa6:	4d0e      	ldr	r5, [pc, #56]	; (80ae0 <usart_serial_putchar+0x98>)
   80aa8:	4621      	mov	r1, r4
   80aaa:	4630      	mov	r0, r6
   80aac:	47a8      	blx	r5
   80aae:	2800      	cmp	r0, #0
   80ab0:	d1fa      	bne.n	80aa8 <usart_serial_putchar+0x60>
		return 1;
   80ab2:	2001      	movs	r0, #1
   80ab4:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   80ab6:	461e      	mov	r6, r3
   80ab8:	4d09      	ldr	r5, [pc, #36]	; (80ae0 <usart_serial_putchar+0x98>)
   80aba:	4621      	mov	r1, r4
   80abc:	4630      	mov	r0, r6
   80abe:	47a8      	blx	r5
   80ac0:	2800      	cmp	r0, #0
   80ac2:	d1fa      	bne.n	80aba <usart_serial_putchar+0x72>
		return 1;
   80ac4:	2001      	movs	r0, #1
   80ac6:	bd70      	pop	{r4, r5, r6, pc}
   80ac8:	400e0800 	.word	0x400e0800
   80acc:	40098000 	.word	0x40098000
   80ad0:	4009c000 	.word	0x4009c000
   80ad4:	400a0000 	.word	0x400a0000
   80ad8:	400a4000 	.word	0x400a4000
   80adc:	0008094f 	.word	0x0008094f
   80ae0:	00080971 	.word	0x00080971

00080ae4 <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   80ae4:	b510      	push	{r4, lr}
	sysclk_init();
   80ae6:	4b17      	ldr	r3, [pc, #92]	; (80b44 <misc_init+0x60>)
   80ae8:	4798      	blx	r3
	board_init();
   80aea:	4b17      	ldr	r3, [pc, #92]	; (80b48 <misc_init+0x64>)
   80aec:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80aee:	200b      	movs	r0, #11
   80af0:	4c16      	ldr	r4, [pc, #88]	; (80b4c <misc_init+0x68>)
   80af2:	47a0      	blx	r4
   80af4:	200c      	movs	r0, #12
   80af6:	47a0      	blx	r4
   80af8:	200d      	movs	r0, #13
   80afa:	47a0      	blx	r4
   80afc:	200e      	movs	r0, #14
   80afe:	47a0      	blx	r4
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80b00:	4b13      	ldr	r3, [pc, #76]	; (80b50 <misc_init+0x6c>)
   80b02:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80b06:	611a      	str	r2, [r3, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b08:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80b0c:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80b10:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b12:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80b16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80b1a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b1c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80b20:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   80b24:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b26:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80b2a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
   80b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80b32:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b34:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80b38:	2204      	movs	r2, #4
   80b3a:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80b3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//ioport_set_pin_level(pin13, LOW); 
	//ioport_set_pin_level(pin12, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   80b40:	2000      	movs	r0, #0
   80b42:	bd10      	pop	{r4, pc}
   80b44:	000822d1 	.word	0x000822d1
   80b48:	00082335 	.word	0x00082335
   80b4c:	000827e9 	.word	0x000827e9
   80b50:	400e1000 	.word	0x400e1000

00080b54 <rtos_init>:
* Function: rtos_init
* -------------------
* initializes FreeRTOS by creating a number of tasks and starting the scheduler.
*/
int rtos_init (void)
{
   80b54:	b530      	push	{r4, r5, lr}
   80b56:	b085      	sub	sp, #20
	/* -------------------------------- Used for testing purposes ------------------------------------- */
	xTaskCreate(task1, (const signed char * const) "task1", TASK_1_STACK_SIZE, NULL, TASK_1_PRIORITY, NULL);
   80b58:	2400      	movs	r4, #0
   80b5a:	9403      	str	r4, [sp, #12]
   80b5c:	9402      	str	r4, [sp, #8]
   80b5e:	9401      	str	r4, [sp, #4]
   80b60:	2301      	movs	r3, #1
   80b62:	9300      	str	r3, [sp, #0]
   80b64:	4623      	mov	r3, r4
   80b66:	f44f 7200 	mov.w	r2, #512	; 0x200
   80b6a:	4904      	ldr	r1, [pc, #16]	; (80b7c <rtos_init+0x28>)
   80b6c:	4804      	ldr	r0, [pc, #16]	; (80b80 <rtos_init+0x2c>)
   80b6e:	4d05      	ldr	r5, [pc, #20]	; (80b84 <rtos_init+0x30>)
   80b70:	47a8      	blx	r5
	//xTaskCreate(task2, (const signed char * const) "task2", TASK_2_STACK_SIZE, NULL, TASK_2_PRIORITY, NULL);
	/* ------------------------------------------------------------------------------------------------ */
	
	vTaskStartScheduler();
   80b72:	4b05      	ldr	r3, [pc, #20]	; (80b88 <rtos_init+0x34>)
   80b74:	4798      	blx	r3
	return 0;
}
   80b76:	4620      	mov	r0, r4
   80b78:	b005      	add	sp, #20
   80b7a:	bd30      	pop	{r4, r5, pc}
   80b7c:	00085b84 	.word	0x00085b84
   80b80:	00080c21 	.word	0x00080c21
   80b84:	0008167d 	.word	0x0008167d
   80b88:	00081881 	.word	0x00081881

00080b8c <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   80b8c:	b530      	push	{r4, r5, lr}
   80b8e:	b085      	sub	sp, #20
   80b90:	2008      	movs	r0, #8
   80b92:	4d15      	ldr	r5, [pc, #84]	; (80be8 <console_init+0x5c>)
   80b94:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80b96:	4c15      	ldr	r4, [pc, #84]	; (80bec <console_init+0x60>)
   80b98:	4b15      	ldr	r3, [pc, #84]	; (80bf0 <console_init+0x64>)
   80b9a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   80b9c:	4a15      	ldr	r2, [pc, #84]	; (80bf4 <console_init+0x68>)
   80b9e:	4b16      	ldr	r3, [pc, #88]	; (80bf8 <console_init+0x6c>)
   80ba0:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80ba2:	4a16      	ldr	r2, [pc, #88]	; (80bfc <console_init+0x70>)
   80ba4:	4b16      	ldr	r3, [pc, #88]	; (80c00 <console_init+0x74>)
   80ba6:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80ba8:	4b16      	ldr	r3, [pc, #88]	; (80c04 <console_init+0x78>)
   80baa:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   80bac:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80bb0:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80bb2:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80bb6:	9303      	str	r3, [sp, #12]
   80bb8:	2008      	movs	r0, #8
   80bba:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   80bbc:	a901      	add	r1, sp, #4
   80bbe:	4620      	mov	r0, r4
   80bc0:	4b11      	ldr	r3, [pc, #68]	; (80c08 <console_init+0x7c>)
   80bc2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   80bc4:	4d11      	ldr	r5, [pc, #68]	; (80c0c <console_init+0x80>)
   80bc6:	682b      	ldr	r3, [r5, #0]
   80bc8:	2100      	movs	r1, #0
   80bca:	6898      	ldr	r0, [r3, #8]
   80bcc:	4c10      	ldr	r4, [pc, #64]	; (80c10 <console_init+0x84>)
   80bce:	47a0      	blx	r4
	setbuf(stdin, NULL);
   80bd0:	682b      	ldr	r3, [r5, #0]
   80bd2:	2100      	movs	r1, #0
   80bd4:	6858      	ldr	r0, [r3, #4]
   80bd6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   80bd8:	480e      	ldr	r0, [pc, #56]	; (80c14 <console_init+0x88>)
   80bda:	4c0f      	ldr	r4, [pc, #60]	; (80c18 <console_init+0x8c>)
   80bdc:	47a0      	blx	r4
	printf("=============\n");
   80bde:	480f      	ldr	r0, [pc, #60]	; (80c1c <console_init+0x90>)
   80be0:	47a0      	blx	r4
	return 0;
}
   80be2:	2000      	movs	r0, #0
   80be4:	b005      	add	sp, #20
   80be6:	bd30      	pop	{r4, r5, pc}
   80be8:	000827e9 	.word	0x000827e9
   80bec:	400e0800 	.word	0x400e0800
   80bf0:	2007ad78 	.word	0x2007ad78
   80bf4:	00080a49 	.word	0x00080a49
   80bf8:	2007ad74 	.word	0x2007ad74
   80bfc:	0008099d 	.word	0x0008099d
   80c00:	2007ad70 	.word	0x2007ad70
   80c04:	0501bd00 	.word	0x0501bd00
   80c08:	00080919 	.word	0x00080919
   80c0c:	2007013c 	.word	0x2007013c
   80c10:	00082c69 	.word	0x00082c69
   80c14:	00085b64 	.word	0x00085b64
   80c18:	00082ab9 	.word	0x00082ab9
   80c1c:	00085b74 	.word	0x00085b74

00080c20 <task1>:
* Function: task1
* -------------------
* Performs an action every xTimeT1 milliseconds
*/
void task1(void *pvParamters)
{
   80c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80c24:	b085      	sub	sp, #20
   80c26:	af00      	add	r7, sp, #0
	int	ticksReference = 0; //Do not modify	
	int testNbr = 1; //Do not modify	
	int secondsPerTest = 2; //MODIFY for yout test, NOTE: take into account limits of data type if needed	
	int speedIncrementFactor = 5; //MODIFY for your test, NOTE: Motorspeed is limited to 0-100	
	int totalNbrTests = 20;	//MODIFY for your test, NOTE: calculation: totalNbrTests * speedIncrementFactor = should not exceed 100
	int pulses[2][totalNbrTests]; //Do not modify
   80c28:	b0aa      	sub	sp, #168	; 0xa8
   80c2a:	f10d 0b50 	add.w	fp, sp, #80	; 0x50
   80c2e:	ab29      	add	r3, sp, #164	; 0xa4
   80c30:	607b      	str	r3, [r7, #4]
   80c32:	f10d 08a0 	add.w	r8, sp, #160	; 0xa0
   80c36:	f8c7 b00c 	str.w	fp, [r7, #12]
	int testNbr = 1; //Do not modify	
   80c3a:	2601      	movs	r6, #1

	while(testNbr <= totalNbrTests){
		printf("Test#%i speed:%i is startning...\n",testNbr,speedIncrementFactor*testNbr);
   80c3c:	f8df a104 	ldr.w	sl, [pc, #260]	; 80d44 <task1+0x124>
		getLeftPulses();
		getRightPulses();
		printf("------\n");	
		ticksReference = xTaskGetTickCount();
   80c40:	4c37      	ldr	r4, [pc, #220]	; (80d20 <task1+0x100>)
		drive(speedIncrementFactor*testNbr,speedIncrementFactor*testNbr, 1, 1);
   80c42:	f8c7 d000 	str.w	sp, [r7]
   80c46:	e01a      	b.n	80c7e <task1+0x5e>
		while(ticksPassed<secondsPerTest*1000){
			ticksPassed =  xTaskGetTickCount() - ticksReference;
		}
		drive(0,0,1,1);
   80c48:	2301      	movs	r3, #1
   80c4a:	461a      	mov	r2, r3
   80c4c:	2100      	movs	r1, #0
   80c4e:	4608      	mov	r0, r1
   80c50:	4d34      	ldr	r5, [pc, #208]	; (80d24 <task1+0x104>)
   80c52:	47a8      	blx	r5
		pulses[1][testNbr] = getLeftPulses();
   80c54:	4b34      	ldr	r3, [pc, #208]	; (80d28 <task1+0x108>)
   80c56:	4798      	blx	r3
   80c58:	68fb      	ldr	r3, [r7, #12]
   80c5a:	f843 0f04 	str.w	r0, [r3, #4]!
   80c5e:	60fb      	str	r3, [r7, #12]
		pulses[2][testNbr] = getRightPulses();
   80c60:	4b32      	ldr	r3, [pc, #200]	; (80d2c <task1+0x10c>)
   80c62:	4798      	blx	r3
   80c64:	f848 0f04 	str.w	r0, [r8, #4]!
		printf("Test#%i speed:%i is ending...\n",testNbr,speedIncrementFactor*testNbr);
   80c68:	464a      	mov	r2, r9
   80c6a:	4631      	mov	r1, r6
   80c6c:	4830      	ldr	r0, [pc, #192]	; (80d30 <task1+0x110>)
   80c6e:	47d0      	blx	sl
		printf("------\n");
   80c70:	4830      	ldr	r0, [pc, #192]	; (80d34 <task1+0x114>)
   80c72:	47d0      	blx	sl
		resetCounter();	
   80c74:	4b30      	ldr	r3, [pc, #192]	; (80d38 <task1+0x118>)
   80c76:	4798      	blx	r3
		testNbr++;
   80c78:	3601      	adds	r6, #1
	while(testNbr <= totalNbrTests){
   80c7a:	2e15      	cmp	r6, #21
   80c7c:	d01a      	beq.n	80cb4 <task1+0x94>
   80c7e:	eb06 0986 	add.w	r9, r6, r6, lsl #2
		printf("Test#%i speed:%i is startning...\n",testNbr,speedIncrementFactor*testNbr);
   80c82:	464a      	mov	r2, r9
   80c84:	4631      	mov	r1, r6
   80c86:	482d      	ldr	r0, [pc, #180]	; (80d3c <task1+0x11c>)
   80c88:	47d0      	blx	sl
		getLeftPulses();
   80c8a:	4b27      	ldr	r3, [pc, #156]	; (80d28 <task1+0x108>)
   80c8c:	4798      	blx	r3
		getRightPulses();
   80c8e:	4b27      	ldr	r3, [pc, #156]	; (80d2c <task1+0x10c>)
   80c90:	4798      	blx	r3
		printf("------\n");	
   80c92:	4828      	ldr	r0, [pc, #160]	; (80d34 <task1+0x114>)
   80c94:	47d0      	blx	sl
		ticksReference = xTaskGetTickCount();
   80c96:	47a0      	blx	r4
   80c98:	60b8      	str	r0, [r7, #8]
		drive(speedIncrementFactor*testNbr,speedIncrementFactor*testNbr, 1, 1);
   80c9a:	2301      	movs	r3, #1
   80c9c:	461a      	mov	r2, r3
   80c9e:	4649      	mov	r1, r9
   80ca0:	4648      	mov	r0, r9
   80ca2:	4d20      	ldr	r5, [pc, #128]	; (80d24 <task1+0x104>)
   80ca4:	47a8      	blx	r5
   80ca6:	68bd      	ldr	r5, [r7, #8]
			ticksPassed =  xTaskGetTickCount() - ticksReference;
   80ca8:	47a0      	blx	r4
   80caa:	1b40      	subs	r0, r0, r5
		while(ticksPassed<secondsPerTest*1000){
   80cac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   80cb0:	dbfa      	blt.n	80ca8 <task1+0x88>
   80cb2:	e7c9      	b.n	80c48 <task1+0x28>
   80cb4:	f8d7 9000 	ldr.w	r9, [r7]
		ticksPassed = 0;
	}
	drive(0,0,1,1);
   80cb8:	2301      	movs	r3, #1
   80cba:	461a      	mov	r2, r3
   80cbc:	2100      	movs	r1, #0
   80cbe:	4608      	mov	r0, r1
   80cc0:	47a8      	blx	r5
	printf("All tests have been run through...\n");
   80cc2:	481f      	ldr	r0, [pc, #124]	; (80d40 <task1+0x120>)
   80cc4:	4c1f      	ldr	r4, [pc, #124]	; (80d44 <task1+0x124>)
   80cc6:	47a0      	blx	r4
	printf("printing the results:\n");
   80cc8:	481f      	ldr	r0, [pc, #124]	; (80d48 <task1+0x128>)
   80cca:	47a0      	blx	r4
	printf("------\n");
   80ccc:	4d19      	ldr	r5, [pc, #100]	; (80d34 <task1+0x114>)
   80cce:	4628      	mov	r0, r5
   80cd0:	47a0      	blx	r4
	printf("Start of results\n");
   80cd2:	481e      	ldr	r0, [pc, #120]	; (80d4c <task1+0x12c>)
   80cd4:	47a0      	blx	r4
	printf("------\n");
   80cd6:	4628      	mov	r0, r5
   80cd8:	47a0      	blx	r4
	for(int j = 1; j <= 2; j++){
		if(j==1){
			printf("WHEEL LEFT:\n");
   80cda:	481d      	ldr	r0, [pc, #116]	; (80d50 <task1+0x130>)
   80cdc:	47a0      	blx	r4
   80cde:	f109 06a0 	add.w	r6, r9, #160	; 0xa0
		}else if(j==2){
			printf("WHEEL RIGHT:\n");
		}
		for(int k = 1; k <= totalNbrTests; k++){
			printf(" %i ",pulses[j][k]);
   80ce2:	4d1c      	ldr	r5, [pc, #112]	; (80d54 <task1+0x134>)
   80ce4:	f85b 1f04 	ldr.w	r1, [fp, #4]!
   80ce8:	4628      	mov	r0, r5
   80cea:	47a0      	blx	r4
		for(int k = 1; k <= totalNbrTests; k++){
   80cec:	45b3      	cmp	fp, r6
   80cee:	d1f9      	bne.n	80ce4 <task1+0xc4>
			printf("WHEEL RIGHT:\n");
   80cf0:	4819      	ldr	r0, [pc, #100]	; (80d58 <task1+0x138>)
   80cf2:	4b14      	ldr	r3, [pc, #80]	; (80d44 <task1+0x124>)
   80cf4:	4798      	blx	r3
   80cf6:	687c      	ldr	r4, [r7, #4]
   80cf8:	f109 09f4 	add.w	r9, r9, #244	; 0xf4
			printf(" %i ",pulses[j][k]);
   80cfc:	4e15      	ldr	r6, [pc, #84]	; (80d54 <task1+0x134>)
   80cfe:	4d11      	ldr	r5, [pc, #68]	; (80d44 <task1+0x124>)
   80d00:	f854 1b04 	ldr.w	r1, [r4], #4
   80d04:	4630      	mov	r0, r6
   80d06:	47a8      	blx	r5
		for(int k = 1; k <= totalNbrTests; k++){
   80d08:	454c      	cmp	r4, r9
   80d0a:	d1f9      	bne.n	80d00 <task1+0xe0>
		}
	}
	printf("------\n");
   80d0c:	4d09      	ldr	r5, [pc, #36]	; (80d34 <task1+0x114>)
   80d0e:	4628      	mov	r0, r5
   80d10:	4c0c      	ldr	r4, [pc, #48]	; (80d44 <task1+0x124>)
   80d12:	47a0      	blx	r4
	printf("End of results\n");
   80d14:	4811      	ldr	r0, [pc, #68]	; (80d5c <task1+0x13c>)
   80d16:	47a0      	blx	r4
	printf("------\n");
   80d18:	4628      	mov	r0, r5
   80d1a:	47a0      	blx	r4
   80d1c:	e7fe      	b.n	80d1c <task1+0xfc>
   80d1e:	bf00      	nop
   80d20:	000818f9 	.word	0x000818f9
   80d24:	00080815 	.word	0x00080815
   80d28:	0008068d 	.word	0x0008068d
   80d2c:	000806b9 	.word	0x000806b9
   80d30:	00085bb8 	.word	0x00085bb8
   80d34:	00085bb0 	.word	0x00085bb0
   80d38:	0008064d 	.word	0x0008064d
   80d3c:	00085b8c 	.word	0x00085b8c
   80d40:	00085bd8 	.word	0x00085bd8
   80d44:	00082ab9 	.word	0x00082ab9
   80d48:	00085bfc 	.word	0x00085bfc
   80d4c:	00085c14 	.word	0x00085c14
   80d50:	00085c28 	.word	0x00085c28
   80d54:	00085c38 	.word	0x00085c38
   80d58:	00085c40 	.word	0x00085c40
   80d5c:	00085c50 	.word	0x00085c50

00080d60 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80d60:	f100 0308 	add.w	r3, r0, #8
   80d64:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80d66:	f04f 32ff 	mov.w	r2, #4294967295
   80d6a:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80d6c:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80d6e:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80d70:	2300      	movs	r3, #0
   80d72:	6003      	str	r3, [r0, #0]
   80d74:	4770      	bx	lr

00080d76 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80d76:	2300      	movs	r3, #0
   80d78:	6103      	str	r3, [r0, #16]
   80d7a:	4770      	bx	lr

00080d7c <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80d7c:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80d7e:	685a      	ldr	r2, [r3, #4]
   80d80:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80d82:	6842      	ldr	r2, [r0, #4]
   80d84:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80d86:	685a      	ldr	r2, [r3, #4]
   80d88:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80d8a:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80d8c:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80d8e:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80d90:	6803      	ldr	r3, [r0, #0]
   80d92:	3301      	adds	r3, #1
   80d94:	6003      	str	r3, [r0, #0]
   80d96:	4770      	bx	lr

00080d98 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80d98:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80d9a:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80d9c:	f1b4 3fff 	cmp.w	r4, #4294967295
   80da0:	d015      	beq.n	80dce <vListInsert+0x36>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80da2:	f100 0308 	add.w	r3, r0, #8
   80da6:	68c2      	ldr	r2, [r0, #12]
   80da8:	6812      	ldr	r2, [r2, #0]
   80daa:	4294      	cmp	r4, r2
   80dac:	d304      	bcc.n	80db8 <vListInsert+0x20>
   80dae:	685b      	ldr	r3, [r3, #4]
   80db0:	685a      	ldr	r2, [r3, #4]
   80db2:	6812      	ldr	r2, [r2, #0]
   80db4:	4294      	cmp	r4, r2
   80db6:	d2fa      	bcs.n	80dae <vListInsert+0x16>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80db8:	685a      	ldr	r2, [r3, #4]
   80dba:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80dbc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80dbe:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80dc0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80dc2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80dc4:	6803      	ldr	r3, [r0, #0]
   80dc6:	3301      	adds	r3, #1
   80dc8:	6003      	str	r3, [r0, #0]
}
   80dca:	bc10      	pop	{r4}
   80dcc:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
   80dce:	6903      	ldr	r3, [r0, #16]
   80dd0:	e7f2      	b.n	80db8 <vListInsert+0x20>

00080dd2 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80dd2:	6843      	ldr	r3, [r0, #4]
   80dd4:	6882      	ldr	r2, [r0, #8]
   80dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80dd8:	6883      	ldr	r3, [r0, #8]
   80dda:	6842      	ldr	r2, [r0, #4]
   80ddc:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80dde:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80de0:	685a      	ldr	r2, [r3, #4]
   80de2:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80de4:	bf04      	itt	eq
   80de6:	6882      	ldreq	r2, [r0, #8]
   80de8:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80dea:	2200      	movs	r2, #0
   80dec:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80dee:	681a      	ldr	r2, [r3, #0]
   80df0:	3a01      	subs	r2, #1
   80df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80df4:	6818      	ldr	r0, [r3, #0]
}
   80df6:	4770      	bx	lr

00080df8 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80df8:	4803      	ldr	r0, [pc, #12]	; (80e08 <prvPortStartFirstTask+0x10>)
   80dfa:	6800      	ldr	r0, [r0, #0]
   80dfc:	6800      	ldr	r0, [r0, #0]
   80dfe:	f380 8808 	msr	MSP, r0
   80e02:	b662      	cpsie	i
   80e04:	df00      	svc	0
   80e06:	bf00      	nop
   80e08:	e000ed08 	.word	0xe000ed08

00080e0c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80e0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80e10:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80e14:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = 0;	/* LR */
   80e18:	2300      	movs	r3, #0
   80e1a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80e1e:	f840 2c20 	str.w	r2, [r0, #-32]
}
   80e22:	3840      	subs	r0, #64	; 0x40
   80e24:	4770      	bx	lr
	...

00080e28 <SVC_Handler>:
	__asm volatile (
   80e28:	4b06      	ldr	r3, [pc, #24]	; (80e44 <pxCurrentTCBConst2>)
   80e2a:	6819      	ldr	r1, [r3, #0]
   80e2c:	6808      	ldr	r0, [r1, #0]
   80e2e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80e32:	f380 8809 	msr	PSP, r0
   80e36:	f04f 0000 	mov.w	r0, #0
   80e3a:	f380 8811 	msr	BASEPRI, r0
   80e3e:	f04e 0e0d 	orr.w	lr, lr, #13
   80e42:	4770      	bx	lr

00080e44 <pxCurrentTCBConst2>:
   80e44:	2007ab20 	.word	0x2007ab20

00080e48 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e4c:	4b01      	ldr	r3, [pc, #4]	; (80e54 <vPortYieldFromISR+0xc>)
   80e4e:	601a      	str	r2, [r3, #0]
   80e50:	4770      	bx	lr
   80e52:	bf00      	nop
   80e54:	e000ed04 	.word	0xe000ed04

00080e58 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80e58:	f3ef 8011 	mrs	r0, BASEPRI
   80e5c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80e60:	f381 8811 	msr	BASEPRI, r1
   80e64:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80e66:	2000      	movs	r0, #0

00080e68 <vPortEnterCritical>:
{
   80e68:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80e6a:	4b03      	ldr	r3, [pc, #12]	; (80e78 <vPortEnterCritical+0x10>)
   80e6c:	4798      	blx	r3
	uxCriticalNesting++;
   80e6e:	4a03      	ldr	r2, [pc, #12]	; (80e7c <vPortEnterCritical+0x14>)
   80e70:	6813      	ldr	r3, [r2, #0]
   80e72:	3301      	adds	r3, #1
   80e74:	6013      	str	r3, [r2, #0]
   80e76:	bd08      	pop	{r3, pc}
   80e78:	00080e59 	.word	0x00080e59
   80e7c:	2007012c 	.word	0x2007012c

00080e80 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80e80:	f380 8811 	msr	BASEPRI, r0
   80e84:	4770      	bx	lr
	...

00080e88 <vPortExitCritical>:
{
   80e88:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80e8a:	4a05      	ldr	r2, [pc, #20]	; (80ea0 <vPortExitCritical+0x18>)
   80e8c:	6813      	ldr	r3, [r2, #0]
   80e8e:	3b01      	subs	r3, #1
   80e90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80e92:	b103      	cbz	r3, 80e96 <vPortExitCritical+0xe>
   80e94:	bd08      	pop	{r3, pc}
		portENABLE_INTERRUPTS();
   80e96:	2000      	movs	r0, #0
   80e98:	4b02      	ldr	r3, [pc, #8]	; (80ea4 <vPortExitCritical+0x1c>)
   80e9a:	4798      	blx	r3
}
   80e9c:	e7fa      	b.n	80e94 <vPortExitCritical+0xc>
   80e9e:	bf00      	nop
   80ea0:	2007012c 	.word	0x2007012c
   80ea4:	00080e81 	.word	0x00080e81

00080ea8 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80ea8:	f3ef 8009 	mrs	r0, PSP
   80eac:	4b0c      	ldr	r3, [pc, #48]	; (80ee0 <pxCurrentTCBConst>)
   80eae:	681a      	ldr	r2, [r3, #0]
   80eb0:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80eb4:	6010      	str	r0, [r2, #0]
   80eb6:	e92d 4008 	stmdb	sp!, {r3, lr}
   80eba:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80ebe:	f380 8811 	msr	BASEPRI, r0
   80ec2:	f000 fe91 	bl	81be8 <vTaskSwitchContext>
   80ec6:	f04f 0000 	mov.w	r0, #0
   80eca:	f380 8811 	msr	BASEPRI, r0
   80ece:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80ed2:	6819      	ldr	r1, [r3, #0]
   80ed4:	6808      	ldr	r0, [r1, #0]
   80ed6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80eda:	f380 8809 	msr	PSP, r0
   80ede:	4770      	bx	lr

00080ee0 <pxCurrentTCBConst>:
   80ee0:	2007ab20 	.word	0x2007ab20

00080ee4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80ee4:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80ee6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80eea:	4b05      	ldr	r3, [pc, #20]	; (80f00 <SysTick_Handler+0x1c>)
   80eec:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80eee:	4b05      	ldr	r3, [pc, #20]	; (80f04 <SysTick_Handler+0x20>)
   80ef0:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80ef2:	4b05      	ldr	r3, [pc, #20]	; (80f08 <SysTick_Handler+0x24>)
   80ef4:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80ef6:	2000      	movs	r0, #0
   80ef8:	4b04      	ldr	r3, [pc, #16]	; (80f0c <SysTick_Handler+0x28>)
   80efa:	4798      	blx	r3
   80efc:	bd08      	pop	{r3, pc}
   80efe:	bf00      	nop
   80f00:	e000ed04 	.word	0xe000ed04
   80f04:	00080e59 	.word	0x00080e59
   80f08:	00081939 	.word	0x00081939
   80f0c:	00080e81 	.word	0x00080e81

00080f10 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80f10:	4a03      	ldr	r2, [pc, #12]	; (80f20 <vPortSetupTimerInterrupt+0x10>)
   80f12:	4b04      	ldr	r3, [pc, #16]	; (80f24 <vPortSetupTimerInterrupt+0x14>)
   80f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80f16:	2207      	movs	r2, #7
   80f18:	3b04      	subs	r3, #4
   80f1a:	601a      	str	r2, [r3, #0]
   80f1c:	4770      	bx	lr
   80f1e:	bf00      	nop
   80f20:	0001481f 	.word	0x0001481f
   80f24:	e000e014 	.word	0xe000e014

00080f28 <xPortStartScheduler>:
{
   80f28:	b510      	push	{r4, lr}
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80f2a:	4b09      	ldr	r3, [pc, #36]	; (80f50 <xPortStartScheduler+0x28>)
   80f2c:	681a      	ldr	r2, [r3, #0]
   80f2e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80f32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80f34:	681a      	ldr	r2, [r3, #0]
   80f36:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80f3a:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
   80f3c:	4b05      	ldr	r3, [pc, #20]	; (80f54 <xPortStartScheduler+0x2c>)
   80f3e:	4798      	blx	r3
	uxCriticalNesting = 0;
   80f40:	2400      	movs	r4, #0
   80f42:	4b05      	ldr	r3, [pc, #20]	; (80f58 <xPortStartScheduler+0x30>)
   80f44:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
   80f46:	4b05      	ldr	r3, [pc, #20]	; (80f5c <xPortStartScheduler+0x34>)
   80f48:	4798      	blx	r3
}
   80f4a:	4620      	mov	r0, r4
   80f4c:	bd10      	pop	{r4, pc}
   80f4e:	bf00      	nop
   80f50:	e000ed20 	.word	0xe000ed20
   80f54:	00080f11 	.word	0x00080f11
   80f58:	2007012c 	.word	0x2007012c
   80f5c:	00080df9 	.word	0x00080df9

00080f60 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80f60:	b410      	push	{r4}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80f62:	4a13      	ldr	r2, [pc, #76]	; (80fb0 <prvInsertBlockIntoFreeList+0x50>)
   80f64:	e000      	b.n	80f68 <prvInsertBlockIntoFreeList+0x8>
   80f66:	461a      	mov	r2, r3
   80f68:	6813      	ldr	r3, [r2, #0]
   80f6a:	4283      	cmp	r3, r0
   80f6c:	d3fb      	bcc.n	80f66 <prvInsertBlockIntoFreeList+0x6>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80f6e:	6851      	ldr	r1, [r2, #4]
   80f70:	1854      	adds	r4, r2, r1
   80f72:	42a0      	cmp	r0, r4
   80f74:	d009      	beq.n	80f8a <prvInsertBlockIntoFreeList+0x2a>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80f76:	6841      	ldr	r1, [r0, #4]
   80f78:	1844      	adds	r4, r0, r1
   80f7a:	42a3      	cmp	r3, r4
   80f7c:	d00a      	beq.n	80f94 <prvInsertBlockIntoFreeList+0x34>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80f7e:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80f80:	4290      	cmp	r0, r2
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80f82:	bf18      	it	ne
   80f84:	6010      	strne	r0, [r2, #0]
	}
}
   80f86:	bc10      	pop	{r4}
   80f88:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80f8a:	6840      	ldr	r0, [r0, #4]
   80f8c:	4401      	add	r1, r0
   80f8e:	6051      	str	r1, [r2, #4]
   80f90:	4610      	mov	r0, r2
   80f92:	e7f0      	b.n	80f76 <prvInsertBlockIntoFreeList+0x16>
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80f94:	4c07      	ldr	r4, [pc, #28]	; (80fb4 <prvInsertBlockIntoFreeList+0x54>)
   80f96:	6824      	ldr	r4, [r4, #0]
   80f98:	42a3      	cmp	r3, r4
   80f9a:	d006      	beq.n	80faa <prvInsertBlockIntoFreeList+0x4a>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80f9c:	685b      	ldr	r3, [r3, #4]
   80f9e:	4419      	add	r1, r3
   80fa0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80fa2:	6813      	ldr	r3, [r2, #0]
   80fa4:	681b      	ldr	r3, [r3, #0]
   80fa6:	6003      	str	r3, [r0, #0]
   80fa8:	e7ea      	b.n	80f80 <prvInsertBlockIntoFreeList+0x20>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80faa:	6003      	str	r3, [r0, #0]
   80fac:	e7e8      	b.n	80f80 <prvInsertBlockIntoFreeList+0x20>
   80fae:	bf00      	nop
   80fb0:	2007ab18 	.word	0x2007ab18
   80fb4:	20070b14 	.word	0x20070b14

00080fb8 <pvPortMalloc>:
{
   80fb8:	b538      	push	{r3, r4, r5, lr}
   80fba:	4604      	mov	r4, r0
	vTaskSuspendAll();
   80fbc:	4b2a      	ldr	r3, [pc, #168]	; (81068 <pvPortMalloc+0xb0>)
   80fbe:	4798      	blx	r3
		if( pxEnd == NULL )
   80fc0:	4b2a      	ldr	r3, [pc, #168]	; (8106c <pvPortMalloc+0xb4>)
   80fc2:	681b      	ldr	r3, [r3, #0]
   80fc4:	b18b      	cbz	r3, 80fea <pvPortMalloc+0x32>
		if( xWantedSize > 0 )
   80fc6:	2c00      	cmp	r4, #0
   80fc8:	d047      	beq.n	8105a <pvPortMalloc+0xa2>
			xWantedSize += heapSTRUCT_SIZE;
   80fca:	f104 0210 	add.w	r2, r4, #16
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80fce:	f012 0f07 	tst.w	r2, #7
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80fd2:	bf1c      	itt	ne
   80fd4:	f022 0207 	bicne.w	r2, r2, #7
   80fd8:	3208      	addne	r2, #8
		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80fda:	1e51      	subs	r1, r2, #1
   80fdc:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80fe0:	4299      	cmp	r1, r3
   80fe2:	d83c      	bhi.n	8105e <pvPortMalloc+0xa6>
			pxBlock = xStart.pxNextFreeBlock;
   80fe4:	4922      	ldr	r1, [pc, #136]	; (81070 <pvPortMalloc+0xb8>)
   80fe6:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80fe8:	e016      	b.n	81018 <pvPortMalloc+0x60>
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80fea:	4a21      	ldr	r2, [pc, #132]	; (81070 <pvPortMalloc+0xb8>)
   80fec:	4b21      	ldr	r3, [pc, #132]	; (81074 <pvPortMalloc+0xbc>)
   80fee:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80ff0:	2100      	movs	r1, #0
   80ff2:	6051      	str	r1, [r2, #4]
	pxEnd = ( void * ) pucHeapEnd;
   80ff4:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80ff8:	1898      	adds	r0, r3, r2
   80ffa:	4d1c      	ldr	r5, [pc, #112]	; (8106c <pvPortMalloc+0xb4>)
   80ffc:	6028      	str	r0, [r5, #0]
	pxEnd->xBlockSize = 0;
   80ffe:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   81002:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81004:	5099      	str	r1, [r3, r2]
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81006:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81008:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8100a:	4a1b      	ldr	r2, [pc, #108]	; (81078 <pvPortMalloc+0xc0>)
   8100c:	6813      	ldr	r3, [r2, #0]
   8100e:	3b10      	subs	r3, #16
   81010:	6013      	str	r3, [r2, #0]
   81012:	e7d8      	b.n	80fc6 <pvPortMalloc+0xe>
   81014:	4621      	mov	r1, r4
				pxBlock = pxBlock->pxNextFreeBlock;
   81016:	461c      	mov	r4, r3
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   81018:	6863      	ldr	r3, [r4, #4]
   8101a:	429a      	cmp	r2, r3
   8101c:	d902      	bls.n	81024 <pvPortMalloc+0x6c>
   8101e:	6823      	ldr	r3, [r4, #0]
   81020:	2b00      	cmp	r3, #0
   81022:	d1f7      	bne.n	81014 <pvPortMalloc+0x5c>
			if( pxBlock != pxEnd )
   81024:	4b11      	ldr	r3, [pc, #68]	; (8106c <pvPortMalloc+0xb4>)
   81026:	681b      	ldr	r3, [r3, #0]
   81028:	429c      	cmp	r4, r3
   8102a:	d01a      	beq.n	81062 <pvPortMalloc+0xaa>
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   8102c:	680d      	ldr	r5, [r1, #0]
   8102e:	3510      	adds	r5, #16
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   81030:	6823      	ldr	r3, [r4, #0]
   81032:	600b      	str	r3, [r1, #0]
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   81034:	6863      	ldr	r3, [r4, #4]
   81036:	1a9b      	subs	r3, r3, r2
   81038:	2b20      	cmp	r3, #32
   8103a:	d808      	bhi.n	8104e <pvPortMalloc+0x96>
				xFreeBytesRemaining -= pxBlock->xBlockSize;
   8103c:	4a0e      	ldr	r2, [pc, #56]	; (81078 <pvPortMalloc+0xc0>)
   8103e:	6813      	ldr	r3, [r2, #0]
   81040:	6861      	ldr	r1, [r4, #4]
   81042:	1a5b      	subs	r3, r3, r1
   81044:	6013      	str	r3, [r2, #0]
	xTaskResumeAll();
   81046:	4b0d      	ldr	r3, [pc, #52]	; (8107c <pvPortMalloc+0xc4>)
   81048:	4798      	blx	r3
}
   8104a:	4628      	mov	r0, r5
   8104c:	bd38      	pop	{r3, r4, r5, pc}
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   8104e:	18a0      	adds	r0, r4, r2
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   81050:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   81052:	6062      	str	r2, [r4, #4]
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   81054:	4b0a      	ldr	r3, [pc, #40]	; (81080 <pvPortMalloc+0xc8>)
   81056:	4798      	blx	r3
   81058:	e7f0      	b.n	8103c <pvPortMalloc+0x84>
void *pvReturn = NULL;
   8105a:	2500      	movs	r5, #0
   8105c:	e7f3      	b.n	81046 <pvPortMalloc+0x8e>
   8105e:	2500      	movs	r5, #0
   81060:	e7f1      	b.n	81046 <pvPortMalloc+0x8e>
   81062:	2500      	movs	r5, #0
   81064:	e7ef      	b.n	81046 <pvPortMalloc+0x8e>
   81066:	bf00      	nop
   81068:	000818e9 	.word	0x000818e9
   8106c:	20070b14 	.word	0x20070b14
   81070:	2007ab18 	.word	0x2007ab18
   81074:	20070b18 	.word	0x20070b18
   81078:	20070130 	.word	0x20070130
   8107c:	00081a61 	.word	0x00081a61
   81080:	00080f61 	.word	0x00080f61

00081084 <vPortFree>:
	if( pv != NULL )
   81084:	b180      	cbz	r0, 810a8 <vPortFree+0x24>
{
   81086:	b510      	push	{r4, lr}
   81088:	4604      	mov	r4, r0
		vTaskSuspendAll();
   8108a:	4b08      	ldr	r3, [pc, #32]	; (810ac <vPortFree+0x28>)
   8108c:	4798      	blx	r3
			xFreeBytesRemaining += pxLink->xBlockSize;
   8108e:	4a08      	ldr	r2, [pc, #32]	; (810b0 <vPortFree+0x2c>)
   81090:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   81094:	6811      	ldr	r1, [r2, #0]
   81096:	440b      	add	r3, r1
   81098:	6013      	str	r3, [r2, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   8109a:	f1a4 0010 	sub.w	r0, r4, #16
   8109e:	4b05      	ldr	r3, [pc, #20]	; (810b4 <vPortFree+0x30>)
   810a0:	4798      	blx	r3
		xTaskResumeAll();
   810a2:	4b05      	ldr	r3, [pc, #20]	; (810b8 <vPortFree+0x34>)
   810a4:	4798      	blx	r3
   810a6:	bd10      	pop	{r4, pc}
   810a8:	4770      	bx	lr
   810aa:	bf00      	nop
   810ac:	000818e9 	.word	0x000818e9
   810b0:	20070130 	.word	0x20070130
   810b4:	00080f61 	.word	0x00080f61
   810b8:	00081a61 	.word	0x00081a61

000810bc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   810bc:	b510      	push	{r4, lr}
   810be:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   810c0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   810c2:	b95b      	cbnz	r3, 810dc <prvCopyDataToQueue+0x20>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   810c4:	6803      	ldr	r3, [r0, #0]
   810c6:	b11b      	cbz	r3, 810d0 <prvCopyDataToQueue+0x14>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
		}
	}

	++( pxQueue->uxMessagesWaiting );
   810c8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   810ca:	3301      	adds	r3, #1
   810cc:	63a3      	str	r3, [r4, #56]	; 0x38
   810ce:	bd10      	pop	{r4, pc}
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   810d0:	6840      	ldr	r0, [r0, #4]
   810d2:	4b12      	ldr	r3, [pc, #72]	; (8111c <prvCopyDataToQueue+0x60>)
   810d4:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   810d6:	2300      	movs	r3, #0
   810d8:	6063      	str	r3, [r4, #4]
   810da:	e7f5      	b.n	810c8 <prvCopyDataToQueue+0xc>
	else if( xPosition == queueSEND_TO_BACK )
   810dc:	b96a      	cbnz	r2, 810fa <prvCopyDataToQueue+0x3e>
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   810de:	461a      	mov	r2, r3
   810e0:	6880      	ldr	r0, [r0, #8]
   810e2:	4b0f      	ldr	r3, [pc, #60]	; (81120 <prvCopyDataToQueue+0x64>)
   810e4:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   810e6:	68a3      	ldr	r3, [r4, #8]
   810e8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   810ea:	4413      	add	r3, r2
   810ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   810ee:	6862      	ldr	r2, [r4, #4]
   810f0:	4293      	cmp	r3, r2
   810f2:	d3e9      	bcc.n	810c8 <prvCopyDataToQueue+0xc>
			pxQueue->pcWriteTo = pxQueue->pcHead;
   810f4:	6823      	ldr	r3, [r4, #0]
   810f6:	60a3      	str	r3, [r4, #8]
   810f8:	e7e6      	b.n	810c8 <prvCopyDataToQueue+0xc>
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   810fa:	461a      	mov	r2, r3
   810fc:	68c0      	ldr	r0, [r0, #12]
   810fe:	4b08      	ldr	r3, [pc, #32]	; (81120 <prvCopyDataToQueue+0x64>)
   81100:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81102:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81104:	4252      	negs	r2, r2
   81106:	68e3      	ldr	r3, [r4, #12]
   81108:	4413      	add	r3, r2
   8110a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   8110c:	6821      	ldr	r1, [r4, #0]
   8110e:	428b      	cmp	r3, r1
   81110:	d2da      	bcs.n	810c8 <prvCopyDataToQueue+0xc>
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81112:	6863      	ldr	r3, [r4, #4]
   81114:	441a      	add	r2, r3
   81116:	60e2      	str	r2, [r4, #12]
   81118:	e7d6      	b.n	810c8 <prvCopyDataToQueue+0xc>
   8111a:	bf00      	nop
   8111c:	00081f15 	.word	0x00081f15
   81120:	00082ae1 	.word	0x00082ae1

00081124 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81124:	b538      	push	{r3, r4, r5, lr}
   81126:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81128:	6800      	ldr	r0, [r0, #0]
   8112a:	b158      	cbz	r0, 81144 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   8112c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   8112e:	68dc      	ldr	r4, [r3, #12]
   81130:	4414      	add	r4, r2
   81132:	60dc      	str	r4, [r3, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81134:	685d      	ldr	r5, [r3, #4]
   81136:	42ac      	cmp	r4, r5
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81138:	bf28      	it	cs
   8113a:	60d8      	strcs	r0, [r3, #12]
   8113c:	4608      	mov	r0, r1
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   8113e:	68d9      	ldr	r1, [r3, #12]
   81140:	4b01      	ldr	r3, [pc, #4]	; (81148 <prvCopyDataFromQueue+0x24>)
   81142:	4798      	blx	r3
   81144:	bd38      	pop	{r3, r4, r5, pc}
   81146:	bf00      	nop
   81148:	00082ae1 	.word	0x00082ae1

0008114c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   8114c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8114e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81150:	4b1f      	ldr	r3, [pc, #124]	; (811d0 <prvUnlockQueue+0x84>)
   81152:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81154:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81156:	2b00      	cmp	r3, #0
   81158:	dd14      	ble.n	81184 <prvUnlockQueue+0x38>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   8115a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8115c:	b193      	cbz	r3, 81184 <prvUnlockQueue+0x38>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8115e:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81162:	4d1c      	ldr	r5, [pc, #112]	; (811d4 <prvUnlockQueue+0x88>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81164:	4f1c      	ldr	r7, [pc, #112]	; (811d8 <prvUnlockQueue+0x8c>)
   81166:	e007      	b.n	81178 <prvUnlockQueue+0x2c>
				}

				--( pxQueue->xTxLock );
   81168:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8116a:	3b01      	subs	r3, #1
   8116c:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   8116e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81170:	2b00      	cmp	r3, #0
   81172:	dd07      	ble.n	81184 <prvUnlockQueue+0x38>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81174:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81176:	b12b      	cbz	r3, 81184 <prvUnlockQueue+0x38>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81178:	4630      	mov	r0, r6
   8117a:	47a8      	blx	r5
   8117c:	2800      	cmp	r0, #0
   8117e:	d0f3      	beq.n	81168 <prvUnlockQueue+0x1c>
					vTaskMissedYield();
   81180:	47b8      	blx	r7
   81182:	e7f1      	b.n	81168 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81184:	f04f 33ff 	mov.w	r3, #4294967295
   81188:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   8118a:	4b14      	ldr	r3, [pc, #80]	; (811dc <prvUnlockQueue+0x90>)
   8118c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   8118e:	4b10      	ldr	r3, [pc, #64]	; (811d0 <prvUnlockQueue+0x84>)
   81190:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81192:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81194:	2b00      	cmp	r3, #0
   81196:	dd14      	ble.n	811c2 <prvUnlockQueue+0x76>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81198:	6923      	ldr	r3, [r4, #16]
   8119a:	b193      	cbz	r3, 811c2 <prvUnlockQueue+0x76>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   8119c:	f104 0610 	add.w	r6, r4, #16
   811a0:	4d0c      	ldr	r5, [pc, #48]	; (811d4 <prvUnlockQueue+0x88>)
				{
					vTaskMissedYield();
   811a2:	4f0d      	ldr	r7, [pc, #52]	; (811d8 <prvUnlockQueue+0x8c>)
   811a4:	e007      	b.n	811b6 <prvUnlockQueue+0x6a>
				}

				--( pxQueue->xRxLock );
   811a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
   811a8:	3b01      	subs	r3, #1
   811aa:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   811ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
   811ae:	2b00      	cmp	r3, #0
   811b0:	dd07      	ble.n	811c2 <prvUnlockQueue+0x76>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   811b2:	6923      	ldr	r3, [r4, #16]
   811b4:	b12b      	cbz	r3, 811c2 <prvUnlockQueue+0x76>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   811b6:	4630      	mov	r0, r6
   811b8:	47a8      	blx	r5
   811ba:	2800      	cmp	r0, #0
   811bc:	d0f3      	beq.n	811a6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
   811be:	47b8      	blx	r7
   811c0:	e7f1      	b.n	811a6 <prvUnlockQueue+0x5a>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   811c2:	f04f 33ff 	mov.w	r3, #4294967295
   811c6:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   811c8:	4b04      	ldr	r3, [pc, #16]	; (811dc <prvUnlockQueue+0x90>)
   811ca:	4798      	blx	r3
   811cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811ce:	bf00      	nop
   811d0:	00080e69 	.word	0x00080e69
   811d4:	00081d2d 	.word	0x00081d2d
   811d8:	00081e5d 	.word	0x00081e5d
   811dc:	00080e89 	.word	0x00080e89

000811e0 <xQueueGenericReset>:
{
   811e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
   811e2:	b308      	cbz	r0, 81228 <xQueueGenericReset+0x48>
   811e4:	460d      	mov	r5, r1
   811e6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
   811e8:	4b17      	ldr	r3, [pc, #92]	; (81248 <xQueueGenericReset+0x68>)
   811ea:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   811ec:	6822      	ldr	r2, [r4, #0]
   811ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
   811f0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   811f2:	fb03 f301 	mul.w	r3, r3, r1
   811f6:	18d0      	adds	r0, r2, r3
   811f8:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   811fa:	2000      	movs	r0, #0
   811fc:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   811fe:	60a2      	str	r2, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81200:	1a5b      	subs	r3, r3, r1
   81202:	4413      	add	r3, r2
   81204:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81206:	f04f 33ff 	mov.w	r3, #4294967295
   8120a:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   8120c:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
   8120e:	b995      	cbnz	r5, 81236 <xQueueGenericReset+0x56>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81210:	6923      	ldr	r3, [r4, #16]
   81212:	b12b      	cbz	r3, 81220 <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81214:	f104 0010 	add.w	r0, r4, #16
   81218:	4b0c      	ldr	r3, [pc, #48]	; (8124c <xQueueGenericReset+0x6c>)
   8121a:	4798      	blx	r3
   8121c:	2801      	cmp	r0, #1
   8121e:	d007      	beq.n	81230 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
   81220:	4b0b      	ldr	r3, [pc, #44]	; (81250 <xQueueGenericReset+0x70>)
   81222:	4798      	blx	r3
}
   81224:	2001      	movs	r0, #1
   81226:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxQueue );
   81228:	4b0a      	ldr	r3, [pc, #40]	; (81254 <xQueueGenericReset+0x74>)
   8122a:	4798      	blx	r3
   8122c:	bf00      	nop
   8122e:	e7fd      	b.n	8122c <xQueueGenericReset+0x4c>
					portYIELD_WITHIN_API();
   81230:	4b09      	ldr	r3, [pc, #36]	; (81258 <xQueueGenericReset+0x78>)
   81232:	4798      	blx	r3
   81234:	e7f4      	b.n	81220 <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81236:	f104 0010 	add.w	r0, r4, #16
   8123a:	4d08      	ldr	r5, [pc, #32]	; (8125c <xQueueGenericReset+0x7c>)
   8123c:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8123e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81242:	47a8      	blx	r5
   81244:	e7ec      	b.n	81220 <xQueueGenericReset+0x40>
   81246:	bf00      	nop
   81248:	00080e69 	.word	0x00080e69
   8124c:	00081d2d 	.word	0x00081d2d
   81250:	00080e89 	.word	0x00080e89
   81254:	00080e59 	.word	0x00080e59
   81258:	00080e49 	.word	0x00080e49
   8125c:	00080d61 	.word	0x00080d61

00081260 <xQueueGenericCreate>:
{
   81260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81262:	b1d8      	cbz	r0, 8129c <xQueueGenericCreate+0x3c>
   81264:	460d      	mov	r5, r1
   81266:	4617      	mov	r7, r2
   81268:	4606      	mov	r6, r0
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8126a:	2050      	movs	r0, #80	; 0x50
   8126c:	4b0d      	ldr	r3, [pc, #52]	; (812a4 <xQueueGenericCreate+0x44>)
   8126e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81270:	4604      	mov	r4, r0
   81272:	b198      	cbz	r0, 8129c <xQueueGenericCreate+0x3c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81274:	fb05 f006 	mul.w	r0, r5, r6
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81278:	3001      	adds	r0, #1
   8127a:	4b0a      	ldr	r3, [pc, #40]	; (812a4 <xQueueGenericCreate+0x44>)
   8127c:	4798      	blx	r3
   8127e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81280:	b148      	cbz	r0, 81296 <xQueueGenericCreate+0x36>
				pxNewQueue->uxLength = uxQueueLength;
   81282:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81284:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81286:	2101      	movs	r1, #1
   81288:	4620      	mov	r0, r4
   8128a:	4b07      	ldr	r3, [pc, #28]	; (812a8 <xQueueGenericCreate+0x48>)
   8128c:	4798      	blx	r3
					pxNewQueue->ucQueueType = ucQueueType;
   8128e:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
}
   81292:	4620      	mov	r0, r4
   81294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vPortFree( pxNewQueue );
   81296:	4620      	mov	r0, r4
   81298:	4b04      	ldr	r3, [pc, #16]	; (812ac <xQueueGenericCreate+0x4c>)
   8129a:	4798      	blx	r3
	configASSERT( xReturn );
   8129c:	4b04      	ldr	r3, [pc, #16]	; (812b0 <xQueueGenericCreate+0x50>)
   8129e:	4798      	blx	r3
   812a0:	bf00      	nop
   812a2:	e7fd      	b.n	812a0 <xQueueGenericCreate+0x40>
   812a4:	00080fb9 	.word	0x00080fb9
   812a8:	000811e1 	.word	0x000811e1
   812ac:	00081085 	.word	0x00081085
   812b0:	00080e59 	.word	0x00080e59

000812b4 <xQueueGenericSend>:
{
   812b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   812b8:	b085      	sub	sp, #20
   812ba:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   812bc:	b148      	cbz	r0, 812d2 <xQueueGenericSend+0x1e>
   812be:	4688      	mov	r8, r1
   812c0:	4699      	mov	r9, r3
   812c2:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812c4:	b149      	cbz	r1, 812da <xQueueGenericSend+0x26>
   812c6:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   812c8:	4e38      	ldr	r6, [pc, #224]	; (813ac <xQueueGenericSend+0xf8>)
					vTaskSetTimeOutState( &xTimeOut );
   812ca:	f8df a10c 	ldr.w	sl, [pc, #268]	; 813d8 <xQueueGenericSend+0x124>
		taskEXIT_CRITICAL();
   812ce:	4d38      	ldr	r5, [pc, #224]	; (813b0 <xQueueGenericSend+0xfc>)
   812d0:	e02e      	b.n	81330 <xQueueGenericSend+0x7c>
	configASSERT( pxQueue );
   812d2:	4b38      	ldr	r3, [pc, #224]	; (813b4 <xQueueGenericSend+0x100>)
   812d4:	4798      	blx	r3
   812d6:	bf00      	nop
   812d8:	e7fd      	b.n	812d6 <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812da:	6c03      	ldr	r3, [r0, #64]	; 0x40
   812dc:	b11b      	cbz	r3, 812e6 <xQueueGenericSend+0x32>
   812de:	4b35      	ldr	r3, [pc, #212]	; (813b4 <xQueueGenericSend+0x100>)
   812e0:	4798      	blx	r3
   812e2:	bf00      	nop
   812e4:	e7fd      	b.n	812e2 <xQueueGenericSend+0x2e>
   812e6:	2700      	movs	r7, #0
   812e8:	e7ee      	b.n	812c8 <xQueueGenericSend+0x14>
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   812ea:	464a      	mov	r2, r9
   812ec:	4641      	mov	r1, r8
   812ee:	4620      	mov	r0, r4
   812f0:	4b31      	ldr	r3, [pc, #196]	; (813b8 <xQueueGenericSend+0x104>)
   812f2:	4798      	blx	r3
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   812f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   812f6:	b92b      	cbnz	r3, 81304 <xQueueGenericSend+0x50>
				taskEXIT_CRITICAL();
   812f8:	4b2d      	ldr	r3, [pc, #180]	; (813b0 <xQueueGenericSend+0xfc>)
   812fa:	4798      	blx	r3
				return pdPASS;
   812fc:	2001      	movs	r0, #1
}
   812fe:	b005      	add	sp, #20
   81300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81304:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81308:	4b2c      	ldr	r3, [pc, #176]	; (813bc <xQueueGenericSend+0x108>)
   8130a:	4798      	blx	r3
   8130c:	2801      	cmp	r0, #1
   8130e:	d1f3      	bne.n	812f8 <xQueueGenericSend+0x44>
						portYIELD_WITHIN_API();
   81310:	4b2b      	ldr	r3, [pc, #172]	; (813c0 <xQueueGenericSend+0x10c>)
   81312:	4798      	blx	r3
   81314:	e7f0      	b.n	812f8 <xQueueGenericSend+0x44>
					taskEXIT_CRITICAL();
   81316:	4b26      	ldr	r3, [pc, #152]	; (813b0 <xQueueGenericSend+0xfc>)
   81318:	4798      	blx	r3
					return errQUEUE_FULL;
   8131a:	2000      	movs	r0, #0
   8131c:	e7ef      	b.n	812fe <xQueueGenericSend+0x4a>
					vTaskSetTimeOutState( &xTimeOut );
   8131e:	a802      	add	r0, sp, #8
   81320:	47d0      	blx	sl
   81322:	e00f      	b.n	81344 <xQueueGenericSend+0x90>
				prvUnlockQueue( pxQueue );
   81324:	4620      	mov	r0, r4
   81326:	4b27      	ldr	r3, [pc, #156]	; (813c4 <xQueueGenericSend+0x110>)
   81328:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8132a:	4b27      	ldr	r3, [pc, #156]	; (813c8 <xQueueGenericSend+0x114>)
   8132c:	4798      	blx	r3
   8132e:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   81330:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81332:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81334:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81336:	429a      	cmp	r2, r3
   81338:	d3d7      	bcc.n	812ea <xQueueGenericSend+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   8133a:	9b01      	ldr	r3, [sp, #4]
   8133c:	2b00      	cmp	r3, #0
   8133e:	d0ea      	beq.n	81316 <xQueueGenericSend+0x62>
				else if( xEntryTimeSet == pdFALSE )
   81340:	2f00      	cmp	r7, #0
   81342:	d0ec      	beq.n	8131e <xQueueGenericSend+0x6a>
		taskEXIT_CRITICAL();
   81344:	47a8      	blx	r5
		vTaskSuspendAll();
   81346:	4b21      	ldr	r3, [pc, #132]	; (813cc <xQueueGenericSend+0x118>)
   81348:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8134a:	47b0      	blx	r6
   8134c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8134e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81352:	bf04      	itt	eq
   81354:	2300      	moveq	r3, #0
   81356:	6463      	streq	r3, [r4, #68]	; 0x44
   81358:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8135a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8135e:	bf04      	itt	eq
   81360:	2300      	moveq	r3, #0
   81362:	64a3      	streq	r3, [r4, #72]	; 0x48
   81364:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81366:	a901      	add	r1, sp, #4
   81368:	a802      	add	r0, sp, #8
   8136a:	4b19      	ldr	r3, [pc, #100]	; (813d0 <xQueueGenericSend+0x11c>)
   8136c:	4798      	blx	r3
   8136e:	b9a8      	cbnz	r0, 8139c <xQueueGenericSend+0xe8>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81370:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81372:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
   81376:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81378:	47a8      	blx	r5
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   8137a:	45bb      	cmp	fp, r7
   8137c:	d1d2      	bne.n	81324 <xQueueGenericSend+0x70>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   8137e:	9901      	ldr	r1, [sp, #4]
   81380:	f104 0010 	add.w	r0, r4, #16
   81384:	4b13      	ldr	r3, [pc, #76]	; (813d4 <xQueueGenericSend+0x120>)
   81386:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81388:	4620      	mov	r0, r4
   8138a:	4b0e      	ldr	r3, [pc, #56]	; (813c4 <xQueueGenericSend+0x110>)
   8138c:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8138e:	4b0e      	ldr	r3, [pc, #56]	; (813c8 <xQueueGenericSend+0x114>)
   81390:	4798      	blx	r3
   81392:	2800      	cmp	r0, #0
   81394:	d1cb      	bne.n	8132e <xQueueGenericSend+0x7a>
					portYIELD_WITHIN_API();
   81396:	4b0a      	ldr	r3, [pc, #40]	; (813c0 <xQueueGenericSend+0x10c>)
   81398:	4798      	blx	r3
   8139a:	e7c8      	b.n	8132e <xQueueGenericSend+0x7a>
			prvUnlockQueue( pxQueue );
   8139c:	4620      	mov	r0, r4
   8139e:	4b09      	ldr	r3, [pc, #36]	; (813c4 <xQueueGenericSend+0x110>)
   813a0:	4798      	blx	r3
			( void ) xTaskResumeAll();
   813a2:	4b09      	ldr	r3, [pc, #36]	; (813c8 <xQueueGenericSend+0x114>)
   813a4:	4798      	blx	r3
			return errQUEUE_FULL;
   813a6:	2000      	movs	r0, #0
   813a8:	e7a9      	b.n	812fe <xQueueGenericSend+0x4a>
   813aa:	bf00      	nop
   813ac:	00080e69 	.word	0x00080e69
   813b0:	00080e89 	.word	0x00080e89
   813b4:	00080e59 	.word	0x00080e59
   813b8:	000810bd 	.word	0x000810bd
   813bc:	00081d2d 	.word	0x00081d2d
   813c0:	00080e49 	.word	0x00080e49
   813c4:	0008114d 	.word	0x0008114d
   813c8:	00081a61 	.word	0x00081a61
   813cc:	000818e9 	.word	0x000818e9
   813d0:	00081dd9 	.word	0x00081dd9
   813d4:	00081c89 	.word	0x00081c89
   813d8:	00081db1 	.word	0x00081db1

000813dc <xQueueGenericSendFromISR>:
{
   813dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( pxQueue );
   813e0:	b190      	cbz	r0, 81408 <xQueueGenericSendFromISR+0x2c>
   813e2:	460e      	mov	r6, r1
   813e4:	4615      	mov	r5, r2
   813e6:	4698      	mov	r8, r3
   813e8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   813ea:	b189      	cbz	r1, 81410 <xQueueGenericSendFromISR+0x34>
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   813ec:	4b1b      	ldr	r3, [pc, #108]	; (8145c <xQueueGenericSendFromISR+0x80>)
   813ee:	4798      	blx	r3
   813f0:	4607      	mov	r7, r0
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   813f2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   813f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   813f6:	429a      	cmp	r2, r3
   813f8:	d311      	bcc.n	8141e <xQueueGenericSendFromISR+0x42>
			xReturn = errQUEUE_FULL;
   813fa:	2400      	movs	r4, #0
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   813fc:	4638      	mov	r0, r7
   813fe:	4b18      	ldr	r3, [pc, #96]	; (81460 <xQueueGenericSendFromISR+0x84>)
   81400:	4798      	blx	r3
}
   81402:	4620      	mov	r0, r4
   81404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( pxQueue );
   81408:	4b14      	ldr	r3, [pc, #80]	; (8145c <xQueueGenericSendFromISR+0x80>)
   8140a:	4798      	blx	r3
   8140c:	bf00      	nop
   8140e:	e7fd      	b.n	8140c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81410:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81412:	2b00      	cmp	r3, #0
   81414:	d0ea      	beq.n	813ec <xQueueGenericSendFromISR+0x10>
   81416:	4b11      	ldr	r3, [pc, #68]	; (8145c <xQueueGenericSendFromISR+0x80>)
   81418:	4798      	blx	r3
   8141a:	bf00      	nop
   8141c:	e7fd      	b.n	8141a <xQueueGenericSendFromISR+0x3e>
			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   8141e:	4642      	mov	r2, r8
   81420:	4631      	mov	r1, r6
   81422:	4620      	mov	r0, r4
   81424:	4b0f      	ldr	r3, [pc, #60]	; (81464 <xQueueGenericSendFromISR+0x88>)
   81426:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
   81428:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8142a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8142e:	d10a      	bne.n	81446 <xQueueGenericSendFromISR+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81430:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81432:	b16b      	cbz	r3, 81450 <xQueueGenericSendFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81434:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81438:	4b0b      	ldr	r3, [pc, #44]	; (81468 <xQueueGenericSendFromISR+0x8c>)
   8143a:	4798      	blx	r3
   8143c:	b150      	cbz	r0, 81454 <xQueueGenericSendFromISR+0x78>
						if( pxHigherPriorityTaskWoken != NULL )
   8143e:	b15d      	cbz	r5, 81458 <xQueueGenericSendFromISR+0x7c>
							*pxHigherPriorityTaskWoken = pdTRUE;
   81440:	2401      	movs	r4, #1
   81442:	602c      	str	r4, [r5, #0]
   81444:	e7da      	b.n	813fc <xQueueGenericSendFromISR+0x20>
				++( pxQueue->xTxLock );
   81446:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81448:	3301      	adds	r3, #1
   8144a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
   8144c:	2401      	movs	r4, #1
   8144e:	e7d5      	b.n	813fc <xQueueGenericSendFromISR+0x20>
   81450:	2401      	movs	r4, #1
   81452:	e7d3      	b.n	813fc <xQueueGenericSendFromISR+0x20>
   81454:	2401      	movs	r4, #1
   81456:	e7d1      	b.n	813fc <xQueueGenericSendFromISR+0x20>
   81458:	2401      	movs	r4, #1
   8145a:	e7cf      	b.n	813fc <xQueueGenericSendFromISR+0x20>
   8145c:	00080e59 	.word	0x00080e59
   81460:	00080e81 	.word	0x00080e81
   81464:	000810bd 	.word	0x000810bd
   81468:	00081d2d 	.word	0x00081d2d

0008146c <xQueueGenericReceive>:
{
   8146c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81470:	b084      	sub	sp, #16
   81472:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
   81474:	b148      	cbz	r0, 8148a <xQueueGenericReceive+0x1e>
   81476:	4688      	mov	r8, r1
   81478:	4699      	mov	r9, r3
   8147a:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8147c:	b149      	cbz	r1, 81492 <xQueueGenericReceive+0x26>
   8147e:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
   81480:	4e46      	ldr	r6, [pc, #280]	; (8159c <xQueueGenericReceive+0x130>)
					vTaskSetTimeOutState( &xTimeOut );
   81482:	f8df a14c 	ldr.w	sl, [pc, #332]	; 815d0 <xQueueGenericReceive+0x164>
		taskEXIT_CRITICAL();
   81486:	4d46      	ldr	r5, [pc, #280]	; (815a0 <xQueueGenericReceive+0x134>)
   81488:	e04b      	b.n	81522 <xQueueGenericReceive+0xb6>
	configASSERT( pxQueue );
   8148a:	4b46      	ldr	r3, [pc, #280]	; (815a4 <xQueueGenericReceive+0x138>)
   8148c:	4798      	blx	r3
   8148e:	bf00      	nop
   81490:	e7fd      	b.n	8148e <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81492:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81494:	b11b      	cbz	r3, 8149e <xQueueGenericReceive+0x32>
   81496:	4b43      	ldr	r3, [pc, #268]	; (815a4 <xQueueGenericReceive+0x138>)
   81498:	4798      	blx	r3
   8149a:	bf00      	nop
   8149c:	e7fd      	b.n	8149a <xQueueGenericReceive+0x2e>
   8149e:	2700      	movs	r7, #0
   814a0:	e7ee      	b.n	81480 <xQueueGenericReceive+0x14>
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   814a2:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
   814a4:	4641      	mov	r1, r8
   814a6:	4620      	mov	r0, r4
   814a8:	4b3f      	ldr	r3, [pc, #252]	; (815a8 <xQueueGenericReceive+0x13c>)
   814aa:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
   814ac:	f1b9 0f00 	cmp.w	r9, #0
   814b0:	d117      	bne.n	814e2 <xQueueGenericReceive+0x76>
					--( pxQueue->uxMessagesWaiting );
   814b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   814b4:	3b01      	subs	r3, #1
   814b6:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   814b8:	6823      	ldr	r3, [r4, #0]
   814ba:	b913      	cbnz	r3, 814c2 <xQueueGenericReceive+0x56>
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   814bc:	4b3b      	ldr	r3, [pc, #236]	; (815ac <xQueueGenericReceive+0x140>)
   814be:	4798      	blx	r3
   814c0:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   814c2:	6923      	ldr	r3, [r4, #16]
   814c4:	b13b      	cbz	r3, 814d6 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   814c6:	f104 0010 	add.w	r0, r4, #16
   814ca:	4b39      	ldr	r3, [pc, #228]	; (815b0 <xQueueGenericReceive+0x144>)
   814cc:	4798      	blx	r3
   814ce:	2801      	cmp	r0, #1
   814d0:	d101      	bne.n	814d6 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   814d2:	4b38      	ldr	r3, [pc, #224]	; (815b4 <xQueueGenericReceive+0x148>)
   814d4:	4798      	blx	r3
				taskEXIT_CRITICAL();
   814d6:	4b32      	ldr	r3, [pc, #200]	; (815a0 <xQueueGenericReceive+0x134>)
   814d8:	4798      	blx	r3
				return pdPASS;
   814da:	2001      	movs	r0, #1
}
   814dc:	b004      	add	sp, #16
   814de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   814e2:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   814e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   814e6:	2b00      	cmp	r3, #0
   814e8:	d0f5      	beq.n	814d6 <xQueueGenericReceive+0x6a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   814ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   814ee:	4b30      	ldr	r3, [pc, #192]	; (815b0 <xQueueGenericReceive+0x144>)
   814f0:	4798      	blx	r3
   814f2:	2800      	cmp	r0, #0
   814f4:	d0ef      	beq.n	814d6 <xQueueGenericReceive+0x6a>
							portYIELD_WITHIN_API();
   814f6:	4b2f      	ldr	r3, [pc, #188]	; (815b4 <xQueueGenericReceive+0x148>)
   814f8:	4798      	blx	r3
   814fa:	e7ec      	b.n	814d6 <xQueueGenericReceive+0x6a>
					taskEXIT_CRITICAL();
   814fc:	4b28      	ldr	r3, [pc, #160]	; (815a0 <xQueueGenericReceive+0x134>)
   814fe:	4798      	blx	r3
					return errQUEUE_EMPTY;
   81500:	2000      	movs	r0, #0
   81502:	e7eb      	b.n	814dc <xQueueGenericReceive+0x70>
					vTaskSetTimeOutState( &xTimeOut );
   81504:	a802      	add	r0, sp, #8
   81506:	47d0      	blx	sl
   81508:	e014      	b.n	81534 <xQueueGenericReceive+0xc8>
						portENTER_CRITICAL();
   8150a:	47b0      	blx	r6
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   8150c:	6860      	ldr	r0, [r4, #4]
   8150e:	4b2a      	ldr	r3, [pc, #168]	; (815b8 <xQueueGenericReceive+0x14c>)
   81510:	4798      	blx	r3
						portEXIT_CRITICAL();
   81512:	47a8      	blx	r5
   81514:	e02c      	b.n	81570 <xQueueGenericReceive+0x104>
				prvUnlockQueue( pxQueue );
   81516:	4620      	mov	r0, r4
   81518:	4b28      	ldr	r3, [pc, #160]	; (815bc <xQueueGenericReceive+0x150>)
   8151a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8151c:	4b28      	ldr	r3, [pc, #160]	; (815c0 <xQueueGenericReceive+0x154>)
   8151e:	4798      	blx	r3
   81520:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
   81522:	47b0      	blx	r6
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81524:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81526:	2b00      	cmp	r3, #0
   81528:	d1bb      	bne.n	814a2 <xQueueGenericReceive+0x36>
				if( xTicksToWait == ( portTickType ) 0 )
   8152a:	9b01      	ldr	r3, [sp, #4]
   8152c:	2b00      	cmp	r3, #0
   8152e:	d0e5      	beq.n	814fc <xQueueGenericReceive+0x90>
				else if( xEntryTimeSet == pdFALSE )
   81530:	2f00      	cmp	r7, #0
   81532:	d0e7      	beq.n	81504 <xQueueGenericReceive+0x98>
		taskEXIT_CRITICAL();
   81534:	47a8      	blx	r5
		vTaskSuspendAll();
   81536:	4b23      	ldr	r3, [pc, #140]	; (815c4 <xQueueGenericReceive+0x158>)
   81538:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8153a:	47b0      	blx	r6
   8153c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8153e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81542:	bf04      	itt	eq
   81544:	2300      	moveq	r3, #0
   81546:	6463      	streq	r3, [r4, #68]	; 0x44
   81548:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8154a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8154e:	bf04      	itt	eq
   81550:	2300      	moveq	r3, #0
   81552:	64a3      	streq	r3, [r4, #72]	; 0x48
   81554:	47a8      	blx	r5
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81556:	a901      	add	r1, sp, #4
   81558:	a802      	add	r0, sp, #8
   8155a:	4b1b      	ldr	r3, [pc, #108]	; (815c8 <xQueueGenericReceive+0x15c>)
   8155c:	4798      	blx	r3
   8155e:	b9b0      	cbnz	r0, 8158e <xQueueGenericReceive+0x122>
	taskENTER_CRITICAL();
   81560:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81562:	6ba7      	ldr	r7, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81564:	47a8      	blx	r5
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81566:	2f00      	cmp	r7, #0
   81568:	d1d5      	bne.n	81516 <xQueueGenericReceive+0xaa>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8156a:	6823      	ldr	r3, [r4, #0]
   8156c:	2b00      	cmp	r3, #0
   8156e:	d0cc      	beq.n	8150a <xQueueGenericReceive+0x9e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81570:	9901      	ldr	r1, [sp, #4]
   81572:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81576:	4b15      	ldr	r3, [pc, #84]	; (815cc <xQueueGenericReceive+0x160>)
   81578:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   8157a:	4620      	mov	r0, r4
   8157c:	4b0f      	ldr	r3, [pc, #60]	; (815bc <xQueueGenericReceive+0x150>)
   8157e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81580:	4b0f      	ldr	r3, [pc, #60]	; (815c0 <xQueueGenericReceive+0x154>)
   81582:	4798      	blx	r3
   81584:	2800      	cmp	r0, #0
   81586:	d1cb      	bne.n	81520 <xQueueGenericReceive+0xb4>
					portYIELD_WITHIN_API();
   81588:	4b0a      	ldr	r3, [pc, #40]	; (815b4 <xQueueGenericReceive+0x148>)
   8158a:	4798      	blx	r3
   8158c:	e7c8      	b.n	81520 <xQueueGenericReceive+0xb4>
			prvUnlockQueue( pxQueue );
   8158e:	4620      	mov	r0, r4
   81590:	4b0a      	ldr	r3, [pc, #40]	; (815bc <xQueueGenericReceive+0x150>)
   81592:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81594:	4b0a      	ldr	r3, [pc, #40]	; (815c0 <xQueueGenericReceive+0x154>)
   81596:	4798      	blx	r3
			return errQUEUE_EMPTY;
   81598:	2000      	movs	r0, #0
   8159a:	e79f      	b.n	814dc <xQueueGenericReceive+0x70>
   8159c:	00080e69 	.word	0x00080e69
   815a0:	00080e89 	.word	0x00080e89
   815a4:	00080e59 	.word	0x00080e59
   815a8:	00081125 	.word	0x00081125
   815ac:	00081e69 	.word	0x00081e69
   815b0:	00081d2d 	.word	0x00081d2d
   815b4:	00080e49 	.word	0x00080e49
   815b8:	00081e95 	.word	0x00081e95
   815bc:	0008114d 	.word	0x0008114d
   815c0:	00081a61 	.word	0x00081a61
   815c4:	000818e9 	.word	0x000818e9
   815c8:	00081dd9 	.word	0x00081dd9
   815cc:	00081c89 	.word	0x00081c89
   815d0:	00081db1 	.word	0x00081db1

000815d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   815d4:	b538      	push	{r3, r4, r5, lr}
   815d6:	4604      	mov	r4, r0
   815d8:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   815da:	4b0e      	ldr	r3, [pc, #56]	; (81614 <vQueueWaitForMessageRestricted+0x40>)
   815dc:	4798      	blx	r3
   815de:	6c63      	ldr	r3, [r4, #68]	; 0x44
   815e0:	f1b3 3fff 	cmp.w	r3, #4294967295
   815e4:	bf04      	itt	eq
   815e6:	2300      	moveq	r3, #0
   815e8:	6463      	streq	r3, [r4, #68]	; 0x44
   815ea:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   815ec:	f1b3 3fff 	cmp.w	r3, #4294967295
   815f0:	bf04      	itt	eq
   815f2:	2300      	moveq	r3, #0
   815f4:	64a3      	streq	r3, [r4, #72]	; 0x48
   815f6:	4b08      	ldr	r3, [pc, #32]	; (81618 <vQueueWaitForMessageRestricted+0x44>)
   815f8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   815fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   815fc:	b11b      	cbz	r3, 81606 <vQueueWaitForMessageRestricted+0x32>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
		}
		prvUnlockQueue( pxQueue );
   815fe:	4620      	mov	r0, r4
   81600:	4b06      	ldr	r3, [pc, #24]	; (8161c <vQueueWaitForMessageRestricted+0x48>)
   81602:	4798      	blx	r3
   81604:	bd38      	pop	{r3, r4, r5, pc}
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81606:	4629      	mov	r1, r5
   81608:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8160c:	4b04      	ldr	r3, [pc, #16]	; (81620 <vQueueWaitForMessageRestricted+0x4c>)
   8160e:	4798      	blx	r3
   81610:	e7f5      	b.n	815fe <vQueueWaitForMessageRestricted+0x2a>
   81612:	bf00      	nop
   81614:	00080e69 	.word	0x00080e69
   81618:	00080e89 	.word	0x00080e89
   8161c:	0008114d 	.word	0x0008114d
   81620:	00081ce9 	.word	0x00081ce9

00081624 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   81624:	b510      	push	{r4, lr}
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81626:	4b0f      	ldr	r3, [pc, #60]	; (81664 <prvAddCurrentTaskToDelayedList+0x40>)
   81628:	681b      	ldr	r3, [r3, #0]
   8162a:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   8162c:	4b0e      	ldr	r3, [pc, #56]	; (81668 <prvAddCurrentTaskToDelayedList+0x44>)
   8162e:	681b      	ldr	r3, [r3, #0]
   81630:	4298      	cmp	r0, r3
   81632:	d30e      	bcc.n	81652 <prvAddCurrentTaskToDelayedList+0x2e>
   81634:	4604      	mov	r4, r0
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81636:	4b0d      	ldr	r3, [pc, #52]	; (8166c <prvAddCurrentTaskToDelayedList+0x48>)
   81638:	6818      	ldr	r0, [r3, #0]
   8163a:	4b0a      	ldr	r3, [pc, #40]	; (81664 <prvAddCurrentTaskToDelayedList+0x40>)
   8163c:	6819      	ldr	r1, [r3, #0]
   8163e:	3104      	adds	r1, #4
   81640:	4b0b      	ldr	r3, [pc, #44]	; (81670 <prvAddCurrentTaskToDelayedList+0x4c>)
   81642:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   81644:	4b0b      	ldr	r3, [pc, #44]	; (81674 <prvAddCurrentTaskToDelayedList+0x50>)
   81646:	681b      	ldr	r3, [r3, #0]
   81648:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   8164a:	bf3c      	itt	cc
   8164c:	4b09      	ldrcc	r3, [pc, #36]	; (81674 <prvAddCurrentTaskToDelayedList+0x50>)
   8164e:	601c      	strcc	r4, [r3, #0]
   81650:	bd10      	pop	{r4, pc}
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81652:	4b09      	ldr	r3, [pc, #36]	; (81678 <prvAddCurrentTaskToDelayedList+0x54>)
   81654:	6818      	ldr	r0, [r3, #0]
   81656:	4b03      	ldr	r3, [pc, #12]	; (81664 <prvAddCurrentTaskToDelayedList+0x40>)
   81658:	6819      	ldr	r1, [r3, #0]
   8165a:	3104      	adds	r1, #4
   8165c:	4b04      	ldr	r3, [pc, #16]	; (81670 <prvAddCurrentTaskToDelayedList+0x4c>)
   8165e:	4798      	blx	r3
   81660:	bd10      	pop	{r4, pc}
   81662:	bf00      	nop
   81664:	2007ab20 	.word	0x2007ab20
   81668:	2007ac1c 	.word	0x2007ac1c
   8166c:	2007ab24 	.word	0x2007ab24
   81670:	00080d99 	.word	0x00080d99
   81674:	20070134 	.word	0x20070134
   81678:	2007ab28 	.word	0x2007ab28

0008167c <xTaskGenericCreate>:
{
   8167c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81680:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   81682:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   81686:	9e0c      	ldr	r6, [sp, #48]	; 0x30
	configASSERT( pxTaskCode );
   81688:	b148      	cbz	r0, 8169e <xTaskGenericCreate+0x22>
   8168a:	4688      	mov	r8, r1
   8168c:	4615      	mov	r5, r2
   8168e:	469b      	mov	fp, r3
   81690:	4682      	mov	sl, r0
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81692:	2f04      	cmp	r7, #4
   81694:	d907      	bls.n	816a6 <xTaskGenericCreate+0x2a>
   81696:	4b60      	ldr	r3, [pc, #384]	; (81818 <xTaskGenericCreate+0x19c>)
   81698:	4798      	blx	r3
   8169a:	bf00      	nop
   8169c:	e7fd      	b.n	8169a <xTaskGenericCreate+0x1e>
	configASSERT( pxTaskCode );
   8169e:	4b5e      	ldr	r3, [pc, #376]	; (81818 <xTaskGenericCreate+0x19c>)
   816a0:	4798      	blx	r3
   816a2:	bf00      	nop
   816a4:	e7fd      	b.n	816a2 <xTaskGenericCreate+0x26>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   816a6:	204c      	movs	r0, #76	; 0x4c
   816a8:	4b5c      	ldr	r3, [pc, #368]	; (8181c <xTaskGenericCreate+0x1a0>)
   816aa:	4798      	blx	r3

	if( pxNewTCB != NULL )
   816ac:	4604      	mov	r4, r0
   816ae:	2800      	cmp	r0, #0
   816b0:	d054      	beq.n	8175c <xTaskGenericCreate+0xe0>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   816b2:	2e00      	cmp	r6, #0
   816b4:	d048      	beq.n	81748 <xTaskGenericCreate+0xcc>
   816b6:	6306      	str	r6, [r0, #48]	; 0x30
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   816b8:	00aa      	lsls	r2, r5, #2
   816ba:	21a5      	movs	r1, #165	; 0xa5
   816bc:	4630      	mov	r0, r6
   816be:	4b58      	ldr	r3, [pc, #352]	; (81820 <xTaskGenericCreate+0x1a4>)
   816c0:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   816c2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
   816c6:	3d01      	subs	r5, #1
   816c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   816ca:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   816ce:	f023 0507 	bic.w	r5, r3, #7
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   816d2:	220a      	movs	r2, #10
   816d4:	4641      	mov	r1, r8
   816d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
   816da:	4b52      	ldr	r3, [pc, #328]	; (81824 <xTaskGenericCreate+0x1a8>)
   816dc:	4798      	blx	r3
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   816de:	2300      	movs	r3, #0
   816e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
   816e4:	62e7      	str	r7, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
   816e6:	64a7      	str	r7, [r4, #72]	; 0x48
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   816e8:	f104 0804 	add.w	r8, r4, #4
   816ec:	4640      	mov	r0, r8
   816ee:	4e4e      	ldr	r6, [pc, #312]	; (81828 <xTaskGenericCreate+0x1ac>)
   816f0:	47b0      	blx	r6
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   816f2:	f104 0018 	add.w	r0, r4, #24
   816f6:	47b0      	blx	r6
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   816f8:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   816fa:	f1c7 0305 	rsb	r3, r7, #5
   816fe:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81700:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81702:	465a      	mov	r2, fp
   81704:	4651      	mov	r1, sl
   81706:	4628      	mov	r0, r5
   81708:	4b48      	ldr	r3, [pc, #288]	; (8182c <xTaskGenericCreate+0x1b0>)
   8170a:	4798      	blx	r3
   8170c:	6020      	str	r0, [r4, #0]
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   8170e:	f010 0f07 	tst.w	r0, #7
   81712:	d127      	bne.n	81764 <xTaskGenericCreate+0xe8>
		if( ( void * ) pxCreatedTask != NULL )
   81714:	f1b9 0f00 	cmp.w	r9, #0
   81718:	d001      	beq.n	8171e <xTaskGenericCreate+0xa2>
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   8171a:	f8c9 4000 	str.w	r4, [r9]
		taskENTER_CRITICAL();
   8171e:	4b44      	ldr	r3, [pc, #272]	; (81830 <xTaskGenericCreate+0x1b4>)
   81720:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
   81722:	4a44      	ldr	r2, [pc, #272]	; (81834 <xTaskGenericCreate+0x1b8>)
   81724:	6813      	ldr	r3, [r2, #0]
   81726:	3301      	adds	r3, #1
   81728:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
   8172a:	4b43      	ldr	r3, [pc, #268]	; (81838 <xTaskGenericCreate+0x1bc>)
   8172c:	681b      	ldr	r3, [r3, #0]
   8172e:	b1eb      	cbz	r3, 8176c <xTaskGenericCreate+0xf0>
				if( xSchedulerRunning == pdFALSE )
   81730:	4b42      	ldr	r3, [pc, #264]	; (8183c <xTaskGenericCreate+0x1c0>)
   81732:	681b      	ldr	r3, [r3, #0]
   81734:	2b00      	cmp	r3, #0
   81736:	d140      	bne.n	817ba <xTaskGenericCreate+0x13e>
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81738:	4b3f      	ldr	r3, [pc, #252]	; (81838 <xTaskGenericCreate+0x1bc>)
   8173a:	681b      	ldr	r3, [r3, #0]
   8173c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8173e:	429f      	cmp	r7, r3
						pxCurrentTCB = pxNewTCB;
   81740:	bf24      	itt	cs
   81742:	4b3d      	ldrcs	r3, [pc, #244]	; (81838 <xTaskGenericCreate+0x1bc>)
   81744:	601c      	strcs	r4, [r3, #0]
   81746:	e038      	b.n	817ba <xTaskGenericCreate+0x13e>
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   81748:	00a8      	lsls	r0, r5, #2
   8174a:	4b34      	ldr	r3, [pc, #208]	; (8181c <xTaskGenericCreate+0x1a0>)
   8174c:	4798      	blx	r3
   8174e:	4606      	mov	r6, r0
   81750:	6320      	str	r0, [r4, #48]	; 0x30
		if( pxNewTCB->pxStack == NULL )
   81752:	2800      	cmp	r0, #0
   81754:	d1b0      	bne.n	816b8 <xTaskGenericCreate+0x3c>
			vPortFree( pxNewTCB );
   81756:	4620      	mov	r0, r4
   81758:	4b39      	ldr	r3, [pc, #228]	; (81840 <xTaskGenericCreate+0x1c4>)
   8175a:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   8175c:	f04f 30ff 	mov.w	r0, #4294967295
}
   81760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81764:	4b2c      	ldr	r3, [pc, #176]	; (81818 <xTaskGenericCreate+0x19c>)
   81766:	4798      	blx	r3
   81768:	bf00      	nop
   8176a:	e7fd      	b.n	81768 <xTaskGenericCreate+0xec>
				pxCurrentTCB =  pxNewTCB;
   8176c:	4b32      	ldr	r3, [pc, #200]	; (81838 <xTaskGenericCreate+0x1bc>)
   8176e:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   81770:	6813      	ldr	r3, [r2, #0]
   81772:	2b01      	cmp	r3, #1
   81774:	d121      	bne.n	817ba <xTaskGenericCreate+0x13e>
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81776:	4e33      	ldr	r6, [pc, #204]	; (81844 <xTaskGenericCreate+0x1c8>)
   81778:	4630      	mov	r0, r6
   8177a:	4d33      	ldr	r5, [pc, #204]	; (81848 <xTaskGenericCreate+0x1cc>)
   8177c:	47a8      	blx	r5
   8177e:	f106 0014 	add.w	r0, r6, #20
   81782:	47a8      	blx	r5
   81784:	f106 0028 	add.w	r0, r6, #40	; 0x28
   81788:	47a8      	blx	r5
   8178a:	f106 003c 	add.w	r0, r6, #60	; 0x3c
   8178e:	47a8      	blx	r5
   81790:	f106 0050 	add.w	r0, r6, #80	; 0x50
   81794:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81796:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8187c <xTaskGenericCreate+0x200>
   8179a:	4648      	mov	r0, r9
   8179c:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   8179e:	4e2b      	ldr	r6, [pc, #172]	; (8184c <xTaskGenericCreate+0x1d0>)
   817a0:	4630      	mov	r0, r6
   817a2:	47a8      	blx	r5
	vListInitialise( ( xList * ) &xPendingReadyList );
   817a4:	482a      	ldr	r0, [pc, #168]	; (81850 <xTaskGenericCreate+0x1d4>)
   817a6:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   817a8:	482a      	ldr	r0, [pc, #168]	; (81854 <xTaskGenericCreate+0x1d8>)
   817aa:	47a8      	blx	r5
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   817ac:	482a      	ldr	r0, [pc, #168]	; (81858 <xTaskGenericCreate+0x1dc>)
   817ae:	47a8      	blx	r5
	pxDelayedTaskList = &xDelayedTaskList1;
   817b0:	4b2a      	ldr	r3, [pc, #168]	; (8185c <xTaskGenericCreate+0x1e0>)
   817b2:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   817b6:	4b2a      	ldr	r3, [pc, #168]	; (81860 <xTaskGenericCreate+0x1e4>)
   817b8:	601e      	str	r6, [r3, #0]
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   817ba:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   817bc:	4b29      	ldr	r3, [pc, #164]	; (81864 <xTaskGenericCreate+0x1e8>)
   817be:	681b      	ldr	r3, [r3, #0]
   817c0:	4298      	cmp	r0, r3
				uxTopUsedPriority = pxNewTCB->uxPriority;
   817c2:	bf84      	itt	hi
   817c4:	4b27      	ldrhi	r3, [pc, #156]	; (81864 <xTaskGenericCreate+0x1e8>)
   817c6:	6018      	strhi	r0, [r3, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   817c8:	4a27      	ldr	r2, [pc, #156]	; (81868 <xTaskGenericCreate+0x1ec>)
   817ca:	6813      	ldr	r3, [r2, #0]
   817cc:	6423      	str	r3, [r4, #64]	; 0x40
			uxTaskNumber++;
   817ce:	3301      	adds	r3, #1
   817d0:	6013      	str	r3, [r2, #0]
			prvAddTaskToReadyQueue( pxNewTCB );
   817d2:	4b26      	ldr	r3, [pc, #152]	; (8186c <xTaskGenericCreate+0x1f0>)
   817d4:	681b      	ldr	r3, [r3, #0]
   817d6:	4298      	cmp	r0, r3
   817d8:	bf84      	itt	hi
   817da:	4b24      	ldrhi	r3, [pc, #144]	; (8186c <xTaskGenericCreate+0x1f0>)
   817dc:	6018      	strhi	r0, [r3, #0]
   817de:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   817e2:	4641      	mov	r1, r8
   817e4:	4b17      	ldr	r3, [pc, #92]	; (81844 <xTaskGenericCreate+0x1c8>)
   817e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   817ea:	4b21      	ldr	r3, [pc, #132]	; (81870 <xTaskGenericCreate+0x1f4>)
   817ec:	4798      	blx	r3
		taskEXIT_CRITICAL();
   817ee:	4b21      	ldr	r3, [pc, #132]	; (81874 <xTaskGenericCreate+0x1f8>)
   817f0:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
   817f2:	4b12      	ldr	r3, [pc, #72]	; (8183c <xTaskGenericCreate+0x1c0>)
   817f4:	681b      	ldr	r3, [r3, #0]
   817f6:	b14b      	cbz	r3, 8180c <xTaskGenericCreate+0x190>
			if( pxCurrentTCB->uxPriority < uxPriority )
   817f8:	4b0f      	ldr	r3, [pc, #60]	; (81838 <xTaskGenericCreate+0x1bc>)
   817fa:	681b      	ldr	r3, [r3, #0]
   817fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   817fe:	429f      	cmp	r7, r3
   81800:	d907      	bls.n	81812 <xTaskGenericCreate+0x196>
				portYIELD_WITHIN_API();
   81802:	4b1d      	ldr	r3, [pc, #116]	; (81878 <xTaskGenericCreate+0x1fc>)
   81804:	4798      	blx	r3
   81806:	2001      	movs	r0, #1
   81808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8180c:	2001      	movs	r0, #1
   8180e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81812:	2001      	movs	r0, #1
	return xReturn;
   81814:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81818:	00080e59 	.word	0x00080e59
   8181c:	00080fb9 	.word	0x00080fb9
   81820:	00082bcd 	.word	0x00082bcd
   81824:	00082e65 	.word	0x00082e65
   81828:	00080d77 	.word	0x00080d77
   8182c:	00080e0d 	.word	0x00080e0d
   81830:	00080e69 	.word	0x00080e69
   81834:	2007ab90 	.word	0x2007ab90
   81838:	2007ab20 	.word	0x2007ab20
   8183c:	2007abf0 	.word	0x2007abf0
   81840:	00081085 	.word	0x00081085
   81844:	2007ab2c 	.word	0x2007ab2c
   81848:	00080d61 	.word	0x00080d61
   8184c:	2007abc0 	.word	0x2007abc0
   81850:	2007abdc 	.word	0x2007abdc
   81854:	2007ac08 	.word	0x2007ac08
   81858:	2007abf4 	.word	0x2007abf4
   8185c:	2007ab24 	.word	0x2007ab24
   81860:	2007ab28 	.word	0x2007ab28
   81864:	2007aba8 	.word	0x2007aba8
   81868:	2007ab9c 	.word	0x2007ab9c
   8186c:	2007aba4 	.word	0x2007aba4
   81870:	00080d7d 	.word	0x00080d7d
   81874:	00080e89 	.word	0x00080e89
   81878:	00080e49 	.word	0x00080e49
   8187c:	2007abac 	.word	0x2007abac

00081880 <vTaskStartScheduler>:
{
   81880:	b510      	push	{r4, lr}
   81882:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81884:	2300      	movs	r3, #0
   81886:	9303      	str	r3, [sp, #12]
   81888:	9302      	str	r3, [sp, #8]
   8188a:	9301      	str	r3, [sp, #4]
   8188c:	9300      	str	r3, [sp, #0]
   8188e:	2282      	movs	r2, #130	; 0x82
   81890:	490d      	ldr	r1, [pc, #52]	; (818c8 <vTaskStartScheduler+0x48>)
   81892:	480e      	ldr	r0, [pc, #56]	; (818cc <vTaskStartScheduler+0x4c>)
   81894:	4c0e      	ldr	r4, [pc, #56]	; (818d0 <vTaskStartScheduler+0x50>)
   81896:	47a0      	blx	r4
		if( xReturn == pdPASS )
   81898:	2801      	cmp	r0, #1
   8189a:	d002      	beq.n	818a2 <vTaskStartScheduler+0x22>
	configASSERT( xReturn );
   8189c:	b180      	cbz	r0, 818c0 <vTaskStartScheduler+0x40>
}
   8189e:	b004      	add	sp, #16
   818a0:	bd10      	pop	{r4, pc}
			xReturn = xTimerCreateTimerTask();
   818a2:	4b0c      	ldr	r3, [pc, #48]	; (818d4 <vTaskStartScheduler+0x54>)
   818a4:	4798      	blx	r3
	if( xReturn == pdPASS )
   818a6:	2801      	cmp	r0, #1
   818a8:	d1f8      	bne.n	8189c <vTaskStartScheduler+0x1c>
		portDISABLE_INTERRUPTS();
   818aa:	4b0b      	ldr	r3, [pc, #44]	; (818d8 <vTaskStartScheduler+0x58>)
   818ac:	4798      	blx	r3
		xSchedulerRunning = pdTRUE;
   818ae:	2201      	movs	r2, #1
   818b0:	4b0a      	ldr	r3, [pc, #40]	; (818dc <vTaskStartScheduler+0x5c>)
   818b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   818b4:	2200      	movs	r2, #0
   818b6:	4b0a      	ldr	r3, [pc, #40]	; (818e0 <vTaskStartScheduler+0x60>)
   818b8:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
   818ba:	4b0a      	ldr	r3, [pc, #40]	; (818e4 <vTaskStartScheduler+0x64>)
   818bc:	4798      	blx	r3
   818be:	e7ee      	b.n	8189e <vTaskStartScheduler+0x1e>
	configASSERT( xReturn );
   818c0:	4b05      	ldr	r3, [pc, #20]	; (818d8 <vTaskStartScheduler+0x58>)
   818c2:	4798      	blx	r3
   818c4:	bf00      	nop
   818c6:	e7fd      	b.n	818c4 <vTaskStartScheduler+0x44>
   818c8:	00085c60 	.word	0x00085c60
   818cc:	00081b61 	.word	0x00081b61
   818d0:	0008167d 	.word	0x0008167d
   818d4:	0008200d 	.word	0x0008200d
   818d8:	00080e59 	.word	0x00080e59
   818dc:	2007abf0 	.word	0x2007abf0
   818e0:	2007ac1c 	.word	0x2007ac1c
   818e4:	00080f29 	.word	0x00080f29

000818e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
   818e8:	4a02      	ldr	r2, [pc, #8]	; (818f4 <vTaskSuspendAll+0xc>)
   818ea:	6813      	ldr	r3, [r2, #0]
   818ec:	3301      	adds	r3, #1
   818ee:	6013      	str	r3, [r2, #0]
   818f0:	4770      	bx	lr
   818f2:	bf00      	nop
   818f4:	2007ab98 	.word	0x2007ab98

000818f8 <xTaskGetTickCount>:
{
   818f8:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
   818fa:	4b04      	ldr	r3, [pc, #16]	; (8190c <xTaskGetTickCount+0x14>)
   818fc:	4798      	blx	r3
		xTicks = xTickCount;
   818fe:	4b04      	ldr	r3, [pc, #16]	; (81910 <xTaskGetTickCount+0x18>)
   81900:	681c      	ldr	r4, [r3, #0]
	taskEXIT_CRITICAL();
   81902:	4b04      	ldr	r3, [pc, #16]	; (81914 <xTaskGetTickCount+0x1c>)
   81904:	4798      	blx	r3
}
   81906:	4620      	mov	r0, r4
   81908:	bd10      	pop	{r4, pc}
   8190a:	bf00      	nop
   8190c:	00080e69 	.word	0x00080e69
   81910:	2007ac1c 	.word	0x2007ac1c
   81914:	00080e89 	.word	0x00080e89

00081918 <xTaskGetTickCountFromISR>:
{
   81918:	b510      	push	{r4, lr}
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   8191a:	4b04      	ldr	r3, [pc, #16]	; (8192c <xTaskGetTickCountFromISR+0x14>)
   8191c:	4798      	blx	r3
	xReturn = xTickCount;
   8191e:	4b04      	ldr	r3, [pc, #16]	; (81930 <xTaskGetTickCountFromISR+0x18>)
   81920:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81922:	4b04      	ldr	r3, [pc, #16]	; (81934 <xTaskGetTickCountFromISR+0x1c>)
   81924:	4798      	blx	r3
}
   81926:	4620      	mov	r0, r4
   81928:	bd10      	pop	{r4, pc}
   8192a:	bf00      	nop
   8192c:	00080e59 	.word	0x00080e59
   81930:	2007ac1c 	.word	0x2007ac1c
   81934:	00080e81 	.word	0x00080e81

00081938 <vTaskIncrementTick>:
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81938:	4b3d      	ldr	r3, [pc, #244]	; (81a30 <vTaskIncrementTick+0xf8>)
   8193a:	681b      	ldr	r3, [r3, #0]
   8193c:	2b00      	cmp	r3, #0
   8193e:	d16f      	bne.n	81a20 <vTaskIncrementTick+0xe8>
{
   81940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		++xTickCount;
   81944:	4b3b      	ldr	r3, [pc, #236]	; (81a34 <vTaskIncrementTick+0xfc>)
   81946:	681a      	ldr	r2, [r3, #0]
   81948:	3201      	adds	r2, #1
   8194a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8194c:	681b      	ldr	r3, [r3, #0]
   8194e:	b9ab      	cbnz	r3, 8197c <vTaskIncrementTick+0x44>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   81950:	4b39      	ldr	r3, [pc, #228]	; (81a38 <vTaskIncrementTick+0x100>)
   81952:	681b      	ldr	r3, [r3, #0]
   81954:	681b      	ldr	r3, [r3, #0]
   81956:	2b00      	cmp	r3, #0
   81958:	d128      	bne.n	819ac <vTaskIncrementTick+0x74>
			pxTemp = pxDelayedTaskList;
   8195a:	4b37      	ldr	r3, [pc, #220]	; (81a38 <vTaskIncrementTick+0x100>)
   8195c:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   8195e:	4a37      	ldr	r2, [pc, #220]	; (81a3c <vTaskIncrementTick+0x104>)
   81960:	6810      	ldr	r0, [r2, #0]
   81962:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81964:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81966:	4936      	ldr	r1, [pc, #216]	; (81a40 <vTaskIncrementTick+0x108>)
   81968:	680a      	ldr	r2, [r1, #0]
   8196a:	3201      	adds	r2, #1
   8196c:	600a      	str	r2, [r1, #0]
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   8196e:	681b      	ldr	r3, [r3, #0]
   81970:	681b      	ldr	r3, [r3, #0]
   81972:	b9fb      	cbnz	r3, 819b4 <vTaskIncrementTick+0x7c>
				xNextTaskUnblockTime = portMAX_DELAY;
   81974:	f04f 32ff 	mov.w	r2, #4294967295
   81978:	4b32      	ldr	r3, [pc, #200]	; (81a44 <vTaskIncrementTick+0x10c>)
   8197a:	601a      	str	r2, [r3, #0]
		prvCheckDelayedTasks();
   8197c:	4b2d      	ldr	r3, [pc, #180]	; (81a34 <vTaskIncrementTick+0xfc>)
   8197e:	681a      	ldr	r2, [r3, #0]
   81980:	4b30      	ldr	r3, [pc, #192]	; (81a44 <vTaskIncrementTick+0x10c>)
   81982:	681b      	ldr	r3, [r3, #0]
   81984:	429a      	cmp	r2, r3
   81986:	d350      	bcc.n	81a2a <vTaskIncrementTick+0xf2>
   81988:	4b2b      	ldr	r3, [pc, #172]	; (81a38 <vTaskIncrementTick+0x100>)
   8198a:	681b      	ldr	r3, [r3, #0]
   8198c:	681b      	ldr	r3, [r3, #0]
   8198e:	b1cb      	cbz	r3, 819c4 <vTaskIncrementTick+0x8c>
   81990:	4b29      	ldr	r3, [pc, #164]	; (81a38 <vTaskIncrementTick+0x100>)
   81992:	681b      	ldr	r3, [r3, #0]
   81994:	68db      	ldr	r3, [r3, #12]
   81996:	68dc      	ldr	r4, [r3, #12]
   81998:	6863      	ldr	r3, [r4, #4]
   8199a:	4a26      	ldr	r2, [pc, #152]	; (81a34 <vTaskIncrementTick+0xfc>)
   8199c:	6812      	ldr	r2, [r2, #0]
   8199e:	4293      	cmp	r3, r2
   819a0:	d816      	bhi.n	819d0 <vTaskIncrementTick+0x98>
   819a2:	4e29      	ldr	r6, [pc, #164]	; (81a48 <vTaskIncrementTick+0x110>)
   819a4:	4f29      	ldr	r7, [pc, #164]	; (81a4c <vTaskIncrementTick+0x114>)
   819a6:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 81a5c <vTaskIncrementTick+0x124>
   819aa:	e02f      	b.n	81a0c <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   819ac:	4b28      	ldr	r3, [pc, #160]	; (81a50 <vTaskIncrementTick+0x118>)
   819ae:	4798      	blx	r3
   819b0:	bf00      	nop
   819b2:	e7fd      	b.n	819b0 <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   819b4:	4b20      	ldr	r3, [pc, #128]	; (81a38 <vTaskIncrementTick+0x100>)
   819b6:	681b      	ldr	r3, [r3, #0]
   819b8:	68db      	ldr	r3, [r3, #12]
   819ba:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   819bc:	685a      	ldr	r2, [r3, #4]
   819be:	4b21      	ldr	r3, [pc, #132]	; (81a44 <vTaskIncrementTick+0x10c>)
   819c0:	601a      	str	r2, [r3, #0]
   819c2:	e7db      	b.n	8197c <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   819c4:	f04f 32ff 	mov.w	r2, #4294967295
   819c8:	4b1e      	ldr	r3, [pc, #120]	; (81a44 <vTaskIncrementTick+0x10c>)
   819ca:	601a      	str	r2, [r3, #0]
   819cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819d0:	4a1c      	ldr	r2, [pc, #112]	; (81a44 <vTaskIncrementTick+0x10c>)
   819d2:	6013      	str	r3, [r2, #0]
   819d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   819d8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   819da:	683b      	ldr	r3, [r7, #0]
   819dc:	4298      	cmp	r0, r3
   819de:	bf88      	it	hi
   819e0:	6038      	strhi	r0, [r7, #0]
   819e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   819e6:	4629      	mov	r1, r5
   819e8:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   819ec:	4b19      	ldr	r3, [pc, #100]	; (81a54 <vTaskIncrementTick+0x11c>)
   819ee:	4798      	blx	r3
   819f0:	4b11      	ldr	r3, [pc, #68]	; (81a38 <vTaskIncrementTick+0x100>)
   819f2:	681b      	ldr	r3, [r3, #0]
   819f4:	681b      	ldr	r3, [r3, #0]
   819f6:	2b00      	cmp	r3, #0
   819f8:	d0e4      	beq.n	819c4 <vTaskIncrementTick+0x8c>
   819fa:	4b0f      	ldr	r3, [pc, #60]	; (81a38 <vTaskIncrementTick+0x100>)
   819fc:	681b      	ldr	r3, [r3, #0]
   819fe:	68db      	ldr	r3, [r3, #12]
   81a00:	68dc      	ldr	r4, [r3, #12]
   81a02:	6863      	ldr	r3, [r4, #4]
   81a04:	4a0b      	ldr	r2, [pc, #44]	; (81a34 <vTaskIncrementTick+0xfc>)
   81a06:	6812      	ldr	r2, [r2, #0]
   81a08:	4293      	cmp	r3, r2
   81a0a:	d8e1      	bhi.n	819d0 <vTaskIncrementTick+0x98>
   81a0c:	1d25      	adds	r5, r4, #4
   81a0e:	4628      	mov	r0, r5
   81a10:	47b0      	blx	r6
   81a12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   81a14:	2b00      	cmp	r3, #0
   81a16:	d0df      	beq.n	819d8 <vTaskIncrementTick+0xa0>
   81a18:	f104 0018 	add.w	r0, r4, #24
   81a1c:	47b0      	blx	r6
   81a1e:	e7db      	b.n	819d8 <vTaskIncrementTick+0xa0>
		++uxMissedTicks;
   81a20:	4a0d      	ldr	r2, [pc, #52]	; (81a58 <vTaskIncrementTick+0x120>)
   81a22:	6813      	ldr	r3, [r2, #0]
   81a24:	3301      	adds	r3, #1
   81a26:	6013      	str	r3, [r2, #0]
}
   81a28:	4770      	bx	lr
   81a2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81a2e:	bf00      	nop
   81a30:	2007ab98 	.word	0x2007ab98
   81a34:	2007ac1c 	.word	0x2007ac1c
   81a38:	2007ab24 	.word	0x2007ab24
   81a3c:	2007ab28 	.word	0x2007ab28
   81a40:	2007abd8 	.word	0x2007abd8
   81a44:	20070134 	.word	0x20070134
   81a48:	00080dd3 	.word	0x00080dd3
   81a4c:	2007aba4 	.word	0x2007aba4
   81a50:	00080e59 	.word	0x00080e59
   81a54:	00080d7d 	.word	0x00080d7d
   81a58:	2007ab94 	.word	0x2007ab94
   81a5c:	2007ab2c 	.word	0x2007ab2c

00081a60 <xTaskResumeAll>:
{
   81a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
   81a64:	4b2f      	ldr	r3, [pc, #188]	; (81b24 <xTaskResumeAll+0xc4>)
   81a66:	681b      	ldr	r3, [r3, #0]
   81a68:	b91b      	cbnz	r3, 81a72 <xTaskResumeAll+0x12>
   81a6a:	4b2f      	ldr	r3, [pc, #188]	; (81b28 <xTaskResumeAll+0xc8>)
   81a6c:	4798      	blx	r3
   81a6e:	bf00      	nop
   81a70:	e7fd      	b.n	81a6e <xTaskResumeAll+0xe>
	taskENTER_CRITICAL();
   81a72:	4b2e      	ldr	r3, [pc, #184]	; (81b2c <xTaskResumeAll+0xcc>)
   81a74:	4798      	blx	r3
		--uxSchedulerSuspended;
   81a76:	4b2b      	ldr	r3, [pc, #172]	; (81b24 <xTaskResumeAll+0xc4>)
   81a78:	681a      	ldr	r2, [r3, #0]
   81a7a:	3a01      	subs	r2, #1
   81a7c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81a7e:	681b      	ldr	r3, [r3, #0]
   81a80:	2b00      	cmp	r3, #0
   81a82:	d14d      	bne.n	81b20 <xTaskResumeAll+0xc0>
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81a84:	4b2a      	ldr	r3, [pc, #168]	; (81b30 <xTaskResumeAll+0xd0>)
   81a86:	681b      	ldr	r3, [r3, #0]
   81a88:	b12b      	cbz	r3, 81a96 <xTaskResumeAll+0x36>
   81a8a:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81a8c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 81b5c <xTaskResumeAll+0xfc>
					uxListRemove( &( pxTCB->xEventListItem ) );
   81a90:	4f28      	ldr	r7, [pc, #160]	; (81b34 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyQueue( pxTCB );
   81a92:	4e29      	ldr	r6, [pc, #164]	; (81b38 <xTaskResumeAll+0xd8>)
   81a94:	e023      	b.n	81ade <xTaskResumeAll+0x7e>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81a96:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
   81a98:	4b28      	ldr	r3, [pc, #160]	; (81b3c <xTaskResumeAll+0xdc>)
   81a9a:	4798      	blx	r3
}
   81a9c:	4620      	mov	r0, r4
   81a9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   81aa2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81aa6:	68dd      	ldr	r5, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81aa8:	f105 0018 	add.w	r0, r5, #24
   81aac:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81aae:	f105 0904 	add.w	r9, r5, #4
   81ab2:	4648      	mov	r0, r9
   81ab4:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81ab6:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
   81ab8:	6833      	ldr	r3, [r6, #0]
   81aba:	4298      	cmp	r0, r3
   81abc:	bf88      	it	hi
   81abe:	6030      	strhi	r0, [r6, #0]
   81ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81ac4:	4649      	mov	r1, r9
   81ac6:	4b1e      	ldr	r3, [pc, #120]	; (81b40 <xTaskResumeAll+0xe0>)
   81ac8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81acc:	4b1d      	ldr	r3, [pc, #116]	; (81b44 <xTaskResumeAll+0xe4>)
   81ace:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81ad0:	4b1d      	ldr	r3, [pc, #116]	; (81b48 <xTaskResumeAll+0xe8>)
   81ad2:	681b      	ldr	r3, [r3, #0]
   81ad4:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   81ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
						xYieldRequired = pdTRUE;
   81ad8:	429a      	cmp	r2, r3
   81ada:	bf28      	it	cs
   81adc:	2401      	movcs	r4, #1
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81ade:	f8d8 3000 	ldr.w	r3, [r8]
   81ae2:	2b00      	cmp	r3, #0
   81ae4:	d1dd      	bne.n	81aa2 <xTaskResumeAll+0x42>
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81ae6:	4b19      	ldr	r3, [pc, #100]	; (81b4c <xTaskResumeAll+0xec>)
   81ae8:	681b      	ldr	r3, [r3, #0]
   81aea:	b193      	cbz	r3, 81b12 <xTaskResumeAll+0xb2>
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81aec:	4b17      	ldr	r3, [pc, #92]	; (81b4c <xTaskResumeAll+0xec>)
   81aee:	681b      	ldr	r3, [r3, #0]
   81af0:	b143      	cbz	r3, 81b04 <xTaskResumeAll+0xa4>
						vTaskIncrementTick();
   81af2:	4d17      	ldr	r5, [pc, #92]	; (81b50 <xTaskResumeAll+0xf0>)
						--uxMissedTicks;
   81af4:	4c15      	ldr	r4, [pc, #84]	; (81b4c <xTaskResumeAll+0xec>)
						vTaskIncrementTick();
   81af6:	47a8      	blx	r5
						--uxMissedTicks;
   81af8:	6823      	ldr	r3, [r4, #0]
   81afa:	3b01      	subs	r3, #1
   81afc:	6023      	str	r3, [r4, #0]
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   81afe:	6823      	ldr	r3, [r4, #0]
   81b00:	2b00      	cmp	r3, #0
   81b02:	d1f8      	bne.n	81af6 <xTaskResumeAll+0x96>
					xMissedYield = pdFALSE;
   81b04:	2200      	movs	r2, #0
   81b06:	4b13      	ldr	r3, [pc, #76]	; (81b54 <xTaskResumeAll+0xf4>)
   81b08:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   81b0a:	4b13      	ldr	r3, [pc, #76]	; (81b58 <xTaskResumeAll+0xf8>)
   81b0c:	4798      	blx	r3
					xAlreadyYielded = pdTRUE;
   81b0e:	2401      	movs	r4, #1
   81b10:	e7c2      	b.n	81a98 <xTaskResumeAll+0x38>
				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   81b12:	2c01      	cmp	r4, #1
   81b14:	d0f6      	beq.n	81b04 <xTaskResumeAll+0xa4>
   81b16:	4b0f      	ldr	r3, [pc, #60]	; (81b54 <xTaskResumeAll+0xf4>)
   81b18:	681b      	ldr	r3, [r3, #0]
   81b1a:	2b01      	cmp	r3, #1
   81b1c:	d1bc      	bne.n	81a98 <xTaskResumeAll+0x38>
   81b1e:	e7f1      	b.n	81b04 <xTaskResumeAll+0xa4>
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   81b20:	2400      	movs	r4, #0
   81b22:	e7b9      	b.n	81a98 <xTaskResumeAll+0x38>
   81b24:	2007ab98 	.word	0x2007ab98
   81b28:	00080e59 	.word	0x00080e59
   81b2c:	00080e69 	.word	0x00080e69
   81b30:	2007ab90 	.word	0x2007ab90
   81b34:	00080dd3 	.word	0x00080dd3
   81b38:	2007aba4 	.word	0x2007aba4
   81b3c:	00080e89 	.word	0x00080e89
   81b40:	2007ab2c 	.word	0x2007ab2c
   81b44:	00080d7d 	.word	0x00080d7d
   81b48:	2007ab20 	.word	0x2007ab20
   81b4c:	2007ab94 	.word	0x2007ab94
   81b50:	00081939 	.word	0x00081939
   81b54:	2007abd4 	.word	0x2007abd4
   81b58:	00080e49 	.word	0x00080e49
   81b5c:	2007abdc 	.word	0x2007abdc

00081b60 <prvIdleTask>:
{
   81b60:	b580      	push	{r7, lr}
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81b62:	4d16      	ldr	r5, [pc, #88]	; (81bbc <prvIdleTask+0x5c>)
			vTaskSuspendAll();
   81b64:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81be0 <prvIdleTask+0x80>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81b68:	4e15      	ldr	r6, [pc, #84]	; (81bc0 <prvIdleTask+0x60>)
   81b6a:	e024      	b.n	81bb6 <prvIdleTask+0x56>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81b6c:	4b15      	ldr	r3, [pc, #84]	; (81bc4 <prvIdleTask+0x64>)
   81b6e:	681b      	ldr	r3, [r3, #0]
   81b70:	2b01      	cmp	r3, #1
   81b72:	d81e      	bhi.n	81bb2 <prvIdleTask+0x52>
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81b74:	682b      	ldr	r3, [r5, #0]
   81b76:	2b00      	cmp	r3, #0
   81b78:	d0f8      	beq.n	81b6c <prvIdleTask+0xc>
			vTaskSuspendAll();
   81b7a:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81b7c:	6834      	ldr	r4, [r6, #0]
			xTaskResumeAll();
   81b7e:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
   81b80:	2c00      	cmp	r4, #0
   81b82:	d0f7      	beq.n	81b74 <prvIdleTask+0x14>
				taskENTER_CRITICAL();
   81b84:	4b10      	ldr	r3, [pc, #64]	; (81bc8 <prvIdleTask+0x68>)
   81b86:	4798      	blx	r3
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81b88:	68f3      	ldr	r3, [r6, #12]
   81b8a:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81b8c:	1d20      	adds	r0, r4, #4
   81b8e:	4b0f      	ldr	r3, [pc, #60]	; (81bcc <prvIdleTask+0x6c>)
   81b90:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81b92:	4a0f      	ldr	r2, [pc, #60]	; (81bd0 <prvIdleTask+0x70>)
   81b94:	6813      	ldr	r3, [r2, #0]
   81b96:	3b01      	subs	r3, #1
   81b98:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
   81b9a:	682b      	ldr	r3, [r5, #0]
   81b9c:	3b01      	subs	r3, #1
   81b9e:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
   81ba0:	4b0c      	ldr	r3, [pc, #48]	; (81bd4 <prvIdleTask+0x74>)
   81ba2:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81ba4:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81ba6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 81be4 <prvIdleTask+0x84>
   81baa:	47c8      	blx	r9
		vPortFree( pxTCB );
   81bac:	4620      	mov	r0, r4
   81bae:	47c8      	blx	r9
   81bb0:	e7e0      	b.n	81b74 <prvIdleTask+0x14>
				taskYIELD();
   81bb2:	4b09      	ldr	r3, [pc, #36]	; (81bd8 <prvIdleTask+0x78>)
   81bb4:	4798      	blx	r3
			xTaskResumeAll();
   81bb6:	4f09      	ldr	r7, [pc, #36]	; (81bdc <prvIdleTask+0x7c>)
   81bb8:	e7dc      	b.n	81b74 <prvIdleTask+0x14>
   81bba:	bf00      	nop
   81bbc:	2007aba0 	.word	0x2007aba0
   81bc0:	2007ac08 	.word	0x2007ac08
   81bc4:	2007ab2c 	.word	0x2007ab2c
   81bc8:	00080e69 	.word	0x00080e69
   81bcc:	00080dd3 	.word	0x00080dd3
   81bd0:	2007ab90 	.word	0x2007ab90
   81bd4:	00080e89 	.word	0x00080e89
   81bd8:	00080e49 	.word	0x00080e49
   81bdc:	00081a61 	.word	0x00081a61
   81be0:	000818e9 	.word	0x000818e9
   81be4:	00081085 	.word	0x00081085

00081be8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81be8:	4b21      	ldr	r3, [pc, #132]	; (81c70 <vTaskSwitchContext+0x88>)
   81bea:	681b      	ldr	r3, [r3, #0]
   81bec:	b9eb      	cbnz	r3, 81c2a <vTaskSwitchContext+0x42>
{
   81bee:	b510      	push	{r4, lr}
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81bf0:	4b20      	ldr	r3, [pc, #128]	; (81c74 <vTaskSwitchContext+0x8c>)
   81bf2:	681b      	ldr	r3, [r3, #0]
   81bf4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81bf8:	009b      	lsls	r3, r3, #2
   81bfa:	4a1f      	ldr	r2, [pc, #124]	; (81c78 <vTaskSwitchContext+0x90>)
   81bfc:	58d3      	ldr	r3, [r2, r3]
   81bfe:	b9c3      	cbnz	r3, 81c32 <vTaskSwitchContext+0x4a>
   81c00:	4b1c      	ldr	r3, [pc, #112]	; (81c74 <vTaskSwitchContext+0x8c>)
   81c02:	681b      	ldr	r3, [r3, #0]
   81c04:	b16b      	cbz	r3, 81c22 <vTaskSwitchContext+0x3a>
   81c06:	4a1b      	ldr	r2, [pc, #108]	; (81c74 <vTaskSwitchContext+0x8c>)
   81c08:	491b      	ldr	r1, [pc, #108]	; (81c78 <vTaskSwitchContext+0x90>)
   81c0a:	6813      	ldr	r3, [r2, #0]
   81c0c:	3b01      	subs	r3, #1
   81c0e:	6013      	str	r3, [r2, #0]
   81c10:	6813      	ldr	r3, [r2, #0]
   81c12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c16:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   81c1a:	b953      	cbnz	r3, 81c32 <vTaskSwitchContext+0x4a>
   81c1c:	6813      	ldr	r3, [r2, #0]
   81c1e:	2b00      	cmp	r3, #0
   81c20:	d1f3      	bne.n	81c0a <vTaskSwitchContext+0x22>
   81c22:	4b16      	ldr	r3, [pc, #88]	; (81c7c <vTaskSwitchContext+0x94>)
   81c24:	4798      	blx	r3
   81c26:	bf00      	nop
   81c28:	e7fd      	b.n	81c26 <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   81c2a:	2201      	movs	r2, #1
   81c2c:	4b14      	ldr	r3, [pc, #80]	; (81c80 <vTaskSwitchContext+0x98>)
   81c2e:	601a      	str	r2, [r3, #0]
   81c30:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   81c32:	4b10      	ldr	r3, [pc, #64]	; (81c74 <vTaskSwitchContext+0x8c>)
   81c34:	681b      	ldr	r3, [r3, #0]
   81c36:	4a10      	ldr	r2, [pc, #64]	; (81c78 <vTaskSwitchContext+0x90>)
   81c38:	0099      	lsls	r1, r3, #2
   81c3a:	18c8      	adds	r0, r1, r3
   81c3c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   81c40:	6844      	ldr	r4, [r0, #4]
   81c42:	6864      	ldr	r4, [r4, #4]
   81c44:	6044      	str	r4, [r0, #4]
   81c46:	4419      	add	r1, r3
   81c48:	4602      	mov	r2, r0
   81c4a:	3208      	adds	r2, #8
   81c4c:	4294      	cmp	r4, r2
   81c4e:	d009      	beq.n	81c64 <vTaskSwitchContext+0x7c>
   81c50:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81c54:	4a08      	ldr	r2, [pc, #32]	; (81c78 <vTaskSwitchContext+0x90>)
   81c56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81c5a:	685b      	ldr	r3, [r3, #4]
   81c5c:	68da      	ldr	r2, [r3, #12]
   81c5e:	4b09      	ldr	r3, [pc, #36]	; (81c84 <vTaskSwitchContext+0x9c>)
   81c60:	601a      	str	r2, [r3, #0]
   81c62:	bd10      	pop	{r4, pc}
   81c64:	6860      	ldr	r0, [r4, #4]
   81c66:	4a04      	ldr	r2, [pc, #16]	; (81c78 <vTaskSwitchContext+0x90>)
   81c68:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   81c6c:	6050      	str	r0, [r2, #4]
   81c6e:	e7ef      	b.n	81c50 <vTaskSwitchContext+0x68>
   81c70:	2007ab98 	.word	0x2007ab98
   81c74:	2007aba4 	.word	0x2007aba4
   81c78:	2007ab2c 	.word	0x2007ab2c
   81c7c:	00080e59 	.word	0x00080e59
   81c80:	2007abd4 	.word	0x2007abd4
   81c84:	2007ab20 	.word	0x2007ab20

00081c88 <vTaskPlaceOnEventList>:
{
   81c88:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
   81c8a:	b190      	cbz	r0, 81cb2 <vTaskPlaceOnEventList+0x2a>
   81c8c:	460c      	mov	r4, r1
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81c8e:	4d0e      	ldr	r5, [pc, #56]	; (81cc8 <vTaskPlaceOnEventList+0x40>)
   81c90:	6829      	ldr	r1, [r5, #0]
   81c92:	3118      	adds	r1, #24
   81c94:	4b0d      	ldr	r3, [pc, #52]	; (81ccc <vTaskPlaceOnEventList+0x44>)
   81c96:	4798      	blx	r3
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81c98:	6828      	ldr	r0, [r5, #0]
   81c9a:	3004      	adds	r0, #4
   81c9c:	4b0c      	ldr	r3, [pc, #48]	; (81cd0 <vTaskPlaceOnEventList+0x48>)
   81c9e:	4798      	blx	r3
		if( xTicksToWait == portMAX_DELAY )
   81ca0:	f1b4 3fff 	cmp.w	r4, #4294967295
   81ca4:	d009      	beq.n	81cba <vTaskPlaceOnEventList+0x32>
			xTimeToWake = xTickCount + xTicksToWait;
   81ca6:	4b0b      	ldr	r3, [pc, #44]	; (81cd4 <vTaskPlaceOnEventList+0x4c>)
   81ca8:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81caa:	4420      	add	r0, r4
   81cac:	4b0a      	ldr	r3, [pc, #40]	; (81cd8 <vTaskPlaceOnEventList+0x50>)
   81cae:	4798      	blx	r3
   81cb0:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxEventList );
   81cb2:	4b0a      	ldr	r3, [pc, #40]	; (81cdc <vTaskPlaceOnEventList+0x54>)
   81cb4:	4798      	blx	r3
   81cb6:	bf00      	nop
   81cb8:	e7fd      	b.n	81cb6 <vTaskPlaceOnEventList+0x2e>
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81cba:	6829      	ldr	r1, [r5, #0]
   81cbc:	3104      	adds	r1, #4
   81cbe:	4808      	ldr	r0, [pc, #32]	; (81ce0 <vTaskPlaceOnEventList+0x58>)
   81cc0:	4b08      	ldr	r3, [pc, #32]	; (81ce4 <vTaskPlaceOnEventList+0x5c>)
   81cc2:	4798      	blx	r3
   81cc4:	bd38      	pop	{r3, r4, r5, pc}
   81cc6:	bf00      	nop
   81cc8:	2007ab20 	.word	0x2007ab20
   81ccc:	00080d99 	.word	0x00080d99
   81cd0:	00080dd3 	.word	0x00080dd3
   81cd4:	2007ac1c 	.word	0x2007ac1c
   81cd8:	00081625 	.word	0x00081625
   81cdc:	00080e59 	.word	0x00080e59
   81ce0:	2007abf4 	.word	0x2007abf4
   81ce4:	00080d7d 	.word	0x00080d7d

00081ce8 <vTaskPlaceOnEventListRestricted>:
	{
   81ce8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
   81cea:	b178      	cbz	r0, 81d0c <vTaskPlaceOnEventListRestricted+0x24>
   81cec:	460d      	mov	r5, r1
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81cee:	4c09      	ldr	r4, [pc, #36]	; (81d14 <vTaskPlaceOnEventListRestricted+0x2c>)
   81cf0:	6821      	ldr	r1, [r4, #0]
   81cf2:	3118      	adds	r1, #24
   81cf4:	4b08      	ldr	r3, [pc, #32]	; (81d18 <vTaskPlaceOnEventListRestricted+0x30>)
   81cf6:	4798      	blx	r3
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81cf8:	6820      	ldr	r0, [r4, #0]
   81cfa:	3004      	adds	r0, #4
   81cfc:	4b07      	ldr	r3, [pc, #28]	; (81d1c <vTaskPlaceOnEventListRestricted+0x34>)
   81cfe:	4798      	blx	r3
		xTimeToWake = xTickCount + xTicksToWait;
   81d00:	4b07      	ldr	r3, [pc, #28]	; (81d20 <vTaskPlaceOnEventListRestricted+0x38>)
   81d02:	6818      	ldr	r0, [r3, #0]
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81d04:	4428      	add	r0, r5
   81d06:	4b07      	ldr	r3, [pc, #28]	; (81d24 <vTaskPlaceOnEventListRestricted+0x3c>)
   81d08:	4798      	blx	r3
   81d0a:	bd38      	pop	{r3, r4, r5, pc}
		configASSERT( pxEventList );
   81d0c:	4b06      	ldr	r3, [pc, #24]	; (81d28 <vTaskPlaceOnEventListRestricted+0x40>)
   81d0e:	4798      	blx	r3
   81d10:	bf00      	nop
   81d12:	e7fd      	b.n	81d10 <vTaskPlaceOnEventListRestricted+0x28>
   81d14:	2007ab20 	.word	0x2007ab20
   81d18:	00080d7d 	.word	0x00080d7d
   81d1c:	00080dd3 	.word	0x00080dd3
   81d20:	2007ac1c 	.word	0x2007ac1c
   81d24:	00081625 	.word	0x00081625
   81d28:	00080e59 	.word	0x00080e59

00081d2c <xTaskRemoveFromEventList>:
{
   81d2c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81d2e:	68c3      	ldr	r3, [r0, #12]
   81d30:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81d32:	b31c      	cbz	r4, 81d7c <xTaskRemoveFromEventList+0x50>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81d34:	f104 0518 	add.w	r5, r4, #24
   81d38:	4628      	mov	r0, r5
   81d3a:	4b15      	ldr	r3, [pc, #84]	; (81d90 <xTaskRemoveFromEventList+0x64>)
   81d3c:	4798      	blx	r3
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81d3e:	4b15      	ldr	r3, [pc, #84]	; (81d94 <xTaskRemoveFromEventList+0x68>)
   81d40:	681b      	ldr	r3, [r3, #0]
   81d42:	b9fb      	cbnz	r3, 81d84 <xTaskRemoveFromEventList+0x58>
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81d44:	1d25      	adds	r5, r4, #4
   81d46:	4628      	mov	r0, r5
   81d48:	4b11      	ldr	r3, [pc, #68]	; (81d90 <xTaskRemoveFromEventList+0x64>)
   81d4a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81d4c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81d4e:	4b12      	ldr	r3, [pc, #72]	; (81d98 <xTaskRemoveFromEventList+0x6c>)
   81d50:	681b      	ldr	r3, [r3, #0]
   81d52:	4298      	cmp	r0, r3
   81d54:	bf84      	itt	hi
   81d56:	4b10      	ldrhi	r3, [pc, #64]	; (81d98 <xTaskRemoveFromEventList+0x6c>)
   81d58:	6018      	strhi	r0, [r3, #0]
   81d5a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81d5e:	4629      	mov	r1, r5
   81d60:	4b0e      	ldr	r3, [pc, #56]	; (81d9c <xTaskRemoveFromEventList+0x70>)
   81d62:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81d66:	4b0e      	ldr	r3, [pc, #56]	; (81da0 <xTaskRemoveFromEventList+0x74>)
   81d68:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81d6a:	4b0e      	ldr	r3, [pc, #56]	; (81da4 <xTaskRemoveFromEventList+0x78>)
   81d6c:	681b      	ldr	r3, [r3, #0]
   81d6e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
   81d72:	4298      	cmp	r0, r3
   81d74:	bf34      	ite	cc
   81d76:	2000      	movcc	r0, #0
   81d78:	2001      	movcs	r0, #1
   81d7a:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxUnblockedTCB );
   81d7c:	4b0a      	ldr	r3, [pc, #40]	; (81da8 <xTaskRemoveFromEventList+0x7c>)
   81d7e:	4798      	blx	r3
   81d80:	bf00      	nop
   81d82:	e7fd      	b.n	81d80 <xTaskRemoveFromEventList+0x54>
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81d84:	4629      	mov	r1, r5
   81d86:	4809      	ldr	r0, [pc, #36]	; (81dac <xTaskRemoveFromEventList+0x80>)
   81d88:	4b05      	ldr	r3, [pc, #20]	; (81da0 <xTaskRemoveFromEventList+0x74>)
   81d8a:	4798      	blx	r3
   81d8c:	e7ed      	b.n	81d6a <xTaskRemoveFromEventList+0x3e>
   81d8e:	bf00      	nop
   81d90:	00080dd3 	.word	0x00080dd3
   81d94:	2007ab98 	.word	0x2007ab98
   81d98:	2007aba4 	.word	0x2007aba4
   81d9c:	2007ab2c 	.word	0x2007ab2c
   81da0:	00080d7d 	.word	0x00080d7d
   81da4:	2007ab20 	.word	0x2007ab20
   81da8:	00080e59 	.word	0x00080e59
   81dac:	2007abdc 	.word	0x2007abdc

00081db0 <vTaskSetTimeOutState>:
{
   81db0:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81db2:	b130      	cbz	r0, 81dc2 <vTaskSetTimeOutState+0x12>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81db4:	4a05      	ldr	r2, [pc, #20]	; (81dcc <vTaskSetTimeOutState+0x1c>)
   81db6:	6812      	ldr	r2, [r2, #0]
   81db8:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81dba:	4a05      	ldr	r2, [pc, #20]	; (81dd0 <vTaskSetTimeOutState+0x20>)
   81dbc:	6812      	ldr	r2, [r2, #0]
   81dbe:	6042      	str	r2, [r0, #4]
   81dc0:	bd08      	pop	{r3, pc}
	configASSERT( pxTimeOut );
   81dc2:	4b04      	ldr	r3, [pc, #16]	; (81dd4 <vTaskSetTimeOutState+0x24>)
   81dc4:	4798      	blx	r3
   81dc6:	bf00      	nop
   81dc8:	e7fd      	b.n	81dc6 <vTaskSetTimeOutState+0x16>
   81dca:	bf00      	nop
   81dcc:	2007abd8 	.word	0x2007abd8
   81dd0:	2007ac1c 	.word	0x2007ac1c
   81dd4:	00080e59 	.word	0x00080e59

00081dd8 <xTaskCheckForTimeOut>:
{
   81dd8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
   81dda:	b1e8      	cbz	r0, 81e18 <xTaskCheckForTimeOut+0x40>
   81ddc:	460d      	mov	r5, r1
   81dde:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
   81de0:	b1f1      	cbz	r1, 81e20 <xTaskCheckForTimeOut+0x48>
	taskENTER_CRITICAL();
   81de2:	4b18      	ldr	r3, [pc, #96]	; (81e44 <xTaskCheckForTimeOut+0x6c>)
   81de4:	4798      	blx	r3
			if( *pxTicksToWait == portMAX_DELAY )
   81de6:	682b      	ldr	r3, [r5, #0]
   81de8:	f1b3 3fff 	cmp.w	r3, #4294967295
   81dec:	d026      	beq.n	81e3c <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81dee:	4a16      	ldr	r2, [pc, #88]	; (81e48 <xTaskCheckForTimeOut+0x70>)
   81df0:	6812      	ldr	r2, [r2, #0]
   81df2:	6821      	ldr	r1, [r4, #0]
   81df4:	4291      	cmp	r1, r2
   81df6:	d004      	beq.n	81e02 <xTaskCheckForTimeOut+0x2a>
   81df8:	4a14      	ldr	r2, [pc, #80]	; (81e4c <xTaskCheckForTimeOut+0x74>)
   81dfa:	6812      	ldr	r2, [r2, #0]
   81dfc:	6861      	ldr	r1, [r4, #4]
   81dfe:	4291      	cmp	r1, r2
   81e00:	d91e      	bls.n	81e40 <xTaskCheckForTimeOut+0x68>
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81e02:	4a12      	ldr	r2, [pc, #72]	; (81e4c <xTaskCheckForTimeOut+0x74>)
   81e04:	6812      	ldr	r2, [r2, #0]
   81e06:	6861      	ldr	r1, [r4, #4]
   81e08:	1a52      	subs	r2, r2, r1
   81e0a:	4293      	cmp	r3, r2
   81e0c:	d80c      	bhi.n	81e28 <xTaskCheckForTimeOut+0x50>
			xReturn = pdTRUE;
   81e0e:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
   81e10:	4b0f      	ldr	r3, [pc, #60]	; (81e50 <xTaskCheckForTimeOut+0x78>)
   81e12:	4798      	blx	r3
}
   81e14:	4620      	mov	r0, r4
   81e16:	bd38      	pop	{r3, r4, r5, pc}
	configASSERT( pxTimeOut );
   81e18:	4b0e      	ldr	r3, [pc, #56]	; (81e54 <xTaskCheckForTimeOut+0x7c>)
   81e1a:	4798      	blx	r3
   81e1c:	bf00      	nop
   81e1e:	e7fd      	b.n	81e1c <xTaskCheckForTimeOut+0x44>
	configASSERT( pxTicksToWait );
   81e20:	4b0c      	ldr	r3, [pc, #48]	; (81e54 <xTaskCheckForTimeOut+0x7c>)
   81e22:	4798      	blx	r3
   81e24:	bf00      	nop
   81e26:	e7fd      	b.n	81e24 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81e28:	4a08      	ldr	r2, [pc, #32]	; (81e4c <xTaskCheckForTimeOut+0x74>)
   81e2a:	6812      	ldr	r2, [r2, #0]
   81e2c:	1a52      	subs	r2, r2, r1
   81e2e:	1a9b      	subs	r3, r3, r2
   81e30:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81e32:	4620      	mov	r0, r4
   81e34:	4b08      	ldr	r3, [pc, #32]	; (81e58 <xTaskCheckForTimeOut+0x80>)
   81e36:	4798      	blx	r3
			xReturn = pdFALSE;
   81e38:	2400      	movs	r4, #0
   81e3a:	e7e9      	b.n	81e10 <xTaskCheckForTimeOut+0x38>
				xReturn = pdFALSE;
   81e3c:	2400      	movs	r4, #0
   81e3e:	e7e7      	b.n	81e10 <xTaskCheckForTimeOut+0x38>
			xReturn = pdTRUE;
   81e40:	2401      	movs	r4, #1
   81e42:	e7e5      	b.n	81e10 <xTaskCheckForTimeOut+0x38>
   81e44:	00080e69 	.word	0x00080e69
   81e48:	2007abd8 	.word	0x2007abd8
   81e4c:	2007ac1c 	.word	0x2007ac1c
   81e50:	00080e89 	.word	0x00080e89
   81e54:	00080e59 	.word	0x00080e59
   81e58:	00081db1 	.word	0x00081db1

00081e5c <vTaskMissedYield>:
	xMissedYield = pdTRUE;
   81e5c:	2201      	movs	r2, #1
   81e5e:	4b01      	ldr	r3, [pc, #4]	; (81e64 <vTaskMissedYield+0x8>)
   81e60:	601a      	str	r2, [r3, #0]
   81e62:	4770      	bx	lr
   81e64:	2007abd4 	.word	0x2007abd4

00081e68 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81e68:	4b01      	ldr	r3, [pc, #4]	; (81e70 <xTaskGetCurrentTaskHandle+0x8>)
   81e6a:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81e6c:	4770      	bx	lr
   81e6e:	bf00      	nop
   81e70:	2007ab20 	.word	0x2007ab20

00081e74 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81e74:	4b05      	ldr	r3, [pc, #20]	; (81e8c <xTaskGetSchedulerState+0x18>)
   81e76:	681b      	ldr	r3, [r3, #0]
   81e78:	b133      	cbz	r3, 81e88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81e7a:	4b05      	ldr	r3, [pc, #20]	; (81e90 <xTaskGetSchedulerState+0x1c>)
   81e7c:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
   81e7e:	2b00      	cmp	r3, #0
   81e80:	bf0c      	ite	eq
   81e82:	2001      	moveq	r0, #1
   81e84:	2002      	movne	r0, #2
   81e86:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
   81e88:	2000      	movs	r0, #0
			}
		}

		return xReturn;
	}
   81e8a:	4770      	bx	lr
   81e8c:	2007abf0 	.word	0x2007abf0
   81e90:	2007ab98 	.word	0x2007ab98

00081e94 <vTaskPriorityInherit>:
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81e94:	2800      	cmp	r0, #0
   81e96:	d031      	beq.n	81efc <vTaskPriorityInherit+0x68>
	{
   81e98:	b538      	push	{r3, r4, r5, lr}
   81e9a:	4605      	mov	r5, r0
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81e9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81e9e:	4918      	ldr	r1, [pc, #96]	; (81f00 <vTaskPriorityInherit+0x6c>)
   81ea0:	6809      	ldr	r1, [r1, #0]
   81ea2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81ea4:	428b      	cmp	r3, r1
   81ea6:	d211      	bcs.n	81ecc <vTaskPriorityInherit+0x38>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81ea8:	4915      	ldr	r1, [pc, #84]	; (81f00 <vTaskPriorityInherit+0x6c>)
   81eaa:	6809      	ldr	r1, [r1, #0]
   81eac:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
   81eae:	f1c1 0105 	rsb	r1, r1, #5
   81eb2:	6181      	str	r1, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81eb4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81eb8:	4912      	ldr	r1, [pc, #72]	; (81f04 <vTaskPriorityInherit+0x70>)
   81eba:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   81ebe:	6941      	ldr	r1, [r0, #20]
   81ec0:	4299      	cmp	r1, r3
   81ec2:	d004      	beq.n	81ece <vTaskPriorityInherit+0x3a>
					prvAddTaskToReadyQueue( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81ec4:	4b0e      	ldr	r3, [pc, #56]	; (81f00 <vTaskPriorityInherit+0x6c>)
   81ec6:	681b      	ldr	r3, [r3, #0]
   81ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81eca:	62c3      	str	r3, [r0, #44]	; 0x2c
   81ecc:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81ece:	1d04      	adds	r4, r0, #4
   81ed0:	4620      	mov	r0, r4
   81ed2:	4b0d      	ldr	r3, [pc, #52]	; (81f08 <vTaskPriorityInherit+0x74>)
   81ed4:	4798      	blx	r3
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81ed6:	4b0a      	ldr	r3, [pc, #40]	; (81f00 <vTaskPriorityInherit+0x6c>)
   81ed8:	681b      	ldr	r3, [r3, #0]
   81eda:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   81edc:	62e8      	str	r0, [r5, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81ede:	4b0b      	ldr	r3, [pc, #44]	; (81f0c <vTaskPriorityInherit+0x78>)
   81ee0:	681b      	ldr	r3, [r3, #0]
   81ee2:	4298      	cmp	r0, r3
   81ee4:	bf84      	itt	hi
   81ee6:	4b09      	ldrhi	r3, [pc, #36]	; (81f0c <vTaskPriorityInherit+0x78>)
   81ee8:	6018      	strhi	r0, [r3, #0]
   81eea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81eee:	4621      	mov	r1, r4
   81ef0:	4b04      	ldr	r3, [pc, #16]	; (81f04 <vTaskPriorityInherit+0x70>)
   81ef2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81ef6:	4b06      	ldr	r3, [pc, #24]	; (81f10 <vTaskPriorityInherit+0x7c>)
   81ef8:	4798      	blx	r3
   81efa:	bd38      	pop	{r3, r4, r5, pc}
   81efc:	4770      	bx	lr
   81efe:	bf00      	nop
   81f00:	2007ab20 	.word	0x2007ab20
   81f04:	2007ab2c 	.word	0x2007ab2c
   81f08:	00080dd3 	.word	0x00080dd3
   81f0c:	2007aba4 	.word	0x2007aba4
   81f10:	00080d7d 	.word	0x00080d7d

00081f14 <vTaskPriorityDisinherit>:

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81f14:	b1e8      	cbz	r0, 81f52 <vTaskPriorityDisinherit+0x3e>
	{
   81f16:	b538      	push	{r3, r4, r5, lr}
   81f18:	4604      	mov	r4, r0
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81f1a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
   81f1c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   81f1e:	4291      	cmp	r1, r2
   81f20:	d016      	beq.n	81f50 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81f22:	1d05      	adds	r5, r0, #4
   81f24:	4628      	mov	r0, r5
   81f26:	4b0b      	ldr	r3, [pc, #44]	; (81f54 <vTaskPriorityDisinherit+0x40>)
   81f28:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81f2a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   81f2c:	62e0      	str	r0, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81f2e:	f1c0 0305 	rsb	r3, r0, #5
   81f32:	61a3      	str	r3, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81f34:	4b08      	ldr	r3, [pc, #32]	; (81f58 <vTaskPriorityDisinherit+0x44>)
   81f36:	681b      	ldr	r3, [r3, #0]
   81f38:	4298      	cmp	r0, r3
   81f3a:	bf84      	itt	hi
   81f3c:	4b06      	ldrhi	r3, [pc, #24]	; (81f58 <vTaskPriorityDisinherit+0x44>)
   81f3e:	6018      	strhi	r0, [r3, #0]
   81f40:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   81f44:	4629      	mov	r1, r5
   81f46:	4b05      	ldr	r3, [pc, #20]	; (81f5c <vTaskPriorityDisinherit+0x48>)
   81f48:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   81f4c:	4b04      	ldr	r3, [pc, #16]	; (81f60 <vTaskPriorityDisinherit+0x4c>)
   81f4e:	4798      	blx	r3
   81f50:	bd38      	pop	{r3, r4, r5, pc}
   81f52:	4770      	bx	lr
   81f54:	00080dd3 	.word	0x00080dd3
   81f58:	2007aba4 	.word	0x2007aba4
   81f5c:	2007ab2c 	.word	0x2007ab2c
   81f60:	00080d7d 	.word	0x00080d7d

00081f64 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81f64:	b508      	push	{r3, lr}
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81f66:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81f68:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
   81f6a:	4291      	cmp	r1, r2
   81f6c:	d80c      	bhi.n	81f88 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81f6e:	1ad2      	subs	r2, r2, r3
   81f70:	6983      	ldr	r3, [r0, #24]
   81f72:	429a      	cmp	r2, r3
   81f74:	d301      	bcc.n	81f7a <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81f76:	2001      	movs	r0, #1
   81f78:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81f7a:	1d01      	adds	r1, r0, #4
   81f7c:	4b09      	ldr	r3, [pc, #36]	; (81fa4 <prvInsertTimerInActiveList+0x40>)
   81f7e:	6818      	ldr	r0, [r3, #0]
   81f80:	4b09      	ldr	r3, [pc, #36]	; (81fa8 <prvInsertTimerInActiveList+0x44>)
   81f82:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81f84:	2000      	movs	r0, #0
   81f86:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81f88:	429a      	cmp	r2, r3
   81f8a:	d201      	bcs.n	81f90 <prvInsertTimerInActiveList+0x2c>
   81f8c:	4299      	cmp	r1, r3
   81f8e:	d206      	bcs.n	81f9e <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81f90:	1d01      	adds	r1, r0, #4
   81f92:	4b06      	ldr	r3, [pc, #24]	; (81fac <prvInsertTimerInActiveList+0x48>)
   81f94:	6818      	ldr	r0, [r3, #0]
   81f96:	4b04      	ldr	r3, [pc, #16]	; (81fa8 <prvInsertTimerInActiveList+0x44>)
   81f98:	4798      	blx	r3
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81f9a:	2000      	movs	r0, #0
   81f9c:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
   81f9e:	2001      	movs	r0, #1
		}
	}

	return xProcessTimerNow;
}
   81fa0:	bd08      	pop	{r3, pc}
   81fa2:	bf00      	nop
   81fa4:	2007ac24 	.word	0x2007ac24
   81fa8:	00080d99 	.word	0x00080d99
   81fac:	2007ac20 	.word	0x2007ac20

00081fb0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81fb0:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81fb2:	4b0d      	ldr	r3, [pc, #52]	; (81fe8 <prvCheckForValidListAndQueue+0x38>)
   81fb4:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81fb6:	4b0d      	ldr	r3, [pc, #52]	; (81fec <prvCheckForValidListAndQueue+0x3c>)
   81fb8:	681b      	ldr	r3, [r3, #0]
   81fba:	b113      	cbz	r3, 81fc2 <prvCheckForValidListAndQueue+0x12>
			pxCurrentTimerList = &xActiveTimerList1;
			pxOverflowTimerList = &xActiveTimerList2;
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
		}
	}
	taskEXIT_CRITICAL();
   81fbc:	4b0c      	ldr	r3, [pc, #48]	; (81ff0 <prvCheckForValidListAndQueue+0x40>)
   81fbe:	4798      	blx	r3
   81fc0:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
   81fc2:	4d0c      	ldr	r5, [pc, #48]	; (81ff4 <prvCheckForValidListAndQueue+0x44>)
   81fc4:	4628      	mov	r0, r5
   81fc6:	4e0c      	ldr	r6, [pc, #48]	; (81ff8 <prvCheckForValidListAndQueue+0x48>)
   81fc8:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81fca:	4c0c      	ldr	r4, [pc, #48]	; (81ffc <prvCheckForValidListAndQueue+0x4c>)
   81fcc:	4620      	mov	r0, r4
   81fce:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81fd0:	4b0b      	ldr	r3, [pc, #44]	; (82000 <prvCheckForValidListAndQueue+0x50>)
   81fd2:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81fd4:	4b0b      	ldr	r3, [pc, #44]	; (82004 <prvCheckForValidListAndQueue+0x54>)
   81fd6:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81fd8:	2200      	movs	r2, #0
   81fda:	210c      	movs	r1, #12
   81fdc:	2005      	movs	r0, #5
   81fde:	4b0a      	ldr	r3, [pc, #40]	; (82008 <prvCheckForValidListAndQueue+0x58>)
   81fe0:	4798      	blx	r3
   81fe2:	4b02      	ldr	r3, [pc, #8]	; (81fec <prvCheckForValidListAndQueue+0x3c>)
   81fe4:	6018      	str	r0, [r3, #0]
   81fe6:	e7e9      	b.n	81fbc <prvCheckForValidListAndQueue+0xc>
   81fe8:	00080e69 	.word	0x00080e69
   81fec:	2007ac54 	.word	0x2007ac54
   81ff0:	00080e89 	.word	0x00080e89
   81ff4:	2007ac28 	.word	0x2007ac28
   81ff8:	00080d61 	.word	0x00080d61
   81ffc:	2007ac3c 	.word	0x2007ac3c
   82000:	2007ac20 	.word	0x2007ac20
   82004:	2007ac24 	.word	0x2007ac24
   82008:	00081261 	.word	0x00081261

0008200c <xTimerCreateTimerTask>:
{
   8200c:	b510      	push	{r4, lr}
   8200e:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
   82010:	4b0b      	ldr	r3, [pc, #44]	; (82040 <xTimerCreateTimerTask+0x34>)
   82012:	4798      	blx	r3
	if( xTimerQueue != NULL )
   82014:	4b0b      	ldr	r3, [pc, #44]	; (82044 <xTimerCreateTimerTask+0x38>)
   82016:	681b      	ldr	r3, [r3, #0]
   82018:	b173      	cbz	r3, 82038 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   8201a:	2300      	movs	r3, #0
   8201c:	9303      	str	r3, [sp, #12]
   8201e:	9302      	str	r3, [sp, #8]
   82020:	9301      	str	r3, [sp, #4]
   82022:	2204      	movs	r2, #4
   82024:	9200      	str	r2, [sp, #0]
   82026:	f44f 7282 	mov.w	r2, #260	; 0x104
   8202a:	4907      	ldr	r1, [pc, #28]	; (82048 <xTimerCreateTimerTask+0x3c>)
   8202c:	4807      	ldr	r0, [pc, #28]	; (8204c <xTimerCreateTimerTask+0x40>)
   8202e:	4c08      	ldr	r4, [pc, #32]	; (82050 <xTimerCreateTimerTask+0x44>)
   82030:	47a0      	blx	r4
	configASSERT( xReturn );
   82032:	b108      	cbz	r0, 82038 <xTimerCreateTimerTask+0x2c>
}
   82034:	b004      	add	sp, #16
   82036:	bd10      	pop	{r4, pc}
	configASSERT( xReturn );
   82038:	4b06      	ldr	r3, [pc, #24]	; (82054 <xTimerCreateTimerTask+0x48>)
   8203a:	4798      	blx	r3
   8203c:	bf00      	nop
   8203e:	e7fd      	b.n	8203c <xTimerCreateTimerTask+0x30>
   82040:	00081fb1 	.word	0x00081fb1
   82044:	2007ac54 	.word	0x2007ac54
   82048:	00085c68 	.word	0x00085c68
   8204c:	0008215d 	.word	0x0008215d
   82050:	0008167d 	.word	0x0008167d
   82054:	00080e59 	.word	0x00080e59

00082058 <xTimerGenericCommand>:
{
   82058:	b530      	push	{r4, r5, lr}
   8205a:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
   8205c:	4c0f      	ldr	r4, [pc, #60]	; (8209c <xTimerGenericCommand+0x44>)
   8205e:	6825      	ldr	r5, [r4, #0]
   82060:	b1d5      	cbz	r5, 82098 <xTimerGenericCommand+0x40>
   82062:	461c      	mov	r4, r3
		xMessage.xMessageID = xCommandID;
   82064:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82066:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82068:	9003      	str	r0, [sp, #12]
		if( pxHigherPriorityTaskWoken == NULL )
   8206a:	b13b      	cbz	r3, 8207c <xTimerGenericCommand+0x24>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   8206c:	2300      	movs	r3, #0
   8206e:	4622      	mov	r2, r4
   82070:	a901      	add	r1, sp, #4
   82072:	4628      	mov	r0, r5
   82074:	4c0a      	ldr	r4, [pc, #40]	; (820a0 <xTimerGenericCommand+0x48>)
   82076:	47a0      	blx	r4
}
   82078:	b005      	add	sp, #20
   8207a:	bd30      	pop	{r4, r5, pc}
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   8207c:	4b09      	ldr	r3, [pc, #36]	; (820a4 <xTimerGenericCommand+0x4c>)
   8207e:	4798      	blx	r3
   82080:	2801      	cmp	r0, #1
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82082:	f04f 0300 	mov.w	r3, #0
   82086:	bf0c      	ite	eq
   82088:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   8208a:	461a      	movne	r2, r3
   8208c:	a901      	add	r1, sp, #4
   8208e:	4803      	ldr	r0, [pc, #12]	; (8209c <xTimerGenericCommand+0x44>)
   82090:	6800      	ldr	r0, [r0, #0]
   82092:	4c05      	ldr	r4, [pc, #20]	; (820a8 <xTimerGenericCommand+0x50>)
   82094:	47a0      	blx	r4
   82096:	e7ef      	b.n	82078 <xTimerGenericCommand+0x20>
portBASE_TYPE xReturn = pdFAIL;
   82098:	2000      	movs	r0, #0
	return xReturn;
   8209a:	e7ed      	b.n	82078 <xTimerGenericCommand+0x20>
   8209c:	2007ac54 	.word	0x2007ac54
   820a0:	000813dd 	.word	0x000813dd
   820a4:	00081e75 	.word	0x00081e75
   820a8:	000812b5 	.word	0x000812b5

000820ac <prvSampleTimeNow>:
{
   820ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   820b0:	b082      	sub	sp, #8
   820b2:	4681      	mov	r9, r0
	xTimeNow = xTaskGetTickCount();
   820b4:	4b21      	ldr	r3, [pc, #132]	; (8213c <prvSampleTimeNow+0x90>)
   820b6:	4798      	blx	r3
   820b8:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
   820ba:	4b21      	ldr	r3, [pc, #132]	; (82140 <prvSampleTimeNow+0x94>)
   820bc:	681b      	ldr	r3, [r3, #0]
   820be:	4298      	cmp	r0, r3
   820c0:	d315      	bcc.n	820ee <prvSampleTimeNow+0x42>
		*pxTimerListsWereSwitched = pdFALSE;
   820c2:	2300      	movs	r3, #0
   820c4:	f8c9 3000 	str.w	r3, [r9]
	xLastTime = xTimeNow;
   820c8:	4b1d      	ldr	r3, [pc, #116]	; (82140 <prvSampleTimeNow+0x94>)
   820ca:	f8c3 8000 	str.w	r8, [r3]
}
   820ce:	4640      	mov	r0, r8
   820d0:	b002      	add	sp, #8
   820d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   820d6:	2100      	movs	r1, #0
   820d8:	9100      	str	r1, [sp, #0]
   820da:	460b      	mov	r3, r1
   820dc:	4652      	mov	r2, sl
   820de:	4620      	mov	r0, r4
   820e0:	4c18      	ldr	r4, [pc, #96]	; (82144 <prvSampleTimeNow+0x98>)
   820e2:	47a0      	blx	r4
				configASSERT( xResult );
   820e4:	b928      	cbnz	r0, 820f2 <prvSampleTimeNow+0x46>
   820e6:	4b18      	ldr	r3, [pc, #96]	; (82148 <prvSampleTimeNow+0x9c>)
   820e8:	4798      	blx	r3
   820ea:	bf00      	nop
   820ec:	e7fd      	b.n	820ea <prvSampleTimeNow+0x3e>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   820ee:	4e17      	ldr	r6, [pc, #92]	; (8214c <prvSampleTimeNow+0xa0>)
		uxListRemove( &( pxTimer->xTimerListItem ) );
   820f0:	4f17      	ldr	r7, [pc, #92]	; (82150 <prvSampleTimeNow+0xa4>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   820f2:	6833      	ldr	r3, [r6, #0]
   820f4:	681a      	ldr	r2, [r3, #0]
   820f6:	b1c2      	cbz	r2, 8212a <prvSampleTimeNow+0x7e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   820f8:	68da      	ldr	r2, [r3, #12]
   820fa:	f8d2 a000 	ldr.w	sl, [r2]
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   820fe:	68db      	ldr	r3, [r3, #12]
   82100:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82102:	1d25      	adds	r5, r4, #4
   82104:	4628      	mov	r0, r5
   82106:	47b8      	blx	r7
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82108:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8210a:	4620      	mov	r0, r4
   8210c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   8210e:	69e3      	ldr	r3, [r4, #28]
   82110:	2b01      	cmp	r3, #1
   82112:	d1ee      	bne.n	820f2 <prvSampleTimeNow+0x46>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82114:	69a3      	ldr	r3, [r4, #24]
   82116:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   82118:	459a      	cmp	sl, r3
   8211a:	d2dc      	bcs.n	820d6 <prvSampleTimeNow+0x2a>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   8211c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   8211e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82120:	4629      	mov	r1, r5
   82122:	6830      	ldr	r0, [r6, #0]
   82124:	4b0b      	ldr	r3, [pc, #44]	; (82154 <prvSampleTimeNow+0xa8>)
   82126:	4798      	blx	r3
   82128:	e7e3      	b.n	820f2 <prvSampleTimeNow+0x46>
	pxCurrentTimerList = pxOverflowTimerList;
   8212a:	4a0b      	ldr	r2, [pc, #44]	; (82158 <prvSampleTimeNow+0xac>)
   8212c:	6810      	ldr	r0, [r2, #0]
   8212e:	4907      	ldr	r1, [pc, #28]	; (8214c <prvSampleTimeNow+0xa0>)
   82130:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
   82132:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
   82134:	2301      	movs	r3, #1
   82136:	f8c9 3000 	str.w	r3, [r9]
   8213a:	e7c5      	b.n	820c8 <prvSampleTimeNow+0x1c>
   8213c:	000818f9 	.word	0x000818f9
   82140:	2007ac50 	.word	0x2007ac50
   82144:	00082059 	.word	0x00082059
   82148:	00080e59 	.word	0x00080e59
   8214c:	2007ac20 	.word	0x2007ac20
   82150:	00080dd3 	.word	0x00080dd3
   82154:	00080d99 	.word	0x00080d99
   82158:	2007ac24 	.word	0x2007ac24

0008215c <prvTimerTask>:
{
   8215c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82160:	b086      	sub	sp, #24
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82162:	f8df 8168 	ldr.w	r8, [pc, #360]	; 822cc <prvTimerTask+0x170>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82166:	4b4d      	ldr	r3, [pc, #308]	; (8229c <prvTimerTask+0x140>)
   82168:	681b      	ldr	r3, [r3, #0]
   8216a:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   8216c:	2a00      	cmp	r2, #0
   8216e:	f000 8089 	beq.w	82284 <prvTimerTask+0x128>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82172:	68db      	ldr	r3, [r3, #12]
   82174:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
   82176:	4b4a      	ldr	r3, [pc, #296]	; (822a0 <prvTimerTask+0x144>)
   82178:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   8217a:	a803      	add	r0, sp, #12
   8217c:	4b49      	ldr	r3, [pc, #292]	; (822a4 <prvTimerTask+0x148>)
   8217e:	4798      	blx	r3
   82180:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82182:	9b03      	ldr	r3, [sp, #12]
   82184:	2b00      	cmp	r3, #0
   82186:	f040 8086 	bne.w	82296 <prvTimerTask+0x13a>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   8218a:	42a8      	cmp	r0, r5
   8218c:	d20f      	bcs.n	821ae <prvTimerTask+0x52>
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   8218e:	1ba9      	subs	r1, r5, r6
   82190:	4b45      	ldr	r3, [pc, #276]	; (822a8 <prvTimerTask+0x14c>)
   82192:	6818      	ldr	r0, [r3, #0]
   82194:	4b45      	ldr	r3, [pc, #276]	; (822ac <prvTimerTask+0x150>)
   82196:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   82198:	4b45      	ldr	r3, [pc, #276]	; (822b0 <prvTimerTask+0x154>)
   8219a:	4798      	blx	r3
   8219c:	b908      	cbnz	r0, 821a2 <prvTimerTask+0x46>
					portYIELD_WITHIN_API();
   8219e:	4b45      	ldr	r3, [pc, #276]	; (822b4 <prvTimerTask+0x158>)
   821a0:	4798      	blx	r3
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   821a2:	a802      	add	r0, sp, #8
   821a4:	4b3f      	ldr	r3, [pc, #252]	; (822a4 <prvTimerTask+0x148>)
   821a6:	4798      	blx	r3
   821a8:	4607      	mov	r7, r0
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   821aa:	4e3f      	ldr	r6, [pc, #252]	; (822a8 <prvTimerTask+0x14c>)
   821ac:	e036      	b.n	8221c <prvTimerTask+0xc0>
				xTaskResumeAll();
   821ae:	4b40      	ldr	r3, [pc, #256]	; (822b0 <prvTimerTask+0x154>)
   821b0:	4798      	blx	r3
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   821b2:	4b3a      	ldr	r3, [pc, #232]	; (8229c <prvTimerTask+0x140>)
   821b4:	681b      	ldr	r3, [r3, #0]
   821b6:	68db      	ldr	r3, [r3, #12]
   821b8:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   821ba:	1d20      	adds	r0, r4, #4
   821bc:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   821be:	69e3      	ldr	r3, [r4, #28]
   821c0:	2b01      	cmp	r3, #1
   821c2:	d114      	bne.n	821ee <prvTimerTask+0x92>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   821c4:	69a1      	ldr	r1, [r4, #24]
   821c6:	462b      	mov	r3, r5
   821c8:	4632      	mov	r2, r6
   821ca:	4429      	add	r1, r5
   821cc:	4620      	mov	r0, r4
   821ce:	4e3a      	ldr	r6, [pc, #232]	; (822b8 <prvTimerTask+0x15c>)
   821d0:	47b0      	blx	r6
   821d2:	2801      	cmp	r0, #1
   821d4:	d10b      	bne.n	821ee <prvTimerTask+0x92>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   821d6:	2100      	movs	r1, #0
   821d8:	9100      	str	r1, [sp, #0]
   821da:	460b      	mov	r3, r1
   821dc:	462a      	mov	r2, r5
   821de:	4620      	mov	r0, r4
   821e0:	4d36      	ldr	r5, [pc, #216]	; (822bc <prvTimerTask+0x160>)
   821e2:	47a8      	blx	r5
			configASSERT( xResult );
   821e4:	b918      	cbnz	r0, 821ee <prvTimerTask+0x92>
   821e6:	4b36      	ldr	r3, [pc, #216]	; (822c0 <prvTimerTask+0x164>)
   821e8:	4798      	blx	r3
   821ea:	bf00      	nop
   821ec:	e7fd      	b.n	821ea <prvTimerTask+0x8e>
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   821ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
   821f0:	4620      	mov	r0, r4
   821f2:	4798      	blx	r3
   821f4:	e7d5      	b.n	821a2 <prvTimerTask+0x46>
		xNextExpireTime = ( portTickType ) 0U;
   821f6:	2500      	movs	r5, #0
   821f8:	e7c9      	b.n	8218e <prvTimerTask+0x32>
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   821fa:	9904      	ldr	r1, [sp, #16]
   821fc:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   821fe:	b131      	cbz	r1, 8220e <prvTimerTask+0xb2>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82200:	463b      	mov	r3, r7
   82202:	463a      	mov	r2, r7
   82204:	4439      	add	r1, r7
   82206:	4620      	mov	r0, r4
   82208:	4c2b      	ldr	r4, [pc, #172]	; (822b8 <prvTimerTask+0x15c>)
   8220a:	47a0      	blx	r4
   8220c:	e006      	b.n	8221c <prvTimerTask+0xc0>
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8220e:	4b2c      	ldr	r3, [pc, #176]	; (822c0 <prvTimerTask+0x164>)
   82210:	4798      	blx	r3
   82212:	bf00      	nop
   82214:	e7fd      	b.n	82212 <prvTimerTask+0xb6>
				vPortFree( pxTimer );
   82216:	4620      	mov	r0, r4
   82218:	4b2a      	ldr	r3, [pc, #168]	; (822c4 <prvTimerTask+0x168>)
   8221a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   8221c:	4d2a      	ldr	r5, [pc, #168]	; (822c8 <prvTimerTask+0x16c>)
   8221e:	2300      	movs	r3, #0
   82220:	461a      	mov	r2, r3
   82222:	a903      	add	r1, sp, #12
   82224:	6830      	ldr	r0, [r6, #0]
   82226:	47a8      	blx	r5
   82228:	2800      	cmp	r0, #0
   8222a:	d09c      	beq.n	82166 <prvTimerTask+0xa>
		pxTimer = xMessage.pxTimer;
   8222c:	9c05      	ldr	r4, [sp, #20]
		if( pxTimer != NULL )
   8222e:	b11c      	cbz	r4, 82238 <prvTimerTask+0xdc>
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82230:	6963      	ldr	r3, [r4, #20]
   82232:	b10b      	cbz	r3, 82238 <prvTimerTask+0xdc>
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82234:	1d20      	adds	r0, r4, #4
   82236:	47c0      	blx	r8
		switch( xMessage.xMessageID )
   82238:	9b03      	ldr	r3, [sp, #12]
   8223a:	2b02      	cmp	r3, #2
   8223c:	d0dd      	beq.n	821fa <prvTimerTask+0x9e>
   8223e:	2b03      	cmp	r3, #3
   82240:	d0e9      	beq.n	82216 <prvTimerTask+0xba>
   82242:	2b00      	cmp	r3, #0
   82244:	d1eb      	bne.n	8221e <prvTimerTask+0xc2>
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82246:	9904      	ldr	r1, [sp, #16]
   82248:	69a0      	ldr	r0, [r4, #24]
   8224a:	460b      	mov	r3, r1
   8224c:	463a      	mov	r2, r7
   8224e:	4401      	add	r1, r0
   82250:	4620      	mov	r0, r4
   82252:	4d19      	ldr	r5, [pc, #100]	; (822b8 <prvTimerTask+0x15c>)
   82254:	47a8      	blx	r5
   82256:	2801      	cmp	r0, #1
   82258:	d1e0      	bne.n	8221c <prvTimerTask+0xc0>
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8225a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8225c:	4620      	mov	r0, r4
   8225e:	4798      	blx	r3
					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82260:	69e3      	ldr	r3, [r4, #28]
   82262:	2b01      	cmp	r3, #1
   82264:	d1da      	bne.n	8221c <prvTimerTask+0xc0>
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82266:	69a2      	ldr	r2, [r4, #24]
   82268:	2100      	movs	r1, #0
   8226a:	9100      	str	r1, [sp, #0]
   8226c:	460b      	mov	r3, r1
   8226e:	9804      	ldr	r0, [sp, #16]
   82270:	4402      	add	r2, r0
   82272:	4620      	mov	r0, r4
   82274:	4c11      	ldr	r4, [pc, #68]	; (822bc <prvTimerTask+0x160>)
   82276:	47a0      	blx	r4
						configASSERT( xResult );
   82278:	2800      	cmp	r0, #0
   8227a:	d1cf      	bne.n	8221c <prvTimerTask+0xc0>
   8227c:	4b10      	ldr	r3, [pc, #64]	; (822c0 <prvTimerTask+0x164>)
   8227e:	4798      	blx	r3
   82280:	bf00      	nop
   82282:	e7fd      	b.n	82280 <prvTimerTask+0x124>
	vTaskSuspendAll();
   82284:	4b06      	ldr	r3, [pc, #24]	; (822a0 <prvTimerTask+0x144>)
   82286:	4798      	blx	r3
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82288:	a803      	add	r0, sp, #12
   8228a:	4b06      	ldr	r3, [pc, #24]	; (822a4 <prvTimerTask+0x148>)
   8228c:	4798      	blx	r3
   8228e:	4606      	mov	r6, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82290:	9b03      	ldr	r3, [sp, #12]
   82292:	2b00      	cmp	r3, #0
   82294:	d0af      	beq.n	821f6 <prvTimerTask+0x9a>
			xTaskResumeAll();
   82296:	4b06      	ldr	r3, [pc, #24]	; (822b0 <prvTimerTask+0x154>)
   82298:	4798      	blx	r3
   8229a:	e782      	b.n	821a2 <prvTimerTask+0x46>
   8229c:	2007ac20 	.word	0x2007ac20
   822a0:	000818e9 	.word	0x000818e9
   822a4:	000820ad 	.word	0x000820ad
   822a8:	2007ac54 	.word	0x2007ac54
   822ac:	000815d5 	.word	0x000815d5
   822b0:	00081a61 	.word	0x00081a61
   822b4:	00080e49 	.word	0x00080e49
   822b8:	00081f65 	.word	0x00081f65
   822bc:	00082059 	.word	0x00082059
   822c0:	00080e59 	.word	0x00080e59
   822c4:	00081085 	.word	0x00081085
   822c8:	0008146d 	.word	0x0008146d
   822cc:	00080dd3 	.word	0x00080dd3

000822d0 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   822d0:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   822d2:	480e      	ldr	r0, [pc, #56]	; (8230c <sysclk_init+0x3c>)
   822d4:	4b0e      	ldr	r3, [pc, #56]	; (82310 <sysclk_init+0x40>)
   822d6:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   822d8:	213e      	movs	r1, #62	; 0x3e
   822da:	2000      	movs	r0, #0
   822dc:	4b0d      	ldr	r3, [pc, #52]	; (82314 <sysclk_init+0x44>)
   822de:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   822e0:	4c0d      	ldr	r4, [pc, #52]	; (82318 <sysclk_init+0x48>)
   822e2:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   822e4:	2800      	cmp	r0, #0
   822e6:	d0fc      	beq.n	822e2 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   822e8:	4b0c      	ldr	r3, [pc, #48]	; (8231c <sysclk_init+0x4c>)
   822ea:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   822ec:	4a0c      	ldr	r2, [pc, #48]	; (82320 <sysclk_init+0x50>)
   822ee:	4b0d      	ldr	r3, [pc, #52]	; (82324 <sysclk_init+0x54>)
   822f0:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   822f2:	4c0d      	ldr	r4, [pc, #52]	; (82328 <sysclk_init+0x58>)
   822f4:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   822f6:	2800      	cmp	r0, #0
   822f8:	d0fc      	beq.n	822f4 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   822fa:	2010      	movs	r0, #16
   822fc:	4b0b      	ldr	r3, [pc, #44]	; (8232c <sysclk_init+0x5c>)
   822fe:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   82300:	4b0b      	ldr	r3, [pc, #44]	; (82330 <sysclk_init+0x60>)
   82302:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   82304:	4801      	ldr	r0, [pc, #4]	; (8230c <sysclk_init+0x3c>)
   82306:	4b02      	ldr	r3, [pc, #8]	; (82310 <sysclk_init+0x40>)
   82308:	4798      	blx	r3
   8230a:	bd10      	pop	{r4, pc}
   8230c:	0501bd00 	.word	0x0501bd00
   82310:	200700a5 	.word	0x200700a5
   82314:	00082765 	.word	0x00082765
   82318:	000827b9 	.word	0x000827b9
   8231c:	000827c9 	.word	0x000827c9
   82320:	200d3f01 	.word	0x200d3f01
   82324:	400e0600 	.word	0x400e0600
   82328:	000827d9 	.word	0x000827d9
   8232c:	00082701 	.word	0x00082701
   82330:	000828d9 	.word	0x000828d9

00082334 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   82334:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   82336:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8233a:	4b16      	ldr	r3, [pc, #88]	; (82394 <board_init+0x60>)
   8233c:	605a      	str	r2, [r3, #4]
   8233e:	200b      	movs	r0, #11
   82340:	4c15      	ldr	r4, [pc, #84]	; (82398 <board_init+0x64>)
   82342:	47a0      	blx	r4
   82344:	200c      	movs	r0, #12
   82346:	47a0      	blx	r4
   82348:	200d      	movs	r0, #13
   8234a:	47a0      	blx	r4
   8234c:	200e      	movs	r0, #14
   8234e:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   82350:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82354:	203b      	movs	r0, #59	; 0x3b
   82356:	4c11      	ldr	r4, [pc, #68]	; (8239c <board_init+0x68>)
   82358:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   8235a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8235e:	2055      	movs	r0, #85	; 0x55
   82360:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   82362:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82366:	2056      	movs	r0, #86	; 0x56
   82368:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   8236a:	490d      	ldr	r1, [pc, #52]	; (823a0 <board_init+0x6c>)
   8236c:	2068      	movs	r0, #104	; 0x68
   8236e:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   82370:	490c      	ldr	r1, [pc, #48]	; (823a4 <board_init+0x70>)
   82372:	205c      	movs	r0, #92	; 0x5c
   82374:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   82376:	4a0c      	ldr	r2, [pc, #48]	; (823a8 <board_init+0x74>)
   82378:	f44f 7140 	mov.w	r1, #768	; 0x300
   8237c:	480b      	ldr	r0, [pc, #44]	; (823ac <board_init+0x78>)
   8237e:	4b0c      	ldr	r3, [pc, #48]	; (823b0 <board_init+0x7c>)
   82380:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   82382:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82386:	202b      	movs	r0, #43	; 0x2b
   82388:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   8238a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8238e:	202a      	movs	r0, #42	; 0x2a
   82390:	47a0      	blx	r4
   82392:	bd10      	pop	{r4, pc}
   82394:	400e1a50 	.word	0x400e1a50
   82398:	000827e9 	.word	0x000827e9
   8239c:	00082485 	.word	0x00082485
   823a0:	28000079 	.word	0x28000079
   823a4:	28000001 	.word	0x28000001
   823a8:	08000001 	.word	0x08000001
   823ac:	400e0e00 	.word	0x400e0e00
   823b0:	00082555 	.word	0x00082555

000823b4 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   823b4:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   823b6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   823ba:	d016      	beq.n	823ea <pio_set_peripheral+0x36>
   823bc:	d80b      	bhi.n	823d6 <pio_set_peripheral+0x22>
   823be:	b149      	cbz	r1, 823d4 <pio_set_peripheral+0x20>
   823c0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   823c4:	d105      	bne.n	823d2 <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   823c6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   823c8:	6f01      	ldr	r1, [r0, #112]	; 0x70
   823ca:	400b      	ands	r3, r1
   823cc:	ea23 0302 	bic.w	r3, r3, r2
   823d0:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   823d2:	6042      	str	r2, [r0, #4]
   823d4:	4770      	bx	lr
	switch (ul_type) {
   823d6:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   823da:	d0fb      	beq.n	823d4 <pio_set_peripheral+0x20>
   823dc:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   823e0:	d0f8      	beq.n	823d4 <pio_set_peripheral+0x20>
   823e2:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   823e6:	d1f4      	bne.n	823d2 <pio_set_peripheral+0x1e>
   823e8:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   823ea:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   823ec:	4313      	orrs	r3, r2
   823ee:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   823f0:	e7ef      	b.n	823d2 <pio_set_peripheral+0x1e>

000823f2 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   823f2:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   823f4:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   823f8:	bf14      	ite	ne
   823fa:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   823fc:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   823fe:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   82402:	bf14      	ite	ne
   82404:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   82406:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   82408:	f012 0f02 	tst.w	r2, #2
   8240c:	d107      	bne.n	8241e <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8240e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   82412:	bf18      	it	ne
   82414:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   82418:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8241a:	6001      	str	r1, [r0, #0]
   8241c:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8241e:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   82422:	e7f9      	b.n	82418 <pio_set_input+0x26>

00082424 <pio_set_output>:
{
   82424:	b410      	push	{r4}
   82426:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   82428:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   8242a:	b944      	cbnz	r4, 8243e <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   8242c:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8242e:	b143      	cbz	r3, 82442 <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   82430:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   82432:	b942      	cbnz	r2, 82446 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   82434:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   82436:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   82438:	6001      	str	r1, [r0, #0]
}
   8243a:	bc10      	pop	{r4}
   8243c:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8243e:	6641      	str	r1, [r0, #100]	; 0x64
   82440:	e7f5      	b.n	8242e <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   82442:	6541      	str	r1, [r0, #84]	; 0x54
   82444:	e7f5      	b.n	82432 <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   82446:	6301      	str	r1, [r0, #48]	; 0x30
   82448:	e7f5      	b.n	82436 <pio_set_output+0x12>

0008244a <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   8244a:	f012 0f10 	tst.w	r2, #16
   8244e:	d010      	beq.n	82472 <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   82450:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   82454:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   82458:	bf14      	ite	ne
   8245a:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   8245e:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   82462:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   82466:	bf14      	ite	ne
   82468:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   8246c:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   82470:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   82472:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   82476:	4770      	bx	lr

00082478 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   82478:	6401      	str	r1, [r0, #64]	; 0x40
   8247a:	4770      	bx	lr

0008247c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8247c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8247e:	4770      	bx	lr

00082480 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   82480:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   82482:	4770      	bx	lr

00082484 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   82484:	b570      	push	{r4, r5, r6, lr}
   82486:	b082      	sub	sp, #8
   82488:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8248a:	0943      	lsrs	r3, r0, #5
   8248c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   82490:	f203 7307 	addw	r3, r3, #1799	; 0x707
   82494:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   82496:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   8249a:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8249e:	d031      	beq.n	82504 <pio_configure_pin+0x80>
   824a0:	d816      	bhi.n	824d0 <pio_configure_pin+0x4c>
   824a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   824a6:	d01b      	beq.n	824e0 <pio_configure_pin+0x5c>
   824a8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   824ac:	d116      	bne.n	824dc <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   824ae:	f000 001f 	and.w	r0, r0, #31
   824b2:	2601      	movs	r6, #1
   824b4:	4086      	lsls	r6, r0
   824b6:	4632      	mov	r2, r6
   824b8:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   824bc:	4620      	mov	r0, r4
   824be:	4b22      	ldr	r3, [pc, #136]	; (82548 <pio_configure_pin+0xc4>)
   824c0:	4798      	blx	r3
	if (ul_pull_up_enable) {
   824c2:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   824c6:	bf14      	ite	ne
   824c8:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   824ca:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   824cc:	2001      	movs	r0, #1
   824ce:	e017      	b.n	82500 <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   824d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   824d4:	d021      	beq.n	8251a <pio_configure_pin+0x96>
   824d6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   824da:	d01e      	beq.n	8251a <pio_configure_pin+0x96>
		return 0;
   824dc:	2000      	movs	r0, #0
   824de:	e00f      	b.n	82500 <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   824e0:	f000 001f 	and.w	r0, r0, #31
   824e4:	2601      	movs	r6, #1
   824e6:	4086      	lsls	r6, r0
   824e8:	4632      	mov	r2, r6
   824ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   824ee:	4620      	mov	r0, r4
   824f0:	4b15      	ldr	r3, [pc, #84]	; (82548 <pio_configure_pin+0xc4>)
   824f2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   824f4:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   824f8:	bf14      	ite	ne
   824fa:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   824fc:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   824fe:	2001      	movs	r0, #1
}
   82500:	b002      	add	sp, #8
   82502:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   82504:	f000 011f 	and.w	r1, r0, #31
   82508:	2601      	movs	r6, #1
   8250a:	462a      	mov	r2, r5
   8250c:	fa06 f101 	lsl.w	r1, r6, r1
   82510:	4620      	mov	r0, r4
   82512:	4b0e      	ldr	r3, [pc, #56]	; (8254c <pio_configure_pin+0xc8>)
   82514:	4798      	blx	r3
	return 1;
   82516:	4630      	mov	r0, r6
		break;
   82518:	e7f2      	b.n	82500 <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8251a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8251e:	f000 011f 	and.w	r1, r0, #31
   82522:	2601      	movs	r6, #1
   82524:	ea05 0306 	and.w	r3, r5, r6
   82528:	9300      	str	r3, [sp, #0]
   8252a:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8252e:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   82532:	bf14      	ite	ne
   82534:	2200      	movne	r2, #0
   82536:	2201      	moveq	r2, #1
   82538:	fa06 f101 	lsl.w	r1, r6, r1
   8253c:	4620      	mov	r0, r4
   8253e:	4c04      	ldr	r4, [pc, #16]	; (82550 <pio_configure_pin+0xcc>)
   82540:	47a0      	blx	r4
	return 1;
   82542:	4630      	mov	r0, r6
		break;
   82544:	e7dc      	b.n	82500 <pio_configure_pin+0x7c>
   82546:	bf00      	nop
   82548:	000823b5 	.word	0x000823b5
   8254c:	000823f3 	.word	0x000823f3
   82550:	00082425 	.word	0x00082425

00082554 <pio_configure_pin_group>:
{
   82554:	b570      	push	{r4, r5, r6, lr}
   82556:	b082      	sub	sp, #8
   82558:	4605      	mov	r5, r0
   8255a:	460e      	mov	r6, r1
   8255c:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8255e:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   82562:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   82566:	d027      	beq.n	825b8 <pio_configure_pin_group+0x64>
   82568:	d811      	bhi.n	8258e <pio_configure_pin_group+0x3a>
   8256a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   8256e:	d016      	beq.n	8259e <pio_configure_pin_group+0x4a>
   82570:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   82574:	d111      	bne.n	8259a <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   82576:	460a      	mov	r2, r1
   82578:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8257c:	4b19      	ldr	r3, [pc, #100]	; (825e4 <pio_configure_pin_group+0x90>)
   8257e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   82580:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   82584:	bf14      	ite	ne
   82586:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   82588:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   8258a:	2001      	movs	r0, #1
   8258c:	e012      	b.n	825b4 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   8258e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   82592:	d015      	beq.n	825c0 <pio_configure_pin_group+0x6c>
   82594:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   82598:	d012      	beq.n	825c0 <pio_configure_pin_group+0x6c>
		return 0;
   8259a:	2000      	movs	r0, #0
   8259c:	e00a      	b.n	825b4 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   8259e:	460a      	mov	r2, r1
   825a0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   825a4:	4b0f      	ldr	r3, [pc, #60]	; (825e4 <pio_configure_pin_group+0x90>)
   825a6:	4798      	blx	r3
	if (ul_pull_up_enable) {
   825a8:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   825ac:	bf14      	ite	ne
   825ae:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   825b0:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   825b2:	2001      	movs	r0, #1
}
   825b4:	b002      	add	sp, #8
   825b6:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   825b8:	4b0b      	ldr	r3, [pc, #44]	; (825e8 <pio_configure_pin_group+0x94>)
   825ba:	4798      	blx	r3
	return 1;
   825bc:	2001      	movs	r0, #1
		break;
   825be:	e7f9      	b.n	825b4 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   825c0:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   825c4:	f004 0301 	and.w	r3, r4, #1
   825c8:	9300      	str	r3, [sp, #0]
   825ca:	f3c4 0380 	ubfx	r3, r4, #2, #1
   825ce:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   825d2:	bf14      	ite	ne
   825d4:	2200      	movne	r2, #0
   825d6:	2201      	moveq	r2, #1
   825d8:	4631      	mov	r1, r6
   825da:	4628      	mov	r0, r5
   825dc:	4c03      	ldr	r4, [pc, #12]	; (825ec <pio_configure_pin_group+0x98>)
   825de:	47a0      	blx	r4
	return 1;
   825e0:	2001      	movs	r0, #1
		break;
   825e2:	e7e7      	b.n	825b4 <pio_configure_pin_group+0x60>
   825e4:	000823b5 	.word	0x000823b5
   825e8:	000823f3 	.word	0x000823f3
   825ec:	00082425 	.word	0x00082425

000825f0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   825f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   825f4:	4604      	mov	r4, r0
   825f6:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   825f8:	4b0e      	ldr	r3, [pc, #56]	; (82634 <pio_handler_process+0x44>)
   825fa:	4798      	blx	r3
   825fc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   825fe:	4620      	mov	r0, r4
   82600:	4b0d      	ldr	r3, [pc, #52]	; (82638 <pio_handler_process+0x48>)
   82602:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   82604:	4005      	ands	r5, r0
   82606:	d013      	beq.n	82630 <pio_handler_process+0x40>
   82608:	4c0c      	ldr	r4, [pc, #48]	; (8263c <pio_handler_process+0x4c>)
   8260a:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8260e:	e003      	b.n	82618 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   82610:	42b4      	cmp	r4, r6
   82612:	d00d      	beq.n	82630 <pio_handler_process+0x40>
   82614:	3410      	adds	r4, #16
		while (status != 0) {
   82616:	b15d      	cbz	r5, 82630 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   82618:	6820      	ldr	r0, [r4, #0]
   8261a:	4540      	cmp	r0, r8
   8261c:	d1f8      	bne.n	82610 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8261e:	6861      	ldr	r1, [r4, #4]
   82620:	4229      	tst	r1, r5
   82622:	d0f5      	beq.n	82610 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82624:	68e3      	ldr	r3, [r4, #12]
   82626:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   82628:	6863      	ldr	r3, [r4, #4]
   8262a:	ea25 0503 	bic.w	r5, r5, r3
   8262e:	e7ef      	b.n	82610 <pio_handler_process+0x20>
   82630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82634:	0008247d 	.word	0x0008247d
   82638:	00082481 	.word	0x00082481
   8263c:	2007ac58 	.word	0x2007ac58

00082640 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   82640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   82642:	4c18      	ldr	r4, [pc, #96]	; (826a4 <pio_handler_set+0x64>)
   82644:	6826      	ldr	r6, [r4, #0]
   82646:	2e06      	cmp	r6, #6
   82648:	d829      	bhi.n	8269e <pio_handler_set+0x5e>
   8264a:	f04f 0c00 	mov.w	ip, #0
   8264e:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82650:	4f15      	ldr	r7, [pc, #84]	; (826a8 <pio_handler_set+0x68>)
   82652:	e004      	b.n	8265e <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   82654:	3401      	adds	r4, #1
   82656:	b2e4      	uxtb	r4, r4
   82658:	46a4      	mov	ip, r4
   8265a:	42a6      	cmp	r6, r4
   8265c:	d309      	bcc.n	82672 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   8265e:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   82660:	0125      	lsls	r5, r4, #4
   82662:	597d      	ldr	r5, [r7, r5]
   82664:	428d      	cmp	r5, r1
   82666:	d1f5      	bne.n	82654 <pio_handler_set+0x14>
   82668:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   8266c:	686d      	ldr	r5, [r5, #4]
   8266e:	4295      	cmp	r5, r2
   82670:	d1f0      	bne.n	82654 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   82672:	4d0d      	ldr	r5, [pc, #52]	; (826a8 <pio_handler_set+0x68>)
   82674:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   82678:	eb05 040e 	add.w	r4, r5, lr
   8267c:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   82680:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   82682:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   82684:	9906      	ldr	r1, [sp, #24]
   82686:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   82688:	3601      	adds	r6, #1
   8268a:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   8268c:	bf04      	itt	eq
   8268e:	4905      	ldreq	r1, [pc, #20]	; (826a4 <pio_handler_set+0x64>)
   82690:	600e      	streq	r6, [r1, #0]
   82692:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   82694:	461a      	mov	r2, r3
   82696:	4b05      	ldr	r3, [pc, #20]	; (826ac <pio_handler_set+0x6c>)
   82698:	4798      	blx	r3

	return 0;
   8269a:	2000      	movs	r0, #0
   8269c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8269e:	2001      	movs	r0, #1
}
   826a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   826a2:	bf00      	nop
   826a4:	2007acc8 	.word	0x2007acc8
   826a8:	2007ac58 	.word	0x2007ac58
   826ac:	0008244b 	.word	0x0008244b

000826b0 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   826b0:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   826b2:	210b      	movs	r1, #11
   826b4:	4801      	ldr	r0, [pc, #4]	; (826bc <PIOA_Handler+0xc>)
   826b6:	4b02      	ldr	r3, [pc, #8]	; (826c0 <PIOA_Handler+0x10>)
   826b8:	4798      	blx	r3
   826ba:	bd08      	pop	{r3, pc}
   826bc:	400e0e00 	.word	0x400e0e00
   826c0:	000825f1 	.word	0x000825f1

000826c4 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   826c4:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   826c6:	210c      	movs	r1, #12
   826c8:	4801      	ldr	r0, [pc, #4]	; (826d0 <PIOB_Handler+0xc>)
   826ca:	4b02      	ldr	r3, [pc, #8]	; (826d4 <PIOB_Handler+0x10>)
   826cc:	4798      	blx	r3
   826ce:	bd08      	pop	{r3, pc}
   826d0:	400e1000 	.word	0x400e1000
   826d4:	000825f1 	.word	0x000825f1

000826d8 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   826d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   826da:	210d      	movs	r1, #13
   826dc:	4801      	ldr	r0, [pc, #4]	; (826e4 <PIOC_Handler+0xc>)
   826de:	4b02      	ldr	r3, [pc, #8]	; (826e8 <PIOC_Handler+0x10>)
   826e0:	4798      	blx	r3
   826e2:	bd08      	pop	{r3, pc}
   826e4:	400e1200 	.word	0x400e1200
   826e8:	000825f1 	.word	0x000825f1

000826ec <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   826ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   826ee:	210e      	movs	r1, #14
   826f0:	4801      	ldr	r0, [pc, #4]	; (826f8 <PIOD_Handler+0xc>)
   826f2:	4b02      	ldr	r3, [pc, #8]	; (826fc <PIOD_Handler+0x10>)
   826f4:	4798      	blx	r3
   826f6:	bd08      	pop	{r3, pc}
   826f8:	400e1400 	.word	0x400e1400
   826fc:	000825f1 	.word	0x000825f1

00082700 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   82700:	4a17      	ldr	r2, [pc, #92]	; (82760 <pmc_switch_mck_to_pllack+0x60>)
   82702:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   82708:	4318      	orrs	r0, r3
   8270a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8270c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8270e:	f013 0f08 	tst.w	r3, #8
   82712:	d10a      	bne.n	8272a <pmc_switch_mck_to_pllack+0x2a>
   82714:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82718:	4911      	ldr	r1, [pc, #68]	; (82760 <pmc_switch_mck_to_pllack+0x60>)
   8271a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8271c:	f012 0f08 	tst.w	r2, #8
   82720:	d103      	bne.n	8272a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   82722:	3b01      	subs	r3, #1
   82724:	d1f9      	bne.n	8271a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   82726:	2001      	movs	r0, #1
   82728:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8272a:	4a0d      	ldr	r2, [pc, #52]	; (82760 <pmc_switch_mck_to_pllack+0x60>)
   8272c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8272e:	f023 0303 	bic.w	r3, r3, #3
   82732:	f043 0302 	orr.w	r3, r3, #2
   82736:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   82738:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8273a:	f013 0f08 	tst.w	r3, #8
   8273e:	d10a      	bne.n	82756 <pmc_switch_mck_to_pllack+0x56>
   82740:	f44f 6300 	mov.w	r3, #2048	; 0x800
   82744:	4906      	ldr	r1, [pc, #24]	; (82760 <pmc_switch_mck_to_pllack+0x60>)
   82746:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   82748:	f012 0f08 	tst.w	r2, #8
   8274c:	d105      	bne.n	8275a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8274e:	3b01      	subs	r3, #1
   82750:	d1f9      	bne.n	82746 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   82752:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   82754:	4770      	bx	lr
	return 0;
   82756:	2000      	movs	r0, #0
   82758:	4770      	bx	lr
   8275a:	2000      	movs	r0, #0
   8275c:	4770      	bx	lr
   8275e:	bf00      	nop
   82760:	400e0600 	.word	0x400e0600

00082764 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   82764:	b9c8      	cbnz	r0, 8279a <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82766:	4a11      	ldr	r2, [pc, #68]	; (827ac <pmc_switch_mainck_to_xtal+0x48>)
   82768:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8276a:	0209      	lsls	r1, r1, #8
   8276c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8276e:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   82772:	f023 0303 	bic.w	r3, r3, #3
   82776:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8277a:	f043 0301 	orr.w	r3, r3, #1
   8277e:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   82780:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   82782:	6e93      	ldr	r3, [r2, #104]	; 0x68
   82784:	f013 0f01 	tst.w	r3, #1
   82788:	d0fb      	beq.n	82782 <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   8278a:	4a08      	ldr	r2, [pc, #32]	; (827ac <pmc_switch_mainck_to_xtal+0x48>)
   8278c:	6a13      	ldr	r3, [r2, #32]
   8278e:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   82792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82796:	6213      	str	r3, [r2, #32]
   82798:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8279a:	4904      	ldr	r1, [pc, #16]	; (827ac <pmc_switch_mainck_to_xtal+0x48>)
   8279c:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8279e:	4a04      	ldr	r2, [pc, #16]	; (827b0 <pmc_switch_mainck_to_xtal+0x4c>)
   827a0:	401a      	ands	r2, r3
   827a2:	4b04      	ldr	r3, [pc, #16]	; (827b4 <pmc_switch_mainck_to_xtal+0x50>)
   827a4:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   827a6:	620b      	str	r3, [r1, #32]
   827a8:	4770      	bx	lr
   827aa:	bf00      	nop
   827ac:	400e0600 	.word	0x400e0600
   827b0:	fec8fffc 	.word	0xfec8fffc
   827b4:	01370002 	.word	0x01370002

000827b8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   827b8:	4b02      	ldr	r3, [pc, #8]	; (827c4 <pmc_osc_is_ready_mainck+0xc>)
   827ba:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   827bc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   827c0:	4770      	bx	lr
   827c2:	bf00      	nop
   827c4:	400e0600 	.word	0x400e0600

000827c8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   827c8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   827cc:	4b01      	ldr	r3, [pc, #4]	; (827d4 <pmc_disable_pllack+0xc>)
   827ce:	629a      	str	r2, [r3, #40]	; 0x28
   827d0:	4770      	bx	lr
   827d2:	bf00      	nop
   827d4:	400e0600 	.word	0x400e0600

000827d8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   827d8:	4b02      	ldr	r3, [pc, #8]	; (827e4 <pmc_is_locked_pllack+0xc>)
   827da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   827dc:	f000 0002 	and.w	r0, r0, #2
   827e0:	4770      	bx	lr
   827e2:	bf00      	nop
   827e4:	400e0600 	.word	0x400e0600

000827e8 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   827e8:	282c      	cmp	r0, #44	; 0x2c
   827ea:	d81e      	bhi.n	8282a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   827ec:	281f      	cmp	r0, #31
   827ee:	d80c      	bhi.n	8280a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   827f0:	4b11      	ldr	r3, [pc, #68]	; (82838 <pmc_enable_periph_clk+0x50>)
   827f2:	699a      	ldr	r2, [r3, #24]
   827f4:	2301      	movs	r3, #1
   827f6:	4083      	lsls	r3, r0
   827f8:	4393      	bics	r3, r2
   827fa:	d018      	beq.n	8282e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   827fc:	2301      	movs	r3, #1
   827fe:	fa03 f000 	lsl.w	r0, r3, r0
   82802:	4b0d      	ldr	r3, [pc, #52]	; (82838 <pmc_enable_periph_clk+0x50>)
   82804:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   82806:	2000      	movs	r0, #0
   82808:	4770      	bx	lr
		ul_id -= 32;
   8280a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8280c:	4b0a      	ldr	r3, [pc, #40]	; (82838 <pmc_enable_periph_clk+0x50>)
   8280e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   82812:	2301      	movs	r3, #1
   82814:	4083      	lsls	r3, r0
   82816:	4393      	bics	r3, r2
   82818:	d00b      	beq.n	82832 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8281a:	2301      	movs	r3, #1
   8281c:	fa03 f000 	lsl.w	r0, r3, r0
   82820:	4b05      	ldr	r3, [pc, #20]	; (82838 <pmc_enable_periph_clk+0x50>)
   82822:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   82826:	2000      	movs	r0, #0
   82828:	4770      	bx	lr
		return 1;
   8282a:	2001      	movs	r0, #1
   8282c:	4770      	bx	lr
	return 0;
   8282e:	2000      	movs	r0, #0
   82830:	4770      	bx	lr
   82832:	2000      	movs	r0, #0
}
   82834:	4770      	bx	lr
   82836:	bf00      	nop
   82838:	400e0600 	.word	0x400e0600

0008283c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   8283c:	e7fe      	b.n	8283c <Dummy_Handler>
	...

00082840 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   82840:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   82842:	4b1c      	ldr	r3, [pc, #112]	; (828b4 <Reset_Handler+0x74>)
   82844:	4a1c      	ldr	r2, [pc, #112]	; (828b8 <Reset_Handler+0x78>)
   82846:	429a      	cmp	r2, r3
   82848:	d010      	beq.n	8286c <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8284a:	4b1c      	ldr	r3, [pc, #112]	; (828bc <Reset_Handler+0x7c>)
   8284c:	4a19      	ldr	r2, [pc, #100]	; (828b4 <Reset_Handler+0x74>)
   8284e:	429a      	cmp	r2, r3
   82850:	d20c      	bcs.n	8286c <Reset_Handler+0x2c>
   82852:	3b01      	subs	r3, #1
   82854:	1a9b      	subs	r3, r3, r2
   82856:	f023 0303 	bic.w	r3, r3, #3
   8285a:	3304      	adds	r3, #4
   8285c:	4413      	add	r3, r2
   8285e:	4916      	ldr	r1, [pc, #88]	; (828b8 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   82860:	f851 0b04 	ldr.w	r0, [r1], #4
   82864:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   82868:	429a      	cmp	r2, r3
   8286a:	d1f9      	bne.n	82860 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8286c:	4b14      	ldr	r3, [pc, #80]	; (828c0 <Reset_Handler+0x80>)
   8286e:	4a15      	ldr	r2, [pc, #84]	; (828c4 <Reset_Handler+0x84>)
   82870:	429a      	cmp	r2, r3
   82872:	d20a      	bcs.n	8288a <Reset_Handler+0x4a>
   82874:	3b01      	subs	r3, #1
   82876:	1a9b      	subs	r3, r3, r2
   82878:	f023 0303 	bic.w	r3, r3, #3
   8287c:	3304      	adds	r3, #4
   8287e:	4413      	add	r3, r2
		*pDest++ = 0;
   82880:	2100      	movs	r1, #0
   82882:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   82886:	4293      	cmp	r3, r2
   82888:	d1fb      	bne.n	82882 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8288a:	4b0f      	ldr	r3, [pc, #60]	; (828c8 <Reset_Handler+0x88>)
   8288c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   82890:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   82894:	490d      	ldr	r1, [pc, #52]	; (828cc <Reset_Handler+0x8c>)
   82896:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   82898:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   8289c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   828a0:	d203      	bcs.n	828aa <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   828a2:	688b      	ldr	r3, [r1, #8]
   828a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   828a8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   828aa:	4b09      	ldr	r3, [pc, #36]	; (828d0 <Reset_Handler+0x90>)
   828ac:	4798      	blx	r3

	/* Branch to main function */
	main();
   828ae:	4b09      	ldr	r3, [pc, #36]	; (828d4 <Reset_Handler+0x94>)
   828b0:	4798      	blx	r3
   828b2:	e7fe      	b.n	828b2 <Reset_Handler+0x72>
   828b4:	20070000 	.word	0x20070000
   828b8:	00085e04 	.word	0x00085e04
   828bc:	20070ae8 	.word	0x20070ae8
   828c0:	2007ada4 	.word	0x2007ada4
   828c4:	20070ae8 	.word	0x20070ae8
   828c8:	00080000 	.word	0x00080000
   828cc:	e000ed00 	.word	0xe000ed00
   828d0:	00082a69 	.word	0x00082a69
   828d4:	00082a41 	.word	0x00082a41

000828d8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   828d8:	4b3d      	ldr	r3, [pc, #244]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   828da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   828dc:	f003 0303 	and.w	r3, r3, #3
   828e0:	2b03      	cmp	r3, #3
   828e2:	d80e      	bhi.n	82902 <SystemCoreClockUpdate+0x2a>
   828e4:	e8df f003 	tbb	[pc, r3]
   828e8:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   828ec:	4b39      	ldr	r3, [pc, #228]	; (829d4 <SystemCoreClockUpdate+0xfc>)
   828ee:	695b      	ldr	r3, [r3, #20]
   828f0:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   828f4:	bf14      	ite	ne
   828f6:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   828fa:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   828fe:	4b36      	ldr	r3, [pc, #216]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82900:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82902:	4b33      	ldr	r3, [pc, #204]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   82904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   82906:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8290a:	2b70      	cmp	r3, #112	; 0x70
   8290c:	d057      	beq.n	829be <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8290e:	4b30      	ldr	r3, [pc, #192]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   82910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   82912:	4931      	ldr	r1, [pc, #196]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82914:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82918:	680b      	ldr	r3, [r1, #0]
   8291a:	40d3      	lsrs	r3, r2
   8291c:	600b      	str	r3, [r1, #0]
   8291e:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82920:	4b2b      	ldr	r3, [pc, #172]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   82922:	6a1b      	ldr	r3, [r3, #32]
   82924:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82928:	d003      	beq.n	82932 <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8292a:	4a2c      	ldr	r2, [pc, #176]	; (829dc <SystemCoreClockUpdate+0x104>)
   8292c:	4b2a      	ldr	r3, [pc, #168]	; (829d8 <SystemCoreClockUpdate+0x100>)
   8292e:	601a      	str	r2, [r3, #0]
   82930:	e7e7      	b.n	82902 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   82932:	4a2b      	ldr	r2, [pc, #172]	; (829e0 <SystemCoreClockUpdate+0x108>)
   82934:	4b28      	ldr	r3, [pc, #160]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82936:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82938:	4b25      	ldr	r3, [pc, #148]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   8293a:	6a1b      	ldr	r3, [r3, #32]
   8293c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   82940:	2b10      	cmp	r3, #16
   82942:	d005      	beq.n	82950 <SystemCoreClockUpdate+0x78>
   82944:	2b20      	cmp	r3, #32
   82946:	d1dc      	bne.n	82902 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   82948:	4a24      	ldr	r2, [pc, #144]	; (829dc <SystemCoreClockUpdate+0x104>)
   8294a:	4b23      	ldr	r3, [pc, #140]	; (829d8 <SystemCoreClockUpdate+0x100>)
   8294c:	601a      	str	r2, [r3, #0]
				break;
   8294e:	e7d8      	b.n	82902 <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   82950:	4a24      	ldr	r2, [pc, #144]	; (829e4 <SystemCoreClockUpdate+0x10c>)
   82952:	4b21      	ldr	r3, [pc, #132]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82954:	601a      	str	r2, [r3, #0]
				break;
   82956:	e7d4      	b.n	82902 <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82958:	4b1d      	ldr	r3, [pc, #116]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   8295a:	6a1b      	ldr	r3, [r3, #32]
   8295c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   82960:	d00c      	beq.n	8297c <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82962:	4a1e      	ldr	r2, [pc, #120]	; (829dc <SystemCoreClockUpdate+0x104>)
   82964:	4b1c      	ldr	r3, [pc, #112]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82966:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82968:	4b19      	ldr	r3, [pc, #100]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   8296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8296c:	f003 0303 	and.w	r3, r3, #3
   82970:	2b02      	cmp	r3, #2
   82972:	d016      	beq.n	829a2 <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   82974:	4a1c      	ldr	r2, [pc, #112]	; (829e8 <SystemCoreClockUpdate+0x110>)
   82976:	4b18      	ldr	r3, [pc, #96]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82978:	601a      	str	r2, [r3, #0]
   8297a:	e7c2      	b.n	82902 <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8297c:	4a18      	ldr	r2, [pc, #96]	; (829e0 <SystemCoreClockUpdate+0x108>)
   8297e:	4b16      	ldr	r3, [pc, #88]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82980:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   82982:	4b13      	ldr	r3, [pc, #76]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   82984:	6a1b      	ldr	r3, [r3, #32]
   82986:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8298a:	2b10      	cmp	r3, #16
   8298c:	d005      	beq.n	8299a <SystemCoreClockUpdate+0xc2>
   8298e:	2b20      	cmp	r3, #32
   82990:	d1ea      	bne.n	82968 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   82992:	4a12      	ldr	r2, [pc, #72]	; (829dc <SystemCoreClockUpdate+0x104>)
   82994:	4b10      	ldr	r3, [pc, #64]	; (829d8 <SystemCoreClockUpdate+0x100>)
   82996:	601a      	str	r2, [r3, #0]
				break;
   82998:	e7e6      	b.n	82968 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   8299a:	4a12      	ldr	r2, [pc, #72]	; (829e4 <SystemCoreClockUpdate+0x10c>)
   8299c:	4b0e      	ldr	r3, [pc, #56]	; (829d8 <SystemCoreClockUpdate+0x100>)
   8299e:	601a      	str	r2, [r3, #0]
				break;
   829a0:	e7e2      	b.n	82968 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829a2:	4a0b      	ldr	r2, [pc, #44]	; (829d0 <SystemCoreClockUpdate+0xf8>)
   829a4:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829a6:	6a92      	ldr	r2, [r2, #40]	; 0x28
   829a8:	480b      	ldr	r0, [pc, #44]	; (829d8 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   829aa:	f3c1 410a 	ubfx	r1, r1, #16, #11
   829ae:	6803      	ldr	r3, [r0, #0]
   829b0:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   829b4:	b2d2      	uxtb	r2, r2
   829b6:	fbb3 f3f2 	udiv	r3, r3, r2
   829ba:	6003      	str	r3, [r0, #0]
   829bc:	e7a1      	b.n	82902 <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   829be:	4a06      	ldr	r2, [pc, #24]	; (829d8 <SystemCoreClockUpdate+0x100>)
   829c0:	6813      	ldr	r3, [r2, #0]
   829c2:	490a      	ldr	r1, [pc, #40]	; (829ec <SystemCoreClockUpdate+0x114>)
   829c4:	fba1 1303 	umull	r1, r3, r1, r3
   829c8:	085b      	lsrs	r3, r3, #1
   829ca:	6013      	str	r3, [r2, #0]
   829cc:	4770      	bx	lr
   829ce:	bf00      	nop
   829d0:	400e0600 	.word	0x400e0600
   829d4:	400e1a10 	.word	0x400e1a10
   829d8:	20070138 	.word	0x20070138
   829dc:	00b71b00 	.word	0x00b71b00
   829e0:	003d0900 	.word	0x003d0900
   829e4:	007a1200 	.word	0x007a1200
   829e8:	0e4e1c00 	.word	0x0e4e1c00
   829ec:	aaaaaaab 	.word	0xaaaaaaab

000829f0 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   829f0:	4b0a      	ldr	r3, [pc, #40]	; (82a1c <_sbrk+0x2c>)
   829f2:	681b      	ldr	r3, [r3, #0]
   829f4:	b153      	cbz	r3, 82a0c <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   829f6:	4b09      	ldr	r3, [pc, #36]	; (82a1c <_sbrk+0x2c>)
   829f8:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   829fa:	181a      	adds	r2, r3, r0
   829fc:	4908      	ldr	r1, [pc, #32]	; (82a20 <_sbrk+0x30>)
   829fe:	4291      	cmp	r1, r2
   82a00:	db08      	blt.n	82a14 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   82a02:	4610      	mov	r0, r2
   82a04:	4a05      	ldr	r2, [pc, #20]	; (82a1c <_sbrk+0x2c>)
   82a06:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   82a08:	4618      	mov	r0, r3
   82a0a:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   82a0c:	4a05      	ldr	r2, [pc, #20]	; (82a24 <_sbrk+0x34>)
   82a0e:	4b03      	ldr	r3, [pc, #12]	; (82a1c <_sbrk+0x2c>)
   82a10:	601a      	str	r2, [r3, #0]
   82a12:	e7f0      	b.n	829f6 <_sbrk+0x6>
		return (caddr_t) -1;	
   82a14:	f04f 30ff 	mov.w	r0, #4294967295
}
   82a18:	4770      	bx	lr
   82a1a:	bf00      	nop
   82a1c:	2007accc 	.word	0x2007accc
   82a20:	20087ffc 	.word	0x20087ffc
   82a24:	2007cda8 	.word	0x2007cda8

00082a28 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   82a28:	f04f 30ff 	mov.w	r0, #4294967295
   82a2c:	4770      	bx	lr

00082a2e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   82a2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   82a32:	604b      	str	r3, [r1, #4]

	return 0;
}
   82a34:	2000      	movs	r0, #0
   82a36:	4770      	bx	lr

00082a38 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   82a38:	2001      	movs	r0, #1
   82a3a:	4770      	bx	lr

00082a3c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   82a3c:	2000      	movs	r0, #0
   82a3e:	4770      	bx	lr

00082a40 <main>:

Next version (1.4) will test if we can implement PWM to control the signal to the motorcontrollers. Clear?[] 

*/
int main (void)
{
   82a40:	b508      	push	{r3, lr}

	misc_init(); //pin 2 out, pin5&7 in
   82a42:	4b05      	ldr	r3, [pc, #20]	; (82a58 <main+0x18>)
   82a44:	4798      	blx	r3
	console_init();
   82a46:	4b05      	ldr	r3, [pc, #20]	; (82a5c <main+0x1c>)
   82a48:	4798      	blx	r3
	//interrupt_init();	//	pin 7 and 8 as interrupt pins	
	encoder_init(); //also initialises pin 5 (left encoder) & 7 (right encoder) as interrupt pins
   82a4a:	4b05      	ldr	r3, [pc, #20]	; (82a60 <main+0x20>)
   82a4c:	4798      	blx	r3
	rtos_init(); //Starts RTOS scheduler
   82a4e:	4b05      	ldr	r3, [pc, #20]	; (82a64 <main+0x24>)
   82a50:	4798      	blx	r3
	//delay_us(3000000);
	//controlCenter(50);
		
   82a52:	2000      	movs	r0, #0
   82a54:	bd08      	pop	{r3, pc}
   82a56:	bf00      	nop
   82a58:	00080ae5 	.word	0x00080ae5
   82a5c:	00080b8d 	.word	0x00080b8d
   82a60:	000804f1 	.word	0x000804f1
   82a64:	00080b55 	.word	0x00080b55

00082a68 <__libc_init_array>:
   82a68:	b570      	push	{r4, r5, r6, lr}
   82a6a:	4e0f      	ldr	r6, [pc, #60]	; (82aa8 <__libc_init_array+0x40>)
   82a6c:	4d0f      	ldr	r5, [pc, #60]	; (82aac <__libc_init_array+0x44>)
   82a6e:	1b76      	subs	r6, r6, r5
   82a70:	10b6      	asrs	r6, r6, #2
   82a72:	bf18      	it	ne
   82a74:	2400      	movne	r4, #0
   82a76:	d005      	beq.n	82a84 <__libc_init_array+0x1c>
   82a78:	3401      	adds	r4, #1
   82a7a:	f855 3b04 	ldr.w	r3, [r5], #4
   82a7e:	4798      	blx	r3
   82a80:	42a6      	cmp	r6, r4
   82a82:	d1f9      	bne.n	82a78 <__libc_init_array+0x10>
   82a84:	4e0a      	ldr	r6, [pc, #40]	; (82ab0 <__libc_init_array+0x48>)
   82a86:	4d0b      	ldr	r5, [pc, #44]	; (82ab4 <__libc_init_array+0x4c>)
   82a88:	f003 f9a6 	bl	85dd8 <_init>
   82a8c:	1b76      	subs	r6, r6, r5
   82a8e:	10b6      	asrs	r6, r6, #2
   82a90:	bf18      	it	ne
   82a92:	2400      	movne	r4, #0
   82a94:	d006      	beq.n	82aa4 <__libc_init_array+0x3c>
   82a96:	3401      	adds	r4, #1
   82a98:	f855 3b04 	ldr.w	r3, [r5], #4
   82a9c:	4798      	blx	r3
   82a9e:	42a6      	cmp	r6, r4
   82aa0:	d1f9      	bne.n	82a96 <__libc_init_array+0x2e>
   82aa2:	bd70      	pop	{r4, r5, r6, pc}
   82aa4:	bd70      	pop	{r4, r5, r6, pc}
   82aa6:	bf00      	nop
   82aa8:	00085de4 	.word	0x00085de4
   82aac:	00085de4 	.word	0x00085de4
   82ab0:	00085dec 	.word	0x00085dec
   82ab4:	00085de4 	.word	0x00085de4

00082ab8 <iprintf>:
   82ab8:	b40f      	push	{r0, r1, r2, r3}
   82aba:	b510      	push	{r4, lr}
   82abc:	4b07      	ldr	r3, [pc, #28]	; (82adc <iprintf+0x24>)
   82abe:	b082      	sub	sp, #8
   82ac0:	ac04      	add	r4, sp, #16
   82ac2:	f854 2b04 	ldr.w	r2, [r4], #4
   82ac6:	6818      	ldr	r0, [r3, #0]
   82ac8:	4623      	mov	r3, r4
   82aca:	6881      	ldr	r1, [r0, #8]
   82acc:	9401      	str	r4, [sp, #4]
   82ace:	f000 fa3b 	bl	82f48 <_vfiprintf_r>
   82ad2:	b002      	add	sp, #8
   82ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82ad8:	b004      	add	sp, #16
   82ada:	4770      	bx	lr
   82adc:	2007013c 	.word	0x2007013c

00082ae0 <memcpy>:
   82ae0:	4684      	mov	ip, r0
   82ae2:	ea41 0300 	orr.w	r3, r1, r0
   82ae6:	f013 0303 	ands.w	r3, r3, #3
   82aea:	d149      	bne.n	82b80 <memcpy+0xa0>
   82aec:	3a40      	subs	r2, #64	; 0x40
   82aee:	d323      	bcc.n	82b38 <memcpy+0x58>
   82af0:	680b      	ldr	r3, [r1, #0]
   82af2:	6003      	str	r3, [r0, #0]
   82af4:	684b      	ldr	r3, [r1, #4]
   82af6:	6043      	str	r3, [r0, #4]
   82af8:	688b      	ldr	r3, [r1, #8]
   82afa:	6083      	str	r3, [r0, #8]
   82afc:	68cb      	ldr	r3, [r1, #12]
   82afe:	60c3      	str	r3, [r0, #12]
   82b00:	690b      	ldr	r3, [r1, #16]
   82b02:	6103      	str	r3, [r0, #16]
   82b04:	694b      	ldr	r3, [r1, #20]
   82b06:	6143      	str	r3, [r0, #20]
   82b08:	698b      	ldr	r3, [r1, #24]
   82b0a:	6183      	str	r3, [r0, #24]
   82b0c:	69cb      	ldr	r3, [r1, #28]
   82b0e:	61c3      	str	r3, [r0, #28]
   82b10:	6a0b      	ldr	r3, [r1, #32]
   82b12:	6203      	str	r3, [r0, #32]
   82b14:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82b16:	6243      	str	r3, [r0, #36]	; 0x24
   82b18:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82b1a:	6283      	str	r3, [r0, #40]	; 0x28
   82b1c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82b1e:	62c3      	str	r3, [r0, #44]	; 0x2c
   82b20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82b22:	6303      	str	r3, [r0, #48]	; 0x30
   82b24:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82b26:	6343      	str	r3, [r0, #52]	; 0x34
   82b28:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82b2a:	6383      	str	r3, [r0, #56]	; 0x38
   82b2c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82b2e:	63c3      	str	r3, [r0, #60]	; 0x3c
   82b30:	3040      	adds	r0, #64	; 0x40
   82b32:	3140      	adds	r1, #64	; 0x40
   82b34:	3a40      	subs	r2, #64	; 0x40
   82b36:	d2db      	bcs.n	82af0 <memcpy+0x10>
   82b38:	3230      	adds	r2, #48	; 0x30
   82b3a:	d30b      	bcc.n	82b54 <memcpy+0x74>
   82b3c:	680b      	ldr	r3, [r1, #0]
   82b3e:	6003      	str	r3, [r0, #0]
   82b40:	684b      	ldr	r3, [r1, #4]
   82b42:	6043      	str	r3, [r0, #4]
   82b44:	688b      	ldr	r3, [r1, #8]
   82b46:	6083      	str	r3, [r0, #8]
   82b48:	68cb      	ldr	r3, [r1, #12]
   82b4a:	60c3      	str	r3, [r0, #12]
   82b4c:	3010      	adds	r0, #16
   82b4e:	3110      	adds	r1, #16
   82b50:	3a10      	subs	r2, #16
   82b52:	d2f3      	bcs.n	82b3c <memcpy+0x5c>
   82b54:	320c      	adds	r2, #12
   82b56:	d305      	bcc.n	82b64 <memcpy+0x84>
   82b58:	f851 3b04 	ldr.w	r3, [r1], #4
   82b5c:	f840 3b04 	str.w	r3, [r0], #4
   82b60:	3a04      	subs	r2, #4
   82b62:	d2f9      	bcs.n	82b58 <memcpy+0x78>
   82b64:	3204      	adds	r2, #4
   82b66:	d008      	beq.n	82b7a <memcpy+0x9a>
   82b68:	07d2      	lsls	r2, r2, #31
   82b6a:	bf1c      	itt	ne
   82b6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82b70:	f800 3b01 	strbne.w	r3, [r0], #1
   82b74:	d301      	bcc.n	82b7a <memcpy+0x9a>
   82b76:	880b      	ldrh	r3, [r1, #0]
   82b78:	8003      	strh	r3, [r0, #0]
   82b7a:	4660      	mov	r0, ip
   82b7c:	4770      	bx	lr
   82b7e:	bf00      	nop
   82b80:	2a08      	cmp	r2, #8
   82b82:	d313      	bcc.n	82bac <memcpy+0xcc>
   82b84:	078b      	lsls	r3, r1, #30
   82b86:	d0b1      	beq.n	82aec <memcpy+0xc>
   82b88:	f010 0303 	ands.w	r3, r0, #3
   82b8c:	d0ae      	beq.n	82aec <memcpy+0xc>
   82b8e:	f1c3 0304 	rsb	r3, r3, #4
   82b92:	1ad2      	subs	r2, r2, r3
   82b94:	07db      	lsls	r3, r3, #31
   82b96:	bf1c      	itt	ne
   82b98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82b9c:	f800 3b01 	strbne.w	r3, [r0], #1
   82ba0:	d3a4      	bcc.n	82aec <memcpy+0xc>
   82ba2:	f831 3b02 	ldrh.w	r3, [r1], #2
   82ba6:	f820 3b02 	strh.w	r3, [r0], #2
   82baa:	e79f      	b.n	82aec <memcpy+0xc>
   82bac:	3a04      	subs	r2, #4
   82bae:	d3d9      	bcc.n	82b64 <memcpy+0x84>
   82bb0:	3a01      	subs	r2, #1
   82bb2:	f811 3b01 	ldrb.w	r3, [r1], #1
   82bb6:	f800 3b01 	strb.w	r3, [r0], #1
   82bba:	d2f9      	bcs.n	82bb0 <memcpy+0xd0>
   82bbc:	780b      	ldrb	r3, [r1, #0]
   82bbe:	7003      	strb	r3, [r0, #0]
   82bc0:	784b      	ldrb	r3, [r1, #1]
   82bc2:	7043      	strb	r3, [r0, #1]
   82bc4:	788b      	ldrb	r3, [r1, #2]
   82bc6:	7083      	strb	r3, [r0, #2]
   82bc8:	4660      	mov	r0, ip
   82bca:	4770      	bx	lr

00082bcc <memset>:
   82bcc:	b470      	push	{r4, r5, r6}
   82bce:	0786      	lsls	r6, r0, #30
   82bd0:	d046      	beq.n	82c60 <memset+0x94>
   82bd2:	1e54      	subs	r4, r2, #1
   82bd4:	2a00      	cmp	r2, #0
   82bd6:	d041      	beq.n	82c5c <memset+0x90>
   82bd8:	b2ca      	uxtb	r2, r1
   82bda:	4603      	mov	r3, r0
   82bdc:	e002      	b.n	82be4 <memset+0x18>
   82bde:	f114 34ff 	adds.w	r4, r4, #4294967295
   82be2:	d33b      	bcc.n	82c5c <memset+0x90>
   82be4:	f803 2b01 	strb.w	r2, [r3], #1
   82be8:	079d      	lsls	r5, r3, #30
   82bea:	d1f8      	bne.n	82bde <memset+0x12>
   82bec:	2c03      	cmp	r4, #3
   82bee:	d92e      	bls.n	82c4e <memset+0x82>
   82bf0:	b2cd      	uxtb	r5, r1
   82bf2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82bf6:	2c0f      	cmp	r4, #15
   82bf8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82bfc:	d919      	bls.n	82c32 <memset+0x66>
   82bfe:	4626      	mov	r6, r4
   82c00:	f103 0210 	add.w	r2, r3, #16
   82c04:	3e10      	subs	r6, #16
   82c06:	2e0f      	cmp	r6, #15
   82c08:	f842 5c10 	str.w	r5, [r2, #-16]
   82c0c:	f842 5c0c 	str.w	r5, [r2, #-12]
   82c10:	f842 5c08 	str.w	r5, [r2, #-8]
   82c14:	f842 5c04 	str.w	r5, [r2, #-4]
   82c18:	f102 0210 	add.w	r2, r2, #16
   82c1c:	d8f2      	bhi.n	82c04 <memset+0x38>
   82c1e:	f1a4 0210 	sub.w	r2, r4, #16
   82c22:	f022 020f 	bic.w	r2, r2, #15
   82c26:	f004 040f 	and.w	r4, r4, #15
   82c2a:	3210      	adds	r2, #16
   82c2c:	2c03      	cmp	r4, #3
   82c2e:	4413      	add	r3, r2
   82c30:	d90d      	bls.n	82c4e <memset+0x82>
   82c32:	461e      	mov	r6, r3
   82c34:	4622      	mov	r2, r4
   82c36:	3a04      	subs	r2, #4
   82c38:	2a03      	cmp	r2, #3
   82c3a:	f846 5b04 	str.w	r5, [r6], #4
   82c3e:	d8fa      	bhi.n	82c36 <memset+0x6a>
   82c40:	1f22      	subs	r2, r4, #4
   82c42:	f022 0203 	bic.w	r2, r2, #3
   82c46:	3204      	adds	r2, #4
   82c48:	4413      	add	r3, r2
   82c4a:	f004 0403 	and.w	r4, r4, #3
   82c4e:	b12c      	cbz	r4, 82c5c <memset+0x90>
   82c50:	b2c9      	uxtb	r1, r1
   82c52:	441c      	add	r4, r3
   82c54:	f803 1b01 	strb.w	r1, [r3], #1
   82c58:	429c      	cmp	r4, r3
   82c5a:	d1fb      	bne.n	82c54 <memset+0x88>
   82c5c:	bc70      	pop	{r4, r5, r6}
   82c5e:	4770      	bx	lr
   82c60:	4614      	mov	r4, r2
   82c62:	4603      	mov	r3, r0
   82c64:	e7c2      	b.n	82bec <memset+0x20>
   82c66:	bf00      	nop

00082c68 <setbuf>:
   82c68:	2900      	cmp	r1, #0
   82c6a:	bf0c      	ite	eq
   82c6c:	2202      	moveq	r2, #2
   82c6e:	2200      	movne	r2, #0
   82c70:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82c74:	f000 b800 	b.w	82c78 <setvbuf>

00082c78 <setvbuf>:
   82c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82c7c:	4d61      	ldr	r5, [pc, #388]	; (82e04 <setvbuf+0x18c>)
   82c7e:	b083      	sub	sp, #12
   82c80:	682d      	ldr	r5, [r5, #0]
   82c82:	4604      	mov	r4, r0
   82c84:	460f      	mov	r7, r1
   82c86:	4690      	mov	r8, r2
   82c88:	461e      	mov	r6, r3
   82c8a:	b115      	cbz	r5, 82c92 <setvbuf+0x1a>
   82c8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82c8e:	2b00      	cmp	r3, #0
   82c90:	d064      	beq.n	82d5c <setvbuf+0xe4>
   82c92:	f1b8 0f02 	cmp.w	r8, #2
   82c96:	d006      	beq.n	82ca6 <setvbuf+0x2e>
   82c98:	f1b8 0f01 	cmp.w	r8, #1
   82c9c:	f200 809f 	bhi.w	82dde <setvbuf+0x166>
   82ca0:	2e00      	cmp	r6, #0
   82ca2:	f2c0 809c 	blt.w	82dde <setvbuf+0x166>
   82ca6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82ca8:	07d8      	lsls	r0, r3, #31
   82caa:	d534      	bpl.n	82d16 <setvbuf+0x9e>
   82cac:	4621      	mov	r1, r4
   82cae:	4628      	mov	r0, r5
   82cb0:	f001 f8e2 	bl	83e78 <_fflush_r>
   82cb4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   82cb6:	b141      	cbz	r1, 82cca <setvbuf+0x52>
   82cb8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   82cbc:	4299      	cmp	r1, r3
   82cbe:	d002      	beq.n	82cc6 <setvbuf+0x4e>
   82cc0:	4628      	mov	r0, r5
   82cc2:	f001 fa57 	bl	84174 <_free_r>
   82cc6:	2300      	movs	r3, #0
   82cc8:	6323      	str	r3, [r4, #48]	; 0x30
   82cca:	2200      	movs	r2, #0
   82ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82cd0:	61a2      	str	r2, [r4, #24]
   82cd2:	6062      	str	r2, [r4, #4]
   82cd4:	061a      	lsls	r2, r3, #24
   82cd6:	d43a      	bmi.n	82d4e <setvbuf+0xd6>
   82cd8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   82cdc:	f023 0303 	bic.w	r3, r3, #3
   82ce0:	f1b8 0f02 	cmp.w	r8, #2
   82ce4:	81a3      	strh	r3, [r4, #12]
   82ce6:	d01d      	beq.n	82d24 <setvbuf+0xac>
   82ce8:	ab01      	add	r3, sp, #4
   82cea:	466a      	mov	r2, sp
   82cec:	4621      	mov	r1, r4
   82cee:	4628      	mov	r0, r5
   82cf0:	f001 fcde 	bl	846b0 <__swhatbuf_r>
   82cf4:	89a3      	ldrh	r3, [r4, #12]
   82cf6:	4318      	orrs	r0, r3
   82cf8:	81a0      	strh	r0, [r4, #12]
   82cfa:	2e00      	cmp	r6, #0
   82cfc:	d132      	bne.n	82d64 <setvbuf+0xec>
   82cfe:	9e00      	ldr	r6, [sp, #0]
   82d00:	4630      	mov	r0, r6
   82d02:	f001 fd4d 	bl	847a0 <malloc>
   82d06:	4607      	mov	r7, r0
   82d08:	2800      	cmp	r0, #0
   82d0a:	d06b      	beq.n	82de4 <setvbuf+0x16c>
   82d0c:	89a3      	ldrh	r3, [r4, #12]
   82d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   82d12:	81a3      	strh	r3, [r4, #12]
   82d14:	e028      	b.n	82d68 <setvbuf+0xf0>
   82d16:	89a3      	ldrh	r3, [r4, #12]
   82d18:	0599      	lsls	r1, r3, #22
   82d1a:	d4c7      	bmi.n	82cac <setvbuf+0x34>
   82d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82d1e:	f001 fcc3 	bl	846a8 <__retarget_lock_acquire_recursive>
   82d22:	e7c3      	b.n	82cac <setvbuf+0x34>
   82d24:	2500      	movs	r5, #0
   82d26:	2600      	movs	r6, #0
   82d28:	2001      	movs	r0, #1
   82d2a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   82d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   82d30:	f043 0302 	orr.w	r3, r3, #2
   82d34:	60a6      	str	r6, [r4, #8]
   82d36:	07ce      	lsls	r6, r1, #31
   82d38:	81a3      	strh	r3, [r4, #12]
   82d3a:	6160      	str	r0, [r4, #20]
   82d3c:	6022      	str	r2, [r4, #0]
   82d3e:	6122      	str	r2, [r4, #16]
   82d40:	d401      	bmi.n	82d46 <setvbuf+0xce>
   82d42:	0598      	lsls	r0, r3, #22
   82d44:	d53e      	bpl.n	82dc4 <setvbuf+0x14c>
   82d46:	4628      	mov	r0, r5
   82d48:	b003      	add	sp, #12
   82d4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82d4e:	6921      	ldr	r1, [r4, #16]
   82d50:	4628      	mov	r0, r5
   82d52:	f001 fa0f 	bl	84174 <_free_r>
   82d56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82d5a:	e7bd      	b.n	82cd8 <setvbuf+0x60>
   82d5c:	4628      	mov	r0, r5
   82d5e:	f001 f8e3 	bl	83f28 <__sinit>
   82d62:	e796      	b.n	82c92 <setvbuf+0x1a>
   82d64:	2f00      	cmp	r7, #0
   82d66:	d0cb      	beq.n	82d00 <setvbuf+0x88>
   82d68:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82d6a:	2b00      	cmp	r3, #0
   82d6c:	d033      	beq.n	82dd6 <setvbuf+0x15e>
   82d6e:	9b00      	ldr	r3, [sp, #0]
   82d70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   82d74:	429e      	cmp	r6, r3
   82d76:	bf1c      	itt	ne
   82d78:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   82d7c:	81a2      	strhne	r2, [r4, #12]
   82d7e:	f1b8 0f01 	cmp.w	r8, #1
   82d82:	bf04      	itt	eq
   82d84:	f042 0201 	orreq.w	r2, r2, #1
   82d88:	81a2      	strheq	r2, [r4, #12]
   82d8a:	b292      	uxth	r2, r2
   82d8c:	f012 0308 	ands.w	r3, r2, #8
   82d90:	6027      	str	r7, [r4, #0]
   82d92:	6127      	str	r7, [r4, #16]
   82d94:	6166      	str	r6, [r4, #20]
   82d96:	d00e      	beq.n	82db6 <setvbuf+0x13e>
   82d98:	07d1      	lsls	r1, r2, #31
   82d9a:	d51a      	bpl.n	82dd2 <setvbuf+0x15a>
   82d9c:	2300      	movs	r3, #0
   82d9e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82da0:	4276      	negs	r6, r6
   82da2:	f015 0501 	ands.w	r5, r5, #1
   82da6:	61a6      	str	r6, [r4, #24]
   82da8:	60a3      	str	r3, [r4, #8]
   82daa:	d009      	beq.n	82dc0 <setvbuf+0x148>
   82dac:	2500      	movs	r5, #0
   82dae:	4628      	mov	r0, r5
   82db0:	b003      	add	sp, #12
   82db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82db6:	60a3      	str	r3, [r4, #8]
   82db8:	6e65      	ldr	r5, [r4, #100]	; 0x64
   82dba:	f015 0501 	ands.w	r5, r5, #1
   82dbe:	d1f5      	bne.n	82dac <setvbuf+0x134>
   82dc0:	0593      	lsls	r3, r2, #22
   82dc2:	d4c0      	bmi.n	82d46 <setvbuf+0xce>
   82dc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82dc6:	f001 fc71 	bl	846ac <__retarget_lock_release_recursive>
   82dca:	4628      	mov	r0, r5
   82dcc:	b003      	add	sp, #12
   82dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82dd2:	60a6      	str	r6, [r4, #8]
   82dd4:	e7f0      	b.n	82db8 <setvbuf+0x140>
   82dd6:	4628      	mov	r0, r5
   82dd8:	f001 f8a6 	bl	83f28 <__sinit>
   82ddc:	e7c7      	b.n	82d6e <setvbuf+0xf6>
   82dde:	f04f 35ff 	mov.w	r5, #4294967295
   82de2:	e7b0      	b.n	82d46 <setvbuf+0xce>
   82de4:	f8dd 9000 	ldr.w	r9, [sp]
   82de8:	45b1      	cmp	r9, r6
   82dea:	d004      	beq.n	82df6 <setvbuf+0x17e>
   82dec:	4648      	mov	r0, r9
   82dee:	f001 fcd7 	bl	847a0 <malloc>
   82df2:	4607      	mov	r7, r0
   82df4:	b920      	cbnz	r0, 82e00 <setvbuf+0x188>
   82df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82dfa:	f04f 35ff 	mov.w	r5, #4294967295
   82dfe:	e792      	b.n	82d26 <setvbuf+0xae>
   82e00:	464e      	mov	r6, r9
   82e02:	e783      	b.n	82d0c <setvbuf+0x94>
   82e04:	2007013c 	.word	0x2007013c

00082e08 <strlen>:
   82e08:	f020 0103 	bic.w	r1, r0, #3
   82e0c:	f010 0003 	ands.w	r0, r0, #3
   82e10:	f1c0 0000 	rsb	r0, r0, #0
   82e14:	f851 3b04 	ldr.w	r3, [r1], #4
   82e18:	f100 0c04 	add.w	ip, r0, #4
   82e1c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82e20:	f06f 0200 	mvn.w	r2, #0
   82e24:	bf1c      	itt	ne
   82e26:	fa22 f20c 	lsrne.w	r2, r2, ip
   82e2a:	4313      	orrne	r3, r2
   82e2c:	f04f 0c01 	mov.w	ip, #1
   82e30:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   82e34:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82e38:	eba3 020c 	sub.w	r2, r3, ip
   82e3c:	ea22 0203 	bic.w	r2, r2, r3
   82e40:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   82e44:	bf04      	itt	eq
   82e46:	f851 3b04 	ldreq.w	r3, [r1], #4
   82e4a:	3004      	addeq	r0, #4
   82e4c:	d0f4      	beq.n	82e38 <strlen+0x30>
   82e4e:	f1c2 0100 	rsb	r1, r2, #0
   82e52:	ea02 0201 	and.w	r2, r2, r1
   82e56:	fab2 f282 	clz	r2, r2
   82e5a:	f1c2 021f 	rsb	r2, r2, #31
   82e5e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   82e62:	4770      	bx	lr

00082e64 <strncpy>:
   82e64:	ea40 0301 	orr.w	r3, r0, r1
   82e68:	f013 0f03 	tst.w	r3, #3
   82e6c:	b470      	push	{r4, r5, r6}
   82e6e:	4603      	mov	r3, r0
   82e70:	d024      	beq.n	82ebc <strncpy+0x58>
   82e72:	b1a2      	cbz	r2, 82e9e <strncpy+0x3a>
   82e74:	780c      	ldrb	r4, [r1, #0]
   82e76:	3a01      	subs	r2, #1
   82e78:	701c      	strb	r4, [r3, #0]
   82e7a:	3101      	adds	r1, #1
   82e7c:	3301      	adds	r3, #1
   82e7e:	b13c      	cbz	r4, 82e90 <strncpy+0x2c>
   82e80:	b16a      	cbz	r2, 82e9e <strncpy+0x3a>
   82e82:	f811 4b01 	ldrb.w	r4, [r1], #1
   82e86:	3a01      	subs	r2, #1
   82e88:	f803 4b01 	strb.w	r4, [r3], #1
   82e8c:	2c00      	cmp	r4, #0
   82e8e:	d1f7      	bne.n	82e80 <strncpy+0x1c>
   82e90:	b12a      	cbz	r2, 82e9e <strncpy+0x3a>
   82e92:	2100      	movs	r1, #0
   82e94:	441a      	add	r2, r3
   82e96:	f803 1b01 	strb.w	r1, [r3], #1
   82e9a:	429a      	cmp	r2, r3
   82e9c:	d1fb      	bne.n	82e96 <strncpy+0x32>
   82e9e:	bc70      	pop	{r4, r5, r6}
   82ea0:	4770      	bx	lr
   82ea2:	460e      	mov	r6, r1
   82ea4:	f851 5b04 	ldr.w	r5, [r1], #4
   82ea8:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   82eac:	ea24 0405 	bic.w	r4, r4, r5
   82eb0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   82eb4:	d105      	bne.n	82ec2 <strncpy+0x5e>
   82eb6:	3a04      	subs	r2, #4
   82eb8:	f843 5b04 	str.w	r5, [r3], #4
   82ebc:	2a03      	cmp	r2, #3
   82ebe:	d8f0      	bhi.n	82ea2 <strncpy+0x3e>
   82ec0:	e7d7      	b.n	82e72 <strncpy+0xe>
   82ec2:	4631      	mov	r1, r6
   82ec4:	e7d6      	b.n	82e74 <strncpy+0x10>
   82ec6:	bf00      	nop

00082ec8 <__sprint_r.part.0>:
   82ec8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ecc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   82ece:	4693      	mov	fp, r2
   82ed0:	049c      	lsls	r4, r3, #18
   82ed2:	d52f      	bpl.n	82f34 <__sprint_r.part.0+0x6c>
   82ed4:	6893      	ldr	r3, [r2, #8]
   82ed6:	6812      	ldr	r2, [r2, #0]
   82ed8:	b353      	cbz	r3, 82f30 <__sprint_r.part.0+0x68>
   82eda:	460e      	mov	r6, r1
   82edc:	4607      	mov	r7, r0
   82ede:	f102 0908 	add.w	r9, r2, #8
   82ee2:	e919 0420 	ldmdb	r9, {r5, sl}
   82ee6:	ea5f 089a 	movs.w	r8, sl, lsr #2
   82eea:	d017      	beq.n	82f1c <__sprint_r.part.0+0x54>
   82eec:	2400      	movs	r4, #0
   82eee:	3d04      	subs	r5, #4
   82ef0:	e001      	b.n	82ef6 <__sprint_r.part.0+0x2e>
   82ef2:	45a0      	cmp	r8, r4
   82ef4:	d010      	beq.n	82f18 <__sprint_r.part.0+0x50>
   82ef6:	4632      	mov	r2, r6
   82ef8:	f855 1f04 	ldr.w	r1, [r5, #4]!
   82efc:	4638      	mov	r0, r7
   82efe:	f001 f8b5 	bl	8406c <_fputwc_r>
   82f02:	1c43      	adds	r3, r0, #1
   82f04:	f104 0401 	add.w	r4, r4, #1
   82f08:	d1f3      	bne.n	82ef2 <__sprint_r.part.0+0x2a>
   82f0a:	2300      	movs	r3, #0
   82f0c:	f8cb 3008 	str.w	r3, [fp, #8]
   82f10:	f8cb 3004 	str.w	r3, [fp, #4]
   82f14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f18:	f8db 3008 	ldr.w	r3, [fp, #8]
   82f1c:	f02a 0a03 	bic.w	sl, sl, #3
   82f20:	eba3 030a 	sub.w	r3, r3, sl
   82f24:	f8cb 3008 	str.w	r3, [fp, #8]
   82f28:	f109 0908 	add.w	r9, r9, #8
   82f2c:	2b00      	cmp	r3, #0
   82f2e:	d1d8      	bne.n	82ee2 <__sprint_r.part.0+0x1a>
   82f30:	2000      	movs	r0, #0
   82f32:	e7ea      	b.n	82f0a <__sprint_r.part.0+0x42>
   82f34:	f001 fa04 	bl	84340 <__sfvwrite_r>
   82f38:	2300      	movs	r3, #0
   82f3a:	f8cb 3008 	str.w	r3, [fp, #8]
   82f3e:	f8cb 3004 	str.w	r3, [fp, #4]
   82f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82f46:	bf00      	nop

00082f48 <_vfiprintf_r>:
   82f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82f4c:	b0ad      	sub	sp, #180	; 0xb4
   82f4e:	461d      	mov	r5, r3
   82f50:	468b      	mov	fp, r1
   82f52:	4690      	mov	r8, r2
   82f54:	9307      	str	r3, [sp, #28]
   82f56:	9006      	str	r0, [sp, #24]
   82f58:	b118      	cbz	r0, 82f62 <_vfiprintf_r+0x1a>
   82f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82f5c:	2b00      	cmp	r3, #0
   82f5e:	f000 80f3 	beq.w	83148 <_vfiprintf_r+0x200>
   82f62:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82f66:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   82f6a:	07df      	lsls	r7, r3, #31
   82f6c:	b281      	uxth	r1, r0
   82f6e:	d402      	bmi.n	82f76 <_vfiprintf_r+0x2e>
   82f70:	058e      	lsls	r6, r1, #22
   82f72:	f140 80fc 	bpl.w	8316e <_vfiprintf_r+0x226>
   82f76:	048c      	lsls	r4, r1, #18
   82f78:	d40a      	bmi.n	82f90 <_vfiprintf_r+0x48>
   82f7a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   82f7e:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   82f82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   82f86:	f8ab 100c 	strh.w	r1, [fp, #12]
   82f8a:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   82f8e:	b289      	uxth	r1, r1
   82f90:	0708      	lsls	r0, r1, #28
   82f92:	f140 80b3 	bpl.w	830fc <_vfiprintf_r+0x1b4>
   82f96:	f8db 3010 	ldr.w	r3, [fp, #16]
   82f9a:	2b00      	cmp	r3, #0
   82f9c:	f000 80ae 	beq.w	830fc <_vfiprintf_r+0x1b4>
   82fa0:	f001 031a 	and.w	r3, r1, #26
   82fa4:	2b0a      	cmp	r3, #10
   82fa6:	f000 80b5 	beq.w	83114 <_vfiprintf_r+0x1cc>
   82faa:	2300      	movs	r3, #0
   82fac:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   82fb0:	46d1      	mov	r9, sl
   82fb2:	930b      	str	r3, [sp, #44]	; 0x2c
   82fb4:	9303      	str	r3, [sp, #12]
   82fb6:	9311      	str	r3, [sp, #68]	; 0x44
   82fb8:	9310      	str	r3, [sp, #64]	; 0x40
   82fba:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   82fbe:	f8cd b010 	str.w	fp, [sp, #16]
   82fc2:	f898 3000 	ldrb.w	r3, [r8]
   82fc6:	4644      	mov	r4, r8
   82fc8:	b1fb      	cbz	r3, 8300a <_vfiprintf_r+0xc2>
   82fca:	2b25      	cmp	r3, #37	; 0x25
   82fcc:	d102      	bne.n	82fd4 <_vfiprintf_r+0x8c>
   82fce:	e01c      	b.n	8300a <_vfiprintf_r+0xc2>
   82fd0:	2b25      	cmp	r3, #37	; 0x25
   82fd2:	d003      	beq.n	82fdc <_vfiprintf_r+0x94>
   82fd4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   82fd8:	2b00      	cmp	r3, #0
   82fda:	d1f9      	bne.n	82fd0 <_vfiprintf_r+0x88>
   82fdc:	eba4 0508 	sub.w	r5, r4, r8
   82fe0:	b19d      	cbz	r5, 8300a <_vfiprintf_r+0xc2>
   82fe2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   82fe4:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82fe6:	3301      	adds	r3, #1
   82fe8:	442a      	add	r2, r5
   82fea:	2b07      	cmp	r3, #7
   82fec:	f8c9 8000 	str.w	r8, [r9]
   82ff0:	f8c9 5004 	str.w	r5, [r9, #4]
   82ff4:	9211      	str	r2, [sp, #68]	; 0x44
   82ff6:	9310      	str	r3, [sp, #64]	; 0x40
   82ff8:	dd7a      	ble.n	830f0 <_vfiprintf_r+0x1a8>
   82ffa:	2a00      	cmp	r2, #0
   82ffc:	f040 84b5 	bne.w	8396a <_vfiprintf_r+0xa22>
   83000:	46d1      	mov	r9, sl
   83002:	9b03      	ldr	r3, [sp, #12]
   83004:	9210      	str	r2, [sp, #64]	; 0x40
   83006:	442b      	add	r3, r5
   83008:	9303      	str	r3, [sp, #12]
   8300a:	7823      	ldrb	r3, [r4, #0]
   8300c:	2b00      	cmp	r3, #0
   8300e:	f000 83e5 	beq.w	837dc <_vfiprintf_r+0x894>
   83012:	2000      	movs	r0, #0
   83014:	f04f 0300 	mov.w	r3, #0
   83018:	f104 0801 	add.w	r8, r4, #1
   8301c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   83020:	7862      	ldrb	r2, [r4, #1]
   83022:	4606      	mov	r6, r0
   83024:	4605      	mov	r5, r0
   83026:	4603      	mov	r3, r0
   83028:	f04f 34ff 	mov.w	r4, #4294967295
   8302c:	f108 0801 	add.w	r8, r8, #1
   83030:	f1a2 0120 	sub.w	r1, r2, #32
   83034:	2958      	cmp	r1, #88	; 0x58
   83036:	f200 82d9 	bhi.w	835ec <_vfiprintf_r+0x6a4>
   8303a:	e8df f011 	tbh	[pc, r1, lsl #1]
   8303e:	0228      	.short	0x0228
   83040:	02d702d7 	.word	0x02d702d7
   83044:	02d70230 	.word	0x02d70230
   83048:	02d702d7 	.word	0x02d702d7
   8304c:	02d702d7 	.word	0x02d702d7
   83050:	00a002d7 	.word	0x00a002d7
   83054:	02d70288 	.word	0x02d70288
   83058:	02b800a8 	.word	0x02b800a8
   8305c:	01a602d7 	.word	0x01a602d7
   83060:	01ab01ab 	.word	0x01ab01ab
   83064:	01ab01ab 	.word	0x01ab01ab
   83068:	01ab01ab 	.word	0x01ab01ab
   8306c:	01ab01ab 	.word	0x01ab01ab
   83070:	02d701ab 	.word	0x02d701ab
   83074:	02d702d7 	.word	0x02d702d7
   83078:	02d702d7 	.word	0x02d702d7
   8307c:	02d702d7 	.word	0x02d702d7
   83080:	02d702d7 	.word	0x02d702d7
   83084:	01b902d7 	.word	0x01b902d7
   83088:	02d702d7 	.word	0x02d702d7
   8308c:	02d702d7 	.word	0x02d702d7
   83090:	02d702d7 	.word	0x02d702d7
   83094:	02d702d7 	.word	0x02d702d7
   83098:	02d702d7 	.word	0x02d702d7
   8309c:	02d7019e 	.word	0x02d7019e
   830a0:	02d702d7 	.word	0x02d702d7
   830a4:	02d702d7 	.word	0x02d702d7
   830a8:	02d701a2 	.word	0x02d701a2
   830ac:	025a02d7 	.word	0x025a02d7
   830b0:	02d702d7 	.word	0x02d702d7
   830b4:	02d702d7 	.word	0x02d702d7
   830b8:	02d702d7 	.word	0x02d702d7
   830bc:	02d702d7 	.word	0x02d702d7
   830c0:	02d702d7 	.word	0x02d702d7
   830c4:	02220261 	.word	0x02220261
   830c8:	02d702d7 	.word	0x02d702d7
   830cc:	027602d7 	.word	0x027602d7
   830d0:	02d70222 	.word	0x02d70222
   830d4:	027b02d7 	.word	0x027b02d7
   830d8:	01fc02d7 	.word	0x01fc02d7
   830dc:	02100189 	.word	0x02100189
   830e0:	02d702d2 	.word	0x02d702d2
   830e4:	02d70295 	.word	0x02d70295
   830e8:	02d700ad 	.word	0x02d700ad
   830ec:	023502d7 	.word	0x023502d7
   830f0:	f109 0908 	add.w	r9, r9, #8
   830f4:	9b03      	ldr	r3, [sp, #12]
   830f6:	442b      	add	r3, r5
   830f8:	9303      	str	r3, [sp, #12]
   830fa:	e786      	b.n	8300a <_vfiprintf_r+0xc2>
   830fc:	4659      	mov	r1, fp
   830fe:	9806      	ldr	r0, [sp, #24]
   83100:	f000 fdaa 	bl	83c58 <__swsetup_r>
   83104:	bb18      	cbnz	r0, 8314e <_vfiprintf_r+0x206>
   83106:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   8310a:	f001 031a 	and.w	r3, r1, #26
   8310e:	2b0a      	cmp	r3, #10
   83110:	f47f af4b 	bne.w	82faa <_vfiprintf_r+0x62>
   83114:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   83118:	2b00      	cmp	r3, #0
   8311a:	f6ff af46 	blt.w	82faa <_vfiprintf_r+0x62>
   8311e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83122:	07db      	lsls	r3, r3, #31
   83124:	d405      	bmi.n	83132 <_vfiprintf_r+0x1ea>
   83126:	058f      	lsls	r7, r1, #22
   83128:	d403      	bmi.n	83132 <_vfiprintf_r+0x1ea>
   8312a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   8312e:	f001 fabd 	bl	846ac <__retarget_lock_release_recursive>
   83132:	462b      	mov	r3, r5
   83134:	4642      	mov	r2, r8
   83136:	4659      	mov	r1, fp
   83138:	9806      	ldr	r0, [sp, #24]
   8313a:	f000 fd49 	bl	83bd0 <__sbprintf>
   8313e:	9003      	str	r0, [sp, #12]
   83140:	9803      	ldr	r0, [sp, #12]
   83142:	b02d      	add	sp, #180	; 0xb4
   83144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83148:	f000 feee 	bl	83f28 <__sinit>
   8314c:	e709      	b.n	82f62 <_vfiprintf_r+0x1a>
   8314e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   83152:	07d9      	lsls	r1, r3, #31
   83154:	d404      	bmi.n	83160 <_vfiprintf_r+0x218>
   83156:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   8315a:	059a      	lsls	r2, r3, #22
   8315c:	f140 84ae 	bpl.w	83abc <_vfiprintf_r+0xb74>
   83160:	f04f 33ff 	mov.w	r3, #4294967295
   83164:	9303      	str	r3, [sp, #12]
   83166:	9803      	ldr	r0, [sp, #12]
   83168:	b02d      	add	sp, #180	; 0xb4
   8316a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8316e:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83172:	f001 fa99 	bl	846a8 <__retarget_lock_acquire_recursive>
   83176:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   8317a:	b281      	uxth	r1, r0
   8317c:	e6fb      	b.n	82f76 <_vfiprintf_r+0x2e>
   8317e:	9907      	ldr	r1, [sp, #28]
   83180:	460a      	mov	r2, r1
   83182:	680d      	ldr	r5, [r1, #0]
   83184:	3204      	adds	r2, #4
   83186:	2d00      	cmp	r5, #0
   83188:	9207      	str	r2, [sp, #28]
   8318a:	da02      	bge.n	83192 <_vfiprintf_r+0x24a>
   8318c:	426d      	negs	r5, r5
   8318e:	f043 0304 	orr.w	r3, r3, #4
   83192:	f898 2000 	ldrb.w	r2, [r8]
   83196:	e749      	b.n	8302c <_vfiprintf_r+0xe4>
   83198:	9508      	str	r5, [sp, #32]
   8319a:	069e      	lsls	r6, r3, #26
   8319c:	f100 845a 	bmi.w	83a54 <_vfiprintf_r+0xb0c>
   831a0:	9907      	ldr	r1, [sp, #28]
   831a2:	06dd      	lsls	r5, r3, #27
   831a4:	460a      	mov	r2, r1
   831a6:	f100 83ef 	bmi.w	83988 <_vfiprintf_r+0xa40>
   831aa:	0658      	lsls	r0, r3, #25
   831ac:	f140 83ec 	bpl.w	83988 <_vfiprintf_r+0xa40>
   831b0:	2700      	movs	r7, #0
   831b2:	2201      	movs	r2, #1
   831b4:	880e      	ldrh	r6, [r1, #0]
   831b6:	3104      	adds	r1, #4
   831b8:	9107      	str	r1, [sp, #28]
   831ba:	f04f 0100 	mov.w	r1, #0
   831be:	2500      	movs	r5, #0
   831c0:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   831c4:	1c61      	adds	r1, r4, #1
   831c6:	f000 8117 	beq.w	833f8 <_vfiprintf_r+0x4b0>
   831ca:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   831ce:	9102      	str	r1, [sp, #8]
   831d0:	ea56 0107 	orrs.w	r1, r6, r7
   831d4:	f040 8115 	bne.w	83402 <_vfiprintf_r+0x4ba>
   831d8:	2c00      	cmp	r4, #0
   831da:	f040 835b 	bne.w	83894 <_vfiprintf_r+0x94c>
   831de:	2a00      	cmp	r2, #0
   831e0:	f040 83b6 	bne.w	83950 <_vfiprintf_r+0xa08>
   831e4:	f013 0301 	ands.w	r3, r3, #1
   831e8:	9305      	str	r3, [sp, #20]
   831ea:	f000 8455 	beq.w	83a98 <_vfiprintf_r+0xb50>
   831ee:	2330      	movs	r3, #48	; 0x30
   831f0:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   831f4:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   831f8:	9b05      	ldr	r3, [sp, #20]
   831fa:	42a3      	cmp	r3, r4
   831fc:	bfb8      	it	lt
   831fe:	4623      	movlt	r3, r4
   83200:	9301      	str	r3, [sp, #4]
   83202:	b10d      	cbz	r5, 83208 <_vfiprintf_r+0x2c0>
   83204:	3301      	adds	r3, #1
   83206:	9301      	str	r3, [sp, #4]
   83208:	9b02      	ldr	r3, [sp, #8]
   8320a:	f013 0302 	ands.w	r3, r3, #2
   8320e:	9309      	str	r3, [sp, #36]	; 0x24
   83210:	d002      	beq.n	83218 <_vfiprintf_r+0x2d0>
   83212:	9b01      	ldr	r3, [sp, #4]
   83214:	3302      	adds	r3, #2
   83216:	9301      	str	r3, [sp, #4]
   83218:	9b02      	ldr	r3, [sp, #8]
   8321a:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   8321e:	930a      	str	r3, [sp, #40]	; 0x28
   83220:	f040 8215 	bne.w	8364e <_vfiprintf_r+0x706>
   83224:	9b08      	ldr	r3, [sp, #32]
   83226:	9a01      	ldr	r2, [sp, #4]
   83228:	1a9d      	subs	r5, r3, r2
   8322a:	2d00      	cmp	r5, #0
   8322c:	f340 820f 	ble.w	8364e <_vfiprintf_r+0x706>
   83230:	2d10      	cmp	r5, #16
   83232:	f340 8484 	ble.w	83b3e <_vfiprintf_r+0xbf6>
   83236:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83238:	46ce      	mov	lr, r9
   8323a:	2710      	movs	r7, #16
   8323c:	46a1      	mov	r9, r4
   8323e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83240:	4ec5      	ldr	r6, [pc, #788]	; (83558 <_vfiprintf_r+0x610>)
   83242:	4619      	mov	r1, r3
   83244:	9c06      	ldr	r4, [sp, #24]
   83246:	e007      	b.n	83258 <_vfiprintf_r+0x310>
   83248:	f101 0c02 	add.w	ip, r1, #2
   8324c:	4601      	mov	r1, r0
   8324e:	f10e 0e08 	add.w	lr, lr, #8
   83252:	3d10      	subs	r5, #16
   83254:	2d10      	cmp	r5, #16
   83256:	dd11      	ble.n	8327c <_vfiprintf_r+0x334>
   83258:	1c48      	adds	r0, r1, #1
   8325a:	3210      	adds	r2, #16
   8325c:	2807      	cmp	r0, #7
   8325e:	9211      	str	r2, [sp, #68]	; 0x44
   83260:	e88e 00c0 	stmia.w	lr, {r6, r7}
   83264:	9010      	str	r0, [sp, #64]	; 0x40
   83266:	ddef      	ble.n	83248 <_vfiprintf_r+0x300>
   83268:	2a00      	cmp	r2, #0
   8326a:	f040 81d9 	bne.w	83620 <_vfiprintf_r+0x6d8>
   8326e:	3d10      	subs	r5, #16
   83270:	2d10      	cmp	r5, #16
   83272:	4611      	mov	r1, r2
   83274:	f04f 0c01 	mov.w	ip, #1
   83278:	46d6      	mov	lr, sl
   8327a:	dced      	bgt.n	83258 <_vfiprintf_r+0x310>
   8327c:	464c      	mov	r4, r9
   8327e:	4661      	mov	r1, ip
   83280:	46f1      	mov	r9, lr
   83282:	442a      	add	r2, r5
   83284:	2907      	cmp	r1, #7
   83286:	9211      	str	r2, [sp, #68]	; 0x44
   83288:	f8c9 6000 	str.w	r6, [r9]
   8328c:	f8c9 5004 	str.w	r5, [r9, #4]
   83290:	9110      	str	r1, [sp, #64]	; 0x40
   83292:	f300 82eb 	bgt.w	8386c <_vfiprintf_r+0x924>
   83296:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8329a:	f109 0908 	add.w	r9, r9, #8
   8329e:	1c48      	adds	r0, r1, #1
   832a0:	2d00      	cmp	r5, #0
   832a2:	f040 81dc 	bne.w	8365e <_vfiprintf_r+0x716>
   832a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   832a8:	2b00      	cmp	r3, #0
   832aa:	f000 81f6 	beq.w	8369a <_vfiprintf_r+0x752>
   832ae:	2102      	movs	r1, #2
   832b0:	ab0e      	add	r3, sp, #56	; 0x38
   832b2:	440a      	add	r2, r1
   832b4:	2807      	cmp	r0, #7
   832b6:	9211      	str	r2, [sp, #68]	; 0x44
   832b8:	9010      	str	r0, [sp, #64]	; 0x40
   832ba:	f8c9 1004 	str.w	r1, [r9, #4]
   832be:	f8c9 3000 	str.w	r3, [r9]
   832c2:	f340 81e6 	ble.w	83692 <_vfiprintf_r+0x74a>
   832c6:	2a00      	cmp	r2, #0
   832c8:	f040 8395 	bne.w	839f6 <_vfiprintf_r+0xaae>
   832cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   832ce:	2001      	movs	r0, #1
   832d0:	2b80      	cmp	r3, #128	; 0x80
   832d2:	4611      	mov	r1, r2
   832d4:	46d1      	mov	r9, sl
   832d6:	f040 81e4 	bne.w	836a2 <_vfiprintf_r+0x75a>
   832da:	9b08      	ldr	r3, [sp, #32]
   832dc:	9d01      	ldr	r5, [sp, #4]
   832de:	1b5e      	subs	r6, r3, r5
   832e0:	2e00      	cmp	r6, #0
   832e2:	f340 81de 	ble.w	836a2 <_vfiprintf_r+0x75a>
   832e6:	2e10      	cmp	r6, #16
   832e8:	f340 843c 	ble.w	83b64 <_vfiprintf_r+0xc1c>
   832ec:	46cc      	mov	ip, r9
   832ee:	2710      	movs	r7, #16
   832f0:	46a1      	mov	r9, r4
   832f2:	4d9a      	ldr	r5, [pc, #616]	; (8355c <_vfiprintf_r+0x614>)
   832f4:	9c06      	ldr	r4, [sp, #24]
   832f6:	e007      	b.n	83308 <_vfiprintf_r+0x3c0>
   832f8:	f101 0e02 	add.w	lr, r1, #2
   832fc:	4601      	mov	r1, r0
   832fe:	f10c 0c08 	add.w	ip, ip, #8
   83302:	3e10      	subs	r6, #16
   83304:	2e10      	cmp	r6, #16
   83306:	dd11      	ble.n	8332c <_vfiprintf_r+0x3e4>
   83308:	1c48      	adds	r0, r1, #1
   8330a:	3210      	adds	r2, #16
   8330c:	2807      	cmp	r0, #7
   8330e:	9211      	str	r2, [sp, #68]	; 0x44
   83310:	e88c 00a0 	stmia.w	ip, {r5, r7}
   83314:	9010      	str	r0, [sp, #64]	; 0x40
   83316:	ddef      	ble.n	832f8 <_vfiprintf_r+0x3b0>
   83318:	2a00      	cmp	r2, #0
   8331a:	f040 829b 	bne.w	83854 <_vfiprintf_r+0x90c>
   8331e:	3e10      	subs	r6, #16
   83320:	2e10      	cmp	r6, #16
   83322:	f04f 0e01 	mov.w	lr, #1
   83326:	4611      	mov	r1, r2
   83328:	46d4      	mov	ip, sl
   8332a:	dced      	bgt.n	83308 <_vfiprintf_r+0x3c0>
   8332c:	464c      	mov	r4, r9
   8332e:	46e1      	mov	r9, ip
   83330:	4432      	add	r2, r6
   83332:	f1be 0f07 	cmp.w	lr, #7
   83336:	9211      	str	r2, [sp, #68]	; 0x44
   83338:	e889 0060 	stmia.w	r9, {r5, r6}
   8333c:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   83340:	f300 8366 	bgt.w	83a10 <_vfiprintf_r+0xac8>
   83344:	f109 0908 	add.w	r9, r9, #8
   83348:	f10e 0001 	add.w	r0, lr, #1
   8334c:	4671      	mov	r1, lr
   8334e:	e1a8      	b.n	836a2 <_vfiprintf_r+0x75a>
   83350:	9508      	str	r5, [sp, #32]
   83352:	f013 0220 	ands.w	r2, r3, #32
   83356:	f040 8389 	bne.w	83a6c <_vfiprintf_r+0xb24>
   8335a:	f013 0110 	ands.w	r1, r3, #16
   8335e:	f040 8319 	bne.w	83994 <_vfiprintf_r+0xa4c>
   83362:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   83366:	f000 8315 	beq.w	83994 <_vfiprintf_r+0xa4c>
   8336a:	9807      	ldr	r0, [sp, #28]
   8336c:	460a      	mov	r2, r1
   8336e:	4601      	mov	r1, r0
   83370:	3104      	adds	r1, #4
   83372:	8806      	ldrh	r6, [r0, #0]
   83374:	2700      	movs	r7, #0
   83376:	9107      	str	r1, [sp, #28]
   83378:	e71f      	b.n	831ba <_vfiprintf_r+0x272>
   8337a:	9508      	str	r5, [sp, #32]
   8337c:	f043 0310 	orr.w	r3, r3, #16
   83380:	e7e7      	b.n	83352 <_vfiprintf_r+0x40a>
   83382:	9508      	str	r5, [sp, #32]
   83384:	f043 0310 	orr.w	r3, r3, #16
   83388:	e707      	b.n	8319a <_vfiprintf_r+0x252>
   8338a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8338e:	f898 2000 	ldrb.w	r2, [r8]
   83392:	e64b      	b.n	8302c <_vfiprintf_r+0xe4>
   83394:	2500      	movs	r5, #0
   83396:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   8339a:	f818 2b01 	ldrb.w	r2, [r8], #1
   8339e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   833a2:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   833a6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   833aa:	2909      	cmp	r1, #9
   833ac:	d9f5      	bls.n	8339a <_vfiprintf_r+0x452>
   833ae:	e63f      	b.n	83030 <_vfiprintf_r+0xe8>
   833b0:	9508      	str	r5, [sp, #32]
   833b2:	2800      	cmp	r0, #0
   833b4:	f040 8402 	bne.w	83bbc <_vfiprintf_r+0xc74>
   833b8:	f043 0310 	orr.w	r3, r3, #16
   833bc:	069e      	lsls	r6, r3, #26
   833be:	f100 833d 	bmi.w	83a3c <_vfiprintf_r+0xaf4>
   833c2:	9907      	ldr	r1, [sp, #28]
   833c4:	06dd      	lsls	r5, r3, #27
   833c6:	460a      	mov	r2, r1
   833c8:	f100 82f0 	bmi.w	839ac <_vfiprintf_r+0xa64>
   833cc:	0658      	lsls	r0, r3, #25
   833ce:	f140 82ed 	bpl.w	839ac <_vfiprintf_r+0xa64>
   833d2:	f9b1 6000 	ldrsh.w	r6, [r1]
   833d6:	3204      	adds	r2, #4
   833d8:	17f7      	asrs	r7, r6, #31
   833da:	4630      	mov	r0, r6
   833dc:	4639      	mov	r1, r7
   833de:	9207      	str	r2, [sp, #28]
   833e0:	2800      	cmp	r0, #0
   833e2:	f171 0200 	sbcs.w	r2, r1, #0
   833e6:	f2c0 835a 	blt.w	83a9e <_vfiprintf_r+0xb56>
   833ea:	1c61      	adds	r1, r4, #1
   833ec:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   833f0:	f04f 0201 	mov.w	r2, #1
   833f4:	f47f aee9 	bne.w	831ca <_vfiprintf_r+0x282>
   833f8:	ea56 0107 	orrs.w	r1, r6, r7
   833fc:	f000 824b 	beq.w	83896 <_vfiprintf_r+0x94e>
   83400:	9302      	str	r3, [sp, #8]
   83402:	2a01      	cmp	r2, #1
   83404:	f000 828a 	beq.w	8391c <_vfiprintf_r+0x9d4>
   83408:	2a02      	cmp	r2, #2
   8340a:	f040 825a 	bne.w	838c2 <_vfiprintf_r+0x97a>
   8340e:	46d3      	mov	fp, sl
   83410:	980b      	ldr	r0, [sp, #44]	; 0x2c
   83412:	0933      	lsrs	r3, r6, #4
   83414:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   83418:	0939      	lsrs	r1, r7, #4
   8341a:	f006 020f 	and.w	r2, r6, #15
   8341e:	460f      	mov	r7, r1
   83420:	461e      	mov	r6, r3
   83422:	5c83      	ldrb	r3, [r0, r2]
   83424:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   83428:	ea56 0307 	orrs.w	r3, r6, r7
   8342c:	d1f1      	bne.n	83412 <_vfiprintf_r+0x4ca>
   8342e:	ebaa 030b 	sub.w	r3, sl, fp
   83432:	9305      	str	r3, [sp, #20]
   83434:	e6e0      	b.n	831f8 <_vfiprintf_r+0x2b0>
   83436:	2800      	cmp	r0, #0
   83438:	f040 83bd 	bne.w	83bb6 <_vfiprintf_r+0xc6e>
   8343c:	0699      	lsls	r1, r3, #26
   8343e:	f100 8359 	bmi.w	83af4 <_vfiprintf_r+0xbac>
   83442:	06da      	lsls	r2, r3, #27
   83444:	f100 80e5 	bmi.w	83612 <_vfiprintf_r+0x6ca>
   83448:	065b      	lsls	r3, r3, #25
   8344a:	f140 80e2 	bpl.w	83612 <_vfiprintf_r+0x6ca>
   8344e:	9a07      	ldr	r2, [sp, #28]
   83450:	6813      	ldr	r3, [r2, #0]
   83452:	3204      	adds	r2, #4
   83454:	9207      	str	r2, [sp, #28]
   83456:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   8345a:	801a      	strh	r2, [r3, #0]
   8345c:	e5b1      	b.n	82fc2 <_vfiprintf_r+0x7a>
   8345e:	2278      	movs	r2, #120	; 0x78
   83460:	2130      	movs	r1, #48	; 0x30
   83462:	9508      	str	r5, [sp, #32]
   83464:	9d07      	ldr	r5, [sp, #28]
   83466:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   8346a:	1d2a      	adds	r2, r5, #4
   8346c:	9207      	str	r2, [sp, #28]
   8346e:	4a3c      	ldr	r2, [pc, #240]	; (83560 <_vfiprintf_r+0x618>)
   83470:	682e      	ldr	r6, [r5, #0]
   83472:	920b      	str	r2, [sp, #44]	; 0x2c
   83474:	f043 0302 	orr.w	r3, r3, #2
   83478:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   8347c:	2700      	movs	r7, #0
   8347e:	2202      	movs	r2, #2
   83480:	e69b      	b.n	831ba <_vfiprintf_r+0x272>
   83482:	9508      	str	r5, [sp, #32]
   83484:	2800      	cmp	r0, #0
   83486:	d099      	beq.n	833bc <_vfiprintf_r+0x474>
   83488:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8348c:	e796      	b.n	833bc <_vfiprintf_r+0x474>
   8348e:	f898 2000 	ldrb.w	r2, [r8]
   83492:	2e00      	cmp	r6, #0
   83494:	f47f adca 	bne.w	8302c <_vfiprintf_r+0xe4>
   83498:	2001      	movs	r0, #1
   8349a:	2620      	movs	r6, #32
   8349c:	e5c6      	b.n	8302c <_vfiprintf_r+0xe4>
   8349e:	f043 0301 	orr.w	r3, r3, #1
   834a2:	f898 2000 	ldrb.w	r2, [r8]
   834a6:	e5c1      	b.n	8302c <_vfiprintf_r+0xe4>
   834a8:	9508      	str	r5, [sp, #32]
   834aa:	2800      	cmp	r0, #0
   834ac:	f040 8380 	bne.w	83bb0 <_vfiprintf_r+0xc68>
   834b0:	492b      	ldr	r1, [pc, #172]	; (83560 <_vfiprintf_r+0x618>)
   834b2:	910b      	str	r1, [sp, #44]	; 0x2c
   834b4:	069f      	lsls	r7, r3, #26
   834b6:	f100 82e5 	bmi.w	83a84 <_vfiprintf_r+0xb3c>
   834ba:	9807      	ldr	r0, [sp, #28]
   834bc:	06de      	lsls	r6, r3, #27
   834be:	4601      	mov	r1, r0
   834c0:	f100 826f 	bmi.w	839a2 <_vfiprintf_r+0xa5a>
   834c4:	065d      	lsls	r5, r3, #25
   834c6:	f140 826c 	bpl.w	839a2 <_vfiprintf_r+0xa5a>
   834ca:	2700      	movs	r7, #0
   834cc:	3104      	adds	r1, #4
   834ce:	8806      	ldrh	r6, [r0, #0]
   834d0:	9107      	str	r1, [sp, #28]
   834d2:	07d8      	lsls	r0, r3, #31
   834d4:	f140 8220 	bpl.w	83918 <_vfiprintf_r+0x9d0>
   834d8:	ea56 0107 	orrs.w	r1, r6, r7
   834dc:	f000 821c 	beq.w	83918 <_vfiprintf_r+0x9d0>
   834e0:	2130      	movs	r1, #48	; 0x30
   834e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   834e6:	f043 0302 	orr.w	r3, r3, #2
   834ea:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   834ee:	2202      	movs	r2, #2
   834f0:	e663      	b.n	831ba <_vfiprintf_r+0x272>
   834f2:	9508      	str	r5, [sp, #32]
   834f4:	2800      	cmp	r0, #0
   834f6:	f040 8355 	bne.w	83ba4 <_vfiprintf_r+0xc5c>
   834fa:	491a      	ldr	r1, [pc, #104]	; (83564 <_vfiprintf_r+0x61c>)
   834fc:	910b      	str	r1, [sp, #44]	; 0x2c
   834fe:	e7d9      	b.n	834b4 <_vfiprintf_r+0x56c>
   83500:	2201      	movs	r2, #1
   83502:	9807      	ldr	r0, [sp, #28]
   83504:	4611      	mov	r1, r2
   83506:	9201      	str	r2, [sp, #4]
   83508:	6802      	ldr	r2, [r0, #0]
   8350a:	f04f 0400 	mov.w	r4, #0
   8350e:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83512:	4602      	mov	r2, r0
   83514:	3204      	adds	r2, #4
   83516:	9508      	str	r5, [sp, #32]
   83518:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   8351c:	9105      	str	r1, [sp, #20]
   8351e:	9207      	str	r2, [sp, #28]
   83520:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83524:	9302      	str	r3, [sp, #8]
   83526:	2400      	movs	r4, #0
   83528:	e66e      	b.n	83208 <_vfiprintf_r+0x2c0>
   8352a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8352e:	f898 2000 	ldrb.w	r2, [r8]
   83532:	e57b      	b.n	8302c <_vfiprintf_r+0xe4>
   83534:	f898 2000 	ldrb.w	r2, [r8]
   83538:	2a6c      	cmp	r2, #108	; 0x6c
   8353a:	bf03      	ittte	eq
   8353c:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   83540:	f043 0320 	orreq.w	r3, r3, #32
   83544:	f108 0801 	addeq.w	r8, r8, #1
   83548:	f043 0310 	orrne.w	r3, r3, #16
   8354c:	e56e      	b.n	8302c <_vfiprintf_r+0xe4>
   8354e:	f898 2000 	ldrb.w	r2, [r8]
   83552:	2001      	movs	r0, #1
   83554:	262b      	movs	r6, #43	; 0x2b
   83556:	e569      	b.n	8302c <_vfiprintf_r+0xe4>
   83558:	00085ca4 	.word	0x00085ca4
   8355c:	00085cb4 	.word	0x00085cb4
   83560:	00085c88 	.word	0x00085c88
   83564:	00085c74 	.word	0x00085c74
   83568:	f04f 0200 	mov.w	r2, #0
   8356c:	9907      	ldr	r1, [sp, #28]
   8356e:	9508      	str	r5, [sp, #32]
   83570:	f8d1 b000 	ldr.w	fp, [r1]
   83574:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   83578:	1d0d      	adds	r5, r1, #4
   8357a:	f1bb 0f00 	cmp.w	fp, #0
   8357e:	f000 82e4 	beq.w	83b4a <_vfiprintf_r+0xc02>
   83582:	1c67      	adds	r7, r4, #1
   83584:	f000 82c3 	beq.w	83b0e <_vfiprintf_r+0xbc6>
   83588:	4622      	mov	r2, r4
   8358a:	2100      	movs	r1, #0
   8358c:	4658      	mov	r0, fp
   8358e:	9301      	str	r3, [sp, #4]
   83590:	f001 fbc6 	bl	84d20 <memchr>
   83594:	9b01      	ldr	r3, [sp, #4]
   83596:	2800      	cmp	r0, #0
   83598:	f000 82e8 	beq.w	83b6c <_vfiprintf_r+0xc24>
   8359c:	eba0 020b 	sub.w	r2, r0, fp
   835a0:	9507      	str	r5, [sp, #28]
   835a2:	9205      	str	r2, [sp, #20]
   835a4:	9302      	str	r3, [sp, #8]
   835a6:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   835aa:	2400      	movs	r4, #0
   835ac:	e624      	b.n	831f8 <_vfiprintf_r+0x2b0>
   835ae:	f898 2000 	ldrb.w	r2, [r8]
   835b2:	f108 0701 	add.w	r7, r8, #1
   835b6:	2a2a      	cmp	r2, #42	; 0x2a
   835b8:	f000 82e9 	beq.w	83b8e <_vfiprintf_r+0xc46>
   835bc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   835c0:	2909      	cmp	r1, #9
   835c2:	46b8      	mov	r8, r7
   835c4:	f04f 0400 	mov.w	r4, #0
   835c8:	f63f ad32 	bhi.w	83030 <_vfiprintf_r+0xe8>
   835cc:	f818 2b01 	ldrb.w	r2, [r8], #1
   835d0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   835d4:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   835d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   835dc:	2909      	cmp	r1, #9
   835de:	d9f5      	bls.n	835cc <_vfiprintf_r+0x684>
   835e0:	e526      	b.n	83030 <_vfiprintf_r+0xe8>
   835e2:	f043 0320 	orr.w	r3, r3, #32
   835e6:	f898 2000 	ldrb.w	r2, [r8]
   835ea:	e51f      	b.n	8302c <_vfiprintf_r+0xe4>
   835ec:	9508      	str	r5, [sp, #32]
   835ee:	2800      	cmp	r0, #0
   835f0:	f040 82db 	bne.w	83baa <_vfiprintf_r+0xc62>
   835f4:	2a00      	cmp	r2, #0
   835f6:	f000 80f1 	beq.w	837dc <_vfiprintf_r+0x894>
   835fa:	2101      	movs	r1, #1
   835fc:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   83600:	f04f 0200 	mov.w	r2, #0
   83604:	9101      	str	r1, [sp, #4]
   83606:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   8360a:	9105      	str	r1, [sp, #20]
   8360c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   83610:	e788      	b.n	83524 <_vfiprintf_r+0x5dc>
   83612:	9a07      	ldr	r2, [sp, #28]
   83614:	6813      	ldr	r3, [r2, #0]
   83616:	3204      	adds	r2, #4
   83618:	9207      	str	r2, [sp, #28]
   8361a:	9a03      	ldr	r2, [sp, #12]
   8361c:	601a      	str	r2, [r3, #0]
   8361e:	e4d0      	b.n	82fc2 <_vfiprintf_r+0x7a>
   83620:	aa0f      	add	r2, sp, #60	; 0x3c
   83622:	9904      	ldr	r1, [sp, #16]
   83624:	4620      	mov	r0, r4
   83626:	f7ff fc4f 	bl	82ec8 <__sprint_r.part.0>
   8362a:	2800      	cmp	r0, #0
   8362c:	f040 8143 	bne.w	838b6 <_vfiprintf_r+0x96e>
   83630:	9910      	ldr	r1, [sp, #64]	; 0x40
   83632:	46d6      	mov	lr, sl
   83634:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83636:	f101 0c01 	add.w	ip, r1, #1
   8363a:	e60a      	b.n	83252 <_vfiprintf_r+0x30a>
   8363c:	aa0f      	add	r2, sp, #60	; 0x3c
   8363e:	9904      	ldr	r1, [sp, #16]
   83640:	9806      	ldr	r0, [sp, #24]
   83642:	f7ff fc41 	bl	82ec8 <__sprint_r.part.0>
   83646:	2800      	cmp	r0, #0
   83648:	f040 8135 	bne.w	838b6 <_vfiprintf_r+0x96e>
   8364c:	46d1      	mov	r9, sl
   8364e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83650:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83654:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83656:	1c48      	adds	r0, r1, #1
   83658:	2d00      	cmp	r5, #0
   8365a:	f43f ae24 	beq.w	832a6 <_vfiprintf_r+0x35e>
   8365e:	2101      	movs	r1, #1
   83660:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   83664:	440a      	add	r2, r1
   83666:	2807      	cmp	r0, #7
   83668:	9211      	str	r2, [sp, #68]	; 0x44
   8366a:	9010      	str	r0, [sp, #64]	; 0x40
   8366c:	f8c9 1004 	str.w	r1, [r9, #4]
   83670:	f8c9 5000 	str.w	r5, [r9]
   83674:	f340 8109 	ble.w	8388a <_vfiprintf_r+0x942>
   83678:	2a00      	cmp	r2, #0
   8367a:	f040 81af 	bne.w	839dc <_vfiprintf_r+0xa94>
   8367e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83680:	2b00      	cmp	r3, #0
   83682:	f43f ae23 	beq.w	832cc <_vfiprintf_r+0x384>
   83686:	2202      	movs	r2, #2
   83688:	4608      	mov	r0, r1
   8368a:	46d1      	mov	r9, sl
   8368c:	ab0e      	add	r3, sp, #56	; 0x38
   8368e:	921d      	str	r2, [sp, #116]	; 0x74
   83690:	931c      	str	r3, [sp, #112]	; 0x70
   83692:	4601      	mov	r1, r0
   83694:	f109 0908 	add.w	r9, r9, #8
   83698:	3001      	adds	r0, #1
   8369a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8369c:	2b80      	cmp	r3, #128	; 0x80
   8369e:	f43f ae1c 	beq.w	832da <_vfiprintf_r+0x392>
   836a2:	9b05      	ldr	r3, [sp, #20]
   836a4:	1ae4      	subs	r4, r4, r3
   836a6:	2c00      	cmp	r4, #0
   836a8:	dd2f      	ble.n	8370a <_vfiprintf_r+0x7c2>
   836aa:	2c10      	cmp	r4, #16
   836ac:	f340 8220 	ble.w	83af0 <_vfiprintf_r+0xba8>
   836b0:	46ce      	mov	lr, r9
   836b2:	2610      	movs	r6, #16
   836b4:	4db2      	ldr	r5, [pc, #712]	; (83980 <_vfiprintf_r+0xa38>)
   836b6:	9f06      	ldr	r7, [sp, #24]
   836b8:	f8dd 9010 	ldr.w	r9, [sp, #16]
   836bc:	e006      	b.n	836cc <_vfiprintf_r+0x784>
   836be:	1c88      	adds	r0, r1, #2
   836c0:	4619      	mov	r1, r3
   836c2:	f10e 0e08 	add.w	lr, lr, #8
   836c6:	3c10      	subs	r4, #16
   836c8:	2c10      	cmp	r4, #16
   836ca:	dd10      	ble.n	836ee <_vfiprintf_r+0x7a6>
   836cc:	1c4b      	adds	r3, r1, #1
   836ce:	3210      	adds	r2, #16
   836d0:	2b07      	cmp	r3, #7
   836d2:	9211      	str	r2, [sp, #68]	; 0x44
   836d4:	e88e 0060 	stmia.w	lr, {r5, r6}
   836d8:	9310      	str	r3, [sp, #64]	; 0x40
   836da:	ddf0      	ble.n	836be <_vfiprintf_r+0x776>
   836dc:	2a00      	cmp	r2, #0
   836de:	d165      	bne.n	837ac <_vfiprintf_r+0x864>
   836e0:	3c10      	subs	r4, #16
   836e2:	2c10      	cmp	r4, #16
   836e4:	f04f 0001 	mov.w	r0, #1
   836e8:	4611      	mov	r1, r2
   836ea:	46d6      	mov	lr, sl
   836ec:	dcee      	bgt.n	836cc <_vfiprintf_r+0x784>
   836ee:	46f1      	mov	r9, lr
   836f0:	4422      	add	r2, r4
   836f2:	2807      	cmp	r0, #7
   836f4:	9211      	str	r2, [sp, #68]	; 0x44
   836f6:	f8c9 5000 	str.w	r5, [r9]
   836fa:	f8c9 4004 	str.w	r4, [r9, #4]
   836fe:	9010      	str	r0, [sp, #64]	; 0x40
   83700:	f300 8085 	bgt.w	8380e <_vfiprintf_r+0x8c6>
   83704:	f109 0908 	add.w	r9, r9, #8
   83708:	3001      	adds	r0, #1
   8370a:	9905      	ldr	r1, [sp, #20]
   8370c:	2807      	cmp	r0, #7
   8370e:	440a      	add	r2, r1
   83710:	9211      	str	r2, [sp, #68]	; 0x44
   83712:	f8c9 b000 	str.w	fp, [r9]
   83716:	f8c9 1004 	str.w	r1, [r9, #4]
   8371a:	9010      	str	r0, [sp, #64]	; 0x40
   8371c:	f340 8082 	ble.w	83824 <_vfiprintf_r+0x8dc>
   83720:	2a00      	cmp	r2, #0
   83722:	f040 8118 	bne.w	83956 <_vfiprintf_r+0xa0e>
   83726:	9b02      	ldr	r3, [sp, #8]
   83728:	9210      	str	r2, [sp, #64]	; 0x40
   8372a:	0758      	lsls	r0, r3, #29
   8372c:	d535      	bpl.n	8379a <_vfiprintf_r+0x852>
   8372e:	9b08      	ldr	r3, [sp, #32]
   83730:	9901      	ldr	r1, [sp, #4]
   83732:	1a5c      	subs	r4, r3, r1
   83734:	2c00      	cmp	r4, #0
   83736:	f340 80e7 	ble.w	83908 <_vfiprintf_r+0x9c0>
   8373a:	46d1      	mov	r9, sl
   8373c:	2c10      	cmp	r4, #16
   8373e:	f340 820d 	ble.w	83b5c <_vfiprintf_r+0xc14>
   83742:	2510      	movs	r5, #16
   83744:	9910      	ldr	r1, [sp, #64]	; 0x40
   83746:	4e8f      	ldr	r6, [pc, #572]	; (83984 <_vfiprintf_r+0xa3c>)
   83748:	9f06      	ldr	r7, [sp, #24]
   8374a:	f8dd b010 	ldr.w	fp, [sp, #16]
   8374e:	e006      	b.n	8375e <_vfiprintf_r+0x816>
   83750:	1c88      	adds	r0, r1, #2
   83752:	4619      	mov	r1, r3
   83754:	f109 0908 	add.w	r9, r9, #8
   83758:	3c10      	subs	r4, #16
   8375a:	2c10      	cmp	r4, #16
   8375c:	dd11      	ble.n	83782 <_vfiprintf_r+0x83a>
   8375e:	1c4b      	adds	r3, r1, #1
   83760:	3210      	adds	r2, #16
   83762:	2b07      	cmp	r3, #7
   83764:	9211      	str	r2, [sp, #68]	; 0x44
   83766:	f8c9 6000 	str.w	r6, [r9]
   8376a:	f8c9 5004 	str.w	r5, [r9, #4]
   8376e:	9310      	str	r3, [sp, #64]	; 0x40
   83770:	ddee      	ble.n	83750 <_vfiprintf_r+0x808>
   83772:	bb42      	cbnz	r2, 837c6 <_vfiprintf_r+0x87e>
   83774:	3c10      	subs	r4, #16
   83776:	2c10      	cmp	r4, #16
   83778:	f04f 0001 	mov.w	r0, #1
   8377c:	4611      	mov	r1, r2
   8377e:	46d1      	mov	r9, sl
   83780:	dced      	bgt.n	8375e <_vfiprintf_r+0x816>
   83782:	4422      	add	r2, r4
   83784:	2807      	cmp	r0, #7
   83786:	9211      	str	r2, [sp, #68]	; 0x44
   83788:	f8c9 6000 	str.w	r6, [r9]
   8378c:	f8c9 4004 	str.w	r4, [r9, #4]
   83790:	9010      	str	r0, [sp, #64]	; 0x40
   83792:	dd51      	ble.n	83838 <_vfiprintf_r+0x8f0>
   83794:	2a00      	cmp	r2, #0
   83796:	f040 819a 	bne.w	83ace <_vfiprintf_r+0xb86>
   8379a:	9b03      	ldr	r3, [sp, #12]
   8379c:	9a08      	ldr	r2, [sp, #32]
   8379e:	9901      	ldr	r1, [sp, #4]
   837a0:	428a      	cmp	r2, r1
   837a2:	bfac      	ite	ge
   837a4:	189b      	addge	r3, r3, r2
   837a6:	185b      	addlt	r3, r3, r1
   837a8:	9303      	str	r3, [sp, #12]
   837aa:	e04e      	b.n	8384a <_vfiprintf_r+0x902>
   837ac:	aa0f      	add	r2, sp, #60	; 0x3c
   837ae:	4649      	mov	r1, r9
   837b0:	4638      	mov	r0, r7
   837b2:	f7ff fb89 	bl	82ec8 <__sprint_r.part.0>
   837b6:	2800      	cmp	r0, #0
   837b8:	f040 813e 	bne.w	83a38 <_vfiprintf_r+0xaf0>
   837bc:	9910      	ldr	r1, [sp, #64]	; 0x40
   837be:	46d6      	mov	lr, sl
   837c0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   837c2:	1c48      	adds	r0, r1, #1
   837c4:	e77f      	b.n	836c6 <_vfiprintf_r+0x77e>
   837c6:	aa0f      	add	r2, sp, #60	; 0x3c
   837c8:	4659      	mov	r1, fp
   837ca:	4638      	mov	r0, r7
   837cc:	f7ff fb7c 	bl	82ec8 <__sprint_r.part.0>
   837d0:	b960      	cbnz	r0, 837ec <_vfiprintf_r+0x8a4>
   837d2:	9910      	ldr	r1, [sp, #64]	; 0x40
   837d4:	46d1      	mov	r9, sl
   837d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   837d8:	1c48      	adds	r0, r1, #1
   837da:	e7bd      	b.n	83758 <_vfiprintf_r+0x810>
   837dc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   837de:	f8dd b010 	ldr.w	fp, [sp, #16]
   837e2:	2b00      	cmp	r3, #0
   837e4:	f040 81ca 	bne.w	83b7c <_vfiprintf_r+0xc34>
   837e8:	2300      	movs	r3, #0
   837ea:	9310      	str	r3, [sp, #64]	; 0x40
   837ec:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   837f0:	f013 0f01 	tst.w	r3, #1
   837f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   837f8:	d102      	bne.n	83800 <_vfiprintf_r+0x8b8>
   837fa:	059a      	lsls	r2, r3, #22
   837fc:	f140 80dd 	bpl.w	839ba <_vfiprintf_r+0xa72>
   83800:	065b      	lsls	r3, r3, #25
   83802:	f53f acad 	bmi.w	83160 <_vfiprintf_r+0x218>
   83806:	9803      	ldr	r0, [sp, #12]
   83808:	b02d      	add	sp, #180	; 0xb4
   8380a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8380e:	2a00      	cmp	r2, #0
   83810:	f040 8105 	bne.w	83a1e <_vfiprintf_r+0xad6>
   83814:	2301      	movs	r3, #1
   83816:	46d1      	mov	r9, sl
   83818:	9a05      	ldr	r2, [sp, #20]
   8381a:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8381e:	921d      	str	r2, [sp, #116]	; 0x74
   83820:	9211      	str	r2, [sp, #68]	; 0x44
   83822:	9310      	str	r3, [sp, #64]	; 0x40
   83824:	f109 0908 	add.w	r9, r9, #8
   83828:	9b02      	ldr	r3, [sp, #8]
   8382a:	0759      	lsls	r1, r3, #29
   8382c:	d504      	bpl.n	83838 <_vfiprintf_r+0x8f0>
   8382e:	9b08      	ldr	r3, [sp, #32]
   83830:	9901      	ldr	r1, [sp, #4]
   83832:	1a5c      	subs	r4, r3, r1
   83834:	2c00      	cmp	r4, #0
   83836:	dc81      	bgt.n	8373c <_vfiprintf_r+0x7f4>
   83838:	9b03      	ldr	r3, [sp, #12]
   8383a:	9908      	ldr	r1, [sp, #32]
   8383c:	9801      	ldr	r0, [sp, #4]
   8383e:	4281      	cmp	r1, r0
   83840:	bfac      	ite	ge
   83842:	185b      	addge	r3, r3, r1
   83844:	181b      	addlt	r3, r3, r0
   83846:	9303      	str	r3, [sp, #12]
   83848:	bb72      	cbnz	r2, 838a8 <_vfiprintf_r+0x960>
   8384a:	2300      	movs	r3, #0
   8384c:	46d1      	mov	r9, sl
   8384e:	9310      	str	r3, [sp, #64]	; 0x40
   83850:	f7ff bbb7 	b.w	82fc2 <_vfiprintf_r+0x7a>
   83854:	aa0f      	add	r2, sp, #60	; 0x3c
   83856:	9904      	ldr	r1, [sp, #16]
   83858:	4620      	mov	r0, r4
   8385a:	f7ff fb35 	bl	82ec8 <__sprint_r.part.0>
   8385e:	bb50      	cbnz	r0, 838b6 <_vfiprintf_r+0x96e>
   83860:	9910      	ldr	r1, [sp, #64]	; 0x40
   83862:	46d4      	mov	ip, sl
   83864:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83866:	f101 0e01 	add.w	lr, r1, #1
   8386a:	e54a      	b.n	83302 <_vfiprintf_r+0x3ba>
   8386c:	2a00      	cmp	r2, #0
   8386e:	f47f aee5 	bne.w	8363c <_vfiprintf_r+0x6f4>
   83872:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   83876:	2900      	cmp	r1, #0
   83878:	f000 811a 	beq.w	83ab0 <_vfiprintf_r+0xb68>
   8387c:	2201      	movs	r2, #1
   8387e:	46d1      	mov	r9, sl
   83880:	4610      	mov	r0, r2
   83882:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   83886:	921d      	str	r2, [sp, #116]	; 0x74
   83888:	911c      	str	r1, [sp, #112]	; 0x70
   8388a:	4601      	mov	r1, r0
   8388c:	f109 0908 	add.w	r9, r9, #8
   83890:	3001      	adds	r0, #1
   83892:	e508      	b.n	832a6 <_vfiprintf_r+0x35e>
   83894:	9b02      	ldr	r3, [sp, #8]
   83896:	2a01      	cmp	r2, #1
   83898:	f000 8097 	beq.w	839ca <_vfiprintf_r+0xa82>
   8389c:	2a02      	cmp	r2, #2
   8389e:	d10d      	bne.n	838bc <_vfiprintf_r+0x974>
   838a0:	9302      	str	r3, [sp, #8]
   838a2:	2600      	movs	r6, #0
   838a4:	2700      	movs	r7, #0
   838a6:	e5b2      	b.n	8340e <_vfiprintf_r+0x4c6>
   838a8:	aa0f      	add	r2, sp, #60	; 0x3c
   838aa:	9904      	ldr	r1, [sp, #16]
   838ac:	9806      	ldr	r0, [sp, #24]
   838ae:	f7ff fb0b 	bl	82ec8 <__sprint_r.part.0>
   838b2:	2800      	cmp	r0, #0
   838b4:	d0c9      	beq.n	8384a <_vfiprintf_r+0x902>
   838b6:	f8dd b010 	ldr.w	fp, [sp, #16]
   838ba:	e797      	b.n	837ec <_vfiprintf_r+0x8a4>
   838bc:	2600      	movs	r6, #0
   838be:	2700      	movs	r7, #0
   838c0:	9302      	str	r3, [sp, #8]
   838c2:	4651      	mov	r1, sl
   838c4:	e000      	b.n	838c8 <_vfiprintf_r+0x980>
   838c6:	4659      	mov	r1, fp
   838c8:	08f2      	lsrs	r2, r6, #3
   838ca:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   838ce:	08f8      	lsrs	r0, r7, #3
   838d0:	f006 0307 	and.w	r3, r6, #7
   838d4:	4607      	mov	r7, r0
   838d6:	4616      	mov	r6, r2
   838d8:	3330      	adds	r3, #48	; 0x30
   838da:	ea56 0207 	orrs.w	r2, r6, r7
   838de:	f801 3c01 	strb.w	r3, [r1, #-1]
   838e2:	f101 3bff 	add.w	fp, r1, #4294967295
   838e6:	d1ee      	bne.n	838c6 <_vfiprintf_r+0x97e>
   838e8:	9a02      	ldr	r2, [sp, #8]
   838ea:	07d6      	lsls	r6, r2, #31
   838ec:	f57f ad9f 	bpl.w	8342e <_vfiprintf_r+0x4e6>
   838f0:	2b30      	cmp	r3, #48	; 0x30
   838f2:	f43f ad9c 	beq.w	8342e <_vfiprintf_r+0x4e6>
   838f6:	2330      	movs	r3, #48	; 0x30
   838f8:	3902      	subs	r1, #2
   838fa:	f80b 3c01 	strb.w	r3, [fp, #-1]
   838fe:	ebaa 0301 	sub.w	r3, sl, r1
   83902:	9305      	str	r3, [sp, #20]
   83904:	468b      	mov	fp, r1
   83906:	e477      	b.n	831f8 <_vfiprintf_r+0x2b0>
   83908:	9b03      	ldr	r3, [sp, #12]
   8390a:	9a08      	ldr	r2, [sp, #32]
   8390c:	428a      	cmp	r2, r1
   8390e:	bfac      	ite	ge
   83910:	189b      	addge	r3, r3, r2
   83912:	185b      	addlt	r3, r3, r1
   83914:	9303      	str	r3, [sp, #12]
   83916:	e798      	b.n	8384a <_vfiprintf_r+0x902>
   83918:	2202      	movs	r2, #2
   8391a:	e44e      	b.n	831ba <_vfiprintf_r+0x272>
   8391c:	2f00      	cmp	r7, #0
   8391e:	bf08      	it	eq
   83920:	2e0a      	cmpeq	r6, #10
   83922:	d351      	bcc.n	839c8 <_vfiprintf_r+0xa80>
   83924:	46d3      	mov	fp, sl
   83926:	4630      	mov	r0, r6
   83928:	4639      	mov	r1, r7
   8392a:	220a      	movs	r2, #10
   8392c:	2300      	movs	r3, #0
   8392e:	f001 fe85 	bl	8563c <__aeabi_uldivmod>
   83932:	3230      	adds	r2, #48	; 0x30
   83934:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   83938:	4630      	mov	r0, r6
   8393a:	4639      	mov	r1, r7
   8393c:	2300      	movs	r3, #0
   8393e:	220a      	movs	r2, #10
   83940:	f001 fe7c 	bl	8563c <__aeabi_uldivmod>
   83944:	4606      	mov	r6, r0
   83946:	460f      	mov	r7, r1
   83948:	ea56 0307 	orrs.w	r3, r6, r7
   8394c:	d1eb      	bne.n	83926 <_vfiprintf_r+0x9de>
   8394e:	e56e      	b.n	8342e <_vfiprintf_r+0x4e6>
   83950:	9405      	str	r4, [sp, #20]
   83952:	46d3      	mov	fp, sl
   83954:	e450      	b.n	831f8 <_vfiprintf_r+0x2b0>
   83956:	aa0f      	add	r2, sp, #60	; 0x3c
   83958:	9904      	ldr	r1, [sp, #16]
   8395a:	9806      	ldr	r0, [sp, #24]
   8395c:	f7ff fab4 	bl	82ec8 <__sprint_r.part.0>
   83960:	2800      	cmp	r0, #0
   83962:	d1a8      	bne.n	838b6 <_vfiprintf_r+0x96e>
   83964:	46d1      	mov	r9, sl
   83966:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83968:	e75e      	b.n	83828 <_vfiprintf_r+0x8e0>
   8396a:	aa0f      	add	r2, sp, #60	; 0x3c
   8396c:	9904      	ldr	r1, [sp, #16]
   8396e:	9806      	ldr	r0, [sp, #24]
   83970:	f7ff faaa 	bl	82ec8 <__sprint_r.part.0>
   83974:	2800      	cmp	r0, #0
   83976:	d19e      	bne.n	838b6 <_vfiprintf_r+0x96e>
   83978:	46d1      	mov	r9, sl
   8397a:	f7ff bbbb 	b.w	830f4 <_vfiprintf_r+0x1ac>
   8397e:	bf00      	nop
   83980:	00085cb4 	.word	0x00085cb4
   83984:	00085ca4 	.word	0x00085ca4
   83988:	3104      	adds	r1, #4
   8398a:	6816      	ldr	r6, [r2, #0]
   8398c:	2700      	movs	r7, #0
   8398e:	2201      	movs	r2, #1
   83990:	9107      	str	r1, [sp, #28]
   83992:	e412      	b.n	831ba <_vfiprintf_r+0x272>
   83994:	9807      	ldr	r0, [sp, #28]
   83996:	2700      	movs	r7, #0
   83998:	4601      	mov	r1, r0
   8399a:	3104      	adds	r1, #4
   8399c:	6806      	ldr	r6, [r0, #0]
   8399e:	9107      	str	r1, [sp, #28]
   839a0:	e40b      	b.n	831ba <_vfiprintf_r+0x272>
   839a2:	680e      	ldr	r6, [r1, #0]
   839a4:	3104      	adds	r1, #4
   839a6:	9107      	str	r1, [sp, #28]
   839a8:	2700      	movs	r7, #0
   839aa:	e592      	b.n	834d2 <_vfiprintf_r+0x58a>
   839ac:	6816      	ldr	r6, [r2, #0]
   839ae:	3204      	adds	r2, #4
   839b0:	17f7      	asrs	r7, r6, #31
   839b2:	9207      	str	r2, [sp, #28]
   839b4:	4630      	mov	r0, r6
   839b6:	4639      	mov	r1, r7
   839b8:	e512      	b.n	833e0 <_vfiprintf_r+0x498>
   839ba:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   839be:	f000 fe75 	bl	846ac <__retarget_lock_release_recursive>
   839c2:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   839c6:	e71b      	b.n	83800 <_vfiprintf_r+0x8b8>
   839c8:	9b02      	ldr	r3, [sp, #8]
   839ca:	9302      	str	r3, [sp, #8]
   839cc:	2301      	movs	r3, #1
   839ce:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   839d2:	3630      	adds	r6, #48	; 0x30
   839d4:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   839d8:	9305      	str	r3, [sp, #20]
   839da:	e40d      	b.n	831f8 <_vfiprintf_r+0x2b0>
   839dc:	aa0f      	add	r2, sp, #60	; 0x3c
   839de:	9904      	ldr	r1, [sp, #16]
   839e0:	9806      	ldr	r0, [sp, #24]
   839e2:	f7ff fa71 	bl	82ec8 <__sprint_r.part.0>
   839e6:	2800      	cmp	r0, #0
   839e8:	f47f af65 	bne.w	838b6 <_vfiprintf_r+0x96e>
   839ec:	9910      	ldr	r1, [sp, #64]	; 0x40
   839ee:	46d1      	mov	r9, sl
   839f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   839f2:	1c48      	adds	r0, r1, #1
   839f4:	e457      	b.n	832a6 <_vfiprintf_r+0x35e>
   839f6:	aa0f      	add	r2, sp, #60	; 0x3c
   839f8:	9904      	ldr	r1, [sp, #16]
   839fa:	9806      	ldr	r0, [sp, #24]
   839fc:	f7ff fa64 	bl	82ec8 <__sprint_r.part.0>
   83a00:	2800      	cmp	r0, #0
   83a02:	f47f af58 	bne.w	838b6 <_vfiprintf_r+0x96e>
   83a06:	9910      	ldr	r1, [sp, #64]	; 0x40
   83a08:	46d1      	mov	r9, sl
   83a0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83a0c:	1c48      	adds	r0, r1, #1
   83a0e:	e644      	b.n	8369a <_vfiprintf_r+0x752>
   83a10:	2a00      	cmp	r2, #0
   83a12:	f040 8087 	bne.w	83b24 <_vfiprintf_r+0xbdc>
   83a16:	2001      	movs	r0, #1
   83a18:	4611      	mov	r1, r2
   83a1a:	46d1      	mov	r9, sl
   83a1c:	e641      	b.n	836a2 <_vfiprintf_r+0x75a>
   83a1e:	aa0f      	add	r2, sp, #60	; 0x3c
   83a20:	9904      	ldr	r1, [sp, #16]
   83a22:	9806      	ldr	r0, [sp, #24]
   83a24:	f7ff fa50 	bl	82ec8 <__sprint_r.part.0>
   83a28:	2800      	cmp	r0, #0
   83a2a:	f47f af44 	bne.w	838b6 <_vfiprintf_r+0x96e>
   83a2e:	9810      	ldr	r0, [sp, #64]	; 0x40
   83a30:	46d1      	mov	r9, sl
   83a32:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83a34:	3001      	adds	r0, #1
   83a36:	e668      	b.n	8370a <_vfiprintf_r+0x7c2>
   83a38:	46cb      	mov	fp, r9
   83a3a:	e6d7      	b.n	837ec <_vfiprintf_r+0x8a4>
   83a3c:	9d07      	ldr	r5, [sp, #28]
   83a3e:	3507      	adds	r5, #7
   83a40:	f025 0507 	bic.w	r5, r5, #7
   83a44:	f105 0208 	add.w	r2, r5, #8
   83a48:	e9d5 0100 	ldrd	r0, r1, [r5]
   83a4c:	9207      	str	r2, [sp, #28]
   83a4e:	4606      	mov	r6, r0
   83a50:	460f      	mov	r7, r1
   83a52:	e4c5      	b.n	833e0 <_vfiprintf_r+0x498>
   83a54:	9d07      	ldr	r5, [sp, #28]
   83a56:	3507      	adds	r5, #7
   83a58:	f025 0207 	bic.w	r2, r5, #7
   83a5c:	f102 0108 	add.w	r1, r2, #8
   83a60:	e9d2 6700 	ldrd	r6, r7, [r2]
   83a64:	9107      	str	r1, [sp, #28]
   83a66:	2201      	movs	r2, #1
   83a68:	f7ff bba7 	b.w	831ba <_vfiprintf_r+0x272>
   83a6c:	9d07      	ldr	r5, [sp, #28]
   83a6e:	3507      	adds	r5, #7
   83a70:	f025 0207 	bic.w	r2, r5, #7
   83a74:	f102 0108 	add.w	r1, r2, #8
   83a78:	e9d2 6700 	ldrd	r6, r7, [r2]
   83a7c:	9107      	str	r1, [sp, #28]
   83a7e:	2200      	movs	r2, #0
   83a80:	f7ff bb9b 	b.w	831ba <_vfiprintf_r+0x272>
   83a84:	9d07      	ldr	r5, [sp, #28]
   83a86:	3507      	adds	r5, #7
   83a88:	f025 0107 	bic.w	r1, r5, #7
   83a8c:	f101 0008 	add.w	r0, r1, #8
   83a90:	9007      	str	r0, [sp, #28]
   83a92:	e9d1 6700 	ldrd	r6, r7, [r1]
   83a96:	e51c      	b.n	834d2 <_vfiprintf_r+0x58a>
   83a98:	46d3      	mov	fp, sl
   83a9a:	f7ff bbad 	b.w	831f8 <_vfiprintf_r+0x2b0>
   83a9e:	252d      	movs	r5, #45	; 0x2d
   83aa0:	4276      	negs	r6, r6
   83aa2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   83aa6:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   83aaa:	2201      	movs	r2, #1
   83aac:	f7ff bb8a 	b.w	831c4 <_vfiprintf_r+0x27c>
   83ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   83ab2:	b9b3      	cbnz	r3, 83ae2 <_vfiprintf_r+0xb9a>
   83ab4:	4611      	mov	r1, r2
   83ab6:	2001      	movs	r0, #1
   83ab8:	46d1      	mov	r9, sl
   83aba:	e5f2      	b.n	836a2 <_vfiprintf_r+0x75a>
   83abc:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   83ac0:	f000 fdf4 	bl	846ac <__retarget_lock_release_recursive>
   83ac4:	f04f 33ff 	mov.w	r3, #4294967295
   83ac8:	9303      	str	r3, [sp, #12]
   83aca:	f7ff bb4c 	b.w	83166 <_vfiprintf_r+0x21e>
   83ace:	aa0f      	add	r2, sp, #60	; 0x3c
   83ad0:	9904      	ldr	r1, [sp, #16]
   83ad2:	9806      	ldr	r0, [sp, #24]
   83ad4:	f7ff f9f8 	bl	82ec8 <__sprint_r.part.0>
   83ad8:	2800      	cmp	r0, #0
   83ada:	f47f aeec 	bne.w	838b6 <_vfiprintf_r+0x96e>
   83ade:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83ae0:	e6aa      	b.n	83838 <_vfiprintf_r+0x8f0>
   83ae2:	2202      	movs	r2, #2
   83ae4:	ab0e      	add	r3, sp, #56	; 0x38
   83ae6:	921d      	str	r2, [sp, #116]	; 0x74
   83ae8:	931c      	str	r3, [sp, #112]	; 0x70
   83aea:	2001      	movs	r0, #1
   83aec:	46d1      	mov	r9, sl
   83aee:	e5d0      	b.n	83692 <_vfiprintf_r+0x74a>
   83af0:	4d34      	ldr	r5, [pc, #208]	; (83bc4 <_vfiprintf_r+0xc7c>)
   83af2:	e5fd      	b.n	836f0 <_vfiprintf_r+0x7a8>
   83af4:	9a07      	ldr	r2, [sp, #28]
   83af6:	4613      	mov	r3, r2
   83af8:	3304      	adds	r3, #4
   83afa:	9307      	str	r3, [sp, #28]
   83afc:	9b03      	ldr	r3, [sp, #12]
   83afe:	6811      	ldr	r1, [r2, #0]
   83b00:	17dd      	asrs	r5, r3, #31
   83b02:	461a      	mov	r2, r3
   83b04:	462b      	mov	r3, r5
   83b06:	e9c1 2300 	strd	r2, r3, [r1]
   83b0a:	f7ff ba5a 	b.w	82fc2 <_vfiprintf_r+0x7a>
   83b0e:	4658      	mov	r0, fp
   83b10:	9507      	str	r5, [sp, #28]
   83b12:	9302      	str	r3, [sp, #8]
   83b14:	f7ff f978 	bl	82e08 <strlen>
   83b18:	2400      	movs	r4, #0
   83b1a:	9005      	str	r0, [sp, #20]
   83b1c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83b20:	f7ff bb6a 	b.w	831f8 <_vfiprintf_r+0x2b0>
   83b24:	aa0f      	add	r2, sp, #60	; 0x3c
   83b26:	9904      	ldr	r1, [sp, #16]
   83b28:	9806      	ldr	r0, [sp, #24]
   83b2a:	f7ff f9cd 	bl	82ec8 <__sprint_r.part.0>
   83b2e:	2800      	cmp	r0, #0
   83b30:	f47f aec1 	bne.w	838b6 <_vfiprintf_r+0x96e>
   83b34:	9910      	ldr	r1, [sp, #64]	; 0x40
   83b36:	46d1      	mov	r9, sl
   83b38:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83b3a:	1c48      	adds	r0, r1, #1
   83b3c:	e5b1      	b.n	836a2 <_vfiprintf_r+0x75a>
   83b3e:	9910      	ldr	r1, [sp, #64]	; 0x40
   83b40:	9a11      	ldr	r2, [sp, #68]	; 0x44
   83b42:	3101      	adds	r1, #1
   83b44:	4e20      	ldr	r6, [pc, #128]	; (83bc8 <_vfiprintf_r+0xc80>)
   83b46:	f7ff bb9c 	b.w	83282 <_vfiprintf_r+0x33a>
   83b4a:	2c06      	cmp	r4, #6
   83b4c:	bf28      	it	cs
   83b4e:	2406      	movcs	r4, #6
   83b50:	9507      	str	r5, [sp, #28]
   83b52:	9405      	str	r4, [sp, #20]
   83b54:	9401      	str	r4, [sp, #4]
   83b56:	f8df b074 	ldr.w	fp, [pc, #116]	; 83bcc <_vfiprintf_r+0xc84>
   83b5a:	e4e3      	b.n	83524 <_vfiprintf_r+0x5dc>
   83b5c:	9810      	ldr	r0, [sp, #64]	; 0x40
   83b5e:	4e1a      	ldr	r6, [pc, #104]	; (83bc8 <_vfiprintf_r+0xc80>)
   83b60:	3001      	adds	r0, #1
   83b62:	e60e      	b.n	83782 <_vfiprintf_r+0x83a>
   83b64:	4686      	mov	lr, r0
   83b66:	4d17      	ldr	r5, [pc, #92]	; (83bc4 <_vfiprintf_r+0xc7c>)
   83b68:	f7ff bbe2 	b.w	83330 <_vfiprintf_r+0x3e8>
   83b6c:	9405      	str	r4, [sp, #20]
   83b6e:	9507      	str	r5, [sp, #28]
   83b70:	9302      	str	r3, [sp, #8]
   83b72:	4604      	mov	r4, r0
   83b74:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   83b78:	f7ff bb3e 	b.w	831f8 <_vfiprintf_r+0x2b0>
   83b7c:	9806      	ldr	r0, [sp, #24]
   83b7e:	aa0f      	add	r2, sp, #60	; 0x3c
   83b80:	4659      	mov	r1, fp
   83b82:	f7ff f9a1 	bl	82ec8 <__sprint_r.part.0>
   83b86:	2800      	cmp	r0, #0
   83b88:	f43f ae2e 	beq.w	837e8 <_vfiprintf_r+0x8a0>
   83b8c:	e62e      	b.n	837ec <_vfiprintf_r+0x8a4>
   83b8e:	9907      	ldr	r1, [sp, #28]
   83b90:	f898 2001 	ldrb.w	r2, [r8, #1]
   83b94:	680c      	ldr	r4, [r1, #0]
   83b96:	3104      	adds	r1, #4
   83b98:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   83b9c:	46b8      	mov	r8, r7
   83b9e:	9107      	str	r1, [sp, #28]
   83ba0:	f7ff ba44 	b.w	8302c <_vfiprintf_r+0xe4>
   83ba4:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83ba8:	e4a7      	b.n	834fa <_vfiprintf_r+0x5b2>
   83baa:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83bae:	e521      	b.n	835f4 <_vfiprintf_r+0x6ac>
   83bb0:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83bb4:	e47c      	b.n	834b0 <_vfiprintf_r+0x568>
   83bb6:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83bba:	e43f      	b.n	8343c <_vfiprintf_r+0x4f4>
   83bbc:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   83bc0:	f7ff bbfa 	b.w	833b8 <_vfiprintf_r+0x470>
   83bc4:	00085cb4 	.word	0x00085cb4
   83bc8:	00085ca4 	.word	0x00085ca4
   83bcc:	00085c9c 	.word	0x00085c9c

00083bd0 <__sbprintf>:
   83bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83bd4:	460c      	mov	r4, r1
   83bd6:	f04f 0e00 	mov.w	lr, #0
   83bda:	f44f 6580 	mov.w	r5, #1024	; 0x400
   83bde:	4606      	mov	r6, r0
   83be0:	4617      	mov	r7, r2
   83be2:	4698      	mov	r8, r3
   83be4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   83be6:	89e3      	ldrh	r3, [r4, #14]
   83be8:	8989      	ldrh	r1, [r1, #12]
   83bea:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   83bee:	f021 0102 	bic.w	r1, r1, #2
   83bf2:	9219      	str	r2, [sp, #100]	; 0x64
   83bf4:	f8ad 300e 	strh.w	r3, [sp, #14]
   83bf8:	69e2      	ldr	r2, [r4, #28]
   83bfa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   83bfc:	f8ad 100c 	strh.w	r1, [sp, #12]
   83c00:	a816      	add	r0, sp, #88	; 0x58
   83c02:	a91a      	add	r1, sp, #104	; 0x68
   83c04:	f8cd e018 	str.w	lr, [sp, #24]
   83c08:	9207      	str	r2, [sp, #28]
   83c0a:	9309      	str	r3, [sp, #36]	; 0x24
   83c0c:	9100      	str	r1, [sp, #0]
   83c0e:	9104      	str	r1, [sp, #16]
   83c10:	9502      	str	r5, [sp, #8]
   83c12:	9505      	str	r5, [sp, #20]
   83c14:	f000 fd44 	bl	846a0 <__retarget_lock_init_recursive>
   83c18:	4643      	mov	r3, r8
   83c1a:	463a      	mov	r2, r7
   83c1c:	4669      	mov	r1, sp
   83c1e:	4630      	mov	r0, r6
   83c20:	f7ff f992 	bl	82f48 <_vfiprintf_r>
   83c24:	1e05      	subs	r5, r0, #0
   83c26:	db07      	blt.n	83c38 <__sbprintf+0x68>
   83c28:	4630      	mov	r0, r6
   83c2a:	4669      	mov	r1, sp
   83c2c:	f000 f924 	bl	83e78 <_fflush_r>
   83c30:	2800      	cmp	r0, #0
   83c32:	bf18      	it	ne
   83c34:	f04f 35ff 	movne.w	r5, #4294967295
   83c38:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   83c3c:	065b      	lsls	r3, r3, #25
   83c3e:	d503      	bpl.n	83c48 <__sbprintf+0x78>
   83c40:	89a3      	ldrh	r3, [r4, #12]
   83c42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83c46:	81a3      	strh	r3, [r4, #12]
   83c48:	9816      	ldr	r0, [sp, #88]	; 0x58
   83c4a:	f000 fd2b 	bl	846a4 <__retarget_lock_close_recursive>
   83c4e:	4628      	mov	r0, r5
   83c50:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   83c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00083c58 <__swsetup_r>:
   83c58:	b538      	push	{r3, r4, r5, lr}
   83c5a:	4b30      	ldr	r3, [pc, #192]	; (83d1c <__swsetup_r+0xc4>)
   83c5c:	4605      	mov	r5, r0
   83c5e:	6818      	ldr	r0, [r3, #0]
   83c60:	460c      	mov	r4, r1
   83c62:	b110      	cbz	r0, 83c6a <__swsetup_r+0x12>
   83c64:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83c66:	2b00      	cmp	r3, #0
   83c68:	d038      	beq.n	83cdc <__swsetup_r+0x84>
   83c6a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83c6e:	b293      	uxth	r3, r2
   83c70:	0718      	lsls	r0, r3, #28
   83c72:	d50c      	bpl.n	83c8e <__swsetup_r+0x36>
   83c74:	6920      	ldr	r0, [r4, #16]
   83c76:	b1a8      	cbz	r0, 83ca4 <__swsetup_r+0x4c>
   83c78:	f013 0201 	ands.w	r2, r3, #1
   83c7c:	d01e      	beq.n	83cbc <__swsetup_r+0x64>
   83c7e:	2200      	movs	r2, #0
   83c80:	6963      	ldr	r3, [r4, #20]
   83c82:	60a2      	str	r2, [r4, #8]
   83c84:	425b      	negs	r3, r3
   83c86:	61a3      	str	r3, [r4, #24]
   83c88:	b1f0      	cbz	r0, 83cc8 <__swsetup_r+0x70>
   83c8a:	2000      	movs	r0, #0
   83c8c:	bd38      	pop	{r3, r4, r5, pc}
   83c8e:	06d9      	lsls	r1, r3, #27
   83c90:	d53b      	bpl.n	83d0a <__swsetup_r+0xb2>
   83c92:	0758      	lsls	r0, r3, #29
   83c94:	d425      	bmi.n	83ce2 <__swsetup_r+0x8a>
   83c96:	6920      	ldr	r0, [r4, #16]
   83c98:	f042 0308 	orr.w	r3, r2, #8
   83c9c:	81a3      	strh	r3, [r4, #12]
   83c9e:	b29b      	uxth	r3, r3
   83ca0:	2800      	cmp	r0, #0
   83ca2:	d1e9      	bne.n	83c78 <__swsetup_r+0x20>
   83ca4:	f403 7220 	and.w	r2, r3, #640	; 0x280
   83ca8:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   83cac:	d0e4      	beq.n	83c78 <__swsetup_r+0x20>
   83cae:	4628      	mov	r0, r5
   83cb0:	4621      	mov	r1, r4
   83cb2:	f000 fd2b 	bl	8470c <__smakebuf_r>
   83cb6:	89a3      	ldrh	r3, [r4, #12]
   83cb8:	6920      	ldr	r0, [r4, #16]
   83cba:	e7dd      	b.n	83c78 <__swsetup_r+0x20>
   83cbc:	0799      	lsls	r1, r3, #30
   83cbe:	bf58      	it	pl
   83cc0:	6962      	ldrpl	r2, [r4, #20]
   83cc2:	60a2      	str	r2, [r4, #8]
   83cc4:	2800      	cmp	r0, #0
   83cc6:	d1e0      	bne.n	83c8a <__swsetup_r+0x32>
   83cc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83ccc:	061a      	lsls	r2, r3, #24
   83cce:	d5dd      	bpl.n	83c8c <__swsetup_r+0x34>
   83cd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83cd4:	81a3      	strh	r3, [r4, #12]
   83cd6:	f04f 30ff 	mov.w	r0, #4294967295
   83cda:	bd38      	pop	{r3, r4, r5, pc}
   83cdc:	f000 f924 	bl	83f28 <__sinit>
   83ce0:	e7c3      	b.n	83c6a <__swsetup_r+0x12>
   83ce2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   83ce4:	b151      	cbz	r1, 83cfc <__swsetup_r+0xa4>
   83ce6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   83cea:	4299      	cmp	r1, r3
   83cec:	d004      	beq.n	83cf8 <__swsetup_r+0xa0>
   83cee:	4628      	mov	r0, r5
   83cf0:	f000 fa40 	bl	84174 <_free_r>
   83cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83cf8:	2300      	movs	r3, #0
   83cfa:	6323      	str	r3, [r4, #48]	; 0x30
   83cfc:	2300      	movs	r3, #0
   83cfe:	6920      	ldr	r0, [r4, #16]
   83d00:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   83d04:	e884 0009 	stmia.w	r4, {r0, r3}
   83d08:	e7c6      	b.n	83c98 <__swsetup_r+0x40>
   83d0a:	2309      	movs	r3, #9
   83d0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   83d10:	602b      	str	r3, [r5, #0]
   83d12:	f04f 30ff 	mov.w	r0, #4294967295
   83d16:	81a2      	strh	r2, [r4, #12]
   83d18:	bd38      	pop	{r3, r4, r5, pc}
   83d1a:	bf00      	nop
   83d1c:	2007013c 	.word	0x2007013c

00083d20 <register_fini>:
   83d20:	4b02      	ldr	r3, [pc, #8]	; (83d2c <register_fini+0xc>)
   83d22:	b113      	cbz	r3, 83d2a <register_fini+0xa>
   83d24:	4802      	ldr	r0, [pc, #8]	; (83d30 <register_fini+0x10>)
   83d26:	f000 b805 	b.w	83d34 <atexit>
   83d2a:	4770      	bx	lr
   83d2c:	00000000 	.word	0x00000000
   83d30:	00083fa1 	.word	0x00083fa1

00083d34 <atexit>:
   83d34:	2300      	movs	r3, #0
   83d36:	4601      	mov	r1, r0
   83d38:	461a      	mov	r2, r3
   83d3a:	4618      	mov	r0, r3
   83d3c:	f001 bb56 	b.w	853ec <__register_exitproc>

00083d40 <__sflush_r>:
   83d40:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   83d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83d48:	b29a      	uxth	r2, r3
   83d4a:	460d      	mov	r5, r1
   83d4c:	0711      	lsls	r1, r2, #28
   83d4e:	4680      	mov	r8, r0
   83d50:	d43a      	bmi.n	83dc8 <__sflush_r+0x88>
   83d52:	686a      	ldr	r2, [r5, #4]
   83d54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   83d58:	2a00      	cmp	r2, #0
   83d5a:	81ab      	strh	r3, [r5, #12]
   83d5c:	dd70      	ble.n	83e40 <__sflush_r+0x100>
   83d5e:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83d60:	2c00      	cmp	r4, #0
   83d62:	d04a      	beq.n	83dfa <__sflush_r+0xba>
   83d64:	2200      	movs	r2, #0
   83d66:	b29b      	uxth	r3, r3
   83d68:	f8d8 6000 	ldr.w	r6, [r8]
   83d6c:	f8c8 2000 	str.w	r2, [r8]
   83d70:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   83d74:	d068      	beq.n	83e48 <__sflush_r+0x108>
   83d76:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   83d78:	075f      	lsls	r7, r3, #29
   83d7a:	d505      	bpl.n	83d88 <__sflush_r+0x48>
   83d7c:	6869      	ldr	r1, [r5, #4]
   83d7e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   83d80:	1a52      	subs	r2, r2, r1
   83d82:	b10b      	cbz	r3, 83d88 <__sflush_r+0x48>
   83d84:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   83d86:	1ad2      	subs	r2, r2, r3
   83d88:	2300      	movs	r3, #0
   83d8a:	69e9      	ldr	r1, [r5, #28]
   83d8c:	4640      	mov	r0, r8
   83d8e:	47a0      	blx	r4
   83d90:	1c44      	adds	r4, r0, #1
   83d92:	d03d      	beq.n	83e10 <__sflush_r+0xd0>
   83d94:	2100      	movs	r1, #0
   83d96:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   83d9a:	692a      	ldr	r2, [r5, #16]
   83d9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83da0:	81ab      	strh	r3, [r5, #12]
   83da2:	04db      	lsls	r3, r3, #19
   83da4:	6069      	str	r1, [r5, #4]
   83da6:	602a      	str	r2, [r5, #0]
   83da8:	d448      	bmi.n	83e3c <__sflush_r+0xfc>
   83daa:	6b29      	ldr	r1, [r5, #48]	; 0x30
   83dac:	f8c8 6000 	str.w	r6, [r8]
   83db0:	b319      	cbz	r1, 83dfa <__sflush_r+0xba>
   83db2:	f105 0340 	add.w	r3, r5, #64	; 0x40
   83db6:	4299      	cmp	r1, r3
   83db8:	d002      	beq.n	83dc0 <__sflush_r+0x80>
   83dba:	4640      	mov	r0, r8
   83dbc:	f000 f9da 	bl	84174 <_free_r>
   83dc0:	2000      	movs	r0, #0
   83dc2:	6328      	str	r0, [r5, #48]	; 0x30
   83dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83dc8:	692e      	ldr	r6, [r5, #16]
   83dca:	b1b6      	cbz	r6, 83dfa <__sflush_r+0xba>
   83dcc:	0791      	lsls	r1, r2, #30
   83dce:	bf18      	it	ne
   83dd0:	2300      	movne	r3, #0
   83dd2:	682c      	ldr	r4, [r5, #0]
   83dd4:	bf08      	it	eq
   83dd6:	696b      	ldreq	r3, [r5, #20]
   83dd8:	602e      	str	r6, [r5, #0]
   83dda:	1ba4      	subs	r4, r4, r6
   83ddc:	60ab      	str	r3, [r5, #8]
   83dde:	e00a      	b.n	83df6 <__sflush_r+0xb6>
   83de0:	4623      	mov	r3, r4
   83de2:	4632      	mov	r2, r6
   83de4:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   83de6:	69e9      	ldr	r1, [r5, #28]
   83de8:	4640      	mov	r0, r8
   83dea:	47b8      	blx	r7
   83dec:	2800      	cmp	r0, #0
   83dee:	eba4 0400 	sub.w	r4, r4, r0
   83df2:	4406      	add	r6, r0
   83df4:	dd04      	ble.n	83e00 <__sflush_r+0xc0>
   83df6:	2c00      	cmp	r4, #0
   83df8:	dcf2      	bgt.n	83de0 <__sflush_r+0xa0>
   83dfa:	2000      	movs	r0, #0
   83dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e00:	89ab      	ldrh	r3, [r5, #12]
   83e02:	f04f 30ff 	mov.w	r0, #4294967295
   83e06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83e0a:	81ab      	strh	r3, [r5, #12]
   83e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   83e10:	f8d8 4000 	ldr.w	r4, [r8]
   83e14:	2c1d      	cmp	r4, #29
   83e16:	d8f3      	bhi.n	83e00 <__sflush_r+0xc0>
   83e18:	4b16      	ldr	r3, [pc, #88]	; (83e74 <__sflush_r+0x134>)
   83e1a:	40e3      	lsrs	r3, r4
   83e1c:	43db      	mvns	r3, r3
   83e1e:	f013 0301 	ands.w	r3, r3, #1
   83e22:	d1ed      	bne.n	83e00 <__sflush_r+0xc0>
   83e24:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   83e28:	6929      	ldr	r1, [r5, #16]
   83e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   83e2e:	81aa      	strh	r2, [r5, #12]
   83e30:	04d2      	lsls	r2, r2, #19
   83e32:	606b      	str	r3, [r5, #4]
   83e34:	6029      	str	r1, [r5, #0]
   83e36:	d5b8      	bpl.n	83daa <__sflush_r+0x6a>
   83e38:	2c00      	cmp	r4, #0
   83e3a:	d1b6      	bne.n	83daa <__sflush_r+0x6a>
   83e3c:	6528      	str	r0, [r5, #80]	; 0x50
   83e3e:	e7b4      	b.n	83daa <__sflush_r+0x6a>
   83e40:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   83e42:	2a00      	cmp	r2, #0
   83e44:	dc8b      	bgt.n	83d5e <__sflush_r+0x1e>
   83e46:	e7d8      	b.n	83dfa <__sflush_r+0xba>
   83e48:	2301      	movs	r3, #1
   83e4a:	69e9      	ldr	r1, [r5, #28]
   83e4c:	4640      	mov	r0, r8
   83e4e:	47a0      	blx	r4
   83e50:	1c43      	adds	r3, r0, #1
   83e52:	4602      	mov	r2, r0
   83e54:	d002      	beq.n	83e5c <__sflush_r+0x11c>
   83e56:	89ab      	ldrh	r3, [r5, #12]
   83e58:	6aac      	ldr	r4, [r5, #40]	; 0x28
   83e5a:	e78d      	b.n	83d78 <__sflush_r+0x38>
   83e5c:	f8d8 3000 	ldr.w	r3, [r8]
   83e60:	2b00      	cmp	r3, #0
   83e62:	d0f8      	beq.n	83e56 <__sflush_r+0x116>
   83e64:	2b1d      	cmp	r3, #29
   83e66:	d001      	beq.n	83e6c <__sflush_r+0x12c>
   83e68:	2b16      	cmp	r3, #22
   83e6a:	d1c9      	bne.n	83e00 <__sflush_r+0xc0>
   83e6c:	f8c8 6000 	str.w	r6, [r8]
   83e70:	e7c3      	b.n	83dfa <__sflush_r+0xba>
   83e72:	bf00      	nop
   83e74:	20400001 	.word	0x20400001

00083e78 <_fflush_r>:
   83e78:	b538      	push	{r3, r4, r5, lr}
   83e7a:	460d      	mov	r5, r1
   83e7c:	4604      	mov	r4, r0
   83e7e:	b108      	cbz	r0, 83e84 <_fflush_r+0xc>
   83e80:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83e82:	b1bb      	cbz	r3, 83eb4 <_fflush_r+0x3c>
   83e84:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   83e88:	b188      	cbz	r0, 83eae <_fflush_r+0x36>
   83e8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83e8c:	07db      	lsls	r3, r3, #31
   83e8e:	d401      	bmi.n	83e94 <_fflush_r+0x1c>
   83e90:	0581      	lsls	r1, r0, #22
   83e92:	d517      	bpl.n	83ec4 <_fflush_r+0x4c>
   83e94:	4620      	mov	r0, r4
   83e96:	4629      	mov	r1, r5
   83e98:	f7ff ff52 	bl	83d40 <__sflush_r>
   83e9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   83e9e:	4604      	mov	r4, r0
   83ea0:	07da      	lsls	r2, r3, #31
   83ea2:	d402      	bmi.n	83eaa <_fflush_r+0x32>
   83ea4:	89ab      	ldrh	r3, [r5, #12]
   83ea6:	059b      	lsls	r3, r3, #22
   83ea8:	d507      	bpl.n	83eba <_fflush_r+0x42>
   83eaa:	4620      	mov	r0, r4
   83eac:	bd38      	pop	{r3, r4, r5, pc}
   83eae:	4604      	mov	r4, r0
   83eb0:	4620      	mov	r0, r4
   83eb2:	bd38      	pop	{r3, r4, r5, pc}
   83eb4:	f000 f838 	bl	83f28 <__sinit>
   83eb8:	e7e4      	b.n	83e84 <_fflush_r+0xc>
   83eba:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83ebc:	f000 fbf6 	bl	846ac <__retarget_lock_release_recursive>
   83ec0:	4620      	mov	r0, r4
   83ec2:	bd38      	pop	{r3, r4, r5, pc}
   83ec4:	6da8      	ldr	r0, [r5, #88]	; 0x58
   83ec6:	f000 fbef 	bl	846a8 <__retarget_lock_acquire_recursive>
   83eca:	e7e3      	b.n	83e94 <_fflush_r+0x1c>

00083ecc <_cleanup_r>:
   83ecc:	4901      	ldr	r1, [pc, #4]	; (83ed4 <_cleanup_r+0x8>)
   83ece:	f000 bbb1 	b.w	84634 <_fwalk_reent>
   83ed2:	bf00      	nop
   83ed4:	000854d5 	.word	0x000854d5

00083ed8 <std.isra.0>:
   83ed8:	2300      	movs	r3, #0
   83eda:	b510      	push	{r4, lr}
   83edc:	4604      	mov	r4, r0
   83ede:	8181      	strh	r1, [r0, #12]
   83ee0:	81c2      	strh	r2, [r0, #14]
   83ee2:	6003      	str	r3, [r0, #0]
   83ee4:	6043      	str	r3, [r0, #4]
   83ee6:	6083      	str	r3, [r0, #8]
   83ee8:	6643      	str	r3, [r0, #100]	; 0x64
   83eea:	6103      	str	r3, [r0, #16]
   83eec:	6143      	str	r3, [r0, #20]
   83eee:	6183      	str	r3, [r0, #24]
   83ef0:	4619      	mov	r1, r3
   83ef2:	2208      	movs	r2, #8
   83ef4:	305c      	adds	r0, #92	; 0x5c
   83ef6:	f7fe fe69 	bl	82bcc <memset>
   83efa:	4807      	ldr	r0, [pc, #28]	; (83f18 <std.isra.0+0x40>)
   83efc:	4907      	ldr	r1, [pc, #28]	; (83f1c <std.isra.0+0x44>)
   83efe:	4a08      	ldr	r2, [pc, #32]	; (83f20 <std.isra.0+0x48>)
   83f00:	4b08      	ldr	r3, [pc, #32]	; (83f24 <std.isra.0+0x4c>)
   83f02:	6220      	str	r0, [r4, #32]
   83f04:	61e4      	str	r4, [r4, #28]
   83f06:	6261      	str	r1, [r4, #36]	; 0x24
   83f08:	62a2      	str	r2, [r4, #40]	; 0x28
   83f0a:	62e3      	str	r3, [r4, #44]	; 0x2c
   83f0c:	f104 0058 	add.w	r0, r4, #88	; 0x58
   83f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83f14:	f000 bbc4 	b.w	846a0 <__retarget_lock_init_recursive>
   83f18:	0008521d 	.word	0x0008521d
   83f1c:	00085241 	.word	0x00085241
   83f20:	0008527d 	.word	0x0008527d
   83f24:	0008529d 	.word	0x0008529d

00083f28 <__sinit>:
   83f28:	b510      	push	{r4, lr}
   83f2a:	4604      	mov	r4, r0
   83f2c:	4814      	ldr	r0, [pc, #80]	; (83f80 <__sinit+0x58>)
   83f2e:	f000 fbbb 	bl	846a8 <__retarget_lock_acquire_recursive>
   83f32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   83f34:	b9fa      	cbnz	r2, 83f76 <__sinit+0x4e>
   83f36:	2003      	movs	r0, #3
   83f38:	4912      	ldr	r1, [pc, #72]	; (83f84 <__sinit+0x5c>)
   83f3a:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   83f3e:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   83f42:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   83f46:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   83f4a:	63e1      	str	r1, [r4, #60]	; 0x3c
   83f4c:	6860      	ldr	r0, [r4, #4]
   83f4e:	2104      	movs	r1, #4
   83f50:	f7ff ffc2 	bl	83ed8 <std.isra.0>
   83f54:	68a0      	ldr	r0, [r4, #8]
   83f56:	2201      	movs	r2, #1
   83f58:	2109      	movs	r1, #9
   83f5a:	f7ff ffbd 	bl	83ed8 <std.isra.0>
   83f5e:	68e0      	ldr	r0, [r4, #12]
   83f60:	2202      	movs	r2, #2
   83f62:	2112      	movs	r1, #18
   83f64:	f7ff ffb8 	bl	83ed8 <std.isra.0>
   83f68:	2301      	movs	r3, #1
   83f6a:	4805      	ldr	r0, [pc, #20]	; (83f80 <__sinit+0x58>)
   83f6c:	63a3      	str	r3, [r4, #56]	; 0x38
   83f6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83f72:	f000 bb9b 	b.w	846ac <__retarget_lock_release_recursive>
   83f76:	4802      	ldr	r0, [pc, #8]	; (83f80 <__sinit+0x58>)
   83f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   83f7c:	f000 bb96 	b.w	846ac <__retarget_lock_release_recursive>
   83f80:	2007ad88 	.word	0x2007ad88
   83f84:	00083ecd 	.word	0x00083ecd

00083f88 <__sfp_lock_acquire>:
   83f88:	4801      	ldr	r0, [pc, #4]	; (83f90 <__sfp_lock_acquire+0x8>)
   83f8a:	f000 bb8d 	b.w	846a8 <__retarget_lock_acquire_recursive>
   83f8e:	bf00      	nop
   83f90:	2007ad9c 	.word	0x2007ad9c

00083f94 <__sfp_lock_release>:
   83f94:	4801      	ldr	r0, [pc, #4]	; (83f9c <__sfp_lock_release+0x8>)
   83f96:	f000 bb89 	b.w	846ac <__retarget_lock_release_recursive>
   83f9a:	bf00      	nop
   83f9c:	2007ad9c 	.word	0x2007ad9c

00083fa0 <__libc_fini_array>:
   83fa0:	b538      	push	{r3, r4, r5, lr}
   83fa2:	4c0a      	ldr	r4, [pc, #40]	; (83fcc <__libc_fini_array+0x2c>)
   83fa4:	4d0a      	ldr	r5, [pc, #40]	; (83fd0 <__libc_fini_array+0x30>)
   83fa6:	1b64      	subs	r4, r4, r5
   83fa8:	10a4      	asrs	r4, r4, #2
   83faa:	d00a      	beq.n	83fc2 <__libc_fini_array+0x22>
   83fac:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   83fb0:	3b01      	subs	r3, #1
   83fb2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   83fb6:	3c01      	subs	r4, #1
   83fb8:	f855 3904 	ldr.w	r3, [r5], #-4
   83fbc:	4798      	blx	r3
   83fbe:	2c00      	cmp	r4, #0
   83fc0:	d1f9      	bne.n	83fb6 <__libc_fini_array+0x16>
   83fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83fc6:	f001 bf11 	b.w	85dec <_fini>
   83fca:	bf00      	nop
   83fcc:	00085dfc 	.word	0x00085dfc
   83fd0:	00085df8 	.word	0x00085df8

00083fd4 <__fputwc>:
   83fd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   83fd8:	b083      	sub	sp, #12
   83fda:	4607      	mov	r7, r0
   83fdc:	4688      	mov	r8, r1
   83fde:	4614      	mov	r4, r2
   83fe0:	f000 fb50 	bl	84684 <__locale_mb_cur_max>
   83fe4:	2801      	cmp	r0, #1
   83fe6:	d033      	beq.n	84050 <__fputwc+0x7c>
   83fe8:	4642      	mov	r2, r8
   83fea:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   83fee:	a901      	add	r1, sp, #4
   83ff0:	4638      	mov	r0, r7
   83ff2:	f001 f9af 	bl	85354 <_wcrtomb_r>
   83ff6:	1c42      	adds	r2, r0, #1
   83ff8:	4606      	mov	r6, r0
   83ffa:	d022      	beq.n	84042 <__fputwc+0x6e>
   83ffc:	b390      	cbz	r0, 84064 <__fputwc+0x90>
   83ffe:	f89d 1004 	ldrb.w	r1, [sp, #4]
   84002:	2500      	movs	r5, #0
   84004:	f10d 0904 	add.w	r9, sp, #4
   84008:	e008      	b.n	8401c <__fputwc+0x48>
   8400a:	6823      	ldr	r3, [r4, #0]
   8400c:	1c5a      	adds	r2, r3, #1
   8400e:	6022      	str	r2, [r4, #0]
   84010:	7019      	strb	r1, [r3, #0]
   84012:	3501      	adds	r5, #1
   84014:	42b5      	cmp	r5, r6
   84016:	d225      	bcs.n	84064 <__fputwc+0x90>
   84018:	f815 1009 	ldrb.w	r1, [r5, r9]
   8401c:	68a3      	ldr	r3, [r4, #8]
   8401e:	3b01      	subs	r3, #1
   84020:	2b00      	cmp	r3, #0
   84022:	60a3      	str	r3, [r4, #8]
   84024:	daf1      	bge.n	8400a <__fputwc+0x36>
   84026:	69a2      	ldr	r2, [r4, #24]
   84028:	4293      	cmp	r3, r2
   8402a:	db01      	blt.n	84030 <__fputwc+0x5c>
   8402c:	290a      	cmp	r1, #10
   8402e:	d1ec      	bne.n	8400a <__fputwc+0x36>
   84030:	4622      	mov	r2, r4
   84032:	4638      	mov	r0, r7
   84034:	f001 f936 	bl	852a4 <__swbuf_r>
   84038:	1c43      	adds	r3, r0, #1
   8403a:	d1ea      	bne.n	84012 <__fputwc+0x3e>
   8403c:	b003      	add	sp, #12
   8403e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84042:	89a3      	ldrh	r3, [r4, #12]
   84044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84048:	81a3      	strh	r3, [r4, #12]
   8404a:	b003      	add	sp, #12
   8404c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   84050:	f108 33ff 	add.w	r3, r8, #4294967295
   84054:	2bfe      	cmp	r3, #254	; 0xfe
   84056:	d8c7      	bhi.n	83fe8 <__fputwc+0x14>
   84058:	fa5f f188 	uxtb.w	r1, r8
   8405c:	4606      	mov	r6, r0
   8405e:	f88d 1004 	strb.w	r1, [sp, #4]
   84062:	e7ce      	b.n	84002 <__fputwc+0x2e>
   84064:	4640      	mov	r0, r8
   84066:	b003      	add	sp, #12
   84068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008406c <_fputwc_r>:
   8406c:	b530      	push	{r4, r5, lr}
   8406e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   84070:	4614      	mov	r4, r2
   84072:	f013 0f01 	tst.w	r3, #1
   84076:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8407a:	b083      	sub	sp, #12
   8407c:	4605      	mov	r5, r0
   8407e:	b29a      	uxth	r2, r3
   84080:	d101      	bne.n	84086 <_fputwc_r+0x1a>
   84082:	0590      	lsls	r0, r2, #22
   84084:	d51c      	bpl.n	840c0 <_fputwc_r+0x54>
   84086:	0490      	lsls	r0, r2, #18
   84088:	d406      	bmi.n	84098 <_fputwc_r+0x2c>
   8408a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8408c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   84090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   84094:	81a3      	strh	r3, [r4, #12]
   84096:	6662      	str	r2, [r4, #100]	; 0x64
   84098:	4628      	mov	r0, r5
   8409a:	4622      	mov	r2, r4
   8409c:	f7ff ff9a 	bl	83fd4 <__fputwc>
   840a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   840a2:	4605      	mov	r5, r0
   840a4:	07da      	lsls	r2, r3, #31
   840a6:	d402      	bmi.n	840ae <_fputwc_r+0x42>
   840a8:	89a3      	ldrh	r3, [r4, #12]
   840aa:	059b      	lsls	r3, r3, #22
   840ac:	d502      	bpl.n	840b4 <_fputwc_r+0x48>
   840ae:	4628      	mov	r0, r5
   840b0:	b003      	add	sp, #12
   840b2:	bd30      	pop	{r4, r5, pc}
   840b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   840b6:	f000 faf9 	bl	846ac <__retarget_lock_release_recursive>
   840ba:	4628      	mov	r0, r5
   840bc:	b003      	add	sp, #12
   840be:	bd30      	pop	{r4, r5, pc}
   840c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   840c2:	9101      	str	r1, [sp, #4]
   840c4:	f000 faf0 	bl	846a8 <__retarget_lock_acquire_recursive>
   840c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   840cc:	9901      	ldr	r1, [sp, #4]
   840ce:	b29a      	uxth	r2, r3
   840d0:	e7d9      	b.n	84086 <_fputwc_r+0x1a>
   840d2:	bf00      	nop

000840d4 <_malloc_trim_r>:
   840d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840d6:	460c      	mov	r4, r1
   840d8:	4f23      	ldr	r7, [pc, #140]	; (84168 <_malloc_trim_r+0x94>)
   840da:	4606      	mov	r6, r0
   840dc:	f000 feca 	bl	84e74 <__malloc_lock>
   840e0:	68bb      	ldr	r3, [r7, #8]
   840e2:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   840e6:	685d      	ldr	r5, [r3, #4]
   840e8:	310f      	adds	r1, #15
   840ea:	f025 0503 	bic.w	r5, r5, #3
   840ee:	4429      	add	r1, r5
   840f0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   840f4:	f021 010f 	bic.w	r1, r1, #15
   840f8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   840fc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   84100:	db07      	blt.n	84112 <_malloc_trim_r+0x3e>
   84102:	2100      	movs	r1, #0
   84104:	4630      	mov	r0, r6
   84106:	f001 f877 	bl	851f8 <_sbrk_r>
   8410a:	68bb      	ldr	r3, [r7, #8]
   8410c:	442b      	add	r3, r5
   8410e:	4298      	cmp	r0, r3
   84110:	d004      	beq.n	8411c <_malloc_trim_r+0x48>
   84112:	4630      	mov	r0, r6
   84114:	f000 feb4 	bl	84e80 <__malloc_unlock>
   84118:	2000      	movs	r0, #0
   8411a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8411c:	4261      	negs	r1, r4
   8411e:	4630      	mov	r0, r6
   84120:	f001 f86a 	bl	851f8 <_sbrk_r>
   84124:	3001      	adds	r0, #1
   84126:	d00d      	beq.n	84144 <_malloc_trim_r+0x70>
   84128:	4b10      	ldr	r3, [pc, #64]	; (8416c <_malloc_trim_r+0x98>)
   8412a:	68ba      	ldr	r2, [r7, #8]
   8412c:	6819      	ldr	r1, [r3, #0]
   8412e:	1b2d      	subs	r5, r5, r4
   84130:	f045 0501 	orr.w	r5, r5, #1
   84134:	4630      	mov	r0, r6
   84136:	1b09      	subs	r1, r1, r4
   84138:	6055      	str	r5, [r2, #4]
   8413a:	6019      	str	r1, [r3, #0]
   8413c:	f000 fea0 	bl	84e80 <__malloc_unlock>
   84140:	2001      	movs	r0, #1
   84142:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84144:	2100      	movs	r1, #0
   84146:	4630      	mov	r0, r6
   84148:	f001 f856 	bl	851f8 <_sbrk_r>
   8414c:	68ba      	ldr	r2, [r7, #8]
   8414e:	1a83      	subs	r3, r0, r2
   84150:	2b0f      	cmp	r3, #15
   84152:	ddde      	ble.n	84112 <_malloc_trim_r+0x3e>
   84154:	4c06      	ldr	r4, [pc, #24]	; (84170 <_malloc_trim_r+0x9c>)
   84156:	4905      	ldr	r1, [pc, #20]	; (8416c <_malloc_trim_r+0x98>)
   84158:	6824      	ldr	r4, [r4, #0]
   8415a:	f043 0301 	orr.w	r3, r3, #1
   8415e:	1b00      	subs	r0, r0, r4
   84160:	6053      	str	r3, [r2, #4]
   84162:	6008      	str	r0, [r1, #0]
   84164:	e7d5      	b.n	84112 <_malloc_trim_r+0x3e>
   84166:	bf00      	nop
   84168:	200706d8 	.word	0x200706d8
   8416c:	2007acd0 	.word	0x2007acd0
   84170:	20070ae0 	.word	0x20070ae0

00084174 <_free_r>:
   84174:	2900      	cmp	r1, #0
   84176:	d044      	beq.n	84202 <_free_r+0x8e>
   84178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8417c:	460d      	mov	r5, r1
   8417e:	4680      	mov	r8, r0
   84180:	f000 fe78 	bl	84e74 <__malloc_lock>
   84184:	f855 7c04 	ldr.w	r7, [r5, #-4]
   84188:	4969      	ldr	r1, [pc, #420]	; (84330 <_free_r+0x1bc>)
   8418a:	f1a5 0408 	sub.w	r4, r5, #8
   8418e:	f027 0301 	bic.w	r3, r7, #1
   84192:	18e2      	adds	r2, r4, r3
   84194:	688e      	ldr	r6, [r1, #8]
   84196:	6850      	ldr	r0, [r2, #4]
   84198:	42b2      	cmp	r2, r6
   8419a:	f020 0003 	bic.w	r0, r0, #3
   8419e:	d05e      	beq.n	8425e <_free_r+0xea>
   841a0:	07fe      	lsls	r6, r7, #31
   841a2:	6050      	str	r0, [r2, #4]
   841a4:	d40b      	bmi.n	841be <_free_r+0x4a>
   841a6:	f855 7c08 	ldr.w	r7, [r5, #-8]
   841aa:	f101 0e08 	add.w	lr, r1, #8
   841ae:	1be4      	subs	r4, r4, r7
   841b0:	68a5      	ldr	r5, [r4, #8]
   841b2:	443b      	add	r3, r7
   841b4:	4575      	cmp	r5, lr
   841b6:	d06d      	beq.n	84294 <_free_r+0x120>
   841b8:	68e7      	ldr	r7, [r4, #12]
   841ba:	60ef      	str	r7, [r5, #12]
   841bc:	60bd      	str	r5, [r7, #8]
   841be:	1815      	adds	r5, r2, r0
   841c0:	686d      	ldr	r5, [r5, #4]
   841c2:	07ed      	lsls	r5, r5, #31
   841c4:	d53e      	bpl.n	84244 <_free_r+0xd0>
   841c6:	f043 0201 	orr.w	r2, r3, #1
   841ca:	6062      	str	r2, [r4, #4]
   841cc:	50e3      	str	r3, [r4, r3]
   841ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   841d2:	d217      	bcs.n	84204 <_free_r+0x90>
   841d4:	2201      	movs	r2, #1
   841d6:	08db      	lsrs	r3, r3, #3
   841d8:	1098      	asrs	r0, r3, #2
   841da:	684d      	ldr	r5, [r1, #4]
   841dc:	4413      	add	r3, r2
   841de:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   841e2:	4082      	lsls	r2, r0
   841e4:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   841e8:	432a      	orrs	r2, r5
   841ea:	3808      	subs	r0, #8
   841ec:	60e0      	str	r0, [r4, #12]
   841ee:	60a7      	str	r7, [r4, #8]
   841f0:	604a      	str	r2, [r1, #4]
   841f2:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   841f6:	60fc      	str	r4, [r7, #12]
   841f8:	4640      	mov	r0, r8
   841fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   841fe:	f000 be3f 	b.w	84e80 <__malloc_unlock>
   84202:	4770      	bx	lr
   84204:	0a5a      	lsrs	r2, r3, #9
   84206:	2a04      	cmp	r2, #4
   84208:	d852      	bhi.n	842b0 <_free_r+0x13c>
   8420a:	099a      	lsrs	r2, r3, #6
   8420c:	f102 0739 	add.w	r7, r2, #57	; 0x39
   84210:	00ff      	lsls	r7, r7, #3
   84212:	f102 0538 	add.w	r5, r2, #56	; 0x38
   84216:	19c8      	adds	r0, r1, r7
   84218:	59ca      	ldr	r2, [r1, r7]
   8421a:	3808      	subs	r0, #8
   8421c:	4290      	cmp	r0, r2
   8421e:	d04f      	beq.n	842c0 <_free_r+0x14c>
   84220:	6851      	ldr	r1, [r2, #4]
   84222:	f021 0103 	bic.w	r1, r1, #3
   84226:	428b      	cmp	r3, r1
   84228:	d232      	bcs.n	84290 <_free_r+0x11c>
   8422a:	6892      	ldr	r2, [r2, #8]
   8422c:	4290      	cmp	r0, r2
   8422e:	d1f7      	bne.n	84220 <_free_r+0xac>
   84230:	68c3      	ldr	r3, [r0, #12]
   84232:	60a0      	str	r0, [r4, #8]
   84234:	60e3      	str	r3, [r4, #12]
   84236:	609c      	str	r4, [r3, #8]
   84238:	60c4      	str	r4, [r0, #12]
   8423a:	4640      	mov	r0, r8
   8423c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   84240:	f000 be1e 	b.w	84e80 <__malloc_unlock>
   84244:	6895      	ldr	r5, [r2, #8]
   84246:	4f3b      	ldr	r7, [pc, #236]	; (84334 <_free_r+0x1c0>)
   84248:	4403      	add	r3, r0
   8424a:	42bd      	cmp	r5, r7
   8424c:	d040      	beq.n	842d0 <_free_r+0x15c>
   8424e:	68d0      	ldr	r0, [r2, #12]
   84250:	f043 0201 	orr.w	r2, r3, #1
   84254:	60e8      	str	r0, [r5, #12]
   84256:	6085      	str	r5, [r0, #8]
   84258:	6062      	str	r2, [r4, #4]
   8425a:	50e3      	str	r3, [r4, r3]
   8425c:	e7b7      	b.n	841ce <_free_r+0x5a>
   8425e:	07ff      	lsls	r7, r7, #31
   84260:	4403      	add	r3, r0
   84262:	d407      	bmi.n	84274 <_free_r+0x100>
   84264:	f855 5c08 	ldr.w	r5, [r5, #-8]
   84268:	1b64      	subs	r4, r4, r5
   8426a:	68e2      	ldr	r2, [r4, #12]
   8426c:	68a0      	ldr	r0, [r4, #8]
   8426e:	442b      	add	r3, r5
   84270:	60c2      	str	r2, [r0, #12]
   84272:	6090      	str	r0, [r2, #8]
   84274:	4a30      	ldr	r2, [pc, #192]	; (84338 <_free_r+0x1c4>)
   84276:	f043 0001 	orr.w	r0, r3, #1
   8427a:	6812      	ldr	r2, [r2, #0]
   8427c:	6060      	str	r0, [r4, #4]
   8427e:	4293      	cmp	r3, r2
   84280:	608c      	str	r4, [r1, #8]
   84282:	d3b9      	bcc.n	841f8 <_free_r+0x84>
   84284:	4b2d      	ldr	r3, [pc, #180]	; (8433c <_free_r+0x1c8>)
   84286:	4640      	mov	r0, r8
   84288:	6819      	ldr	r1, [r3, #0]
   8428a:	f7ff ff23 	bl	840d4 <_malloc_trim_r>
   8428e:	e7b3      	b.n	841f8 <_free_r+0x84>
   84290:	4610      	mov	r0, r2
   84292:	e7cd      	b.n	84230 <_free_r+0xbc>
   84294:	1811      	adds	r1, r2, r0
   84296:	6849      	ldr	r1, [r1, #4]
   84298:	07c9      	lsls	r1, r1, #31
   8429a:	d444      	bmi.n	84326 <_free_r+0x1b2>
   8429c:	6891      	ldr	r1, [r2, #8]
   8429e:	4403      	add	r3, r0
   842a0:	68d2      	ldr	r2, [r2, #12]
   842a2:	f043 0001 	orr.w	r0, r3, #1
   842a6:	60ca      	str	r2, [r1, #12]
   842a8:	6091      	str	r1, [r2, #8]
   842aa:	6060      	str	r0, [r4, #4]
   842ac:	50e3      	str	r3, [r4, r3]
   842ae:	e7a3      	b.n	841f8 <_free_r+0x84>
   842b0:	2a14      	cmp	r2, #20
   842b2:	d816      	bhi.n	842e2 <_free_r+0x16e>
   842b4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   842b8:	00ff      	lsls	r7, r7, #3
   842ba:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   842be:	e7aa      	b.n	84216 <_free_r+0xa2>
   842c0:	2301      	movs	r3, #1
   842c2:	10aa      	asrs	r2, r5, #2
   842c4:	684d      	ldr	r5, [r1, #4]
   842c6:	4093      	lsls	r3, r2
   842c8:	432b      	orrs	r3, r5
   842ca:	604b      	str	r3, [r1, #4]
   842cc:	4603      	mov	r3, r0
   842ce:	e7b0      	b.n	84232 <_free_r+0xbe>
   842d0:	f043 0201 	orr.w	r2, r3, #1
   842d4:	614c      	str	r4, [r1, #20]
   842d6:	610c      	str	r4, [r1, #16]
   842d8:	60e5      	str	r5, [r4, #12]
   842da:	60a5      	str	r5, [r4, #8]
   842dc:	6062      	str	r2, [r4, #4]
   842de:	50e3      	str	r3, [r4, r3]
   842e0:	e78a      	b.n	841f8 <_free_r+0x84>
   842e2:	2a54      	cmp	r2, #84	; 0x54
   842e4:	d806      	bhi.n	842f4 <_free_r+0x180>
   842e6:	0b1a      	lsrs	r2, r3, #12
   842e8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   842ec:	00ff      	lsls	r7, r7, #3
   842ee:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   842f2:	e790      	b.n	84216 <_free_r+0xa2>
   842f4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   842f8:	d806      	bhi.n	84308 <_free_r+0x194>
   842fa:	0bda      	lsrs	r2, r3, #15
   842fc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   84300:	00ff      	lsls	r7, r7, #3
   84302:	f102 0577 	add.w	r5, r2, #119	; 0x77
   84306:	e786      	b.n	84216 <_free_r+0xa2>
   84308:	f240 5054 	movw	r0, #1364	; 0x554
   8430c:	4282      	cmp	r2, r0
   8430e:	d806      	bhi.n	8431e <_free_r+0x1aa>
   84310:	0c9a      	lsrs	r2, r3, #18
   84312:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   84316:	00ff      	lsls	r7, r7, #3
   84318:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   8431c:	e77b      	b.n	84216 <_free_r+0xa2>
   8431e:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   84322:	257e      	movs	r5, #126	; 0x7e
   84324:	e777      	b.n	84216 <_free_r+0xa2>
   84326:	f043 0101 	orr.w	r1, r3, #1
   8432a:	6061      	str	r1, [r4, #4]
   8432c:	6013      	str	r3, [r2, #0]
   8432e:	e763      	b.n	841f8 <_free_r+0x84>
   84330:	200706d8 	.word	0x200706d8
   84334:	200706e0 	.word	0x200706e0
   84338:	20070ae4 	.word	0x20070ae4
   8433c:	2007ad00 	.word	0x2007ad00

00084340 <__sfvwrite_r>:
   84340:	6893      	ldr	r3, [r2, #8]
   84342:	2b00      	cmp	r3, #0
   84344:	d071      	beq.n	8442a <__sfvwrite_r+0xea>
   84346:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8434a:	898b      	ldrh	r3, [r1, #12]
   8434c:	b083      	sub	sp, #12
   8434e:	460c      	mov	r4, r1
   84350:	0719      	lsls	r1, r3, #28
   84352:	9000      	str	r0, [sp, #0]
   84354:	4616      	mov	r6, r2
   84356:	d525      	bpl.n	843a4 <__sfvwrite_r+0x64>
   84358:	6922      	ldr	r2, [r4, #16]
   8435a:	b31a      	cbz	r2, 843a4 <__sfvwrite_r+0x64>
   8435c:	f013 0002 	ands.w	r0, r3, #2
   84360:	6835      	ldr	r5, [r6, #0]
   84362:	d02b      	beq.n	843bc <__sfvwrite_r+0x7c>
   84364:	f04f 0900 	mov.w	r9, #0
   84368:	46b0      	mov	r8, r6
   8436a:	464f      	mov	r7, r9
   8436c:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 84630 <__sfvwrite_r+0x2f0>
   84370:	2f00      	cmp	r7, #0
   84372:	d055      	beq.n	84420 <__sfvwrite_r+0xe0>
   84374:	4557      	cmp	r7, sl
   84376:	463b      	mov	r3, r7
   84378:	464a      	mov	r2, r9
   8437a:	bf28      	it	cs
   8437c:	4653      	movcs	r3, sl
   8437e:	69e1      	ldr	r1, [r4, #28]
   84380:	9800      	ldr	r0, [sp, #0]
   84382:	6a66      	ldr	r6, [r4, #36]	; 0x24
   84384:	47b0      	blx	r6
   84386:	2800      	cmp	r0, #0
   84388:	dd56      	ble.n	84438 <__sfvwrite_r+0xf8>
   8438a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8438e:	4481      	add	r9, r0
   84390:	1a1b      	subs	r3, r3, r0
   84392:	1a3f      	subs	r7, r7, r0
   84394:	f8c8 3008 	str.w	r3, [r8, #8]
   84398:	2b00      	cmp	r3, #0
   8439a:	d1e9      	bne.n	84370 <__sfvwrite_r+0x30>
   8439c:	2000      	movs	r0, #0
   8439e:	b003      	add	sp, #12
   843a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   843a4:	4621      	mov	r1, r4
   843a6:	9800      	ldr	r0, [sp, #0]
   843a8:	f7ff fc56 	bl	83c58 <__swsetup_r>
   843ac:	2800      	cmp	r0, #0
   843ae:	f040 8135 	bne.w	8461c <__sfvwrite_r+0x2dc>
   843b2:	89a3      	ldrh	r3, [r4, #12]
   843b4:	6835      	ldr	r5, [r6, #0]
   843b6:	f013 0002 	ands.w	r0, r3, #2
   843ba:	d1d3      	bne.n	84364 <__sfvwrite_r+0x24>
   843bc:	f013 0901 	ands.w	r9, r3, #1
   843c0:	d144      	bne.n	8444c <__sfvwrite_r+0x10c>
   843c2:	464f      	mov	r7, r9
   843c4:	9601      	str	r6, [sp, #4]
   843c6:	b337      	cbz	r7, 84416 <__sfvwrite_r+0xd6>
   843c8:	059a      	lsls	r2, r3, #22
   843ca:	f8d4 8008 	ldr.w	r8, [r4, #8]
   843ce:	f140 8085 	bpl.w	844dc <__sfvwrite_r+0x19c>
   843d2:	4547      	cmp	r7, r8
   843d4:	46c3      	mov	fp, r8
   843d6:	f0c0 80ad 	bcc.w	84534 <__sfvwrite_r+0x1f4>
   843da:	f413 6f90 	tst.w	r3, #1152	; 0x480
   843de:	f040 80ae 	bne.w	8453e <__sfvwrite_r+0x1fe>
   843e2:	46ba      	mov	sl, r7
   843e4:	6820      	ldr	r0, [r4, #0]
   843e6:	465a      	mov	r2, fp
   843e8:	4649      	mov	r1, r9
   843ea:	f000 fcdf 	bl	84dac <memmove>
   843ee:	68a2      	ldr	r2, [r4, #8]
   843f0:	6823      	ldr	r3, [r4, #0]
   843f2:	eba2 0208 	sub.w	r2, r2, r8
   843f6:	445b      	add	r3, fp
   843f8:	60a2      	str	r2, [r4, #8]
   843fa:	6023      	str	r3, [r4, #0]
   843fc:	9a01      	ldr	r2, [sp, #4]
   843fe:	44d1      	add	r9, sl
   84400:	6893      	ldr	r3, [r2, #8]
   84402:	eba7 070a 	sub.w	r7, r7, sl
   84406:	eba3 030a 	sub.w	r3, r3, sl
   8440a:	6093      	str	r3, [r2, #8]
   8440c:	2b00      	cmp	r3, #0
   8440e:	d0c5      	beq.n	8439c <__sfvwrite_r+0x5c>
   84410:	89a3      	ldrh	r3, [r4, #12]
   84412:	2f00      	cmp	r7, #0
   84414:	d1d8      	bne.n	843c8 <__sfvwrite_r+0x88>
   84416:	f8d5 9000 	ldr.w	r9, [r5]
   8441a:	686f      	ldr	r7, [r5, #4]
   8441c:	3508      	adds	r5, #8
   8441e:	e7d2      	b.n	843c6 <__sfvwrite_r+0x86>
   84420:	f8d5 9000 	ldr.w	r9, [r5]
   84424:	686f      	ldr	r7, [r5, #4]
   84426:	3508      	adds	r5, #8
   84428:	e7a2      	b.n	84370 <__sfvwrite_r+0x30>
   8442a:	2000      	movs	r0, #0
   8442c:	4770      	bx	lr
   8442e:	4621      	mov	r1, r4
   84430:	9800      	ldr	r0, [sp, #0]
   84432:	f7ff fd21 	bl	83e78 <_fflush_r>
   84436:	b378      	cbz	r0, 84498 <__sfvwrite_r+0x158>
   84438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8443c:	f04f 30ff 	mov.w	r0, #4294967295
   84440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84444:	81a3      	strh	r3, [r4, #12]
   84446:	b003      	add	sp, #12
   84448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8444c:	4681      	mov	r9, r0
   8444e:	4633      	mov	r3, r6
   84450:	464e      	mov	r6, r9
   84452:	46a8      	mov	r8, r5
   84454:	469a      	mov	sl, r3
   84456:	464d      	mov	r5, r9
   84458:	b356      	cbz	r6, 844b0 <__sfvwrite_r+0x170>
   8445a:	2800      	cmp	r0, #0
   8445c:	d032      	beq.n	844c4 <__sfvwrite_r+0x184>
   8445e:	45b1      	cmp	r9, r6
   84460:	46cb      	mov	fp, r9
   84462:	bf28      	it	cs
   84464:	46b3      	movcs	fp, r6
   84466:	6820      	ldr	r0, [r4, #0]
   84468:	6923      	ldr	r3, [r4, #16]
   8446a:	465f      	mov	r7, fp
   8446c:	4298      	cmp	r0, r3
   8446e:	6962      	ldr	r2, [r4, #20]
   84470:	d904      	bls.n	8447c <__sfvwrite_r+0x13c>
   84472:	68a3      	ldr	r3, [r4, #8]
   84474:	4413      	add	r3, r2
   84476:	459b      	cmp	fp, r3
   84478:	f300 80a8 	bgt.w	845cc <__sfvwrite_r+0x28c>
   8447c:	4593      	cmp	fp, r2
   8447e:	db4d      	blt.n	8451c <__sfvwrite_r+0x1dc>
   84480:	4613      	mov	r3, r2
   84482:	6a67      	ldr	r7, [r4, #36]	; 0x24
   84484:	462a      	mov	r2, r5
   84486:	69e1      	ldr	r1, [r4, #28]
   84488:	9800      	ldr	r0, [sp, #0]
   8448a:	47b8      	blx	r7
   8448c:	1e07      	subs	r7, r0, #0
   8448e:	ddd3      	ble.n	84438 <__sfvwrite_r+0xf8>
   84490:	ebb9 0907 	subs.w	r9, r9, r7
   84494:	d0cb      	beq.n	8442e <__sfvwrite_r+0xee>
   84496:	2001      	movs	r0, #1
   84498:	f8da 3008 	ldr.w	r3, [sl, #8]
   8449c:	443d      	add	r5, r7
   8449e:	1bdb      	subs	r3, r3, r7
   844a0:	1bf6      	subs	r6, r6, r7
   844a2:	f8ca 3008 	str.w	r3, [sl, #8]
   844a6:	2b00      	cmp	r3, #0
   844a8:	f43f af78 	beq.w	8439c <__sfvwrite_r+0x5c>
   844ac:	2e00      	cmp	r6, #0
   844ae:	d1d4      	bne.n	8445a <__sfvwrite_r+0x11a>
   844b0:	f108 0308 	add.w	r3, r8, #8
   844b4:	f853 6c04 	ldr.w	r6, [r3, #-4]
   844b8:	4698      	mov	r8, r3
   844ba:	f853 5c08 	ldr.w	r5, [r3, #-8]
   844be:	3308      	adds	r3, #8
   844c0:	2e00      	cmp	r6, #0
   844c2:	d0f7      	beq.n	844b4 <__sfvwrite_r+0x174>
   844c4:	4632      	mov	r2, r6
   844c6:	210a      	movs	r1, #10
   844c8:	4628      	mov	r0, r5
   844ca:	f000 fc29 	bl	84d20 <memchr>
   844ce:	2800      	cmp	r0, #0
   844d0:	f000 80a1 	beq.w	84616 <__sfvwrite_r+0x2d6>
   844d4:	3001      	adds	r0, #1
   844d6:	eba0 0905 	sub.w	r9, r0, r5
   844da:	e7c0      	b.n	8445e <__sfvwrite_r+0x11e>
   844dc:	6820      	ldr	r0, [r4, #0]
   844de:	6923      	ldr	r3, [r4, #16]
   844e0:	4298      	cmp	r0, r3
   844e2:	d802      	bhi.n	844ea <__sfvwrite_r+0x1aa>
   844e4:	6963      	ldr	r3, [r4, #20]
   844e6:	429f      	cmp	r7, r3
   844e8:	d25d      	bcs.n	845a6 <__sfvwrite_r+0x266>
   844ea:	45b8      	cmp	r8, r7
   844ec:	bf28      	it	cs
   844ee:	46b8      	movcs	r8, r7
   844f0:	4649      	mov	r1, r9
   844f2:	4642      	mov	r2, r8
   844f4:	f000 fc5a 	bl	84dac <memmove>
   844f8:	68a3      	ldr	r3, [r4, #8]
   844fa:	6822      	ldr	r2, [r4, #0]
   844fc:	eba3 0308 	sub.w	r3, r3, r8
   84500:	4442      	add	r2, r8
   84502:	60a3      	str	r3, [r4, #8]
   84504:	6022      	str	r2, [r4, #0]
   84506:	b10b      	cbz	r3, 8450c <__sfvwrite_r+0x1cc>
   84508:	46c2      	mov	sl, r8
   8450a:	e777      	b.n	843fc <__sfvwrite_r+0xbc>
   8450c:	4621      	mov	r1, r4
   8450e:	9800      	ldr	r0, [sp, #0]
   84510:	f7ff fcb2 	bl	83e78 <_fflush_r>
   84514:	2800      	cmp	r0, #0
   84516:	d18f      	bne.n	84438 <__sfvwrite_r+0xf8>
   84518:	46c2      	mov	sl, r8
   8451a:	e76f      	b.n	843fc <__sfvwrite_r+0xbc>
   8451c:	465a      	mov	r2, fp
   8451e:	4629      	mov	r1, r5
   84520:	f000 fc44 	bl	84dac <memmove>
   84524:	68a2      	ldr	r2, [r4, #8]
   84526:	6823      	ldr	r3, [r4, #0]
   84528:	eba2 020b 	sub.w	r2, r2, fp
   8452c:	445b      	add	r3, fp
   8452e:	60a2      	str	r2, [r4, #8]
   84530:	6023      	str	r3, [r4, #0]
   84532:	e7ad      	b.n	84490 <__sfvwrite_r+0x150>
   84534:	46b8      	mov	r8, r7
   84536:	46ba      	mov	sl, r7
   84538:	46bb      	mov	fp, r7
   8453a:	6820      	ldr	r0, [r4, #0]
   8453c:	e753      	b.n	843e6 <__sfvwrite_r+0xa6>
   8453e:	6962      	ldr	r2, [r4, #20]
   84540:	6820      	ldr	r0, [r4, #0]
   84542:	6921      	ldr	r1, [r4, #16]
   84544:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   84548:	eba0 0a01 	sub.w	sl, r0, r1
   8454c:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   84550:	f10a 0001 	add.w	r0, sl, #1
   84554:	ea4f 0868 	mov.w	r8, r8, asr #1
   84558:	4438      	add	r0, r7
   8455a:	4540      	cmp	r0, r8
   8455c:	4642      	mov	r2, r8
   8455e:	bf84      	itt	hi
   84560:	4680      	movhi	r8, r0
   84562:	4642      	movhi	r2, r8
   84564:	055b      	lsls	r3, r3, #21
   84566:	d544      	bpl.n	845f2 <__sfvwrite_r+0x2b2>
   84568:	4611      	mov	r1, r2
   8456a:	9800      	ldr	r0, [sp, #0]
   8456c:	f000 f920 	bl	847b0 <_malloc_r>
   84570:	4683      	mov	fp, r0
   84572:	2800      	cmp	r0, #0
   84574:	d055      	beq.n	84622 <__sfvwrite_r+0x2e2>
   84576:	4652      	mov	r2, sl
   84578:	6921      	ldr	r1, [r4, #16]
   8457a:	f7fe fab1 	bl	82ae0 <memcpy>
   8457e:	89a3      	ldrh	r3, [r4, #12]
   84580:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   84584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84588:	81a3      	strh	r3, [r4, #12]
   8458a:	eb0b 000a 	add.w	r0, fp, sl
   8458e:	eba8 030a 	sub.w	r3, r8, sl
   84592:	f8c4 b010 	str.w	fp, [r4, #16]
   84596:	f8c4 8014 	str.w	r8, [r4, #20]
   8459a:	6020      	str	r0, [r4, #0]
   8459c:	60a3      	str	r3, [r4, #8]
   8459e:	46b8      	mov	r8, r7
   845a0:	46ba      	mov	sl, r7
   845a2:	46bb      	mov	fp, r7
   845a4:	e71f      	b.n	843e6 <__sfvwrite_r+0xa6>
   845a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   845aa:	42ba      	cmp	r2, r7
   845ac:	bf28      	it	cs
   845ae:	463a      	movcs	r2, r7
   845b0:	fb92 f2f3 	sdiv	r2, r2, r3
   845b4:	69e1      	ldr	r1, [r4, #28]
   845b6:	fb03 f302 	mul.w	r3, r3, r2
   845ba:	9800      	ldr	r0, [sp, #0]
   845bc:	464a      	mov	r2, r9
   845be:	6a66      	ldr	r6, [r4, #36]	; 0x24
   845c0:	47b0      	blx	r6
   845c2:	f1b0 0a00 	subs.w	sl, r0, #0
   845c6:	f73f af19 	bgt.w	843fc <__sfvwrite_r+0xbc>
   845ca:	e735      	b.n	84438 <__sfvwrite_r+0xf8>
   845cc:	461a      	mov	r2, r3
   845ce:	4629      	mov	r1, r5
   845d0:	9301      	str	r3, [sp, #4]
   845d2:	f000 fbeb 	bl	84dac <memmove>
   845d6:	6822      	ldr	r2, [r4, #0]
   845d8:	9b01      	ldr	r3, [sp, #4]
   845da:	4621      	mov	r1, r4
   845dc:	441a      	add	r2, r3
   845de:	6022      	str	r2, [r4, #0]
   845e0:	9800      	ldr	r0, [sp, #0]
   845e2:	f7ff fc49 	bl	83e78 <_fflush_r>
   845e6:	9b01      	ldr	r3, [sp, #4]
   845e8:	2800      	cmp	r0, #0
   845ea:	f47f af25 	bne.w	84438 <__sfvwrite_r+0xf8>
   845ee:	461f      	mov	r7, r3
   845f0:	e74e      	b.n	84490 <__sfvwrite_r+0x150>
   845f2:	9800      	ldr	r0, [sp, #0]
   845f4:	f000 fc4a 	bl	84e8c <_realloc_r>
   845f8:	4683      	mov	fp, r0
   845fa:	2800      	cmp	r0, #0
   845fc:	d1c5      	bne.n	8458a <__sfvwrite_r+0x24a>
   845fe:	9d00      	ldr	r5, [sp, #0]
   84600:	6921      	ldr	r1, [r4, #16]
   84602:	4628      	mov	r0, r5
   84604:	f7ff fdb6 	bl	84174 <_free_r>
   84608:	220c      	movs	r2, #12
   8460a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8460e:	602a      	str	r2, [r5, #0]
   84610:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   84614:	e712      	b.n	8443c <__sfvwrite_r+0xfc>
   84616:	f106 0901 	add.w	r9, r6, #1
   8461a:	e720      	b.n	8445e <__sfvwrite_r+0x11e>
   8461c:	f04f 30ff 	mov.w	r0, #4294967295
   84620:	e6bd      	b.n	8439e <__sfvwrite_r+0x5e>
   84622:	220c      	movs	r2, #12
   84624:	9900      	ldr	r1, [sp, #0]
   84626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8462a:	600a      	str	r2, [r1, #0]
   8462c:	e706      	b.n	8443c <__sfvwrite_r+0xfc>
   8462e:	bf00      	nop
   84630:	7ffffc00 	.word	0x7ffffc00

00084634 <_fwalk_reent>:
   84634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   84638:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   8463c:	d01e      	beq.n	8467c <_fwalk_reent+0x48>
   8463e:	4688      	mov	r8, r1
   84640:	4607      	mov	r7, r0
   84642:	f04f 0900 	mov.w	r9, #0
   84646:	6875      	ldr	r5, [r6, #4]
   84648:	68b4      	ldr	r4, [r6, #8]
   8464a:	3d01      	subs	r5, #1
   8464c:	d410      	bmi.n	84670 <_fwalk_reent+0x3c>
   8464e:	89a3      	ldrh	r3, [r4, #12]
   84650:	3d01      	subs	r5, #1
   84652:	2b01      	cmp	r3, #1
   84654:	d908      	bls.n	84668 <_fwalk_reent+0x34>
   84656:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8465a:	3301      	adds	r3, #1
   8465c:	d004      	beq.n	84668 <_fwalk_reent+0x34>
   8465e:	4621      	mov	r1, r4
   84660:	4638      	mov	r0, r7
   84662:	47c0      	blx	r8
   84664:	ea49 0900 	orr.w	r9, r9, r0
   84668:	1c6b      	adds	r3, r5, #1
   8466a:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8466e:	d1ee      	bne.n	8464e <_fwalk_reent+0x1a>
   84670:	6836      	ldr	r6, [r6, #0]
   84672:	2e00      	cmp	r6, #0
   84674:	d1e7      	bne.n	84646 <_fwalk_reent+0x12>
   84676:	4648      	mov	r0, r9
   84678:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8467c:	46b1      	mov	r9, r6
   8467e:	4648      	mov	r0, r9
   84680:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00084684 <__locale_mb_cur_max>:
   84684:	4b04      	ldr	r3, [pc, #16]	; (84698 <__locale_mb_cur_max+0x14>)
   84686:	4a05      	ldr	r2, [pc, #20]	; (8469c <__locale_mb_cur_max+0x18>)
   84688:	681b      	ldr	r3, [r3, #0]
   8468a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   8468c:	2b00      	cmp	r3, #0
   8468e:	bf08      	it	eq
   84690:	4613      	moveq	r3, r2
   84692:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   84696:	4770      	bx	lr
   84698:	2007013c 	.word	0x2007013c
   8469c:	2007056c 	.word	0x2007056c

000846a0 <__retarget_lock_init_recursive>:
   846a0:	4770      	bx	lr
   846a2:	bf00      	nop

000846a4 <__retarget_lock_close_recursive>:
   846a4:	4770      	bx	lr
   846a6:	bf00      	nop

000846a8 <__retarget_lock_acquire_recursive>:
   846a8:	4770      	bx	lr
   846aa:	bf00      	nop

000846ac <__retarget_lock_release_recursive>:
   846ac:	4770      	bx	lr
   846ae:	bf00      	nop

000846b0 <__swhatbuf_r>:
   846b0:	b570      	push	{r4, r5, r6, lr}
   846b2:	460c      	mov	r4, r1
   846b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   846b8:	b090      	sub	sp, #64	; 0x40
   846ba:	2900      	cmp	r1, #0
   846bc:	4615      	mov	r5, r2
   846be:	461e      	mov	r6, r3
   846c0:	db14      	blt.n	846ec <__swhatbuf_r+0x3c>
   846c2:	aa01      	add	r2, sp, #4
   846c4:	f000 ff68 	bl	85598 <_fstat_r>
   846c8:	2800      	cmp	r0, #0
   846ca:	db0f      	blt.n	846ec <__swhatbuf_r+0x3c>
   846cc:	9a02      	ldr	r2, [sp, #8]
   846ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
   846d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   846d6:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   846da:	fab2 f282 	clz	r2, r2
   846de:	f44f 6000 	mov.w	r0, #2048	; 0x800
   846e2:	0952      	lsrs	r2, r2, #5
   846e4:	6032      	str	r2, [r6, #0]
   846e6:	602b      	str	r3, [r5, #0]
   846e8:	b010      	add	sp, #64	; 0x40
   846ea:	bd70      	pop	{r4, r5, r6, pc}
   846ec:	2300      	movs	r3, #0
   846ee:	89a2      	ldrh	r2, [r4, #12]
   846f0:	6033      	str	r3, [r6, #0]
   846f2:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   846f6:	d004      	beq.n	84702 <__swhatbuf_r+0x52>
   846f8:	2240      	movs	r2, #64	; 0x40
   846fa:	4618      	mov	r0, r3
   846fc:	602a      	str	r2, [r5, #0]
   846fe:	b010      	add	sp, #64	; 0x40
   84700:	bd70      	pop	{r4, r5, r6, pc}
   84702:	f44f 6380 	mov.w	r3, #1024	; 0x400
   84706:	602b      	str	r3, [r5, #0]
   84708:	b010      	add	sp, #64	; 0x40
   8470a:	bd70      	pop	{r4, r5, r6, pc}

0008470c <__smakebuf_r>:
   8470c:	898a      	ldrh	r2, [r1, #12]
   8470e:	460b      	mov	r3, r1
   84710:	0792      	lsls	r2, r2, #30
   84712:	d506      	bpl.n	84722 <__smakebuf_r+0x16>
   84714:	2101      	movs	r1, #1
   84716:	f103 0243 	add.w	r2, r3, #67	; 0x43
   8471a:	6159      	str	r1, [r3, #20]
   8471c:	601a      	str	r2, [r3, #0]
   8471e:	611a      	str	r2, [r3, #16]
   84720:	4770      	bx	lr
   84722:	b5f0      	push	{r4, r5, r6, r7, lr}
   84724:	b083      	sub	sp, #12
   84726:	ab01      	add	r3, sp, #4
   84728:	466a      	mov	r2, sp
   8472a:	460c      	mov	r4, r1
   8472c:	4606      	mov	r6, r0
   8472e:	f7ff ffbf 	bl	846b0 <__swhatbuf_r>
   84732:	9900      	ldr	r1, [sp, #0]
   84734:	4605      	mov	r5, r0
   84736:	4630      	mov	r0, r6
   84738:	f000 f83a 	bl	847b0 <_malloc_r>
   8473c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   84740:	b1d8      	cbz	r0, 8477a <__smakebuf_r+0x6e>
   84742:	e89d 0006 	ldmia.w	sp, {r1, r2}
   84746:	4f15      	ldr	r7, [pc, #84]	; (8479c <__smakebuf_r+0x90>)
   84748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8474c:	63f7      	str	r7, [r6, #60]	; 0x3c
   8474e:	81a3      	strh	r3, [r4, #12]
   84750:	6020      	str	r0, [r4, #0]
   84752:	6120      	str	r0, [r4, #16]
   84754:	6161      	str	r1, [r4, #20]
   84756:	b91a      	cbnz	r2, 84760 <__smakebuf_r+0x54>
   84758:	432b      	orrs	r3, r5
   8475a:	81a3      	strh	r3, [r4, #12]
   8475c:	b003      	add	sp, #12
   8475e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84760:	4630      	mov	r0, r6
   84762:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   84766:	f000 ff2b 	bl	855c0 <_isatty_r>
   8476a:	b1a0      	cbz	r0, 84796 <__smakebuf_r+0x8a>
   8476c:	89a3      	ldrh	r3, [r4, #12]
   8476e:	f023 0303 	bic.w	r3, r3, #3
   84772:	f043 0301 	orr.w	r3, r3, #1
   84776:	b21b      	sxth	r3, r3
   84778:	e7ee      	b.n	84758 <__smakebuf_r+0x4c>
   8477a:	059a      	lsls	r2, r3, #22
   8477c:	d4ee      	bmi.n	8475c <__smakebuf_r+0x50>
   8477e:	2101      	movs	r1, #1
   84780:	f023 0303 	bic.w	r3, r3, #3
   84784:	f104 0243 	add.w	r2, r4, #67	; 0x43
   84788:	f043 0302 	orr.w	r3, r3, #2
   8478c:	81a3      	strh	r3, [r4, #12]
   8478e:	6161      	str	r1, [r4, #20]
   84790:	6022      	str	r2, [r4, #0]
   84792:	6122      	str	r2, [r4, #16]
   84794:	e7e2      	b.n	8475c <__smakebuf_r+0x50>
   84796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8479a:	e7dd      	b.n	84758 <__smakebuf_r+0x4c>
   8479c:	00083ecd 	.word	0x00083ecd

000847a0 <malloc>:
   847a0:	4b02      	ldr	r3, [pc, #8]	; (847ac <malloc+0xc>)
   847a2:	4601      	mov	r1, r0
   847a4:	6818      	ldr	r0, [r3, #0]
   847a6:	f000 b803 	b.w	847b0 <_malloc_r>
   847aa:	bf00      	nop
   847ac:	2007013c 	.word	0x2007013c

000847b0 <_malloc_r>:
   847b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   847b4:	f101 060b 	add.w	r6, r1, #11
   847b8:	2e16      	cmp	r6, #22
   847ba:	b083      	sub	sp, #12
   847bc:	4605      	mov	r5, r0
   847be:	f240 809e 	bls.w	848fe <_malloc_r+0x14e>
   847c2:	f036 0607 	bics.w	r6, r6, #7
   847c6:	f100 80bd 	bmi.w	84944 <_malloc_r+0x194>
   847ca:	42b1      	cmp	r1, r6
   847cc:	f200 80ba 	bhi.w	84944 <_malloc_r+0x194>
   847d0:	f000 fb50 	bl	84e74 <__malloc_lock>
   847d4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   847d8:	f0c0 8285 	bcc.w	84ce6 <_malloc_r+0x536>
   847dc:	0a73      	lsrs	r3, r6, #9
   847de:	f000 80b8 	beq.w	84952 <_malloc_r+0x1a2>
   847e2:	2b04      	cmp	r3, #4
   847e4:	f200 816c 	bhi.w	84ac0 <_malloc_r+0x310>
   847e8:	09b3      	lsrs	r3, r6, #6
   847ea:	f103 0039 	add.w	r0, r3, #57	; 0x39
   847ee:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   847f2:	00c1      	lsls	r1, r0, #3
   847f4:	4fb8      	ldr	r7, [pc, #736]	; (84ad8 <_malloc_r+0x328>)
   847f6:	4439      	add	r1, r7
   847f8:	684c      	ldr	r4, [r1, #4]
   847fa:	3908      	subs	r1, #8
   847fc:	42a1      	cmp	r1, r4
   847fe:	d106      	bne.n	8480e <_malloc_r+0x5e>
   84800:	e00c      	b.n	8481c <_malloc_r+0x6c>
   84802:	2a00      	cmp	r2, #0
   84804:	f280 80ab 	bge.w	8495e <_malloc_r+0x1ae>
   84808:	68e4      	ldr	r4, [r4, #12]
   8480a:	42a1      	cmp	r1, r4
   8480c:	d006      	beq.n	8481c <_malloc_r+0x6c>
   8480e:	6863      	ldr	r3, [r4, #4]
   84810:	f023 0303 	bic.w	r3, r3, #3
   84814:	1b9a      	subs	r2, r3, r6
   84816:	2a0f      	cmp	r2, #15
   84818:	ddf3      	ble.n	84802 <_malloc_r+0x52>
   8481a:	4670      	mov	r0, lr
   8481c:	693c      	ldr	r4, [r7, #16]
   8481e:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 84aec <_malloc_r+0x33c>
   84822:	4574      	cmp	r4, lr
   84824:	f000 819e 	beq.w	84b64 <_malloc_r+0x3b4>
   84828:	6863      	ldr	r3, [r4, #4]
   8482a:	f023 0303 	bic.w	r3, r3, #3
   8482e:	1b9a      	subs	r2, r3, r6
   84830:	2a0f      	cmp	r2, #15
   84832:	f300 8183 	bgt.w	84b3c <_malloc_r+0x38c>
   84836:	2a00      	cmp	r2, #0
   84838:	f8c7 e014 	str.w	lr, [r7, #20]
   8483c:	f8c7 e010 	str.w	lr, [r7, #16]
   84840:	f280 8091 	bge.w	84966 <_malloc_r+0x1b6>
   84844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   84848:	f080 8154 	bcs.w	84af4 <_malloc_r+0x344>
   8484c:	2201      	movs	r2, #1
   8484e:	08db      	lsrs	r3, r3, #3
   84850:	6879      	ldr	r1, [r7, #4]
   84852:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   84856:	4413      	add	r3, r2
   84858:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   8485c:	fa02 f20c 	lsl.w	r2, r2, ip
   84860:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   84864:	430a      	orrs	r2, r1
   84866:	f1ac 0108 	sub.w	r1, ip, #8
   8486a:	60e1      	str	r1, [r4, #12]
   8486c:	f8c4 8008 	str.w	r8, [r4, #8]
   84870:	607a      	str	r2, [r7, #4]
   84872:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   84876:	f8c8 400c 	str.w	r4, [r8, #12]
   8487a:	2401      	movs	r4, #1
   8487c:	1083      	asrs	r3, r0, #2
   8487e:	409c      	lsls	r4, r3
   84880:	4294      	cmp	r4, r2
   84882:	d87d      	bhi.n	84980 <_malloc_r+0x1d0>
   84884:	4214      	tst	r4, r2
   84886:	d106      	bne.n	84896 <_malloc_r+0xe6>
   84888:	f020 0003 	bic.w	r0, r0, #3
   8488c:	0064      	lsls	r4, r4, #1
   8488e:	4214      	tst	r4, r2
   84890:	f100 0004 	add.w	r0, r0, #4
   84894:	d0fa      	beq.n	8488c <_malloc_r+0xdc>
   84896:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   8489a:	46cc      	mov	ip, r9
   8489c:	4680      	mov	r8, r0
   8489e:	f8dc 300c 	ldr.w	r3, [ip, #12]
   848a2:	459c      	cmp	ip, r3
   848a4:	d107      	bne.n	848b6 <_malloc_r+0x106>
   848a6:	e15f      	b.n	84b68 <_malloc_r+0x3b8>
   848a8:	2a00      	cmp	r2, #0
   848aa:	f280 816d 	bge.w	84b88 <_malloc_r+0x3d8>
   848ae:	68db      	ldr	r3, [r3, #12]
   848b0:	459c      	cmp	ip, r3
   848b2:	f000 8159 	beq.w	84b68 <_malloc_r+0x3b8>
   848b6:	6859      	ldr	r1, [r3, #4]
   848b8:	f021 0103 	bic.w	r1, r1, #3
   848bc:	1b8a      	subs	r2, r1, r6
   848be:	2a0f      	cmp	r2, #15
   848c0:	ddf2      	ble.n	848a8 <_malloc_r+0xf8>
   848c2:	68dc      	ldr	r4, [r3, #12]
   848c4:	f8d3 c008 	ldr.w	ip, [r3, #8]
   848c8:	f046 0801 	orr.w	r8, r6, #1
   848cc:	4628      	mov	r0, r5
   848ce:	441e      	add	r6, r3
   848d0:	f042 0501 	orr.w	r5, r2, #1
   848d4:	f8c3 8004 	str.w	r8, [r3, #4]
   848d8:	f8cc 400c 	str.w	r4, [ip, #12]
   848dc:	f8c4 c008 	str.w	ip, [r4, #8]
   848e0:	617e      	str	r6, [r7, #20]
   848e2:	613e      	str	r6, [r7, #16]
   848e4:	f8c6 e00c 	str.w	lr, [r6, #12]
   848e8:	f8c6 e008 	str.w	lr, [r6, #8]
   848ec:	6075      	str	r5, [r6, #4]
   848ee:	505a      	str	r2, [r3, r1]
   848f0:	9300      	str	r3, [sp, #0]
   848f2:	f000 fac5 	bl	84e80 <__malloc_unlock>
   848f6:	9b00      	ldr	r3, [sp, #0]
   848f8:	f103 0408 	add.w	r4, r3, #8
   848fc:	e01e      	b.n	8493c <_malloc_r+0x18c>
   848fe:	2910      	cmp	r1, #16
   84900:	d820      	bhi.n	84944 <_malloc_r+0x194>
   84902:	f000 fab7 	bl	84e74 <__malloc_lock>
   84906:	2610      	movs	r6, #16
   84908:	2318      	movs	r3, #24
   8490a:	2002      	movs	r0, #2
   8490c:	4f72      	ldr	r7, [pc, #456]	; (84ad8 <_malloc_r+0x328>)
   8490e:	443b      	add	r3, r7
   84910:	685c      	ldr	r4, [r3, #4]
   84912:	f1a3 0208 	sub.w	r2, r3, #8
   84916:	4294      	cmp	r4, r2
   84918:	f000 812f 	beq.w	84b7a <_malloc_r+0x3ca>
   8491c:	6863      	ldr	r3, [r4, #4]
   8491e:	68e1      	ldr	r1, [r4, #12]
   84920:	f023 0303 	bic.w	r3, r3, #3
   84924:	4423      	add	r3, r4
   84926:	685a      	ldr	r2, [r3, #4]
   84928:	68a6      	ldr	r6, [r4, #8]
   8492a:	f042 0201 	orr.w	r2, r2, #1
   8492e:	60f1      	str	r1, [r6, #12]
   84930:	4628      	mov	r0, r5
   84932:	608e      	str	r6, [r1, #8]
   84934:	605a      	str	r2, [r3, #4]
   84936:	f000 faa3 	bl	84e80 <__malloc_unlock>
   8493a:	3408      	adds	r4, #8
   8493c:	4620      	mov	r0, r4
   8493e:	b003      	add	sp, #12
   84940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84944:	2400      	movs	r4, #0
   84946:	230c      	movs	r3, #12
   84948:	4620      	mov	r0, r4
   8494a:	602b      	str	r3, [r5, #0]
   8494c:	b003      	add	sp, #12
   8494e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84952:	2040      	movs	r0, #64	; 0x40
   84954:	f44f 7100 	mov.w	r1, #512	; 0x200
   84958:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   8495c:	e74a      	b.n	847f4 <_malloc_r+0x44>
   8495e:	4423      	add	r3, r4
   84960:	685a      	ldr	r2, [r3, #4]
   84962:	68e1      	ldr	r1, [r4, #12]
   84964:	e7e0      	b.n	84928 <_malloc_r+0x178>
   84966:	4423      	add	r3, r4
   84968:	685a      	ldr	r2, [r3, #4]
   8496a:	4628      	mov	r0, r5
   8496c:	f042 0201 	orr.w	r2, r2, #1
   84970:	605a      	str	r2, [r3, #4]
   84972:	3408      	adds	r4, #8
   84974:	f000 fa84 	bl	84e80 <__malloc_unlock>
   84978:	4620      	mov	r0, r4
   8497a:	b003      	add	sp, #12
   8497c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84980:	68bc      	ldr	r4, [r7, #8]
   84982:	6863      	ldr	r3, [r4, #4]
   84984:	f023 0803 	bic.w	r8, r3, #3
   84988:	45b0      	cmp	r8, r6
   8498a:	d304      	bcc.n	84996 <_malloc_r+0x1e6>
   8498c:	eba8 0306 	sub.w	r3, r8, r6
   84990:	2b0f      	cmp	r3, #15
   84992:	f300 8085 	bgt.w	84aa0 <_malloc_r+0x2f0>
   84996:	f8df 9158 	ldr.w	r9, [pc, #344]	; 84af0 <_malloc_r+0x340>
   8499a:	4b50      	ldr	r3, [pc, #320]	; (84adc <_malloc_r+0x32c>)
   8499c:	f8d9 2000 	ldr.w	r2, [r9]
   849a0:	681b      	ldr	r3, [r3, #0]
   849a2:	3201      	adds	r2, #1
   849a4:	4433      	add	r3, r6
   849a6:	eb04 0a08 	add.w	sl, r4, r8
   849aa:	f000 8154 	beq.w	84c56 <_malloc_r+0x4a6>
   849ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   849b2:	330f      	adds	r3, #15
   849b4:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   849b8:	f02b 0b0f 	bic.w	fp, fp, #15
   849bc:	4659      	mov	r1, fp
   849be:	4628      	mov	r0, r5
   849c0:	f000 fc1a 	bl	851f8 <_sbrk_r>
   849c4:	1c41      	adds	r1, r0, #1
   849c6:	4602      	mov	r2, r0
   849c8:	f000 80fb 	beq.w	84bc2 <_malloc_r+0x412>
   849cc:	4582      	cmp	sl, r0
   849ce:	f200 80f6 	bhi.w	84bbe <_malloc_r+0x40e>
   849d2:	4b43      	ldr	r3, [pc, #268]	; (84ae0 <_malloc_r+0x330>)
   849d4:	6819      	ldr	r1, [r3, #0]
   849d6:	4459      	add	r1, fp
   849d8:	6019      	str	r1, [r3, #0]
   849da:	f000 814c 	beq.w	84c76 <_malloc_r+0x4c6>
   849de:	f8d9 0000 	ldr.w	r0, [r9]
   849e2:	3001      	adds	r0, #1
   849e4:	bf1b      	ittet	ne
   849e6:	eba2 0a0a 	subne.w	sl, r2, sl
   849ea:	4451      	addne	r1, sl
   849ec:	f8c9 2000 	streq.w	r2, [r9]
   849f0:	6019      	strne	r1, [r3, #0]
   849f2:	f012 0107 	ands.w	r1, r2, #7
   849f6:	f000 8114 	beq.w	84c22 <_malloc_r+0x472>
   849fa:	f1c1 0008 	rsb	r0, r1, #8
   849fe:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   84a02:	4402      	add	r2, r0
   84a04:	3108      	adds	r1, #8
   84a06:	eb02 090b 	add.w	r9, r2, fp
   84a0a:	f3c9 090b 	ubfx	r9, r9, #0, #12
   84a0e:	eba1 0909 	sub.w	r9, r1, r9
   84a12:	4649      	mov	r1, r9
   84a14:	4628      	mov	r0, r5
   84a16:	9301      	str	r3, [sp, #4]
   84a18:	9200      	str	r2, [sp, #0]
   84a1a:	f000 fbed 	bl	851f8 <_sbrk_r>
   84a1e:	1c43      	adds	r3, r0, #1
   84a20:	e89d 000c 	ldmia.w	sp, {r2, r3}
   84a24:	f000 8142 	beq.w	84cac <_malloc_r+0x4fc>
   84a28:	1a80      	subs	r0, r0, r2
   84a2a:	4448      	add	r0, r9
   84a2c:	f040 0001 	orr.w	r0, r0, #1
   84a30:	6819      	ldr	r1, [r3, #0]
   84a32:	42bc      	cmp	r4, r7
   84a34:	4449      	add	r1, r9
   84a36:	60ba      	str	r2, [r7, #8]
   84a38:	6019      	str	r1, [r3, #0]
   84a3a:	6050      	str	r0, [r2, #4]
   84a3c:	d017      	beq.n	84a6e <_malloc_r+0x2be>
   84a3e:	f1b8 0f0f 	cmp.w	r8, #15
   84a42:	f240 80fa 	bls.w	84c3a <_malloc_r+0x48a>
   84a46:	f04f 0c05 	mov.w	ip, #5
   84a4a:	6862      	ldr	r2, [r4, #4]
   84a4c:	f1a8 000c 	sub.w	r0, r8, #12
   84a50:	f020 0007 	bic.w	r0, r0, #7
   84a54:	f002 0201 	and.w	r2, r2, #1
   84a58:	eb04 0e00 	add.w	lr, r4, r0
   84a5c:	4302      	orrs	r2, r0
   84a5e:	280f      	cmp	r0, #15
   84a60:	6062      	str	r2, [r4, #4]
   84a62:	f8ce c004 	str.w	ip, [lr, #4]
   84a66:	f8ce c008 	str.w	ip, [lr, #8]
   84a6a:	f200 8116 	bhi.w	84c9a <_malloc_r+0x4ea>
   84a6e:	4b1d      	ldr	r3, [pc, #116]	; (84ae4 <_malloc_r+0x334>)
   84a70:	68bc      	ldr	r4, [r7, #8]
   84a72:	681a      	ldr	r2, [r3, #0]
   84a74:	4291      	cmp	r1, r2
   84a76:	bf88      	it	hi
   84a78:	6019      	strhi	r1, [r3, #0]
   84a7a:	4b1b      	ldr	r3, [pc, #108]	; (84ae8 <_malloc_r+0x338>)
   84a7c:	681a      	ldr	r2, [r3, #0]
   84a7e:	4291      	cmp	r1, r2
   84a80:	6862      	ldr	r2, [r4, #4]
   84a82:	bf88      	it	hi
   84a84:	6019      	strhi	r1, [r3, #0]
   84a86:	f022 0203 	bic.w	r2, r2, #3
   84a8a:	4296      	cmp	r6, r2
   84a8c:	eba2 0306 	sub.w	r3, r2, r6
   84a90:	d801      	bhi.n	84a96 <_malloc_r+0x2e6>
   84a92:	2b0f      	cmp	r3, #15
   84a94:	dc04      	bgt.n	84aa0 <_malloc_r+0x2f0>
   84a96:	4628      	mov	r0, r5
   84a98:	f000 f9f2 	bl	84e80 <__malloc_unlock>
   84a9c:	2400      	movs	r4, #0
   84a9e:	e74d      	b.n	8493c <_malloc_r+0x18c>
   84aa0:	f046 0201 	orr.w	r2, r6, #1
   84aa4:	f043 0301 	orr.w	r3, r3, #1
   84aa8:	4426      	add	r6, r4
   84aaa:	6062      	str	r2, [r4, #4]
   84aac:	4628      	mov	r0, r5
   84aae:	60be      	str	r6, [r7, #8]
   84ab0:	3408      	adds	r4, #8
   84ab2:	6073      	str	r3, [r6, #4]
   84ab4:	f000 f9e4 	bl	84e80 <__malloc_unlock>
   84ab8:	4620      	mov	r0, r4
   84aba:	b003      	add	sp, #12
   84abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84ac0:	2b14      	cmp	r3, #20
   84ac2:	d970      	bls.n	84ba6 <_malloc_r+0x3f6>
   84ac4:	2b54      	cmp	r3, #84	; 0x54
   84ac6:	f200 80a2 	bhi.w	84c0e <_malloc_r+0x45e>
   84aca:	0b33      	lsrs	r3, r6, #12
   84acc:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   84ad0:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   84ad4:	00c1      	lsls	r1, r0, #3
   84ad6:	e68d      	b.n	847f4 <_malloc_r+0x44>
   84ad8:	200706d8 	.word	0x200706d8
   84adc:	2007ad00 	.word	0x2007ad00
   84ae0:	2007acd0 	.word	0x2007acd0
   84ae4:	2007acf8 	.word	0x2007acf8
   84ae8:	2007acfc 	.word	0x2007acfc
   84aec:	200706e0 	.word	0x200706e0
   84af0:	20070ae0 	.word	0x20070ae0
   84af4:	0a5a      	lsrs	r2, r3, #9
   84af6:	2a04      	cmp	r2, #4
   84af8:	d95b      	bls.n	84bb2 <_malloc_r+0x402>
   84afa:	2a14      	cmp	r2, #20
   84afc:	f200 80ae 	bhi.w	84c5c <_malloc_r+0x4ac>
   84b00:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   84b04:	00c9      	lsls	r1, r1, #3
   84b06:	325b      	adds	r2, #91	; 0x5b
   84b08:	eb07 0c01 	add.w	ip, r7, r1
   84b0c:	5879      	ldr	r1, [r7, r1]
   84b0e:	f1ac 0c08 	sub.w	ip, ip, #8
   84b12:	458c      	cmp	ip, r1
   84b14:	f000 8088 	beq.w	84c28 <_malloc_r+0x478>
   84b18:	684a      	ldr	r2, [r1, #4]
   84b1a:	f022 0203 	bic.w	r2, r2, #3
   84b1e:	4293      	cmp	r3, r2
   84b20:	d273      	bcs.n	84c0a <_malloc_r+0x45a>
   84b22:	6889      	ldr	r1, [r1, #8]
   84b24:	458c      	cmp	ip, r1
   84b26:	d1f7      	bne.n	84b18 <_malloc_r+0x368>
   84b28:	f8dc 300c 	ldr.w	r3, [ip, #12]
   84b2c:	687a      	ldr	r2, [r7, #4]
   84b2e:	60e3      	str	r3, [r4, #12]
   84b30:	f8c4 c008 	str.w	ip, [r4, #8]
   84b34:	609c      	str	r4, [r3, #8]
   84b36:	f8cc 400c 	str.w	r4, [ip, #12]
   84b3a:	e69e      	b.n	8487a <_malloc_r+0xca>
   84b3c:	f046 0c01 	orr.w	ip, r6, #1
   84b40:	f042 0101 	orr.w	r1, r2, #1
   84b44:	4426      	add	r6, r4
   84b46:	f8c4 c004 	str.w	ip, [r4, #4]
   84b4a:	4628      	mov	r0, r5
   84b4c:	617e      	str	r6, [r7, #20]
   84b4e:	613e      	str	r6, [r7, #16]
   84b50:	f8c6 e00c 	str.w	lr, [r6, #12]
   84b54:	f8c6 e008 	str.w	lr, [r6, #8]
   84b58:	6071      	str	r1, [r6, #4]
   84b5a:	50e2      	str	r2, [r4, r3]
   84b5c:	f000 f990 	bl	84e80 <__malloc_unlock>
   84b60:	3408      	adds	r4, #8
   84b62:	e6eb      	b.n	8493c <_malloc_r+0x18c>
   84b64:	687a      	ldr	r2, [r7, #4]
   84b66:	e688      	b.n	8487a <_malloc_r+0xca>
   84b68:	f108 0801 	add.w	r8, r8, #1
   84b6c:	f018 0f03 	tst.w	r8, #3
   84b70:	f10c 0c08 	add.w	ip, ip, #8
   84b74:	f47f ae93 	bne.w	8489e <_malloc_r+0xee>
   84b78:	e02d      	b.n	84bd6 <_malloc_r+0x426>
   84b7a:	68dc      	ldr	r4, [r3, #12]
   84b7c:	42a3      	cmp	r3, r4
   84b7e:	bf08      	it	eq
   84b80:	3002      	addeq	r0, #2
   84b82:	f43f ae4b 	beq.w	8481c <_malloc_r+0x6c>
   84b86:	e6c9      	b.n	8491c <_malloc_r+0x16c>
   84b88:	461c      	mov	r4, r3
   84b8a:	4419      	add	r1, r3
   84b8c:	684a      	ldr	r2, [r1, #4]
   84b8e:	68db      	ldr	r3, [r3, #12]
   84b90:	f854 6f08 	ldr.w	r6, [r4, #8]!
   84b94:	f042 0201 	orr.w	r2, r2, #1
   84b98:	604a      	str	r2, [r1, #4]
   84b9a:	4628      	mov	r0, r5
   84b9c:	60f3      	str	r3, [r6, #12]
   84b9e:	609e      	str	r6, [r3, #8]
   84ba0:	f000 f96e 	bl	84e80 <__malloc_unlock>
   84ba4:	e6ca      	b.n	8493c <_malloc_r+0x18c>
   84ba6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   84baa:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   84bae:	00c1      	lsls	r1, r0, #3
   84bb0:	e620      	b.n	847f4 <_malloc_r+0x44>
   84bb2:	099a      	lsrs	r2, r3, #6
   84bb4:	f102 0139 	add.w	r1, r2, #57	; 0x39
   84bb8:	00c9      	lsls	r1, r1, #3
   84bba:	3238      	adds	r2, #56	; 0x38
   84bbc:	e7a4      	b.n	84b08 <_malloc_r+0x358>
   84bbe:	42bc      	cmp	r4, r7
   84bc0:	d054      	beq.n	84c6c <_malloc_r+0x4bc>
   84bc2:	68bc      	ldr	r4, [r7, #8]
   84bc4:	6862      	ldr	r2, [r4, #4]
   84bc6:	f022 0203 	bic.w	r2, r2, #3
   84bca:	e75e      	b.n	84a8a <_malloc_r+0x2da>
   84bcc:	f859 3908 	ldr.w	r3, [r9], #-8
   84bd0:	4599      	cmp	r9, r3
   84bd2:	f040 8086 	bne.w	84ce2 <_malloc_r+0x532>
   84bd6:	f010 0f03 	tst.w	r0, #3
   84bda:	f100 30ff 	add.w	r0, r0, #4294967295
   84bde:	d1f5      	bne.n	84bcc <_malloc_r+0x41c>
   84be0:	687b      	ldr	r3, [r7, #4]
   84be2:	ea23 0304 	bic.w	r3, r3, r4
   84be6:	607b      	str	r3, [r7, #4]
   84be8:	0064      	lsls	r4, r4, #1
   84bea:	429c      	cmp	r4, r3
   84bec:	f63f aec8 	bhi.w	84980 <_malloc_r+0x1d0>
   84bf0:	2c00      	cmp	r4, #0
   84bf2:	f43f aec5 	beq.w	84980 <_malloc_r+0x1d0>
   84bf6:	421c      	tst	r4, r3
   84bf8:	4640      	mov	r0, r8
   84bfa:	f47f ae4c 	bne.w	84896 <_malloc_r+0xe6>
   84bfe:	0064      	lsls	r4, r4, #1
   84c00:	421c      	tst	r4, r3
   84c02:	f100 0004 	add.w	r0, r0, #4
   84c06:	d0fa      	beq.n	84bfe <_malloc_r+0x44e>
   84c08:	e645      	b.n	84896 <_malloc_r+0xe6>
   84c0a:	468c      	mov	ip, r1
   84c0c:	e78c      	b.n	84b28 <_malloc_r+0x378>
   84c0e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   84c12:	d815      	bhi.n	84c40 <_malloc_r+0x490>
   84c14:	0bf3      	lsrs	r3, r6, #15
   84c16:	f103 0078 	add.w	r0, r3, #120	; 0x78
   84c1a:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   84c1e:	00c1      	lsls	r1, r0, #3
   84c20:	e5e8      	b.n	847f4 <_malloc_r+0x44>
   84c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   84c26:	e6ee      	b.n	84a06 <_malloc_r+0x256>
   84c28:	2101      	movs	r1, #1
   84c2a:	687b      	ldr	r3, [r7, #4]
   84c2c:	1092      	asrs	r2, r2, #2
   84c2e:	fa01 f202 	lsl.w	r2, r1, r2
   84c32:	431a      	orrs	r2, r3
   84c34:	607a      	str	r2, [r7, #4]
   84c36:	4663      	mov	r3, ip
   84c38:	e779      	b.n	84b2e <_malloc_r+0x37e>
   84c3a:	2301      	movs	r3, #1
   84c3c:	6053      	str	r3, [r2, #4]
   84c3e:	e72a      	b.n	84a96 <_malloc_r+0x2e6>
   84c40:	f240 5254 	movw	r2, #1364	; 0x554
   84c44:	4293      	cmp	r3, r2
   84c46:	d822      	bhi.n	84c8e <_malloc_r+0x4de>
   84c48:	0cb3      	lsrs	r3, r6, #18
   84c4a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   84c4e:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   84c52:	00c1      	lsls	r1, r0, #3
   84c54:	e5ce      	b.n	847f4 <_malloc_r+0x44>
   84c56:	f103 0b10 	add.w	fp, r3, #16
   84c5a:	e6af      	b.n	849bc <_malloc_r+0x20c>
   84c5c:	2a54      	cmp	r2, #84	; 0x54
   84c5e:	d829      	bhi.n	84cb4 <_malloc_r+0x504>
   84c60:	0b1a      	lsrs	r2, r3, #12
   84c62:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   84c66:	00c9      	lsls	r1, r1, #3
   84c68:	326e      	adds	r2, #110	; 0x6e
   84c6a:	e74d      	b.n	84b08 <_malloc_r+0x358>
   84c6c:	4b20      	ldr	r3, [pc, #128]	; (84cf0 <_malloc_r+0x540>)
   84c6e:	6819      	ldr	r1, [r3, #0]
   84c70:	4459      	add	r1, fp
   84c72:	6019      	str	r1, [r3, #0]
   84c74:	e6b3      	b.n	849de <_malloc_r+0x22e>
   84c76:	f3ca 000b 	ubfx	r0, sl, #0, #12
   84c7a:	2800      	cmp	r0, #0
   84c7c:	f47f aeaf 	bne.w	849de <_malloc_r+0x22e>
   84c80:	eb08 030b 	add.w	r3, r8, fp
   84c84:	68ba      	ldr	r2, [r7, #8]
   84c86:	f043 0301 	orr.w	r3, r3, #1
   84c8a:	6053      	str	r3, [r2, #4]
   84c8c:	e6ef      	b.n	84a6e <_malloc_r+0x2be>
   84c8e:	207f      	movs	r0, #127	; 0x7f
   84c90:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84c94:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   84c98:	e5ac      	b.n	847f4 <_malloc_r+0x44>
   84c9a:	f104 0108 	add.w	r1, r4, #8
   84c9e:	4628      	mov	r0, r5
   84ca0:	9300      	str	r3, [sp, #0]
   84ca2:	f7ff fa67 	bl	84174 <_free_r>
   84ca6:	9b00      	ldr	r3, [sp, #0]
   84ca8:	6819      	ldr	r1, [r3, #0]
   84caa:	e6e0      	b.n	84a6e <_malloc_r+0x2be>
   84cac:	2001      	movs	r0, #1
   84cae:	f04f 0900 	mov.w	r9, #0
   84cb2:	e6bd      	b.n	84a30 <_malloc_r+0x280>
   84cb4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   84cb8:	d805      	bhi.n	84cc6 <_malloc_r+0x516>
   84cba:	0bda      	lsrs	r2, r3, #15
   84cbc:	f102 0178 	add.w	r1, r2, #120	; 0x78
   84cc0:	00c9      	lsls	r1, r1, #3
   84cc2:	3277      	adds	r2, #119	; 0x77
   84cc4:	e720      	b.n	84b08 <_malloc_r+0x358>
   84cc6:	f240 5154 	movw	r1, #1364	; 0x554
   84cca:	428a      	cmp	r2, r1
   84ccc:	d805      	bhi.n	84cda <_malloc_r+0x52a>
   84cce:	0c9a      	lsrs	r2, r3, #18
   84cd0:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   84cd4:	00c9      	lsls	r1, r1, #3
   84cd6:	327c      	adds	r2, #124	; 0x7c
   84cd8:	e716      	b.n	84b08 <_malloc_r+0x358>
   84cda:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   84cde:	227e      	movs	r2, #126	; 0x7e
   84ce0:	e712      	b.n	84b08 <_malloc_r+0x358>
   84ce2:	687b      	ldr	r3, [r7, #4]
   84ce4:	e780      	b.n	84be8 <_malloc_r+0x438>
   84ce6:	08f0      	lsrs	r0, r6, #3
   84ce8:	f106 0308 	add.w	r3, r6, #8
   84cec:	e60e      	b.n	8490c <_malloc_r+0x15c>
   84cee:	bf00      	nop
   84cf0:	2007acd0 	.word	0x2007acd0

00084cf4 <__ascii_mbtowc>:
   84cf4:	b082      	sub	sp, #8
   84cf6:	b149      	cbz	r1, 84d0c <__ascii_mbtowc+0x18>
   84cf8:	b15a      	cbz	r2, 84d12 <__ascii_mbtowc+0x1e>
   84cfa:	b16b      	cbz	r3, 84d18 <__ascii_mbtowc+0x24>
   84cfc:	7813      	ldrb	r3, [r2, #0]
   84cfe:	600b      	str	r3, [r1, #0]
   84d00:	7812      	ldrb	r2, [r2, #0]
   84d02:	1c10      	adds	r0, r2, #0
   84d04:	bf18      	it	ne
   84d06:	2001      	movne	r0, #1
   84d08:	b002      	add	sp, #8
   84d0a:	4770      	bx	lr
   84d0c:	a901      	add	r1, sp, #4
   84d0e:	2a00      	cmp	r2, #0
   84d10:	d1f3      	bne.n	84cfa <__ascii_mbtowc+0x6>
   84d12:	4610      	mov	r0, r2
   84d14:	b002      	add	sp, #8
   84d16:	4770      	bx	lr
   84d18:	f06f 0001 	mvn.w	r0, #1
   84d1c:	e7f4      	b.n	84d08 <__ascii_mbtowc+0x14>
   84d1e:	bf00      	nop

00084d20 <memchr>:
   84d20:	0783      	lsls	r3, r0, #30
   84d22:	b470      	push	{r4, r5, r6}
   84d24:	b2cd      	uxtb	r5, r1
   84d26:	d03d      	beq.n	84da4 <memchr+0x84>
   84d28:	1e54      	subs	r4, r2, #1
   84d2a:	b30a      	cbz	r2, 84d70 <memchr+0x50>
   84d2c:	7803      	ldrb	r3, [r0, #0]
   84d2e:	42ab      	cmp	r3, r5
   84d30:	d01f      	beq.n	84d72 <memchr+0x52>
   84d32:	1c43      	adds	r3, r0, #1
   84d34:	e005      	b.n	84d42 <memchr+0x22>
   84d36:	f114 34ff 	adds.w	r4, r4, #4294967295
   84d3a:	d319      	bcc.n	84d70 <memchr+0x50>
   84d3c:	7802      	ldrb	r2, [r0, #0]
   84d3e:	42aa      	cmp	r2, r5
   84d40:	d017      	beq.n	84d72 <memchr+0x52>
   84d42:	f013 0f03 	tst.w	r3, #3
   84d46:	4618      	mov	r0, r3
   84d48:	f103 0301 	add.w	r3, r3, #1
   84d4c:	d1f3      	bne.n	84d36 <memchr+0x16>
   84d4e:	2c03      	cmp	r4, #3
   84d50:	d811      	bhi.n	84d76 <memchr+0x56>
   84d52:	b34c      	cbz	r4, 84da8 <memchr+0x88>
   84d54:	7803      	ldrb	r3, [r0, #0]
   84d56:	42ab      	cmp	r3, r5
   84d58:	d00b      	beq.n	84d72 <memchr+0x52>
   84d5a:	4404      	add	r4, r0
   84d5c:	1c43      	adds	r3, r0, #1
   84d5e:	e002      	b.n	84d66 <memchr+0x46>
   84d60:	7802      	ldrb	r2, [r0, #0]
   84d62:	42aa      	cmp	r2, r5
   84d64:	d005      	beq.n	84d72 <memchr+0x52>
   84d66:	429c      	cmp	r4, r3
   84d68:	4618      	mov	r0, r3
   84d6a:	f103 0301 	add.w	r3, r3, #1
   84d6e:	d1f7      	bne.n	84d60 <memchr+0x40>
   84d70:	2000      	movs	r0, #0
   84d72:	bc70      	pop	{r4, r5, r6}
   84d74:	4770      	bx	lr
   84d76:	0209      	lsls	r1, r1, #8
   84d78:	b289      	uxth	r1, r1
   84d7a:	4329      	orrs	r1, r5
   84d7c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   84d80:	6803      	ldr	r3, [r0, #0]
   84d82:	4606      	mov	r6, r0
   84d84:	404b      	eors	r3, r1
   84d86:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   84d8a:	ea22 0303 	bic.w	r3, r2, r3
   84d8e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   84d92:	f100 0004 	add.w	r0, r0, #4
   84d96:	d103      	bne.n	84da0 <memchr+0x80>
   84d98:	3c04      	subs	r4, #4
   84d9a:	2c03      	cmp	r4, #3
   84d9c:	d8f0      	bhi.n	84d80 <memchr+0x60>
   84d9e:	e7d8      	b.n	84d52 <memchr+0x32>
   84da0:	4630      	mov	r0, r6
   84da2:	e7d7      	b.n	84d54 <memchr+0x34>
   84da4:	4614      	mov	r4, r2
   84da6:	e7d2      	b.n	84d4e <memchr+0x2e>
   84da8:	4620      	mov	r0, r4
   84daa:	e7e2      	b.n	84d72 <memchr+0x52>

00084dac <memmove>:
   84dac:	4288      	cmp	r0, r1
   84dae:	b5f0      	push	{r4, r5, r6, r7, lr}
   84db0:	d90d      	bls.n	84dce <memmove+0x22>
   84db2:	188b      	adds	r3, r1, r2
   84db4:	4298      	cmp	r0, r3
   84db6:	d20a      	bcs.n	84dce <memmove+0x22>
   84db8:	1884      	adds	r4, r0, r2
   84dba:	2a00      	cmp	r2, #0
   84dbc:	d051      	beq.n	84e62 <memmove+0xb6>
   84dbe:	4622      	mov	r2, r4
   84dc0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   84dc4:	4299      	cmp	r1, r3
   84dc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
   84dca:	d1f9      	bne.n	84dc0 <memmove+0x14>
   84dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84dce:	2a0f      	cmp	r2, #15
   84dd0:	d948      	bls.n	84e64 <memmove+0xb8>
   84dd2:	ea41 0300 	orr.w	r3, r1, r0
   84dd6:	079b      	lsls	r3, r3, #30
   84dd8:	d146      	bne.n	84e68 <memmove+0xbc>
   84dda:	4615      	mov	r5, r2
   84ddc:	f100 0410 	add.w	r4, r0, #16
   84de0:	f101 0310 	add.w	r3, r1, #16
   84de4:	f853 6c10 	ldr.w	r6, [r3, #-16]
   84de8:	3d10      	subs	r5, #16
   84dea:	f844 6c10 	str.w	r6, [r4, #-16]
   84dee:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   84df2:	2d0f      	cmp	r5, #15
   84df4:	f844 6c0c 	str.w	r6, [r4, #-12]
   84df8:	f853 6c08 	ldr.w	r6, [r3, #-8]
   84dfc:	f104 0410 	add.w	r4, r4, #16
   84e00:	f844 6c18 	str.w	r6, [r4, #-24]
   84e04:	f853 6c04 	ldr.w	r6, [r3, #-4]
   84e08:	f103 0310 	add.w	r3, r3, #16
   84e0c:	f844 6c14 	str.w	r6, [r4, #-20]
   84e10:	d8e8      	bhi.n	84de4 <memmove+0x38>
   84e12:	f1a2 0310 	sub.w	r3, r2, #16
   84e16:	f023 030f 	bic.w	r3, r3, #15
   84e1a:	f002 0e0f 	and.w	lr, r2, #15
   84e1e:	3310      	adds	r3, #16
   84e20:	f1be 0f03 	cmp.w	lr, #3
   84e24:	4419      	add	r1, r3
   84e26:	4403      	add	r3, r0
   84e28:	d921      	bls.n	84e6e <memmove+0xc2>
   84e2a:	460e      	mov	r6, r1
   84e2c:	4674      	mov	r4, lr
   84e2e:	1f1d      	subs	r5, r3, #4
   84e30:	f856 7b04 	ldr.w	r7, [r6], #4
   84e34:	3c04      	subs	r4, #4
   84e36:	2c03      	cmp	r4, #3
   84e38:	f845 7f04 	str.w	r7, [r5, #4]!
   84e3c:	d8f8      	bhi.n	84e30 <memmove+0x84>
   84e3e:	f1ae 0404 	sub.w	r4, lr, #4
   84e42:	f024 0403 	bic.w	r4, r4, #3
   84e46:	3404      	adds	r4, #4
   84e48:	4421      	add	r1, r4
   84e4a:	4423      	add	r3, r4
   84e4c:	f002 0203 	and.w	r2, r2, #3
   84e50:	b162      	cbz	r2, 84e6c <memmove+0xc0>
   84e52:	3b01      	subs	r3, #1
   84e54:	440a      	add	r2, r1
   84e56:	f811 4b01 	ldrb.w	r4, [r1], #1
   84e5a:	428a      	cmp	r2, r1
   84e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
   84e60:	d1f9      	bne.n	84e56 <memmove+0xaa>
   84e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e64:	4603      	mov	r3, r0
   84e66:	e7f3      	b.n	84e50 <memmove+0xa4>
   84e68:	4603      	mov	r3, r0
   84e6a:	e7f2      	b.n	84e52 <memmove+0xa6>
   84e6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   84e6e:	4672      	mov	r2, lr
   84e70:	e7ee      	b.n	84e50 <memmove+0xa4>
   84e72:	bf00      	nop

00084e74 <__malloc_lock>:
   84e74:	4801      	ldr	r0, [pc, #4]	; (84e7c <__malloc_lock+0x8>)
   84e76:	f7ff bc17 	b.w	846a8 <__retarget_lock_acquire_recursive>
   84e7a:	bf00      	nop
   84e7c:	2007ad8c 	.word	0x2007ad8c

00084e80 <__malloc_unlock>:
   84e80:	4801      	ldr	r0, [pc, #4]	; (84e88 <__malloc_unlock+0x8>)
   84e82:	f7ff bc13 	b.w	846ac <__retarget_lock_release_recursive>
   84e86:	bf00      	nop
   84e88:	2007ad8c 	.word	0x2007ad8c

00084e8c <_realloc_r>:
   84e8c:	2900      	cmp	r1, #0
   84e8e:	f000 8094 	beq.w	84fba <_realloc_r+0x12e>
   84e92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84e96:	460c      	mov	r4, r1
   84e98:	4615      	mov	r5, r2
   84e9a:	b083      	sub	sp, #12
   84e9c:	4680      	mov	r8, r0
   84e9e:	f105 060b 	add.w	r6, r5, #11
   84ea2:	f7ff ffe7 	bl	84e74 <__malloc_lock>
   84ea6:	f854 ec04 	ldr.w	lr, [r4, #-4]
   84eaa:	2e16      	cmp	r6, #22
   84eac:	f02e 0703 	bic.w	r7, lr, #3
   84eb0:	f1a4 0908 	sub.w	r9, r4, #8
   84eb4:	d83c      	bhi.n	84f30 <_realloc_r+0xa4>
   84eb6:	2210      	movs	r2, #16
   84eb8:	4616      	mov	r6, r2
   84eba:	42b5      	cmp	r5, r6
   84ebc:	d83d      	bhi.n	84f3a <_realloc_r+0xae>
   84ebe:	4297      	cmp	r7, r2
   84ec0:	da43      	bge.n	84f4a <_realloc_r+0xbe>
   84ec2:	4bc6      	ldr	r3, [pc, #792]	; (851dc <_realloc_r+0x350>)
   84ec4:	eb09 0007 	add.w	r0, r9, r7
   84ec8:	6899      	ldr	r1, [r3, #8]
   84eca:	4288      	cmp	r0, r1
   84ecc:	f000 80c3 	beq.w	85056 <_realloc_r+0x1ca>
   84ed0:	6843      	ldr	r3, [r0, #4]
   84ed2:	f023 0101 	bic.w	r1, r3, #1
   84ed6:	4401      	add	r1, r0
   84ed8:	6849      	ldr	r1, [r1, #4]
   84eda:	07c9      	lsls	r1, r1, #31
   84edc:	d54d      	bpl.n	84f7a <_realloc_r+0xee>
   84ede:	f01e 0f01 	tst.w	lr, #1
   84ee2:	f000 809b 	beq.w	8501c <_realloc_r+0x190>
   84ee6:	4629      	mov	r1, r5
   84ee8:	4640      	mov	r0, r8
   84eea:	f7ff fc61 	bl	847b0 <_malloc_r>
   84eee:	4605      	mov	r5, r0
   84ef0:	2800      	cmp	r0, #0
   84ef2:	d03b      	beq.n	84f6c <_realloc_r+0xe0>
   84ef4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   84ef8:	f1a0 0208 	sub.w	r2, r0, #8
   84efc:	f023 0301 	bic.w	r3, r3, #1
   84f00:	444b      	add	r3, r9
   84f02:	429a      	cmp	r2, r3
   84f04:	f000 812b 	beq.w	8515e <_realloc_r+0x2d2>
   84f08:	1f3a      	subs	r2, r7, #4
   84f0a:	2a24      	cmp	r2, #36	; 0x24
   84f0c:	f200 8118 	bhi.w	85140 <_realloc_r+0x2b4>
   84f10:	2a13      	cmp	r2, #19
   84f12:	f200 80eb 	bhi.w	850ec <_realloc_r+0x260>
   84f16:	4603      	mov	r3, r0
   84f18:	4622      	mov	r2, r4
   84f1a:	6811      	ldr	r1, [r2, #0]
   84f1c:	6019      	str	r1, [r3, #0]
   84f1e:	6851      	ldr	r1, [r2, #4]
   84f20:	6059      	str	r1, [r3, #4]
   84f22:	6892      	ldr	r2, [r2, #8]
   84f24:	609a      	str	r2, [r3, #8]
   84f26:	4621      	mov	r1, r4
   84f28:	4640      	mov	r0, r8
   84f2a:	f7ff f923 	bl	84174 <_free_r>
   84f2e:	e01d      	b.n	84f6c <_realloc_r+0xe0>
   84f30:	f026 0607 	bic.w	r6, r6, #7
   84f34:	2e00      	cmp	r6, #0
   84f36:	4632      	mov	r2, r6
   84f38:	dabf      	bge.n	84eba <_realloc_r+0x2e>
   84f3a:	2500      	movs	r5, #0
   84f3c:	230c      	movs	r3, #12
   84f3e:	4628      	mov	r0, r5
   84f40:	f8c8 3000 	str.w	r3, [r8]
   84f44:	b003      	add	sp, #12
   84f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f4a:	4625      	mov	r5, r4
   84f4c:	1bbb      	subs	r3, r7, r6
   84f4e:	2b0f      	cmp	r3, #15
   84f50:	f8d9 2004 	ldr.w	r2, [r9, #4]
   84f54:	d81d      	bhi.n	84f92 <_realloc_r+0x106>
   84f56:	f002 0201 	and.w	r2, r2, #1
   84f5a:	433a      	orrs	r2, r7
   84f5c:	eb09 0107 	add.w	r1, r9, r7
   84f60:	f8c9 2004 	str.w	r2, [r9, #4]
   84f64:	684b      	ldr	r3, [r1, #4]
   84f66:	f043 0301 	orr.w	r3, r3, #1
   84f6a:	604b      	str	r3, [r1, #4]
   84f6c:	4640      	mov	r0, r8
   84f6e:	f7ff ff87 	bl	84e80 <__malloc_unlock>
   84f72:	4628      	mov	r0, r5
   84f74:	b003      	add	sp, #12
   84f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84f7a:	f023 0303 	bic.w	r3, r3, #3
   84f7e:	18f9      	adds	r1, r7, r3
   84f80:	4291      	cmp	r1, r2
   84f82:	db1d      	blt.n	84fc0 <_realloc_r+0x134>
   84f84:	68c3      	ldr	r3, [r0, #12]
   84f86:	6882      	ldr	r2, [r0, #8]
   84f88:	4625      	mov	r5, r4
   84f8a:	60d3      	str	r3, [r2, #12]
   84f8c:	460f      	mov	r7, r1
   84f8e:	609a      	str	r2, [r3, #8]
   84f90:	e7dc      	b.n	84f4c <_realloc_r+0xc0>
   84f92:	f002 0201 	and.w	r2, r2, #1
   84f96:	eb09 0106 	add.w	r1, r9, r6
   84f9a:	f043 0301 	orr.w	r3, r3, #1
   84f9e:	4332      	orrs	r2, r6
   84fa0:	f8c9 2004 	str.w	r2, [r9, #4]
   84fa4:	444f      	add	r7, r9
   84fa6:	604b      	str	r3, [r1, #4]
   84fa8:	687b      	ldr	r3, [r7, #4]
   84faa:	3108      	adds	r1, #8
   84fac:	f043 0301 	orr.w	r3, r3, #1
   84fb0:	607b      	str	r3, [r7, #4]
   84fb2:	4640      	mov	r0, r8
   84fb4:	f7ff f8de 	bl	84174 <_free_r>
   84fb8:	e7d8      	b.n	84f6c <_realloc_r+0xe0>
   84fba:	4611      	mov	r1, r2
   84fbc:	f7ff bbf8 	b.w	847b0 <_malloc_r>
   84fc0:	f01e 0f01 	tst.w	lr, #1
   84fc4:	d18f      	bne.n	84ee6 <_realloc_r+0x5a>
   84fc6:	f854 1c08 	ldr.w	r1, [r4, #-8]
   84fca:	eba9 0a01 	sub.w	sl, r9, r1
   84fce:	f8da 1004 	ldr.w	r1, [sl, #4]
   84fd2:	f021 0103 	bic.w	r1, r1, #3
   84fd6:	440b      	add	r3, r1
   84fd8:	443b      	add	r3, r7
   84fda:	4293      	cmp	r3, r2
   84fdc:	db26      	blt.n	8502c <_realloc_r+0x1a0>
   84fde:	4655      	mov	r5, sl
   84fe0:	68c1      	ldr	r1, [r0, #12]
   84fe2:	6880      	ldr	r0, [r0, #8]
   84fe4:	1f3a      	subs	r2, r7, #4
   84fe6:	60c1      	str	r1, [r0, #12]
   84fe8:	6088      	str	r0, [r1, #8]
   84fea:	f855 0f08 	ldr.w	r0, [r5, #8]!
   84fee:	f8da 100c 	ldr.w	r1, [sl, #12]
   84ff2:	2a24      	cmp	r2, #36	; 0x24
   84ff4:	60c1      	str	r1, [r0, #12]
   84ff6:	6088      	str	r0, [r1, #8]
   84ff8:	d826      	bhi.n	85048 <_realloc_r+0x1bc>
   84ffa:	2a13      	cmp	r2, #19
   84ffc:	f240 8081 	bls.w	85102 <_realloc_r+0x276>
   85000:	6821      	ldr	r1, [r4, #0]
   85002:	2a1b      	cmp	r2, #27
   85004:	f8ca 1008 	str.w	r1, [sl, #8]
   85008:	6861      	ldr	r1, [r4, #4]
   8500a:	f8ca 100c 	str.w	r1, [sl, #12]
   8500e:	f200 80ad 	bhi.w	8516c <_realloc_r+0x2e0>
   85012:	f104 0008 	add.w	r0, r4, #8
   85016:	f10a 0210 	add.w	r2, sl, #16
   8501a:	e074      	b.n	85106 <_realloc_r+0x27a>
   8501c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   85020:	eba9 0a03 	sub.w	sl, r9, r3
   85024:	f8da 1004 	ldr.w	r1, [sl, #4]
   85028:	f021 0103 	bic.w	r1, r1, #3
   8502c:	187b      	adds	r3, r7, r1
   8502e:	4293      	cmp	r3, r2
   85030:	f6ff af59 	blt.w	84ee6 <_realloc_r+0x5a>
   85034:	4655      	mov	r5, sl
   85036:	f8da 100c 	ldr.w	r1, [sl, #12]
   8503a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8503e:	1f3a      	subs	r2, r7, #4
   85040:	2a24      	cmp	r2, #36	; 0x24
   85042:	60c1      	str	r1, [r0, #12]
   85044:	6088      	str	r0, [r1, #8]
   85046:	d9d8      	bls.n	84ffa <_realloc_r+0x16e>
   85048:	4621      	mov	r1, r4
   8504a:	4628      	mov	r0, r5
   8504c:	461f      	mov	r7, r3
   8504e:	46d1      	mov	r9, sl
   85050:	f7ff feac 	bl	84dac <memmove>
   85054:	e77a      	b.n	84f4c <_realloc_r+0xc0>
   85056:	6841      	ldr	r1, [r0, #4]
   85058:	f106 0010 	add.w	r0, r6, #16
   8505c:	f021 0b03 	bic.w	fp, r1, #3
   85060:	44bb      	add	fp, r7
   85062:	4583      	cmp	fp, r0
   85064:	da58      	bge.n	85118 <_realloc_r+0x28c>
   85066:	f01e 0f01 	tst.w	lr, #1
   8506a:	f47f af3c 	bne.w	84ee6 <_realloc_r+0x5a>
   8506e:	f854 1c08 	ldr.w	r1, [r4, #-8]
   85072:	eba9 0a01 	sub.w	sl, r9, r1
   85076:	f8da 1004 	ldr.w	r1, [sl, #4]
   8507a:	f021 0103 	bic.w	r1, r1, #3
   8507e:	448b      	add	fp, r1
   85080:	4558      	cmp	r0, fp
   85082:	dcd3      	bgt.n	8502c <_realloc_r+0x1a0>
   85084:	4655      	mov	r5, sl
   85086:	f8da 100c 	ldr.w	r1, [sl, #12]
   8508a:	f855 0f08 	ldr.w	r0, [r5, #8]!
   8508e:	1f3a      	subs	r2, r7, #4
   85090:	2a24      	cmp	r2, #36	; 0x24
   85092:	60c1      	str	r1, [r0, #12]
   85094:	6088      	str	r0, [r1, #8]
   85096:	f200 808d 	bhi.w	851b4 <_realloc_r+0x328>
   8509a:	2a13      	cmp	r2, #19
   8509c:	f240 8087 	bls.w	851ae <_realloc_r+0x322>
   850a0:	6821      	ldr	r1, [r4, #0]
   850a2:	2a1b      	cmp	r2, #27
   850a4:	f8ca 1008 	str.w	r1, [sl, #8]
   850a8:	6861      	ldr	r1, [r4, #4]
   850aa:	f8ca 100c 	str.w	r1, [sl, #12]
   850ae:	f200 8088 	bhi.w	851c2 <_realloc_r+0x336>
   850b2:	f104 0108 	add.w	r1, r4, #8
   850b6:	f10a 0210 	add.w	r2, sl, #16
   850ba:	6808      	ldr	r0, [r1, #0]
   850bc:	6010      	str	r0, [r2, #0]
   850be:	6848      	ldr	r0, [r1, #4]
   850c0:	6050      	str	r0, [r2, #4]
   850c2:	6889      	ldr	r1, [r1, #8]
   850c4:	6091      	str	r1, [r2, #8]
   850c6:	ebab 0206 	sub.w	r2, fp, r6
   850ca:	eb0a 0106 	add.w	r1, sl, r6
   850ce:	f042 0201 	orr.w	r2, r2, #1
   850d2:	6099      	str	r1, [r3, #8]
   850d4:	604a      	str	r2, [r1, #4]
   850d6:	f8da 3004 	ldr.w	r3, [sl, #4]
   850da:	4640      	mov	r0, r8
   850dc:	f003 0301 	and.w	r3, r3, #1
   850e0:	431e      	orrs	r6, r3
   850e2:	f8ca 6004 	str.w	r6, [sl, #4]
   850e6:	f7ff fecb 	bl	84e80 <__malloc_unlock>
   850ea:	e742      	b.n	84f72 <_realloc_r+0xe6>
   850ec:	6823      	ldr	r3, [r4, #0]
   850ee:	2a1b      	cmp	r2, #27
   850f0:	6003      	str	r3, [r0, #0]
   850f2:	6863      	ldr	r3, [r4, #4]
   850f4:	6043      	str	r3, [r0, #4]
   850f6:	d827      	bhi.n	85148 <_realloc_r+0x2bc>
   850f8:	f100 0308 	add.w	r3, r0, #8
   850fc:	f104 0208 	add.w	r2, r4, #8
   85100:	e70b      	b.n	84f1a <_realloc_r+0x8e>
   85102:	4620      	mov	r0, r4
   85104:	462a      	mov	r2, r5
   85106:	6801      	ldr	r1, [r0, #0]
   85108:	461f      	mov	r7, r3
   8510a:	6011      	str	r1, [r2, #0]
   8510c:	6841      	ldr	r1, [r0, #4]
   8510e:	46d1      	mov	r9, sl
   85110:	6051      	str	r1, [r2, #4]
   85112:	6883      	ldr	r3, [r0, #8]
   85114:	6093      	str	r3, [r2, #8]
   85116:	e719      	b.n	84f4c <_realloc_r+0xc0>
   85118:	ebab 0b06 	sub.w	fp, fp, r6
   8511c:	eb09 0106 	add.w	r1, r9, r6
   85120:	f04b 0201 	orr.w	r2, fp, #1
   85124:	6099      	str	r1, [r3, #8]
   85126:	604a      	str	r2, [r1, #4]
   85128:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8512c:	4640      	mov	r0, r8
   8512e:	f003 0301 	and.w	r3, r3, #1
   85132:	431e      	orrs	r6, r3
   85134:	f844 6c04 	str.w	r6, [r4, #-4]
   85138:	f7ff fea2 	bl	84e80 <__malloc_unlock>
   8513c:	4625      	mov	r5, r4
   8513e:	e718      	b.n	84f72 <_realloc_r+0xe6>
   85140:	4621      	mov	r1, r4
   85142:	f7ff fe33 	bl	84dac <memmove>
   85146:	e6ee      	b.n	84f26 <_realloc_r+0x9a>
   85148:	68a3      	ldr	r3, [r4, #8]
   8514a:	2a24      	cmp	r2, #36	; 0x24
   8514c:	6083      	str	r3, [r0, #8]
   8514e:	68e3      	ldr	r3, [r4, #12]
   85150:	60c3      	str	r3, [r0, #12]
   85152:	d018      	beq.n	85186 <_realloc_r+0x2fa>
   85154:	f100 0310 	add.w	r3, r0, #16
   85158:	f104 0210 	add.w	r2, r4, #16
   8515c:	e6dd      	b.n	84f1a <_realloc_r+0x8e>
   8515e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   85162:	4625      	mov	r5, r4
   85164:	f023 0303 	bic.w	r3, r3, #3
   85168:	441f      	add	r7, r3
   8516a:	e6ef      	b.n	84f4c <_realloc_r+0xc0>
   8516c:	68a1      	ldr	r1, [r4, #8]
   8516e:	2a24      	cmp	r2, #36	; 0x24
   85170:	f8ca 1010 	str.w	r1, [sl, #16]
   85174:	68e1      	ldr	r1, [r4, #12]
   85176:	f8ca 1014 	str.w	r1, [sl, #20]
   8517a:	d00d      	beq.n	85198 <_realloc_r+0x30c>
   8517c:	f104 0010 	add.w	r0, r4, #16
   85180:	f10a 0218 	add.w	r2, sl, #24
   85184:	e7bf      	b.n	85106 <_realloc_r+0x27a>
   85186:	6922      	ldr	r2, [r4, #16]
   85188:	f100 0318 	add.w	r3, r0, #24
   8518c:	6102      	str	r2, [r0, #16]
   8518e:	6961      	ldr	r1, [r4, #20]
   85190:	f104 0218 	add.w	r2, r4, #24
   85194:	6141      	str	r1, [r0, #20]
   85196:	e6c0      	b.n	84f1a <_realloc_r+0x8e>
   85198:	6922      	ldr	r2, [r4, #16]
   8519a:	f104 0018 	add.w	r0, r4, #24
   8519e:	f8ca 2018 	str.w	r2, [sl, #24]
   851a2:	6961      	ldr	r1, [r4, #20]
   851a4:	f10a 0220 	add.w	r2, sl, #32
   851a8:	f8ca 101c 	str.w	r1, [sl, #28]
   851ac:	e7ab      	b.n	85106 <_realloc_r+0x27a>
   851ae:	4621      	mov	r1, r4
   851b0:	462a      	mov	r2, r5
   851b2:	e782      	b.n	850ba <_realloc_r+0x22e>
   851b4:	4621      	mov	r1, r4
   851b6:	4628      	mov	r0, r5
   851b8:	9301      	str	r3, [sp, #4]
   851ba:	f7ff fdf7 	bl	84dac <memmove>
   851be:	9b01      	ldr	r3, [sp, #4]
   851c0:	e781      	b.n	850c6 <_realloc_r+0x23a>
   851c2:	68a1      	ldr	r1, [r4, #8]
   851c4:	2a24      	cmp	r2, #36	; 0x24
   851c6:	f8ca 1010 	str.w	r1, [sl, #16]
   851ca:	68e1      	ldr	r1, [r4, #12]
   851cc:	f8ca 1014 	str.w	r1, [sl, #20]
   851d0:	d006      	beq.n	851e0 <_realloc_r+0x354>
   851d2:	f104 0110 	add.w	r1, r4, #16
   851d6:	f10a 0218 	add.w	r2, sl, #24
   851da:	e76e      	b.n	850ba <_realloc_r+0x22e>
   851dc:	200706d8 	.word	0x200706d8
   851e0:	6922      	ldr	r2, [r4, #16]
   851e2:	f104 0118 	add.w	r1, r4, #24
   851e6:	f8ca 2018 	str.w	r2, [sl, #24]
   851ea:	6960      	ldr	r0, [r4, #20]
   851ec:	f10a 0220 	add.w	r2, sl, #32
   851f0:	f8ca 001c 	str.w	r0, [sl, #28]
   851f4:	e761      	b.n	850ba <_realloc_r+0x22e>
   851f6:	bf00      	nop

000851f8 <_sbrk_r>:
   851f8:	b538      	push	{r3, r4, r5, lr}
   851fa:	2300      	movs	r3, #0
   851fc:	4c06      	ldr	r4, [pc, #24]	; (85218 <_sbrk_r+0x20>)
   851fe:	4605      	mov	r5, r0
   85200:	4608      	mov	r0, r1
   85202:	6023      	str	r3, [r4, #0]
   85204:	f7fd fbf4 	bl	829f0 <_sbrk>
   85208:	1c43      	adds	r3, r0, #1
   8520a:	d000      	beq.n	8520e <_sbrk_r+0x16>
   8520c:	bd38      	pop	{r3, r4, r5, pc}
   8520e:	6823      	ldr	r3, [r4, #0]
   85210:	2b00      	cmp	r3, #0
   85212:	d0fb      	beq.n	8520c <_sbrk_r+0x14>
   85214:	602b      	str	r3, [r5, #0]
   85216:	bd38      	pop	{r3, r4, r5, pc}
   85218:	2007ada0 	.word	0x2007ada0

0008521c <__sread>:
   8521c:	b510      	push	{r4, lr}
   8521e:	460c      	mov	r4, r1
   85220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85224:	f000 f9f4 	bl	85610 <_read_r>
   85228:	2800      	cmp	r0, #0
   8522a:	db03      	blt.n	85234 <__sread+0x18>
   8522c:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8522e:	4403      	add	r3, r0
   85230:	6523      	str	r3, [r4, #80]	; 0x50
   85232:	bd10      	pop	{r4, pc}
   85234:	89a3      	ldrh	r3, [r4, #12]
   85236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8523a:	81a3      	strh	r3, [r4, #12]
   8523c:	bd10      	pop	{r4, pc}
   8523e:	bf00      	nop

00085240 <__swrite>:
   85240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85244:	460c      	mov	r4, r1
   85246:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8524a:	461f      	mov	r7, r3
   8524c:	05cb      	lsls	r3, r1, #23
   8524e:	4616      	mov	r6, r2
   85250:	4605      	mov	r5, r0
   85252:	d507      	bpl.n	85264 <__swrite+0x24>
   85254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85258:	2302      	movs	r3, #2
   8525a:	2200      	movs	r2, #0
   8525c:	f000 f9c2 	bl	855e4 <_lseek_r>
   85260:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   85264:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   85268:	81a1      	strh	r1, [r4, #12]
   8526a:	463b      	mov	r3, r7
   8526c:	4632      	mov	r2, r6
   8526e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   85272:	4628      	mov	r0, r5
   85274:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   85278:	f000 b8a2 	b.w	853c0 <_write_r>

0008527c <__sseek>:
   8527c:	b510      	push	{r4, lr}
   8527e:	460c      	mov	r4, r1
   85280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   85284:	f000 f9ae 	bl	855e4 <_lseek_r>
   85288:	89a3      	ldrh	r3, [r4, #12]
   8528a:	1c42      	adds	r2, r0, #1
   8528c:	bf0e      	itee	eq
   8528e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   85292:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   85296:	6520      	strne	r0, [r4, #80]	; 0x50
   85298:	81a3      	strh	r3, [r4, #12]
   8529a:	bd10      	pop	{r4, pc}

0008529c <__sclose>:
   8529c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   852a0:	f000 b906 	b.w	854b0 <_close_r>

000852a4 <__swbuf_r>:
   852a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   852a6:	460d      	mov	r5, r1
   852a8:	4614      	mov	r4, r2
   852aa:	4606      	mov	r6, r0
   852ac:	b110      	cbz	r0, 852b4 <__swbuf_r+0x10>
   852ae:	6b83      	ldr	r3, [r0, #56]	; 0x38
   852b0:	2b00      	cmp	r3, #0
   852b2:	d04b      	beq.n	8534c <__swbuf_r+0xa8>
   852b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   852b8:	69a3      	ldr	r3, [r4, #24]
   852ba:	b291      	uxth	r1, r2
   852bc:	0708      	lsls	r0, r1, #28
   852be:	60a3      	str	r3, [r4, #8]
   852c0:	d539      	bpl.n	85336 <__swbuf_r+0x92>
   852c2:	6923      	ldr	r3, [r4, #16]
   852c4:	2b00      	cmp	r3, #0
   852c6:	d036      	beq.n	85336 <__swbuf_r+0x92>
   852c8:	b2ed      	uxtb	r5, r5
   852ca:	0489      	lsls	r1, r1, #18
   852cc:	462f      	mov	r7, r5
   852ce:	d515      	bpl.n	852fc <__swbuf_r+0x58>
   852d0:	6822      	ldr	r2, [r4, #0]
   852d2:	6961      	ldr	r1, [r4, #20]
   852d4:	1ad3      	subs	r3, r2, r3
   852d6:	428b      	cmp	r3, r1
   852d8:	da1c      	bge.n	85314 <__swbuf_r+0x70>
   852da:	3301      	adds	r3, #1
   852dc:	68a1      	ldr	r1, [r4, #8]
   852de:	1c50      	adds	r0, r2, #1
   852e0:	3901      	subs	r1, #1
   852e2:	60a1      	str	r1, [r4, #8]
   852e4:	6020      	str	r0, [r4, #0]
   852e6:	7015      	strb	r5, [r2, #0]
   852e8:	6962      	ldr	r2, [r4, #20]
   852ea:	429a      	cmp	r2, r3
   852ec:	d01a      	beq.n	85324 <__swbuf_r+0x80>
   852ee:	89a3      	ldrh	r3, [r4, #12]
   852f0:	07db      	lsls	r3, r3, #31
   852f2:	d501      	bpl.n	852f8 <__swbuf_r+0x54>
   852f4:	2d0a      	cmp	r5, #10
   852f6:	d015      	beq.n	85324 <__swbuf_r+0x80>
   852f8:	4638      	mov	r0, r7
   852fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852fc:	6e61      	ldr	r1, [r4, #100]	; 0x64
   852fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85302:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   85306:	81a2      	strh	r2, [r4, #12]
   85308:	6822      	ldr	r2, [r4, #0]
   8530a:	6661      	str	r1, [r4, #100]	; 0x64
   8530c:	6961      	ldr	r1, [r4, #20]
   8530e:	1ad3      	subs	r3, r2, r3
   85310:	428b      	cmp	r3, r1
   85312:	dbe2      	blt.n	852da <__swbuf_r+0x36>
   85314:	4621      	mov	r1, r4
   85316:	4630      	mov	r0, r6
   85318:	f7fe fdae 	bl	83e78 <_fflush_r>
   8531c:	b940      	cbnz	r0, 85330 <__swbuf_r+0x8c>
   8531e:	2301      	movs	r3, #1
   85320:	6822      	ldr	r2, [r4, #0]
   85322:	e7db      	b.n	852dc <__swbuf_r+0x38>
   85324:	4621      	mov	r1, r4
   85326:	4630      	mov	r0, r6
   85328:	f7fe fda6 	bl	83e78 <_fflush_r>
   8532c:	2800      	cmp	r0, #0
   8532e:	d0e3      	beq.n	852f8 <__swbuf_r+0x54>
   85330:	f04f 37ff 	mov.w	r7, #4294967295
   85334:	e7e0      	b.n	852f8 <__swbuf_r+0x54>
   85336:	4621      	mov	r1, r4
   85338:	4630      	mov	r0, r6
   8533a:	f7fe fc8d 	bl	83c58 <__swsetup_r>
   8533e:	2800      	cmp	r0, #0
   85340:	d1f6      	bne.n	85330 <__swbuf_r+0x8c>
   85342:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   85346:	6923      	ldr	r3, [r4, #16]
   85348:	b291      	uxth	r1, r2
   8534a:	e7bd      	b.n	852c8 <__swbuf_r+0x24>
   8534c:	f7fe fdec 	bl	83f28 <__sinit>
   85350:	e7b0      	b.n	852b4 <__swbuf_r+0x10>
   85352:	bf00      	nop

00085354 <_wcrtomb_r>:
   85354:	b5f0      	push	{r4, r5, r6, r7, lr}
   85356:	4606      	mov	r6, r0
   85358:	b085      	sub	sp, #20
   8535a:	461f      	mov	r7, r3
   8535c:	b189      	cbz	r1, 85382 <_wcrtomb_r+0x2e>
   8535e:	4c10      	ldr	r4, [pc, #64]	; (853a0 <_wcrtomb_r+0x4c>)
   85360:	4d10      	ldr	r5, [pc, #64]	; (853a4 <_wcrtomb_r+0x50>)
   85362:	6824      	ldr	r4, [r4, #0]
   85364:	6b64      	ldr	r4, [r4, #52]	; 0x34
   85366:	2c00      	cmp	r4, #0
   85368:	bf08      	it	eq
   8536a:	462c      	moveq	r4, r5
   8536c:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   85370:	47a0      	blx	r4
   85372:	1c43      	adds	r3, r0, #1
   85374:	d103      	bne.n	8537e <_wcrtomb_r+0x2a>
   85376:	2200      	movs	r2, #0
   85378:	238a      	movs	r3, #138	; 0x8a
   8537a:	603a      	str	r2, [r7, #0]
   8537c:	6033      	str	r3, [r6, #0]
   8537e:	b005      	add	sp, #20
   85380:	bdf0      	pop	{r4, r5, r6, r7, pc}
   85382:	460c      	mov	r4, r1
   85384:	4a06      	ldr	r2, [pc, #24]	; (853a0 <_wcrtomb_r+0x4c>)
   85386:	4d07      	ldr	r5, [pc, #28]	; (853a4 <_wcrtomb_r+0x50>)
   85388:	6811      	ldr	r1, [r2, #0]
   8538a:	4622      	mov	r2, r4
   8538c:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8538e:	a901      	add	r1, sp, #4
   85390:	2c00      	cmp	r4, #0
   85392:	bf08      	it	eq
   85394:	462c      	moveq	r4, r5
   85396:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8539a:	47a0      	blx	r4
   8539c:	e7e9      	b.n	85372 <_wcrtomb_r+0x1e>
   8539e:	bf00      	nop
   853a0:	2007013c 	.word	0x2007013c
   853a4:	2007056c 	.word	0x2007056c

000853a8 <__ascii_wctomb>:
   853a8:	b119      	cbz	r1, 853b2 <__ascii_wctomb+0xa>
   853aa:	2aff      	cmp	r2, #255	; 0xff
   853ac:	d803      	bhi.n	853b6 <__ascii_wctomb+0xe>
   853ae:	700a      	strb	r2, [r1, #0]
   853b0:	2101      	movs	r1, #1
   853b2:	4608      	mov	r0, r1
   853b4:	4770      	bx	lr
   853b6:	238a      	movs	r3, #138	; 0x8a
   853b8:	f04f 31ff 	mov.w	r1, #4294967295
   853bc:	6003      	str	r3, [r0, #0]
   853be:	e7f8      	b.n	853b2 <__ascii_wctomb+0xa>

000853c0 <_write_r>:
   853c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   853c2:	460e      	mov	r6, r1
   853c4:	2500      	movs	r5, #0
   853c6:	4c08      	ldr	r4, [pc, #32]	; (853e8 <_write_r+0x28>)
   853c8:	4611      	mov	r1, r2
   853ca:	4607      	mov	r7, r0
   853cc:	461a      	mov	r2, r3
   853ce:	4630      	mov	r0, r6
   853d0:	6025      	str	r5, [r4, #0]
   853d2:	f7fb fa79 	bl	808c8 <_write>
   853d6:	1c43      	adds	r3, r0, #1
   853d8:	d000      	beq.n	853dc <_write_r+0x1c>
   853da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   853dc:	6823      	ldr	r3, [r4, #0]
   853de:	2b00      	cmp	r3, #0
   853e0:	d0fb      	beq.n	853da <_write_r+0x1a>
   853e2:	603b      	str	r3, [r7, #0]
   853e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   853e6:	bf00      	nop
   853e8:	2007ada0 	.word	0x2007ada0

000853ec <__register_exitproc>:
   853ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   853f0:	4d2c      	ldr	r5, [pc, #176]	; (854a4 <__register_exitproc+0xb8>)
   853f2:	4606      	mov	r6, r0
   853f4:	6828      	ldr	r0, [r5, #0]
   853f6:	4698      	mov	r8, r3
   853f8:	460f      	mov	r7, r1
   853fa:	4691      	mov	r9, r2
   853fc:	f7ff f954 	bl	846a8 <__retarget_lock_acquire_recursive>
   85400:	4b29      	ldr	r3, [pc, #164]	; (854a8 <__register_exitproc+0xbc>)
   85402:	681c      	ldr	r4, [r3, #0]
   85404:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   85408:	2b00      	cmp	r3, #0
   8540a:	d03e      	beq.n	8548a <__register_exitproc+0x9e>
   8540c:	685a      	ldr	r2, [r3, #4]
   8540e:	2a1f      	cmp	r2, #31
   85410:	dc1c      	bgt.n	8544c <__register_exitproc+0x60>
   85412:	f102 0e01 	add.w	lr, r2, #1
   85416:	b176      	cbz	r6, 85436 <__register_exitproc+0x4a>
   85418:	2101      	movs	r1, #1
   8541a:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8541e:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   85422:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   85426:	4091      	lsls	r1, r2
   85428:	4308      	orrs	r0, r1
   8542a:	2e02      	cmp	r6, #2
   8542c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85430:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   85434:	d023      	beq.n	8547e <__register_exitproc+0x92>
   85436:	3202      	adds	r2, #2
   85438:	f8c3 e004 	str.w	lr, [r3, #4]
   8543c:	6828      	ldr	r0, [r5, #0]
   8543e:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   85442:	f7ff f933 	bl	846ac <__retarget_lock_release_recursive>
   85446:	2000      	movs	r0, #0
   85448:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8544c:	4b17      	ldr	r3, [pc, #92]	; (854ac <__register_exitproc+0xc0>)
   8544e:	b30b      	cbz	r3, 85494 <__register_exitproc+0xa8>
   85450:	f44f 70c8 	mov.w	r0, #400	; 0x190
   85454:	f7ff f9a4 	bl	847a0 <malloc>
   85458:	4603      	mov	r3, r0
   8545a:	b1d8      	cbz	r0, 85494 <__register_exitproc+0xa8>
   8545c:	2000      	movs	r0, #0
   8545e:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   85462:	f04f 0e01 	mov.w	lr, #1
   85466:	6058      	str	r0, [r3, #4]
   85468:	6019      	str	r1, [r3, #0]
   8546a:	4602      	mov	r2, r0
   8546c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85470:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   85474:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   85478:	2e00      	cmp	r6, #0
   8547a:	d0dc      	beq.n	85436 <__register_exitproc+0x4a>
   8547c:	e7cc      	b.n	85418 <__register_exitproc+0x2c>
   8547e:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   85482:	4301      	orrs	r1, r0
   85484:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   85488:	e7d5      	b.n	85436 <__register_exitproc+0x4a>
   8548a:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8548e:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   85492:	e7bb      	b.n	8540c <__register_exitproc+0x20>
   85494:	6828      	ldr	r0, [r5, #0]
   85496:	f7ff f909 	bl	846ac <__retarget_lock_release_recursive>
   8549a:	f04f 30ff 	mov.w	r0, #4294967295
   8549e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   854a2:	bf00      	nop
   854a4:	20070568 	.word	0x20070568
   854a8:	00085c70 	.word	0x00085c70
   854ac:	000847a1 	.word	0x000847a1

000854b0 <_close_r>:
   854b0:	b538      	push	{r3, r4, r5, lr}
   854b2:	2300      	movs	r3, #0
   854b4:	4c06      	ldr	r4, [pc, #24]	; (854d0 <_close_r+0x20>)
   854b6:	4605      	mov	r5, r0
   854b8:	4608      	mov	r0, r1
   854ba:	6023      	str	r3, [r4, #0]
   854bc:	f7fd fab4 	bl	82a28 <_close>
   854c0:	1c43      	adds	r3, r0, #1
   854c2:	d000      	beq.n	854c6 <_close_r+0x16>
   854c4:	bd38      	pop	{r3, r4, r5, pc}
   854c6:	6823      	ldr	r3, [r4, #0]
   854c8:	2b00      	cmp	r3, #0
   854ca:	d0fb      	beq.n	854c4 <_close_r+0x14>
   854cc:	602b      	str	r3, [r5, #0]
   854ce:	bd38      	pop	{r3, r4, r5, pc}
   854d0:	2007ada0 	.word	0x2007ada0

000854d4 <_fclose_r>:
   854d4:	b570      	push	{r4, r5, r6, lr}
   854d6:	b159      	cbz	r1, 854f0 <_fclose_r+0x1c>
   854d8:	4605      	mov	r5, r0
   854da:	460c      	mov	r4, r1
   854dc:	b110      	cbz	r0, 854e4 <_fclose_r+0x10>
   854de:	6b83      	ldr	r3, [r0, #56]	; 0x38
   854e0:	2b00      	cmp	r3, #0
   854e2:	d03c      	beq.n	8555e <_fclose_r+0x8a>
   854e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   854e6:	07d8      	lsls	r0, r3, #31
   854e8:	d505      	bpl.n	854f6 <_fclose_r+0x22>
   854ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   854ee:	b92b      	cbnz	r3, 854fc <_fclose_r+0x28>
   854f0:	2600      	movs	r6, #0
   854f2:	4630      	mov	r0, r6
   854f4:	bd70      	pop	{r4, r5, r6, pc}
   854f6:	89a3      	ldrh	r3, [r4, #12]
   854f8:	0599      	lsls	r1, r3, #22
   854fa:	d53c      	bpl.n	85576 <_fclose_r+0xa2>
   854fc:	4621      	mov	r1, r4
   854fe:	4628      	mov	r0, r5
   85500:	f7fe fc1e 	bl	83d40 <__sflush_r>
   85504:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   85506:	4606      	mov	r6, r0
   85508:	b133      	cbz	r3, 85518 <_fclose_r+0x44>
   8550a:	69e1      	ldr	r1, [r4, #28]
   8550c:	4628      	mov	r0, r5
   8550e:	4798      	blx	r3
   85510:	2800      	cmp	r0, #0
   85512:	bfb8      	it	lt
   85514:	f04f 36ff 	movlt.w	r6, #4294967295
   85518:	89a3      	ldrh	r3, [r4, #12]
   8551a:	061a      	lsls	r2, r3, #24
   8551c:	d422      	bmi.n	85564 <_fclose_r+0x90>
   8551e:	6b21      	ldr	r1, [r4, #48]	; 0x30
   85520:	b141      	cbz	r1, 85534 <_fclose_r+0x60>
   85522:	f104 0340 	add.w	r3, r4, #64	; 0x40
   85526:	4299      	cmp	r1, r3
   85528:	d002      	beq.n	85530 <_fclose_r+0x5c>
   8552a:	4628      	mov	r0, r5
   8552c:	f7fe fe22 	bl	84174 <_free_r>
   85530:	2300      	movs	r3, #0
   85532:	6323      	str	r3, [r4, #48]	; 0x30
   85534:	6c61      	ldr	r1, [r4, #68]	; 0x44
   85536:	b121      	cbz	r1, 85542 <_fclose_r+0x6e>
   85538:	4628      	mov	r0, r5
   8553a:	f7fe fe1b 	bl	84174 <_free_r>
   8553e:	2300      	movs	r3, #0
   85540:	6463      	str	r3, [r4, #68]	; 0x44
   85542:	f7fe fd21 	bl	83f88 <__sfp_lock_acquire>
   85546:	2200      	movs	r2, #0
   85548:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8554a:	81a2      	strh	r2, [r4, #12]
   8554c:	07db      	lsls	r3, r3, #31
   8554e:	d50e      	bpl.n	8556e <_fclose_r+0x9a>
   85550:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85552:	f7ff f8a7 	bl	846a4 <__retarget_lock_close_recursive>
   85556:	f7fe fd1d 	bl	83f94 <__sfp_lock_release>
   8555a:	4630      	mov	r0, r6
   8555c:	bd70      	pop	{r4, r5, r6, pc}
   8555e:	f7fe fce3 	bl	83f28 <__sinit>
   85562:	e7bf      	b.n	854e4 <_fclose_r+0x10>
   85564:	6921      	ldr	r1, [r4, #16]
   85566:	4628      	mov	r0, r5
   85568:	f7fe fe04 	bl	84174 <_free_r>
   8556c:	e7d7      	b.n	8551e <_fclose_r+0x4a>
   8556e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85570:	f7ff f89c 	bl	846ac <__retarget_lock_release_recursive>
   85574:	e7ec      	b.n	85550 <_fclose_r+0x7c>
   85576:	6da0      	ldr	r0, [r4, #88]	; 0x58
   85578:	f7ff f896 	bl	846a8 <__retarget_lock_acquire_recursive>
   8557c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   85580:	2b00      	cmp	r3, #0
   85582:	d1bb      	bne.n	854fc <_fclose_r+0x28>
   85584:	6e66      	ldr	r6, [r4, #100]	; 0x64
   85586:	f016 0601 	ands.w	r6, r6, #1
   8558a:	d1b1      	bne.n	854f0 <_fclose_r+0x1c>
   8558c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8558e:	f7ff f88d 	bl	846ac <__retarget_lock_release_recursive>
   85592:	4630      	mov	r0, r6
   85594:	bd70      	pop	{r4, r5, r6, pc}
   85596:	bf00      	nop

00085598 <_fstat_r>:
   85598:	b570      	push	{r4, r5, r6, lr}
   8559a:	460d      	mov	r5, r1
   8559c:	2300      	movs	r3, #0
   8559e:	4c07      	ldr	r4, [pc, #28]	; (855bc <_fstat_r+0x24>)
   855a0:	4606      	mov	r6, r0
   855a2:	4611      	mov	r1, r2
   855a4:	4628      	mov	r0, r5
   855a6:	6023      	str	r3, [r4, #0]
   855a8:	f7fd fa41 	bl	82a2e <_fstat>
   855ac:	1c43      	adds	r3, r0, #1
   855ae:	d000      	beq.n	855b2 <_fstat_r+0x1a>
   855b0:	bd70      	pop	{r4, r5, r6, pc}
   855b2:	6823      	ldr	r3, [r4, #0]
   855b4:	2b00      	cmp	r3, #0
   855b6:	d0fb      	beq.n	855b0 <_fstat_r+0x18>
   855b8:	6033      	str	r3, [r6, #0]
   855ba:	bd70      	pop	{r4, r5, r6, pc}
   855bc:	2007ada0 	.word	0x2007ada0

000855c0 <_isatty_r>:
   855c0:	b538      	push	{r3, r4, r5, lr}
   855c2:	2300      	movs	r3, #0
   855c4:	4c06      	ldr	r4, [pc, #24]	; (855e0 <_isatty_r+0x20>)
   855c6:	4605      	mov	r5, r0
   855c8:	4608      	mov	r0, r1
   855ca:	6023      	str	r3, [r4, #0]
   855cc:	f7fd fa34 	bl	82a38 <_isatty>
   855d0:	1c43      	adds	r3, r0, #1
   855d2:	d000      	beq.n	855d6 <_isatty_r+0x16>
   855d4:	bd38      	pop	{r3, r4, r5, pc}
   855d6:	6823      	ldr	r3, [r4, #0]
   855d8:	2b00      	cmp	r3, #0
   855da:	d0fb      	beq.n	855d4 <_isatty_r+0x14>
   855dc:	602b      	str	r3, [r5, #0]
   855de:	bd38      	pop	{r3, r4, r5, pc}
   855e0:	2007ada0 	.word	0x2007ada0

000855e4 <_lseek_r>:
   855e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   855e6:	460e      	mov	r6, r1
   855e8:	2500      	movs	r5, #0
   855ea:	4c08      	ldr	r4, [pc, #32]	; (8560c <_lseek_r+0x28>)
   855ec:	4611      	mov	r1, r2
   855ee:	4607      	mov	r7, r0
   855f0:	461a      	mov	r2, r3
   855f2:	4630      	mov	r0, r6
   855f4:	6025      	str	r5, [r4, #0]
   855f6:	f7fd fa21 	bl	82a3c <_lseek>
   855fa:	1c43      	adds	r3, r0, #1
   855fc:	d000      	beq.n	85600 <_lseek_r+0x1c>
   855fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85600:	6823      	ldr	r3, [r4, #0]
   85602:	2b00      	cmp	r3, #0
   85604:	d0fb      	beq.n	855fe <_lseek_r+0x1a>
   85606:	603b      	str	r3, [r7, #0]
   85608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8560a:	bf00      	nop
   8560c:	2007ada0 	.word	0x2007ada0

00085610 <_read_r>:
   85610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85612:	460e      	mov	r6, r1
   85614:	2500      	movs	r5, #0
   85616:	4c08      	ldr	r4, [pc, #32]	; (85638 <_read_r+0x28>)
   85618:	4611      	mov	r1, r2
   8561a:	4607      	mov	r7, r0
   8561c:	461a      	mov	r2, r3
   8561e:	4630      	mov	r0, r6
   85620:	6025      	str	r5, [r4, #0]
   85622:	f7fb f933 	bl	8088c <_read>
   85626:	1c43      	adds	r3, r0, #1
   85628:	d000      	beq.n	8562c <_read_r+0x1c>
   8562a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8562c:	6823      	ldr	r3, [r4, #0]
   8562e:	2b00      	cmp	r3, #0
   85630:	d0fb      	beq.n	8562a <_read_r+0x1a>
   85632:	603b      	str	r3, [r7, #0]
   85634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85636:	bf00      	nop
   85638:	2007ada0 	.word	0x2007ada0

0008563c <__aeabi_uldivmod>:
   8563c:	b953      	cbnz	r3, 85654 <__aeabi_uldivmod+0x18>
   8563e:	b94a      	cbnz	r2, 85654 <__aeabi_uldivmod+0x18>
   85640:	2900      	cmp	r1, #0
   85642:	bf08      	it	eq
   85644:	2800      	cmpeq	r0, #0
   85646:	bf1c      	itt	ne
   85648:	f04f 31ff 	movne.w	r1, #4294967295
   8564c:	f04f 30ff 	movne.w	r0, #4294967295
   85650:	f000 b97a 	b.w	85948 <__aeabi_idiv0>
   85654:	f1ad 0c08 	sub.w	ip, sp, #8
   85658:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8565c:	f000 f806 	bl	8566c <__udivmoddi4>
   85660:	f8dd e004 	ldr.w	lr, [sp, #4]
   85664:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   85668:	b004      	add	sp, #16
   8566a:	4770      	bx	lr

0008566c <__udivmoddi4>:
   8566c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   85670:	468c      	mov	ip, r1
   85672:	460e      	mov	r6, r1
   85674:	4604      	mov	r4, r0
   85676:	9d08      	ldr	r5, [sp, #32]
   85678:	2b00      	cmp	r3, #0
   8567a:	d150      	bne.n	8571e <__udivmoddi4+0xb2>
   8567c:	428a      	cmp	r2, r1
   8567e:	4617      	mov	r7, r2
   85680:	d96c      	bls.n	8575c <__udivmoddi4+0xf0>
   85682:	fab2 fe82 	clz	lr, r2
   85686:	f1be 0f00 	cmp.w	lr, #0
   8568a:	d00b      	beq.n	856a4 <__udivmoddi4+0x38>
   8568c:	f1ce 0c20 	rsb	ip, lr, #32
   85690:	fa01 f60e 	lsl.w	r6, r1, lr
   85694:	fa20 fc0c 	lsr.w	ip, r0, ip
   85698:	fa02 f70e 	lsl.w	r7, r2, lr
   8569c:	ea4c 0c06 	orr.w	ip, ip, r6
   856a0:	fa00 f40e 	lsl.w	r4, r0, lr
   856a4:	0c3a      	lsrs	r2, r7, #16
   856a6:	fbbc f9f2 	udiv	r9, ip, r2
   856aa:	b2bb      	uxth	r3, r7
   856ac:	fb02 cc19 	mls	ip, r2, r9, ip
   856b0:	fb09 fa03 	mul.w	sl, r9, r3
   856b4:	ea4f 4814 	mov.w	r8, r4, lsr #16
   856b8:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   856bc:	45b2      	cmp	sl, r6
   856be:	d90a      	bls.n	856d6 <__udivmoddi4+0x6a>
   856c0:	19f6      	adds	r6, r6, r7
   856c2:	f109 31ff 	add.w	r1, r9, #4294967295
   856c6:	f080 8125 	bcs.w	85914 <__udivmoddi4+0x2a8>
   856ca:	45b2      	cmp	sl, r6
   856cc:	f240 8122 	bls.w	85914 <__udivmoddi4+0x2a8>
   856d0:	f1a9 0902 	sub.w	r9, r9, #2
   856d4:	443e      	add	r6, r7
   856d6:	eba6 060a 	sub.w	r6, r6, sl
   856da:	fbb6 f0f2 	udiv	r0, r6, r2
   856de:	fb02 6610 	mls	r6, r2, r0, r6
   856e2:	fb00 f303 	mul.w	r3, r0, r3
   856e6:	b2a4      	uxth	r4, r4
   856e8:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   856ec:	42a3      	cmp	r3, r4
   856ee:	d909      	bls.n	85704 <__udivmoddi4+0x98>
   856f0:	19e4      	adds	r4, r4, r7
   856f2:	f100 32ff 	add.w	r2, r0, #4294967295
   856f6:	f080 810b 	bcs.w	85910 <__udivmoddi4+0x2a4>
   856fa:	42a3      	cmp	r3, r4
   856fc:	f240 8108 	bls.w	85910 <__udivmoddi4+0x2a4>
   85700:	3802      	subs	r0, #2
   85702:	443c      	add	r4, r7
   85704:	2100      	movs	r1, #0
   85706:	1ae4      	subs	r4, r4, r3
   85708:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8570c:	2d00      	cmp	r5, #0
   8570e:	d062      	beq.n	857d6 <__udivmoddi4+0x16a>
   85710:	2300      	movs	r3, #0
   85712:	fa24 f40e 	lsr.w	r4, r4, lr
   85716:	602c      	str	r4, [r5, #0]
   85718:	606b      	str	r3, [r5, #4]
   8571a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8571e:	428b      	cmp	r3, r1
   85720:	d907      	bls.n	85732 <__udivmoddi4+0xc6>
   85722:	2d00      	cmp	r5, #0
   85724:	d055      	beq.n	857d2 <__udivmoddi4+0x166>
   85726:	2100      	movs	r1, #0
   85728:	e885 0041 	stmia.w	r5, {r0, r6}
   8572c:	4608      	mov	r0, r1
   8572e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85732:	fab3 f183 	clz	r1, r3
   85736:	2900      	cmp	r1, #0
   85738:	f040 808f 	bne.w	8585a <__udivmoddi4+0x1ee>
   8573c:	42b3      	cmp	r3, r6
   8573e:	d302      	bcc.n	85746 <__udivmoddi4+0xda>
   85740:	4282      	cmp	r2, r0
   85742:	f200 80fc 	bhi.w	8593e <__udivmoddi4+0x2d2>
   85746:	1a84      	subs	r4, r0, r2
   85748:	eb66 0603 	sbc.w	r6, r6, r3
   8574c:	2001      	movs	r0, #1
   8574e:	46b4      	mov	ip, r6
   85750:	2d00      	cmp	r5, #0
   85752:	d040      	beq.n	857d6 <__udivmoddi4+0x16a>
   85754:	e885 1010 	stmia.w	r5, {r4, ip}
   85758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8575c:	b912      	cbnz	r2, 85764 <__udivmoddi4+0xf8>
   8575e:	2701      	movs	r7, #1
   85760:	fbb7 f7f2 	udiv	r7, r7, r2
   85764:	fab7 fe87 	clz	lr, r7
   85768:	f1be 0f00 	cmp.w	lr, #0
   8576c:	d135      	bne.n	857da <__udivmoddi4+0x16e>
   8576e:	2101      	movs	r1, #1
   85770:	1bf6      	subs	r6, r6, r7
   85772:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   85776:	fa1f f887 	uxth.w	r8, r7
   8577a:	fbb6 f2fc 	udiv	r2, r6, ip
   8577e:	fb0c 6612 	mls	r6, ip, r2, r6
   85782:	fb08 f002 	mul.w	r0, r8, r2
   85786:	0c23      	lsrs	r3, r4, #16
   85788:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   8578c:	42b0      	cmp	r0, r6
   8578e:	d907      	bls.n	857a0 <__udivmoddi4+0x134>
   85790:	19f6      	adds	r6, r6, r7
   85792:	f102 33ff 	add.w	r3, r2, #4294967295
   85796:	d202      	bcs.n	8579e <__udivmoddi4+0x132>
   85798:	42b0      	cmp	r0, r6
   8579a:	f200 80d2 	bhi.w	85942 <__udivmoddi4+0x2d6>
   8579e:	461a      	mov	r2, r3
   857a0:	1a36      	subs	r6, r6, r0
   857a2:	fbb6 f0fc 	udiv	r0, r6, ip
   857a6:	fb0c 6610 	mls	r6, ip, r0, r6
   857aa:	fb08 f800 	mul.w	r8, r8, r0
   857ae:	b2a3      	uxth	r3, r4
   857b0:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   857b4:	45a0      	cmp	r8, r4
   857b6:	d907      	bls.n	857c8 <__udivmoddi4+0x15c>
   857b8:	19e4      	adds	r4, r4, r7
   857ba:	f100 33ff 	add.w	r3, r0, #4294967295
   857be:	d202      	bcs.n	857c6 <__udivmoddi4+0x15a>
   857c0:	45a0      	cmp	r8, r4
   857c2:	f200 80b9 	bhi.w	85938 <__udivmoddi4+0x2cc>
   857c6:	4618      	mov	r0, r3
   857c8:	eba4 0408 	sub.w	r4, r4, r8
   857cc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   857d0:	e79c      	b.n	8570c <__udivmoddi4+0xa0>
   857d2:	4629      	mov	r1, r5
   857d4:	4628      	mov	r0, r5
   857d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   857da:	fa07 f70e 	lsl.w	r7, r7, lr
   857de:	f1ce 0320 	rsb	r3, lr, #32
   857e2:	fa26 f203 	lsr.w	r2, r6, r3
   857e6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   857ea:	fbb2 f1fc 	udiv	r1, r2, ip
   857ee:	fa1f f887 	uxth.w	r8, r7
   857f2:	fb0c 2211 	mls	r2, ip, r1, r2
   857f6:	fa06 f60e 	lsl.w	r6, r6, lr
   857fa:	fa20 f303 	lsr.w	r3, r0, r3
   857fe:	fb01 f908 	mul.w	r9, r1, r8
   85802:	4333      	orrs	r3, r6
   85804:	0c1e      	lsrs	r6, r3, #16
   85806:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8580a:	45b1      	cmp	r9, r6
   8580c:	fa00 f40e 	lsl.w	r4, r0, lr
   85810:	d909      	bls.n	85826 <__udivmoddi4+0x1ba>
   85812:	19f6      	adds	r6, r6, r7
   85814:	f101 32ff 	add.w	r2, r1, #4294967295
   85818:	f080 808c 	bcs.w	85934 <__udivmoddi4+0x2c8>
   8581c:	45b1      	cmp	r9, r6
   8581e:	f240 8089 	bls.w	85934 <__udivmoddi4+0x2c8>
   85822:	3902      	subs	r1, #2
   85824:	443e      	add	r6, r7
   85826:	eba6 0609 	sub.w	r6, r6, r9
   8582a:	fbb6 f0fc 	udiv	r0, r6, ip
   8582e:	fb0c 6210 	mls	r2, ip, r0, r6
   85832:	fb00 f908 	mul.w	r9, r0, r8
   85836:	b29e      	uxth	r6, r3
   85838:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   8583c:	45b1      	cmp	r9, r6
   8583e:	d907      	bls.n	85850 <__udivmoddi4+0x1e4>
   85840:	19f6      	adds	r6, r6, r7
   85842:	f100 33ff 	add.w	r3, r0, #4294967295
   85846:	d271      	bcs.n	8592c <__udivmoddi4+0x2c0>
   85848:	45b1      	cmp	r9, r6
   8584a:	d96f      	bls.n	8592c <__udivmoddi4+0x2c0>
   8584c:	3802      	subs	r0, #2
   8584e:	443e      	add	r6, r7
   85850:	eba6 0609 	sub.w	r6, r6, r9
   85854:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   85858:	e78f      	b.n	8577a <__udivmoddi4+0x10e>
   8585a:	f1c1 0720 	rsb	r7, r1, #32
   8585e:	fa22 f807 	lsr.w	r8, r2, r7
   85862:	408b      	lsls	r3, r1
   85864:	ea48 0303 	orr.w	r3, r8, r3
   85868:	fa26 f407 	lsr.w	r4, r6, r7
   8586c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   85870:	fbb4 f9fe 	udiv	r9, r4, lr
   85874:	fa1f fc83 	uxth.w	ip, r3
   85878:	fb0e 4419 	mls	r4, lr, r9, r4
   8587c:	408e      	lsls	r6, r1
   8587e:	fa20 f807 	lsr.w	r8, r0, r7
   85882:	fb09 fa0c 	mul.w	sl, r9, ip
   85886:	ea48 0806 	orr.w	r8, r8, r6
   8588a:	ea4f 4618 	mov.w	r6, r8, lsr #16
   8588e:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   85892:	45a2      	cmp	sl, r4
   85894:	fa02 f201 	lsl.w	r2, r2, r1
   85898:	fa00 f601 	lsl.w	r6, r0, r1
   8589c:	d908      	bls.n	858b0 <__udivmoddi4+0x244>
   8589e:	18e4      	adds	r4, r4, r3
   858a0:	f109 30ff 	add.w	r0, r9, #4294967295
   858a4:	d244      	bcs.n	85930 <__udivmoddi4+0x2c4>
   858a6:	45a2      	cmp	sl, r4
   858a8:	d942      	bls.n	85930 <__udivmoddi4+0x2c4>
   858aa:	f1a9 0902 	sub.w	r9, r9, #2
   858ae:	441c      	add	r4, r3
   858b0:	eba4 040a 	sub.w	r4, r4, sl
   858b4:	fbb4 f0fe 	udiv	r0, r4, lr
   858b8:	fb0e 4410 	mls	r4, lr, r0, r4
   858bc:	fb00 fc0c 	mul.w	ip, r0, ip
   858c0:	fa1f f888 	uxth.w	r8, r8
   858c4:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   858c8:	45a4      	cmp	ip, r4
   858ca:	d907      	bls.n	858dc <__udivmoddi4+0x270>
   858cc:	18e4      	adds	r4, r4, r3
   858ce:	f100 3eff 	add.w	lr, r0, #4294967295
   858d2:	d229      	bcs.n	85928 <__udivmoddi4+0x2bc>
   858d4:	45a4      	cmp	ip, r4
   858d6:	d927      	bls.n	85928 <__udivmoddi4+0x2bc>
   858d8:	3802      	subs	r0, #2
   858da:	441c      	add	r4, r3
   858dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   858e0:	fba0 8902 	umull	r8, r9, r0, r2
   858e4:	eba4 0c0c 	sub.w	ip, r4, ip
   858e8:	45cc      	cmp	ip, r9
   858ea:	46c2      	mov	sl, r8
   858ec:	46ce      	mov	lr, r9
   858ee:	d315      	bcc.n	8591c <__udivmoddi4+0x2b0>
   858f0:	d012      	beq.n	85918 <__udivmoddi4+0x2ac>
   858f2:	b155      	cbz	r5, 8590a <__udivmoddi4+0x29e>
   858f4:	ebb6 030a 	subs.w	r3, r6, sl
   858f8:	eb6c 060e 	sbc.w	r6, ip, lr
   858fc:	fa06 f707 	lsl.w	r7, r6, r7
   85900:	40cb      	lsrs	r3, r1
   85902:	431f      	orrs	r7, r3
   85904:	40ce      	lsrs	r6, r1
   85906:	602f      	str	r7, [r5, #0]
   85908:	606e      	str	r6, [r5, #4]
   8590a:	2100      	movs	r1, #0
   8590c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   85910:	4610      	mov	r0, r2
   85912:	e6f7      	b.n	85704 <__udivmoddi4+0x98>
   85914:	4689      	mov	r9, r1
   85916:	e6de      	b.n	856d6 <__udivmoddi4+0x6a>
   85918:	4546      	cmp	r6, r8
   8591a:	d2ea      	bcs.n	858f2 <__udivmoddi4+0x286>
   8591c:	ebb8 0a02 	subs.w	sl, r8, r2
   85920:	eb69 0e03 	sbc.w	lr, r9, r3
   85924:	3801      	subs	r0, #1
   85926:	e7e4      	b.n	858f2 <__udivmoddi4+0x286>
   85928:	4670      	mov	r0, lr
   8592a:	e7d7      	b.n	858dc <__udivmoddi4+0x270>
   8592c:	4618      	mov	r0, r3
   8592e:	e78f      	b.n	85850 <__udivmoddi4+0x1e4>
   85930:	4681      	mov	r9, r0
   85932:	e7bd      	b.n	858b0 <__udivmoddi4+0x244>
   85934:	4611      	mov	r1, r2
   85936:	e776      	b.n	85826 <__udivmoddi4+0x1ba>
   85938:	3802      	subs	r0, #2
   8593a:	443c      	add	r4, r7
   8593c:	e744      	b.n	857c8 <__udivmoddi4+0x15c>
   8593e:	4608      	mov	r0, r1
   85940:	e706      	b.n	85750 <__udivmoddi4+0xe4>
   85942:	3a02      	subs	r2, #2
   85944:	443e      	add	r6, r7
   85946:	e72b      	b.n	857a0 <__udivmoddi4+0x134>

00085948 <__aeabi_idiv0>:
   85948:	4770      	bx	lr
   8594a:	bf00      	nop
   8594c:	00000001 	.word	0x00000001
   85950:	00000002 	.word	0x00000002
   85954:	00000004 	.word	0x00000004
   85958:	00000008 	.word	0x00000008
   8595c:	00000010 	.word	0x00000010
   85960:	00000020 	.word	0x00000020
   85964:	00000040 	.word	0x00000040
   85968:	00000080 	.word	0x00000080
   8596c:	00000100 	.word	0x00000100
   85970:	00000200 	.word	0x00000200
   85974:	00000400 	.word	0x00000400
   85978:	7466654c 	.word	0x7466654c
   8597c:	736c7550 	.word	0x736c7550
   85980:	3a207365 	.word	0x3a207365
   85984:	5b232320 	.word	0x5b232320
   85988:	235d6925 	.word	0x235d6925
   8598c:	00000a23 	.word	0x00000a23
   85990:	68676952 	.word	0x68676952
   85994:	6c755074 	.word	0x6c755074
   85998:	20736573 	.word	0x20736573
   8599c:	2323203a 	.word	0x2323203a
   859a0:	5d69255b 	.word	0x5d69255b
   859a4:	000a2323 	.word	0x000a2323
   859a8:	4f525245 	.word	0x4f525245
   859ac:	6e203a52 	.word	0x6e203a52
   859b0:	6964206f 	.word	0x6964206f
   859b4:	74636572 	.word	0x74636572
   859b8:	206e6f69 	.word	0x206e6f69
   859bc:	6c756f63 	.word	0x6c756f63
   859c0:	65622064 	.word	0x65622064
   859c4:	74656620 	.word	0x74656620
   859c8:	64656863 	.word	0x64656863
   859cc:	6f726620 	.word	0x6f726620
   859d0:	6874206d 	.word	0x6874206d
   859d4:	656c2065 	.word	0x656c2065
   859d8:	6d207466 	.word	0x6d207466
   859dc:	726f746f 	.word	0x726f746f
   859e0:	74756220 	.word	0x74756220
   859e4:	6c757020 	.word	0x6c757020
   859e8:	77206573 	.word	0x77206573
   859ec:	73207361 	.word	0x73207361
   859f0:	6c6c6974 	.word	0x6c6c6974
   859f4:	69727420 	.word	0x69727420
   859f8:	72656767 	.word	0x72656767
   859fc:	202e6465 	.word	0x202e6465
   85a00:	6f636e45 	.word	0x6f636e45
   85a04:	20726564 	.word	0x20726564
   85a08:	736c7570 	.word	0x736c7570
   85a0c:	61642065 	.word	0x61642065
   85a10:	77206174 	.word	0x77206174
   85a14:	206c6c69 	.word	0x206c6c69
   85a18:	75206562 	.word	0x75206562
   85a1c:	6c65726e 	.word	0x6c65726e
   85a20:	6c626169 	.word	0x6c626169
   85a24:	000a2e65 	.word	0x000a2e65
   85a28:	65736552 	.word	0x65736552
   85a2c:	676e6974 	.word	0x676e6974
   85a30:	6c757020 	.word	0x6c757020
   85a34:	63206573 	.word	0x63206573
   85a38:	746e756f 	.word	0x746e756f
   85a3c:	3a737265 	.word	0x3a737265
   85a40:	654c200a 	.word	0x654c200a
   85a44:	75507466 	.word	0x75507466
   85a48:	7365736c 	.word	0x7365736c
   85a4c:	203a4120 	.word	0x203a4120
   85a50:	0a692523 	.word	0x0a692523
   85a54:	66654c20 	.word	0x66654c20
   85a58:	6c755074 	.word	0x6c755074
   85a5c:	20736573 	.word	0x20736573
   85a60:	23203a42 	.word	0x23203a42
   85a64:	200a6925 	.word	0x200a6925
   85a68:	68676952 	.word	0x68676952
   85a6c:	6c755074 	.word	0x6c755074
   85a70:	20736573 	.word	0x20736573
   85a74:	23203a41 	.word	0x23203a41
   85a78:	200a6925 	.word	0x200a6925
   85a7c:	68676952 	.word	0x68676952
   85a80:	6c755074 	.word	0x6c755074
   85a84:	20736573 	.word	0x20736573
   85a88:	23203a42 	.word	0x23203a42
   85a8c:	000a6925 	.word	0x000a6925
   85a90:	4f525245 	.word	0x4f525245
   85a94:	6e203a52 	.word	0x6e203a52
   85a98:	6964206f 	.word	0x6964206f
   85a9c:	74636572 	.word	0x74636572
   85aa0:	206e6f69 	.word	0x206e6f69
   85aa4:	6c756f63 	.word	0x6c756f63
   85aa8:	65622064 	.word	0x65622064
   85aac:	74656620 	.word	0x74656620
   85ab0:	64656863 	.word	0x64656863
   85ab4:	6f726620 	.word	0x6f726620
   85ab8:	6874206d 	.word	0x6874206d
   85abc:	69722065 	.word	0x69722065
   85ac0:	20746867 	.word	0x20746867
   85ac4:	6f746f6d 	.word	0x6f746f6d
   85ac8:	75622072 	.word	0x75622072
   85acc:	75702074 	.word	0x75702074
   85ad0:	2065736c 	.word	0x2065736c
   85ad4:	20736177 	.word	0x20736177
   85ad8:	6c697473 	.word	0x6c697473
   85adc:	7274206c 	.word	0x7274206c
   85ae0:	65676769 	.word	0x65676769
   85ae4:	2e646572 	.word	0x2e646572
   85ae8:	636e4520 	.word	0x636e4520
   85aec:	7265646f 	.word	0x7265646f
   85af0:	6c757020 	.word	0x6c757020
   85af4:	64206573 	.word	0x64206573
   85af8:	20617461 	.word	0x20617461
   85afc:	6c6c6977 	.word	0x6c6c6977
   85b00:	20656220 	.word	0x20656220
   85b04:	65726e75 	.word	0x65726e75
   85b08:	6261696c 	.word	0x6261696c
   85b0c:	0a2e656c 	.word	0x0a2e656c
   85b10:	00000000 	.word	0x00000000
   85b14:	20746553 	.word	0x20746553
   85b18:	65726944 	.word	0x65726944
   85b1c:	6f697463 	.word	0x6f697463
   85b20:	6f66206e 	.word	0x6f66206e
   85b24:	654c2072 	.word	0x654c2072
   85b28:	4d207466 	.word	0x4d207466
   85b2c:	726f746f 	.word	0x726f746f
   85b30:	3a736920 	.word	0x3a736920
   85b34:	0a692520 	.word	0x0a692520
   85b38:	00000000 	.word	0x00000000
   85b3c:	20746553 	.word	0x20746553
   85b40:	65726944 	.word	0x65726944
   85b44:	6f697463 	.word	0x6f697463
   85b48:	6f66206e 	.word	0x6f66206e
   85b4c:	69522072 	.word	0x69522072
   85b50:	20746867 	.word	0x20746867
   85b54:	6f746f4d 	.word	0x6f746f4d
   85b58:	73692072 	.word	0x73692072
   85b5c:	6925203a 	.word	0x6925203a
   85b60:	0000000a 	.word	0x0000000a
   85b64:	736e6f43 	.word	0x736e6f43
   85b68:	20656c6f 	.word	0x20656c6f
   85b6c:	64616572 	.word	0x64616572
   85b70:	00000a79 	.word	0x00000a79
   85b74:	3d3d3d3d 	.word	0x3d3d3d3d
   85b78:	3d3d3d3d 	.word	0x3d3d3d3d
   85b7c:	3d3d3d3d 	.word	0x3d3d3d3d
   85b80:	00000a3d 	.word	0x00000a3d
   85b84:	6b736174 	.word	0x6b736174
   85b88:	00000031 	.word	0x00000031
   85b8c:	74736554 	.word	0x74736554
   85b90:	20692523 	.word	0x20692523
   85b94:	65657073 	.word	0x65657073
   85b98:	69253a64 	.word	0x69253a64
   85b9c:	20736920 	.word	0x20736920
   85ba0:	72617473 	.word	0x72617473
   85ba4:	6e696e74 	.word	0x6e696e74
   85ba8:	2e2e2e67 	.word	0x2e2e2e67
   85bac:	0000000a 	.word	0x0000000a
   85bb0:	2d2d2d2d 	.word	0x2d2d2d2d
   85bb4:	000a2d2d 	.word	0x000a2d2d
   85bb8:	74736554 	.word	0x74736554
   85bbc:	20692523 	.word	0x20692523
   85bc0:	65657073 	.word	0x65657073
   85bc4:	69253a64 	.word	0x69253a64
   85bc8:	20736920 	.word	0x20736920
   85bcc:	69646e65 	.word	0x69646e65
   85bd0:	2e2e676e 	.word	0x2e2e676e
   85bd4:	00000a2e 	.word	0x00000a2e
   85bd8:	206c6c41 	.word	0x206c6c41
   85bdc:	74736574 	.word	0x74736574
   85be0:	61682073 	.word	0x61682073
   85be4:	62206576 	.word	0x62206576
   85be8:	206e6565 	.word	0x206e6565
   85bec:	206e7572 	.word	0x206e7572
   85bf0:	6f726874 	.word	0x6f726874
   85bf4:	2e686775 	.word	0x2e686775
   85bf8:	000a2e2e 	.word	0x000a2e2e
   85bfc:	6e697270 	.word	0x6e697270
   85c00:	676e6974 	.word	0x676e6974
   85c04:	65687420 	.word	0x65687420
   85c08:	73657220 	.word	0x73657220
   85c0c:	73746c75 	.word	0x73746c75
   85c10:	00000a3a 	.word	0x00000a3a
   85c14:	72617453 	.word	0x72617453
   85c18:	666f2074 	.word	0x666f2074
   85c1c:	73657220 	.word	0x73657220
   85c20:	73746c75 	.word	0x73746c75
   85c24:	0000000a 	.word	0x0000000a
   85c28:	45454857 	.word	0x45454857
   85c2c:	454c204c 	.word	0x454c204c
   85c30:	0a3a5446 	.word	0x0a3a5446
   85c34:	00000000 	.word	0x00000000
   85c38:	20692520 	.word	0x20692520
   85c3c:	00000000 	.word	0x00000000
   85c40:	45454857 	.word	0x45454857
   85c44:	4952204c 	.word	0x4952204c
   85c48:	3a544847 	.word	0x3a544847
   85c4c:	0000000a 	.word	0x0000000a
   85c50:	20646e45 	.word	0x20646e45
   85c54:	7220666f 	.word	0x7220666f
   85c58:	6c757365 	.word	0x6c757365
   85c5c:	000a7374 	.word	0x000a7374
   85c60:	454c4449 	.word	0x454c4449
   85c64:	00000000 	.word	0x00000000
   85c68:	20726d54 	.word	0x20726d54
   85c6c:	00637653 	.word	0x00637653

00085c70 <_global_impure_ptr>:
   85c70:	20070140 33323130 37363534 42413938     @.. 0123456789AB
   85c80:	46454443 00000000 33323130 37363534     CDEF....01234567
   85c90:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   85ca0:	0000296c                                l)..

00085ca4 <blanks.7217>:
   85ca4:	20202020 20202020 20202020 20202020                     

00085cb4 <zeroes.7218>:
   85cb4:	30303030 30303030 30303030 30303030     0000000000000000
   85cc4:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00085cd4 <_ctype_>:
   85cd4:	20202000 20202020 28282020 20282828     .         ((((( 
   85ce4:	20202020 20202020 20202020 20202020                     
   85cf4:	10108820 10101010 10101010 10101010      ...............
   85d04:	04040410 04040404 10040404 10101010     ................
   85d14:	41411010 41414141 01010101 01010101     ..AAAAAA........
   85d24:	01010101 01010101 01010101 10101010     ................
   85d34:	42421010 42424242 02020202 02020202     ..BBBBBB........
   85d44:	02020202 02020202 02020202 10101010     ................
   85d54:	00000020 00000000 00000000 00000000      ...............
	...

00085dd8 <_init>:
   85dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85dda:	bf00      	nop
   85ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85dde:	bc08      	pop	{r3}
   85de0:	469e      	mov	lr, r3
   85de2:	4770      	bx	lr

00085de4 <__init_array_start>:
   85de4:	00083d21 	.word	0x00083d21

00085de8 <__frame_dummy_init_array_entry>:
   85de8:	00080119                                ....

00085dec <_fini>:
   85dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85dee:	bf00      	nop
   85df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   85df2:	bc08      	pop	{r3}
   85df4:	469e      	mov	lr, r3
   85df6:	4770      	bx	lr

00085df8 <__fini_array_start>:
   85df8:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4a14      	ldr	r2, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b13      	ldr	r3, [r2, #48]	; 0x30
2007003c:	f023 0303 	bic.w	r3, r3, #3
20070040:	f043 0301 	orr.w	r3, r3, #1
20070044:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070048:	f013 0f08 	tst.w	r3, #8
2007004c:	d0fb      	beq.n	20070046 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007004e:	4a12      	ldr	r2, [pc, #72]	; (20070098 <SystemInit+0x98>)
20070050:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070052:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070054:	461a      	mov	r2, r3
20070056:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070058:	f013 0f02 	tst.w	r3, #2
2007005c:	d0fb      	beq.n	20070056 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007005e:	2211      	movs	r2, #17
20070060:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070062:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070064:	461a      	mov	r2, r3
20070066:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070068:	f013 0f08 	tst.w	r3, #8
2007006c:	d0fb      	beq.n	20070066 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007006e:	2212      	movs	r2, #18
20070070:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070072:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070074:	461a      	mov	r2, r3
20070076:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070078:	f013 0f08 	tst.w	r3, #8
2007007c:	d0fb      	beq.n	20070076 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007007e:	4a07      	ldr	r2, [pc, #28]	; (2007009c <SystemInit+0x9c>)
20070080:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070082:	601a      	str	r2, [r3, #0]
20070084:	4770      	bx	lr
20070086:	bf00      	nop
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070138 	.word	0x20070138

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d915      	bls.n	200700d6 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700aa:	4b1b      	ldr	r3, [pc, #108]	; (20070118 <system_init_flash+0x74>)
200700ac:	4298      	cmp	r0, r3
200700ae:	d919      	bls.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b0:	4b1a      	ldr	r3, [pc, #104]	; (2007011c <system_init_flash+0x78>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d91e      	bls.n	200700f4 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b6:	4b1a      	ldr	r3, [pc, #104]	; (20070120 <system_init_flash+0x7c>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d923      	bls.n	20070104 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700bc:	4b19      	ldr	r3, [pc, #100]	; (20070124 <system_init_flash+0x80>)
200700be:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700c0:	bf94      	ite	ls
200700c2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700c6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700ca:	4a17      	ldr	r2, [pc, #92]	; (20070128 <system_init_flash+0x84>)
200700cc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ce:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d2:	6013      	str	r3, [r2, #0]
200700d4:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700d6:	2300      	movs	r3, #0
200700d8:	4a13      	ldr	r2, [pc, #76]	; (20070128 <system_init_flash+0x84>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700e4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700e8:	4a0f      	ldr	r2, [pc, #60]	; (20070128 <system_init_flash+0x84>)
200700ea:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ec:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f0:	6013      	str	r3, [r2, #0]
200700f2:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700f4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700f8:	4a0b      	ldr	r2, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fa:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700fc:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070100:	6013      	str	r3, [r2, #0]
20070102:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070104:	f44f 7340 	mov.w	r3, #768	; 0x300
20070108:	4a07      	ldr	r2, [pc, #28]	; (20070128 <system_init_flash+0x84>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	02faf07f 	.word	0x02faf07f
2007011c:	03d08fff 	.word	0x03d08fff
20070120:	04c4b3ff 	.word	0x04c4b3ff
20070124:	055d4a7f 	.word	0x055d4a7f
20070128:	400e0a00 	.word	0x400e0a00

2007012c <uxCriticalNesting>:
2007012c:	aaaaaaaa                                ....

20070130 <xFreeBytesRemaining>:
20070130:	0000a000                                ....

20070134 <xNextTaskUnblockTime>:
20070134:	ffffffff                                ....

20070138 <SystemCoreClock>:
20070138:	003d0900                                ..=.

2007013c <_impure_ptr>:
2007013c:	20070140                                @.. 

20070140 <impure_data>:
20070140:	00000000 2007042c 20070494 200704fc     ....,.. ... ... 
	...
200701e8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f8:	0005deec 0000000b 00000000 00000000     ................
	...

20070568 <__atexit_recursive_mutex>:
20070568:	2007ad7c                                |.. 

2007056c <__global_locale>:
2007056c:	00000043 00000000 00000000 00000000     C...............
	...
2007058c:	00000043 00000000 00000000 00000000     C...............
	...
200705ac:	00000043 00000000 00000000 00000000     C...............
	...
200705cc:	00000043 00000000 00000000 00000000     C...............
	...
200705ec:	00000043 00000000 00000000 00000000     C...............
	...
2007060c:	00000043 00000000 00000000 00000000     C...............
	...
2007062c:	00000043 00000000 00000000 00000000     C...............
	...
2007064c:	000853a9 00084cf5 00000000 00085cd4     .S...L.......\..
2007065c:	00085cd0 00085b10 00085b10 00085b10     .\...[...[...[..
2007066c:	00085b10 00085b10 00085b10 00085b10     .[...[...[...[..
2007067c:	00085b10 00085b10 ffffffff ffffffff     .[...[..........
2007068c:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706b4:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706d8 <__malloc_av_>:
	...
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 
200709e0:	200709d8 200709d8 200709e0 200709e0     ... ... ... ... 
200709f0:	200709e8 200709e8 200709f0 200709f0     ... ... ... ... 
20070a00:	200709f8 200709f8 20070a00 20070a00     ... ... ... ... 
20070a10:	20070a08 20070a08 20070a10 20070a10     ... ... ... ... 
20070a20:	20070a18 20070a18 20070a20 20070a20     ... ...  ..  .. 
20070a30:	20070a28 20070a28 20070a30 20070a30     (.. (.. 0.. 0.. 
20070a40:	20070a38 20070a38 20070a40 20070a40     8.. 8.. @.. @.. 
20070a50:	20070a48 20070a48 20070a50 20070a50     H.. H.. P.. P.. 
20070a60:	20070a58 20070a58 20070a60 20070a60     X.. X.. `.. `.. 
20070a70:	20070a68 20070a68 20070a70 20070a70     h.. h.. p.. p.. 
20070a80:	20070a78 20070a78 20070a80 20070a80     x.. x.. ... ... 
20070a90:	20070a88 20070a88 20070a90 20070a90     ... ... ... ... 
20070aa0:	20070a98 20070a98 20070aa0 20070aa0     ... ... ... ... 
20070ab0:	20070aa8 20070aa8 20070ab0 20070ab0     ... ... ... ... 
20070ac0:	20070ab8 20070ab8 20070ac0 20070ac0     ... ... ... ... 
20070ad0:	20070ac8 20070ac8 20070ad0 20070ad0     ... ... ... ... 

20070ae0 <__malloc_sbrk_base>:
20070ae0:	ffffffff                                ....

20070ae4 <__malloc_trim_threshold>:
20070ae4:	00020000                                ....

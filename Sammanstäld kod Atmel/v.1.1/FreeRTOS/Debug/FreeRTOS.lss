
FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004724  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00084724  00084724  00014724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000af0  20070000  0008472c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000001d0  20070af0  0008521c  00020af0  2**2
                  ALLOC
  4 .stack        00002000  20070cc0  000853ec  00020af0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020af0  2**0
                  CONTENTS, READONLY
  6 .comment      00000059  00000000  00000000  00020b19  2**0
                  CONTENTS, READONLY
  7 .debug_info   00018f3e  00000000  00000000  00020b72  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003883  00000000  00000000  00039ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000c08  00000000  00000000  0003d333  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b98  00000000  00000000  0003df3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a82a  00000000  00000000  0003ead3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00011002  00000000  00000000  000592fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0006921d  00000000  00000000  0006a2ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002800  00000000  00000000  000d351c  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000053c7  00000000  00000000  000d5d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	c0 2c 07 20 3d 12 08 00 39 12 08 00 39 12 08 00     .,. =...9...9...
   80010:	39 12 08 00 39 12 08 00 39 12 08 00 00 00 00 00     9...9...9.......
	...
   8002c:	45 0a 08 00 39 12 08 00 00 00 00 00 7d 0a 08 00     E...9.......}...
   8003c:	b9 0a 08 00 39 12 08 00 39 12 08 00 39 12 08 00     ....9...9...9...
   8004c:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   8005c:	39 12 08 00 39 12 08 00 39 12 08 00 00 00 00 00     9...9...9.......
   8006c:	ad 10 08 00 c1 10 08 00 d5 10 08 00 e9 10 08 00     ................
	...
   80084:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   80094:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   800a4:	00 00 00 00 39 12 08 00 39 12 08 00 39 12 08 00     ....9...9...9...
   800b4:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   800c4:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   800d4:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...
   800e4:	39 12 08 00 39 12 08 00 39 12 08 00 39 12 08 00     9...9...9...9...

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070af0 	.word	0x20070af0
   80110:	00000000 	.word	0x00000000
   80114:	0008472c 	.word	0x0008472c

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	0008472c 	.word	0x0008472c
   80154:	20070af4 	.word	0x20070af4
   80158:	0008472c 	.word	0x0008472c
   8015c:	00000000 	.word	0x00000000

00080160 <rightEncoderAISR>:
	printf("%i\n",lTickTime);
	
} 
*/
//////////////////////////////ENCODER ISR//////////////////////////////////////////
void rightEncoderAISR(){ //ISR for the right encoder A
   80160:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder	
	if(getSetRDirection()>0){
   80162:	4b15      	ldr	r3, [pc, #84]	; (801b8 <rightEncoderAISR+0x58>)
   80164:	4798      	blx	r3
   80166:	2800      	cmp	r0, #0
   80168:	dd15      	ble.n	80196 <rightEncoderAISR+0x36>
		rAPulses++; 
   8016a:	4a14      	ldr	r2, [pc, #80]	; (801bc <rightEncoderAISR+0x5c>)
   8016c:	6813      	ldr	r3, [r2, #0]
   8016e:	3301      	adds	r3, #1
   80170:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}

	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference 
	rAPrevTick = rACurrentTick;
   80172:	4c13      	ldr	r4, [pc, #76]	; (801c0 <rightEncoderAISR+0x60>)
   80174:	4d13      	ldr	r5, [pc, #76]	; (801c4 <rightEncoderAISR+0x64>)
   80176:	682b      	ldr	r3, [r5, #0]
   80178:	6023      	str	r3, [r4, #0]
	rACurrentTick = xTaskGetTickCountFromISR();
   8017a:	4b13      	ldr	r3, [pc, #76]	; (801c8 <rightEncoderAISR+0x68>)
   8017c:	4798      	blx	r3
   8017e:	6028      	str	r0, [r5, #0]
	rAPulseTime = rACurrentTick-rAPrevTick*msPerTick;
   80180:	6821      	ldr	r1, [r4, #0]
   80182:	4b12      	ldr	r3, [pc, #72]	; (801cc <rightEncoderAISR+0x6c>)
   80184:	681b      	ldr	r3, [r3, #0]
   80186:	fb03 0111 	mls	r1, r3, r1, r0
   8018a:	4b11      	ldr	r3, [pc, #68]	; (801d0 <rightEncoderAISR+0x70>)
   8018c:	6019      	str	r1, [r3, #0]
	printf("RightPulseTime: %i ms\n",rAPulseTime);
   8018e:	4811      	ldr	r0, [pc, #68]	; (801d4 <rightEncoderAISR+0x74>)
   80190:	4b11      	ldr	r3, [pc, #68]	; (801d8 <rightEncoderAISR+0x78>)
   80192:	4798      	blx	r3
   80194:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   80196:	4b08      	ldr	r3, [pc, #32]	; (801b8 <rightEncoderAISR+0x58>)
   80198:	4798      	blx	r3
   8019a:	2800      	cmp	r0, #0
   8019c:	db07      	blt.n	801ae <rightEncoderAISR+0x4e>
	}else if(getSetRDirection()==0){
   8019e:	4b06      	ldr	r3, [pc, #24]	; (801b8 <rightEncoderAISR+0x58>)
   801a0:	4798      	blx	r3
   801a2:	2800      	cmp	r0, #0
   801a4:	d1e5      	bne.n	80172 <rightEncoderAISR+0x12>
		printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   801a6:	480d      	ldr	r0, [pc, #52]	; (801dc <rightEncoderAISR+0x7c>)
   801a8:	4b0b      	ldr	r3, [pc, #44]	; (801d8 <rightEncoderAISR+0x78>)
   801aa:	4798      	blx	r3
   801ac:	e7e1      	b.n	80172 <rightEncoderAISR+0x12>
		rAPulses--;
   801ae:	4a03      	ldr	r2, [pc, #12]	; (801bc <rightEncoderAISR+0x5c>)
   801b0:	6813      	ldr	r3, [r2, #0]
   801b2:	3b01      	subs	r3, #1
   801b4:	6013      	str	r3, [r2, #0]
   801b6:	e7dc      	b.n	80172 <rightEncoderAISR+0x12>
   801b8:	000806a9 	.word	0x000806a9
   801bc:	20070c48 	.word	0x20070c48
   801c0:	20070c74 	.word	0x20070c74
   801c4:	20070c64 	.word	0x20070c64
   801c8:	00080ae5 	.word	0x00080ae5
   801cc:	20070c6c 	.word	0x20070c6c
   801d0:	20070c60 	.word	0x20070c60
   801d4:	000844ec 	.word	0x000844ec
   801d8:	00081809 	.word	0x00081809
   801dc:	00084468 	.word	0x00084468

000801e0 <rightEncoderBISR>:
	
}

void rightEncoderBISR(){ //ISR for the right encoder B
   801e0:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the right wheel encoder
	if(getSetRDirection()>0){
   801e2:	4b15      	ldr	r3, [pc, #84]	; (80238 <rightEncoderBISR+0x58>)
   801e4:	4798      	blx	r3
   801e6:	2800      	cmp	r0, #0
   801e8:	dd15      	ble.n	80216 <rightEncoderBISR+0x36>
		rBPulses++;
   801ea:	4a14      	ldr	r2, [pc, #80]	; (8023c <rightEncoderBISR+0x5c>)
   801ec:	6813      	ldr	r3, [r2, #0]
   801ee:	3301      	adds	r3, #1
   801f0:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	rBPrevTick = rBCurrentTick;
   801f2:	4c13      	ldr	r4, [pc, #76]	; (80240 <rightEncoderBISR+0x60>)
   801f4:	4d13      	ldr	r5, [pc, #76]	; (80244 <rightEncoderBISR+0x64>)
   801f6:	682b      	ldr	r3, [r5, #0]
   801f8:	6023      	str	r3, [r4, #0]
	rBCurrentTick = xTaskGetTickCountFromISR();
   801fa:	4b13      	ldr	r3, [pc, #76]	; (80248 <rightEncoderBISR+0x68>)
   801fc:	4798      	blx	r3
   801fe:	6028      	str	r0, [r5, #0]
	rBPulseTime = rBCurrentTick-rBPrevTick*msPerTick;
   80200:	6821      	ldr	r1, [r4, #0]
   80202:	4b12      	ldr	r3, [pc, #72]	; (8024c <rightEncoderBISR+0x6c>)
   80204:	681b      	ldr	r3, [r3, #0]
   80206:	fb03 0111 	mls	r1, r3, r1, r0
   8020a:	4b11      	ldr	r3, [pc, #68]	; (80250 <rightEncoderBISR+0x70>)
   8020c:	6019      	str	r1, [r3, #0]
	printf("RightPulseTime B: %i ms\n",rBPulseTime);
   8020e:	4811      	ldr	r0, [pc, #68]	; (80254 <rightEncoderBISR+0x74>)
   80210:	4b11      	ldr	r3, [pc, #68]	; (80258 <rightEncoderBISR+0x78>)
   80212:	4798      	blx	r3
   80214:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetRDirection()<0){
   80216:	4b08      	ldr	r3, [pc, #32]	; (80238 <rightEncoderBISR+0x58>)
   80218:	4798      	blx	r3
   8021a:	2800      	cmp	r0, #0
   8021c:	db07      	blt.n	8022e <rightEncoderBISR+0x4e>
		}else if(getSetRDirection()==0){
   8021e:	4b06      	ldr	r3, [pc, #24]	; (80238 <rightEncoderBISR+0x58>)
   80220:	4798      	blx	r3
   80222:	2800      	cmp	r0, #0
   80224:	d1e5      	bne.n	801f2 <rightEncoderBISR+0x12>
			printf("ERROR: no direction could be fetched from the right motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   80226:	480d      	ldr	r0, [pc, #52]	; (8025c <rightEncoderBISR+0x7c>)
   80228:	4b0b      	ldr	r3, [pc, #44]	; (80258 <rightEncoderBISR+0x78>)
   8022a:	4798      	blx	r3
   8022c:	e7e1      	b.n	801f2 <rightEncoderBISR+0x12>
		rBPulses--;
   8022e:	4a03      	ldr	r2, [pc, #12]	; (8023c <rightEncoderBISR+0x5c>)
   80230:	6813      	ldr	r3, [r2, #0]
   80232:	3b01      	subs	r3, #1
   80234:	6013      	str	r3, [r2, #0]
   80236:	e7dc      	b.n	801f2 <rightEncoderBISR+0x12>
   80238:	000806a9 	.word	0x000806a9
   8023c:	20070c54 	.word	0x20070c54
   80240:	20070c5c 	.word	0x20070c5c
   80244:	20070c7c 	.word	0x20070c7c
   80248:	00080ae5 	.word	0x00080ae5
   8024c:	20070c6c 	.word	0x20070c6c
   80250:	20070c50 	.word	0x20070c50
   80254:	00084504 	.word	0x00084504
   80258:	00081809 	.word	0x00081809
   8025c:	00084468 	.word	0x00084468

00080260 <leftEncoderAISR>:
	
}

void leftEncoderAISR(){ //ISR for the left encoder A
   80260:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   80262:	4b16      	ldr	r3, [pc, #88]	; (802bc <leftEncoderAISR+0x5c>)
   80264:	4798      	blx	r3
   80266:	2800      	cmp	r0, #0
   80268:	dd16      	ble.n	80298 <leftEncoderAISR+0x38>
		lAPulses++;
   8026a:	4a15      	ldr	r2, [pc, #84]	; (802c0 <leftEncoderAISR+0x60>)
   8026c:	6813      	ldr	r3, [r2, #0]
   8026e:	3301      	adds	r3, #1
   80270:	6013      	str	r3, [r2, #0]
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lAPrevTick = lACurrentTick;
   80272:	4c14      	ldr	r4, [pc, #80]	; (802c4 <leftEncoderAISR+0x64>)
   80274:	4d14      	ldr	r5, [pc, #80]	; (802c8 <leftEncoderAISR+0x68>)
   80276:	682b      	ldr	r3, [r5, #0]
   80278:	6023      	str	r3, [r4, #0]
	lACurrentTick = xTaskGetTickCountFromISR();
   8027a:	4b14      	ldr	r3, [pc, #80]	; (802cc <leftEncoderAISR+0x6c>)
   8027c:	4798      	blx	r3
   8027e:	6028      	str	r0, [r5, #0]
	lAPulseTime = (lACurrentTick-lAPrevTick)*msPerTick;
   80280:	6821      	ldr	r1, [r4, #0]
   80282:	1a40      	subs	r0, r0, r1
   80284:	4b12      	ldr	r3, [pc, #72]	; (802d0 <leftEncoderAISR+0x70>)
   80286:	6819      	ldr	r1, [r3, #0]
   80288:	fb01 f100 	mul.w	r1, r1, r0
   8028c:	4b11      	ldr	r3, [pc, #68]	; (802d4 <leftEncoderAISR+0x74>)
   8028e:	6019      	str	r1, [r3, #0]
	printf("LeftPulseTime: %i ms\n",lAPulseTime);
   80290:	4811      	ldr	r0, [pc, #68]	; (802d8 <leftEncoderAISR+0x78>)
   80292:	4b12      	ldr	r3, [pc, #72]	; (802dc <leftEncoderAISR+0x7c>)
   80294:	4798      	blx	r3
   80296:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   80298:	4b08      	ldr	r3, [pc, #32]	; (802bc <leftEncoderAISR+0x5c>)
   8029a:	4798      	blx	r3
   8029c:	2800      	cmp	r0, #0
   8029e:	db07      	blt.n	802b0 <leftEncoderAISR+0x50>
		}else if(getSetLDirection()==0){
   802a0:	4b06      	ldr	r3, [pc, #24]	; (802bc <leftEncoderAISR+0x5c>)
   802a2:	4798      	blx	r3
   802a4:	2800      	cmp	r0, #0
   802a6:	d1e4      	bne.n	80272 <leftEncoderAISR+0x12>
			printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   802a8:	480d      	ldr	r0, [pc, #52]	; (802e0 <leftEncoderAISR+0x80>)
   802aa:	4b0c      	ldr	r3, [pc, #48]	; (802dc <leftEncoderAISR+0x7c>)
   802ac:	4798      	blx	r3
   802ae:	e7e0      	b.n	80272 <leftEncoderAISR+0x12>
		lAPulses--;
   802b0:	4a03      	ldr	r2, [pc, #12]	; (802c0 <leftEncoderAISR+0x60>)
   802b2:	6813      	ldr	r3, [r2, #0]
   802b4:	3b01      	subs	r3, #1
   802b6:	6013      	str	r3, [r2, #0]
   802b8:	e7db      	b.n	80272 <leftEncoderAISR+0x12>
   802ba:	bf00      	nop
   802bc:	0008068d 	.word	0x0008068d
   802c0:	20070c68 	.word	0x20070c68
   802c4:	20070c58 	.word	0x20070c58
   802c8:	20070c84 	.word	0x20070c84
   802cc:	00080ae5 	.word	0x00080ae5
   802d0:	20070c6c 	.word	0x20070c6c
   802d4:	20070c88 	.word	0x20070c88
   802d8:	00084438 	.word	0x00084438
   802dc:	00081809 	.word	0x00081809
   802e0:	000843b8 	.word	0x000843b8

000802e4 <leftEncoderBISR>:
	
}

void leftEncoderBISR(){ //ISR for the left encoder B
   802e4:	b538      	push	{r3, r4, r5, lr}
	//Counts pulses on the left wheel encoder
	if(getSetLDirection()>0){
   802e6:	4b16      	ldr	r3, [pc, #88]	; (80340 <leftEncoderBISR+0x5c>)
   802e8:	4798      	blx	r3
   802ea:	2800      	cmp	r0, #0
   802ec:	dd16      	ble.n	8031c <leftEncoderBISR+0x38>
		lBPulses++;
   802ee:	4a15      	ldr	r2, [pc, #84]	; (80344 <leftEncoderBISR+0x60>)
   802f0:	6813      	ldr	r3, [r2, #0]
   802f2:	3301      	adds	r3, #1
   802f4:	6013      	str	r3, [r2, #0]
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
	}
	
	//Compares tick-count since last time it was here to get a measurement of the pulsetime in units of ticks
	//It uses the inbuilt tick counter as reference
	lBPrevTick = lBCurrentTick;
   802f6:	4c14      	ldr	r4, [pc, #80]	; (80348 <leftEncoderBISR+0x64>)
   802f8:	4d14      	ldr	r5, [pc, #80]	; (8034c <leftEncoderBISR+0x68>)
   802fa:	682b      	ldr	r3, [r5, #0]
   802fc:	6023      	str	r3, [r4, #0]
	lBCurrentTick = xTaskGetTickCountFromISR();
   802fe:	4b14      	ldr	r3, [pc, #80]	; (80350 <leftEncoderBISR+0x6c>)
   80300:	4798      	blx	r3
   80302:	6028      	str	r0, [r5, #0]
	lBPulseTime = (lBCurrentTick-lBPrevTick)*msPerTick;
   80304:	6821      	ldr	r1, [r4, #0]
   80306:	1a40      	subs	r0, r0, r1
   80308:	4b12      	ldr	r3, [pc, #72]	; (80354 <leftEncoderBISR+0x70>)
   8030a:	6819      	ldr	r1, [r3, #0]
   8030c:	fb01 f100 	mul.w	r1, r1, r0
   80310:	4b11      	ldr	r3, [pc, #68]	; (80358 <leftEncoderBISR+0x74>)
   80312:	6019      	str	r1, [r3, #0]
	printf("LeftPulseTime B: %i ms\n",lBPulseTime);
   80314:	4811      	ldr	r0, [pc, #68]	; (8035c <leftEncoderBISR+0x78>)
   80316:	4b12      	ldr	r3, [pc, #72]	; (80360 <leftEncoderBISR+0x7c>)
   80318:	4798      	blx	r3
   8031a:	bd38      	pop	{r3, r4, r5, pc}
	else if(getSetLDirection()<0){
   8031c:	4b08      	ldr	r3, [pc, #32]	; (80340 <leftEncoderBISR+0x5c>)
   8031e:	4798      	blx	r3
   80320:	2800      	cmp	r0, #0
   80322:	db07      	blt.n	80334 <leftEncoderBISR+0x50>
	}else if(getSetLDirection()==0){
   80324:	4b06      	ldr	r3, [pc, #24]	; (80340 <leftEncoderBISR+0x5c>)
   80326:	4798      	blx	r3
   80328:	2800      	cmp	r0, #0
   8032a:	d1e4      	bne.n	802f6 <leftEncoderBISR+0x12>
		printf("ERROR: no direction could be fetched from the left motor but pulse was still triggered. Encoder pulse data will be unreliable.\n");
   8032c:	480d      	ldr	r0, [pc, #52]	; (80364 <leftEncoderBISR+0x80>)
   8032e:	4b0c      	ldr	r3, [pc, #48]	; (80360 <leftEncoderBISR+0x7c>)
   80330:	4798      	blx	r3
   80332:	e7e0      	b.n	802f6 <leftEncoderBISR+0x12>
		lBPulses--;
   80334:	4a03      	ldr	r2, [pc, #12]	; (80344 <leftEncoderBISR+0x60>)
   80336:	6813      	ldr	r3, [r2, #0]
   80338:	3b01      	subs	r3, #1
   8033a:	6013      	str	r3, [r2, #0]
   8033c:	e7db      	b.n	802f6 <leftEncoderBISR+0x12>
   8033e:	bf00      	nop
   80340:	0008068d 	.word	0x0008068d
   80344:	20070c78 	.word	0x20070c78
   80348:	20070c4c 	.word	0x20070c4c
   8034c:	20070c70 	.word	0x20070c70
   80350:	00080ae5 	.word	0x00080ae5
   80354:	20070c6c 	.word	0x20070c6c
   80358:	20070c80 	.word	0x20070c80
   8035c:	00084450 	.word	0x00084450
   80360:	00081809 	.word	0x00081809
   80364:	000843b8 	.word	0x000843b8

00080368 <encoder_init>:
void encoder_init(){ //initialise the encoders
   80368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8036c:	b082      	sub	sp, #8
	lAPrevTick=0; 
   8036e:	2400      	movs	r4, #0
   80370:	4b3a      	ldr	r3, [pc, #232]	; (8045c <encoder_init+0xf4>)
   80372:	601c      	str	r4, [r3, #0]
	rAPrevTick=0;
   80374:	4b3a      	ldr	r3, [pc, #232]	; (80460 <encoder_init+0xf8>)
   80376:	601c      	str	r4, [r3, #0]
	lACurrentTick=0;
   80378:	4b3a      	ldr	r3, [pc, #232]	; (80464 <encoder_init+0xfc>)
   8037a:	601c      	str	r4, [r3, #0]
	rACurrentTick=0;
   8037c:	4b3a      	ldr	r3, [pc, #232]	; (80468 <encoder_init+0x100>)
   8037e:	601c      	str	r4, [r3, #0]
	lBPrevTick=0;
   80380:	4b3a      	ldr	r3, [pc, #232]	; (8046c <encoder_init+0x104>)
   80382:	601c      	str	r4, [r3, #0]
	rBPrevTick=0;
   80384:	4b3a      	ldr	r3, [pc, #232]	; (80470 <encoder_init+0x108>)
   80386:	601c      	str	r4, [r3, #0]
	lBCurrentTick=0;
   80388:	4b3a      	ldr	r3, [pc, #232]	; (80474 <encoder_init+0x10c>)
   8038a:	601c      	str	r4, [r3, #0]
	rBCurrentTick=0;
   8038c:	4b3a      	ldr	r3, [pc, #232]	; (80478 <encoder_init+0x110>)
   8038e:	601c      	str	r4, [r3, #0]
	lAPulses=0;
   80390:	4b3a      	ldr	r3, [pc, #232]	; (8047c <encoder_init+0x114>)
   80392:	601c      	str	r4, [r3, #0]
	lAPulseTime=0;
   80394:	4b3a      	ldr	r3, [pc, #232]	; (80480 <encoder_init+0x118>)
   80396:	601c      	str	r4, [r3, #0]
	rAPulses=0;
   80398:	4b3a      	ldr	r3, [pc, #232]	; (80484 <encoder_init+0x11c>)
   8039a:	601c      	str	r4, [r3, #0]
	rAPulseTime=0;
   8039c:	4b3a      	ldr	r3, [pc, #232]	; (80488 <encoder_init+0x120>)
   8039e:	601c      	str	r4, [r3, #0]
	lBPulses=0;
   803a0:	4b3a      	ldr	r3, [pc, #232]	; (8048c <encoder_init+0x124>)
   803a2:	601c      	str	r4, [r3, #0]
	lBPulseTime=0;
   803a4:	4b3a      	ldr	r3, [pc, #232]	; (80490 <encoder_init+0x128>)
   803a6:	601c      	str	r4, [r3, #0]
	rBPulses=0;
   803a8:	4b3a      	ldr	r3, [pc, #232]	; (80494 <encoder_init+0x12c>)
   803aa:	601c      	str	r4, [r3, #0]
	rBPulseTime=0;
   803ac:	4b3a      	ldr	r3, [pc, #232]	; (80498 <encoder_init+0x130>)
   803ae:	601c      	str	r4, [r3, #0]
	msPerTick=1; // Time for a tick is 1 ms on SAM3X8E CPU
   803b0:	2201      	movs	r2, #1
   803b2:	4b3a      	ldr	r3, [pc, #232]	; (8049c <encoder_init+0x134>)
   803b4:	601a      	str	r2, [r3, #0]
	pmc_enable_periph_clk(ID_PIOC);
   803b6:	200d      	movs	r0, #13
   803b8:	4b39      	ldr	r3, [pc, #228]	; (804a0 <encoder_init+0x138>)
   803ba:	4798      	blx	r3
pio_set_input(PIOC,pin5i,NULL);
   803bc:	4d39      	ldr	r5, [pc, #228]	; (804a4 <encoder_init+0x13c>)
   803be:	4622      	mov	r2, r4
   803c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   803c4:	4628      	mov	r0, r5
   803c6:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 804c4 <encoder_init+0x15c>
   803ca:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin5i, PIO_IT_RISE_EDGE , leftEncoderAISR);
   803cc:	4b36      	ldr	r3, [pc, #216]	; (804a8 <encoder_init+0x140>)
   803ce:	9300      	str	r3, [sp, #0]
   803d0:	2370      	movs	r3, #112	; 0x70
   803d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   803d6:	210d      	movs	r1, #13
   803d8:	4628      	mov	r0, r5
   803da:	4f34      	ldr	r7, [pc, #208]	; (804ac <encoder_init+0x144>)
   803dc:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin5i); //digital pin 5
   803de:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   803e2:	4628      	mov	r0, r5
   803e4:	4e32      	ldr	r6, [pc, #200]	; (804b0 <encoder_init+0x148>)
   803e6:	47b0      	blx	r6
pio_set_input(PIOC,pin7i,NULL);
   803e8:	4622      	mov	r2, r4
   803ea:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   803ee:	4628      	mov	r0, r5
   803f0:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin7i,PIO_IT_RISE_EDGE,rightEncoderAISR);
   803f2:	4b30      	ldr	r3, [pc, #192]	; (804b4 <encoder_init+0x14c>)
   803f4:	9300      	str	r3, [sp, #0]
   803f6:	2370      	movs	r3, #112	; 0x70
   803f8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   803fc:	210d      	movs	r1, #13
   803fe:	4628      	mov	r0, r5
   80400:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin7i); //digital pin 7
   80402:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80406:	4628      	mov	r0, r5
   80408:	47b0      	blx	r6
pio_set_input(PIOC,pin8i,NULL);
   8040a:	4622      	mov	r2, r4
   8040c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80410:	4628      	mov	r0, r5
   80412:	47c0      	blx	r8
pio_handler_set(PIOC, ID_PIOC,pin8i, PIO_IT_RISE_EDGE , leftEncoderBISR);
   80414:	4b28      	ldr	r3, [pc, #160]	; (804b8 <encoder_init+0x150>)
   80416:	9300      	str	r3, [sp, #0]
   80418:	2370      	movs	r3, #112	; 0x70
   8041a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   8041e:	210d      	movs	r1, #13
   80420:	4628      	mov	r0, r5
   80422:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin8i); //digital pin 8
   80424:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80428:	4628      	mov	r0, r5
   8042a:	47b0      	blx	r6
pio_set_input(PIOC,pin10i,NULL);
   8042c:	4622      	mov	r2, r4
   8042e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80432:	4628      	mov	r0, r5
   80434:	47c0      	blx	r8
pio_handler_set(PIOC,ID_PIOC,pin10i,PIO_IT_RISE_EDGE,rightEncoderBISR);
   80436:	4b21      	ldr	r3, [pc, #132]	; (804bc <encoder_init+0x154>)
   80438:	9300      	str	r3, [sp, #0]
   8043a:	2370      	movs	r3, #112	; 0x70
   8043c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80440:	210d      	movs	r1, #13
   80442:	4628      	mov	r0, r5
   80444:	47b8      	blx	r7
pio_enable_interrupt(PIOC,pin10i); //digital pin 10
   80446:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8044a:	4628      	mov	r0, r5
   8044c:	47b0      	blx	r6

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   8044e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80452:	4b1b      	ldr	r3, [pc, #108]	; (804c0 <encoder_init+0x158>)
   80454:	601a      	str	r2, [r3, #0]
}
   80456:	b002      	add	sp, #8
   80458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8045c:	20070c58 	.word	0x20070c58
   80460:	20070c74 	.word	0x20070c74
   80464:	20070c84 	.word	0x20070c84
   80468:	20070c64 	.word	0x20070c64
   8046c:	20070c4c 	.word	0x20070c4c
   80470:	20070c5c 	.word	0x20070c5c
   80474:	20070c70 	.word	0x20070c70
   80478:	20070c7c 	.word	0x20070c7c
   8047c:	20070c68 	.word	0x20070c68
   80480:	20070c88 	.word	0x20070c88
   80484:	20070c48 	.word	0x20070c48
   80488:	20070c60 	.word	0x20070c60
   8048c:	20070c78 	.word	0x20070c78
   80490:	20070c80 	.word	0x20070c80
   80494:	20070c54 	.word	0x20070c54
   80498:	20070c50 	.word	0x20070c50
   8049c:	20070c6c 	.word	0x20070c6c
   804a0:	000811e5 	.word	0x000811e5
   804a4:	400e1200 	.word	0x400e1200
   804a8:	00080261 	.word	0x00080261
   804ac:	0008103d 	.word	0x0008103d
   804b0:	00080e75 	.word	0x00080e75
   804b4:	00080161 	.word	0x00080161
   804b8:	000802e5 	.word	0x000802e5
   804bc:	000801e1 	.word	0x000801e1
   804c0:	e000e100 	.word	0xe000e100
   804c4:	00080def 	.word	0x00080def

000804c8 <getLeftAPulses>:
/////////////////////PULSE COUNTER//////////////////////////////////////////
int getLeftPulses(){ //returns the sum of pulses from left encoder A and B since last reset
	printf("LeftPulses : #%i\n",(getLeftAPulses()+getLeftBPulses()));
	return (getLeftAPulses()+getLeftBPulses());
}
int getLeftAPulses(){ //returns the amount of pulses from left encoder A since last reset
   804c8:	b510      	push	{r4, lr}
	printf("LeftPulses A: #%i\n",lAPulses);
   804ca:	4c03      	ldr	r4, [pc, #12]	; (804d8 <getLeftAPulses+0x10>)
   804cc:	6821      	ldr	r1, [r4, #0]
   804ce:	4803      	ldr	r0, [pc, #12]	; (804dc <getLeftAPulses+0x14>)
   804d0:	4b03      	ldr	r3, [pc, #12]	; (804e0 <getLeftAPulses+0x18>)
   804d2:	4798      	blx	r3
	return lAPulses;
}
   804d4:	6820      	ldr	r0, [r4, #0]
   804d6:	bd10      	pop	{r4, pc}
   804d8:	20070c68 	.word	0x20070c68
   804dc:	00084340 	.word	0x00084340
   804e0:	00081809 	.word	0x00081809

000804e4 <getLeftBPulses>:
int getLeftBPulses(){ //returns the amount of pulses from left encoder B since last reset
   804e4:	b510      	push	{r4, lr}
	printf("LeftPulses B: #%i\n",lBPulses);
   804e6:	4c03      	ldr	r4, [pc, #12]	; (804f4 <getLeftBPulses+0x10>)
   804e8:	6821      	ldr	r1, [r4, #0]
   804ea:	4803      	ldr	r0, [pc, #12]	; (804f8 <getLeftBPulses+0x14>)
   804ec:	4b03      	ldr	r3, [pc, #12]	; (804fc <getLeftBPulses+0x18>)
   804ee:	4798      	blx	r3
	return lBPulses;
}
   804f0:	6820      	ldr	r0, [r4, #0]
   804f2:	bd10      	pop	{r4, pc}
   804f4:	20070c78 	.word	0x20070c78
   804f8:	00084354 	.word	0x00084354
   804fc:	00081809 	.word	0x00081809

00080500 <getLeftPulses>:
int getLeftPulses(){ //returns the sum of pulses from left encoder A and B since last reset
   80500:	b570      	push	{r4, r5, r6, lr}
	printf("LeftPulses : #%i\n",(getLeftAPulses()+getLeftBPulses()));
   80502:	4d07      	ldr	r5, [pc, #28]	; (80520 <getLeftPulses+0x20>)
   80504:	47a8      	blx	r5
   80506:	4606      	mov	r6, r0
   80508:	4c06      	ldr	r4, [pc, #24]	; (80524 <getLeftPulses+0x24>)
   8050a:	47a0      	blx	r4
   8050c:	1831      	adds	r1, r6, r0
   8050e:	4806      	ldr	r0, [pc, #24]	; (80528 <getLeftPulses+0x28>)
   80510:	4b06      	ldr	r3, [pc, #24]	; (8052c <getLeftPulses+0x2c>)
   80512:	4798      	blx	r3
	return (getLeftAPulses()+getLeftBPulses());
   80514:	47a8      	blx	r5
   80516:	4605      	mov	r5, r0
   80518:	47a0      	blx	r4
}
   8051a:	4428      	add	r0, r5
   8051c:	bd70      	pop	{r4, r5, r6, pc}
   8051e:	bf00      	nop
   80520:	000804c9 	.word	0x000804c9
   80524:	000804e5 	.word	0x000804e5
   80528:	00084368 	.word	0x00084368
   8052c:	00081809 	.word	0x00081809

00080530 <getRightAPulses>:
int getRightPulses(){ //returns the sum of pulses from right encoder A and B since last reset
	printf("RightPulses : #%i\n",(getRightAPulses()+getRightBPulses()));
	return (getRightAPulses()+getRightBPulses());
}
int getRightAPulses(){ //returns the amount of pulses from right encoder A since last reset
   80530:	b510      	push	{r4, lr}
	printf("RightPulses A: #%i\n",rAPulses);
   80532:	4c03      	ldr	r4, [pc, #12]	; (80540 <getRightAPulses+0x10>)
   80534:	6821      	ldr	r1, [r4, #0]
   80536:	4803      	ldr	r0, [pc, #12]	; (80544 <getRightAPulses+0x14>)
   80538:	4b03      	ldr	r3, [pc, #12]	; (80548 <getRightAPulses+0x18>)
   8053a:	4798      	blx	r3
	return rAPulses;
}
   8053c:	6820      	ldr	r0, [r4, #0]
   8053e:	bd10      	pop	{r4, pc}
   80540:	20070c48 	.word	0x20070c48
   80544:	0008437c 	.word	0x0008437c
   80548:	00081809 	.word	0x00081809

0008054c <getRightBPulses>:
int getRightBPulses(){ //returns the amount of pulses from right encoder B since last reset
   8054c:	b510      	push	{r4, lr}
	printf("RightPulses B: #%i\n",rBPulses);
   8054e:	4c03      	ldr	r4, [pc, #12]	; (8055c <getRightBPulses+0x10>)
   80550:	6821      	ldr	r1, [r4, #0]
   80552:	4803      	ldr	r0, [pc, #12]	; (80560 <getRightBPulses+0x14>)
   80554:	4b03      	ldr	r3, [pc, #12]	; (80564 <getRightBPulses+0x18>)
   80556:	4798      	blx	r3
	return rBPulses;
}
   80558:	6820      	ldr	r0, [r4, #0]
   8055a:	bd10      	pop	{r4, pc}
   8055c:	20070c54 	.word	0x20070c54
   80560:	00084390 	.word	0x00084390
   80564:	00081809 	.word	0x00081809

00080568 <getRightPulses>:
int getRightPulses(){ //returns the sum of pulses from right encoder A and B since last reset
   80568:	b570      	push	{r4, r5, r6, lr}
	printf("RightPulses : #%i\n",(getRightAPulses()+getRightBPulses()));
   8056a:	4d07      	ldr	r5, [pc, #28]	; (80588 <getRightPulses+0x20>)
   8056c:	47a8      	blx	r5
   8056e:	4606      	mov	r6, r0
   80570:	4c06      	ldr	r4, [pc, #24]	; (8058c <getRightPulses+0x24>)
   80572:	47a0      	blx	r4
   80574:	1831      	adds	r1, r6, r0
   80576:	4806      	ldr	r0, [pc, #24]	; (80590 <getRightPulses+0x28>)
   80578:	4b06      	ldr	r3, [pc, #24]	; (80594 <getRightPulses+0x2c>)
   8057a:	4798      	blx	r3
	return (getRightAPulses()+getRightBPulses());
   8057c:	47a8      	blx	r5
   8057e:	4605      	mov	r5, r0
   80580:	47a0      	blx	r4
}
   80582:	4428      	add	r0, r5
   80584:	bd70      	pop	{r4, r5, r6, pc}
   80586:	bf00      	nop
   80588:	00080531 	.word	0x00080531
   8058c:	0008054d 	.word	0x0008054d
   80590:	000843a4 	.word	0x000843a4
   80594:	00081809 	.word	0x00081809

00080598 <getRightBPulseTime>:
int getRightAPulseTime(){ //returns the latest pulse time for the right encoder A in milliseconds
	printf("RightPulseTime A: %i ms\n",rAPulseTime);
	return rAPulseTime;
	
}
int getRightBPulseTime(){ //returns the latest pulse time for the right encoder B  in milliseconds
   80598:	b510      	push	{r4, lr}
	printf("RightPulseTime B: %i ms\n",rBPulseTime);
   8059a:	4c03      	ldr	r4, [pc, #12]	; (805a8 <getRightBPulseTime+0x10>)
   8059c:	6821      	ldr	r1, [r4, #0]
   8059e:	4803      	ldr	r0, [pc, #12]	; (805ac <getRightBPulseTime+0x14>)
   805a0:	4b03      	ldr	r3, [pc, #12]	; (805b0 <getRightBPulseTime+0x18>)
   805a2:	4798      	blx	r3
	return rBPulseTime;
}
   805a4:	6820      	ldr	r0, [r4, #0]
   805a6:	bd10      	pop	{r4, pc}
   805a8:	20070c50 	.word	0x20070c50
   805ac:	00084504 	.word	0x00084504
   805b0:	00081809 	.word	0x00081809

000805b4 <getLeftAPulseTime>:
int getLeftAPulseTime(){  //returns the latest pulse time for the left encoder A in milliseconds
   805b4:	b510      	push	{r4, lr}
	printf("LeftPulseTime A: %i ms\n",lAPulseTime);
   805b6:	4c03      	ldr	r4, [pc, #12]	; (805c4 <getLeftAPulseTime+0x10>)
   805b8:	6821      	ldr	r1, [r4, #0]
   805ba:	4803      	ldr	r0, [pc, #12]	; (805c8 <getLeftAPulseTime+0x14>)
   805bc:	4b03      	ldr	r3, [pc, #12]	; (805cc <getLeftAPulseTime+0x18>)
   805be:	4798      	blx	r3
	return lAPulseTime;
}
   805c0:	6820      	ldr	r0, [r4, #0]
   805c2:	bd10      	pop	{r4, pc}
   805c4:	20070c88 	.word	0x20070c88
   805c8:	00084328 	.word	0x00084328
   805cc:	00081809 	.word	0x00081809

000805d0 <drive>:
 rDirection = 0;
 lDirection = 0;
 /*
 Takes speed in percentage 0-100 as input and -1,1 as direction where 1 is forward and -1 is reverse.
 */
 void drive(int rSpeed, int lSpeed, int rDirection, int lDirection) {
   805d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	rSpeed = rSpeed;
	lSpeed = lSpeed;
	rDirection = rDirection;
	lDirection = lDirection;
	
	int rMotorSpeed = (1500 + 7 * rSpeed * rDirection);
   805d2:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
   805d6:	fb02 f000 	mul.w	r0, r2, r0
   805da:	f200 50dc 	addw	r0, r0, #1500	; 0x5dc
	int lMotorSpeed = (1500 + 7 * lSpeed * lDirection);
   805de:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   805e2:	fb03 f301 	mul.w	r3, r3, r1
   805e6:	f203 54dc 	addw	r4, r3, #1500	; 0x5dc
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   805ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   805ee:	4b22      	ldr	r3, [pc, #136]	; (80678 <drive+0xa8>)
   805f0:	631a      	str	r2, [r3, #48]	; 0x30
	
	ioport_set_pin_level(pin2, HIGH);
	delay_us(rMotorSpeed);
   805f2:	b330      	cbz	r0, 80642 <drive+0x72>
   805f4:	17c7      	asrs	r7, r0, #31
   805f6:	4b21      	ldr	r3, [pc, #132]	; (8067c <drive+0xac>)
   805f8:	fba0 0103 	umull	r0, r1, r0, r3
   805fc:	fb03 1107 	mla	r1, r3, r7, r1
   80600:	4a1f      	ldr	r2, [pc, #124]	; (80680 <drive+0xb0>)
   80602:	2300      	movs	r3, #0
   80604:	a71a      	add	r7, pc, #104	; (adr r7, 80670 <drive+0xa0>)
   80606:	e9d7 6700 	ldrd	r6, r7, [r7]
   8060a:	1980      	adds	r0, r0, r6
   8060c:	4179      	adcs	r1, r7
   8060e:	4d1d      	ldr	r5, [pc, #116]	; (80684 <drive+0xb4>)
   80610:	47a8      	blx	r5
   80612:	4b1d      	ldr	r3, [pc, #116]	; (80688 <drive+0xb8>)
   80614:	4798      	blx	r3
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80616:	4d18      	ldr	r5, [pc, #96]	; (80678 <drive+0xa8>)
   80618:	f04f 7600 	mov.w	r6, #33554432	; 0x2000000
   8061c:	636e      	str	r6, [r5, #52]	; 0x34
	ioport_set_pin_level(pin2, LOW);
	delay_us(1100);
   8061e:	f641 10c8 	movw	r0, #6600	; 0x19c8
   80622:	4b19      	ldr	r3, [pc, #100]	; (80688 <drive+0xb8>)
   80624:	4798      	blx	r3
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80626:	632e      	str	r6, [r5, #48]	; 0x30
	ioport_set_pin_level(pin2, HIGH);
	delay_us(lMotorSpeed);
   80628:	b97c      	cbnz	r4, 8064a <drive+0x7a>
   8062a:	2006      	movs	r0, #6
   8062c:	4b16      	ldr	r3, [pc, #88]	; (80688 <drive+0xb8>)
   8062e:	4798      	blx	r3
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80630:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   80634:	4b10      	ldr	r3, [pc, #64]	; (80678 <drive+0xa8>)
   80636:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_level(pin2, LOW);
	delay_us(5250);
   80638:	f647 300c 	movw	r0, #31500	; 0x7b0c
   8063c:	4b12      	ldr	r3, [pc, #72]	; (80688 <drive+0xb8>)
   8063e:	4798      	blx	r3
   80640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	delay_us(rMotorSpeed);
   80642:	2006      	movs	r0, #6
   80644:	4b10      	ldr	r3, [pc, #64]	; (80688 <drive+0xb8>)
   80646:	4798      	blx	r3
   80648:	e7e5      	b.n	80616 <drive+0x46>
	delay_us(lMotorSpeed);
   8064a:	17e7      	asrs	r7, r4, #31
   8064c:	4b0b      	ldr	r3, [pc, #44]	; (8067c <drive+0xac>)
   8064e:	fba4 0103 	umull	r0, r1, r4, r3
   80652:	fb03 1107 	mla	r1, r3, r7, r1
   80656:	4a0a      	ldr	r2, [pc, #40]	; (80680 <drive+0xb0>)
   80658:	2300      	movs	r3, #0
   8065a:	a505      	add	r5, pc, #20	; (adr r5, 80670 <drive+0xa0>)
   8065c:	e9d5 4500 	ldrd	r4, r5, [r5]
   80660:	1900      	adds	r0, r0, r4
   80662:	4169      	adcs	r1, r5
   80664:	4c07      	ldr	r4, [pc, #28]	; (80684 <drive+0xb4>)
   80666:	47a0      	blx	r4
   80668:	4b07      	ldr	r3, [pc, #28]	; (80688 <drive+0xb8>)
   8066a:	4798      	blx	r3
   8066c:	e7e0      	b.n	80630 <drive+0x60>
   8066e:	bf00      	nop
   80670:	00d59f7f 	.word	0x00d59f7f
   80674:	00000000 	.word	0x00000000
   80678:	400e1000 	.word	0x400e1000
   8067c:	0501bd00 	.word	0x0501bd00
   80680:	00d59f80 	.word	0x00d59f80
   80684:	000814a9 	.word	0x000814a9
   80688:	20070001 	.word	0x20070001

0008068c <getSetLDirection>:
int getSetRSpeed(){
	printf("Set Speed for Right Motor is: %i\n%%",rSpeed);
	return rSpeed;
}
/*Returns the value of latest direction set for the left motor*/
int getSetLDirection(){
   8068c:	b510      	push	{r4, lr}
	printf("Set Direction for Left Motor is: %i\n",lDirection);
   8068e:	4c03      	ldr	r4, [pc, #12]	; (8069c <getSetLDirection+0x10>)
   80690:	6821      	ldr	r1, [r4, #0]
   80692:	4803      	ldr	r0, [pc, #12]	; (806a0 <getSetLDirection+0x14>)
   80694:	4b03      	ldr	r3, [pc, #12]	; (806a4 <getSetLDirection+0x18>)
   80696:	4798      	blx	r3
	return lDirection;
}
   80698:	6820      	ldr	r0, [r4, #0]
   8069a:	bd10      	pop	{r4, pc}
   8069c:	20070b0c 	.word	0x20070b0c
   806a0:	00084520 	.word	0x00084520
   806a4:	00081809 	.word	0x00081809

000806a8 <getSetRDirection>:
/*Returns the value of latest direction set for the right motor*/
int getSetRDirection(){
   806a8:	b510      	push	{r4, lr}
	printf("Set Direction for Right Motor is: %i\n",rDirection);
   806aa:	4c03      	ldr	r4, [pc, #12]	; (806b8 <getSetRDirection+0x10>)
   806ac:	6821      	ldr	r1, [r4, #0]
   806ae:	4803      	ldr	r0, [pc, #12]	; (806bc <getSetRDirection+0x14>)
   806b0:	4b03      	ldr	r3, [pc, #12]	; (806c0 <getSetRDirection+0x18>)
   806b2:	4798      	blx	r3
	return rDirection;
   806b4:	6820      	ldr	r0, [r4, #0]
   806b6:	bd10      	pop	{r4, pc}
   806b8:	20070b10 	.word	0x20070b10
   806bc:	00084548 	.word	0x00084548
   806c0:	00081809 	.word	0x00081809

000806c4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   806c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   806c8:	b980      	cbnz	r0, 806ec <_read+0x28>
   806ca:	460c      	mov	r4, r1
   806cc:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
   806ce:	2a00      	cmp	r2, #0
   806d0:	dd0f      	ble.n	806f2 <_read+0x2e>
   806d2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   806d4:	4e08      	ldr	r6, [pc, #32]	; (806f8 <_read+0x34>)
   806d6:	4d09      	ldr	r5, [pc, #36]	; (806fc <_read+0x38>)
   806d8:	6830      	ldr	r0, [r6, #0]
   806da:	4621      	mov	r1, r4
   806dc:	682b      	ldr	r3, [r5, #0]
   806de:	4798      	blx	r3
		ptr++;
   806e0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
   806e2:	42bc      	cmp	r4, r7
   806e4:	d1f8      	bne.n	806d8 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   806e6:	4640      	mov	r0, r8
   806e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   806ec:	f04f 38ff 	mov.w	r8, #4294967295
   806f0:	e7f9      	b.n	806e6 <_read+0x22>
	for (; len > 0; --len) {
   806f2:	4680      	mov	r8, r0
   806f4:	e7f7      	b.n	806e6 <_read+0x22>
   806f6:	bf00      	nop
   806f8:	20070c94 	.word	0x20070c94
   806fc:	20070c8c 	.word	0x20070c8c

00080700 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80700:	3801      	subs	r0, #1
   80702:	2802      	cmp	r0, #2
   80704:	d815      	bhi.n	80732 <_write+0x32>
{
   80706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8070a:	460e      	mov	r6, r1
   8070c:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
   8070e:	b19a      	cbz	r2, 80738 <_write+0x38>
   80710:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
   80712:	f8df 8038 	ldr.w	r8, [pc, #56]	; 8074c <_write+0x4c>
   80716:	4f0c      	ldr	r7, [pc, #48]	; (80748 <_write+0x48>)
   80718:	f8d8 0000 	ldr.w	r0, [r8]
   8071c:	f815 1b01 	ldrb.w	r1, [r5], #1
   80720:	683b      	ldr	r3, [r7, #0]
   80722:	4798      	blx	r3
   80724:	2800      	cmp	r0, #0
   80726:	db0a      	blt.n	8073e <_write+0x3e>
   80728:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
   8072a:	3c01      	subs	r4, #1
   8072c:	d1f4      	bne.n	80718 <_write+0x18>
   8072e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   80732:	f04f 30ff 	mov.w	r0, #4294967295
   80736:	4770      	bx	lr
	for (; len != 0; --len) {
   80738:	4610      	mov	r0, r2
   8073a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
   8073e:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
   80742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80746:	bf00      	nop
   80748:	20070c90 	.word	0x20070c90
   8074c:	20070c94 	.word	0x20070c94

00080750 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   80750:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   80752:	23ac      	movs	r3, #172	; 0xac
   80754:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   80756:	680b      	ldr	r3, [r1, #0]
   80758:	684a      	ldr	r2, [r1, #4]
   8075a:	fbb3 f3f2 	udiv	r3, r3, r2
   8075e:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   80760:	1e5c      	subs	r4, r3, #1
   80762:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   80766:	4294      	cmp	r4, r2
   80768:	d80b      	bhi.n	80782 <uart_init+0x32>
		return 1;

	p_uart->UART_BRGR = cd;
   8076a:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   8076c:	688b      	ldr	r3, [r1, #8]
   8076e:	6043      	str	r3, [r0, #4]

#if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   80770:	f240 2302 	movw	r3, #514	; 0x202
   80774:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
#endif

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   80778:	2350      	movs	r3, #80	; 0x50
   8077a:	6003      	str	r3, [r0, #0]

	return 0;
   8077c:	2000      	movs	r0, #0
}
   8077e:	bc10      	pop	{r4}
   80780:	4770      	bx	lr
		return 1;
   80782:	2001      	movs	r0, #1
   80784:	e7fb      	b.n	8077e <uart_init+0x2e>

00080786 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   80786:	6943      	ldr	r3, [r0, #20]
   80788:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   8078c:	bf1a      	itte	ne
   8078e:	61c1      	strne	r1, [r0, #28]
	return 0;
   80790:	2000      	movne	r0, #0
		return 1;
   80792:	2001      	moveq	r0, #1
}
   80794:	4770      	bx	lr

00080796 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80796:	6943      	ldr	r3, [r0, #20]
   80798:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8079c:	bf1d      	ittte	ne
   8079e:	6983      	ldrne	r3, [r0, #24]
   807a0:	700b      	strbne	r3, [r1, #0]
	return 0;
   807a2:	2000      	movne	r0, #0
		return 1;
   807a4:	2001      	moveq	r0, #1
}
   807a6:	4770      	bx	lr

000807a8 <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   807a8:	6943      	ldr	r3, [r0, #20]
   807aa:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   807ae:	bf1d      	ittte	ne
   807b0:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   807b4:	61c1      	strne	r1, [r0, #28]
	return 0;
   807b6:	2000      	movne	r0, #0
		return 1;
   807b8:	2001      	moveq	r0, #1
}
   807ba:	4770      	bx	lr

000807bc <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   807bc:	6943      	ldr	r3, [r0, #20]
   807be:	f013 0f01 	tst.w	r3, #1
   807c2:	d005      	beq.n	807d0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   807c4:	6983      	ldr	r3, [r0, #24]
   807c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   807ca:	600b      	str	r3, [r1, #0]

	return 0;
   807cc:	2000      	movs	r0, #0
   807ce:	4770      	bx	lr
		return 1;
   807d0:	2001      	movs	r0, #1
}
   807d2:	4770      	bx	lr

000807d4 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   807d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   807d6:	b083      	sub	sp, #12
   807d8:	4604      	mov	r4, r0
   807da:	460d      	mov	r5, r1
	uint32_t val = 0;
   807dc:	2300      	movs	r3, #0
   807de:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   807e0:	4b20      	ldr	r3, [pc, #128]	; (80864 <usart_serial_getchar+0x90>)
   807e2:	4298      	cmp	r0, r3
   807e4:	d00d      	beq.n	80802 <usart_serial_getchar+0x2e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   807e6:	4b20      	ldr	r3, [pc, #128]	; (80868 <usart_serial_getchar+0x94>)
   807e8:	4298      	cmp	r0, r3
   807ea:	d012      	beq.n	80812 <usart_serial_getchar+0x3e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   807ec:	4b1f      	ldr	r3, [pc, #124]	; (8086c <usart_serial_getchar+0x98>)
   807ee:	4298      	cmp	r0, r3
   807f0:	d019      	beq.n	80826 <usart_serial_getchar+0x52>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   807f2:	4b1f      	ldr	r3, [pc, #124]	; (80870 <usart_serial_getchar+0x9c>)
   807f4:	429c      	cmp	r4, r3
   807f6:	d020      	beq.n	8083a <usart_serial_getchar+0x66>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   807f8:	4b1e      	ldr	r3, [pc, #120]	; (80874 <usart_serial_getchar+0xa0>)
   807fa:	429c      	cmp	r4, r3
   807fc:	d027      	beq.n	8084e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   807fe:	b003      	add	sp, #12
   80800:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
   80802:	461f      	mov	r7, r3
   80804:	4e1c      	ldr	r6, [pc, #112]	; (80878 <usart_serial_getchar+0xa4>)
   80806:	4629      	mov	r1, r5
   80808:	4638      	mov	r0, r7
   8080a:	47b0      	blx	r6
   8080c:	2800      	cmp	r0, #0
   8080e:	d1fa      	bne.n	80806 <usart_serial_getchar+0x32>
   80810:	e7ef      	b.n	807f2 <usart_serial_getchar+0x1e>
		while (usart_read(p_usart, &val));
   80812:	461f      	mov	r7, r3
   80814:	4e19      	ldr	r6, [pc, #100]	; (8087c <usart_serial_getchar+0xa8>)
   80816:	a901      	add	r1, sp, #4
   80818:	4638      	mov	r0, r7
   8081a:	47b0      	blx	r6
   8081c:	2800      	cmp	r0, #0
   8081e:	d1fa      	bne.n	80816 <usart_serial_getchar+0x42>
		*data = (uint8_t)(val & 0xFF);
   80820:	9b01      	ldr	r3, [sp, #4]
   80822:	702b      	strb	r3, [r5, #0]
   80824:	e7e8      	b.n	807f8 <usart_serial_getchar+0x24>
		while (usart_read(p_usart, &val));
   80826:	461e      	mov	r6, r3
   80828:	4c14      	ldr	r4, [pc, #80]	; (8087c <usart_serial_getchar+0xa8>)
   8082a:	a901      	add	r1, sp, #4
   8082c:	4630      	mov	r0, r6
   8082e:	47a0      	blx	r4
   80830:	2800      	cmp	r0, #0
   80832:	d1fa      	bne.n	8082a <usart_serial_getchar+0x56>
		*data = (uint8_t)(val & 0xFF);
   80834:	9b01      	ldr	r3, [sp, #4]
   80836:	702b      	strb	r3, [r5, #0]
   80838:	e7e1      	b.n	807fe <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8083a:	461e      	mov	r6, r3
   8083c:	4c0f      	ldr	r4, [pc, #60]	; (8087c <usart_serial_getchar+0xa8>)
   8083e:	a901      	add	r1, sp, #4
   80840:	4630      	mov	r0, r6
   80842:	47a0      	blx	r4
   80844:	2800      	cmp	r0, #0
   80846:	d1fa      	bne.n	8083e <usart_serial_getchar+0x6a>
		*data = (uint8_t)(val & 0xFF);
   80848:	9b01      	ldr	r3, [sp, #4]
   8084a:	702b      	strb	r3, [r5, #0]
   8084c:	e7d7      	b.n	807fe <usart_serial_getchar+0x2a>
		while (usart_read(p_usart, &val));
   8084e:	461e      	mov	r6, r3
   80850:	4c0a      	ldr	r4, [pc, #40]	; (8087c <usart_serial_getchar+0xa8>)
   80852:	a901      	add	r1, sp, #4
   80854:	4630      	mov	r0, r6
   80856:	47a0      	blx	r4
   80858:	2800      	cmp	r0, #0
   8085a:	d1fa      	bne.n	80852 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
   8085c:	9b01      	ldr	r3, [sp, #4]
   8085e:	702b      	strb	r3, [r5, #0]
}
   80860:	e7cd      	b.n	807fe <usart_serial_getchar+0x2a>
   80862:	bf00      	nop
   80864:	400e0800 	.word	0x400e0800
   80868:	40098000 	.word	0x40098000
   8086c:	4009c000 	.word	0x4009c000
   80870:	400a0000 	.word	0x400a0000
   80874:	400a4000 	.word	0x400a4000
   80878:	00080797 	.word	0x00080797
   8087c:	000807bd 	.word	0x000807bd

00080880 <usart_serial_putchar>:
{
   80880:	b570      	push	{r4, r5, r6, lr}
   80882:	460c      	mov	r4, r1
	if (UART == (Uart*)p_usart) {
   80884:	4b1e      	ldr	r3, [pc, #120]	; (80900 <usart_serial_putchar+0x80>)
   80886:	4298      	cmp	r0, r3
   80888:	d00d      	beq.n	808a6 <usart_serial_putchar+0x26>
	if (USART0 == p_usart) {
   8088a:	4b1e      	ldr	r3, [pc, #120]	; (80904 <usart_serial_putchar+0x84>)
   8088c:	4298      	cmp	r0, r3
   8088e:	d013      	beq.n	808b8 <usart_serial_putchar+0x38>
	if (USART1 == p_usart) {
   80890:	4b1d      	ldr	r3, [pc, #116]	; (80908 <usart_serial_putchar+0x88>)
   80892:	4298      	cmp	r0, r3
   80894:	d019      	beq.n	808ca <usart_serial_putchar+0x4a>
	if (USART2 == p_usart) {
   80896:	4b1d      	ldr	r3, [pc, #116]	; (8090c <usart_serial_putchar+0x8c>)
   80898:	4298      	cmp	r0, r3
   8089a:	d01f      	beq.n	808dc <usart_serial_putchar+0x5c>
	if (USART3 == p_usart) {
   8089c:	4b1c      	ldr	r3, [pc, #112]	; (80910 <usart_serial_putchar+0x90>)
   8089e:	4298      	cmp	r0, r3
   808a0:	d025      	beq.n	808ee <usart_serial_putchar+0x6e>
	return 0;
   808a2:	2000      	movs	r0, #0
}
   808a4:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
   808a6:	461e      	mov	r6, r3
   808a8:	4d1a      	ldr	r5, [pc, #104]	; (80914 <usart_serial_putchar+0x94>)
   808aa:	4621      	mov	r1, r4
   808ac:	4630      	mov	r0, r6
   808ae:	47a8      	blx	r5
   808b0:	2800      	cmp	r0, #0
   808b2:	d1fa      	bne.n	808aa <usart_serial_putchar+0x2a>
		return 1;
   808b4:	2001      	movs	r0, #1
   808b6:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   808b8:	461e      	mov	r6, r3
   808ba:	4d17      	ldr	r5, [pc, #92]	; (80918 <usart_serial_putchar+0x98>)
   808bc:	4621      	mov	r1, r4
   808be:	4630      	mov	r0, r6
   808c0:	47a8      	blx	r5
   808c2:	2800      	cmp	r0, #0
   808c4:	d1fa      	bne.n	808bc <usart_serial_putchar+0x3c>
		return 1;
   808c6:	2001      	movs	r0, #1
   808c8:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   808ca:	461e      	mov	r6, r3
   808cc:	4d12      	ldr	r5, [pc, #72]	; (80918 <usart_serial_putchar+0x98>)
   808ce:	4621      	mov	r1, r4
   808d0:	4630      	mov	r0, r6
   808d2:	47a8      	blx	r5
   808d4:	2800      	cmp	r0, #0
   808d6:	d1fa      	bne.n	808ce <usart_serial_putchar+0x4e>
		return 1;
   808d8:	2001      	movs	r0, #1
   808da:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   808dc:	461e      	mov	r6, r3
   808de:	4d0e      	ldr	r5, [pc, #56]	; (80918 <usart_serial_putchar+0x98>)
   808e0:	4621      	mov	r1, r4
   808e2:	4630      	mov	r0, r6
   808e4:	47a8      	blx	r5
   808e6:	2800      	cmp	r0, #0
   808e8:	d1fa      	bne.n	808e0 <usart_serial_putchar+0x60>
		return 1;
   808ea:	2001      	movs	r0, #1
   808ec:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
   808ee:	461e      	mov	r6, r3
   808f0:	4d09      	ldr	r5, [pc, #36]	; (80918 <usart_serial_putchar+0x98>)
   808f2:	4621      	mov	r1, r4
   808f4:	4630      	mov	r0, r6
   808f6:	47a8      	blx	r5
   808f8:	2800      	cmp	r0, #0
   808fa:	d1fa      	bne.n	808f2 <usart_serial_putchar+0x72>
		return 1;
   808fc:	2001      	movs	r0, #1
   808fe:	bd70      	pop	{r4, r5, r6, pc}
   80900:	400e0800 	.word	0x400e0800
   80904:	40098000 	.word	0x40098000
   80908:	4009c000 	.word	0x4009c000
   8090c:	400a0000 	.word	0x400a0000
   80910:	400a4000 	.word	0x400a4000
   80914:	00080787 	.word	0x00080787
   80918:	000807a9 	.word	0x000807a9

0008091c <misc_init>:
* Function: misc_init
* -------------------
* initializes system clock & board.
*/
int misc_init (void)
{
   8091c:	b510      	push	{r4, lr}
	sysclk_init();
   8091e:	4b0f      	ldr	r3, [pc, #60]	; (8095c <misc_init+0x40>)
   80920:	4798      	blx	r3
	board_init();
   80922:	4b0f      	ldr	r3, [pc, #60]	; (80960 <misc_init+0x44>)
   80924:	4798      	blx	r3
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80926:	200b      	movs	r0, #11
   80928:	4c0e      	ldr	r4, [pc, #56]	; (80964 <misc_init+0x48>)
   8092a:	47a0      	blx	r4
   8092c:	200c      	movs	r0, #12
   8092e:	47a0      	blx	r4
   80930:	200d      	movs	r0, #13
   80932:	47a0      	blx	r4
   80934:	200e      	movs	r0, #14
   80936:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80938:	4b0b      	ldr	r3, [pc, #44]	; (80968 <misc_init+0x4c>)
   8093a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8093e:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80940:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   80944:	f503 7300 	add.w	r3, r3, #512	; 0x200
   80948:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8094a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
   8094e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80952:	615a      	str	r2, [r3, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80954:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	//ioport_set_pin_level(pin13, LOW); 
	//ioport_set_pin_level(pin12, LOW);
	/* ------------------------------------------------------------------------- */
	
	return 0;
}
   80958:	2000      	movs	r0, #0
   8095a:	bd10      	pop	{r4, pc}
   8095c:	00080ccd 	.word	0x00080ccd
   80960:	00080d31 	.word	0x00080d31
   80964:	000811e5 	.word	0x000811e5
   80968:	400e1000 	.word	0x400e1000

0008096c <console_init>:
* -------------------
* Enables feedback through the USB-cable back to terminal within Atmel Studio.
* Note that the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h
*/
int console_init(void)
{
   8096c:	b530      	push	{r4, r5, lr}
   8096e:	b085      	sub	sp, #20
   80970:	2008      	movs	r0, #8
   80972:	4d15      	ldr	r5, [pc, #84]	; (809c8 <console_init+0x5c>)
   80974:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   80976:	4c15      	ldr	r4, [pc, #84]	; (809cc <console_init+0x60>)
   80978:	4b15      	ldr	r3, [pc, #84]	; (809d0 <console_init+0x64>)
   8097a:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   8097c:	4a15      	ldr	r2, [pc, #84]	; (809d4 <console_init+0x68>)
   8097e:	4b16      	ldr	r3, [pc, #88]	; (809d8 <console_init+0x6c>)
   80980:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   80982:	4a16      	ldr	r2, [pc, #88]	; (809dc <console_init+0x70>)
   80984:	4b16      	ldr	r3, [pc, #88]	; (809e0 <console_init+0x74>)
   80986:	601a      	str	r2, [r3, #0]
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   80988:	4b16      	ldr	r3, [pc, #88]	; (809e4 <console_init+0x78>)
   8098a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_baudrate = opt->baudrate;
   8098c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   80990:	9302      	str	r3, [sp, #8]
	uart_settings.ul_mode = opt->paritytype;
   80992:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80996:	9303      	str	r3, [sp, #12]
   80998:	2008      	movs	r0, #8
   8099a:	47a8      	blx	r5
		uart_init((Uart*)p_usart, &uart_settings);
   8099c:	a901      	add	r1, sp, #4
   8099e:	4620      	mov	r0, r4
   809a0:	4b11      	ldr	r3, [pc, #68]	; (809e8 <console_init+0x7c>)
   809a2:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   809a4:	4d11      	ldr	r5, [pc, #68]	; (809ec <console_init+0x80>)
   809a6:	682b      	ldr	r3, [r5, #0]
   809a8:	2100      	movs	r1, #0
   809aa:	6898      	ldr	r0, [r3, #8]
   809ac:	4c10      	ldr	r4, [pc, #64]	; (809f0 <console_init+0x84>)
   809ae:	47a0      	blx	r4
	setbuf(stdin, NULL);
   809b0:	682b      	ldr	r3, [r5, #0]
   809b2:	2100      	movs	r1, #0
   809b4:	6858      	ldr	r0, [r3, #4]
   809b6:	47a0      	blx	r4

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(CONSOLE_UART_ID);
	stdio_serial_init(CONF_UART, &uart_serial_options);
	
	printf("Console ready\n");
   809b8:	480e      	ldr	r0, [pc, #56]	; (809f4 <console_init+0x88>)
   809ba:	4c0f      	ldr	r4, [pc, #60]	; (809f8 <console_init+0x8c>)
   809bc:	47a0      	blx	r4
	printf("=============\n");
   809be:	480f      	ldr	r0, [pc, #60]	; (809fc <console_init+0x90>)
   809c0:	47a0      	blx	r4
	return 0;
}
   809c2:	2000      	movs	r0, #0
   809c4:	b005      	add	sp, #20
   809c6:	bd30      	pop	{r4, r5, pc}
   809c8:	000811e5 	.word	0x000811e5
   809cc:	400e0800 	.word	0x400e0800
   809d0:	20070c94 	.word	0x20070c94
   809d4:	00080881 	.word	0x00080881
   809d8:	20070c90 	.word	0x20070c90
   809dc:	000807d5 	.word	0x000807d5
   809e0:	20070c8c 	.word	0x20070c8c
   809e4:	0501bd00 	.word	0x0501bd00
   809e8:	00080751 	.word	0x00080751
   809ec:	20070140 	.word	0x20070140
   809f0:	000819b9 	.word	0x000819b9
   809f4:	00084570 	.word	0x00084570
   809f8:	00081809 	.word	0x00081809
   809fc:	00084580 	.word	0x00084580

00080a00 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80a00:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80a02:	685a      	ldr	r2, [r3, #4]
   80a04:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80a06:	6842      	ldr	r2, [r0, #4]
   80a08:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80a0a:	685a      	ldr	r2, [r3, #4]
   80a0c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80a0e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80a10:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80a12:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80a14:	6803      	ldr	r3, [r0, #0]
   80a16:	3301      	adds	r3, #1
   80a18:	6003      	str	r3, [r0, #0]
   80a1a:	4770      	bx	lr

00080a1c <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80a1c:	6843      	ldr	r3, [r0, #4]
   80a1e:	6882      	ldr	r2, [r0, #8]
   80a20:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80a22:	6883      	ldr	r3, [r0, #8]
   80a24:	6842      	ldr	r2, [r0, #4]
   80a26:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80a28:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80a2a:	685a      	ldr	r2, [r3, #4]
   80a2c:	4290      	cmp	r0, r2
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80a2e:	bf04      	itt	eq
   80a30:	6882      	ldreq	r2, [r0, #8]
   80a32:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80a34:	2200      	movs	r2, #0
   80a36:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80a38:	681a      	ldr	r2, [r3, #0]
   80a3a:	3a01      	subs	r2, #1
   80a3c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80a3e:	6818      	ldr	r0, [r3, #0]
}
   80a40:	4770      	bx	lr
	...

00080a44 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80a44:	4b06      	ldr	r3, [pc, #24]	; (80a60 <pxCurrentTCBConst2>)
   80a46:	6819      	ldr	r1, [r3, #0]
   80a48:	6808      	ldr	r0, [r1, #0]
   80a4a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a4e:	f380 8809 	msr	PSP, r0
   80a52:	f04f 0000 	mov.w	r0, #0
   80a56:	f380 8811 	msr	BASEPRI, r0
   80a5a:	f04e 0e0d 	orr.w	lr, lr, #13
   80a5e:	4770      	bx	lr

00080a60 <pxCurrentTCBConst2>:
   80a60:	20070b14 	.word	0x20070b14

00080a64 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80a64:	f3ef 8011 	mrs	r0, BASEPRI
   80a68:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80a6c:	f381 8811 	msr	BASEPRI, r1
   80a70:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80a72:	2000      	movs	r0, #0

00080a74 <vPortClearInterruptMask>:
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80a74:	f380 8811 	msr	BASEPRI, r0
   80a78:	4770      	bx	lr
	...

00080a7c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80a7c:	f3ef 8009 	mrs	r0, PSP
   80a80:	4b0c      	ldr	r3, [pc, #48]	; (80ab4 <pxCurrentTCBConst>)
   80a82:	681a      	ldr	r2, [r3, #0]
   80a84:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80a88:	6010      	str	r0, [r2, #0]
   80a8a:	e92d 4008 	stmdb	sp!, {r3, lr}
   80a8e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80a92:	f380 8811 	msr	BASEPRI, r0
   80a96:	f000 f8c9 	bl	80c2c <vTaskSwitchContext>
   80a9a:	f04f 0000 	mov.w	r0, #0
   80a9e:	f380 8811 	msr	BASEPRI, r0
   80aa2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80aa6:	6819      	ldr	r1, [r3, #0]
   80aa8:	6808      	ldr	r0, [r1, #0]
   80aaa:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80aae:	f380 8809 	msr	PSP, r0
   80ab2:	4770      	bx	lr

00080ab4 <pxCurrentTCBConst>:
   80ab4:	20070b14 	.word	0x20070b14

00080ab8 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80ab8:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80aba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80abe:	4b05      	ldr	r3, [pc, #20]	; (80ad4 <SysTick_Handler+0x1c>)
   80ac0:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80ac2:	4b05      	ldr	r3, [pc, #20]	; (80ad8 <SysTick_Handler+0x20>)
   80ac4:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80ac6:	4b05      	ldr	r3, [pc, #20]	; (80adc <SysTick_Handler+0x24>)
   80ac8:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80aca:	2000      	movs	r0, #0
   80acc:	4b04      	ldr	r3, [pc, #16]	; (80ae0 <SysTick_Handler+0x28>)
   80ace:	4798      	blx	r3
   80ad0:	bd08      	pop	{r3, pc}
   80ad2:	bf00      	nop
   80ad4:	e000ed04 	.word	0xe000ed04
   80ad8:	00080a65 	.word	0x00080a65
   80adc:	00080b05 	.word	0x00080b05
   80ae0:	00080a75 	.word	0x00080a75

00080ae4 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
   80ae4:	b510      	push	{r4, lr}
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   80ae6:	4b04      	ldr	r3, [pc, #16]	; (80af8 <xTaskGetTickCountFromISR+0x14>)
   80ae8:	4798      	blx	r3
	xReturn = xTickCount;
   80aea:	4b04      	ldr	r3, [pc, #16]	; (80afc <xTaskGetTickCountFromISR+0x18>)
   80aec:	681c      	ldr	r4, [r3, #0]
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   80aee:	4b04      	ldr	r3, [pc, #16]	; (80b00 <xTaskGetTickCountFromISR+0x1c>)
   80af0:	4798      	blx	r3

	return xReturn;
}
   80af2:	4620      	mov	r0, r4
   80af4:	bd10      	pop	{r4, pc}
   80af6:	bf00      	nop
   80af8:	00080a65 	.word	0x00080a65
   80afc:	20070b98 	.word	0x20070b98
   80b00:	00080a75 	.word	0x00080a75

00080b04 <vTaskIncrementTick>:

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   80b04:	4b3d      	ldr	r3, [pc, #244]	; (80bfc <vTaskIncrementTick+0xf8>)
   80b06:	681b      	ldr	r3, [r3, #0]
   80b08:	2b00      	cmp	r3, #0
   80b0a:	d16f      	bne.n	80bec <vTaskIncrementTick+0xe8>
{
   80b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	{
		++xTickCount;
   80b10:	4b3b      	ldr	r3, [pc, #236]	; (80c00 <vTaskIncrementTick+0xfc>)
   80b12:	681a      	ldr	r2, [r3, #0]
   80b14:	3201      	adds	r2, #1
   80b16:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   80b18:	681b      	ldr	r3, [r3, #0]
   80b1a:	b9ab      	cbnz	r3, 80b48 <vTaskIncrementTick+0x44>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80b1c:	4b39      	ldr	r3, [pc, #228]	; (80c04 <vTaskIncrementTick+0x100>)
   80b1e:	681b      	ldr	r3, [r3, #0]
   80b20:	681b      	ldr	r3, [r3, #0]
   80b22:	2b00      	cmp	r3, #0
   80b24:	d128      	bne.n	80b78 <vTaskIncrementTick+0x74>

			pxTemp = pxDelayedTaskList;
   80b26:	4b37      	ldr	r3, [pc, #220]	; (80c04 <vTaskIncrementTick+0x100>)
   80b28:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   80b2a:	4a37      	ldr	r2, [pc, #220]	; (80c08 <vTaskIncrementTick+0x104>)
   80b2c:	6810      	ldr	r0, [r2, #0]
   80b2e:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   80b30:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   80b32:	4936      	ldr	r1, [pc, #216]	; (80c0c <vTaskIncrementTick+0x108>)
   80b34:	680a      	ldr	r2, [r1, #0]
   80b36:	3201      	adds	r2, #1
   80b38:	600a      	str	r2, [r1, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   80b3a:	681b      	ldr	r3, [r3, #0]
   80b3c:	681b      	ldr	r3, [r3, #0]
   80b3e:	b9fb      	cbnz	r3, 80b80 <vTaskIncrementTick+0x7c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   80b40:	f04f 32ff 	mov.w	r2, #4294967295
   80b44:	4b32      	ldr	r3, [pc, #200]	; (80c10 <vTaskIncrementTick+0x10c>)
   80b46:	601a      	str	r2, [r3, #0]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   80b48:	4b2d      	ldr	r3, [pc, #180]	; (80c00 <vTaskIncrementTick+0xfc>)
   80b4a:	681a      	ldr	r2, [r3, #0]
   80b4c:	4b30      	ldr	r3, [pc, #192]	; (80c10 <vTaskIncrementTick+0x10c>)
   80b4e:	681b      	ldr	r3, [r3, #0]
   80b50:	429a      	cmp	r2, r3
   80b52:	d350      	bcc.n	80bf6 <vTaskIncrementTick+0xf2>
   80b54:	4b2b      	ldr	r3, [pc, #172]	; (80c04 <vTaskIncrementTick+0x100>)
   80b56:	681b      	ldr	r3, [r3, #0]
   80b58:	681b      	ldr	r3, [r3, #0]
   80b5a:	b1cb      	cbz	r3, 80b90 <vTaskIncrementTick+0x8c>
   80b5c:	4b29      	ldr	r3, [pc, #164]	; (80c04 <vTaskIncrementTick+0x100>)
   80b5e:	681b      	ldr	r3, [r3, #0]
   80b60:	68db      	ldr	r3, [r3, #12]
   80b62:	68dc      	ldr	r4, [r3, #12]
   80b64:	6863      	ldr	r3, [r4, #4]
   80b66:	4a26      	ldr	r2, [pc, #152]	; (80c00 <vTaskIncrementTick+0xfc>)
   80b68:	6812      	ldr	r2, [r2, #0]
   80b6a:	4293      	cmp	r3, r2
   80b6c:	d816      	bhi.n	80b9c <vTaskIncrementTick+0x98>
   80b6e:	4e29      	ldr	r6, [pc, #164]	; (80c14 <vTaskIncrementTick+0x110>)
   80b70:	4f29      	ldr	r7, [pc, #164]	; (80c18 <vTaskIncrementTick+0x114>)
   80b72:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80c28 <vTaskIncrementTick+0x124>
   80b76:	e02f      	b.n	80bd8 <vTaskIncrementTick+0xd4>
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   80b78:	4b28      	ldr	r3, [pc, #160]	; (80c1c <vTaskIncrementTick+0x118>)
   80b7a:	4798      	blx	r3
   80b7c:	bf00      	nop
   80b7e:	e7fd      	b.n	80b7c <vTaskIncrementTick+0x78>
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   80b80:	4b20      	ldr	r3, [pc, #128]	; (80c04 <vTaskIncrementTick+0x100>)
   80b82:	681b      	ldr	r3, [r3, #0]
   80b84:	68db      	ldr	r3, [r3, #12]
   80b86:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   80b88:	685a      	ldr	r2, [r3, #4]
   80b8a:	4b21      	ldr	r3, [pc, #132]	; (80c10 <vTaskIncrementTick+0x10c>)
   80b8c:	601a      	str	r2, [r3, #0]
   80b8e:	e7db      	b.n	80b48 <vTaskIncrementTick+0x44>
		prvCheckDelayedTasks();
   80b90:	f04f 32ff 	mov.w	r2, #4294967295
   80b94:	4b1e      	ldr	r3, [pc, #120]	; (80c10 <vTaskIncrementTick+0x10c>)
   80b96:	601a      	str	r2, [r3, #0]
   80b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80b9c:	4a1c      	ldr	r2, [pc, #112]	; (80c10 <vTaskIncrementTick+0x10c>)
   80b9e:	6013      	str	r3, [r2, #0]
   80ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80ba4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   80ba6:	683b      	ldr	r3, [r7, #0]
   80ba8:	4298      	cmp	r0, r3
   80baa:	bf88      	it	hi
   80bac:	6038      	strhi	r0, [r7, #0]
   80bae:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   80bb2:	4629      	mov	r1, r5
   80bb4:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   80bb8:	4b19      	ldr	r3, [pc, #100]	; (80c20 <vTaskIncrementTick+0x11c>)
   80bba:	4798      	blx	r3
   80bbc:	4b11      	ldr	r3, [pc, #68]	; (80c04 <vTaskIncrementTick+0x100>)
   80bbe:	681b      	ldr	r3, [r3, #0]
   80bc0:	681b      	ldr	r3, [r3, #0]
   80bc2:	2b00      	cmp	r3, #0
   80bc4:	d0e4      	beq.n	80b90 <vTaskIncrementTick+0x8c>
   80bc6:	4b0f      	ldr	r3, [pc, #60]	; (80c04 <vTaskIncrementTick+0x100>)
   80bc8:	681b      	ldr	r3, [r3, #0]
   80bca:	68db      	ldr	r3, [r3, #12]
   80bcc:	68dc      	ldr	r4, [r3, #12]
   80bce:	6863      	ldr	r3, [r4, #4]
   80bd0:	4a0b      	ldr	r2, [pc, #44]	; (80c00 <vTaskIncrementTick+0xfc>)
   80bd2:	6812      	ldr	r2, [r2, #0]
   80bd4:	4293      	cmp	r3, r2
   80bd6:	d8e1      	bhi.n	80b9c <vTaskIncrementTick+0x98>
   80bd8:	1d25      	adds	r5, r4, #4
   80bda:	4628      	mov	r0, r5
   80bdc:	47b0      	blx	r6
   80bde:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   80be0:	2b00      	cmp	r3, #0
   80be2:	d0df      	beq.n	80ba4 <vTaskIncrementTick+0xa0>
   80be4:	f104 0018 	add.w	r0, r4, #24
   80be8:	47b0      	blx	r6
   80bea:	e7db      	b.n	80ba4 <vTaskIncrementTick+0xa0>
	}
	else
	{
		++uxMissedTicks;
   80bec:	4a0d      	ldr	r2, [pc, #52]	; (80c24 <vTaskIncrementTick+0x120>)
   80bee:	6813      	ldr	r3, [r2, #0]
   80bf0:	3301      	adds	r3, #1
   80bf2:	6013      	str	r3, [r2, #0]
		{
			vApplicationTickHook();
		}
	}
	#endif
}
   80bf4:	4770      	bx	lr
   80bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80bfa:	bf00      	nop
   80bfc:	20070b88 	.word	0x20070b88
   80c00:	20070b98 	.word	0x20070b98
   80c04:	20070b18 	.word	0x20070b18
   80c08:	20070b1c 	.word	0x20070b1c
   80c0c:	20070b94 	.word	0x20070b94
   80c10:	20070138 	.word	0x20070138
   80c14:	00080a1d 	.word	0x00080a1d
   80c18:	20070b8c 	.word	0x20070b8c
   80c1c:	00080a65 	.word	0x00080a65
   80c20:	00080a01 	.word	0x00080a01
   80c24:	20070b84 	.word	0x20070b84
   80c28:	20070b20 	.word	0x20070b20

00080c2c <vTaskSwitchContext>:
#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   80c2c:	4b21      	ldr	r3, [pc, #132]	; (80cb4 <vTaskSwitchContext+0x88>)
   80c2e:	681b      	ldr	r3, [r3, #0]
   80c30:	b9eb      	cbnz	r3, 80c6e <vTaskSwitchContext+0x42>
{
   80c32:	b510      	push	{r4, lr}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   80c34:	4b20      	ldr	r3, [pc, #128]	; (80cb8 <vTaskSwitchContext+0x8c>)
   80c36:	681b      	ldr	r3, [r3, #0]
   80c38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80c3c:	009b      	lsls	r3, r3, #2
   80c3e:	4a1f      	ldr	r2, [pc, #124]	; (80cbc <vTaskSwitchContext+0x90>)
   80c40:	58d3      	ldr	r3, [r2, r3]
   80c42:	b9c3      	cbnz	r3, 80c76 <vTaskSwitchContext+0x4a>
   80c44:	4b1c      	ldr	r3, [pc, #112]	; (80cb8 <vTaskSwitchContext+0x8c>)
   80c46:	681b      	ldr	r3, [r3, #0]
   80c48:	b16b      	cbz	r3, 80c66 <vTaskSwitchContext+0x3a>
   80c4a:	4a1b      	ldr	r2, [pc, #108]	; (80cb8 <vTaskSwitchContext+0x8c>)
   80c4c:	491b      	ldr	r1, [pc, #108]	; (80cbc <vTaskSwitchContext+0x90>)
   80c4e:	6813      	ldr	r3, [r2, #0]
   80c50:	3b01      	subs	r3, #1
   80c52:	6013      	str	r3, [r2, #0]
   80c54:	6813      	ldr	r3, [r2, #0]
   80c56:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80c5a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   80c5e:	b953      	cbnz	r3, 80c76 <vTaskSwitchContext+0x4a>
   80c60:	6813      	ldr	r3, [r2, #0]
   80c62:	2b00      	cmp	r3, #0
   80c64:	d1f3      	bne.n	80c4e <vTaskSwitchContext+0x22>
   80c66:	4b16      	ldr	r3, [pc, #88]	; (80cc0 <vTaskSwitchContext+0x94>)
   80c68:	4798      	blx	r3
   80c6a:	bf00      	nop
   80c6c:	e7fd      	b.n	80c6a <vTaskSwitchContext+0x3e>
		xMissedYield = pdTRUE;
   80c6e:	2201      	movs	r2, #1
   80c70:	4b14      	ldr	r3, [pc, #80]	; (80cc4 <vTaskSwitchContext+0x98>)
   80c72:	601a      	str	r2, [r3, #0]
   80c74:	4770      	bx	lr
		taskSELECT_HIGHEST_PRIORITY_TASK();
   80c76:	4b10      	ldr	r3, [pc, #64]	; (80cb8 <vTaskSwitchContext+0x8c>)
   80c78:	681b      	ldr	r3, [r3, #0]
   80c7a:	4a10      	ldr	r2, [pc, #64]	; (80cbc <vTaskSwitchContext+0x90>)
   80c7c:	0099      	lsls	r1, r3, #2
   80c7e:	18c8      	adds	r0, r1, r3
   80c80:	eb02 0080 	add.w	r0, r2, r0, lsl #2
   80c84:	6844      	ldr	r4, [r0, #4]
   80c86:	6864      	ldr	r4, [r4, #4]
   80c88:	6044      	str	r4, [r0, #4]
   80c8a:	4419      	add	r1, r3
   80c8c:	4602      	mov	r2, r0
   80c8e:	3208      	adds	r2, #8
   80c90:	4294      	cmp	r4, r2
   80c92:	d009      	beq.n	80ca8 <vTaskSwitchContext+0x7c>
   80c94:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   80c98:	4a08      	ldr	r2, [pc, #32]	; (80cbc <vTaskSwitchContext+0x90>)
   80c9a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   80c9e:	685b      	ldr	r3, [r3, #4]
   80ca0:	68da      	ldr	r2, [r3, #12]
   80ca2:	4b09      	ldr	r3, [pc, #36]	; (80cc8 <vTaskSwitchContext+0x9c>)
   80ca4:	601a      	str	r2, [r3, #0]
   80ca6:	bd10      	pop	{r4, pc}
   80ca8:	6860      	ldr	r0, [r4, #4]
   80caa:	4a04      	ldr	r2, [pc, #16]	; (80cbc <vTaskSwitchContext+0x90>)
   80cac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
   80cb0:	6050      	str	r0, [r2, #4]
   80cb2:	e7ef      	b.n	80c94 <vTaskSwitchContext+0x68>
   80cb4:	20070b88 	.word	0x20070b88
   80cb8:	20070b8c 	.word	0x20070b8c
   80cbc:	20070b20 	.word	0x20070b20
   80cc0:	00080a65 	.word	0x00080a65
   80cc4:	20070b90 	.word	0x20070b90
   80cc8:	20070b14 	.word	0x20070b14

00080ccc <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80ccc:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   80cce:	480e      	ldr	r0, [pc, #56]	; (80d08 <sysclk_init+0x3c>)
   80cd0:	4b0e      	ldr	r3, [pc, #56]	; (80d0c <sysclk_init+0x40>)
   80cd2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80cd4:	213e      	movs	r1, #62	; 0x3e
   80cd6:	2000      	movs	r0, #0
   80cd8:	4b0d      	ldr	r3, [pc, #52]	; (80d10 <sysclk_init+0x44>)
   80cda:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80cdc:	4c0d      	ldr	r4, [pc, #52]	; (80d14 <sysclk_init+0x48>)
   80cde:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80ce0:	2800      	cmp	r0, #0
   80ce2:	d0fc      	beq.n	80cde <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80ce4:	4b0c      	ldr	r3, [pc, #48]	; (80d18 <sysclk_init+0x4c>)
   80ce6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80ce8:	4a0c      	ldr	r2, [pc, #48]	; (80d1c <sysclk_init+0x50>)
   80cea:	4b0d      	ldr	r3, [pc, #52]	; (80d20 <sysclk_init+0x54>)
   80cec:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   80cee:	4c0d      	ldr	r4, [pc, #52]	; (80d24 <sysclk_init+0x58>)
   80cf0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80cf2:	2800      	cmp	r0, #0
   80cf4:	d0fc      	beq.n	80cf0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80cf6:	2010      	movs	r0, #16
   80cf8:	4b0b      	ldr	r3, [pc, #44]	; (80d28 <sysclk_init+0x5c>)
   80cfa:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80cfc:	4b0b      	ldr	r3, [pc, #44]	; (80d2c <sysclk_init+0x60>)
   80cfe:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80d00:	4801      	ldr	r0, [pc, #4]	; (80d08 <sysclk_init+0x3c>)
   80d02:	4b02      	ldr	r3, [pc, #8]	; (80d0c <sysclk_init+0x40>)
   80d04:	4798      	blx	r3
   80d06:	bd10      	pop	{r4, pc}
   80d08:	0501bd00 	.word	0x0501bd00
   80d0c:	200700b1 	.word	0x200700b1
   80d10:	00081161 	.word	0x00081161
   80d14:	000811b5 	.word	0x000811b5
   80d18:	000811c5 	.word	0x000811c5
   80d1c:	200d3f01 	.word	0x200d3f01
   80d20:	400e0600 	.word	0x400e0600
   80d24:	000811d5 	.word	0x000811d5
   80d28:	000810fd 	.word	0x000810fd
   80d2c:	000812d5 	.word	0x000812d5

00080d30 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80d30:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80d32:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80d36:	4b16      	ldr	r3, [pc, #88]	; (80d90 <board_init+0x60>)
   80d38:	605a      	str	r2, [r3, #4]
   80d3a:	200b      	movs	r0, #11
   80d3c:	4c15      	ldr	r4, [pc, #84]	; (80d94 <board_init+0x64>)
   80d3e:	47a0      	blx	r4
   80d40:	200c      	movs	r0, #12
   80d42:	47a0      	blx	r4
   80d44:	200d      	movs	r0, #13
   80d46:	47a0      	blx	r4
   80d48:	200e      	movs	r0, #14
   80d4a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80d4c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80d50:	203b      	movs	r0, #59	; 0x3b
   80d52:	4c11      	ldr	r4, [pc, #68]	; (80d98 <board_init+0x68>)
   80d54:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80d56:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80d5a:	2055      	movs	r0, #85	; 0x55
   80d5c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80d5e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80d62:	2056      	movs	r0, #86	; 0x56
   80d64:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80d66:	490d      	ldr	r1, [pc, #52]	; (80d9c <board_init+0x6c>)
   80d68:	2068      	movs	r0, #104	; 0x68
   80d6a:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80d6c:	490c      	ldr	r1, [pc, #48]	; (80da0 <board_init+0x70>)
   80d6e:	205c      	movs	r0, #92	; 0x5c
   80d70:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   80d72:	4a0c      	ldr	r2, [pc, #48]	; (80da4 <board_init+0x74>)
   80d74:	f44f 7140 	mov.w	r1, #768	; 0x300
   80d78:	480b      	ldr	r0, [pc, #44]	; (80da8 <board_init+0x78>)
   80d7a:	4b0c      	ldr	r3, [pc, #48]	; (80dac <board_init+0x7c>)
   80d7c:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80d7e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d82:	202b      	movs	r0, #43	; 0x2b
   80d84:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80d86:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80d8a:	202a      	movs	r0, #42	; 0x2a
   80d8c:	47a0      	blx	r4
   80d8e:	bd10      	pop	{r4, pc}
   80d90:	400e1a50 	.word	0x400e1a50
   80d94:	000811e5 	.word	0x000811e5
   80d98:	00080e81 	.word	0x00080e81
   80d9c:	28000079 	.word	0x28000079
   80da0:	28000001 	.word	0x28000001
   80da4:	08000001 	.word	0x08000001
   80da8:	400e0e00 	.word	0x400e0e00
   80dac:	00080f51 	.word	0x00080f51

00080db0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80db0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   80db2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80db6:	d016      	beq.n	80de6 <pio_set_peripheral+0x36>
   80db8:	d80b      	bhi.n	80dd2 <pio_set_peripheral+0x22>
   80dba:	b149      	cbz	r1, 80dd0 <pio_set_peripheral+0x20>
   80dbc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80dc0:	d105      	bne.n	80dce <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80dc2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80dc4:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80dc6:	400b      	ands	r3, r1
   80dc8:	ea23 0302 	bic.w	r3, r3, r2
   80dcc:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80dce:	6042      	str	r2, [r0, #4]
   80dd0:	4770      	bx	lr
	switch (ul_type) {
   80dd2:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80dd6:	d0fb      	beq.n	80dd0 <pio_set_peripheral+0x20>
   80dd8:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80ddc:	d0f8      	beq.n	80dd0 <pio_set_peripheral+0x20>
   80dde:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80de2:	d1f4      	bne.n	80dce <pio_set_peripheral+0x1e>
   80de4:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80de6:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80de8:	4313      	orrs	r3, r2
   80dea:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80dec:	e7ef      	b.n	80dce <pio_set_peripheral+0x1e>

00080dee <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80dee:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80df0:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80df4:	bf14      	ite	ne
   80df6:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80df8:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80dfa:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80dfe:	bf14      	ite	ne
   80e00:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80e02:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80e04:	f012 0f02 	tst.w	r2, #2
   80e08:	d107      	bne.n	80e1a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   80e0a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80e0e:	bf18      	it	ne
   80e10:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80e14:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80e16:	6001      	str	r1, [r0, #0]
   80e18:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   80e1a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80e1e:	e7f9      	b.n	80e14 <pio_set_input+0x26>

00080e20 <pio_set_output>:
{
   80e20:	b410      	push	{r4}
   80e22:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80e24:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80e26:	b944      	cbnz	r4, 80e3a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80e28:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   80e2a:	b143      	cbz	r3, 80e3e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   80e2c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   80e2e:	b942      	cbnz	r2, 80e42 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80e30:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80e32:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80e34:	6001      	str	r1, [r0, #0]
}
   80e36:	bc10      	pop	{r4}
   80e38:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   80e3a:	6641      	str	r1, [r0, #100]	; 0x64
   80e3c:	e7f5      	b.n	80e2a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   80e3e:	6541      	str	r1, [r0, #84]	; 0x54
   80e40:	e7f5      	b.n	80e2e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80e42:	6301      	str	r1, [r0, #48]	; 0x30
   80e44:	e7f5      	b.n	80e32 <pio_set_output+0x12>

00080e46 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80e46:	f012 0f10 	tst.w	r2, #16
   80e4a:	d010      	beq.n	80e6e <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   80e4c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80e50:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80e54:	bf14      	ite	ne
   80e56:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   80e5a:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   80e5e:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   80e62:	bf14      	ite	ne
   80e64:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   80e68:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   80e6c:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   80e6e:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   80e72:	4770      	bx	lr

00080e74 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   80e74:	6401      	str	r1, [r0, #64]	; 0x40
   80e76:	4770      	bx	lr

00080e78 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80e78:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80e7a:	4770      	bx	lr

00080e7c <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80e7c:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   80e7e:	4770      	bx	lr

00080e80 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   80e80:	b570      	push	{r4, r5, r6, lr}
   80e82:	b082      	sub	sp, #8
   80e84:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80e86:	0943      	lsrs	r3, r0, #5
   80e88:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   80e8c:	f203 7307 	addw	r3, r3, #1799	; 0x707
   80e90:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   80e92:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   80e96:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80e9a:	d031      	beq.n	80f00 <pio_configure_pin+0x80>
   80e9c:	d816      	bhi.n	80ecc <pio_configure_pin+0x4c>
   80e9e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80ea2:	d01b      	beq.n	80edc <pio_configure_pin+0x5c>
   80ea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80ea8:	d116      	bne.n	80ed8 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80eaa:	f000 001f 	and.w	r0, r0, #31
   80eae:	2601      	movs	r6, #1
   80eb0:	4086      	lsls	r6, r0
   80eb2:	4632      	mov	r2, r6
   80eb4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80eb8:	4620      	mov	r0, r4
   80eba:	4b22      	ldr	r3, [pc, #136]	; (80f44 <pio_configure_pin+0xc4>)
   80ebc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ebe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ec2:	bf14      	ite	ne
   80ec4:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ec6:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80ec8:	2001      	movs	r0, #1
   80eca:	e017      	b.n	80efc <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   80ecc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80ed0:	d021      	beq.n	80f16 <pio_configure_pin+0x96>
   80ed2:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80ed6:	d01e      	beq.n	80f16 <pio_configure_pin+0x96>
		return 0;
   80ed8:	2000      	movs	r0, #0
   80eda:	e00f      	b.n	80efc <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80edc:	f000 001f 	and.w	r0, r0, #31
   80ee0:	2601      	movs	r6, #1
   80ee2:	4086      	lsls	r6, r0
   80ee4:	4632      	mov	r2, r6
   80ee6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80eea:	4620      	mov	r0, r4
   80eec:	4b15      	ldr	r3, [pc, #84]	; (80f44 <pio_configure_pin+0xc4>)
   80eee:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80ef0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80ef4:	bf14      	ite	ne
   80ef6:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80ef8:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80efa:	2001      	movs	r0, #1
}
   80efc:	b002      	add	sp, #8
   80efe:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80f00:	f000 011f 	and.w	r1, r0, #31
   80f04:	2601      	movs	r6, #1
   80f06:	462a      	mov	r2, r5
   80f08:	fa06 f101 	lsl.w	r1, r6, r1
   80f0c:	4620      	mov	r0, r4
   80f0e:	4b0e      	ldr	r3, [pc, #56]	; (80f48 <pio_configure_pin+0xc8>)
   80f10:	4798      	blx	r3
	return 1;
   80f12:	4630      	mov	r0, r6
		break;
   80f14:	e7f2      	b.n	80efc <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80f16:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80f1a:	f000 011f 	and.w	r1, r0, #31
   80f1e:	2601      	movs	r6, #1
   80f20:	ea05 0306 	and.w	r3, r5, r6
   80f24:	9300      	str	r3, [sp, #0]
   80f26:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80f2a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80f2e:	bf14      	ite	ne
   80f30:	2200      	movne	r2, #0
   80f32:	2201      	moveq	r2, #1
   80f34:	fa06 f101 	lsl.w	r1, r6, r1
   80f38:	4620      	mov	r0, r4
   80f3a:	4c04      	ldr	r4, [pc, #16]	; (80f4c <pio_configure_pin+0xcc>)
   80f3c:	47a0      	blx	r4
	return 1;
   80f3e:	4630      	mov	r0, r6
		break;
   80f40:	e7dc      	b.n	80efc <pio_configure_pin+0x7c>
   80f42:	bf00      	nop
   80f44:	00080db1 	.word	0x00080db1
   80f48:	00080def 	.word	0x00080def
   80f4c:	00080e21 	.word	0x00080e21

00080f50 <pio_configure_pin_group>:
{
   80f50:	b570      	push	{r4, r5, r6, lr}
   80f52:	b082      	sub	sp, #8
   80f54:	4605      	mov	r5, r0
   80f56:	460e      	mov	r6, r1
   80f58:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   80f5a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   80f5e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   80f62:	d027      	beq.n	80fb4 <pio_configure_pin_group+0x64>
   80f64:	d811      	bhi.n	80f8a <pio_configure_pin_group+0x3a>
   80f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   80f6a:	d016      	beq.n	80f9a <pio_configure_pin_group+0x4a>
   80f6c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   80f70:	d111      	bne.n	80f96 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   80f72:	460a      	mov	r2, r1
   80f74:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80f78:	4b19      	ldr	r3, [pc, #100]	; (80fe0 <pio_configure_pin_group+0x90>)
   80f7a:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80f7c:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80f80:	bf14      	ite	ne
   80f82:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80f84:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80f86:	2001      	movs	r0, #1
   80f88:	e012      	b.n	80fb0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   80f8a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80f8e:	d015      	beq.n	80fbc <pio_configure_pin_group+0x6c>
   80f90:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80f94:	d012      	beq.n	80fbc <pio_configure_pin_group+0x6c>
		return 0;
   80f96:	2000      	movs	r0, #0
   80f98:	e00a      	b.n	80fb0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80f9a:	460a      	mov	r2, r1
   80f9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fa0:	4b0f      	ldr	r3, [pc, #60]	; (80fe0 <pio_configure_pin_group+0x90>)
   80fa2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80fa4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   80fa8:	bf14      	ite	ne
   80faa:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80fac:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   80fae:	2001      	movs	r0, #1
}
   80fb0:	b002      	add	sp, #8
   80fb2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   80fb4:	4b0b      	ldr	r3, [pc, #44]	; (80fe4 <pio_configure_pin_group+0x94>)
   80fb6:	4798      	blx	r3
	return 1;
   80fb8:	2001      	movs	r0, #1
		break;
   80fba:	e7f9      	b.n	80fb0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80fbc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80fc0:	f004 0301 	and.w	r3, r4, #1
   80fc4:	9300      	str	r3, [sp, #0]
   80fc6:	f3c4 0380 	ubfx	r3, r4, #2, #1
   80fca:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80fce:	bf14      	ite	ne
   80fd0:	2200      	movne	r2, #0
   80fd2:	2201      	moveq	r2, #1
   80fd4:	4631      	mov	r1, r6
   80fd6:	4628      	mov	r0, r5
   80fd8:	4c03      	ldr	r4, [pc, #12]	; (80fe8 <pio_configure_pin_group+0x98>)
   80fda:	47a0      	blx	r4
	return 1;
   80fdc:	2001      	movs	r0, #1
		break;
   80fde:	e7e7      	b.n	80fb0 <pio_configure_pin_group+0x60>
   80fe0:	00080db1 	.word	0x00080db1
   80fe4:	00080def 	.word	0x00080def
   80fe8:	00080e21 	.word	0x00080e21

00080fec <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ff0:	4604      	mov	r4, r0
   80ff2:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80ff4:	4b0e      	ldr	r3, [pc, #56]	; (81030 <pio_handler_process+0x44>)
   80ff6:	4798      	blx	r3
   80ff8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80ffa:	4620      	mov	r0, r4
   80ffc:	4b0d      	ldr	r3, [pc, #52]	; (81034 <pio_handler_process+0x48>)
   80ffe:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   81000:	4005      	ands	r5, r0
   81002:	d013      	beq.n	8102c <pio_handler_process+0x40>
   81004:	4c0c      	ldr	r4, [pc, #48]	; (81038 <pio_handler_process+0x4c>)
   81006:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8100a:	e003      	b.n	81014 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8100c:	42b4      	cmp	r4, r6
   8100e:	d00d      	beq.n	8102c <pio_handler_process+0x40>
   81010:	3410      	adds	r4, #16
		while (status != 0) {
   81012:	b15d      	cbz	r5, 8102c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   81014:	6820      	ldr	r0, [r4, #0]
   81016:	4540      	cmp	r0, r8
   81018:	d1f8      	bne.n	8100c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8101a:	6861      	ldr	r1, [r4, #4]
   8101c:	4229      	tst	r1, r5
   8101e:	d0f5      	beq.n	8100c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   81020:	68e3      	ldr	r3, [r4, #12]
   81022:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   81024:	6863      	ldr	r3, [r4, #4]
   81026:	ea25 0503 	bic.w	r5, r5, r3
   8102a:	e7ef      	b.n	8100c <pio_handler_process+0x20>
   8102c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81030:	00080e79 	.word	0x00080e79
   81034:	00080e7d 	.word	0x00080e7d
   81038:	20070b9c 	.word	0x20070b9c

0008103c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   8103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8103e:	4c18      	ldr	r4, [pc, #96]	; (810a0 <pio_handler_set+0x64>)
   81040:	6826      	ldr	r6, [r4, #0]
   81042:	2e06      	cmp	r6, #6
   81044:	d829      	bhi.n	8109a <pio_handler_set+0x5e>
   81046:	f04f 0c00 	mov.w	ip, #0
   8104a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8104c:	4f15      	ldr	r7, [pc, #84]	; (810a4 <pio_handler_set+0x68>)
   8104e:	e004      	b.n	8105a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   81050:	3401      	adds	r4, #1
   81052:	b2e4      	uxtb	r4, r4
   81054:	46a4      	mov	ip, r4
   81056:	42a6      	cmp	r6, r4
   81058:	d309      	bcc.n	8106e <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   8105a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8105c:	0125      	lsls	r5, r4, #4
   8105e:	597d      	ldr	r5, [r7, r5]
   81060:	428d      	cmp	r5, r1
   81062:	d1f5      	bne.n	81050 <pio_handler_set+0x14>
   81064:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   81068:	686d      	ldr	r5, [r5, #4]
   8106a:	4295      	cmp	r5, r2
   8106c:	d1f0      	bne.n	81050 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   8106e:	4d0d      	ldr	r5, [pc, #52]	; (810a4 <pio_handler_set+0x68>)
   81070:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   81074:	eb05 040e 	add.w	r4, r5, lr
   81078:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   8107c:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   8107e:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   81080:	9906      	ldr	r1, [sp, #24]
   81082:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   81084:	3601      	adds	r6, #1
   81086:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   81088:	bf04      	itt	eq
   8108a:	4905      	ldreq	r1, [pc, #20]	; (810a0 <pio_handler_set+0x64>)
   8108c:	600e      	streq	r6, [r1, #0]
   8108e:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   81090:	461a      	mov	r2, r3
   81092:	4b05      	ldr	r3, [pc, #20]	; (810a8 <pio_handler_set+0x6c>)
   81094:	4798      	blx	r3

	return 0;
   81096:	2000      	movs	r0, #0
   81098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   8109a:	2001      	movs	r0, #1
}
   8109c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8109e:	bf00      	nop
   810a0:	20070c0c 	.word	0x20070c0c
   810a4:	20070b9c 	.word	0x20070b9c
   810a8:	00080e47 	.word	0x00080e47

000810ac <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   810ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   810ae:	210b      	movs	r1, #11
   810b0:	4801      	ldr	r0, [pc, #4]	; (810b8 <PIOA_Handler+0xc>)
   810b2:	4b02      	ldr	r3, [pc, #8]	; (810bc <PIOA_Handler+0x10>)
   810b4:	4798      	blx	r3
   810b6:	bd08      	pop	{r3, pc}
   810b8:	400e0e00 	.word	0x400e0e00
   810bc:	00080fed 	.word	0x00080fed

000810c0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   810c0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   810c2:	210c      	movs	r1, #12
   810c4:	4801      	ldr	r0, [pc, #4]	; (810cc <PIOB_Handler+0xc>)
   810c6:	4b02      	ldr	r3, [pc, #8]	; (810d0 <PIOB_Handler+0x10>)
   810c8:	4798      	blx	r3
   810ca:	bd08      	pop	{r3, pc}
   810cc:	400e1000 	.word	0x400e1000
   810d0:	00080fed 	.word	0x00080fed

000810d4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   810d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   810d6:	210d      	movs	r1, #13
   810d8:	4801      	ldr	r0, [pc, #4]	; (810e0 <PIOC_Handler+0xc>)
   810da:	4b02      	ldr	r3, [pc, #8]	; (810e4 <PIOC_Handler+0x10>)
   810dc:	4798      	blx	r3
   810de:	bd08      	pop	{r3, pc}
   810e0:	400e1200 	.word	0x400e1200
   810e4:	00080fed 	.word	0x00080fed

000810e8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   810e8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   810ea:	210e      	movs	r1, #14
   810ec:	4801      	ldr	r0, [pc, #4]	; (810f4 <PIOD_Handler+0xc>)
   810ee:	4b02      	ldr	r3, [pc, #8]	; (810f8 <PIOD_Handler+0x10>)
   810f0:	4798      	blx	r3
   810f2:	bd08      	pop	{r3, pc}
   810f4:	400e1400 	.word	0x400e1400
   810f8:	00080fed 	.word	0x00080fed

000810fc <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   810fc:	4a17      	ldr	r2, [pc, #92]	; (8115c <pmc_switch_mck_to_pllack+0x60>)
   810fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
   81100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   81104:	4318      	orrs	r0, r3
   81106:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81108:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8110a:	f013 0f08 	tst.w	r3, #8
   8110e:	d10a      	bne.n	81126 <pmc_switch_mck_to_pllack+0x2a>
   81110:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81114:	4911      	ldr	r1, [pc, #68]	; (8115c <pmc_switch_mck_to_pllack+0x60>)
   81116:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81118:	f012 0f08 	tst.w	r2, #8
   8111c:	d103      	bne.n	81126 <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8111e:	3b01      	subs	r3, #1
   81120:	d1f9      	bne.n	81116 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
   81122:	2001      	movs	r0, #1
   81124:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81126:	4a0d      	ldr	r2, [pc, #52]	; (8115c <pmc_switch_mck_to_pllack+0x60>)
   81128:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8112a:	f023 0303 	bic.w	r3, r3, #3
   8112e:	f043 0302 	orr.w	r3, r3, #2
   81132:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81134:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81136:	f013 0f08 	tst.w	r3, #8
   8113a:	d10a      	bne.n	81152 <pmc_switch_mck_to_pllack+0x56>
   8113c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81140:	4906      	ldr	r1, [pc, #24]	; (8115c <pmc_switch_mck_to_pllack+0x60>)
   81142:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81144:	f012 0f08 	tst.w	r2, #8
   81148:	d105      	bne.n	81156 <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8114a:	3b01      	subs	r3, #1
   8114c:	d1f9      	bne.n	81142 <pmc_switch_mck_to_pllack+0x46>
			return 1;
   8114e:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   81150:	4770      	bx	lr
	return 0;
   81152:	2000      	movs	r0, #0
   81154:	4770      	bx	lr
   81156:	2000      	movs	r0, #0
   81158:	4770      	bx	lr
   8115a:	bf00      	nop
   8115c:	400e0600 	.word	0x400e0600

00081160 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   81160:	b9c8      	cbnz	r0, 81196 <pmc_switch_mainck_to_xtal+0x36>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   81162:	4a11      	ldr	r2, [pc, #68]	; (811a8 <pmc_switch_mainck_to_xtal+0x48>)
   81164:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   81166:	0209      	lsls	r1, r1, #8
   81168:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8116a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8116e:	f023 0303 	bic.w	r3, r3, #3
   81172:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   81176:	f043 0301 	orr.w	r3, r3, #1
   8117a:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8117c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8117e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   81180:	f013 0f01 	tst.w	r3, #1
   81184:	d0fb      	beq.n	8117e <pmc_switch_mainck_to_xtal+0x1e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   81186:	4a08      	ldr	r2, [pc, #32]	; (811a8 <pmc_switch_mainck_to_xtal+0x48>)
   81188:	6a13      	ldr	r3, [r2, #32]
   8118a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8118e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   81192:	6213      	str	r3, [r2, #32]
   81194:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   81196:	4904      	ldr	r1, [pc, #16]	; (811a8 <pmc_switch_mainck_to_xtal+0x48>)
   81198:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8119a:	4a04      	ldr	r2, [pc, #16]	; (811ac <pmc_switch_mainck_to_xtal+0x4c>)
   8119c:	401a      	ands	r2, r3
   8119e:	4b04      	ldr	r3, [pc, #16]	; (811b0 <pmc_switch_mainck_to_xtal+0x50>)
   811a0:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   811a2:	620b      	str	r3, [r1, #32]
   811a4:	4770      	bx	lr
   811a6:	bf00      	nop
   811a8:	400e0600 	.word	0x400e0600
   811ac:	fec8fffc 	.word	0xfec8fffc
   811b0:	01370002 	.word	0x01370002

000811b4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   811b4:	4b02      	ldr	r3, [pc, #8]	; (811c0 <pmc_osc_is_ready_mainck+0xc>)
   811b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811b8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   811bc:	4770      	bx	lr
   811be:	bf00      	nop
   811c0:	400e0600 	.word	0x400e0600

000811c4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   811c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   811c8:	4b01      	ldr	r3, [pc, #4]	; (811d0 <pmc_disable_pllack+0xc>)
   811ca:	629a      	str	r2, [r3, #40]	; 0x28
   811cc:	4770      	bx	lr
   811ce:	bf00      	nop
   811d0:	400e0600 	.word	0x400e0600

000811d4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   811d4:	4b02      	ldr	r3, [pc, #8]	; (811e0 <pmc_is_locked_pllack+0xc>)
   811d6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   811d8:	f000 0002 	and.w	r0, r0, #2
   811dc:	4770      	bx	lr
   811de:	bf00      	nop
   811e0:	400e0600 	.word	0x400e0600

000811e4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   811e4:	282c      	cmp	r0, #44	; 0x2c
   811e6:	d81e      	bhi.n	81226 <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   811e8:	281f      	cmp	r0, #31
   811ea:	d80c      	bhi.n	81206 <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   811ec:	4b11      	ldr	r3, [pc, #68]	; (81234 <pmc_enable_periph_clk+0x50>)
   811ee:	699a      	ldr	r2, [r3, #24]
   811f0:	2301      	movs	r3, #1
   811f2:	4083      	lsls	r3, r0
   811f4:	4393      	bics	r3, r2
   811f6:	d018      	beq.n	8122a <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   811f8:	2301      	movs	r3, #1
   811fa:	fa03 f000 	lsl.w	r0, r3, r0
   811fe:	4b0d      	ldr	r3, [pc, #52]	; (81234 <pmc_enable_periph_clk+0x50>)
   81200:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81202:	2000      	movs	r0, #0
   81204:	4770      	bx	lr
		ul_id -= 32;
   81206:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81208:	4b0a      	ldr	r3, [pc, #40]	; (81234 <pmc_enable_periph_clk+0x50>)
   8120a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   8120e:	2301      	movs	r3, #1
   81210:	4083      	lsls	r3, r0
   81212:	4393      	bics	r3, r2
   81214:	d00b      	beq.n	8122e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   81216:	2301      	movs	r3, #1
   81218:	fa03 f000 	lsl.w	r0, r3, r0
   8121c:	4b05      	ldr	r3, [pc, #20]	; (81234 <pmc_enable_periph_clk+0x50>)
   8121e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   81222:	2000      	movs	r0, #0
   81224:	4770      	bx	lr
		return 1;
   81226:	2001      	movs	r0, #1
   81228:	4770      	bx	lr
	return 0;
   8122a:	2000      	movs	r0, #0
   8122c:	4770      	bx	lr
   8122e:	2000      	movs	r0, #0
}
   81230:	4770      	bx	lr
   81232:	bf00      	nop
   81234:	400e0600 	.word	0x400e0600

00081238 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81238:	e7fe      	b.n	81238 <Dummy_Handler>
	...

0008123c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8123c:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8123e:	4b1c      	ldr	r3, [pc, #112]	; (812b0 <Reset_Handler+0x74>)
   81240:	4a1c      	ldr	r2, [pc, #112]	; (812b4 <Reset_Handler+0x78>)
   81242:	429a      	cmp	r2, r3
   81244:	d010      	beq.n	81268 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   81246:	4b1c      	ldr	r3, [pc, #112]	; (812b8 <Reset_Handler+0x7c>)
   81248:	4a19      	ldr	r2, [pc, #100]	; (812b0 <Reset_Handler+0x74>)
   8124a:	429a      	cmp	r2, r3
   8124c:	d20c      	bcs.n	81268 <Reset_Handler+0x2c>
   8124e:	3b01      	subs	r3, #1
   81250:	1a9b      	subs	r3, r3, r2
   81252:	f023 0303 	bic.w	r3, r3, #3
   81256:	3304      	adds	r3, #4
   81258:	4413      	add	r3, r2
   8125a:	4916      	ldr	r1, [pc, #88]	; (812b4 <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   8125c:	f851 0b04 	ldr.w	r0, [r1], #4
   81260:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   81264:	429a      	cmp	r2, r3
   81266:	d1f9      	bne.n	8125c <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81268:	4b14      	ldr	r3, [pc, #80]	; (812bc <Reset_Handler+0x80>)
   8126a:	4a15      	ldr	r2, [pc, #84]	; (812c0 <Reset_Handler+0x84>)
   8126c:	429a      	cmp	r2, r3
   8126e:	d20a      	bcs.n	81286 <Reset_Handler+0x4a>
   81270:	3b01      	subs	r3, #1
   81272:	1a9b      	subs	r3, r3, r2
   81274:	f023 0303 	bic.w	r3, r3, #3
   81278:	3304      	adds	r3, #4
   8127a:	4413      	add	r3, r2
		*pDest++ = 0;
   8127c:	2100      	movs	r1, #0
   8127e:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   81282:	4293      	cmp	r3, r2
   81284:	d1fb      	bne.n	8127e <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81286:	4b0f      	ldr	r3, [pc, #60]	; (812c4 <Reset_Handler+0x88>)
   81288:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   8128c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   81290:	490d      	ldr	r1, [pc, #52]	; (812c8 <Reset_Handler+0x8c>)
   81292:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81294:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   81298:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8129c:	d203      	bcs.n	812a6 <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8129e:	688b      	ldr	r3, [r1, #8]
   812a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   812a4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   812a6:	4b09      	ldr	r3, [pc, #36]	; (812cc <Reset_Handler+0x90>)
   812a8:	4798      	blx	r3

	/* Branch to main function */
	main();
   812aa:	4b09      	ldr	r3, [pc, #36]	; (812d0 <Reset_Handler+0x94>)
   812ac:	4798      	blx	r3
   812ae:	e7fe      	b.n	812ae <Reset_Handler+0x72>
   812b0:	20070000 	.word	0x20070000
   812b4:	0008472c 	.word	0x0008472c
   812b8:	20070af0 	.word	0x20070af0
   812bc:	20070cc0 	.word	0x20070cc0
   812c0:	20070af0 	.word	0x20070af0
   812c4:	00080000 	.word	0x00080000
   812c8:	e000ed00 	.word	0xe000ed00
   812cc:	000817b9 	.word	0x000817b9
   812d0:	0008143d 	.word	0x0008143d

000812d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   812d4:	4b3d      	ldr	r3, [pc, #244]	; (813cc <SystemCoreClockUpdate+0xf8>)
   812d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   812d8:	f003 0303 	and.w	r3, r3, #3
   812dc:	2b03      	cmp	r3, #3
   812de:	d80e      	bhi.n	812fe <SystemCoreClockUpdate+0x2a>
   812e0:	e8df f003 	tbb	[pc, r3]
   812e4:	38381c02 	.word	0x38381c02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   812e8:	4b39      	ldr	r3, [pc, #228]	; (813d0 <SystemCoreClockUpdate+0xfc>)
   812ea:	695b      	ldr	r3, [r3, #20]
   812ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   812f0:	bf14      	ite	ne
   812f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   812f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   812fa:	4b36      	ldr	r3, [pc, #216]	; (813d4 <SystemCoreClockUpdate+0x100>)
   812fc:	601a      	str	r2, [r3, #0]
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   812fe:	4b33      	ldr	r3, [pc, #204]	; (813cc <SystemCoreClockUpdate+0xf8>)
   81300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81302:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81306:	2b70      	cmp	r3, #112	; 0x70
   81308:	d057      	beq.n	813ba <SystemCoreClockUpdate+0xe6>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   8130a:	4b30      	ldr	r3, [pc, #192]	; (813cc <SystemCoreClockUpdate+0xf8>)
   8130c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8130e:	4931      	ldr	r1, [pc, #196]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81310:	f3c2 1202 	ubfx	r2, r2, #4, #3
   81314:	680b      	ldr	r3, [r1, #0]
   81316:	40d3      	lsrs	r3, r2
   81318:	600b      	str	r3, [r1, #0]
   8131a:	4770      	bx	lr
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8131c:	4b2b      	ldr	r3, [pc, #172]	; (813cc <SystemCoreClockUpdate+0xf8>)
   8131e:	6a1b      	ldr	r3, [r3, #32]
   81320:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81324:	d003      	beq.n	8132e <SystemCoreClockUpdate+0x5a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81326:	4a2c      	ldr	r2, [pc, #176]	; (813d8 <SystemCoreClockUpdate+0x104>)
   81328:	4b2a      	ldr	r3, [pc, #168]	; (813d4 <SystemCoreClockUpdate+0x100>)
   8132a:	601a      	str	r2, [r3, #0]
   8132c:	e7e7      	b.n	812fe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8132e:	4a2b      	ldr	r2, [pc, #172]	; (813dc <SystemCoreClockUpdate+0x108>)
   81330:	4b28      	ldr	r3, [pc, #160]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81332:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81334:	4b25      	ldr	r3, [pc, #148]	; (813cc <SystemCoreClockUpdate+0xf8>)
   81336:	6a1b      	ldr	r3, [r3, #32]
   81338:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8133c:	2b10      	cmp	r3, #16
   8133e:	d005      	beq.n	8134c <SystemCoreClockUpdate+0x78>
   81340:	2b20      	cmp	r3, #32
   81342:	d1dc      	bne.n	812fe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 3U;
   81344:	4a24      	ldr	r2, [pc, #144]	; (813d8 <SystemCoreClockUpdate+0x104>)
   81346:	4b23      	ldr	r3, [pc, #140]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81348:	601a      	str	r2, [r3, #0]
				break;
   8134a:	e7d8      	b.n	812fe <SystemCoreClockUpdate+0x2a>
				SystemCoreClock *= 2U;
   8134c:	4a24      	ldr	r2, [pc, #144]	; (813e0 <SystemCoreClockUpdate+0x10c>)
   8134e:	4b21      	ldr	r3, [pc, #132]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81350:	601a      	str	r2, [r3, #0]
				break;
   81352:	e7d4      	b.n	812fe <SystemCoreClockUpdate+0x2a>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81354:	4b1d      	ldr	r3, [pc, #116]	; (813cc <SystemCoreClockUpdate+0xf8>)
   81356:	6a1b      	ldr	r3, [r3, #32]
   81358:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8135c:	d00c      	beq.n	81378 <SystemCoreClockUpdate+0xa4>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8135e:	4a1e      	ldr	r2, [pc, #120]	; (813d8 <SystemCoreClockUpdate+0x104>)
   81360:	4b1c      	ldr	r3, [pc, #112]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81362:	601a      	str	r2, [r3, #0]
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81364:	4b19      	ldr	r3, [pc, #100]	; (813cc <SystemCoreClockUpdate+0xf8>)
   81366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81368:	f003 0303 	and.w	r3, r3, #3
   8136c:	2b02      	cmp	r3, #2
   8136e:	d016      	beq.n	8139e <SystemCoreClockUpdate+0xca>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   81370:	4a1c      	ldr	r2, [pc, #112]	; (813e4 <SystemCoreClockUpdate+0x110>)
   81372:	4b18      	ldr	r3, [pc, #96]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81374:	601a      	str	r2, [r3, #0]
   81376:	e7c2      	b.n	812fe <SystemCoreClockUpdate+0x2a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81378:	4a18      	ldr	r2, [pc, #96]	; (813dc <SystemCoreClockUpdate+0x108>)
   8137a:	4b16      	ldr	r3, [pc, #88]	; (813d4 <SystemCoreClockUpdate+0x100>)
   8137c:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8137e:	4b13      	ldr	r3, [pc, #76]	; (813cc <SystemCoreClockUpdate+0xf8>)
   81380:	6a1b      	ldr	r3, [r3, #32]
   81382:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81386:	2b10      	cmp	r3, #16
   81388:	d005      	beq.n	81396 <SystemCoreClockUpdate+0xc2>
   8138a:	2b20      	cmp	r3, #32
   8138c:	d1ea      	bne.n	81364 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 3U;
   8138e:	4a12      	ldr	r2, [pc, #72]	; (813d8 <SystemCoreClockUpdate+0x104>)
   81390:	4b10      	ldr	r3, [pc, #64]	; (813d4 <SystemCoreClockUpdate+0x100>)
   81392:	601a      	str	r2, [r3, #0]
				break;
   81394:	e7e6      	b.n	81364 <SystemCoreClockUpdate+0x90>
				SystemCoreClock *= 2U;
   81396:	4a12      	ldr	r2, [pc, #72]	; (813e0 <SystemCoreClockUpdate+0x10c>)
   81398:	4b0e      	ldr	r3, [pc, #56]	; (813d4 <SystemCoreClockUpdate+0x100>)
   8139a:	601a      	str	r2, [r3, #0]
				break;
   8139c:	e7e2      	b.n	81364 <SystemCoreClockUpdate+0x90>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8139e:	4a0b      	ldr	r2, [pc, #44]	; (813cc <SystemCoreClockUpdate+0xf8>)
   813a0:	6a91      	ldr	r1, [r2, #40]	; 0x28
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   813a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   813a4:	480b      	ldr	r0, [pc, #44]	; (813d4 <SystemCoreClockUpdate+0x100>)
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   813a6:	f3c1 410a 	ubfx	r1, r1, #16, #11
   813aa:	6803      	ldr	r3, [r0, #0]
   813ac:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   813b0:	b2d2      	uxtb	r2, r2
   813b2:	fbb3 f3f2 	udiv	r3, r3, r2
   813b6:	6003      	str	r3, [r0, #0]
   813b8:	e7a1      	b.n	812fe <SystemCoreClockUpdate+0x2a>
		SystemCoreClock /= 3U;
   813ba:	4a06      	ldr	r2, [pc, #24]	; (813d4 <SystemCoreClockUpdate+0x100>)
   813bc:	6813      	ldr	r3, [r2, #0]
   813be:	490a      	ldr	r1, [pc, #40]	; (813e8 <SystemCoreClockUpdate+0x114>)
   813c0:	fba1 1303 	umull	r1, r3, r1, r3
   813c4:	085b      	lsrs	r3, r3, #1
   813c6:	6013      	str	r3, [r2, #0]
   813c8:	4770      	bx	lr
   813ca:	bf00      	nop
   813cc:	400e0600 	.word	0x400e0600
   813d0:	400e1a10 	.word	0x400e1a10
   813d4:	2007013c 	.word	0x2007013c
   813d8:	00b71b00 	.word	0x00b71b00
   813dc:	003d0900 	.word	0x003d0900
   813e0:	007a1200 	.word	0x007a1200
   813e4:	0e4e1c00 	.word	0x0e4e1c00
   813e8:	aaaaaaab 	.word	0xaaaaaaab

000813ec <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   813ec:	4b0a      	ldr	r3, [pc, #40]	; (81418 <_sbrk+0x2c>)
   813ee:	681b      	ldr	r3, [r3, #0]
   813f0:	b153      	cbz	r3, 81408 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
   813f2:	4b09      	ldr	r3, [pc, #36]	; (81418 <_sbrk+0x2c>)
   813f4:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   813f6:	181a      	adds	r2, r3, r0
   813f8:	4908      	ldr	r1, [pc, #32]	; (8141c <_sbrk+0x30>)
   813fa:	4291      	cmp	r1, r2
   813fc:	db08      	blt.n	81410 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
   813fe:	4610      	mov	r0, r2
   81400:	4a05      	ldr	r2, [pc, #20]	; (81418 <_sbrk+0x2c>)
   81402:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   81404:	4618      	mov	r0, r3
   81406:	4770      	bx	lr
		heap = (unsigned char *)&_end;
   81408:	4a05      	ldr	r2, [pc, #20]	; (81420 <_sbrk+0x34>)
   8140a:	4b03      	ldr	r3, [pc, #12]	; (81418 <_sbrk+0x2c>)
   8140c:	601a      	str	r2, [r3, #0]
   8140e:	e7f0      	b.n	813f2 <_sbrk+0x6>
		return (caddr_t) -1;	
   81410:	f04f 30ff 	mov.w	r0, #4294967295
}
   81414:	4770      	bx	lr
   81416:	bf00      	nop
   81418:	20070c10 	.word	0x20070c10
   8141c:	20087ffc 	.word	0x20087ffc
   81420:	20072cc0 	.word	0x20072cc0

00081424 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   81424:	f04f 30ff 	mov.w	r0, #4294967295
   81428:	4770      	bx	lr

0008142a <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   8142a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   8142e:	604b      	str	r3, [r1, #4]

	return 0;
}
   81430:	2000      	movs	r0, #0
   81432:	4770      	bx	lr

00081434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   81434:	2001      	movs	r0, #1
   81436:	4770      	bx	lr

00081438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   81438:	2000      	movs	r0, #0
   8143a:	4770      	bx	lr

0008143c <main>:

Next version (1.4) will test if we can implement PWM to control the signal to the motorcontrollers. Clear?[] 

*/
int main (void)
{
   8143c:	b570      	push	{r4, r5, r6, lr}
	int ticksContinously = 0;
	int ticksPassed = 0;
	int ticksReference = 0;
	sysclk_init();
   8143e:	4b0e      	ldr	r3, [pc, #56]	; (81478 <main+0x3c>)
   81440:	4798      	blx	r3
	board_init();
   81442:	4b0e      	ldr	r3, [pc, #56]	; (8147c <main+0x40>)
   81444:	4798      	blx	r3
	misc_init(); //pin 2 out, pin5&7 in
   81446:	4b0e      	ldr	r3, [pc, #56]	; (81480 <main+0x44>)
   81448:	4798      	blx	r3
	console_init();
   8144a:	4b0e      	ldr	r3, [pc, #56]	; (81484 <main+0x48>)
   8144c:	4798      	blx	r3
	//interrupt_init();	//	pin 7 and 8 as interrupt pins
	//rtos_init(); //Starts RTOS scheduler
	encoder_init(); //also initialises pin 5 (left encoder) & 7 (right encoder) as interrupt pins
   8144e:	4b0e      	ldr	r3, [pc, #56]	; (81488 <main+0x4c>)
   81450:	4798      	blx	r3
	//delay_us(3000000);
	//controlCenter(50);
	drive(30, 30, 1, 1); //uses pin2
   81452:	2301      	movs	r3, #1
   81454:	461a      	mov	r2, r3
   81456:	211e      	movs	r1, #30
   81458:	4608      	mov	r0, r1
   8145a:	4c0c      	ldr	r4, [pc, #48]	; (8148c <main+0x50>)
   8145c:	47a0      	blx	r4

	while(1){
		printf("Test\n");
   8145e:	4e0c      	ldr	r6, [pc, #48]	; (81490 <main+0x54>)
   81460:	4d0c      	ldr	r5, [pc, #48]	; (81494 <main+0x58>)
		getRightBPulseTime();
   81462:	4c0d      	ldr	r4, [pc, #52]	; (81498 <main+0x5c>)
		printf("Test\n");
   81464:	4630      	mov	r0, r6
   81466:	47a8      	blx	r5
		getRightBPulseTime();
   81468:	47a0      	blx	r4
		getLeftAPulseTime();
   8146a:	4b0c      	ldr	r3, [pc, #48]	; (8149c <main+0x60>)
   8146c:	4798      	blx	r3
		getRightPulses();
   8146e:	4b0c      	ldr	r3, [pc, #48]	; (814a0 <main+0x64>)
   81470:	4798      	blx	r3
		getLeftPulses();
   81472:	4b0c      	ldr	r3, [pc, #48]	; (814a4 <main+0x68>)
   81474:	4798      	blx	r3
   81476:	e7f5      	b.n	81464 <main+0x28>
   81478:	00080ccd 	.word	0x00080ccd
   8147c:	00080d31 	.word	0x00080d31
   81480:	0008091d 	.word	0x0008091d
   81484:	0008096d 	.word	0x0008096d
   81488:	00080369 	.word	0x00080369
   8148c:	000805d1 	.word	0x000805d1
   81490:	00084590 	.word	0x00084590
   81494:	00081809 	.word	0x00081809
   81498:	00080599 	.word	0x00080599
   8149c:	000805b5 	.word	0x000805b5
   814a0:	00080569 	.word	0x00080569
   814a4:	00080501 	.word	0x00080501

000814a8 <__aeabi_uldivmod>:
   814a8:	b953      	cbnz	r3, 814c0 <__aeabi_uldivmod+0x18>
   814aa:	b94a      	cbnz	r2, 814c0 <__aeabi_uldivmod+0x18>
   814ac:	2900      	cmp	r1, #0
   814ae:	bf08      	it	eq
   814b0:	2800      	cmpeq	r0, #0
   814b2:	bf1c      	itt	ne
   814b4:	f04f 31ff 	movne.w	r1, #4294967295
   814b8:	f04f 30ff 	movne.w	r0, #4294967295
   814bc:	f000 b97a 	b.w	817b4 <__aeabi_idiv0>
   814c0:	f1ad 0c08 	sub.w	ip, sp, #8
   814c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   814c8:	f000 f806 	bl	814d8 <__udivmoddi4>
   814cc:	f8dd e004 	ldr.w	lr, [sp, #4]
   814d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   814d4:	b004      	add	sp, #16
   814d6:	4770      	bx	lr

000814d8 <__udivmoddi4>:
   814d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   814dc:	468c      	mov	ip, r1
   814de:	460e      	mov	r6, r1
   814e0:	4604      	mov	r4, r0
   814e2:	9d08      	ldr	r5, [sp, #32]
   814e4:	2b00      	cmp	r3, #0
   814e6:	d150      	bne.n	8158a <__udivmoddi4+0xb2>
   814e8:	428a      	cmp	r2, r1
   814ea:	4617      	mov	r7, r2
   814ec:	d96c      	bls.n	815c8 <__udivmoddi4+0xf0>
   814ee:	fab2 fe82 	clz	lr, r2
   814f2:	f1be 0f00 	cmp.w	lr, #0
   814f6:	d00b      	beq.n	81510 <__udivmoddi4+0x38>
   814f8:	f1ce 0c20 	rsb	ip, lr, #32
   814fc:	fa01 f60e 	lsl.w	r6, r1, lr
   81500:	fa20 fc0c 	lsr.w	ip, r0, ip
   81504:	fa02 f70e 	lsl.w	r7, r2, lr
   81508:	ea4c 0c06 	orr.w	ip, ip, r6
   8150c:	fa00 f40e 	lsl.w	r4, r0, lr
   81510:	0c3a      	lsrs	r2, r7, #16
   81512:	fbbc f9f2 	udiv	r9, ip, r2
   81516:	b2bb      	uxth	r3, r7
   81518:	fb02 cc19 	mls	ip, r2, r9, ip
   8151c:	fb09 fa03 	mul.w	sl, r9, r3
   81520:	ea4f 4814 	mov.w	r8, r4, lsr #16
   81524:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
   81528:	45b2      	cmp	sl, r6
   8152a:	d90a      	bls.n	81542 <__udivmoddi4+0x6a>
   8152c:	19f6      	adds	r6, r6, r7
   8152e:	f109 31ff 	add.w	r1, r9, #4294967295
   81532:	f080 8125 	bcs.w	81780 <__udivmoddi4+0x2a8>
   81536:	45b2      	cmp	sl, r6
   81538:	f240 8122 	bls.w	81780 <__udivmoddi4+0x2a8>
   8153c:	f1a9 0902 	sub.w	r9, r9, #2
   81540:	443e      	add	r6, r7
   81542:	eba6 060a 	sub.w	r6, r6, sl
   81546:	fbb6 f0f2 	udiv	r0, r6, r2
   8154a:	fb02 6610 	mls	r6, r2, r0, r6
   8154e:	fb00 f303 	mul.w	r3, r0, r3
   81552:	b2a4      	uxth	r4, r4
   81554:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
   81558:	42a3      	cmp	r3, r4
   8155a:	d909      	bls.n	81570 <__udivmoddi4+0x98>
   8155c:	19e4      	adds	r4, r4, r7
   8155e:	f100 32ff 	add.w	r2, r0, #4294967295
   81562:	f080 810b 	bcs.w	8177c <__udivmoddi4+0x2a4>
   81566:	42a3      	cmp	r3, r4
   81568:	f240 8108 	bls.w	8177c <__udivmoddi4+0x2a4>
   8156c:	3802      	subs	r0, #2
   8156e:	443c      	add	r4, r7
   81570:	2100      	movs	r1, #0
   81572:	1ae4      	subs	r4, r4, r3
   81574:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   81578:	2d00      	cmp	r5, #0
   8157a:	d062      	beq.n	81642 <__udivmoddi4+0x16a>
   8157c:	2300      	movs	r3, #0
   8157e:	fa24 f40e 	lsr.w	r4, r4, lr
   81582:	602c      	str	r4, [r5, #0]
   81584:	606b      	str	r3, [r5, #4]
   81586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8158a:	428b      	cmp	r3, r1
   8158c:	d907      	bls.n	8159e <__udivmoddi4+0xc6>
   8158e:	2d00      	cmp	r5, #0
   81590:	d055      	beq.n	8163e <__udivmoddi4+0x166>
   81592:	2100      	movs	r1, #0
   81594:	e885 0041 	stmia.w	r5, {r0, r6}
   81598:	4608      	mov	r0, r1
   8159a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8159e:	fab3 f183 	clz	r1, r3
   815a2:	2900      	cmp	r1, #0
   815a4:	f040 808f 	bne.w	816c6 <__udivmoddi4+0x1ee>
   815a8:	42b3      	cmp	r3, r6
   815aa:	d302      	bcc.n	815b2 <__udivmoddi4+0xda>
   815ac:	4282      	cmp	r2, r0
   815ae:	f200 80fc 	bhi.w	817aa <__udivmoddi4+0x2d2>
   815b2:	1a84      	subs	r4, r0, r2
   815b4:	eb66 0603 	sbc.w	r6, r6, r3
   815b8:	2001      	movs	r0, #1
   815ba:	46b4      	mov	ip, r6
   815bc:	2d00      	cmp	r5, #0
   815be:	d040      	beq.n	81642 <__udivmoddi4+0x16a>
   815c0:	e885 1010 	stmia.w	r5, {r4, ip}
   815c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   815c8:	b912      	cbnz	r2, 815d0 <__udivmoddi4+0xf8>
   815ca:	2701      	movs	r7, #1
   815cc:	fbb7 f7f2 	udiv	r7, r7, r2
   815d0:	fab7 fe87 	clz	lr, r7
   815d4:	f1be 0f00 	cmp.w	lr, #0
   815d8:	d135      	bne.n	81646 <__udivmoddi4+0x16e>
   815da:	2101      	movs	r1, #1
   815dc:	1bf6      	subs	r6, r6, r7
   815de:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   815e2:	fa1f f887 	uxth.w	r8, r7
   815e6:	fbb6 f2fc 	udiv	r2, r6, ip
   815ea:	fb0c 6612 	mls	r6, ip, r2, r6
   815ee:	fb08 f002 	mul.w	r0, r8, r2
   815f2:	0c23      	lsrs	r3, r4, #16
   815f4:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
   815f8:	42b0      	cmp	r0, r6
   815fa:	d907      	bls.n	8160c <__udivmoddi4+0x134>
   815fc:	19f6      	adds	r6, r6, r7
   815fe:	f102 33ff 	add.w	r3, r2, #4294967295
   81602:	d202      	bcs.n	8160a <__udivmoddi4+0x132>
   81604:	42b0      	cmp	r0, r6
   81606:	f200 80d2 	bhi.w	817ae <__udivmoddi4+0x2d6>
   8160a:	461a      	mov	r2, r3
   8160c:	1a36      	subs	r6, r6, r0
   8160e:	fbb6 f0fc 	udiv	r0, r6, ip
   81612:	fb0c 6610 	mls	r6, ip, r0, r6
   81616:	fb08 f800 	mul.w	r8, r8, r0
   8161a:	b2a3      	uxth	r3, r4
   8161c:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
   81620:	45a0      	cmp	r8, r4
   81622:	d907      	bls.n	81634 <__udivmoddi4+0x15c>
   81624:	19e4      	adds	r4, r4, r7
   81626:	f100 33ff 	add.w	r3, r0, #4294967295
   8162a:	d202      	bcs.n	81632 <__udivmoddi4+0x15a>
   8162c:	45a0      	cmp	r8, r4
   8162e:	f200 80b9 	bhi.w	817a4 <__udivmoddi4+0x2cc>
   81632:	4618      	mov	r0, r3
   81634:	eba4 0408 	sub.w	r4, r4, r8
   81638:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
   8163c:	e79c      	b.n	81578 <__udivmoddi4+0xa0>
   8163e:	4629      	mov	r1, r5
   81640:	4628      	mov	r0, r5
   81642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   81646:	fa07 f70e 	lsl.w	r7, r7, lr
   8164a:	f1ce 0320 	rsb	r3, lr, #32
   8164e:	fa26 f203 	lsr.w	r2, r6, r3
   81652:	ea4f 4c17 	mov.w	ip, r7, lsr #16
   81656:	fbb2 f1fc 	udiv	r1, r2, ip
   8165a:	fa1f f887 	uxth.w	r8, r7
   8165e:	fb0c 2211 	mls	r2, ip, r1, r2
   81662:	fa06 f60e 	lsl.w	r6, r6, lr
   81666:	fa20 f303 	lsr.w	r3, r0, r3
   8166a:	fb01 f908 	mul.w	r9, r1, r8
   8166e:	4333      	orrs	r3, r6
   81670:	0c1e      	lsrs	r6, r3, #16
   81672:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   81676:	45b1      	cmp	r9, r6
   81678:	fa00 f40e 	lsl.w	r4, r0, lr
   8167c:	d909      	bls.n	81692 <__udivmoddi4+0x1ba>
   8167e:	19f6      	adds	r6, r6, r7
   81680:	f101 32ff 	add.w	r2, r1, #4294967295
   81684:	f080 808c 	bcs.w	817a0 <__udivmoddi4+0x2c8>
   81688:	45b1      	cmp	r9, r6
   8168a:	f240 8089 	bls.w	817a0 <__udivmoddi4+0x2c8>
   8168e:	3902      	subs	r1, #2
   81690:	443e      	add	r6, r7
   81692:	eba6 0609 	sub.w	r6, r6, r9
   81696:	fbb6 f0fc 	udiv	r0, r6, ip
   8169a:	fb0c 6210 	mls	r2, ip, r0, r6
   8169e:	fb00 f908 	mul.w	r9, r0, r8
   816a2:	b29e      	uxth	r6, r3
   816a4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
   816a8:	45b1      	cmp	r9, r6
   816aa:	d907      	bls.n	816bc <__udivmoddi4+0x1e4>
   816ac:	19f6      	adds	r6, r6, r7
   816ae:	f100 33ff 	add.w	r3, r0, #4294967295
   816b2:	d271      	bcs.n	81798 <__udivmoddi4+0x2c0>
   816b4:	45b1      	cmp	r9, r6
   816b6:	d96f      	bls.n	81798 <__udivmoddi4+0x2c0>
   816b8:	3802      	subs	r0, #2
   816ba:	443e      	add	r6, r7
   816bc:	eba6 0609 	sub.w	r6, r6, r9
   816c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   816c4:	e78f      	b.n	815e6 <__udivmoddi4+0x10e>
   816c6:	f1c1 0720 	rsb	r7, r1, #32
   816ca:	fa22 f807 	lsr.w	r8, r2, r7
   816ce:	408b      	lsls	r3, r1
   816d0:	ea48 0303 	orr.w	r3, r8, r3
   816d4:	fa26 f407 	lsr.w	r4, r6, r7
   816d8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
   816dc:	fbb4 f9fe 	udiv	r9, r4, lr
   816e0:	fa1f fc83 	uxth.w	ip, r3
   816e4:	fb0e 4419 	mls	r4, lr, r9, r4
   816e8:	408e      	lsls	r6, r1
   816ea:	fa20 f807 	lsr.w	r8, r0, r7
   816ee:	fb09 fa0c 	mul.w	sl, r9, ip
   816f2:	ea48 0806 	orr.w	r8, r8, r6
   816f6:	ea4f 4618 	mov.w	r6, r8, lsr #16
   816fa:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
   816fe:	45a2      	cmp	sl, r4
   81700:	fa02 f201 	lsl.w	r2, r2, r1
   81704:	fa00 f601 	lsl.w	r6, r0, r1
   81708:	d908      	bls.n	8171c <__udivmoddi4+0x244>
   8170a:	18e4      	adds	r4, r4, r3
   8170c:	f109 30ff 	add.w	r0, r9, #4294967295
   81710:	d244      	bcs.n	8179c <__udivmoddi4+0x2c4>
   81712:	45a2      	cmp	sl, r4
   81714:	d942      	bls.n	8179c <__udivmoddi4+0x2c4>
   81716:	f1a9 0902 	sub.w	r9, r9, #2
   8171a:	441c      	add	r4, r3
   8171c:	eba4 040a 	sub.w	r4, r4, sl
   81720:	fbb4 f0fe 	udiv	r0, r4, lr
   81724:	fb0e 4410 	mls	r4, lr, r0, r4
   81728:	fb00 fc0c 	mul.w	ip, r0, ip
   8172c:	fa1f f888 	uxth.w	r8, r8
   81730:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
   81734:	45a4      	cmp	ip, r4
   81736:	d907      	bls.n	81748 <__udivmoddi4+0x270>
   81738:	18e4      	adds	r4, r4, r3
   8173a:	f100 3eff 	add.w	lr, r0, #4294967295
   8173e:	d229      	bcs.n	81794 <__udivmoddi4+0x2bc>
   81740:	45a4      	cmp	ip, r4
   81742:	d927      	bls.n	81794 <__udivmoddi4+0x2bc>
   81744:	3802      	subs	r0, #2
   81746:	441c      	add	r4, r3
   81748:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   8174c:	fba0 8902 	umull	r8, r9, r0, r2
   81750:	eba4 0c0c 	sub.w	ip, r4, ip
   81754:	45cc      	cmp	ip, r9
   81756:	46c2      	mov	sl, r8
   81758:	46ce      	mov	lr, r9
   8175a:	d315      	bcc.n	81788 <__udivmoddi4+0x2b0>
   8175c:	d012      	beq.n	81784 <__udivmoddi4+0x2ac>
   8175e:	b155      	cbz	r5, 81776 <__udivmoddi4+0x29e>
   81760:	ebb6 030a 	subs.w	r3, r6, sl
   81764:	eb6c 060e 	sbc.w	r6, ip, lr
   81768:	fa06 f707 	lsl.w	r7, r6, r7
   8176c:	40cb      	lsrs	r3, r1
   8176e:	431f      	orrs	r7, r3
   81770:	40ce      	lsrs	r6, r1
   81772:	602f      	str	r7, [r5, #0]
   81774:	606e      	str	r6, [r5, #4]
   81776:	2100      	movs	r1, #0
   81778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8177c:	4610      	mov	r0, r2
   8177e:	e6f7      	b.n	81570 <__udivmoddi4+0x98>
   81780:	4689      	mov	r9, r1
   81782:	e6de      	b.n	81542 <__udivmoddi4+0x6a>
   81784:	4546      	cmp	r6, r8
   81786:	d2ea      	bcs.n	8175e <__udivmoddi4+0x286>
   81788:	ebb8 0a02 	subs.w	sl, r8, r2
   8178c:	eb69 0e03 	sbc.w	lr, r9, r3
   81790:	3801      	subs	r0, #1
   81792:	e7e4      	b.n	8175e <__udivmoddi4+0x286>
   81794:	4670      	mov	r0, lr
   81796:	e7d7      	b.n	81748 <__udivmoddi4+0x270>
   81798:	4618      	mov	r0, r3
   8179a:	e78f      	b.n	816bc <__udivmoddi4+0x1e4>
   8179c:	4681      	mov	r9, r0
   8179e:	e7bd      	b.n	8171c <__udivmoddi4+0x244>
   817a0:	4611      	mov	r1, r2
   817a2:	e776      	b.n	81692 <__udivmoddi4+0x1ba>
   817a4:	3802      	subs	r0, #2
   817a6:	443c      	add	r4, r7
   817a8:	e744      	b.n	81634 <__udivmoddi4+0x15c>
   817aa:	4608      	mov	r0, r1
   817ac:	e706      	b.n	815bc <__udivmoddi4+0xe4>
   817ae:	3a02      	subs	r2, #2
   817b0:	443e      	add	r6, r7
   817b2:	e72b      	b.n	8160c <__udivmoddi4+0x134>

000817b4 <__aeabi_idiv0>:
   817b4:	4770      	bx	lr
   817b6:	bf00      	nop

000817b8 <__libc_init_array>:
   817b8:	b570      	push	{r4, r5, r6, lr}
   817ba:	4e0f      	ldr	r6, [pc, #60]	; (817f8 <__libc_init_array+0x40>)
   817bc:	4d0f      	ldr	r5, [pc, #60]	; (817fc <__libc_init_array+0x44>)
   817be:	1b76      	subs	r6, r6, r5
   817c0:	10b6      	asrs	r6, r6, #2
   817c2:	bf18      	it	ne
   817c4:	2400      	movne	r4, #0
   817c6:	d005      	beq.n	817d4 <__libc_init_array+0x1c>
   817c8:	3401      	adds	r4, #1
   817ca:	f855 3b04 	ldr.w	r3, [r5], #4
   817ce:	4798      	blx	r3
   817d0:	42a6      	cmp	r6, r4
   817d2:	d1f9      	bne.n	817c8 <__libc_init_array+0x10>
   817d4:	4e0a      	ldr	r6, [pc, #40]	; (81800 <__libc_init_array+0x48>)
   817d6:	4d0b      	ldr	r5, [pc, #44]	; (81804 <__libc_init_array+0x4c>)
   817d8:	f002 ff92 	bl	84700 <_init>
   817dc:	1b76      	subs	r6, r6, r5
   817de:	10b6      	asrs	r6, r6, #2
   817e0:	bf18      	it	ne
   817e2:	2400      	movne	r4, #0
   817e4:	d006      	beq.n	817f4 <__libc_init_array+0x3c>
   817e6:	3401      	adds	r4, #1
   817e8:	f855 3b04 	ldr.w	r3, [r5], #4
   817ec:	4798      	blx	r3
   817ee:	42a6      	cmp	r6, r4
   817f0:	d1f9      	bne.n	817e6 <__libc_init_array+0x2e>
   817f2:	bd70      	pop	{r4, r5, r6, pc}
   817f4:	bd70      	pop	{r4, r5, r6, pc}
   817f6:	bf00      	nop
   817f8:	0008470c 	.word	0x0008470c
   817fc:	0008470c 	.word	0x0008470c
   81800:	00084714 	.word	0x00084714
   81804:	0008470c 	.word	0x0008470c

00081808 <iprintf>:
   81808:	b40f      	push	{r0, r1, r2, r3}
   8180a:	b510      	push	{r4, lr}
   8180c:	4b07      	ldr	r3, [pc, #28]	; (8182c <iprintf+0x24>)
   8180e:	b082      	sub	sp, #8
   81810:	ac04      	add	r4, sp, #16
   81812:	f854 2b04 	ldr.w	r2, [r4], #4
   81816:	6818      	ldr	r0, [r3, #0]
   81818:	4623      	mov	r3, r4
   8181a:	6881      	ldr	r1, [r0, #8]
   8181c:	9401      	str	r4, [sp, #4]
   8181e:	f000 fa09 	bl	81c34 <_vfiprintf_r>
   81822:	b002      	add	sp, #8
   81824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   81828:	b004      	add	sp, #16
   8182a:	4770      	bx	lr
   8182c:	20070140 	.word	0x20070140

00081830 <memcpy>:
   81830:	4684      	mov	ip, r0
   81832:	ea41 0300 	orr.w	r3, r1, r0
   81836:	f013 0303 	ands.w	r3, r3, #3
   8183a:	d149      	bne.n	818d0 <memcpy+0xa0>
   8183c:	3a40      	subs	r2, #64	; 0x40
   8183e:	d323      	bcc.n	81888 <memcpy+0x58>
   81840:	680b      	ldr	r3, [r1, #0]
   81842:	6003      	str	r3, [r0, #0]
   81844:	684b      	ldr	r3, [r1, #4]
   81846:	6043      	str	r3, [r0, #4]
   81848:	688b      	ldr	r3, [r1, #8]
   8184a:	6083      	str	r3, [r0, #8]
   8184c:	68cb      	ldr	r3, [r1, #12]
   8184e:	60c3      	str	r3, [r0, #12]
   81850:	690b      	ldr	r3, [r1, #16]
   81852:	6103      	str	r3, [r0, #16]
   81854:	694b      	ldr	r3, [r1, #20]
   81856:	6143      	str	r3, [r0, #20]
   81858:	698b      	ldr	r3, [r1, #24]
   8185a:	6183      	str	r3, [r0, #24]
   8185c:	69cb      	ldr	r3, [r1, #28]
   8185e:	61c3      	str	r3, [r0, #28]
   81860:	6a0b      	ldr	r3, [r1, #32]
   81862:	6203      	str	r3, [r0, #32]
   81864:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   81866:	6243      	str	r3, [r0, #36]	; 0x24
   81868:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   8186a:	6283      	str	r3, [r0, #40]	; 0x28
   8186c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8186e:	62c3      	str	r3, [r0, #44]	; 0x2c
   81870:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   81872:	6303      	str	r3, [r0, #48]	; 0x30
   81874:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   81876:	6343      	str	r3, [r0, #52]	; 0x34
   81878:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   8187a:	6383      	str	r3, [r0, #56]	; 0x38
   8187c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   8187e:	63c3      	str	r3, [r0, #60]	; 0x3c
   81880:	3040      	adds	r0, #64	; 0x40
   81882:	3140      	adds	r1, #64	; 0x40
   81884:	3a40      	subs	r2, #64	; 0x40
   81886:	d2db      	bcs.n	81840 <memcpy+0x10>
   81888:	3230      	adds	r2, #48	; 0x30
   8188a:	d30b      	bcc.n	818a4 <memcpy+0x74>
   8188c:	680b      	ldr	r3, [r1, #0]
   8188e:	6003      	str	r3, [r0, #0]
   81890:	684b      	ldr	r3, [r1, #4]
   81892:	6043      	str	r3, [r0, #4]
   81894:	688b      	ldr	r3, [r1, #8]
   81896:	6083      	str	r3, [r0, #8]
   81898:	68cb      	ldr	r3, [r1, #12]
   8189a:	60c3      	str	r3, [r0, #12]
   8189c:	3010      	adds	r0, #16
   8189e:	3110      	adds	r1, #16
   818a0:	3a10      	subs	r2, #16
   818a2:	d2f3      	bcs.n	8188c <memcpy+0x5c>
   818a4:	320c      	adds	r2, #12
   818a6:	d305      	bcc.n	818b4 <memcpy+0x84>
   818a8:	f851 3b04 	ldr.w	r3, [r1], #4
   818ac:	f840 3b04 	str.w	r3, [r0], #4
   818b0:	3a04      	subs	r2, #4
   818b2:	d2f9      	bcs.n	818a8 <memcpy+0x78>
   818b4:	3204      	adds	r2, #4
   818b6:	d008      	beq.n	818ca <memcpy+0x9a>
   818b8:	07d2      	lsls	r2, r2, #31
   818ba:	bf1c      	itt	ne
   818bc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   818c0:	f800 3b01 	strbne.w	r3, [r0], #1
   818c4:	d301      	bcc.n	818ca <memcpy+0x9a>
   818c6:	880b      	ldrh	r3, [r1, #0]
   818c8:	8003      	strh	r3, [r0, #0]
   818ca:	4660      	mov	r0, ip
   818cc:	4770      	bx	lr
   818ce:	bf00      	nop
   818d0:	2a08      	cmp	r2, #8
   818d2:	d313      	bcc.n	818fc <memcpy+0xcc>
   818d4:	078b      	lsls	r3, r1, #30
   818d6:	d0b1      	beq.n	8183c <memcpy+0xc>
   818d8:	f010 0303 	ands.w	r3, r0, #3
   818dc:	d0ae      	beq.n	8183c <memcpy+0xc>
   818de:	f1c3 0304 	rsb	r3, r3, #4
   818e2:	1ad2      	subs	r2, r2, r3
   818e4:	07db      	lsls	r3, r3, #31
   818e6:	bf1c      	itt	ne
   818e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   818ec:	f800 3b01 	strbne.w	r3, [r0], #1
   818f0:	d3a4      	bcc.n	8183c <memcpy+0xc>
   818f2:	f831 3b02 	ldrh.w	r3, [r1], #2
   818f6:	f820 3b02 	strh.w	r3, [r0], #2
   818fa:	e79f      	b.n	8183c <memcpy+0xc>
   818fc:	3a04      	subs	r2, #4
   818fe:	d3d9      	bcc.n	818b4 <memcpy+0x84>
   81900:	3a01      	subs	r2, #1
   81902:	f811 3b01 	ldrb.w	r3, [r1], #1
   81906:	f800 3b01 	strb.w	r3, [r0], #1
   8190a:	d2f9      	bcs.n	81900 <memcpy+0xd0>
   8190c:	780b      	ldrb	r3, [r1, #0]
   8190e:	7003      	strb	r3, [r0, #0]
   81910:	784b      	ldrb	r3, [r1, #1]
   81912:	7043      	strb	r3, [r0, #1]
   81914:	788b      	ldrb	r3, [r1, #2]
   81916:	7083      	strb	r3, [r0, #2]
   81918:	4660      	mov	r0, ip
   8191a:	4770      	bx	lr

0008191c <memset>:
   8191c:	b470      	push	{r4, r5, r6}
   8191e:	0786      	lsls	r6, r0, #30
   81920:	d046      	beq.n	819b0 <memset+0x94>
   81922:	1e54      	subs	r4, r2, #1
   81924:	2a00      	cmp	r2, #0
   81926:	d041      	beq.n	819ac <memset+0x90>
   81928:	b2ca      	uxtb	r2, r1
   8192a:	4603      	mov	r3, r0
   8192c:	e002      	b.n	81934 <memset+0x18>
   8192e:	f114 34ff 	adds.w	r4, r4, #4294967295
   81932:	d33b      	bcc.n	819ac <memset+0x90>
   81934:	f803 2b01 	strb.w	r2, [r3], #1
   81938:	079d      	lsls	r5, r3, #30
   8193a:	d1f8      	bne.n	8192e <memset+0x12>
   8193c:	2c03      	cmp	r4, #3
   8193e:	d92e      	bls.n	8199e <memset+0x82>
   81940:	b2cd      	uxtb	r5, r1
   81942:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   81946:	2c0f      	cmp	r4, #15
   81948:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   8194c:	d919      	bls.n	81982 <memset+0x66>
   8194e:	4626      	mov	r6, r4
   81950:	f103 0210 	add.w	r2, r3, #16
   81954:	3e10      	subs	r6, #16
   81956:	2e0f      	cmp	r6, #15
   81958:	f842 5c10 	str.w	r5, [r2, #-16]
   8195c:	f842 5c0c 	str.w	r5, [r2, #-12]
   81960:	f842 5c08 	str.w	r5, [r2, #-8]
   81964:	f842 5c04 	str.w	r5, [r2, #-4]
   81968:	f102 0210 	add.w	r2, r2, #16
   8196c:	d8f2      	bhi.n	81954 <memset+0x38>
   8196e:	f1a4 0210 	sub.w	r2, r4, #16
   81972:	f022 020f 	bic.w	r2, r2, #15
   81976:	f004 040f 	and.w	r4, r4, #15
   8197a:	3210      	adds	r2, #16
   8197c:	2c03      	cmp	r4, #3
   8197e:	4413      	add	r3, r2
   81980:	d90d      	bls.n	8199e <memset+0x82>
   81982:	461e      	mov	r6, r3
   81984:	4622      	mov	r2, r4
   81986:	3a04      	subs	r2, #4
   81988:	2a03      	cmp	r2, #3
   8198a:	f846 5b04 	str.w	r5, [r6], #4
   8198e:	d8fa      	bhi.n	81986 <memset+0x6a>
   81990:	1f22      	subs	r2, r4, #4
   81992:	f022 0203 	bic.w	r2, r2, #3
   81996:	3204      	adds	r2, #4
   81998:	4413      	add	r3, r2
   8199a:	f004 0403 	and.w	r4, r4, #3
   8199e:	b12c      	cbz	r4, 819ac <memset+0x90>
   819a0:	b2c9      	uxtb	r1, r1
   819a2:	441c      	add	r4, r3
   819a4:	f803 1b01 	strb.w	r1, [r3], #1
   819a8:	429c      	cmp	r4, r3
   819aa:	d1fb      	bne.n	819a4 <memset+0x88>
   819ac:	bc70      	pop	{r4, r5, r6}
   819ae:	4770      	bx	lr
   819b0:	4614      	mov	r4, r2
   819b2:	4603      	mov	r3, r0
   819b4:	e7c2      	b.n	8193c <memset+0x20>
   819b6:	bf00      	nop

000819b8 <setbuf>:
   819b8:	2900      	cmp	r1, #0
   819ba:	bf0c      	ite	eq
   819bc:	2202      	moveq	r2, #2
   819be:	2200      	movne	r2, #0
   819c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
   819c4:	f000 b800 	b.w	819c8 <setvbuf>

000819c8 <setvbuf>:
   819c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   819cc:	4d61      	ldr	r5, [pc, #388]	; (81b54 <setvbuf+0x18c>)
   819ce:	b083      	sub	sp, #12
   819d0:	682d      	ldr	r5, [r5, #0]
   819d2:	4604      	mov	r4, r0
   819d4:	460f      	mov	r7, r1
   819d6:	4690      	mov	r8, r2
   819d8:	461e      	mov	r6, r3
   819da:	b115      	cbz	r5, 819e2 <setvbuf+0x1a>
   819dc:	6bab      	ldr	r3, [r5, #56]	; 0x38
   819de:	2b00      	cmp	r3, #0
   819e0:	d064      	beq.n	81aac <setvbuf+0xe4>
   819e2:	f1b8 0f02 	cmp.w	r8, #2
   819e6:	d006      	beq.n	819f6 <setvbuf+0x2e>
   819e8:	f1b8 0f01 	cmp.w	r8, #1
   819ec:	f200 809f 	bhi.w	81b2e <setvbuf+0x166>
   819f0:	2e00      	cmp	r6, #0
   819f2:	f2c0 809c 	blt.w	81b2e <setvbuf+0x166>
   819f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   819f8:	07d8      	lsls	r0, r3, #31
   819fa:	d534      	bpl.n	81a66 <setvbuf+0x9e>
   819fc:	4621      	mov	r1, r4
   819fe:	4628      	mov	r0, r5
   81a00:	f001 f8b0 	bl	82b64 <_fflush_r>
   81a04:	6b21      	ldr	r1, [r4, #48]	; 0x30
   81a06:	b141      	cbz	r1, 81a1a <setvbuf+0x52>
   81a08:	f104 0340 	add.w	r3, r4, #64	; 0x40
   81a0c:	4299      	cmp	r1, r3
   81a0e:	d002      	beq.n	81a16 <setvbuf+0x4e>
   81a10:	4628      	mov	r0, r5
   81a12:	f001 fa25 	bl	82e60 <_free_r>
   81a16:	2300      	movs	r3, #0
   81a18:	6323      	str	r3, [r4, #48]	; 0x30
   81a1a:	2200      	movs	r2, #0
   81a1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81a20:	61a2      	str	r2, [r4, #24]
   81a22:	6062      	str	r2, [r4, #4]
   81a24:	061a      	lsls	r2, r3, #24
   81a26:	d43a      	bmi.n	81a9e <setvbuf+0xd6>
   81a28:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
   81a2c:	f023 0303 	bic.w	r3, r3, #3
   81a30:	f1b8 0f02 	cmp.w	r8, #2
   81a34:	81a3      	strh	r3, [r4, #12]
   81a36:	d01d      	beq.n	81a74 <setvbuf+0xac>
   81a38:	ab01      	add	r3, sp, #4
   81a3a:	466a      	mov	r2, sp
   81a3c:	4621      	mov	r1, r4
   81a3e:	4628      	mov	r0, r5
   81a40:	f001 fcac 	bl	8339c <__swhatbuf_r>
   81a44:	89a3      	ldrh	r3, [r4, #12]
   81a46:	4318      	orrs	r0, r3
   81a48:	81a0      	strh	r0, [r4, #12]
   81a4a:	2e00      	cmp	r6, #0
   81a4c:	d132      	bne.n	81ab4 <setvbuf+0xec>
   81a4e:	9e00      	ldr	r6, [sp, #0]
   81a50:	4630      	mov	r0, r6
   81a52:	f001 fd1b 	bl	8348c <malloc>
   81a56:	4607      	mov	r7, r0
   81a58:	2800      	cmp	r0, #0
   81a5a:	d06b      	beq.n	81b34 <setvbuf+0x16c>
   81a5c:	89a3      	ldrh	r3, [r4, #12]
   81a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   81a62:	81a3      	strh	r3, [r4, #12]
   81a64:	e028      	b.n	81ab8 <setvbuf+0xf0>
   81a66:	89a3      	ldrh	r3, [r4, #12]
   81a68:	0599      	lsls	r1, r3, #22
   81a6a:	d4c7      	bmi.n	819fc <setvbuf+0x34>
   81a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81a6e:	f001 fc91 	bl	83394 <__retarget_lock_acquire_recursive>
   81a72:	e7c3      	b.n	819fc <setvbuf+0x34>
   81a74:	2500      	movs	r5, #0
   81a76:	2600      	movs	r6, #0
   81a78:	2001      	movs	r0, #1
   81a7a:	6e61      	ldr	r1, [r4, #100]	; 0x64
   81a7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   81a80:	f043 0302 	orr.w	r3, r3, #2
   81a84:	60a6      	str	r6, [r4, #8]
   81a86:	07ce      	lsls	r6, r1, #31
   81a88:	81a3      	strh	r3, [r4, #12]
   81a8a:	6160      	str	r0, [r4, #20]
   81a8c:	6022      	str	r2, [r4, #0]
   81a8e:	6122      	str	r2, [r4, #16]
   81a90:	d401      	bmi.n	81a96 <setvbuf+0xce>
   81a92:	0598      	lsls	r0, r3, #22
   81a94:	d53e      	bpl.n	81b14 <setvbuf+0x14c>
   81a96:	4628      	mov	r0, r5
   81a98:	b003      	add	sp, #12
   81a9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81a9e:	6921      	ldr	r1, [r4, #16]
   81aa0:	4628      	mov	r0, r5
   81aa2:	f001 f9dd 	bl	82e60 <_free_r>
   81aa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81aaa:	e7bd      	b.n	81a28 <setvbuf+0x60>
   81aac:	4628      	mov	r0, r5
   81aae:	f001 f8b1 	bl	82c14 <__sinit>
   81ab2:	e796      	b.n	819e2 <setvbuf+0x1a>
   81ab4:	2f00      	cmp	r7, #0
   81ab6:	d0cb      	beq.n	81a50 <setvbuf+0x88>
   81ab8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   81aba:	2b00      	cmp	r3, #0
   81abc:	d033      	beq.n	81b26 <setvbuf+0x15e>
   81abe:	9b00      	ldr	r3, [sp, #0]
   81ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   81ac4:	429e      	cmp	r6, r3
   81ac6:	bf1c      	itt	ne
   81ac8:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
   81acc:	81a2      	strhne	r2, [r4, #12]
   81ace:	f1b8 0f01 	cmp.w	r8, #1
   81ad2:	bf04      	itt	eq
   81ad4:	f042 0201 	orreq.w	r2, r2, #1
   81ad8:	81a2      	strheq	r2, [r4, #12]
   81ada:	b292      	uxth	r2, r2
   81adc:	f012 0308 	ands.w	r3, r2, #8
   81ae0:	6027      	str	r7, [r4, #0]
   81ae2:	6127      	str	r7, [r4, #16]
   81ae4:	6166      	str	r6, [r4, #20]
   81ae6:	d00e      	beq.n	81b06 <setvbuf+0x13e>
   81ae8:	07d1      	lsls	r1, r2, #31
   81aea:	d51a      	bpl.n	81b22 <setvbuf+0x15a>
   81aec:	2300      	movs	r3, #0
   81aee:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81af0:	4276      	negs	r6, r6
   81af2:	f015 0501 	ands.w	r5, r5, #1
   81af6:	61a6      	str	r6, [r4, #24]
   81af8:	60a3      	str	r3, [r4, #8]
   81afa:	d009      	beq.n	81b10 <setvbuf+0x148>
   81afc:	2500      	movs	r5, #0
   81afe:	4628      	mov	r0, r5
   81b00:	b003      	add	sp, #12
   81b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81b06:	60a3      	str	r3, [r4, #8]
   81b08:	6e65      	ldr	r5, [r4, #100]	; 0x64
   81b0a:	f015 0501 	ands.w	r5, r5, #1
   81b0e:	d1f5      	bne.n	81afc <setvbuf+0x134>
   81b10:	0593      	lsls	r3, r2, #22
   81b12:	d4c0      	bmi.n	81a96 <setvbuf+0xce>
   81b14:	6da0      	ldr	r0, [r4, #88]	; 0x58
   81b16:	f001 fc3f 	bl	83398 <__retarget_lock_release_recursive>
   81b1a:	4628      	mov	r0, r5
   81b1c:	b003      	add	sp, #12
   81b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   81b22:	60a6      	str	r6, [r4, #8]
   81b24:	e7f0      	b.n	81b08 <setvbuf+0x140>
   81b26:	4628      	mov	r0, r5
   81b28:	f001 f874 	bl	82c14 <__sinit>
   81b2c:	e7c7      	b.n	81abe <setvbuf+0xf6>
   81b2e:	f04f 35ff 	mov.w	r5, #4294967295
   81b32:	e7b0      	b.n	81a96 <setvbuf+0xce>
   81b34:	f8dd 9000 	ldr.w	r9, [sp]
   81b38:	45b1      	cmp	r9, r6
   81b3a:	d004      	beq.n	81b46 <setvbuf+0x17e>
   81b3c:	4648      	mov	r0, r9
   81b3e:	f001 fca5 	bl	8348c <malloc>
   81b42:	4607      	mov	r7, r0
   81b44:	b920      	cbnz	r0, 81b50 <setvbuf+0x188>
   81b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   81b4a:	f04f 35ff 	mov.w	r5, #4294967295
   81b4e:	e792      	b.n	81a76 <setvbuf+0xae>
   81b50:	464e      	mov	r6, r9
   81b52:	e783      	b.n	81a5c <setvbuf+0x94>
   81b54:	20070140 	.word	0x20070140

00081b58 <strlen>:
   81b58:	f020 0103 	bic.w	r1, r0, #3
   81b5c:	f010 0003 	ands.w	r0, r0, #3
   81b60:	f1c0 0000 	rsb	r0, r0, #0
   81b64:	f851 3b04 	ldr.w	r3, [r1], #4
   81b68:	f100 0c04 	add.w	ip, r0, #4
   81b6c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   81b70:	f06f 0200 	mvn.w	r2, #0
   81b74:	bf1c      	itt	ne
   81b76:	fa22 f20c 	lsrne.w	r2, r2, ip
   81b7a:	4313      	orrne	r3, r2
   81b7c:	f04f 0c01 	mov.w	ip, #1
   81b80:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   81b84:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   81b88:	eba3 020c 	sub.w	r2, r3, ip
   81b8c:	ea22 0203 	bic.w	r2, r2, r3
   81b90:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   81b94:	bf04      	itt	eq
   81b96:	f851 3b04 	ldreq.w	r3, [r1], #4
   81b9a:	3004      	addeq	r0, #4
   81b9c:	d0f4      	beq.n	81b88 <strlen+0x30>
   81b9e:	f1c2 0100 	rsb	r1, r2, #0
   81ba2:	ea02 0201 	and.w	r2, r2, r1
   81ba6:	fab2 f282 	clz	r2, r2
   81baa:	f1c2 021f 	rsb	r2, r2, #31
   81bae:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   81bb2:	4770      	bx	lr

00081bb4 <__sprint_r.part.0>:
   81bb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81bb8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   81bba:	4693      	mov	fp, r2
   81bbc:	049c      	lsls	r4, r3, #18
   81bbe:	d52f      	bpl.n	81c20 <__sprint_r.part.0+0x6c>
   81bc0:	6893      	ldr	r3, [r2, #8]
   81bc2:	6812      	ldr	r2, [r2, #0]
   81bc4:	b353      	cbz	r3, 81c1c <__sprint_r.part.0+0x68>
   81bc6:	460e      	mov	r6, r1
   81bc8:	4607      	mov	r7, r0
   81bca:	f102 0908 	add.w	r9, r2, #8
   81bce:	e919 0420 	ldmdb	r9, {r5, sl}
   81bd2:	ea5f 089a 	movs.w	r8, sl, lsr #2
   81bd6:	d017      	beq.n	81c08 <__sprint_r.part.0+0x54>
   81bd8:	2400      	movs	r4, #0
   81bda:	3d04      	subs	r5, #4
   81bdc:	e001      	b.n	81be2 <__sprint_r.part.0+0x2e>
   81bde:	45a0      	cmp	r8, r4
   81be0:	d010      	beq.n	81c04 <__sprint_r.part.0+0x50>
   81be2:	4632      	mov	r2, r6
   81be4:	f855 1f04 	ldr.w	r1, [r5, #4]!
   81be8:	4638      	mov	r0, r7
   81bea:	f001 f8b5 	bl	82d58 <_fputwc_r>
   81bee:	1c43      	adds	r3, r0, #1
   81bf0:	f104 0401 	add.w	r4, r4, #1
   81bf4:	d1f3      	bne.n	81bde <__sprint_r.part.0+0x2a>
   81bf6:	2300      	movs	r3, #0
   81bf8:	f8cb 3008 	str.w	r3, [fp, #8]
   81bfc:	f8cb 3004 	str.w	r3, [fp, #4]
   81c00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c04:	f8db 3008 	ldr.w	r3, [fp, #8]
   81c08:	f02a 0a03 	bic.w	sl, sl, #3
   81c0c:	eba3 030a 	sub.w	r3, r3, sl
   81c10:	f8cb 3008 	str.w	r3, [fp, #8]
   81c14:	f109 0908 	add.w	r9, r9, #8
   81c18:	2b00      	cmp	r3, #0
   81c1a:	d1d8      	bne.n	81bce <__sprint_r.part.0+0x1a>
   81c1c:	2000      	movs	r0, #0
   81c1e:	e7ea      	b.n	81bf6 <__sprint_r.part.0+0x42>
   81c20:	f001 fa04 	bl	8302c <__sfvwrite_r>
   81c24:	2300      	movs	r3, #0
   81c26:	f8cb 3008 	str.w	r3, [fp, #8]
   81c2a:	f8cb 3004 	str.w	r3, [fp, #4]
   81c2e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81c32:	bf00      	nop

00081c34 <_vfiprintf_r>:
   81c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c38:	b0ad      	sub	sp, #180	; 0xb4
   81c3a:	461d      	mov	r5, r3
   81c3c:	468b      	mov	fp, r1
   81c3e:	4690      	mov	r8, r2
   81c40:	9307      	str	r3, [sp, #28]
   81c42:	9006      	str	r0, [sp, #24]
   81c44:	b118      	cbz	r0, 81c4e <_vfiprintf_r+0x1a>
   81c46:	6b83      	ldr	r3, [r0, #56]	; 0x38
   81c48:	2b00      	cmp	r3, #0
   81c4a:	f000 80f3 	beq.w	81e34 <_vfiprintf_r+0x200>
   81c4e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81c52:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81c56:	07df      	lsls	r7, r3, #31
   81c58:	b281      	uxth	r1, r0
   81c5a:	d402      	bmi.n	81c62 <_vfiprintf_r+0x2e>
   81c5c:	058e      	lsls	r6, r1, #22
   81c5e:	f140 80fc 	bpl.w	81e5a <_vfiprintf_r+0x226>
   81c62:	048c      	lsls	r4, r1, #18
   81c64:	d40a      	bmi.n	81c7c <_vfiprintf_r+0x48>
   81c66:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81c6a:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
   81c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   81c72:	f8ab 100c 	strh.w	r1, [fp, #12]
   81c76:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
   81c7a:	b289      	uxth	r1, r1
   81c7c:	0708      	lsls	r0, r1, #28
   81c7e:	f140 80b3 	bpl.w	81de8 <_vfiprintf_r+0x1b4>
   81c82:	f8db 3010 	ldr.w	r3, [fp, #16]
   81c86:	2b00      	cmp	r3, #0
   81c88:	f000 80ae 	beq.w	81de8 <_vfiprintf_r+0x1b4>
   81c8c:	f001 031a 	and.w	r3, r1, #26
   81c90:	2b0a      	cmp	r3, #10
   81c92:	f000 80b5 	beq.w	81e00 <_vfiprintf_r+0x1cc>
   81c96:	2300      	movs	r3, #0
   81c98:	f10d 0a70 	add.w	sl, sp, #112	; 0x70
   81c9c:	46d1      	mov	r9, sl
   81c9e:	930b      	str	r3, [sp, #44]	; 0x2c
   81ca0:	9303      	str	r3, [sp, #12]
   81ca2:	9311      	str	r3, [sp, #68]	; 0x44
   81ca4:	9310      	str	r3, [sp, #64]	; 0x40
   81ca6:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
   81caa:	f8cd b010 	str.w	fp, [sp, #16]
   81cae:	f898 3000 	ldrb.w	r3, [r8]
   81cb2:	4644      	mov	r4, r8
   81cb4:	b1fb      	cbz	r3, 81cf6 <_vfiprintf_r+0xc2>
   81cb6:	2b25      	cmp	r3, #37	; 0x25
   81cb8:	d102      	bne.n	81cc0 <_vfiprintf_r+0x8c>
   81cba:	e01c      	b.n	81cf6 <_vfiprintf_r+0xc2>
   81cbc:	2b25      	cmp	r3, #37	; 0x25
   81cbe:	d003      	beq.n	81cc8 <_vfiprintf_r+0x94>
   81cc0:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   81cc4:	2b00      	cmp	r3, #0
   81cc6:	d1f9      	bne.n	81cbc <_vfiprintf_r+0x88>
   81cc8:	eba4 0508 	sub.w	r5, r4, r8
   81ccc:	b19d      	cbz	r5, 81cf6 <_vfiprintf_r+0xc2>
   81cce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81cd0:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81cd2:	3301      	adds	r3, #1
   81cd4:	442a      	add	r2, r5
   81cd6:	2b07      	cmp	r3, #7
   81cd8:	f8c9 8000 	str.w	r8, [r9]
   81cdc:	f8c9 5004 	str.w	r5, [r9, #4]
   81ce0:	9211      	str	r2, [sp, #68]	; 0x44
   81ce2:	9310      	str	r3, [sp, #64]	; 0x40
   81ce4:	dd7a      	ble.n	81ddc <_vfiprintf_r+0x1a8>
   81ce6:	2a00      	cmp	r2, #0
   81ce8:	f040 84b5 	bne.w	82656 <_vfiprintf_r+0xa22>
   81cec:	46d1      	mov	r9, sl
   81cee:	9b03      	ldr	r3, [sp, #12]
   81cf0:	9210      	str	r2, [sp, #64]	; 0x40
   81cf2:	442b      	add	r3, r5
   81cf4:	9303      	str	r3, [sp, #12]
   81cf6:	7823      	ldrb	r3, [r4, #0]
   81cf8:	2b00      	cmp	r3, #0
   81cfa:	f000 83e5 	beq.w	824c8 <_vfiprintf_r+0x894>
   81cfe:	2000      	movs	r0, #0
   81d00:	f04f 0300 	mov.w	r3, #0
   81d04:	f104 0801 	add.w	r8, r4, #1
   81d08:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
   81d0c:	7862      	ldrb	r2, [r4, #1]
   81d0e:	4606      	mov	r6, r0
   81d10:	4605      	mov	r5, r0
   81d12:	4603      	mov	r3, r0
   81d14:	f04f 34ff 	mov.w	r4, #4294967295
   81d18:	f108 0801 	add.w	r8, r8, #1
   81d1c:	f1a2 0120 	sub.w	r1, r2, #32
   81d20:	2958      	cmp	r1, #88	; 0x58
   81d22:	f200 82d9 	bhi.w	822d8 <_vfiprintf_r+0x6a4>
   81d26:	e8df f011 	tbh	[pc, r1, lsl #1]
   81d2a:	0228      	.short	0x0228
   81d2c:	02d702d7 	.word	0x02d702d7
   81d30:	02d70230 	.word	0x02d70230
   81d34:	02d702d7 	.word	0x02d702d7
   81d38:	02d702d7 	.word	0x02d702d7
   81d3c:	00a002d7 	.word	0x00a002d7
   81d40:	02d70288 	.word	0x02d70288
   81d44:	02b800a8 	.word	0x02b800a8
   81d48:	01a602d7 	.word	0x01a602d7
   81d4c:	01ab01ab 	.word	0x01ab01ab
   81d50:	01ab01ab 	.word	0x01ab01ab
   81d54:	01ab01ab 	.word	0x01ab01ab
   81d58:	01ab01ab 	.word	0x01ab01ab
   81d5c:	02d701ab 	.word	0x02d701ab
   81d60:	02d702d7 	.word	0x02d702d7
   81d64:	02d702d7 	.word	0x02d702d7
   81d68:	02d702d7 	.word	0x02d702d7
   81d6c:	02d702d7 	.word	0x02d702d7
   81d70:	01b902d7 	.word	0x01b902d7
   81d74:	02d702d7 	.word	0x02d702d7
   81d78:	02d702d7 	.word	0x02d702d7
   81d7c:	02d702d7 	.word	0x02d702d7
   81d80:	02d702d7 	.word	0x02d702d7
   81d84:	02d702d7 	.word	0x02d702d7
   81d88:	02d7019e 	.word	0x02d7019e
   81d8c:	02d702d7 	.word	0x02d702d7
   81d90:	02d702d7 	.word	0x02d702d7
   81d94:	02d701a2 	.word	0x02d701a2
   81d98:	025a02d7 	.word	0x025a02d7
   81d9c:	02d702d7 	.word	0x02d702d7
   81da0:	02d702d7 	.word	0x02d702d7
   81da4:	02d702d7 	.word	0x02d702d7
   81da8:	02d702d7 	.word	0x02d702d7
   81dac:	02d702d7 	.word	0x02d702d7
   81db0:	02220261 	.word	0x02220261
   81db4:	02d702d7 	.word	0x02d702d7
   81db8:	027602d7 	.word	0x027602d7
   81dbc:	02d70222 	.word	0x02d70222
   81dc0:	027b02d7 	.word	0x027b02d7
   81dc4:	01fc02d7 	.word	0x01fc02d7
   81dc8:	02100189 	.word	0x02100189
   81dcc:	02d702d2 	.word	0x02d702d2
   81dd0:	02d70295 	.word	0x02d70295
   81dd4:	02d700ad 	.word	0x02d700ad
   81dd8:	023502d7 	.word	0x023502d7
   81ddc:	f109 0908 	add.w	r9, r9, #8
   81de0:	9b03      	ldr	r3, [sp, #12]
   81de2:	442b      	add	r3, r5
   81de4:	9303      	str	r3, [sp, #12]
   81de6:	e786      	b.n	81cf6 <_vfiprintf_r+0xc2>
   81de8:	4659      	mov	r1, fp
   81dea:	9806      	ldr	r0, [sp, #24]
   81dec:	f000 fdaa 	bl	82944 <__swsetup_r>
   81df0:	bb18      	cbnz	r0, 81e3a <_vfiprintf_r+0x206>
   81df2:	f8bb 100c 	ldrh.w	r1, [fp, #12]
   81df6:	f001 031a 	and.w	r3, r1, #26
   81dfa:	2b0a      	cmp	r3, #10
   81dfc:	f47f af4b 	bne.w	81c96 <_vfiprintf_r+0x62>
   81e00:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   81e04:	2b00      	cmp	r3, #0
   81e06:	f6ff af46 	blt.w	81c96 <_vfiprintf_r+0x62>
   81e0a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81e0e:	07db      	lsls	r3, r3, #31
   81e10:	d405      	bmi.n	81e1e <_vfiprintf_r+0x1ea>
   81e12:	058f      	lsls	r7, r1, #22
   81e14:	d403      	bmi.n	81e1e <_vfiprintf_r+0x1ea>
   81e16:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e1a:	f001 fabd 	bl	83398 <__retarget_lock_release_recursive>
   81e1e:	462b      	mov	r3, r5
   81e20:	4642      	mov	r2, r8
   81e22:	4659      	mov	r1, fp
   81e24:	9806      	ldr	r0, [sp, #24]
   81e26:	f000 fd49 	bl	828bc <__sbprintf>
   81e2a:	9003      	str	r0, [sp, #12]
   81e2c:	9803      	ldr	r0, [sp, #12]
   81e2e:	b02d      	add	sp, #180	; 0xb4
   81e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e34:	f000 feee 	bl	82c14 <__sinit>
   81e38:	e709      	b.n	81c4e <_vfiprintf_r+0x1a>
   81e3a:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   81e3e:	07d9      	lsls	r1, r3, #31
   81e40:	d404      	bmi.n	81e4c <_vfiprintf_r+0x218>
   81e42:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   81e46:	059a      	lsls	r2, r3, #22
   81e48:	f140 84ae 	bpl.w	827a8 <_vfiprintf_r+0xb74>
   81e4c:	f04f 33ff 	mov.w	r3, #4294967295
   81e50:	9303      	str	r3, [sp, #12]
   81e52:	9803      	ldr	r0, [sp, #12]
   81e54:	b02d      	add	sp, #180	; 0xb4
   81e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81e5a:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   81e5e:	f001 fa99 	bl	83394 <__retarget_lock_acquire_recursive>
   81e62:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
   81e66:	b281      	uxth	r1, r0
   81e68:	e6fb      	b.n	81c62 <_vfiprintf_r+0x2e>
   81e6a:	9907      	ldr	r1, [sp, #28]
   81e6c:	460a      	mov	r2, r1
   81e6e:	680d      	ldr	r5, [r1, #0]
   81e70:	3204      	adds	r2, #4
   81e72:	2d00      	cmp	r5, #0
   81e74:	9207      	str	r2, [sp, #28]
   81e76:	da02      	bge.n	81e7e <_vfiprintf_r+0x24a>
   81e78:	426d      	negs	r5, r5
   81e7a:	f043 0304 	orr.w	r3, r3, #4
   81e7e:	f898 2000 	ldrb.w	r2, [r8]
   81e82:	e749      	b.n	81d18 <_vfiprintf_r+0xe4>
   81e84:	9508      	str	r5, [sp, #32]
   81e86:	069e      	lsls	r6, r3, #26
   81e88:	f100 845a 	bmi.w	82740 <_vfiprintf_r+0xb0c>
   81e8c:	9907      	ldr	r1, [sp, #28]
   81e8e:	06dd      	lsls	r5, r3, #27
   81e90:	460a      	mov	r2, r1
   81e92:	f100 83ef 	bmi.w	82674 <_vfiprintf_r+0xa40>
   81e96:	0658      	lsls	r0, r3, #25
   81e98:	f140 83ec 	bpl.w	82674 <_vfiprintf_r+0xa40>
   81e9c:	2700      	movs	r7, #0
   81e9e:	2201      	movs	r2, #1
   81ea0:	880e      	ldrh	r6, [r1, #0]
   81ea2:	3104      	adds	r1, #4
   81ea4:	9107      	str	r1, [sp, #28]
   81ea6:	f04f 0100 	mov.w	r1, #0
   81eaa:	2500      	movs	r5, #0
   81eac:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
   81eb0:	1c61      	adds	r1, r4, #1
   81eb2:	f000 8117 	beq.w	820e4 <_vfiprintf_r+0x4b0>
   81eb6:	f023 0180 	bic.w	r1, r3, #128	; 0x80
   81eba:	9102      	str	r1, [sp, #8]
   81ebc:	ea56 0107 	orrs.w	r1, r6, r7
   81ec0:	f040 8115 	bne.w	820ee <_vfiprintf_r+0x4ba>
   81ec4:	2c00      	cmp	r4, #0
   81ec6:	f040 835b 	bne.w	82580 <_vfiprintf_r+0x94c>
   81eca:	2a00      	cmp	r2, #0
   81ecc:	f040 83b6 	bne.w	8263c <_vfiprintf_r+0xa08>
   81ed0:	f013 0301 	ands.w	r3, r3, #1
   81ed4:	9305      	str	r3, [sp, #20]
   81ed6:	f000 8455 	beq.w	82784 <_vfiprintf_r+0xb50>
   81eda:	2330      	movs	r3, #48	; 0x30
   81edc:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   81ee0:	f80b 3d41 	strb.w	r3, [fp, #-65]!
   81ee4:	9b05      	ldr	r3, [sp, #20]
   81ee6:	42a3      	cmp	r3, r4
   81ee8:	bfb8      	it	lt
   81eea:	4623      	movlt	r3, r4
   81eec:	9301      	str	r3, [sp, #4]
   81eee:	b10d      	cbz	r5, 81ef4 <_vfiprintf_r+0x2c0>
   81ef0:	3301      	adds	r3, #1
   81ef2:	9301      	str	r3, [sp, #4]
   81ef4:	9b02      	ldr	r3, [sp, #8]
   81ef6:	f013 0302 	ands.w	r3, r3, #2
   81efa:	9309      	str	r3, [sp, #36]	; 0x24
   81efc:	d002      	beq.n	81f04 <_vfiprintf_r+0x2d0>
   81efe:	9b01      	ldr	r3, [sp, #4]
   81f00:	3302      	adds	r3, #2
   81f02:	9301      	str	r3, [sp, #4]
   81f04:	9b02      	ldr	r3, [sp, #8]
   81f06:	f013 0384 	ands.w	r3, r3, #132	; 0x84
   81f0a:	930a      	str	r3, [sp, #40]	; 0x28
   81f0c:	f040 8215 	bne.w	8233a <_vfiprintf_r+0x706>
   81f10:	9b08      	ldr	r3, [sp, #32]
   81f12:	9a01      	ldr	r2, [sp, #4]
   81f14:	1a9d      	subs	r5, r3, r2
   81f16:	2d00      	cmp	r5, #0
   81f18:	f340 820f 	ble.w	8233a <_vfiprintf_r+0x706>
   81f1c:	2d10      	cmp	r5, #16
   81f1e:	f340 8484 	ble.w	8282a <_vfiprintf_r+0xbf6>
   81f22:	9b10      	ldr	r3, [sp, #64]	; 0x40
   81f24:	46ce      	mov	lr, r9
   81f26:	2710      	movs	r7, #16
   81f28:	46a1      	mov	r9, r4
   81f2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
   81f2c:	4ec5      	ldr	r6, [pc, #788]	; (82244 <_vfiprintf_r+0x610>)
   81f2e:	4619      	mov	r1, r3
   81f30:	9c06      	ldr	r4, [sp, #24]
   81f32:	e007      	b.n	81f44 <_vfiprintf_r+0x310>
   81f34:	f101 0c02 	add.w	ip, r1, #2
   81f38:	4601      	mov	r1, r0
   81f3a:	f10e 0e08 	add.w	lr, lr, #8
   81f3e:	3d10      	subs	r5, #16
   81f40:	2d10      	cmp	r5, #16
   81f42:	dd11      	ble.n	81f68 <_vfiprintf_r+0x334>
   81f44:	1c48      	adds	r0, r1, #1
   81f46:	3210      	adds	r2, #16
   81f48:	2807      	cmp	r0, #7
   81f4a:	9211      	str	r2, [sp, #68]	; 0x44
   81f4c:	e88e 00c0 	stmia.w	lr, {r6, r7}
   81f50:	9010      	str	r0, [sp, #64]	; 0x40
   81f52:	ddef      	ble.n	81f34 <_vfiprintf_r+0x300>
   81f54:	2a00      	cmp	r2, #0
   81f56:	f040 81d9 	bne.w	8230c <_vfiprintf_r+0x6d8>
   81f5a:	3d10      	subs	r5, #16
   81f5c:	2d10      	cmp	r5, #16
   81f5e:	4611      	mov	r1, r2
   81f60:	f04f 0c01 	mov.w	ip, #1
   81f64:	46d6      	mov	lr, sl
   81f66:	dced      	bgt.n	81f44 <_vfiprintf_r+0x310>
   81f68:	464c      	mov	r4, r9
   81f6a:	4661      	mov	r1, ip
   81f6c:	46f1      	mov	r9, lr
   81f6e:	442a      	add	r2, r5
   81f70:	2907      	cmp	r1, #7
   81f72:	9211      	str	r2, [sp, #68]	; 0x44
   81f74:	f8c9 6000 	str.w	r6, [r9]
   81f78:	f8c9 5004 	str.w	r5, [r9, #4]
   81f7c:	9110      	str	r1, [sp, #64]	; 0x40
   81f7e:	f300 82eb 	bgt.w	82558 <_vfiprintf_r+0x924>
   81f82:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   81f86:	f109 0908 	add.w	r9, r9, #8
   81f8a:	1c48      	adds	r0, r1, #1
   81f8c:	2d00      	cmp	r5, #0
   81f8e:	f040 81dc 	bne.w	8234a <_vfiprintf_r+0x716>
   81f92:	9b09      	ldr	r3, [sp, #36]	; 0x24
   81f94:	2b00      	cmp	r3, #0
   81f96:	f000 81f6 	beq.w	82386 <_vfiprintf_r+0x752>
   81f9a:	2102      	movs	r1, #2
   81f9c:	ab0e      	add	r3, sp, #56	; 0x38
   81f9e:	440a      	add	r2, r1
   81fa0:	2807      	cmp	r0, #7
   81fa2:	9211      	str	r2, [sp, #68]	; 0x44
   81fa4:	9010      	str	r0, [sp, #64]	; 0x40
   81fa6:	f8c9 1004 	str.w	r1, [r9, #4]
   81faa:	f8c9 3000 	str.w	r3, [r9]
   81fae:	f340 81e6 	ble.w	8237e <_vfiprintf_r+0x74a>
   81fb2:	2a00      	cmp	r2, #0
   81fb4:	f040 8395 	bne.w	826e2 <_vfiprintf_r+0xaae>
   81fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   81fba:	2001      	movs	r0, #1
   81fbc:	2b80      	cmp	r3, #128	; 0x80
   81fbe:	4611      	mov	r1, r2
   81fc0:	46d1      	mov	r9, sl
   81fc2:	f040 81e4 	bne.w	8238e <_vfiprintf_r+0x75a>
   81fc6:	9b08      	ldr	r3, [sp, #32]
   81fc8:	9d01      	ldr	r5, [sp, #4]
   81fca:	1b5e      	subs	r6, r3, r5
   81fcc:	2e00      	cmp	r6, #0
   81fce:	f340 81de 	ble.w	8238e <_vfiprintf_r+0x75a>
   81fd2:	2e10      	cmp	r6, #16
   81fd4:	f340 843c 	ble.w	82850 <_vfiprintf_r+0xc1c>
   81fd8:	46cc      	mov	ip, r9
   81fda:	2710      	movs	r7, #16
   81fdc:	46a1      	mov	r9, r4
   81fde:	4d9a      	ldr	r5, [pc, #616]	; (82248 <_vfiprintf_r+0x614>)
   81fe0:	9c06      	ldr	r4, [sp, #24]
   81fe2:	e007      	b.n	81ff4 <_vfiprintf_r+0x3c0>
   81fe4:	f101 0e02 	add.w	lr, r1, #2
   81fe8:	4601      	mov	r1, r0
   81fea:	f10c 0c08 	add.w	ip, ip, #8
   81fee:	3e10      	subs	r6, #16
   81ff0:	2e10      	cmp	r6, #16
   81ff2:	dd11      	ble.n	82018 <_vfiprintf_r+0x3e4>
   81ff4:	1c48      	adds	r0, r1, #1
   81ff6:	3210      	adds	r2, #16
   81ff8:	2807      	cmp	r0, #7
   81ffa:	9211      	str	r2, [sp, #68]	; 0x44
   81ffc:	e88c 00a0 	stmia.w	ip, {r5, r7}
   82000:	9010      	str	r0, [sp, #64]	; 0x40
   82002:	ddef      	ble.n	81fe4 <_vfiprintf_r+0x3b0>
   82004:	2a00      	cmp	r2, #0
   82006:	f040 829b 	bne.w	82540 <_vfiprintf_r+0x90c>
   8200a:	3e10      	subs	r6, #16
   8200c:	2e10      	cmp	r6, #16
   8200e:	f04f 0e01 	mov.w	lr, #1
   82012:	4611      	mov	r1, r2
   82014:	46d4      	mov	ip, sl
   82016:	dced      	bgt.n	81ff4 <_vfiprintf_r+0x3c0>
   82018:	464c      	mov	r4, r9
   8201a:	46e1      	mov	r9, ip
   8201c:	4432      	add	r2, r6
   8201e:	f1be 0f07 	cmp.w	lr, #7
   82022:	9211      	str	r2, [sp, #68]	; 0x44
   82024:	e889 0060 	stmia.w	r9, {r5, r6}
   82028:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
   8202c:	f300 8366 	bgt.w	826fc <_vfiprintf_r+0xac8>
   82030:	f109 0908 	add.w	r9, r9, #8
   82034:	f10e 0001 	add.w	r0, lr, #1
   82038:	4671      	mov	r1, lr
   8203a:	e1a8      	b.n	8238e <_vfiprintf_r+0x75a>
   8203c:	9508      	str	r5, [sp, #32]
   8203e:	f013 0220 	ands.w	r2, r3, #32
   82042:	f040 8389 	bne.w	82758 <_vfiprintf_r+0xb24>
   82046:	f013 0110 	ands.w	r1, r3, #16
   8204a:	f040 8319 	bne.w	82680 <_vfiprintf_r+0xa4c>
   8204e:	f013 0240 	ands.w	r2, r3, #64	; 0x40
   82052:	f000 8315 	beq.w	82680 <_vfiprintf_r+0xa4c>
   82056:	9807      	ldr	r0, [sp, #28]
   82058:	460a      	mov	r2, r1
   8205a:	4601      	mov	r1, r0
   8205c:	3104      	adds	r1, #4
   8205e:	8806      	ldrh	r6, [r0, #0]
   82060:	2700      	movs	r7, #0
   82062:	9107      	str	r1, [sp, #28]
   82064:	e71f      	b.n	81ea6 <_vfiprintf_r+0x272>
   82066:	9508      	str	r5, [sp, #32]
   82068:	f043 0310 	orr.w	r3, r3, #16
   8206c:	e7e7      	b.n	8203e <_vfiprintf_r+0x40a>
   8206e:	9508      	str	r5, [sp, #32]
   82070:	f043 0310 	orr.w	r3, r3, #16
   82074:	e707      	b.n	81e86 <_vfiprintf_r+0x252>
   82076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8207a:	f898 2000 	ldrb.w	r2, [r8]
   8207e:	e64b      	b.n	81d18 <_vfiprintf_r+0xe4>
   82080:	2500      	movs	r5, #0
   82082:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82086:	f818 2b01 	ldrb.w	r2, [r8], #1
   8208a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   8208e:	eb01 0545 	add.w	r5, r1, r5, lsl #1
   82092:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   82096:	2909      	cmp	r1, #9
   82098:	d9f5      	bls.n	82086 <_vfiprintf_r+0x452>
   8209a:	e63f      	b.n	81d1c <_vfiprintf_r+0xe8>
   8209c:	9508      	str	r5, [sp, #32]
   8209e:	2800      	cmp	r0, #0
   820a0:	f040 8402 	bne.w	828a8 <_vfiprintf_r+0xc74>
   820a4:	f043 0310 	orr.w	r3, r3, #16
   820a8:	069e      	lsls	r6, r3, #26
   820aa:	f100 833d 	bmi.w	82728 <_vfiprintf_r+0xaf4>
   820ae:	9907      	ldr	r1, [sp, #28]
   820b0:	06dd      	lsls	r5, r3, #27
   820b2:	460a      	mov	r2, r1
   820b4:	f100 82f0 	bmi.w	82698 <_vfiprintf_r+0xa64>
   820b8:	0658      	lsls	r0, r3, #25
   820ba:	f140 82ed 	bpl.w	82698 <_vfiprintf_r+0xa64>
   820be:	f9b1 6000 	ldrsh.w	r6, [r1]
   820c2:	3204      	adds	r2, #4
   820c4:	17f7      	asrs	r7, r6, #31
   820c6:	4630      	mov	r0, r6
   820c8:	4639      	mov	r1, r7
   820ca:	9207      	str	r2, [sp, #28]
   820cc:	2800      	cmp	r0, #0
   820ce:	f171 0200 	sbcs.w	r2, r1, #0
   820d2:	f2c0 835a 	blt.w	8278a <_vfiprintf_r+0xb56>
   820d6:	1c61      	adds	r1, r4, #1
   820d8:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   820dc:	f04f 0201 	mov.w	r2, #1
   820e0:	f47f aee9 	bne.w	81eb6 <_vfiprintf_r+0x282>
   820e4:	ea56 0107 	orrs.w	r1, r6, r7
   820e8:	f000 824b 	beq.w	82582 <_vfiprintf_r+0x94e>
   820ec:	9302      	str	r3, [sp, #8]
   820ee:	2a01      	cmp	r2, #1
   820f0:	f000 828a 	beq.w	82608 <_vfiprintf_r+0x9d4>
   820f4:	2a02      	cmp	r2, #2
   820f6:	f040 825a 	bne.w	825ae <_vfiprintf_r+0x97a>
   820fa:	46d3      	mov	fp, sl
   820fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
   820fe:	0933      	lsrs	r3, r6, #4
   82100:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
   82104:	0939      	lsrs	r1, r7, #4
   82106:	f006 020f 	and.w	r2, r6, #15
   8210a:	460f      	mov	r7, r1
   8210c:	461e      	mov	r6, r3
   8210e:	5c83      	ldrb	r3, [r0, r2]
   82110:	f80b 3d01 	strb.w	r3, [fp, #-1]!
   82114:	ea56 0307 	orrs.w	r3, r6, r7
   82118:	d1f1      	bne.n	820fe <_vfiprintf_r+0x4ca>
   8211a:	ebaa 030b 	sub.w	r3, sl, fp
   8211e:	9305      	str	r3, [sp, #20]
   82120:	e6e0      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   82122:	2800      	cmp	r0, #0
   82124:	f040 83bd 	bne.w	828a2 <_vfiprintf_r+0xc6e>
   82128:	0699      	lsls	r1, r3, #26
   8212a:	f100 8359 	bmi.w	827e0 <_vfiprintf_r+0xbac>
   8212e:	06da      	lsls	r2, r3, #27
   82130:	f100 80e5 	bmi.w	822fe <_vfiprintf_r+0x6ca>
   82134:	065b      	lsls	r3, r3, #25
   82136:	f140 80e2 	bpl.w	822fe <_vfiprintf_r+0x6ca>
   8213a:	9a07      	ldr	r2, [sp, #28]
   8213c:	6813      	ldr	r3, [r2, #0]
   8213e:	3204      	adds	r2, #4
   82140:	9207      	str	r2, [sp, #28]
   82142:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   82146:	801a      	strh	r2, [r3, #0]
   82148:	e5b1      	b.n	81cae <_vfiprintf_r+0x7a>
   8214a:	2278      	movs	r2, #120	; 0x78
   8214c:	2130      	movs	r1, #48	; 0x30
   8214e:	9508      	str	r5, [sp, #32]
   82150:	9d07      	ldr	r5, [sp, #28]
   82152:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   82156:	1d2a      	adds	r2, r5, #4
   82158:	9207      	str	r2, [sp, #28]
   8215a:	4a3c      	ldr	r2, [pc, #240]	; (8224c <_vfiprintf_r+0x618>)
   8215c:	682e      	ldr	r6, [r5, #0]
   8215e:	920b      	str	r2, [sp, #44]	; 0x2c
   82160:	f043 0302 	orr.w	r3, r3, #2
   82164:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   82168:	2700      	movs	r7, #0
   8216a:	2202      	movs	r2, #2
   8216c:	e69b      	b.n	81ea6 <_vfiprintf_r+0x272>
   8216e:	9508      	str	r5, [sp, #32]
   82170:	2800      	cmp	r0, #0
   82172:	d099      	beq.n	820a8 <_vfiprintf_r+0x474>
   82174:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82178:	e796      	b.n	820a8 <_vfiprintf_r+0x474>
   8217a:	f898 2000 	ldrb.w	r2, [r8]
   8217e:	2e00      	cmp	r6, #0
   82180:	f47f adca 	bne.w	81d18 <_vfiprintf_r+0xe4>
   82184:	2001      	movs	r0, #1
   82186:	2620      	movs	r6, #32
   82188:	e5c6      	b.n	81d18 <_vfiprintf_r+0xe4>
   8218a:	f043 0301 	orr.w	r3, r3, #1
   8218e:	f898 2000 	ldrb.w	r2, [r8]
   82192:	e5c1      	b.n	81d18 <_vfiprintf_r+0xe4>
   82194:	9508      	str	r5, [sp, #32]
   82196:	2800      	cmp	r0, #0
   82198:	f040 8380 	bne.w	8289c <_vfiprintf_r+0xc68>
   8219c:	492b      	ldr	r1, [pc, #172]	; (8224c <_vfiprintf_r+0x618>)
   8219e:	910b      	str	r1, [sp, #44]	; 0x2c
   821a0:	069f      	lsls	r7, r3, #26
   821a2:	f100 82e5 	bmi.w	82770 <_vfiprintf_r+0xb3c>
   821a6:	9807      	ldr	r0, [sp, #28]
   821a8:	06de      	lsls	r6, r3, #27
   821aa:	4601      	mov	r1, r0
   821ac:	f100 826f 	bmi.w	8268e <_vfiprintf_r+0xa5a>
   821b0:	065d      	lsls	r5, r3, #25
   821b2:	f140 826c 	bpl.w	8268e <_vfiprintf_r+0xa5a>
   821b6:	2700      	movs	r7, #0
   821b8:	3104      	adds	r1, #4
   821ba:	8806      	ldrh	r6, [r0, #0]
   821bc:	9107      	str	r1, [sp, #28]
   821be:	07d8      	lsls	r0, r3, #31
   821c0:	f140 8220 	bpl.w	82604 <_vfiprintf_r+0x9d0>
   821c4:	ea56 0107 	orrs.w	r1, r6, r7
   821c8:	f000 821c 	beq.w	82604 <_vfiprintf_r+0x9d0>
   821cc:	2130      	movs	r1, #48	; 0x30
   821ce:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
   821d2:	f043 0302 	orr.w	r3, r3, #2
   821d6:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
   821da:	2202      	movs	r2, #2
   821dc:	e663      	b.n	81ea6 <_vfiprintf_r+0x272>
   821de:	9508      	str	r5, [sp, #32]
   821e0:	2800      	cmp	r0, #0
   821e2:	f040 8355 	bne.w	82890 <_vfiprintf_r+0xc5c>
   821e6:	491a      	ldr	r1, [pc, #104]	; (82250 <_vfiprintf_r+0x61c>)
   821e8:	910b      	str	r1, [sp, #44]	; 0x2c
   821ea:	e7d9      	b.n	821a0 <_vfiprintf_r+0x56c>
   821ec:	2201      	movs	r2, #1
   821ee:	9807      	ldr	r0, [sp, #28]
   821f0:	4611      	mov	r1, r2
   821f2:	9201      	str	r2, [sp, #4]
   821f4:	6802      	ldr	r2, [r0, #0]
   821f6:	f04f 0400 	mov.w	r4, #0
   821fa:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   821fe:	4602      	mov	r2, r0
   82200:	3204      	adds	r2, #4
   82202:	9508      	str	r5, [sp, #32]
   82204:	f88d 4037 	strb.w	r4, [sp, #55]	; 0x37
   82208:	9105      	str	r1, [sp, #20]
   8220a:	9207      	str	r2, [sp, #28]
   8220c:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   82210:	9302      	str	r3, [sp, #8]
   82212:	2400      	movs	r4, #0
   82214:	e66e      	b.n	81ef4 <_vfiprintf_r+0x2c0>
   82216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8221a:	f898 2000 	ldrb.w	r2, [r8]
   8221e:	e57b      	b.n	81d18 <_vfiprintf_r+0xe4>
   82220:	f898 2000 	ldrb.w	r2, [r8]
   82224:	2a6c      	cmp	r2, #108	; 0x6c
   82226:	bf03      	ittte	eq
   82228:	f898 2001 	ldrbeq.w	r2, [r8, #1]
   8222c:	f043 0320 	orreq.w	r3, r3, #32
   82230:	f108 0801 	addeq.w	r8, r8, #1
   82234:	f043 0310 	orrne.w	r3, r3, #16
   82238:	e56e      	b.n	81d18 <_vfiprintf_r+0xe4>
   8223a:	f898 2000 	ldrb.w	r2, [r8]
   8223e:	2001      	movs	r0, #1
   82240:	262b      	movs	r6, #43	; 0x2b
   82242:	e569      	b.n	81d18 <_vfiprintf_r+0xe4>
   82244:	000845cc 	.word	0x000845cc
   82248:	000845dc 	.word	0x000845dc
   8224c:	000845b0 	.word	0x000845b0
   82250:	0008459c 	.word	0x0008459c
   82254:	f04f 0200 	mov.w	r2, #0
   82258:	9907      	ldr	r1, [sp, #28]
   8225a:	9508      	str	r5, [sp, #32]
   8225c:	f8d1 b000 	ldr.w	fp, [r1]
   82260:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   82264:	1d0d      	adds	r5, r1, #4
   82266:	f1bb 0f00 	cmp.w	fp, #0
   8226a:	f000 82e4 	beq.w	82836 <_vfiprintf_r+0xc02>
   8226e:	1c67      	adds	r7, r4, #1
   82270:	f000 82c3 	beq.w	827fa <_vfiprintf_r+0xbc6>
   82274:	4622      	mov	r2, r4
   82276:	2100      	movs	r1, #0
   82278:	4658      	mov	r0, fp
   8227a:	9301      	str	r3, [sp, #4]
   8227c:	f001 fbc6 	bl	83a0c <memchr>
   82280:	9b01      	ldr	r3, [sp, #4]
   82282:	2800      	cmp	r0, #0
   82284:	f000 82e8 	beq.w	82858 <_vfiprintf_r+0xc24>
   82288:	eba0 020b 	sub.w	r2, r0, fp
   8228c:	9507      	str	r5, [sp, #28]
   8228e:	9205      	str	r2, [sp, #20]
   82290:	9302      	str	r3, [sp, #8]
   82292:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82296:	2400      	movs	r4, #0
   82298:	e624      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   8229a:	f898 2000 	ldrb.w	r2, [r8]
   8229e:	f108 0701 	add.w	r7, r8, #1
   822a2:	2a2a      	cmp	r2, #42	; 0x2a
   822a4:	f000 82e9 	beq.w	8287a <_vfiprintf_r+0xc46>
   822a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   822ac:	2909      	cmp	r1, #9
   822ae:	46b8      	mov	r8, r7
   822b0:	f04f 0400 	mov.w	r4, #0
   822b4:	f63f ad32 	bhi.w	81d1c <_vfiprintf_r+0xe8>
   822b8:	f818 2b01 	ldrb.w	r2, [r8], #1
   822bc:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   822c0:	eb01 0444 	add.w	r4, r1, r4, lsl #1
   822c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   822c8:	2909      	cmp	r1, #9
   822ca:	d9f5      	bls.n	822b8 <_vfiprintf_r+0x684>
   822cc:	e526      	b.n	81d1c <_vfiprintf_r+0xe8>
   822ce:	f043 0320 	orr.w	r3, r3, #32
   822d2:	f898 2000 	ldrb.w	r2, [r8]
   822d6:	e51f      	b.n	81d18 <_vfiprintf_r+0xe4>
   822d8:	9508      	str	r5, [sp, #32]
   822da:	2800      	cmp	r0, #0
   822dc:	f040 82db 	bne.w	82896 <_vfiprintf_r+0xc62>
   822e0:	2a00      	cmp	r2, #0
   822e2:	f000 80f1 	beq.w	824c8 <_vfiprintf_r+0x894>
   822e6:	2101      	movs	r1, #1
   822e8:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   822ec:	f04f 0200 	mov.w	r2, #0
   822f0:	9101      	str	r1, [sp, #4]
   822f2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
   822f6:	9105      	str	r1, [sp, #20]
   822f8:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
   822fc:	e788      	b.n	82210 <_vfiprintf_r+0x5dc>
   822fe:	9a07      	ldr	r2, [sp, #28]
   82300:	6813      	ldr	r3, [r2, #0]
   82302:	3204      	adds	r2, #4
   82304:	9207      	str	r2, [sp, #28]
   82306:	9a03      	ldr	r2, [sp, #12]
   82308:	601a      	str	r2, [r3, #0]
   8230a:	e4d0      	b.n	81cae <_vfiprintf_r+0x7a>
   8230c:	aa0f      	add	r2, sp, #60	; 0x3c
   8230e:	9904      	ldr	r1, [sp, #16]
   82310:	4620      	mov	r0, r4
   82312:	f7ff fc4f 	bl	81bb4 <__sprint_r.part.0>
   82316:	2800      	cmp	r0, #0
   82318:	f040 8143 	bne.w	825a2 <_vfiprintf_r+0x96e>
   8231c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8231e:	46d6      	mov	lr, sl
   82320:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82322:	f101 0c01 	add.w	ip, r1, #1
   82326:	e60a      	b.n	81f3e <_vfiprintf_r+0x30a>
   82328:	aa0f      	add	r2, sp, #60	; 0x3c
   8232a:	9904      	ldr	r1, [sp, #16]
   8232c:	9806      	ldr	r0, [sp, #24]
   8232e:	f7ff fc41 	bl	81bb4 <__sprint_r.part.0>
   82332:	2800      	cmp	r0, #0
   82334:	f040 8135 	bne.w	825a2 <_vfiprintf_r+0x96e>
   82338:	46d1      	mov	r9, sl
   8233a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8233c:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82340:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82342:	1c48      	adds	r0, r1, #1
   82344:	2d00      	cmp	r5, #0
   82346:	f43f ae24 	beq.w	81f92 <_vfiprintf_r+0x35e>
   8234a:	2101      	movs	r1, #1
   8234c:	f10d 0537 	add.w	r5, sp, #55	; 0x37
   82350:	440a      	add	r2, r1
   82352:	2807      	cmp	r0, #7
   82354:	9211      	str	r2, [sp, #68]	; 0x44
   82356:	9010      	str	r0, [sp, #64]	; 0x40
   82358:	f8c9 1004 	str.w	r1, [r9, #4]
   8235c:	f8c9 5000 	str.w	r5, [r9]
   82360:	f340 8109 	ble.w	82576 <_vfiprintf_r+0x942>
   82364:	2a00      	cmp	r2, #0
   82366:	f040 81af 	bne.w	826c8 <_vfiprintf_r+0xa94>
   8236a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8236c:	2b00      	cmp	r3, #0
   8236e:	f43f ae23 	beq.w	81fb8 <_vfiprintf_r+0x384>
   82372:	2202      	movs	r2, #2
   82374:	4608      	mov	r0, r1
   82376:	46d1      	mov	r9, sl
   82378:	ab0e      	add	r3, sp, #56	; 0x38
   8237a:	921d      	str	r2, [sp, #116]	; 0x74
   8237c:	931c      	str	r3, [sp, #112]	; 0x70
   8237e:	4601      	mov	r1, r0
   82380:	f109 0908 	add.w	r9, r9, #8
   82384:	3001      	adds	r0, #1
   82386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   82388:	2b80      	cmp	r3, #128	; 0x80
   8238a:	f43f ae1c 	beq.w	81fc6 <_vfiprintf_r+0x392>
   8238e:	9b05      	ldr	r3, [sp, #20]
   82390:	1ae4      	subs	r4, r4, r3
   82392:	2c00      	cmp	r4, #0
   82394:	dd2f      	ble.n	823f6 <_vfiprintf_r+0x7c2>
   82396:	2c10      	cmp	r4, #16
   82398:	f340 8220 	ble.w	827dc <_vfiprintf_r+0xba8>
   8239c:	46ce      	mov	lr, r9
   8239e:	2610      	movs	r6, #16
   823a0:	4db2      	ldr	r5, [pc, #712]	; (8266c <_vfiprintf_r+0xa38>)
   823a2:	9f06      	ldr	r7, [sp, #24]
   823a4:	f8dd 9010 	ldr.w	r9, [sp, #16]
   823a8:	e006      	b.n	823b8 <_vfiprintf_r+0x784>
   823aa:	1c88      	adds	r0, r1, #2
   823ac:	4619      	mov	r1, r3
   823ae:	f10e 0e08 	add.w	lr, lr, #8
   823b2:	3c10      	subs	r4, #16
   823b4:	2c10      	cmp	r4, #16
   823b6:	dd10      	ble.n	823da <_vfiprintf_r+0x7a6>
   823b8:	1c4b      	adds	r3, r1, #1
   823ba:	3210      	adds	r2, #16
   823bc:	2b07      	cmp	r3, #7
   823be:	9211      	str	r2, [sp, #68]	; 0x44
   823c0:	e88e 0060 	stmia.w	lr, {r5, r6}
   823c4:	9310      	str	r3, [sp, #64]	; 0x40
   823c6:	ddf0      	ble.n	823aa <_vfiprintf_r+0x776>
   823c8:	2a00      	cmp	r2, #0
   823ca:	d165      	bne.n	82498 <_vfiprintf_r+0x864>
   823cc:	3c10      	subs	r4, #16
   823ce:	2c10      	cmp	r4, #16
   823d0:	f04f 0001 	mov.w	r0, #1
   823d4:	4611      	mov	r1, r2
   823d6:	46d6      	mov	lr, sl
   823d8:	dcee      	bgt.n	823b8 <_vfiprintf_r+0x784>
   823da:	46f1      	mov	r9, lr
   823dc:	4422      	add	r2, r4
   823de:	2807      	cmp	r0, #7
   823e0:	9211      	str	r2, [sp, #68]	; 0x44
   823e2:	f8c9 5000 	str.w	r5, [r9]
   823e6:	f8c9 4004 	str.w	r4, [r9, #4]
   823ea:	9010      	str	r0, [sp, #64]	; 0x40
   823ec:	f300 8085 	bgt.w	824fa <_vfiprintf_r+0x8c6>
   823f0:	f109 0908 	add.w	r9, r9, #8
   823f4:	3001      	adds	r0, #1
   823f6:	9905      	ldr	r1, [sp, #20]
   823f8:	2807      	cmp	r0, #7
   823fa:	440a      	add	r2, r1
   823fc:	9211      	str	r2, [sp, #68]	; 0x44
   823fe:	f8c9 b000 	str.w	fp, [r9]
   82402:	f8c9 1004 	str.w	r1, [r9, #4]
   82406:	9010      	str	r0, [sp, #64]	; 0x40
   82408:	f340 8082 	ble.w	82510 <_vfiprintf_r+0x8dc>
   8240c:	2a00      	cmp	r2, #0
   8240e:	f040 8118 	bne.w	82642 <_vfiprintf_r+0xa0e>
   82412:	9b02      	ldr	r3, [sp, #8]
   82414:	9210      	str	r2, [sp, #64]	; 0x40
   82416:	0758      	lsls	r0, r3, #29
   82418:	d535      	bpl.n	82486 <_vfiprintf_r+0x852>
   8241a:	9b08      	ldr	r3, [sp, #32]
   8241c:	9901      	ldr	r1, [sp, #4]
   8241e:	1a5c      	subs	r4, r3, r1
   82420:	2c00      	cmp	r4, #0
   82422:	f340 80e7 	ble.w	825f4 <_vfiprintf_r+0x9c0>
   82426:	46d1      	mov	r9, sl
   82428:	2c10      	cmp	r4, #16
   8242a:	f340 820d 	ble.w	82848 <_vfiprintf_r+0xc14>
   8242e:	2510      	movs	r5, #16
   82430:	9910      	ldr	r1, [sp, #64]	; 0x40
   82432:	4e8f      	ldr	r6, [pc, #572]	; (82670 <_vfiprintf_r+0xa3c>)
   82434:	9f06      	ldr	r7, [sp, #24]
   82436:	f8dd b010 	ldr.w	fp, [sp, #16]
   8243a:	e006      	b.n	8244a <_vfiprintf_r+0x816>
   8243c:	1c88      	adds	r0, r1, #2
   8243e:	4619      	mov	r1, r3
   82440:	f109 0908 	add.w	r9, r9, #8
   82444:	3c10      	subs	r4, #16
   82446:	2c10      	cmp	r4, #16
   82448:	dd11      	ble.n	8246e <_vfiprintf_r+0x83a>
   8244a:	1c4b      	adds	r3, r1, #1
   8244c:	3210      	adds	r2, #16
   8244e:	2b07      	cmp	r3, #7
   82450:	9211      	str	r2, [sp, #68]	; 0x44
   82452:	f8c9 6000 	str.w	r6, [r9]
   82456:	f8c9 5004 	str.w	r5, [r9, #4]
   8245a:	9310      	str	r3, [sp, #64]	; 0x40
   8245c:	ddee      	ble.n	8243c <_vfiprintf_r+0x808>
   8245e:	bb42      	cbnz	r2, 824b2 <_vfiprintf_r+0x87e>
   82460:	3c10      	subs	r4, #16
   82462:	2c10      	cmp	r4, #16
   82464:	f04f 0001 	mov.w	r0, #1
   82468:	4611      	mov	r1, r2
   8246a:	46d1      	mov	r9, sl
   8246c:	dced      	bgt.n	8244a <_vfiprintf_r+0x816>
   8246e:	4422      	add	r2, r4
   82470:	2807      	cmp	r0, #7
   82472:	9211      	str	r2, [sp, #68]	; 0x44
   82474:	f8c9 6000 	str.w	r6, [r9]
   82478:	f8c9 4004 	str.w	r4, [r9, #4]
   8247c:	9010      	str	r0, [sp, #64]	; 0x40
   8247e:	dd51      	ble.n	82524 <_vfiprintf_r+0x8f0>
   82480:	2a00      	cmp	r2, #0
   82482:	f040 819a 	bne.w	827ba <_vfiprintf_r+0xb86>
   82486:	9b03      	ldr	r3, [sp, #12]
   82488:	9a08      	ldr	r2, [sp, #32]
   8248a:	9901      	ldr	r1, [sp, #4]
   8248c:	428a      	cmp	r2, r1
   8248e:	bfac      	ite	ge
   82490:	189b      	addge	r3, r3, r2
   82492:	185b      	addlt	r3, r3, r1
   82494:	9303      	str	r3, [sp, #12]
   82496:	e04e      	b.n	82536 <_vfiprintf_r+0x902>
   82498:	aa0f      	add	r2, sp, #60	; 0x3c
   8249a:	4649      	mov	r1, r9
   8249c:	4638      	mov	r0, r7
   8249e:	f7ff fb89 	bl	81bb4 <__sprint_r.part.0>
   824a2:	2800      	cmp	r0, #0
   824a4:	f040 813e 	bne.w	82724 <_vfiprintf_r+0xaf0>
   824a8:	9910      	ldr	r1, [sp, #64]	; 0x40
   824aa:	46d6      	mov	lr, sl
   824ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824ae:	1c48      	adds	r0, r1, #1
   824b0:	e77f      	b.n	823b2 <_vfiprintf_r+0x77e>
   824b2:	aa0f      	add	r2, sp, #60	; 0x3c
   824b4:	4659      	mov	r1, fp
   824b6:	4638      	mov	r0, r7
   824b8:	f7ff fb7c 	bl	81bb4 <__sprint_r.part.0>
   824bc:	b960      	cbnz	r0, 824d8 <_vfiprintf_r+0x8a4>
   824be:	9910      	ldr	r1, [sp, #64]	; 0x40
   824c0:	46d1      	mov	r9, sl
   824c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
   824c4:	1c48      	adds	r0, r1, #1
   824c6:	e7bd      	b.n	82444 <_vfiprintf_r+0x810>
   824c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   824ca:	f8dd b010 	ldr.w	fp, [sp, #16]
   824ce:	2b00      	cmp	r3, #0
   824d0:	f040 81ca 	bne.w	82868 <_vfiprintf_r+0xc34>
   824d4:	2300      	movs	r3, #0
   824d6:	9310      	str	r3, [sp, #64]	; 0x40
   824d8:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
   824dc:	f013 0f01 	tst.w	r3, #1
   824e0:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   824e4:	d102      	bne.n	824ec <_vfiprintf_r+0x8b8>
   824e6:	059a      	lsls	r2, r3, #22
   824e8:	f140 80dd 	bpl.w	826a6 <_vfiprintf_r+0xa72>
   824ec:	065b      	lsls	r3, r3, #25
   824ee:	f53f acad 	bmi.w	81e4c <_vfiprintf_r+0x218>
   824f2:	9803      	ldr	r0, [sp, #12]
   824f4:	b02d      	add	sp, #180	; 0xb4
   824f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   824fa:	2a00      	cmp	r2, #0
   824fc:	f040 8105 	bne.w	8270a <_vfiprintf_r+0xad6>
   82500:	2301      	movs	r3, #1
   82502:	46d1      	mov	r9, sl
   82504:	9a05      	ldr	r2, [sp, #20]
   82506:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
   8250a:	921d      	str	r2, [sp, #116]	; 0x74
   8250c:	9211      	str	r2, [sp, #68]	; 0x44
   8250e:	9310      	str	r3, [sp, #64]	; 0x40
   82510:	f109 0908 	add.w	r9, r9, #8
   82514:	9b02      	ldr	r3, [sp, #8]
   82516:	0759      	lsls	r1, r3, #29
   82518:	d504      	bpl.n	82524 <_vfiprintf_r+0x8f0>
   8251a:	9b08      	ldr	r3, [sp, #32]
   8251c:	9901      	ldr	r1, [sp, #4]
   8251e:	1a5c      	subs	r4, r3, r1
   82520:	2c00      	cmp	r4, #0
   82522:	dc81      	bgt.n	82428 <_vfiprintf_r+0x7f4>
   82524:	9b03      	ldr	r3, [sp, #12]
   82526:	9908      	ldr	r1, [sp, #32]
   82528:	9801      	ldr	r0, [sp, #4]
   8252a:	4281      	cmp	r1, r0
   8252c:	bfac      	ite	ge
   8252e:	185b      	addge	r3, r3, r1
   82530:	181b      	addlt	r3, r3, r0
   82532:	9303      	str	r3, [sp, #12]
   82534:	bb72      	cbnz	r2, 82594 <_vfiprintf_r+0x960>
   82536:	2300      	movs	r3, #0
   82538:	46d1      	mov	r9, sl
   8253a:	9310      	str	r3, [sp, #64]	; 0x40
   8253c:	f7ff bbb7 	b.w	81cae <_vfiprintf_r+0x7a>
   82540:	aa0f      	add	r2, sp, #60	; 0x3c
   82542:	9904      	ldr	r1, [sp, #16]
   82544:	4620      	mov	r0, r4
   82546:	f7ff fb35 	bl	81bb4 <__sprint_r.part.0>
   8254a:	bb50      	cbnz	r0, 825a2 <_vfiprintf_r+0x96e>
   8254c:	9910      	ldr	r1, [sp, #64]	; 0x40
   8254e:	46d4      	mov	ip, sl
   82550:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82552:	f101 0e01 	add.w	lr, r1, #1
   82556:	e54a      	b.n	81fee <_vfiprintf_r+0x3ba>
   82558:	2a00      	cmp	r2, #0
   8255a:	f47f aee5 	bne.w	82328 <_vfiprintf_r+0x6f4>
   8255e:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
   82562:	2900      	cmp	r1, #0
   82564:	f000 811a 	beq.w	8279c <_vfiprintf_r+0xb68>
   82568:	2201      	movs	r2, #1
   8256a:	46d1      	mov	r9, sl
   8256c:	4610      	mov	r0, r2
   8256e:	f10d 0137 	add.w	r1, sp, #55	; 0x37
   82572:	921d      	str	r2, [sp, #116]	; 0x74
   82574:	911c      	str	r1, [sp, #112]	; 0x70
   82576:	4601      	mov	r1, r0
   82578:	f109 0908 	add.w	r9, r9, #8
   8257c:	3001      	adds	r0, #1
   8257e:	e508      	b.n	81f92 <_vfiprintf_r+0x35e>
   82580:	9b02      	ldr	r3, [sp, #8]
   82582:	2a01      	cmp	r2, #1
   82584:	f000 8097 	beq.w	826b6 <_vfiprintf_r+0xa82>
   82588:	2a02      	cmp	r2, #2
   8258a:	d10d      	bne.n	825a8 <_vfiprintf_r+0x974>
   8258c:	9302      	str	r3, [sp, #8]
   8258e:	2600      	movs	r6, #0
   82590:	2700      	movs	r7, #0
   82592:	e5b2      	b.n	820fa <_vfiprintf_r+0x4c6>
   82594:	aa0f      	add	r2, sp, #60	; 0x3c
   82596:	9904      	ldr	r1, [sp, #16]
   82598:	9806      	ldr	r0, [sp, #24]
   8259a:	f7ff fb0b 	bl	81bb4 <__sprint_r.part.0>
   8259e:	2800      	cmp	r0, #0
   825a0:	d0c9      	beq.n	82536 <_vfiprintf_r+0x902>
   825a2:	f8dd b010 	ldr.w	fp, [sp, #16]
   825a6:	e797      	b.n	824d8 <_vfiprintf_r+0x8a4>
   825a8:	2600      	movs	r6, #0
   825aa:	2700      	movs	r7, #0
   825ac:	9302      	str	r3, [sp, #8]
   825ae:	4651      	mov	r1, sl
   825b0:	e000      	b.n	825b4 <_vfiprintf_r+0x980>
   825b2:	4659      	mov	r1, fp
   825b4:	08f2      	lsrs	r2, r6, #3
   825b6:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
   825ba:	08f8      	lsrs	r0, r7, #3
   825bc:	f006 0307 	and.w	r3, r6, #7
   825c0:	4607      	mov	r7, r0
   825c2:	4616      	mov	r6, r2
   825c4:	3330      	adds	r3, #48	; 0x30
   825c6:	ea56 0207 	orrs.w	r2, r6, r7
   825ca:	f801 3c01 	strb.w	r3, [r1, #-1]
   825ce:	f101 3bff 	add.w	fp, r1, #4294967295
   825d2:	d1ee      	bne.n	825b2 <_vfiprintf_r+0x97e>
   825d4:	9a02      	ldr	r2, [sp, #8]
   825d6:	07d6      	lsls	r6, r2, #31
   825d8:	f57f ad9f 	bpl.w	8211a <_vfiprintf_r+0x4e6>
   825dc:	2b30      	cmp	r3, #48	; 0x30
   825de:	f43f ad9c 	beq.w	8211a <_vfiprintf_r+0x4e6>
   825e2:	2330      	movs	r3, #48	; 0x30
   825e4:	3902      	subs	r1, #2
   825e6:	f80b 3c01 	strb.w	r3, [fp, #-1]
   825ea:	ebaa 0301 	sub.w	r3, sl, r1
   825ee:	9305      	str	r3, [sp, #20]
   825f0:	468b      	mov	fp, r1
   825f2:	e477      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   825f4:	9b03      	ldr	r3, [sp, #12]
   825f6:	9a08      	ldr	r2, [sp, #32]
   825f8:	428a      	cmp	r2, r1
   825fa:	bfac      	ite	ge
   825fc:	189b      	addge	r3, r3, r2
   825fe:	185b      	addlt	r3, r3, r1
   82600:	9303      	str	r3, [sp, #12]
   82602:	e798      	b.n	82536 <_vfiprintf_r+0x902>
   82604:	2202      	movs	r2, #2
   82606:	e44e      	b.n	81ea6 <_vfiprintf_r+0x272>
   82608:	2f00      	cmp	r7, #0
   8260a:	bf08      	it	eq
   8260c:	2e0a      	cmpeq	r6, #10
   8260e:	d351      	bcc.n	826b4 <_vfiprintf_r+0xa80>
   82610:	46d3      	mov	fp, sl
   82612:	4630      	mov	r0, r6
   82614:	4639      	mov	r1, r7
   82616:	220a      	movs	r2, #10
   82618:	2300      	movs	r3, #0
   8261a:	f7fe ff45 	bl	814a8 <__aeabi_uldivmod>
   8261e:	3230      	adds	r2, #48	; 0x30
   82620:	f80b 2d01 	strb.w	r2, [fp, #-1]!
   82624:	4630      	mov	r0, r6
   82626:	4639      	mov	r1, r7
   82628:	2300      	movs	r3, #0
   8262a:	220a      	movs	r2, #10
   8262c:	f7fe ff3c 	bl	814a8 <__aeabi_uldivmod>
   82630:	4606      	mov	r6, r0
   82632:	460f      	mov	r7, r1
   82634:	ea56 0307 	orrs.w	r3, r6, r7
   82638:	d1eb      	bne.n	82612 <_vfiprintf_r+0x9de>
   8263a:	e56e      	b.n	8211a <_vfiprintf_r+0x4e6>
   8263c:	9405      	str	r4, [sp, #20]
   8263e:	46d3      	mov	fp, sl
   82640:	e450      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   82642:	aa0f      	add	r2, sp, #60	; 0x3c
   82644:	9904      	ldr	r1, [sp, #16]
   82646:	9806      	ldr	r0, [sp, #24]
   82648:	f7ff fab4 	bl	81bb4 <__sprint_r.part.0>
   8264c:	2800      	cmp	r0, #0
   8264e:	d1a8      	bne.n	825a2 <_vfiprintf_r+0x96e>
   82650:	46d1      	mov	r9, sl
   82652:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82654:	e75e      	b.n	82514 <_vfiprintf_r+0x8e0>
   82656:	aa0f      	add	r2, sp, #60	; 0x3c
   82658:	9904      	ldr	r1, [sp, #16]
   8265a:	9806      	ldr	r0, [sp, #24]
   8265c:	f7ff faaa 	bl	81bb4 <__sprint_r.part.0>
   82660:	2800      	cmp	r0, #0
   82662:	d19e      	bne.n	825a2 <_vfiprintf_r+0x96e>
   82664:	46d1      	mov	r9, sl
   82666:	f7ff bbbb 	b.w	81de0 <_vfiprintf_r+0x1ac>
   8266a:	bf00      	nop
   8266c:	000845dc 	.word	0x000845dc
   82670:	000845cc 	.word	0x000845cc
   82674:	3104      	adds	r1, #4
   82676:	6816      	ldr	r6, [r2, #0]
   82678:	2700      	movs	r7, #0
   8267a:	2201      	movs	r2, #1
   8267c:	9107      	str	r1, [sp, #28]
   8267e:	e412      	b.n	81ea6 <_vfiprintf_r+0x272>
   82680:	9807      	ldr	r0, [sp, #28]
   82682:	2700      	movs	r7, #0
   82684:	4601      	mov	r1, r0
   82686:	3104      	adds	r1, #4
   82688:	6806      	ldr	r6, [r0, #0]
   8268a:	9107      	str	r1, [sp, #28]
   8268c:	e40b      	b.n	81ea6 <_vfiprintf_r+0x272>
   8268e:	680e      	ldr	r6, [r1, #0]
   82690:	3104      	adds	r1, #4
   82692:	9107      	str	r1, [sp, #28]
   82694:	2700      	movs	r7, #0
   82696:	e592      	b.n	821be <_vfiprintf_r+0x58a>
   82698:	6816      	ldr	r6, [r2, #0]
   8269a:	3204      	adds	r2, #4
   8269c:	17f7      	asrs	r7, r6, #31
   8269e:	9207      	str	r2, [sp, #28]
   826a0:	4630      	mov	r0, r6
   826a2:	4639      	mov	r1, r7
   826a4:	e512      	b.n	820cc <_vfiprintf_r+0x498>
   826a6:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   826aa:	f000 fe75 	bl	83398 <__retarget_lock_release_recursive>
   826ae:	f8bb 300c 	ldrh.w	r3, [fp, #12]
   826b2:	e71b      	b.n	824ec <_vfiprintf_r+0x8b8>
   826b4:	9b02      	ldr	r3, [sp, #8]
   826b6:	9302      	str	r3, [sp, #8]
   826b8:	2301      	movs	r3, #1
   826ba:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
   826be:	3630      	adds	r6, #48	; 0x30
   826c0:	f80b 6d41 	strb.w	r6, [fp, #-65]!
   826c4:	9305      	str	r3, [sp, #20]
   826c6:	e40d      	b.n	81ee4 <_vfiprintf_r+0x2b0>
   826c8:	aa0f      	add	r2, sp, #60	; 0x3c
   826ca:	9904      	ldr	r1, [sp, #16]
   826cc:	9806      	ldr	r0, [sp, #24]
   826ce:	f7ff fa71 	bl	81bb4 <__sprint_r.part.0>
   826d2:	2800      	cmp	r0, #0
   826d4:	f47f af65 	bne.w	825a2 <_vfiprintf_r+0x96e>
   826d8:	9910      	ldr	r1, [sp, #64]	; 0x40
   826da:	46d1      	mov	r9, sl
   826dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826de:	1c48      	adds	r0, r1, #1
   826e0:	e457      	b.n	81f92 <_vfiprintf_r+0x35e>
   826e2:	aa0f      	add	r2, sp, #60	; 0x3c
   826e4:	9904      	ldr	r1, [sp, #16]
   826e6:	9806      	ldr	r0, [sp, #24]
   826e8:	f7ff fa64 	bl	81bb4 <__sprint_r.part.0>
   826ec:	2800      	cmp	r0, #0
   826ee:	f47f af58 	bne.w	825a2 <_vfiprintf_r+0x96e>
   826f2:	9910      	ldr	r1, [sp, #64]	; 0x40
   826f4:	46d1      	mov	r9, sl
   826f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   826f8:	1c48      	adds	r0, r1, #1
   826fa:	e644      	b.n	82386 <_vfiprintf_r+0x752>
   826fc:	2a00      	cmp	r2, #0
   826fe:	f040 8087 	bne.w	82810 <_vfiprintf_r+0xbdc>
   82702:	2001      	movs	r0, #1
   82704:	4611      	mov	r1, r2
   82706:	46d1      	mov	r9, sl
   82708:	e641      	b.n	8238e <_vfiprintf_r+0x75a>
   8270a:	aa0f      	add	r2, sp, #60	; 0x3c
   8270c:	9904      	ldr	r1, [sp, #16]
   8270e:	9806      	ldr	r0, [sp, #24]
   82710:	f7ff fa50 	bl	81bb4 <__sprint_r.part.0>
   82714:	2800      	cmp	r0, #0
   82716:	f47f af44 	bne.w	825a2 <_vfiprintf_r+0x96e>
   8271a:	9810      	ldr	r0, [sp, #64]	; 0x40
   8271c:	46d1      	mov	r9, sl
   8271e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82720:	3001      	adds	r0, #1
   82722:	e668      	b.n	823f6 <_vfiprintf_r+0x7c2>
   82724:	46cb      	mov	fp, r9
   82726:	e6d7      	b.n	824d8 <_vfiprintf_r+0x8a4>
   82728:	9d07      	ldr	r5, [sp, #28]
   8272a:	3507      	adds	r5, #7
   8272c:	f025 0507 	bic.w	r5, r5, #7
   82730:	f105 0208 	add.w	r2, r5, #8
   82734:	e9d5 0100 	ldrd	r0, r1, [r5]
   82738:	9207      	str	r2, [sp, #28]
   8273a:	4606      	mov	r6, r0
   8273c:	460f      	mov	r7, r1
   8273e:	e4c5      	b.n	820cc <_vfiprintf_r+0x498>
   82740:	9d07      	ldr	r5, [sp, #28]
   82742:	3507      	adds	r5, #7
   82744:	f025 0207 	bic.w	r2, r5, #7
   82748:	f102 0108 	add.w	r1, r2, #8
   8274c:	e9d2 6700 	ldrd	r6, r7, [r2]
   82750:	9107      	str	r1, [sp, #28]
   82752:	2201      	movs	r2, #1
   82754:	f7ff bba7 	b.w	81ea6 <_vfiprintf_r+0x272>
   82758:	9d07      	ldr	r5, [sp, #28]
   8275a:	3507      	adds	r5, #7
   8275c:	f025 0207 	bic.w	r2, r5, #7
   82760:	f102 0108 	add.w	r1, r2, #8
   82764:	e9d2 6700 	ldrd	r6, r7, [r2]
   82768:	9107      	str	r1, [sp, #28]
   8276a:	2200      	movs	r2, #0
   8276c:	f7ff bb9b 	b.w	81ea6 <_vfiprintf_r+0x272>
   82770:	9d07      	ldr	r5, [sp, #28]
   82772:	3507      	adds	r5, #7
   82774:	f025 0107 	bic.w	r1, r5, #7
   82778:	f101 0008 	add.w	r0, r1, #8
   8277c:	9007      	str	r0, [sp, #28]
   8277e:	e9d1 6700 	ldrd	r6, r7, [r1]
   82782:	e51c      	b.n	821be <_vfiprintf_r+0x58a>
   82784:	46d3      	mov	fp, sl
   82786:	f7ff bbad 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   8278a:	252d      	movs	r5, #45	; 0x2d
   8278c:	4276      	negs	r6, r6
   8278e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
   82792:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
   82796:	2201      	movs	r2, #1
   82798:	f7ff bb8a 	b.w	81eb0 <_vfiprintf_r+0x27c>
   8279c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8279e:	b9b3      	cbnz	r3, 827ce <_vfiprintf_r+0xb9a>
   827a0:	4611      	mov	r1, r2
   827a2:	2001      	movs	r0, #1
   827a4:	46d1      	mov	r9, sl
   827a6:	e5f2      	b.n	8238e <_vfiprintf_r+0x75a>
   827a8:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
   827ac:	f000 fdf4 	bl	83398 <__retarget_lock_release_recursive>
   827b0:	f04f 33ff 	mov.w	r3, #4294967295
   827b4:	9303      	str	r3, [sp, #12]
   827b6:	f7ff bb4c 	b.w	81e52 <_vfiprintf_r+0x21e>
   827ba:	aa0f      	add	r2, sp, #60	; 0x3c
   827bc:	9904      	ldr	r1, [sp, #16]
   827be:	9806      	ldr	r0, [sp, #24]
   827c0:	f7ff f9f8 	bl	81bb4 <__sprint_r.part.0>
   827c4:	2800      	cmp	r0, #0
   827c6:	f47f aeec 	bne.w	825a2 <_vfiprintf_r+0x96e>
   827ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
   827cc:	e6aa      	b.n	82524 <_vfiprintf_r+0x8f0>
   827ce:	2202      	movs	r2, #2
   827d0:	ab0e      	add	r3, sp, #56	; 0x38
   827d2:	921d      	str	r2, [sp, #116]	; 0x74
   827d4:	931c      	str	r3, [sp, #112]	; 0x70
   827d6:	2001      	movs	r0, #1
   827d8:	46d1      	mov	r9, sl
   827da:	e5d0      	b.n	8237e <_vfiprintf_r+0x74a>
   827dc:	4d34      	ldr	r5, [pc, #208]	; (828b0 <_vfiprintf_r+0xc7c>)
   827de:	e5fd      	b.n	823dc <_vfiprintf_r+0x7a8>
   827e0:	9a07      	ldr	r2, [sp, #28]
   827e2:	4613      	mov	r3, r2
   827e4:	3304      	adds	r3, #4
   827e6:	9307      	str	r3, [sp, #28]
   827e8:	9b03      	ldr	r3, [sp, #12]
   827ea:	6811      	ldr	r1, [r2, #0]
   827ec:	17dd      	asrs	r5, r3, #31
   827ee:	461a      	mov	r2, r3
   827f0:	462b      	mov	r3, r5
   827f2:	e9c1 2300 	strd	r2, r3, [r1]
   827f6:	f7ff ba5a 	b.w	81cae <_vfiprintf_r+0x7a>
   827fa:	4658      	mov	r0, fp
   827fc:	9507      	str	r5, [sp, #28]
   827fe:	9302      	str	r3, [sp, #8]
   82800:	f7ff f9aa 	bl	81b58 <strlen>
   82804:	2400      	movs	r4, #0
   82806:	9005      	str	r0, [sp, #20]
   82808:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   8280c:	f7ff bb6a 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   82810:	aa0f      	add	r2, sp, #60	; 0x3c
   82812:	9904      	ldr	r1, [sp, #16]
   82814:	9806      	ldr	r0, [sp, #24]
   82816:	f7ff f9cd 	bl	81bb4 <__sprint_r.part.0>
   8281a:	2800      	cmp	r0, #0
   8281c:	f47f aec1 	bne.w	825a2 <_vfiprintf_r+0x96e>
   82820:	9910      	ldr	r1, [sp, #64]	; 0x40
   82822:	46d1      	mov	r9, sl
   82824:	9a11      	ldr	r2, [sp, #68]	; 0x44
   82826:	1c48      	adds	r0, r1, #1
   82828:	e5b1      	b.n	8238e <_vfiprintf_r+0x75a>
   8282a:	9910      	ldr	r1, [sp, #64]	; 0x40
   8282c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   8282e:	3101      	adds	r1, #1
   82830:	4e20      	ldr	r6, [pc, #128]	; (828b4 <_vfiprintf_r+0xc80>)
   82832:	f7ff bb9c 	b.w	81f6e <_vfiprintf_r+0x33a>
   82836:	2c06      	cmp	r4, #6
   82838:	bf28      	it	cs
   8283a:	2406      	movcs	r4, #6
   8283c:	9507      	str	r5, [sp, #28]
   8283e:	9405      	str	r4, [sp, #20]
   82840:	9401      	str	r4, [sp, #4]
   82842:	f8df b074 	ldr.w	fp, [pc, #116]	; 828b8 <_vfiprintf_r+0xc84>
   82846:	e4e3      	b.n	82210 <_vfiprintf_r+0x5dc>
   82848:	9810      	ldr	r0, [sp, #64]	; 0x40
   8284a:	4e1a      	ldr	r6, [pc, #104]	; (828b4 <_vfiprintf_r+0xc80>)
   8284c:	3001      	adds	r0, #1
   8284e:	e60e      	b.n	8246e <_vfiprintf_r+0x83a>
   82850:	4686      	mov	lr, r0
   82852:	4d17      	ldr	r5, [pc, #92]	; (828b0 <_vfiprintf_r+0xc7c>)
   82854:	f7ff bbe2 	b.w	8201c <_vfiprintf_r+0x3e8>
   82858:	9405      	str	r4, [sp, #20]
   8285a:	9507      	str	r5, [sp, #28]
   8285c:	9302      	str	r3, [sp, #8]
   8285e:	4604      	mov	r4, r0
   82860:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
   82864:	f7ff bb3e 	b.w	81ee4 <_vfiprintf_r+0x2b0>
   82868:	9806      	ldr	r0, [sp, #24]
   8286a:	aa0f      	add	r2, sp, #60	; 0x3c
   8286c:	4659      	mov	r1, fp
   8286e:	f7ff f9a1 	bl	81bb4 <__sprint_r.part.0>
   82872:	2800      	cmp	r0, #0
   82874:	f43f ae2e 	beq.w	824d4 <_vfiprintf_r+0x8a0>
   82878:	e62e      	b.n	824d8 <_vfiprintf_r+0x8a4>
   8287a:	9907      	ldr	r1, [sp, #28]
   8287c:	f898 2001 	ldrb.w	r2, [r8, #1]
   82880:	680c      	ldr	r4, [r1, #0]
   82882:	3104      	adds	r1, #4
   82884:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
   82888:	46b8      	mov	r8, r7
   8288a:	9107      	str	r1, [sp, #28]
   8288c:	f7ff ba44 	b.w	81d18 <_vfiprintf_r+0xe4>
   82890:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   82894:	e4a7      	b.n	821e6 <_vfiprintf_r+0x5b2>
   82896:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   8289a:	e521      	b.n	822e0 <_vfiprintf_r+0x6ac>
   8289c:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828a0:	e47c      	b.n	8219c <_vfiprintf_r+0x568>
   828a2:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828a6:	e43f      	b.n	82128 <_vfiprintf_r+0x4f4>
   828a8:	f88d 6037 	strb.w	r6, [sp, #55]	; 0x37
   828ac:	f7ff bbfa 	b.w	820a4 <_vfiprintf_r+0x470>
   828b0:	000845dc 	.word	0x000845dc
   828b4:	000845cc 	.word	0x000845cc
   828b8:	000845c4 	.word	0x000845c4

000828bc <__sbprintf>:
   828bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   828c0:	460c      	mov	r4, r1
   828c2:	f04f 0e00 	mov.w	lr, #0
   828c6:	f44f 6580 	mov.w	r5, #1024	; 0x400
   828ca:	4606      	mov	r6, r0
   828cc:	4617      	mov	r7, r2
   828ce:	4698      	mov	r8, r3
   828d0:	6e62      	ldr	r2, [r4, #100]	; 0x64
   828d2:	89e3      	ldrh	r3, [r4, #14]
   828d4:	8989      	ldrh	r1, [r1, #12]
   828d6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   828da:	f021 0102 	bic.w	r1, r1, #2
   828de:	9219      	str	r2, [sp, #100]	; 0x64
   828e0:	f8ad 300e 	strh.w	r3, [sp, #14]
   828e4:	69e2      	ldr	r2, [r4, #28]
   828e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   828e8:	f8ad 100c 	strh.w	r1, [sp, #12]
   828ec:	a816      	add	r0, sp, #88	; 0x58
   828ee:	a91a      	add	r1, sp, #104	; 0x68
   828f0:	f8cd e018 	str.w	lr, [sp, #24]
   828f4:	9207      	str	r2, [sp, #28]
   828f6:	9309      	str	r3, [sp, #36]	; 0x24
   828f8:	9100      	str	r1, [sp, #0]
   828fa:	9104      	str	r1, [sp, #16]
   828fc:	9502      	str	r5, [sp, #8]
   828fe:	9505      	str	r5, [sp, #20]
   82900:	f000 fd44 	bl	8338c <__retarget_lock_init_recursive>
   82904:	4643      	mov	r3, r8
   82906:	463a      	mov	r2, r7
   82908:	4669      	mov	r1, sp
   8290a:	4630      	mov	r0, r6
   8290c:	f7ff f992 	bl	81c34 <_vfiprintf_r>
   82910:	1e05      	subs	r5, r0, #0
   82912:	db07      	blt.n	82924 <__sbprintf+0x68>
   82914:	4630      	mov	r0, r6
   82916:	4669      	mov	r1, sp
   82918:	f000 f924 	bl	82b64 <_fflush_r>
   8291c:	2800      	cmp	r0, #0
   8291e:	bf18      	it	ne
   82920:	f04f 35ff 	movne.w	r5, #4294967295
   82924:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   82928:	065b      	lsls	r3, r3, #25
   8292a:	d503      	bpl.n	82934 <__sbprintf+0x78>
   8292c:	89a3      	ldrh	r3, [r4, #12]
   8292e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82932:	81a3      	strh	r3, [r4, #12]
   82934:	9816      	ldr	r0, [sp, #88]	; 0x58
   82936:	f000 fd2b 	bl	83390 <__retarget_lock_close_recursive>
   8293a:	4628      	mov	r0, r5
   8293c:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   82940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00082944 <__swsetup_r>:
   82944:	b538      	push	{r3, r4, r5, lr}
   82946:	4b30      	ldr	r3, [pc, #192]	; (82a08 <__swsetup_r+0xc4>)
   82948:	4605      	mov	r5, r0
   8294a:	6818      	ldr	r0, [r3, #0]
   8294c:	460c      	mov	r4, r1
   8294e:	b110      	cbz	r0, 82956 <__swsetup_r+0x12>
   82950:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82952:	2b00      	cmp	r3, #0
   82954:	d038      	beq.n	829c8 <__swsetup_r+0x84>
   82956:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8295a:	b293      	uxth	r3, r2
   8295c:	0718      	lsls	r0, r3, #28
   8295e:	d50c      	bpl.n	8297a <__swsetup_r+0x36>
   82960:	6920      	ldr	r0, [r4, #16]
   82962:	b1a8      	cbz	r0, 82990 <__swsetup_r+0x4c>
   82964:	f013 0201 	ands.w	r2, r3, #1
   82968:	d01e      	beq.n	829a8 <__swsetup_r+0x64>
   8296a:	2200      	movs	r2, #0
   8296c:	6963      	ldr	r3, [r4, #20]
   8296e:	60a2      	str	r2, [r4, #8]
   82970:	425b      	negs	r3, r3
   82972:	61a3      	str	r3, [r4, #24]
   82974:	b1f0      	cbz	r0, 829b4 <__swsetup_r+0x70>
   82976:	2000      	movs	r0, #0
   82978:	bd38      	pop	{r3, r4, r5, pc}
   8297a:	06d9      	lsls	r1, r3, #27
   8297c:	d53b      	bpl.n	829f6 <__swsetup_r+0xb2>
   8297e:	0758      	lsls	r0, r3, #29
   82980:	d425      	bmi.n	829ce <__swsetup_r+0x8a>
   82982:	6920      	ldr	r0, [r4, #16]
   82984:	f042 0308 	orr.w	r3, r2, #8
   82988:	81a3      	strh	r3, [r4, #12]
   8298a:	b29b      	uxth	r3, r3
   8298c:	2800      	cmp	r0, #0
   8298e:	d1e9      	bne.n	82964 <__swsetup_r+0x20>
   82990:	f403 7220 	and.w	r2, r3, #640	; 0x280
   82994:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   82998:	d0e4      	beq.n	82964 <__swsetup_r+0x20>
   8299a:	4628      	mov	r0, r5
   8299c:	4621      	mov	r1, r4
   8299e:	f000 fd2b 	bl	833f8 <__smakebuf_r>
   829a2:	89a3      	ldrh	r3, [r4, #12]
   829a4:	6920      	ldr	r0, [r4, #16]
   829a6:	e7dd      	b.n	82964 <__swsetup_r+0x20>
   829a8:	0799      	lsls	r1, r3, #30
   829aa:	bf58      	it	pl
   829ac:	6962      	ldrpl	r2, [r4, #20]
   829ae:	60a2      	str	r2, [r4, #8]
   829b0:	2800      	cmp	r0, #0
   829b2:	d1e0      	bne.n	82976 <__swsetup_r+0x32>
   829b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   829b8:	061a      	lsls	r2, r3, #24
   829ba:	d5dd      	bpl.n	82978 <__swsetup_r+0x34>
   829bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   829c0:	81a3      	strh	r3, [r4, #12]
   829c2:	f04f 30ff 	mov.w	r0, #4294967295
   829c6:	bd38      	pop	{r3, r4, r5, pc}
   829c8:	f000 f924 	bl	82c14 <__sinit>
   829cc:	e7c3      	b.n	82956 <__swsetup_r+0x12>
   829ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   829d0:	b151      	cbz	r1, 829e8 <__swsetup_r+0xa4>
   829d2:	f104 0340 	add.w	r3, r4, #64	; 0x40
   829d6:	4299      	cmp	r1, r3
   829d8:	d004      	beq.n	829e4 <__swsetup_r+0xa0>
   829da:	4628      	mov	r0, r5
   829dc:	f000 fa40 	bl	82e60 <_free_r>
   829e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   829e4:	2300      	movs	r3, #0
   829e6:	6323      	str	r3, [r4, #48]	; 0x30
   829e8:	2300      	movs	r3, #0
   829ea:	6920      	ldr	r0, [r4, #16]
   829ec:	f022 0224 	bic.w	r2, r2, #36	; 0x24
   829f0:	e884 0009 	stmia.w	r4, {r0, r3}
   829f4:	e7c6      	b.n	82984 <__swsetup_r+0x40>
   829f6:	2309      	movs	r3, #9
   829f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   829fc:	602b      	str	r3, [r5, #0]
   829fe:	f04f 30ff 	mov.w	r0, #4294967295
   82a02:	81a2      	strh	r2, [r4, #12]
   82a04:	bd38      	pop	{r3, r4, r5, pc}
   82a06:	bf00      	nop
   82a08:	20070140 	.word	0x20070140

00082a0c <register_fini>:
   82a0c:	4b02      	ldr	r3, [pc, #8]	; (82a18 <register_fini+0xc>)
   82a0e:	b113      	cbz	r3, 82a16 <register_fini+0xa>
   82a10:	4802      	ldr	r0, [pc, #8]	; (82a1c <register_fini+0x10>)
   82a12:	f000 b805 	b.w	82a20 <atexit>
   82a16:	4770      	bx	lr
   82a18:	00000000 	.word	0x00000000
   82a1c:	00082c8d 	.word	0x00082c8d

00082a20 <atexit>:
   82a20:	2300      	movs	r3, #0
   82a22:	4601      	mov	r1, r0
   82a24:	461a      	mov	r2, r3
   82a26:	4618      	mov	r0, r3
   82a28:	f001 bb56 	b.w	840d8 <__register_exitproc>

00082a2c <__sflush_r>:
   82a2c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   82a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82a34:	b29a      	uxth	r2, r3
   82a36:	460d      	mov	r5, r1
   82a38:	0711      	lsls	r1, r2, #28
   82a3a:	4680      	mov	r8, r0
   82a3c:	d43a      	bmi.n	82ab4 <__sflush_r+0x88>
   82a3e:	686a      	ldr	r2, [r5, #4]
   82a40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   82a44:	2a00      	cmp	r2, #0
   82a46:	81ab      	strh	r3, [r5, #12]
   82a48:	dd70      	ble.n	82b2c <__sflush_r+0x100>
   82a4a:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82a4c:	2c00      	cmp	r4, #0
   82a4e:	d04a      	beq.n	82ae6 <__sflush_r+0xba>
   82a50:	2200      	movs	r2, #0
   82a52:	b29b      	uxth	r3, r3
   82a54:	f8d8 6000 	ldr.w	r6, [r8]
   82a58:	f8c8 2000 	str.w	r2, [r8]
   82a5c:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
   82a60:	d068      	beq.n	82b34 <__sflush_r+0x108>
   82a62:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   82a64:	075f      	lsls	r7, r3, #29
   82a66:	d505      	bpl.n	82a74 <__sflush_r+0x48>
   82a68:	6869      	ldr	r1, [r5, #4]
   82a6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   82a6c:	1a52      	subs	r2, r2, r1
   82a6e:	b10b      	cbz	r3, 82a74 <__sflush_r+0x48>
   82a70:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   82a72:	1ad2      	subs	r2, r2, r3
   82a74:	2300      	movs	r3, #0
   82a76:	69e9      	ldr	r1, [r5, #28]
   82a78:	4640      	mov	r0, r8
   82a7a:	47a0      	blx	r4
   82a7c:	1c44      	adds	r4, r0, #1
   82a7e:	d03d      	beq.n	82afc <__sflush_r+0xd0>
   82a80:	2100      	movs	r1, #0
   82a82:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
   82a86:	692a      	ldr	r2, [r5, #16]
   82a88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   82a8c:	81ab      	strh	r3, [r5, #12]
   82a8e:	04db      	lsls	r3, r3, #19
   82a90:	6069      	str	r1, [r5, #4]
   82a92:	602a      	str	r2, [r5, #0]
   82a94:	d448      	bmi.n	82b28 <__sflush_r+0xfc>
   82a96:	6b29      	ldr	r1, [r5, #48]	; 0x30
   82a98:	f8c8 6000 	str.w	r6, [r8]
   82a9c:	b319      	cbz	r1, 82ae6 <__sflush_r+0xba>
   82a9e:	f105 0340 	add.w	r3, r5, #64	; 0x40
   82aa2:	4299      	cmp	r1, r3
   82aa4:	d002      	beq.n	82aac <__sflush_r+0x80>
   82aa6:	4640      	mov	r0, r8
   82aa8:	f000 f9da 	bl	82e60 <_free_r>
   82aac:	2000      	movs	r0, #0
   82aae:	6328      	str	r0, [r5, #48]	; 0x30
   82ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82ab4:	692e      	ldr	r6, [r5, #16]
   82ab6:	b1b6      	cbz	r6, 82ae6 <__sflush_r+0xba>
   82ab8:	0791      	lsls	r1, r2, #30
   82aba:	bf18      	it	ne
   82abc:	2300      	movne	r3, #0
   82abe:	682c      	ldr	r4, [r5, #0]
   82ac0:	bf08      	it	eq
   82ac2:	696b      	ldreq	r3, [r5, #20]
   82ac4:	602e      	str	r6, [r5, #0]
   82ac6:	1ba4      	subs	r4, r4, r6
   82ac8:	60ab      	str	r3, [r5, #8]
   82aca:	e00a      	b.n	82ae2 <__sflush_r+0xb6>
   82acc:	4623      	mov	r3, r4
   82ace:	4632      	mov	r2, r6
   82ad0:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   82ad2:	69e9      	ldr	r1, [r5, #28]
   82ad4:	4640      	mov	r0, r8
   82ad6:	47b8      	blx	r7
   82ad8:	2800      	cmp	r0, #0
   82ada:	eba4 0400 	sub.w	r4, r4, r0
   82ade:	4406      	add	r6, r0
   82ae0:	dd04      	ble.n	82aec <__sflush_r+0xc0>
   82ae2:	2c00      	cmp	r4, #0
   82ae4:	dcf2      	bgt.n	82acc <__sflush_r+0xa0>
   82ae6:	2000      	movs	r0, #0
   82ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82aec:	89ab      	ldrh	r3, [r5, #12]
   82aee:	f04f 30ff 	mov.w	r0, #4294967295
   82af2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82af6:	81ab      	strh	r3, [r5, #12]
   82af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82afc:	f8d8 4000 	ldr.w	r4, [r8]
   82b00:	2c1d      	cmp	r4, #29
   82b02:	d8f3      	bhi.n	82aec <__sflush_r+0xc0>
   82b04:	4b16      	ldr	r3, [pc, #88]	; (82b60 <__sflush_r+0x134>)
   82b06:	40e3      	lsrs	r3, r4
   82b08:	43db      	mvns	r3, r3
   82b0a:	f013 0301 	ands.w	r3, r3, #1
   82b0e:	d1ed      	bne.n	82aec <__sflush_r+0xc0>
   82b10:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
   82b14:	6929      	ldr	r1, [r5, #16]
   82b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   82b1a:	81aa      	strh	r2, [r5, #12]
   82b1c:	04d2      	lsls	r2, r2, #19
   82b1e:	606b      	str	r3, [r5, #4]
   82b20:	6029      	str	r1, [r5, #0]
   82b22:	d5b8      	bpl.n	82a96 <__sflush_r+0x6a>
   82b24:	2c00      	cmp	r4, #0
   82b26:	d1b6      	bne.n	82a96 <__sflush_r+0x6a>
   82b28:	6528      	str	r0, [r5, #80]	; 0x50
   82b2a:	e7b4      	b.n	82a96 <__sflush_r+0x6a>
   82b2c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   82b2e:	2a00      	cmp	r2, #0
   82b30:	dc8b      	bgt.n	82a4a <__sflush_r+0x1e>
   82b32:	e7d8      	b.n	82ae6 <__sflush_r+0xba>
   82b34:	2301      	movs	r3, #1
   82b36:	69e9      	ldr	r1, [r5, #28]
   82b38:	4640      	mov	r0, r8
   82b3a:	47a0      	blx	r4
   82b3c:	1c43      	adds	r3, r0, #1
   82b3e:	4602      	mov	r2, r0
   82b40:	d002      	beq.n	82b48 <__sflush_r+0x11c>
   82b42:	89ab      	ldrh	r3, [r5, #12]
   82b44:	6aac      	ldr	r4, [r5, #40]	; 0x28
   82b46:	e78d      	b.n	82a64 <__sflush_r+0x38>
   82b48:	f8d8 3000 	ldr.w	r3, [r8]
   82b4c:	2b00      	cmp	r3, #0
   82b4e:	d0f8      	beq.n	82b42 <__sflush_r+0x116>
   82b50:	2b1d      	cmp	r3, #29
   82b52:	d001      	beq.n	82b58 <__sflush_r+0x12c>
   82b54:	2b16      	cmp	r3, #22
   82b56:	d1c9      	bne.n	82aec <__sflush_r+0xc0>
   82b58:	f8c8 6000 	str.w	r6, [r8]
   82b5c:	e7c3      	b.n	82ae6 <__sflush_r+0xba>
   82b5e:	bf00      	nop
   82b60:	20400001 	.word	0x20400001

00082b64 <_fflush_r>:
   82b64:	b538      	push	{r3, r4, r5, lr}
   82b66:	460d      	mov	r5, r1
   82b68:	4604      	mov	r4, r0
   82b6a:	b108      	cbz	r0, 82b70 <_fflush_r+0xc>
   82b6c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   82b6e:	b1bb      	cbz	r3, 82ba0 <_fflush_r+0x3c>
   82b70:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
   82b74:	b188      	cbz	r0, 82b9a <_fflush_r+0x36>
   82b76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b78:	07db      	lsls	r3, r3, #31
   82b7a:	d401      	bmi.n	82b80 <_fflush_r+0x1c>
   82b7c:	0581      	lsls	r1, r0, #22
   82b7e:	d517      	bpl.n	82bb0 <_fflush_r+0x4c>
   82b80:	4620      	mov	r0, r4
   82b82:	4629      	mov	r1, r5
   82b84:	f7ff ff52 	bl	82a2c <__sflush_r>
   82b88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   82b8a:	4604      	mov	r4, r0
   82b8c:	07da      	lsls	r2, r3, #31
   82b8e:	d402      	bmi.n	82b96 <_fflush_r+0x32>
   82b90:	89ab      	ldrh	r3, [r5, #12]
   82b92:	059b      	lsls	r3, r3, #22
   82b94:	d507      	bpl.n	82ba6 <_fflush_r+0x42>
   82b96:	4620      	mov	r0, r4
   82b98:	bd38      	pop	{r3, r4, r5, pc}
   82b9a:	4604      	mov	r4, r0
   82b9c:	4620      	mov	r0, r4
   82b9e:	bd38      	pop	{r3, r4, r5, pc}
   82ba0:	f000 f838 	bl	82c14 <__sinit>
   82ba4:	e7e4      	b.n	82b70 <_fflush_r+0xc>
   82ba6:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82ba8:	f000 fbf6 	bl	83398 <__retarget_lock_release_recursive>
   82bac:	4620      	mov	r0, r4
   82bae:	bd38      	pop	{r3, r4, r5, pc}
   82bb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
   82bb2:	f000 fbef 	bl	83394 <__retarget_lock_acquire_recursive>
   82bb6:	e7e3      	b.n	82b80 <_fflush_r+0x1c>

00082bb8 <_cleanup_r>:
   82bb8:	4901      	ldr	r1, [pc, #4]	; (82bc0 <_cleanup_r+0x8>)
   82bba:	f000 bbb1 	b.w	83320 <_fwalk_reent>
   82bbe:	bf00      	nop
   82bc0:	000841c1 	.word	0x000841c1

00082bc4 <std.isra.0>:
   82bc4:	2300      	movs	r3, #0
   82bc6:	b510      	push	{r4, lr}
   82bc8:	4604      	mov	r4, r0
   82bca:	8181      	strh	r1, [r0, #12]
   82bcc:	81c2      	strh	r2, [r0, #14]
   82bce:	6003      	str	r3, [r0, #0]
   82bd0:	6043      	str	r3, [r0, #4]
   82bd2:	6083      	str	r3, [r0, #8]
   82bd4:	6643      	str	r3, [r0, #100]	; 0x64
   82bd6:	6103      	str	r3, [r0, #16]
   82bd8:	6143      	str	r3, [r0, #20]
   82bda:	6183      	str	r3, [r0, #24]
   82bdc:	4619      	mov	r1, r3
   82bde:	2208      	movs	r2, #8
   82be0:	305c      	adds	r0, #92	; 0x5c
   82be2:	f7fe fe9b 	bl	8191c <memset>
   82be6:	4807      	ldr	r0, [pc, #28]	; (82c04 <std.isra.0+0x40>)
   82be8:	4907      	ldr	r1, [pc, #28]	; (82c08 <std.isra.0+0x44>)
   82bea:	4a08      	ldr	r2, [pc, #32]	; (82c0c <std.isra.0+0x48>)
   82bec:	4b08      	ldr	r3, [pc, #32]	; (82c10 <std.isra.0+0x4c>)
   82bee:	6220      	str	r0, [r4, #32]
   82bf0:	61e4      	str	r4, [r4, #28]
   82bf2:	6261      	str	r1, [r4, #36]	; 0x24
   82bf4:	62a2      	str	r2, [r4, #40]	; 0x28
   82bf6:	62e3      	str	r3, [r4, #44]	; 0x2c
   82bf8:	f104 0058 	add.w	r0, r4, #88	; 0x58
   82bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c00:	f000 bbc4 	b.w	8338c <__retarget_lock_init_recursive>
   82c04:	00083f09 	.word	0x00083f09
   82c08:	00083f2d 	.word	0x00083f2d
   82c0c:	00083f69 	.word	0x00083f69
   82c10:	00083f89 	.word	0x00083f89

00082c14 <__sinit>:
   82c14:	b510      	push	{r4, lr}
   82c16:	4604      	mov	r4, r0
   82c18:	4814      	ldr	r0, [pc, #80]	; (82c6c <__sinit+0x58>)
   82c1a:	f000 fbbb 	bl	83394 <__retarget_lock_acquire_recursive>
   82c1e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   82c20:	b9fa      	cbnz	r2, 82c62 <__sinit+0x4e>
   82c22:	2003      	movs	r0, #3
   82c24:	4912      	ldr	r1, [pc, #72]	; (82c70 <__sinit+0x5c>)
   82c26:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
   82c2a:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
   82c2e:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
   82c32:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
   82c36:	63e1      	str	r1, [r4, #60]	; 0x3c
   82c38:	6860      	ldr	r0, [r4, #4]
   82c3a:	2104      	movs	r1, #4
   82c3c:	f7ff ffc2 	bl	82bc4 <std.isra.0>
   82c40:	68a0      	ldr	r0, [r4, #8]
   82c42:	2201      	movs	r2, #1
   82c44:	2109      	movs	r1, #9
   82c46:	f7ff ffbd 	bl	82bc4 <std.isra.0>
   82c4a:	68e0      	ldr	r0, [r4, #12]
   82c4c:	2202      	movs	r2, #2
   82c4e:	2112      	movs	r1, #18
   82c50:	f7ff ffb8 	bl	82bc4 <std.isra.0>
   82c54:	2301      	movs	r3, #1
   82c56:	4805      	ldr	r0, [pc, #20]	; (82c6c <__sinit+0x58>)
   82c58:	63a3      	str	r3, [r4, #56]	; 0x38
   82c5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c5e:	f000 bb9b 	b.w	83398 <__retarget_lock_release_recursive>
   82c62:	4802      	ldr	r0, [pc, #8]	; (82c6c <__sinit+0x58>)
   82c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   82c68:	f000 bb96 	b.w	83398 <__retarget_lock_release_recursive>
   82c6c:	20070ca4 	.word	0x20070ca4
   82c70:	00082bb9 	.word	0x00082bb9

00082c74 <__sfp_lock_acquire>:
   82c74:	4801      	ldr	r0, [pc, #4]	; (82c7c <__sfp_lock_acquire+0x8>)
   82c76:	f000 bb8d 	b.w	83394 <__retarget_lock_acquire_recursive>
   82c7a:	bf00      	nop
   82c7c:	20070cb8 	.word	0x20070cb8

00082c80 <__sfp_lock_release>:
   82c80:	4801      	ldr	r0, [pc, #4]	; (82c88 <__sfp_lock_release+0x8>)
   82c82:	f000 bb89 	b.w	83398 <__retarget_lock_release_recursive>
   82c86:	bf00      	nop
   82c88:	20070cb8 	.word	0x20070cb8

00082c8c <__libc_fini_array>:
   82c8c:	b538      	push	{r3, r4, r5, lr}
   82c8e:	4c0a      	ldr	r4, [pc, #40]	; (82cb8 <__libc_fini_array+0x2c>)
   82c90:	4d0a      	ldr	r5, [pc, #40]	; (82cbc <__libc_fini_array+0x30>)
   82c92:	1b64      	subs	r4, r4, r5
   82c94:	10a4      	asrs	r4, r4, #2
   82c96:	d00a      	beq.n	82cae <__libc_fini_array+0x22>
   82c98:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   82c9c:	3b01      	subs	r3, #1
   82c9e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   82ca2:	3c01      	subs	r4, #1
   82ca4:	f855 3904 	ldr.w	r3, [r5], #-4
   82ca8:	4798      	blx	r3
   82caa:	2c00      	cmp	r4, #0
   82cac:	d1f9      	bne.n	82ca2 <__libc_fini_array+0x16>
   82cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   82cb2:	f001 bd2f 	b.w	84714 <_fini>
   82cb6:	bf00      	nop
   82cb8:	00084724 	.word	0x00084724
   82cbc:	00084720 	.word	0x00084720

00082cc0 <__fputwc>:
   82cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82cc4:	b083      	sub	sp, #12
   82cc6:	4607      	mov	r7, r0
   82cc8:	4688      	mov	r8, r1
   82cca:	4614      	mov	r4, r2
   82ccc:	f000 fb50 	bl	83370 <__locale_mb_cur_max>
   82cd0:	2801      	cmp	r0, #1
   82cd2:	d033      	beq.n	82d3c <__fputwc+0x7c>
   82cd4:	4642      	mov	r2, r8
   82cd6:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   82cda:	a901      	add	r1, sp, #4
   82cdc:	4638      	mov	r0, r7
   82cde:	f001 f9af 	bl	84040 <_wcrtomb_r>
   82ce2:	1c42      	adds	r2, r0, #1
   82ce4:	4606      	mov	r6, r0
   82ce6:	d022      	beq.n	82d2e <__fputwc+0x6e>
   82ce8:	b390      	cbz	r0, 82d50 <__fputwc+0x90>
   82cea:	f89d 1004 	ldrb.w	r1, [sp, #4]
   82cee:	2500      	movs	r5, #0
   82cf0:	f10d 0904 	add.w	r9, sp, #4
   82cf4:	e008      	b.n	82d08 <__fputwc+0x48>
   82cf6:	6823      	ldr	r3, [r4, #0]
   82cf8:	1c5a      	adds	r2, r3, #1
   82cfa:	6022      	str	r2, [r4, #0]
   82cfc:	7019      	strb	r1, [r3, #0]
   82cfe:	3501      	adds	r5, #1
   82d00:	42b5      	cmp	r5, r6
   82d02:	d225      	bcs.n	82d50 <__fputwc+0x90>
   82d04:	f815 1009 	ldrb.w	r1, [r5, r9]
   82d08:	68a3      	ldr	r3, [r4, #8]
   82d0a:	3b01      	subs	r3, #1
   82d0c:	2b00      	cmp	r3, #0
   82d0e:	60a3      	str	r3, [r4, #8]
   82d10:	daf1      	bge.n	82cf6 <__fputwc+0x36>
   82d12:	69a2      	ldr	r2, [r4, #24]
   82d14:	4293      	cmp	r3, r2
   82d16:	db01      	blt.n	82d1c <__fputwc+0x5c>
   82d18:	290a      	cmp	r1, #10
   82d1a:	d1ec      	bne.n	82cf6 <__fputwc+0x36>
   82d1c:	4622      	mov	r2, r4
   82d1e:	4638      	mov	r0, r7
   82d20:	f001 f936 	bl	83f90 <__swbuf_r>
   82d24:	1c43      	adds	r3, r0, #1
   82d26:	d1ea      	bne.n	82cfe <__fputwc+0x3e>
   82d28:	b003      	add	sp, #12
   82d2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82d2e:	89a3      	ldrh	r3, [r4, #12]
   82d30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   82d34:	81a3      	strh	r3, [r4, #12]
   82d36:	b003      	add	sp, #12
   82d38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   82d3c:	f108 33ff 	add.w	r3, r8, #4294967295
   82d40:	2bfe      	cmp	r3, #254	; 0xfe
   82d42:	d8c7      	bhi.n	82cd4 <__fputwc+0x14>
   82d44:	fa5f f188 	uxtb.w	r1, r8
   82d48:	4606      	mov	r6, r0
   82d4a:	f88d 1004 	strb.w	r1, [sp, #4]
   82d4e:	e7ce      	b.n	82cee <__fputwc+0x2e>
   82d50:	4640      	mov	r0, r8
   82d52:	b003      	add	sp, #12
   82d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00082d58 <_fputwc_r>:
   82d58:	b530      	push	{r4, r5, lr}
   82d5a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   82d5c:	4614      	mov	r4, r2
   82d5e:	f013 0f01 	tst.w	r3, #1
   82d62:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   82d66:	b083      	sub	sp, #12
   82d68:	4605      	mov	r5, r0
   82d6a:	b29a      	uxth	r2, r3
   82d6c:	d101      	bne.n	82d72 <_fputwc_r+0x1a>
   82d6e:	0590      	lsls	r0, r2, #22
   82d70:	d51c      	bpl.n	82dac <_fputwc_r+0x54>
   82d72:	0490      	lsls	r0, r2, #18
   82d74:	d406      	bmi.n	82d84 <_fputwc_r+0x2c>
   82d76:	6e62      	ldr	r2, [r4, #100]	; 0x64
   82d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   82d7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   82d80:	81a3      	strh	r3, [r4, #12]
   82d82:	6662      	str	r2, [r4, #100]	; 0x64
   82d84:	4628      	mov	r0, r5
   82d86:	4622      	mov	r2, r4
   82d88:	f7ff ff9a 	bl	82cc0 <__fputwc>
   82d8c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   82d8e:	4605      	mov	r5, r0
   82d90:	07da      	lsls	r2, r3, #31
   82d92:	d402      	bmi.n	82d9a <_fputwc_r+0x42>
   82d94:	89a3      	ldrh	r3, [r4, #12]
   82d96:	059b      	lsls	r3, r3, #22
   82d98:	d502      	bpl.n	82da0 <_fputwc_r+0x48>
   82d9a:	4628      	mov	r0, r5
   82d9c:	b003      	add	sp, #12
   82d9e:	bd30      	pop	{r4, r5, pc}
   82da0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82da2:	f000 faf9 	bl	83398 <__retarget_lock_release_recursive>
   82da6:	4628      	mov	r0, r5
   82da8:	b003      	add	sp, #12
   82daa:	bd30      	pop	{r4, r5, pc}
   82dac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   82dae:	9101      	str	r1, [sp, #4]
   82db0:	f000 faf0 	bl	83394 <__retarget_lock_acquire_recursive>
   82db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   82db8:	9901      	ldr	r1, [sp, #4]
   82dba:	b29a      	uxth	r2, r3
   82dbc:	e7d9      	b.n	82d72 <_fputwc_r+0x1a>
   82dbe:	bf00      	nop

00082dc0 <_malloc_trim_r>:
   82dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82dc2:	460c      	mov	r4, r1
   82dc4:	4f23      	ldr	r7, [pc, #140]	; (82e54 <_malloc_trim_r+0x94>)
   82dc6:	4606      	mov	r6, r0
   82dc8:	f000 feca 	bl	83b60 <__malloc_lock>
   82dcc:	68bb      	ldr	r3, [r7, #8]
   82dce:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   82dd2:	685d      	ldr	r5, [r3, #4]
   82dd4:	310f      	adds	r1, #15
   82dd6:	f025 0503 	bic.w	r5, r5, #3
   82dda:	4429      	add	r1, r5
   82ddc:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   82de0:	f021 010f 	bic.w	r1, r1, #15
   82de4:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   82de8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   82dec:	db07      	blt.n	82dfe <_malloc_trim_r+0x3e>
   82dee:	2100      	movs	r1, #0
   82df0:	4630      	mov	r0, r6
   82df2:	f001 f877 	bl	83ee4 <_sbrk_r>
   82df6:	68bb      	ldr	r3, [r7, #8]
   82df8:	442b      	add	r3, r5
   82dfa:	4298      	cmp	r0, r3
   82dfc:	d004      	beq.n	82e08 <_malloc_trim_r+0x48>
   82dfe:	4630      	mov	r0, r6
   82e00:	f000 feb4 	bl	83b6c <__malloc_unlock>
   82e04:	2000      	movs	r0, #0
   82e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e08:	4261      	negs	r1, r4
   82e0a:	4630      	mov	r0, r6
   82e0c:	f001 f86a 	bl	83ee4 <_sbrk_r>
   82e10:	3001      	adds	r0, #1
   82e12:	d00d      	beq.n	82e30 <_malloc_trim_r+0x70>
   82e14:	4b10      	ldr	r3, [pc, #64]	; (82e58 <_malloc_trim_r+0x98>)
   82e16:	68ba      	ldr	r2, [r7, #8]
   82e18:	6819      	ldr	r1, [r3, #0]
   82e1a:	1b2d      	subs	r5, r5, r4
   82e1c:	f045 0501 	orr.w	r5, r5, #1
   82e20:	4630      	mov	r0, r6
   82e22:	1b09      	subs	r1, r1, r4
   82e24:	6055      	str	r5, [r2, #4]
   82e26:	6019      	str	r1, [r3, #0]
   82e28:	f000 fea0 	bl	83b6c <__malloc_unlock>
   82e2c:	2001      	movs	r0, #1
   82e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82e30:	2100      	movs	r1, #0
   82e32:	4630      	mov	r0, r6
   82e34:	f001 f856 	bl	83ee4 <_sbrk_r>
   82e38:	68ba      	ldr	r2, [r7, #8]
   82e3a:	1a83      	subs	r3, r0, r2
   82e3c:	2b0f      	cmp	r3, #15
   82e3e:	ddde      	ble.n	82dfe <_malloc_trim_r+0x3e>
   82e40:	4c06      	ldr	r4, [pc, #24]	; (82e5c <_malloc_trim_r+0x9c>)
   82e42:	4905      	ldr	r1, [pc, #20]	; (82e58 <_malloc_trim_r+0x98>)
   82e44:	6824      	ldr	r4, [r4, #0]
   82e46:	f043 0301 	orr.w	r3, r3, #1
   82e4a:	1b00      	subs	r0, r0, r4
   82e4c:	6053      	str	r3, [r2, #4]
   82e4e:	6008      	str	r0, [r1, #0]
   82e50:	e7d5      	b.n	82dfe <_malloc_trim_r+0x3e>
   82e52:	bf00      	nop
   82e54:	200706e0 	.word	0x200706e0
   82e58:	20070c14 	.word	0x20070c14
   82e5c:	20070ae8 	.word	0x20070ae8

00082e60 <_free_r>:
   82e60:	2900      	cmp	r1, #0
   82e62:	d044      	beq.n	82eee <_free_r+0x8e>
   82e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82e68:	460d      	mov	r5, r1
   82e6a:	4680      	mov	r8, r0
   82e6c:	f000 fe78 	bl	83b60 <__malloc_lock>
   82e70:	f855 7c04 	ldr.w	r7, [r5, #-4]
   82e74:	4969      	ldr	r1, [pc, #420]	; (8301c <_free_r+0x1bc>)
   82e76:	f1a5 0408 	sub.w	r4, r5, #8
   82e7a:	f027 0301 	bic.w	r3, r7, #1
   82e7e:	18e2      	adds	r2, r4, r3
   82e80:	688e      	ldr	r6, [r1, #8]
   82e82:	6850      	ldr	r0, [r2, #4]
   82e84:	42b2      	cmp	r2, r6
   82e86:	f020 0003 	bic.w	r0, r0, #3
   82e8a:	d05e      	beq.n	82f4a <_free_r+0xea>
   82e8c:	07fe      	lsls	r6, r7, #31
   82e8e:	6050      	str	r0, [r2, #4]
   82e90:	d40b      	bmi.n	82eaa <_free_r+0x4a>
   82e92:	f855 7c08 	ldr.w	r7, [r5, #-8]
   82e96:	f101 0e08 	add.w	lr, r1, #8
   82e9a:	1be4      	subs	r4, r4, r7
   82e9c:	68a5      	ldr	r5, [r4, #8]
   82e9e:	443b      	add	r3, r7
   82ea0:	4575      	cmp	r5, lr
   82ea2:	d06d      	beq.n	82f80 <_free_r+0x120>
   82ea4:	68e7      	ldr	r7, [r4, #12]
   82ea6:	60ef      	str	r7, [r5, #12]
   82ea8:	60bd      	str	r5, [r7, #8]
   82eaa:	1815      	adds	r5, r2, r0
   82eac:	686d      	ldr	r5, [r5, #4]
   82eae:	07ed      	lsls	r5, r5, #31
   82eb0:	d53e      	bpl.n	82f30 <_free_r+0xd0>
   82eb2:	f043 0201 	orr.w	r2, r3, #1
   82eb6:	6062      	str	r2, [r4, #4]
   82eb8:	50e3      	str	r3, [r4, r3]
   82eba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   82ebe:	d217      	bcs.n	82ef0 <_free_r+0x90>
   82ec0:	2201      	movs	r2, #1
   82ec2:	08db      	lsrs	r3, r3, #3
   82ec4:	1098      	asrs	r0, r3, #2
   82ec6:	684d      	ldr	r5, [r1, #4]
   82ec8:	4413      	add	r3, r2
   82eca:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
   82ece:	4082      	lsls	r2, r0
   82ed0:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
   82ed4:	432a      	orrs	r2, r5
   82ed6:	3808      	subs	r0, #8
   82ed8:	60e0      	str	r0, [r4, #12]
   82eda:	60a7      	str	r7, [r4, #8]
   82edc:	604a      	str	r2, [r1, #4]
   82ede:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
   82ee2:	60fc      	str	r4, [r7, #12]
   82ee4:	4640      	mov	r0, r8
   82ee6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82eea:	f000 be3f 	b.w	83b6c <__malloc_unlock>
   82eee:	4770      	bx	lr
   82ef0:	0a5a      	lsrs	r2, r3, #9
   82ef2:	2a04      	cmp	r2, #4
   82ef4:	d852      	bhi.n	82f9c <_free_r+0x13c>
   82ef6:	099a      	lsrs	r2, r3, #6
   82ef8:	f102 0739 	add.w	r7, r2, #57	; 0x39
   82efc:	00ff      	lsls	r7, r7, #3
   82efe:	f102 0538 	add.w	r5, r2, #56	; 0x38
   82f02:	19c8      	adds	r0, r1, r7
   82f04:	59ca      	ldr	r2, [r1, r7]
   82f06:	3808      	subs	r0, #8
   82f08:	4290      	cmp	r0, r2
   82f0a:	d04f      	beq.n	82fac <_free_r+0x14c>
   82f0c:	6851      	ldr	r1, [r2, #4]
   82f0e:	f021 0103 	bic.w	r1, r1, #3
   82f12:	428b      	cmp	r3, r1
   82f14:	d232      	bcs.n	82f7c <_free_r+0x11c>
   82f16:	6892      	ldr	r2, [r2, #8]
   82f18:	4290      	cmp	r0, r2
   82f1a:	d1f7      	bne.n	82f0c <_free_r+0xac>
   82f1c:	68c3      	ldr	r3, [r0, #12]
   82f1e:	60a0      	str	r0, [r4, #8]
   82f20:	60e3      	str	r3, [r4, #12]
   82f22:	609c      	str	r4, [r3, #8]
   82f24:	60c4      	str	r4, [r0, #12]
   82f26:	4640      	mov	r0, r8
   82f28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   82f2c:	f000 be1e 	b.w	83b6c <__malloc_unlock>
   82f30:	6895      	ldr	r5, [r2, #8]
   82f32:	4f3b      	ldr	r7, [pc, #236]	; (83020 <_free_r+0x1c0>)
   82f34:	4403      	add	r3, r0
   82f36:	42bd      	cmp	r5, r7
   82f38:	d040      	beq.n	82fbc <_free_r+0x15c>
   82f3a:	68d0      	ldr	r0, [r2, #12]
   82f3c:	f043 0201 	orr.w	r2, r3, #1
   82f40:	60e8      	str	r0, [r5, #12]
   82f42:	6085      	str	r5, [r0, #8]
   82f44:	6062      	str	r2, [r4, #4]
   82f46:	50e3      	str	r3, [r4, r3]
   82f48:	e7b7      	b.n	82eba <_free_r+0x5a>
   82f4a:	07ff      	lsls	r7, r7, #31
   82f4c:	4403      	add	r3, r0
   82f4e:	d407      	bmi.n	82f60 <_free_r+0x100>
   82f50:	f855 5c08 	ldr.w	r5, [r5, #-8]
   82f54:	1b64      	subs	r4, r4, r5
   82f56:	68e2      	ldr	r2, [r4, #12]
   82f58:	68a0      	ldr	r0, [r4, #8]
   82f5a:	442b      	add	r3, r5
   82f5c:	60c2      	str	r2, [r0, #12]
   82f5e:	6090      	str	r0, [r2, #8]
   82f60:	4a30      	ldr	r2, [pc, #192]	; (83024 <_free_r+0x1c4>)
   82f62:	f043 0001 	orr.w	r0, r3, #1
   82f66:	6812      	ldr	r2, [r2, #0]
   82f68:	6060      	str	r0, [r4, #4]
   82f6a:	4293      	cmp	r3, r2
   82f6c:	608c      	str	r4, [r1, #8]
   82f6e:	d3b9      	bcc.n	82ee4 <_free_r+0x84>
   82f70:	4b2d      	ldr	r3, [pc, #180]	; (83028 <_free_r+0x1c8>)
   82f72:	4640      	mov	r0, r8
   82f74:	6819      	ldr	r1, [r3, #0]
   82f76:	f7ff ff23 	bl	82dc0 <_malloc_trim_r>
   82f7a:	e7b3      	b.n	82ee4 <_free_r+0x84>
   82f7c:	4610      	mov	r0, r2
   82f7e:	e7cd      	b.n	82f1c <_free_r+0xbc>
   82f80:	1811      	adds	r1, r2, r0
   82f82:	6849      	ldr	r1, [r1, #4]
   82f84:	07c9      	lsls	r1, r1, #31
   82f86:	d444      	bmi.n	83012 <_free_r+0x1b2>
   82f88:	6891      	ldr	r1, [r2, #8]
   82f8a:	4403      	add	r3, r0
   82f8c:	68d2      	ldr	r2, [r2, #12]
   82f8e:	f043 0001 	orr.w	r0, r3, #1
   82f92:	60ca      	str	r2, [r1, #12]
   82f94:	6091      	str	r1, [r2, #8]
   82f96:	6060      	str	r0, [r4, #4]
   82f98:	50e3      	str	r3, [r4, r3]
   82f9a:	e7a3      	b.n	82ee4 <_free_r+0x84>
   82f9c:	2a14      	cmp	r2, #20
   82f9e:	d816      	bhi.n	82fce <_free_r+0x16e>
   82fa0:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   82fa4:	00ff      	lsls	r7, r7, #3
   82fa6:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   82faa:	e7aa      	b.n	82f02 <_free_r+0xa2>
   82fac:	2301      	movs	r3, #1
   82fae:	10aa      	asrs	r2, r5, #2
   82fb0:	684d      	ldr	r5, [r1, #4]
   82fb2:	4093      	lsls	r3, r2
   82fb4:	432b      	orrs	r3, r5
   82fb6:	604b      	str	r3, [r1, #4]
   82fb8:	4603      	mov	r3, r0
   82fba:	e7b0      	b.n	82f1e <_free_r+0xbe>
   82fbc:	f043 0201 	orr.w	r2, r3, #1
   82fc0:	614c      	str	r4, [r1, #20]
   82fc2:	610c      	str	r4, [r1, #16]
   82fc4:	60e5      	str	r5, [r4, #12]
   82fc6:	60a5      	str	r5, [r4, #8]
   82fc8:	6062      	str	r2, [r4, #4]
   82fca:	50e3      	str	r3, [r4, r3]
   82fcc:	e78a      	b.n	82ee4 <_free_r+0x84>
   82fce:	2a54      	cmp	r2, #84	; 0x54
   82fd0:	d806      	bhi.n	82fe0 <_free_r+0x180>
   82fd2:	0b1a      	lsrs	r2, r3, #12
   82fd4:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   82fd8:	00ff      	lsls	r7, r7, #3
   82fda:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   82fde:	e790      	b.n	82f02 <_free_r+0xa2>
   82fe0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   82fe4:	d806      	bhi.n	82ff4 <_free_r+0x194>
   82fe6:	0bda      	lsrs	r2, r3, #15
   82fe8:	f102 0778 	add.w	r7, r2, #120	; 0x78
   82fec:	00ff      	lsls	r7, r7, #3
   82fee:	f102 0577 	add.w	r5, r2, #119	; 0x77
   82ff2:	e786      	b.n	82f02 <_free_r+0xa2>
   82ff4:	f240 5054 	movw	r0, #1364	; 0x554
   82ff8:	4282      	cmp	r2, r0
   82ffa:	d806      	bhi.n	8300a <_free_r+0x1aa>
   82ffc:	0c9a      	lsrs	r2, r3, #18
   82ffe:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   83002:	00ff      	lsls	r7, r7, #3
   83004:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   83008:	e77b      	b.n	82f02 <_free_r+0xa2>
   8300a:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   8300e:	257e      	movs	r5, #126	; 0x7e
   83010:	e777      	b.n	82f02 <_free_r+0xa2>
   83012:	f043 0101 	orr.w	r1, r3, #1
   83016:	6061      	str	r1, [r4, #4]
   83018:	6013      	str	r3, [r2, #0]
   8301a:	e763      	b.n	82ee4 <_free_r+0x84>
   8301c:	200706e0 	.word	0x200706e0
   83020:	200706e8 	.word	0x200706e8
   83024:	20070aec 	.word	0x20070aec
   83028:	20070c44 	.word	0x20070c44

0008302c <__sfvwrite_r>:
   8302c:	6893      	ldr	r3, [r2, #8]
   8302e:	2b00      	cmp	r3, #0
   83030:	d071      	beq.n	83116 <__sfvwrite_r+0xea>
   83032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83036:	898b      	ldrh	r3, [r1, #12]
   83038:	b083      	sub	sp, #12
   8303a:	460c      	mov	r4, r1
   8303c:	0719      	lsls	r1, r3, #28
   8303e:	9000      	str	r0, [sp, #0]
   83040:	4616      	mov	r6, r2
   83042:	d525      	bpl.n	83090 <__sfvwrite_r+0x64>
   83044:	6922      	ldr	r2, [r4, #16]
   83046:	b31a      	cbz	r2, 83090 <__sfvwrite_r+0x64>
   83048:	f013 0002 	ands.w	r0, r3, #2
   8304c:	6835      	ldr	r5, [r6, #0]
   8304e:	d02b      	beq.n	830a8 <__sfvwrite_r+0x7c>
   83050:	f04f 0900 	mov.w	r9, #0
   83054:	46b0      	mov	r8, r6
   83056:	464f      	mov	r7, r9
   83058:	f8df a2c0 	ldr.w	sl, [pc, #704]	; 8331c <__sfvwrite_r+0x2f0>
   8305c:	2f00      	cmp	r7, #0
   8305e:	d055      	beq.n	8310c <__sfvwrite_r+0xe0>
   83060:	4557      	cmp	r7, sl
   83062:	463b      	mov	r3, r7
   83064:	464a      	mov	r2, r9
   83066:	bf28      	it	cs
   83068:	4653      	movcs	r3, sl
   8306a:	69e1      	ldr	r1, [r4, #28]
   8306c:	9800      	ldr	r0, [sp, #0]
   8306e:	6a66      	ldr	r6, [r4, #36]	; 0x24
   83070:	47b0      	blx	r6
   83072:	2800      	cmp	r0, #0
   83074:	dd56      	ble.n	83124 <__sfvwrite_r+0xf8>
   83076:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8307a:	4481      	add	r9, r0
   8307c:	1a1b      	subs	r3, r3, r0
   8307e:	1a3f      	subs	r7, r7, r0
   83080:	f8c8 3008 	str.w	r3, [r8, #8]
   83084:	2b00      	cmp	r3, #0
   83086:	d1e9      	bne.n	8305c <__sfvwrite_r+0x30>
   83088:	2000      	movs	r0, #0
   8308a:	b003      	add	sp, #12
   8308c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83090:	4621      	mov	r1, r4
   83092:	9800      	ldr	r0, [sp, #0]
   83094:	f7ff fc56 	bl	82944 <__swsetup_r>
   83098:	2800      	cmp	r0, #0
   8309a:	f040 8135 	bne.w	83308 <__sfvwrite_r+0x2dc>
   8309e:	89a3      	ldrh	r3, [r4, #12]
   830a0:	6835      	ldr	r5, [r6, #0]
   830a2:	f013 0002 	ands.w	r0, r3, #2
   830a6:	d1d3      	bne.n	83050 <__sfvwrite_r+0x24>
   830a8:	f013 0901 	ands.w	r9, r3, #1
   830ac:	d144      	bne.n	83138 <__sfvwrite_r+0x10c>
   830ae:	464f      	mov	r7, r9
   830b0:	9601      	str	r6, [sp, #4]
   830b2:	b337      	cbz	r7, 83102 <__sfvwrite_r+0xd6>
   830b4:	059a      	lsls	r2, r3, #22
   830b6:	f8d4 8008 	ldr.w	r8, [r4, #8]
   830ba:	f140 8085 	bpl.w	831c8 <__sfvwrite_r+0x19c>
   830be:	4547      	cmp	r7, r8
   830c0:	46c3      	mov	fp, r8
   830c2:	f0c0 80ad 	bcc.w	83220 <__sfvwrite_r+0x1f4>
   830c6:	f413 6f90 	tst.w	r3, #1152	; 0x480
   830ca:	f040 80ae 	bne.w	8322a <__sfvwrite_r+0x1fe>
   830ce:	46ba      	mov	sl, r7
   830d0:	6820      	ldr	r0, [r4, #0]
   830d2:	465a      	mov	r2, fp
   830d4:	4649      	mov	r1, r9
   830d6:	f000 fcdf 	bl	83a98 <memmove>
   830da:	68a2      	ldr	r2, [r4, #8]
   830dc:	6823      	ldr	r3, [r4, #0]
   830de:	eba2 0208 	sub.w	r2, r2, r8
   830e2:	445b      	add	r3, fp
   830e4:	60a2      	str	r2, [r4, #8]
   830e6:	6023      	str	r3, [r4, #0]
   830e8:	9a01      	ldr	r2, [sp, #4]
   830ea:	44d1      	add	r9, sl
   830ec:	6893      	ldr	r3, [r2, #8]
   830ee:	eba7 070a 	sub.w	r7, r7, sl
   830f2:	eba3 030a 	sub.w	r3, r3, sl
   830f6:	6093      	str	r3, [r2, #8]
   830f8:	2b00      	cmp	r3, #0
   830fa:	d0c5      	beq.n	83088 <__sfvwrite_r+0x5c>
   830fc:	89a3      	ldrh	r3, [r4, #12]
   830fe:	2f00      	cmp	r7, #0
   83100:	d1d8      	bne.n	830b4 <__sfvwrite_r+0x88>
   83102:	f8d5 9000 	ldr.w	r9, [r5]
   83106:	686f      	ldr	r7, [r5, #4]
   83108:	3508      	adds	r5, #8
   8310a:	e7d2      	b.n	830b2 <__sfvwrite_r+0x86>
   8310c:	f8d5 9000 	ldr.w	r9, [r5]
   83110:	686f      	ldr	r7, [r5, #4]
   83112:	3508      	adds	r5, #8
   83114:	e7a2      	b.n	8305c <__sfvwrite_r+0x30>
   83116:	2000      	movs	r0, #0
   83118:	4770      	bx	lr
   8311a:	4621      	mov	r1, r4
   8311c:	9800      	ldr	r0, [sp, #0]
   8311e:	f7ff fd21 	bl	82b64 <_fflush_r>
   83122:	b378      	cbz	r0, 83184 <__sfvwrite_r+0x158>
   83124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83128:	f04f 30ff 	mov.w	r0, #4294967295
   8312c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   83130:	81a3      	strh	r3, [r4, #12]
   83132:	b003      	add	sp, #12
   83134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83138:	4681      	mov	r9, r0
   8313a:	4633      	mov	r3, r6
   8313c:	464e      	mov	r6, r9
   8313e:	46a8      	mov	r8, r5
   83140:	469a      	mov	sl, r3
   83142:	464d      	mov	r5, r9
   83144:	b356      	cbz	r6, 8319c <__sfvwrite_r+0x170>
   83146:	2800      	cmp	r0, #0
   83148:	d032      	beq.n	831b0 <__sfvwrite_r+0x184>
   8314a:	45b1      	cmp	r9, r6
   8314c:	46cb      	mov	fp, r9
   8314e:	bf28      	it	cs
   83150:	46b3      	movcs	fp, r6
   83152:	6820      	ldr	r0, [r4, #0]
   83154:	6923      	ldr	r3, [r4, #16]
   83156:	465f      	mov	r7, fp
   83158:	4298      	cmp	r0, r3
   8315a:	6962      	ldr	r2, [r4, #20]
   8315c:	d904      	bls.n	83168 <__sfvwrite_r+0x13c>
   8315e:	68a3      	ldr	r3, [r4, #8]
   83160:	4413      	add	r3, r2
   83162:	459b      	cmp	fp, r3
   83164:	f300 80a8 	bgt.w	832b8 <__sfvwrite_r+0x28c>
   83168:	4593      	cmp	fp, r2
   8316a:	db4d      	blt.n	83208 <__sfvwrite_r+0x1dc>
   8316c:	4613      	mov	r3, r2
   8316e:	6a67      	ldr	r7, [r4, #36]	; 0x24
   83170:	462a      	mov	r2, r5
   83172:	69e1      	ldr	r1, [r4, #28]
   83174:	9800      	ldr	r0, [sp, #0]
   83176:	47b8      	blx	r7
   83178:	1e07      	subs	r7, r0, #0
   8317a:	ddd3      	ble.n	83124 <__sfvwrite_r+0xf8>
   8317c:	ebb9 0907 	subs.w	r9, r9, r7
   83180:	d0cb      	beq.n	8311a <__sfvwrite_r+0xee>
   83182:	2001      	movs	r0, #1
   83184:	f8da 3008 	ldr.w	r3, [sl, #8]
   83188:	443d      	add	r5, r7
   8318a:	1bdb      	subs	r3, r3, r7
   8318c:	1bf6      	subs	r6, r6, r7
   8318e:	f8ca 3008 	str.w	r3, [sl, #8]
   83192:	2b00      	cmp	r3, #0
   83194:	f43f af78 	beq.w	83088 <__sfvwrite_r+0x5c>
   83198:	2e00      	cmp	r6, #0
   8319a:	d1d4      	bne.n	83146 <__sfvwrite_r+0x11a>
   8319c:	f108 0308 	add.w	r3, r8, #8
   831a0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   831a4:	4698      	mov	r8, r3
   831a6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   831aa:	3308      	adds	r3, #8
   831ac:	2e00      	cmp	r6, #0
   831ae:	d0f7      	beq.n	831a0 <__sfvwrite_r+0x174>
   831b0:	4632      	mov	r2, r6
   831b2:	210a      	movs	r1, #10
   831b4:	4628      	mov	r0, r5
   831b6:	f000 fc29 	bl	83a0c <memchr>
   831ba:	2800      	cmp	r0, #0
   831bc:	f000 80a1 	beq.w	83302 <__sfvwrite_r+0x2d6>
   831c0:	3001      	adds	r0, #1
   831c2:	eba0 0905 	sub.w	r9, r0, r5
   831c6:	e7c0      	b.n	8314a <__sfvwrite_r+0x11e>
   831c8:	6820      	ldr	r0, [r4, #0]
   831ca:	6923      	ldr	r3, [r4, #16]
   831cc:	4298      	cmp	r0, r3
   831ce:	d802      	bhi.n	831d6 <__sfvwrite_r+0x1aa>
   831d0:	6963      	ldr	r3, [r4, #20]
   831d2:	429f      	cmp	r7, r3
   831d4:	d25d      	bcs.n	83292 <__sfvwrite_r+0x266>
   831d6:	45b8      	cmp	r8, r7
   831d8:	bf28      	it	cs
   831da:	46b8      	movcs	r8, r7
   831dc:	4649      	mov	r1, r9
   831de:	4642      	mov	r2, r8
   831e0:	f000 fc5a 	bl	83a98 <memmove>
   831e4:	68a3      	ldr	r3, [r4, #8]
   831e6:	6822      	ldr	r2, [r4, #0]
   831e8:	eba3 0308 	sub.w	r3, r3, r8
   831ec:	4442      	add	r2, r8
   831ee:	60a3      	str	r3, [r4, #8]
   831f0:	6022      	str	r2, [r4, #0]
   831f2:	b10b      	cbz	r3, 831f8 <__sfvwrite_r+0x1cc>
   831f4:	46c2      	mov	sl, r8
   831f6:	e777      	b.n	830e8 <__sfvwrite_r+0xbc>
   831f8:	4621      	mov	r1, r4
   831fa:	9800      	ldr	r0, [sp, #0]
   831fc:	f7ff fcb2 	bl	82b64 <_fflush_r>
   83200:	2800      	cmp	r0, #0
   83202:	d18f      	bne.n	83124 <__sfvwrite_r+0xf8>
   83204:	46c2      	mov	sl, r8
   83206:	e76f      	b.n	830e8 <__sfvwrite_r+0xbc>
   83208:	465a      	mov	r2, fp
   8320a:	4629      	mov	r1, r5
   8320c:	f000 fc44 	bl	83a98 <memmove>
   83210:	68a2      	ldr	r2, [r4, #8]
   83212:	6823      	ldr	r3, [r4, #0]
   83214:	eba2 020b 	sub.w	r2, r2, fp
   83218:	445b      	add	r3, fp
   8321a:	60a2      	str	r2, [r4, #8]
   8321c:	6023      	str	r3, [r4, #0]
   8321e:	e7ad      	b.n	8317c <__sfvwrite_r+0x150>
   83220:	46b8      	mov	r8, r7
   83222:	46ba      	mov	sl, r7
   83224:	46bb      	mov	fp, r7
   83226:	6820      	ldr	r0, [r4, #0]
   83228:	e753      	b.n	830d2 <__sfvwrite_r+0xa6>
   8322a:	6962      	ldr	r2, [r4, #20]
   8322c:	6820      	ldr	r0, [r4, #0]
   8322e:	6921      	ldr	r1, [r4, #16]
   83230:	eb02 0842 	add.w	r8, r2, r2, lsl #1
   83234:	eba0 0a01 	sub.w	sl, r0, r1
   83238:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
   8323c:	f10a 0001 	add.w	r0, sl, #1
   83240:	ea4f 0868 	mov.w	r8, r8, asr #1
   83244:	4438      	add	r0, r7
   83246:	4540      	cmp	r0, r8
   83248:	4642      	mov	r2, r8
   8324a:	bf84      	itt	hi
   8324c:	4680      	movhi	r8, r0
   8324e:	4642      	movhi	r2, r8
   83250:	055b      	lsls	r3, r3, #21
   83252:	d544      	bpl.n	832de <__sfvwrite_r+0x2b2>
   83254:	4611      	mov	r1, r2
   83256:	9800      	ldr	r0, [sp, #0]
   83258:	f000 f920 	bl	8349c <_malloc_r>
   8325c:	4683      	mov	fp, r0
   8325e:	2800      	cmp	r0, #0
   83260:	d055      	beq.n	8330e <__sfvwrite_r+0x2e2>
   83262:	4652      	mov	r2, sl
   83264:	6921      	ldr	r1, [r4, #16]
   83266:	f7fe fae3 	bl	81830 <memcpy>
   8326a:	89a3      	ldrh	r3, [r4, #12]
   8326c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   83270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83274:	81a3      	strh	r3, [r4, #12]
   83276:	eb0b 000a 	add.w	r0, fp, sl
   8327a:	eba8 030a 	sub.w	r3, r8, sl
   8327e:	f8c4 b010 	str.w	fp, [r4, #16]
   83282:	f8c4 8014 	str.w	r8, [r4, #20]
   83286:	6020      	str	r0, [r4, #0]
   83288:	60a3      	str	r3, [r4, #8]
   8328a:	46b8      	mov	r8, r7
   8328c:	46ba      	mov	sl, r7
   8328e:	46bb      	mov	fp, r7
   83290:	e71f      	b.n	830d2 <__sfvwrite_r+0xa6>
   83292:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   83296:	42ba      	cmp	r2, r7
   83298:	bf28      	it	cs
   8329a:	463a      	movcs	r2, r7
   8329c:	fb92 f2f3 	sdiv	r2, r2, r3
   832a0:	69e1      	ldr	r1, [r4, #28]
   832a2:	fb03 f302 	mul.w	r3, r3, r2
   832a6:	9800      	ldr	r0, [sp, #0]
   832a8:	464a      	mov	r2, r9
   832aa:	6a66      	ldr	r6, [r4, #36]	; 0x24
   832ac:	47b0      	blx	r6
   832ae:	f1b0 0a00 	subs.w	sl, r0, #0
   832b2:	f73f af19 	bgt.w	830e8 <__sfvwrite_r+0xbc>
   832b6:	e735      	b.n	83124 <__sfvwrite_r+0xf8>
   832b8:	461a      	mov	r2, r3
   832ba:	4629      	mov	r1, r5
   832bc:	9301      	str	r3, [sp, #4]
   832be:	f000 fbeb 	bl	83a98 <memmove>
   832c2:	6822      	ldr	r2, [r4, #0]
   832c4:	9b01      	ldr	r3, [sp, #4]
   832c6:	4621      	mov	r1, r4
   832c8:	441a      	add	r2, r3
   832ca:	6022      	str	r2, [r4, #0]
   832cc:	9800      	ldr	r0, [sp, #0]
   832ce:	f7ff fc49 	bl	82b64 <_fflush_r>
   832d2:	9b01      	ldr	r3, [sp, #4]
   832d4:	2800      	cmp	r0, #0
   832d6:	f47f af25 	bne.w	83124 <__sfvwrite_r+0xf8>
   832da:	461f      	mov	r7, r3
   832dc:	e74e      	b.n	8317c <__sfvwrite_r+0x150>
   832de:	9800      	ldr	r0, [sp, #0]
   832e0:	f000 fc4a 	bl	83b78 <_realloc_r>
   832e4:	4683      	mov	fp, r0
   832e6:	2800      	cmp	r0, #0
   832e8:	d1c5      	bne.n	83276 <__sfvwrite_r+0x24a>
   832ea:	9d00      	ldr	r5, [sp, #0]
   832ec:	6921      	ldr	r1, [r4, #16]
   832ee:	4628      	mov	r0, r5
   832f0:	f7ff fdb6 	bl	82e60 <_free_r>
   832f4:	220c      	movs	r2, #12
   832f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   832fa:	602a      	str	r2, [r5, #0]
   832fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   83300:	e712      	b.n	83128 <__sfvwrite_r+0xfc>
   83302:	f106 0901 	add.w	r9, r6, #1
   83306:	e720      	b.n	8314a <__sfvwrite_r+0x11e>
   83308:	f04f 30ff 	mov.w	r0, #4294967295
   8330c:	e6bd      	b.n	8308a <__sfvwrite_r+0x5e>
   8330e:	220c      	movs	r2, #12
   83310:	9900      	ldr	r1, [sp, #0]
   83312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83316:	600a      	str	r2, [r1, #0]
   83318:	e706      	b.n	83128 <__sfvwrite_r+0xfc>
   8331a:	bf00      	nop
   8331c:	7ffffc00 	.word	0x7ffffc00

00083320 <_fwalk_reent>:
   83320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   83324:	f510 7638 	adds.w	r6, r0, #736	; 0x2e0
   83328:	d01e      	beq.n	83368 <_fwalk_reent+0x48>
   8332a:	4688      	mov	r8, r1
   8332c:	4607      	mov	r7, r0
   8332e:	f04f 0900 	mov.w	r9, #0
   83332:	6875      	ldr	r5, [r6, #4]
   83334:	68b4      	ldr	r4, [r6, #8]
   83336:	3d01      	subs	r5, #1
   83338:	d410      	bmi.n	8335c <_fwalk_reent+0x3c>
   8333a:	89a3      	ldrh	r3, [r4, #12]
   8333c:	3d01      	subs	r5, #1
   8333e:	2b01      	cmp	r3, #1
   83340:	d908      	bls.n	83354 <_fwalk_reent+0x34>
   83342:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   83346:	3301      	adds	r3, #1
   83348:	d004      	beq.n	83354 <_fwalk_reent+0x34>
   8334a:	4621      	mov	r1, r4
   8334c:	4638      	mov	r0, r7
   8334e:	47c0      	blx	r8
   83350:	ea49 0900 	orr.w	r9, r9, r0
   83354:	1c6b      	adds	r3, r5, #1
   83356:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8335a:	d1ee      	bne.n	8333a <_fwalk_reent+0x1a>
   8335c:	6836      	ldr	r6, [r6, #0]
   8335e:	2e00      	cmp	r6, #0
   83360:	d1e7      	bne.n	83332 <_fwalk_reent+0x12>
   83362:	4648      	mov	r0, r9
   83364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83368:	46b1      	mov	r9, r6
   8336a:	4648      	mov	r0, r9
   8336c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00083370 <__locale_mb_cur_max>:
   83370:	4b04      	ldr	r3, [pc, #16]	; (83384 <__locale_mb_cur_max+0x14>)
   83372:	4a05      	ldr	r2, [pc, #20]	; (83388 <__locale_mb_cur_max+0x18>)
   83374:	681b      	ldr	r3, [r3, #0]
   83376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   83378:	2b00      	cmp	r3, #0
   8337a:	bf08      	it	eq
   8337c:	4613      	moveq	r3, r2
   8337e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   83382:	4770      	bx	lr
   83384:	20070140 	.word	0x20070140
   83388:	20070574 	.word	0x20070574

0008338c <__retarget_lock_init_recursive>:
   8338c:	4770      	bx	lr
   8338e:	bf00      	nop

00083390 <__retarget_lock_close_recursive>:
   83390:	4770      	bx	lr
   83392:	bf00      	nop

00083394 <__retarget_lock_acquire_recursive>:
   83394:	4770      	bx	lr
   83396:	bf00      	nop

00083398 <__retarget_lock_release_recursive>:
   83398:	4770      	bx	lr
   8339a:	bf00      	nop

0008339c <__swhatbuf_r>:
   8339c:	b570      	push	{r4, r5, r6, lr}
   8339e:	460c      	mov	r4, r1
   833a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   833a4:	b090      	sub	sp, #64	; 0x40
   833a6:	2900      	cmp	r1, #0
   833a8:	4615      	mov	r5, r2
   833aa:	461e      	mov	r6, r3
   833ac:	db14      	blt.n	833d8 <__swhatbuf_r+0x3c>
   833ae:	aa01      	add	r2, sp, #4
   833b0:	f000 ff68 	bl	84284 <_fstat_r>
   833b4:	2800      	cmp	r0, #0
   833b6:	db0f      	blt.n	833d8 <__swhatbuf_r+0x3c>
   833b8:	9a02      	ldr	r2, [sp, #8]
   833ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
   833c2:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
   833c6:	fab2 f282 	clz	r2, r2
   833ca:	f44f 6000 	mov.w	r0, #2048	; 0x800
   833ce:	0952      	lsrs	r2, r2, #5
   833d0:	6032      	str	r2, [r6, #0]
   833d2:	602b      	str	r3, [r5, #0]
   833d4:	b010      	add	sp, #64	; 0x40
   833d6:	bd70      	pop	{r4, r5, r6, pc}
   833d8:	2300      	movs	r3, #0
   833da:	89a2      	ldrh	r2, [r4, #12]
   833dc:	6033      	str	r3, [r6, #0]
   833de:	f012 0080 	ands.w	r0, r2, #128	; 0x80
   833e2:	d004      	beq.n	833ee <__swhatbuf_r+0x52>
   833e4:	2240      	movs	r2, #64	; 0x40
   833e6:	4618      	mov	r0, r3
   833e8:	602a      	str	r2, [r5, #0]
   833ea:	b010      	add	sp, #64	; 0x40
   833ec:	bd70      	pop	{r4, r5, r6, pc}
   833ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
   833f2:	602b      	str	r3, [r5, #0]
   833f4:	b010      	add	sp, #64	; 0x40
   833f6:	bd70      	pop	{r4, r5, r6, pc}

000833f8 <__smakebuf_r>:
   833f8:	898a      	ldrh	r2, [r1, #12]
   833fa:	460b      	mov	r3, r1
   833fc:	0792      	lsls	r2, r2, #30
   833fe:	d506      	bpl.n	8340e <__smakebuf_r+0x16>
   83400:	2101      	movs	r1, #1
   83402:	f103 0243 	add.w	r2, r3, #67	; 0x43
   83406:	6159      	str	r1, [r3, #20]
   83408:	601a      	str	r2, [r3, #0]
   8340a:	611a      	str	r2, [r3, #16]
   8340c:	4770      	bx	lr
   8340e:	b5f0      	push	{r4, r5, r6, r7, lr}
   83410:	b083      	sub	sp, #12
   83412:	ab01      	add	r3, sp, #4
   83414:	466a      	mov	r2, sp
   83416:	460c      	mov	r4, r1
   83418:	4606      	mov	r6, r0
   8341a:	f7ff ffbf 	bl	8339c <__swhatbuf_r>
   8341e:	9900      	ldr	r1, [sp, #0]
   83420:	4605      	mov	r5, r0
   83422:	4630      	mov	r0, r6
   83424:	f000 f83a 	bl	8349c <_malloc_r>
   83428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8342c:	b1d8      	cbz	r0, 83466 <__smakebuf_r+0x6e>
   8342e:	e89d 0006 	ldmia.w	sp, {r1, r2}
   83432:	4f15      	ldr	r7, [pc, #84]	; (83488 <__smakebuf_r+0x90>)
   83434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   83438:	63f7      	str	r7, [r6, #60]	; 0x3c
   8343a:	81a3      	strh	r3, [r4, #12]
   8343c:	6020      	str	r0, [r4, #0]
   8343e:	6120      	str	r0, [r4, #16]
   83440:	6161      	str	r1, [r4, #20]
   83442:	b91a      	cbnz	r2, 8344c <__smakebuf_r+0x54>
   83444:	432b      	orrs	r3, r5
   83446:	81a3      	strh	r3, [r4, #12]
   83448:	b003      	add	sp, #12
   8344a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8344c:	4630      	mov	r0, r6
   8344e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83452:	f000 ff2b 	bl	842ac <_isatty_r>
   83456:	b1a0      	cbz	r0, 83482 <__smakebuf_r+0x8a>
   83458:	89a3      	ldrh	r3, [r4, #12]
   8345a:	f023 0303 	bic.w	r3, r3, #3
   8345e:	f043 0301 	orr.w	r3, r3, #1
   83462:	b21b      	sxth	r3, r3
   83464:	e7ee      	b.n	83444 <__smakebuf_r+0x4c>
   83466:	059a      	lsls	r2, r3, #22
   83468:	d4ee      	bmi.n	83448 <__smakebuf_r+0x50>
   8346a:	2101      	movs	r1, #1
   8346c:	f023 0303 	bic.w	r3, r3, #3
   83470:	f104 0243 	add.w	r2, r4, #67	; 0x43
   83474:	f043 0302 	orr.w	r3, r3, #2
   83478:	81a3      	strh	r3, [r4, #12]
   8347a:	6161      	str	r1, [r4, #20]
   8347c:	6022      	str	r2, [r4, #0]
   8347e:	6122      	str	r2, [r4, #16]
   83480:	e7e2      	b.n	83448 <__smakebuf_r+0x50>
   83482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   83486:	e7dd      	b.n	83444 <__smakebuf_r+0x4c>
   83488:	00082bb9 	.word	0x00082bb9

0008348c <malloc>:
   8348c:	4b02      	ldr	r3, [pc, #8]	; (83498 <malloc+0xc>)
   8348e:	4601      	mov	r1, r0
   83490:	6818      	ldr	r0, [r3, #0]
   83492:	f000 b803 	b.w	8349c <_malloc_r>
   83496:	bf00      	nop
   83498:	20070140 	.word	0x20070140

0008349c <_malloc_r>:
   8349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   834a0:	f101 060b 	add.w	r6, r1, #11
   834a4:	2e16      	cmp	r6, #22
   834a6:	b083      	sub	sp, #12
   834a8:	4605      	mov	r5, r0
   834aa:	f240 809e 	bls.w	835ea <_malloc_r+0x14e>
   834ae:	f036 0607 	bics.w	r6, r6, #7
   834b2:	f100 80bd 	bmi.w	83630 <_malloc_r+0x194>
   834b6:	42b1      	cmp	r1, r6
   834b8:	f200 80ba 	bhi.w	83630 <_malloc_r+0x194>
   834bc:	f000 fb50 	bl	83b60 <__malloc_lock>
   834c0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   834c4:	f0c0 8285 	bcc.w	839d2 <_malloc_r+0x536>
   834c8:	0a73      	lsrs	r3, r6, #9
   834ca:	f000 80b8 	beq.w	8363e <_malloc_r+0x1a2>
   834ce:	2b04      	cmp	r3, #4
   834d0:	f200 816c 	bhi.w	837ac <_malloc_r+0x310>
   834d4:	09b3      	lsrs	r3, r6, #6
   834d6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   834da:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   834de:	00c1      	lsls	r1, r0, #3
   834e0:	4fb8      	ldr	r7, [pc, #736]	; (837c4 <_malloc_r+0x328>)
   834e2:	4439      	add	r1, r7
   834e4:	684c      	ldr	r4, [r1, #4]
   834e6:	3908      	subs	r1, #8
   834e8:	42a1      	cmp	r1, r4
   834ea:	d106      	bne.n	834fa <_malloc_r+0x5e>
   834ec:	e00c      	b.n	83508 <_malloc_r+0x6c>
   834ee:	2a00      	cmp	r2, #0
   834f0:	f280 80ab 	bge.w	8364a <_malloc_r+0x1ae>
   834f4:	68e4      	ldr	r4, [r4, #12]
   834f6:	42a1      	cmp	r1, r4
   834f8:	d006      	beq.n	83508 <_malloc_r+0x6c>
   834fa:	6863      	ldr	r3, [r4, #4]
   834fc:	f023 0303 	bic.w	r3, r3, #3
   83500:	1b9a      	subs	r2, r3, r6
   83502:	2a0f      	cmp	r2, #15
   83504:	ddf3      	ble.n	834ee <_malloc_r+0x52>
   83506:	4670      	mov	r0, lr
   83508:	693c      	ldr	r4, [r7, #16]
   8350a:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 837d8 <_malloc_r+0x33c>
   8350e:	4574      	cmp	r4, lr
   83510:	f000 819e 	beq.w	83850 <_malloc_r+0x3b4>
   83514:	6863      	ldr	r3, [r4, #4]
   83516:	f023 0303 	bic.w	r3, r3, #3
   8351a:	1b9a      	subs	r2, r3, r6
   8351c:	2a0f      	cmp	r2, #15
   8351e:	f300 8183 	bgt.w	83828 <_malloc_r+0x38c>
   83522:	2a00      	cmp	r2, #0
   83524:	f8c7 e014 	str.w	lr, [r7, #20]
   83528:	f8c7 e010 	str.w	lr, [r7, #16]
   8352c:	f280 8091 	bge.w	83652 <_malloc_r+0x1b6>
   83530:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   83534:	f080 8154 	bcs.w	837e0 <_malloc_r+0x344>
   83538:	2201      	movs	r2, #1
   8353a:	08db      	lsrs	r3, r3, #3
   8353c:	6879      	ldr	r1, [r7, #4]
   8353e:	ea4f 0ca3 	mov.w	ip, r3, asr #2
   83542:	4413      	add	r3, r2
   83544:	f857 8033 	ldr.w	r8, [r7, r3, lsl #3]
   83548:	fa02 f20c 	lsl.w	r2, r2, ip
   8354c:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
   83550:	430a      	orrs	r2, r1
   83552:	f1ac 0108 	sub.w	r1, ip, #8
   83556:	60e1      	str	r1, [r4, #12]
   83558:	f8c4 8008 	str.w	r8, [r4, #8]
   8355c:	607a      	str	r2, [r7, #4]
   8355e:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   83562:	f8c8 400c 	str.w	r4, [r8, #12]
   83566:	2401      	movs	r4, #1
   83568:	1083      	asrs	r3, r0, #2
   8356a:	409c      	lsls	r4, r3
   8356c:	4294      	cmp	r4, r2
   8356e:	d87d      	bhi.n	8366c <_malloc_r+0x1d0>
   83570:	4214      	tst	r4, r2
   83572:	d106      	bne.n	83582 <_malloc_r+0xe6>
   83574:	f020 0003 	bic.w	r0, r0, #3
   83578:	0064      	lsls	r4, r4, #1
   8357a:	4214      	tst	r4, r2
   8357c:	f100 0004 	add.w	r0, r0, #4
   83580:	d0fa      	beq.n	83578 <_malloc_r+0xdc>
   83582:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   83586:	46cc      	mov	ip, r9
   83588:	4680      	mov	r8, r0
   8358a:	f8dc 300c 	ldr.w	r3, [ip, #12]
   8358e:	459c      	cmp	ip, r3
   83590:	d107      	bne.n	835a2 <_malloc_r+0x106>
   83592:	e15f      	b.n	83854 <_malloc_r+0x3b8>
   83594:	2a00      	cmp	r2, #0
   83596:	f280 816d 	bge.w	83874 <_malloc_r+0x3d8>
   8359a:	68db      	ldr	r3, [r3, #12]
   8359c:	459c      	cmp	ip, r3
   8359e:	f000 8159 	beq.w	83854 <_malloc_r+0x3b8>
   835a2:	6859      	ldr	r1, [r3, #4]
   835a4:	f021 0103 	bic.w	r1, r1, #3
   835a8:	1b8a      	subs	r2, r1, r6
   835aa:	2a0f      	cmp	r2, #15
   835ac:	ddf2      	ble.n	83594 <_malloc_r+0xf8>
   835ae:	68dc      	ldr	r4, [r3, #12]
   835b0:	f8d3 c008 	ldr.w	ip, [r3, #8]
   835b4:	f046 0801 	orr.w	r8, r6, #1
   835b8:	4628      	mov	r0, r5
   835ba:	441e      	add	r6, r3
   835bc:	f042 0501 	orr.w	r5, r2, #1
   835c0:	f8c3 8004 	str.w	r8, [r3, #4]
   835c4:	f8cc 400c 	str.w	r4, [ip, #12]
   835c8:	f8c4 c008 	str.w	ip, [r4, #8]
   835cc:	617e      	str	r6, [r7, #20]
   835ce:	613e      	str	r6, [r7, #16]
   835d0:	f8c6 e00c 	str.w	lr, [r6, #12]
   835d4:	f8c6 e008 	str.w	lr, [r6, #8]
   835d8:	6075      	str	r5, [r6, #4]
   835da:	505a      	str	r2, [r3, r1]
   835dc:	9300      	str	r3, [sp, #0]
   835de:	f000 fac5 	bl	83b6c <__malloc_unlock>
   835e2:	9b00      	ldr	r3, [sp, #0]
   835e4:	f103 0408 	add.w	r4, r3, #8
   835e8:	e01e      	b.n	83628 <_malloc_r+0x18c>
   835ea:	2910      	cmp	r1, #16
   835ec:	d820      	bhi.n	83630 <_malloc_r+0x194>
   835ee:	f000 fab7 	bl	83b60 <__malloc_lock>
   835f2:	2610      	movs	r6, #16
   835f4:	2318      	movs	r3, #24
   835f6:	2002      	movs	r0, #2
   835f8:	4f72      	ldr	r7, [pc, #456]	; (837c4 <_malloc_r+0x328>)
   835fa:	443b      	add	r3, r7
   835fc:	685c      	ldr	r4, [r3, #4]
   835fe:	f1a3 0208 	sub.w	r2, r3, #8
   83602:	4294      	cmp	r4, r2
   83604:	f000 812f 	beq.w	83866 <_malloc_r+0x3ca>
   83608:	6863      	ldr	r3, [r4, #4]
   8360a:	68e1      	ldr	r1, [r4, #12]
   8360c:	f023 0303 	bic.w	r3, r3, #3
   83610:	4423      	add	r3, r4
   83612:	685a      	ldr	r2, [r3, #4]
   83614:	68a6      	ldr	r6, [r4, #8]
   83616:	f042 0201 	orr.w	r2, r2, #1
   8361a:	60f1      	str	r1, [r6, #12]
   8361c:	4628      	mov	r0, r5
   8361e:	608e      	str	r6, [r1, #8]
   83620:	605a      	str	r2, [r3, #4]
   83622:	f000 faa3 	bl	83b6c <__malloc_unlock>
   83626:	3408      	adds	r4, #8
   83628:	4620      	mov	r0, r4
   8362a:	b003      	add	sp, #12
   8362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83630:	2400      	movs	r4, #0
   83632:	230c      	movs	r3, #12
   83634:	4620      	mov	r0, r4
   83636:	602b      	str	r3, [r5, #0]
   83638:	b003      	add	sp, #12
   8363a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8363e:	2040      	movs	r0, #64	; 0x40
   83640:	f44f 7100 	mov.w	r1, #512	; 0x200
   83644:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   83648:	e74a      	b.n	834e0 <_malloc_r+0x44>
   8364a:	4423      	add	r3, r4
   8364c:	685a      	ldr	r2, [r3, #4]
   8364e:	68e1      	ldr	r1, [r4, #12]
   83650:	e7e0      	b.n	83614 <_malloc_r+0x178>
   83652:	4423      	add	r3, r4
   83654:	685a      	ldr	r2, [r3, #4]
   83656:	4628      	mov	r0, r5
   83658:	f042 0201 	orr.w	r2, r2, #1
   8365c:	605a      	str	r2, [r3, #4]
   8365e:	3408      	adds	r4, #8
   83660:	f000 fa84 	bl	83b6c <__malloc_unlock>
   83664:	4620      	mov	r0, r4
   83666:	b003      	add	sp, #12
   83668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8366c:	68bc      	ldr	r4, [r7, #8]
   8366e:	6863      	ldr	r3, [r4, #4]
   83670:	f023 0803 	bic.w	r8, r3, #3
   83674:	45b0      	cmp	r8, r6
   83676:	d304      	bcc.n	83682 <_malloc_r+0x1e6>
   83678:	eba8 0306 	sub.w	r3, r8, r6
   8367c:	2b0f      	cmp	r3, #15
   8367e:	f300 8085 	bgt.w	8378c <_malloc_r+0x2f0>
   83682:	f8df 9158 	ldr.w	r9, [pc, #344]	; 837dc <_malloc_r+0x340>
   83686:	4b50      	ldr	r3, [pc, #320]	; (837c8 <_malloc_r+0x32c>)
   83688:	f8d9 2000 	ldr.w	r2, [r9]
   8368c:	681b      	ldr	r3, [r3, #0]
   8368e:	3201      	adds	r2, #1
   83690:	4433      	add	r3, r6
   83692:	eb04 0a08 	add.w	sl, r4, r8
   83696:	f000 8154 	beq.w	83942 <_malloc_r+0x4a6>
   8369a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8369e:	330f      	adds	r3, #15
   836a0:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   836a4:	f02b 0b0f 	bic.w	fp, fp, #15
   836a8:	4659      	mov	r1, fp
   836aa:	4628      	mov	r0, r5
   836ac:	f000 fc1a 	bl	83ee4 <_sbrk_r>
   836b0:	1c41      	adds	r1, r0, #1
   836b2:	4602      	mov	r2, r0
   836b4:	f000 80fb 	beq.w	838ae <_malloc_r+0x412>
   836b8:	4582      	cmp	sl, r0
   836ba:	f200 80f6 	bhi.w	838aa <_malloc_r+0x40e>
   836be:	4b43      	ldr	r3, [pc, #268]	; (837cc <_malloc_r+0x330>)
   836c0:	6819      	ldr	r1, [r3, #0]
   836c2:	4459      	add	r1, fp
   836c4:	6019      	str	r1, [r3, #0]
   836c6:	f000 814c 	beq.w	83962 <_malloc_r+0x4c6>
   836ca:	f8d9 0000 	ldr.w	r0, [r9]
   836ce:	3001      	adds	r0, #1
   836d0:	bf1b      	ittet	ne
   836d2:	eba2 0a0a 	subne.w	sl, r2, sl
   836d6:	4451      	addne	r1, sl
   836d8:	f8c9 2000 	streq.w	r2, [r9]
   836dc:	6019      	strne	r1, [r3, #0]
   836de:	f012 0107 	ands.w	r1, r2, #7
   836e2:	f000 8114 	beq.w	8390e <_malloc_r+0x472>
   836e6:	f1c1 0008 	rsb	r0, r1, #8
   836ea:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   836ee:	4402      	add	r2, r0
   836f0:	3108      	adds	r1, #8
   836f2:	eb02 090b 	add.w	r9, r2, fp
   836f6:	f3c9 090b 	ubfx	r9, r9, #0, #12
   836fa:	eba1 0909 	sub.w	r9, r1, r9
   836fe:	4649      	mov	r1, r9
   83700:	4628      	mov	r0, r5
   83702:	9301      	str	r3, [sp, #4]
   83704:	9200      	str	r2, [sp, #0]
   83706:	f000 fbed 	bl	83ee4 <_sbrk_r>
   8370a:	1c43      	adds	r3, r0, #1
   8370c:	e89d 000c 	ldmia.w	sp, {r2, r3}
   83710:	f000 8142 	beq.w	83998 <_malloc_r+0x4fc>
   83714:	1a80      	subs	r0, r0, r2
   83716:	4448      	add	r0, r9
   83718:	f040 0001 	orr.w	r0, r0, #1
   8371c:	6819      	ldr	r1, [r3, #0]
   8371e:	42bc      	cmp	r4, r7
   83720:	4449      	add	r1, r9
   83722:	60ba      	str	r2, [r7, #8]
   83724:	6019      	str	r1, [r3, #0]
   83726:	6050      	str	r0, [r2, #4]
   83728:	d017      	beq.n	8375a <_malloc_r+0x2be>
   8372a:	f1b8 0f0f 	cmp.w	r8, #15
   8372e:	f240 80fa 	bls.w	83926 <_malloc_r+0x48a>
   83732:	f04f 0c05 	mov.w	ip, #5
   83736:	6862      	ldr	r2, [r4, #4]
   83738:	f1a8 000c 	sub.w	r0, r8, #12
   8373c:	f020 0007 	bic.w	r0, r0, #7
   83740:	f002 0201 	and.w	r2, r2, #1
   83744:	eb04 0e00 	add.w	lr, r4, r0
   83748:	4302      	orrs	r2, r0
   8374a:	280f      	cmp	r0, #15
   8374c:	6062      	str	r2, [r4, #4]
   8374e:	f8ce c004 	str.w	ip, [lr, #4]
   83752:	f8ce c008 	str.w	ip, [lr, #8]
   83756:	f200 8116 	bhi.w	83986 <_malloc_r+0x4ea>
   8375a:	4b1d      	ldr	r3, [pc, #116]	; (837d0 <_malloc_r+0x334>)
   8375c:	68bc      	ldr	r4, [r7, #8]
   8375e:	681a      	ldr	r2, [r3, #0]
   83760:	4291      	cmp	r1, r2
   83762:	bf88      	it	hi
   83764:	6019      	strhi	r1, [r3, #0]
   83766:	4b1b      	ldr	r3, [pc, #108]	; (837d4 <_malloc_r+0x338>)
   83768:	681a      	ldr	r2, [r3, #0]
   8376a:	4291      	cmp	r1, r2
   8376c:	6862      	ldr	r2, [r4, #4]
   8376e:	bf88      	it	hi
   83770:	6019      	strhi	r1, [r3, #0]
   83772:	f022 0203 	bic.w	r2, r2, #3
   83776:	4296      	cmp	r6, r2
   83778:	eba2 0306 	sub.w	r3, r2, r6
   8377c:	d801      	bhi.n	83782 <_malloc_r+0x2e6>
   8377e:	2b0f      	cmp	r3, #15
   83780:	dc04      	bgt.n	8378c <_malloc_r+0x2f0>
   83782:	4628      	mov	r0, r5
   83784:	f000 f9f2 	bl	83b6c <__malloc_unlock>
   83788:	2400      	movs	r4, #0
   8378a:	e74d      	b.n	83628 <_malloc_r+0x18c>
   8378c:	f046 0201 	orr.w	r2, r6, #1
   83790:	f043 0301 	orr.w	r3, r3, #1
   83794:	4426      	add	r6, r4
   83796:	6062      	str	r2, [r4, #4]
   83798:	4628      	mov	r0, r5
   8379a:	60be      	str	r6, [r7, #8]
   8379c:	3408      	adds	r4, #8
   8379e:	6073      	str	r3, [r6, #4]
   837a0:	f000 f9e4 	bl	83b6c <__malloc_unlock>
   837a4:	4620      	mov	r0, r4
   837a6:	b003      	add	sp, #12
   837a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   837ac:	2b14      	cmp	r3, #20
   837ae:	d970      	bls.n	83892 <_malloc_r+0x3f6>
   837b0:	2b54      	cmp	r3, #84	; 0x54
   837b2:	f200 80a2 	bhi.w	838fa <_malloc_r+0x45e>
   837b6:	0b33      	lsrs	r3, r6, #12
   837b8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   837bc:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   837c0:	00c1      	lsls	r1, r0, #3
   837c2:	e68d      	b.n	834e0 <_malloc_r+0x44>
   837c4:	200706e0 	.word	0x200706e0
   837c8:	20070c44 	.word	0x20070c44
   837cc:	20070c14 	.word	0x20070c14
   837d0:	20070c3c 	.word	0x20070c3c
   837d4:	20070c40 	.word	0x20070c40
   837d8:	200706e8 	.word	0x200706e8
   837dc:	20070ae8 	.word	0x20070ae8
   837e0:	0a5a      	lsrs	r2, r3, #9
   837e2:	2a04      	cmp	r2, #4
   837e4:	d95b      	bls.n	8389e <_malloc_r+0x402>
   837e6:	2a14      	cmp	r2, #20
   837e8:	f200 80ae 	bhi.w	83948 <_malloc_r+0x4ac>
   837ec:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   837f0:	00c9      	lsls	r1, r1, #3
   837f2:	325b      	adds	r2, #91	; 0x5b
   837f4:	eb07 0c01 	add.w	ip, r7, r1
   837f8:	5879      	ldr	r1, [r7, r1]
   837fa:	f1ac 0c08 	sub.w	ip, ip, #8
   837fe:	458c      	cmp	ip, r1
   83800:	f000 8088 	beq.w	83914 <_malloc_r+0x478>
   83804:	684a      	ldr	r2, [r1, #4]
   83806:	f022 0203 	bic.w	r2, r2, #3
   8380a:	4293      	cmp	r3, r2
   8380c:	d273      	bcs.n	838f6 <_malloc_r+0x45a>
   8380e:	6889      	ldr	r1, [r1, #8]
   83810:	458c      	cmp	ip, r1
   83812:	d1f7      	bne.n	83804 <_malloc_r+0x368>
   83814:	f8dc 300c 	ldr.w	r3, [ip, #12]
   83818:	687a      	ldr	r2, [r7, #4]
   8381a:	60e3      	str	r3, [r4, #12]
   8381c:	f8c4 c008 	str.w	ip, [r4, #8]
   83820:	609c      	str	r4, [r3, #8]
   83822:	f8cc 400c 	str.w	r4, [ip, #12]
   83826:	e69e      	b.n	83566 <_malloc_r+0xca>
   83828:	f046 0c01 	orr.w	ip, r6, #1
   8382c:	f042 0101 	orr.w	r1, r2, #1
   83830:	4426      	add	r6, r4
   83832:	f8c4 c004 	str.w	ip, [r4, #4]
   83836:	4628      	mov	r0, r5
   83838:	617e      	str	r6, [r7, #20]
   8383a:	613e      	str	r6, [r7, #16]
   8383c:	f8c6 e00c 	str.w	lr, [r6, #12]
   83840:	f8c6 e008 	str.w	lr, [r6, #8]
   83844:	6071      	str	r1, [r6, #4]
   83846:	50e2      	str	r2, [r4, r3]
   83848:	f000 f990 	bl	83b6c <__malloc_unlock>
   8384c:	3408      	adds	r4, #8
   8384e:	e6eb      	b.n	83628 <_malloc_r+0x18c>
   83850:	687a      	ldr	r2, [r7, #4]
   83852:	e688      	b.n	83566 <_malloc_r+0xca>
   83854:	f108 0801 	add.w	r8, r8, #1
   83858:	f018 0f03 	tst.w	r8, #3
   8385c:	f10c 0c08 	add.w	ip, ip, #8
   83860:	f47f ae93 	bne.w	8358a <_malloc_r+0xee>
   83864:	e02d      	b.n	838c2 <_malloc_r+0x426>
   83866:	68dc      	ldr	r4, [r3, #12]
   83868:	42a3      	cmp	r3, r4
   8386a:	bf08      	it	eq
   8386c:	3002      	addeq	r0, #2
   8386e:	f43f ae4b 	beq.w	83508 <_malloc_r+0x6c>
   83872:	e6c9      	b.n	83608 <_malloc_r+0x16c>
   83874:	461c      	mov	r4, r3
   83876:	4419      	add	r1, r3
   83878:	684a      	ldr	r2, [r1, #4]
   8387a:	68db      	ldr	r3, [r3, #12]
   8387c:	f854 6f08 	ldr.w	r6, [r4, #8]!
   83880:	f042 0201 	orr.w	r2, r2, #1
   83884:	604a      	str	r2, [r1, #4]
   83886:	4628      	mov	r0, r5
   83888:	60f3      	str	r3, [r6, #12]
   8388a:	609e      	str	r6, [r3, #8]
   8388c:	f000 f96e 	bl	83b6c <__malloc_unlock>
   83890:	e6ca      	b.n	83628 <_malloc_r+0x18c>
   83892:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   83896:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   8389a:	00c1      	lsls	r1, r0, #3
   8389c:	e620      	b.n	834e0 <_malloc_r+0x44>
   8389e:	099a      	lsrs	r2, r3, #6
   838a0:	f102 0139 	add.w	r1, r2, #57	; 0x39
   838a4:	00c9      	lsls	r1, r1, #3
   838a6:	3238      	adds	r2, #56	; 0x38
   838a8:	e7a4      	b.n	837f4 <_malloc_r+0x358>
   838aa:	42bc      	cmp	r4, r7
   838ac:	d054      	beq.n	83958 <_malloc_r+0x4bc>
   838ae:	68bc      	ldr	r4, [r7, #8]
   838b0:	6862      	ldr	r2, [r4, #4]
   838b2:	f022 0203 	bic.w	r2, r2, #3
   838b6:	e75e      	b.n	83776 <_malloc_r+0x2da>
   838b8:	f859 3908 	ldr.w	r3, [r9], #-8
   838bc:	4599      	cmp	r9, r3
   838be:	f040 8086 	bne.w	839ce <_malloc_r+0x532>
   838c2:	f010 0f03 	tst.w	r0, #3
   838c6:	f100 30ff 	add.w	r0, r0, #4294967295
   838ca:	d1f5      	bne.n	838b8 <_malloc_r+0x41c>
   838cc:	687b      	ldr	r3, [r7, #4]
   838ce:	ea23 0304 	bic.w	r3, r3, r4
   838d2:	607b      	str	r3, [r7, #4]
   838d4:	0064      	lsls	r4, r4, #1
   838d6:	429c      	cmp	r4, r3
   838d8:	f63f aec8 	bhi.w	8366c <_malloc_r+0x1d0>
   838dc:	2c00      	cmp	r4, #0
   838de:	f43f aec5 	beq.w	8366c <_malloc_r+0x1d0>
   838e2:	421c      	tst	r4, r3
   838e4:	4640      	mov	r0, r8
   838e6:	f47f ae4c 	bne.w	83582 <_malloc_r+0xe6>
   838ea:	0064      	lsls	r4, r4, #1
   838ec:	421c      	tst	r4, r3
   838ee:	f100 0004 	add.w	r0, r0, #4
   838f2:	d0fa      	beq.n	838ea <_malloc_r+0x44e>
   838f4:	e645      	b.n	83582 <_malloc_r+0xe6>
   838f6:	468c      	mov	ip, r1
   838f8:	e78c      	b.n	83814 <_malloc_r+0x378>
   838fa:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   838fe:	d815      	bhi.n	8392c <_malloc_r+0x490>
   83900:	0bf3      	lsrs	r3, r6, #15
   83902:	f103 0078 	add.w	r0, r3, #120	; 0x78
   83906:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   8390a:	00c1      	lsls	r1, r0, #3
   8390c:	e5e8      	b.n	834e0 <_malloc_r+0x44>
   8390e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   83912:	e6ee      	b.n	836f2 <_malloc_r+0x256>
   83914:	2101      	movs	r1, #1
   83916:	687b      	ldr	r3, [r7, #4]
   83918:	1092      	asrs	r2, r2, #2
   8391a:	fa01 f202 	lsl.w	r2, r1, r2
   8391e:	431a      	orrs	r2, r3
   83920:	607a      	str	r2, [r7, #4]
   83922:	4663      	mov	r3, ip
   83924:	e779      	b.n	8381a <_malloc_r+0x37e>
   83926:	2301      	movs	r3, #1
   83928:	6053      	str	r3, [r2, #4]
   8392a:	e72a      	b.n	83782 <_malloc_r+0x2e6>
   8392c:	f240 5254 	movw	r2, #1364	; 0x554
   83930:	4293      	cmp	r3, r2
   83932:	d822      	bhi.n	8397a <_malloc_r+0x4de>
   83934:	0cb3      	lsrs	r3, r6, #18
   83936:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8393a:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   8393e:	00c1      	lsls	r1, r0, #3
   83940:	e5ce      	b.n	834e0 <_malloc_r+0x44>
   83942:	f103 0b10 	add.w	fp, r3, #16
   83946:	e6af      	b.n	836a8 <_malloc_r+0x20c>
   83948:	2a54      	cmp	r2, #84	; 0x54
   8394a:	d829      	bhi.n	839a0 <_malloc_r+0x504>
   8394c:	0b1a      	lsrs	r2, r3, #12
   8394e:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   83952:	00c9      	lsls	r1, r1, #3
   83954:	326e      	adds	r2, #110	; 0x6e
   83956:	e74d      	b.n	837f4 <_malloc_r+0x358>
   83958:	4b20      	ldr	r3, [pc, #128]	; (839dc <_malloc_r+0x540>)
   8395a:	6819      	ldr	r1, [r3, #0]
   8395c:	4459      	add	r1, fp
   8395e:	6019      	str	r1, [r3, #0]
   83960:	e6b3      	b.n	836ca <_malloc_r+0x22e>
   83962:	f3ca 000b 	ubfx	r0, sl, #0, #12
   83966:	2800      	cmp	r0, #0
   83968:	f47f aeaf 	bne.w	836ca <_malloc_r+0x22e>
   8396c:	eb08 030b 	add.w	r3, r8, fp
   83970:	68ba      	ldr	r2, [r7, #8]
   83972:	f043 0301 	orr.w	r3, r3, #1
   83976:	6053      	str	r3, [r2, #4]
   83978:	e6ef      	b.n	8375a <_malloc_r+0x2be>
   8397a:	207f      	movs	r0, #127	; 0x7f
   8397c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   83980:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   83984:	e5ac      	b.n	834e0 <_malloc_r+0x44>
   83986:	f104 0108 	add.w	r1, r4, #8
   8398a:	4628      	mov	r0, r5
   8398c:	9300      	str	r3, [sp, #0]
   8398e:	f7ff fa67 	bl	82e60 <_free_r>
   83992:	9b00      	ldr	r3, [sp, #0]
   83994:	6819      	ldr	r1, [r3, #0]
   83996:	e6e0      	b.n	8375a <_malloc_r+0x2be>
   83998:	2001      	movs	r0, #1
   8399a:	f04f 0900 	mov.w	r9, #0
   8399e:	e6bd      	b.n	8371c <_malloc_r+0x280>
   839a0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   839a4:	d805      	bhi.n	839b2 <_malloc_r+0x516>
   839a6:	0bda      	lsrs	r2, r3, #15
   839a8:	f102 0178 	add.w	r1, r2, #120	; 0x78
   839ac:	00c9      	lsls	r1, r1, #3
   839ae:	3277      	adds	r2, #119	; 0x77
   839b0:	e720      	b.n	837f4 <_malloc_r+0x358>
   839b2:	f240 5154 	movw	r1, #1364	; 0x554
   839b6:	428a      	cmp	r2, r1
   839b8:	d805      	bhi.n	839c6 <_malloc_r+0x52a>
   839ba:	0c9a      	lsrs	r2, r3, #18
   839bc:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   839c0:	00c9      	lsls	r1, r1, #3
   839c2:	327c      	adds	r2, #124	; 0x7c
   839c4:	e716      	b.n	837f4 <_malloc_r+0x358>
   839c6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   839ca:	227e      	movs	r2, #126	; 0x7e
   839cc:	e712      	b.n	837f4 <_malloc_r+0x358>
   839ce:	687b      	ldr	r3, [r7, #4]
   839d0:	e780      	b.n	838d4 <_malloc_r+0x438>
   839d2:	08f0      	lsrs	r0, r6, #3
   839d4:	f106 0308 	add.w	r3, r6, #8
   839d8:	e60e      	b.n	835f8 <_malloc_r+0x15c>
   839da:	bf00      	nop
   839dc:	20070c14 	.word	0x20070c14

000839e0 <__ascii_mbtowc>:
   839e0:	b082      	sub	sp, #8
   839e2:	b149      	cbz	r1, 839f8 <__ascii_mbtowc+0x18>
   839e4:	b15a      	cbz	r2, 839fe <__ascii_mbtowc+0x1e>
   839e6:	b16b      	cbz	r3, 83a04 <__ascii_mbtowc+0x24>
   839e8:	7813      	ldrb	r3, [r2, #0]
   839ea:	600b      	str	r3, [r1, #0]
   839ec:	7812      	ldrb	r2, [r2, #0]
   839ee:	1c10      	adds	r0, r2, #0
   839f0:	bf18      	it	ne
   839f2:	2001      	movne	r0, #1
   839f4:	b002      	add	sp, #8
   839f6:	4770      	bx	lr
   839f8:	a901      	add	r1, sp, #4
   839fa:	2a00      	cmp	r2, #0
   839fc:	d1f3      	bne.n	839e6 <__ascii_mbtowc+0x6>
   839fe:	4610      	mov	r0, r2
   83a00:	b002      	add	sp, #8
   83a02:	4770      	bx	lr
   83a04:	f06f 0001 	mvn.w	r0, #1
   83a08:	e7f4      	b.n	839f4 <__ascii_mbtowc+0x14>
   83a0a:	bf00      	nop

00083a0c <memchr>:
   83a0c:	0783      	lsls	r3, r0, #30
   83a0e:	b470      	push	{r4, r5, r6}
   83a10:	b2cd      	uxtb	r5, r1
   83a12:	d03d      	beq.n	83a90 <memchr+0x84>
   83a14:	1e54      	subs	r4, r2, #1
   83a16:	b30a      	cbz	r2, 83a5c <memchr+0x50>
   83a18:	7803      	ldrb	r3, [r0, #0]
   83a1a:	42ab      	cmp	r3, r5
   83a1c:	d01f      	beq.n	83a5e <memchr+0x52>
   83a1e:	1c43      	adds	r3, r0, #1
   83a20:	e005      	b.n	83a2e <memchr+0x22>
   83a22:	f114 34ff 	adds.w	r4, r4, #4294967295
   83a26:	d319      	bcc.n	83a5c <memchr+0x50>
   83a28:	7802      	ldrb	r2, [r0, #0]
   83a2a:	42aa      	cmp	r2, r5
   83a2c:	d017      	beq.n	83a5e <memchr+0x52>
   83a2e:	f013 0f03 	tst.w	r3, #3
   83a32:	4618      	mov	r0, r3
   83a34:	f103 0301 	add.w	r3, r3, #1
   83a38:	d1f3      	bne.n	83a22 <memchr+0x16>
   83a3a:	2c03      	cmp	r4, #3
   83a3c:	d811      	bhi.n	83a62 <memchr+0x56>
   83a3e:	b34c      	cbz	r4, 83a94 <memchr+0x88>
   83a40:	7803      	ldrb	r3, [r0, #0]
   83a42:	42ab      	cmp	r3, r5
   83a44:	d00b      	beq.n	83a5e <memchr+0x52>
   83a46:	4404      	add	r4, r0
   83a48:	1c43      	adds	r3, r0, #1
   83a4a:	e002      	b.n	83a52 <memchr+0x46>
   83a4c:	7802      	ldrb	r2, [r0, #0]
   83a4e:	42aa      	cmp	r2, r5
   83a50:	d005      	beq.n	83a5e <memchr+0x52>
   83a52:	429c      	cmp	r4, r3
   83a54:	4618      	mov	r0, r3
   83a56:	f103 0301 	add.w	r3, r3, #1
   83a5a:	d1f7      	bne.n	83a4c <memchr+0x40>
   83a5c:	2000      	movs	r0, #0
   83a5e:	bc70      	pop	{r4, r5, r6}
   83a60:	4770      	bx	lr
   83a62:	0209      	lsls	r1, r1, #8
   83a64:	b289      	uxth	r1, r1
   83a66:	4329      	orrs	r1, r5
   83a68:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   83a6c:	6803      	ldr	r3, [r0, #0]
   83a6e:	4606      	mov	r6, r0
   83a70:	404b      	eors	r3, r1
   83a72:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   83a76:	ea22 0303 	bic.w	r3, r2, r3
   83a7a:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   83a7e:	f100 0004 	add.w	r0, r0, #4
   83a82:	d103      	bne.n	83a8c <memchr+0x80>
   83a84:	3c04      	subs	r4, #4
   83a86:	2c03      	cmp	r4, #3
   83a88:	d8f0      	bhi.n	83a6c <memchr+0x60>
   83a8a:	e7d8      	b.n	83a3e <memchr+0x32>
   83a8c:	4630      	mov	r0, r6
   83a8e:	e7d7      	b.n	83a40 <memchr+0x34>
   83a90:	4614      	mov	r4, r2
   83a92:	e7d2      	b.n	83a3a <memchr+0x2e>
   83a94:	4620      	mov	r0, r4
   83a96:	e7e2      	b.n	83a5e <memchr+0x52>

00083a98 <memmove>:
   83a98:	4288      	cmp	r0, r1
   83a9a:	b5f0      	push	{r4, r5, r6, r7, lr}
   83a9c:	d90d      	bls.n	83aba <memmove+0x22>
   83a9e:	188b      	adds	r3, r1, r2
   83aa0:	4298      	cmp	r0, r3
   83aa2:	d20a      	bcs.n	83aba <memmove+0x22>
   83aa4:	1884      	adds	r4, r0, r2
   83aa6:	2a00      	cmp	r2, #0
   83aa8:	d051      	beq.n	83b4e <memmove+0xb6>
   83aaa:	4622      	mov	r2, r4
   83aac:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   83ab0:	4299      	cmp	r1, r3
   83ab2:	f802 4d01 	strb.w	r4, [r2, #-1]!
   83ab6:	d1f9      	bne.n	83aac <memmove+0x14>
   83ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83aba:	2a0f      	cmp	r2, #15
   83abc:	d948      	bls.n	83b50 <memmove+0xb8>
   83abe:	ea41 0300 	orr.w	r3, r1, r0
   83ac2:	079b      	lsls	r3, r3, #30
   83ac4:	d146      	bne.n	83b54 <memmove+0xbc>
   83ac6:	4615      	mov	r5, r2
   83ac8:	f100 0410 	add.w	r4, r0, #16
   83acc:	f101 0310 	add.w	r3, r1, #16
   83ad0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   83ad4:	3d10      	subs	r5, #16
   83ad6:	f844 6c10 	str.w	r6, [r4, #-16]
   83ada:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   83ade:	2d0f      	cmp	r5, #15
   83ae0:	f844 6c0c 	str.w	r6, [r4, #-12]
   83ae4:	f853 6c08 	ldr.w	r6, [r3, #-8]
   83ae8:	f104 0410 	add.w	r4, r4, #16
   83aec:	f844 6c18 	str.w	r6, [r4, #-24]
   83af0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   83af4:	f103 0310 	add.w	r3, r3, #16
   83af8:	f844 6c14 	str.w	r6, [r4, #-20]
   83afc:	d8e8      	bhi.n	83ad0 <memmove+0x38>
   83afe:	f1a2 0310 	sub.w	r3, r2, #16
   83b02:	f023 030f 	bic.w	r3, r3, #15
   83b06:	f002 0e0f 	and.w	lr, r2, #15
   83b0a:	3310      	adds	r3, #16
   83b0c:	f1be 0f03 	cmp.w	lr, #3
   83b10:	4419      	add	r1, r3
   83b12:	4403      	add	r3, r0
   83b14:	d921      	bls.n	83b5a <memmove+0xc2>
   83b16:	460e      	mov	r6, r1
   83b18:	4674      	mov	r4, lr
   83b1a:	1f1d      	subs	r5, r3, #4
   83b1c:	f856 7b04 	ldr.w	r7, [r6], #4
   83b20:	3c04      	subs	r4, #4
   83b22:	2c03      	cmp	r4, #3
   83b24:	f845 7f04 	str.w	r7, [r5, #4]!
   83b28:	d8f8      	bhi.n	83b1c <memmove+0x84>
   83b2a:	f1ae 0404 	sub.w	r4, lr, #4
   83b2e:	f024 0403 	bic.w	r4, r4, #3
   83b32:	3404      	adds	r4, #4
   83b34:	4421      	add	r1, r4
   83b36:	4423      	add	r3, r4
   83b38:	f002 0203 	and.w	r2, r2, #3
   83b3c:	b162      	cbz	r2, 83b58 <memmove+0xc0>
   83b3e:	3b01      	subs	r3, #1
   83b40:	440a      	add	r2, r1
   83b42:	f811 4b01 	ldrb.w	r4, [r1], #1
   83b46:	428a      	cmp	r2, r1
   83b48:	f803 4f01 	strb.w	r4, [r3, #1]!
   83b4c:	d1f9      	bne.n	83b42 <memmove+0xaa>
   83b4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83b50:	4603      	mov	r3, r0
   83b52:	e7f3      	b.n	83b3c <memmove+0xa4>
   83b54:	4603      	mov	r3, r0
   83b56:	e7f2      	b.n	83b3e <memmove+0xa6>
   83b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83b5a:	4672      	mov	r2, lr
   83b5c:	e7ee      	b.n	83b3c <memmove+0xa4>
   83b5e:	bf00      	nop

00083b60 <__malloc_lock>:
   83b60:	4801      	ldr	r0, [pc, #4]	; (83b68 <__malloc_lock+0x8>)
   83b62:	f7ff bc17 	b.w	83394 <__retarget_lock_acquire_recursive>
   83b66:	bf00      	nop
   83b68:	20070ca8 	.word	0x20070ca8

00083b6c <__malloc_unlock>:
   83b6c:	4801      	ldr	r0, [pc, #4]	; (83b74 <__malloc_unlock+0x8>)
   83b6e:	f7ff bc13 	b.w	83398 <__retarget_lock_release_recursive>
   83b72:	bf00      	nop
   83b74:	20070ca8 	.word	0x20070ca8

00083b78 <_realloc_r>:
   83b78:	2900      	cmp	r1, #0
   83b7a:	f000 8094 	beq.w	83ca6 <_realloc_r+0x12e>
   83b7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83b82:	460c      	mov	r4, r1
   83b84:	4615      	mov	r5, r2
   83b86:	b083      	sub	sp, #12
   83b88:	4680      	mov	r8, r0
   83b8a:	f105 060b 	add.w	r6, r5, #11
   83b8e:	f7ff ffe7 	bl	83b60 <__malloc_lock>
   83b92:	f854 ec04 	ldr.w	lr, [r4, #-4]
   83b96:	2e16      	cmp	r6, #22
   83b98:	f02e 0703 	bic.w	r7, lr, #3
   83b9c:	f1a4 0908 	sub.w	r9, r4, #8
   83ba0:	d83c      	bhi.n	83c1c <_realloc_r+0xa4>
   83ba2:	2210      	movs	r2, #16
   83ba4:	4616      	mov	r6, r2
   83ba6:	42b5      	cmp	r5, r6
   83ba8:	d83d      	bhi.n	83c26 <_realloc_r+0xae>
   83baa:	4297      	cmp	r7, r2
   83bac:	da43      	bge.n	83c36 <_realloc_r+0xbe>
   83bae:	4bc6      	ldr	r3, [pc, #792]	; (83ec8 <_realloc_r+0x350>)
   83bb0:	eb09 0007 	add.w	r0, r9, r7
   83bb4:	6899      	ldr	r1, [r3, #8]
   83bb6:	4288      	cmp	r0, r1
   83bb8:	f000 80c3 	beq.w	83d42 <_realloc_r+0x1ca>
   83bbc:	6843      	ldr	r3, [r0, #4]
   83bbe:	f023 0101 	bic.w	r1, r3, #1
   83bc2:	4401      	add	r1, r0
   83bc4:	6849      	ldr	r1, [r1, #4]
   83bc6:	07c9      	lsls	r1, r1, #31
   83bc8:	d54d      	bpl.n	83c66 <_realloc_r+0xee>
   83bca:	f01e 0f01 	tst.w	lr, #1
   83bce:	f000 809b 	beq.w	83d08 <_realloc_r+0x190>
   83bd2:	4629      	mov	r1, r5
   83bd4:	4640      	mov	r0, r8
   83bd6:	f7ff fc61 	bl	8349c <_malloc_r>
   83bda:	4605      	mov	r5, r0
   83bdc:	2800      	cmp	r0, #0
   83bde:	d03b      	beq.n	83c58 <_realloc_r+0xe0>
   83be0:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83be4:	f1a0 0208 	sub.w	r2, r0, #8
   83be8:	f023 0301 	bic.w	r3, r3, #1
   83bec:	444b      	add	r3, r9
   83bee:	429a      	cmp	r2, r3
   83bf0:	f000 812b 	beq.w	83e4a <_realloc_r+0x2d2>
   83bf4:	1f3a      	subs	r2, r7, #4
   83bf6:	2a24      	cmp	r2, #36	; 0x24
   83bf8:	f200 8118 	bhi.w	83e2c <_realloc_r+0x2b4>
   83bfc:	2a13      	cmp	r2, #19
   83bfe:	f200 80eb 	bhi.w	83dd8 <_realloc_r+0x260>
   83c02:	4603      	mov	r3, r0
   83c04:	4622      	mov	r2, r4
   83c06:	6811      	ldr	r1, [r2, #0]
   83c08:	6019      	str	r1, [r3, #0]
   83c0a:	6851      	ldr	r1, [r2, #4]
   83c0c:	6059      	str	r1, [r3, #4]
   83c0e:	6892      	ldr	r2, [r2, #8]
   83c10:	609a      	str	r2, [r3, #8]
   83c12:	4621      	mov	r1, r4
   83c14:	4640      	mov	r0, r8
   83c16:	f7ff f923 	bl	82e60 <_free_r>
   83c1a:	e01d      	b.n	83c58 <_realloc_r+0xe0>
   83c1c:	f026 0607 	bic.w	r6, r6, #7
   83c20:	2e00      	cmp	r6, #0
   83c22:	4632      	mov	r2, r6
   83c24:	dabf      	bge.n	83ba6 <_realloc_r+0x2e>
   83c26:	2500      	movs	r5, #0
   83c28:	230c      	movs	r3, #12
   83c2a:	4628      	mov	r0, r5
   83c2c:	f8c8 3000 	str.w	r3, [r8]
   83c30:	b003      	add	sp, #12
   83c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c36:	4625      	mov	r5, r4
   83c38:	1bbb      	subs	r3, r7, r6
   83c3a:	2b0f      	cmp	r3, #15
   83c3c:	f8d9 2004 	ldr.w	r2, [r9, #4]
   83c40:	d81d      	bhi.n	83c7e <_realloc_r+0x106>
   83c42:	f002 0201 	and.w	r2, r2, #1
   83c46:	433a      	orrs	r2, r7
   83c48:	eb09 0107 	add.w	r1, r9, r7
   83c4c:	f8c9 2004 	str.w	r2, [r9, #4]
   83c50:	684b      	ldr	r3, [r1, #4]
   83c52:	f043 0301 	orr.w	r3, r3, #1
   83c56:	604b      	str	r3, [r1, #4]
   83c58:	4640      	mov	r0, r8
   83c5a:	f7ff ff87 	bl	83b6c <__malloc_unlock>
   83c5e:	4628      	mov	r0, r5
   83c60:	b003      	add	sp, #12
   83c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   83c66:	f023 0303 	bic.w	r3, r3, #3
   83c6a:	18f9      	adds	r1, r7, r3
   83c6c:	4291      	cmp	r1, r2
   83c6e:	db1d      	blt.n	83cac <_realloc_r+0x134>
   83c70:	68c3      	ldr	r3, [r0, #12]
   83c72:	6882      	ldr	r2, [r0, #8]
   83c74:	4625      	mov	r5, r4
   83c76:	60d3      	str	r3, [r2, #12]
   83c78:	460f      	mov	r7, r1
   83c7a:	609a      	str	r2, [r3, #8]
   83c7c:	e7dc      	b.n	83c38 <_realloc_r+0xc0>
   83c7e:	f002 0201 	and.w	r2, r2, #1
   83c82:	eb09 0106 	add.w	r1, r9, r6
   83c86:	f043 0301 	orr.w	r3, r3, #1
   83c8a:	4332      	orrs	r2, r6
   83c8c:	f8c9 2004 	str.w	r2, [r9, #4]
   83c90:	444f      	add	r7, r9
   83c92:	604b      	str	r3, [r1, #4]
   83c94:	687b      	ldr	r3, [r7, #4]
   83c96:	3108      	adds	r1, #8
   83c98:	f043 0301 	orr.w	r3, r3, #1
   83c9c:	607b      	str	r3, [r7, #4]
   83c9e:	4640      	mov	r0, r8
   83ca0:	f7ff f8de 	bl	82e60 <_free_r>
   83ca4:	e7d8      	b.n	83c58 <_realloc_r+0xe0>
   83ca6:	4611      	mov	r1, r2
   83ca8:	f7ff bbf8 	b.w	8349c <_malloc_r>
   83cac:	f01e 0f01 	tst.w	lr, #1
   83cb0:	d18f      	bne.n	83bd2 <_realloc_r+0x5a>
   83cb2:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83cb6:	eba9 0a01 	sub.w	sl, r9, r1
   83cba:	f8da 1004 	ldr.w	r1, [sl, #4]
   83cbe:	f021 0103 	bic.w	r1, r1, #3
   83cc2:	440b      	add	r3, r1
   83cc4:	443b      	add	r3, r7
   83cc6:	4293      	cmp	r3, r2
   83cc8:	db26      	blt.n	83d18 <_realloc_r+0x1a0>
   83cca:	4655      	mov	r5, sl
   83ccc:	68c1      	ldr	r1, [r0, #12]
   83cce:	6880      	ldr	r0, [r0, #8]
   83cd0:	1f3a      	subs	r2, r7, #4
   83cd2:	60c1      	str	r1, [r0, #12]
   83cd4:	6088      	str	r0, [r1, #8]
   83cd6:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83cda:	f8da 100c 	ldr.w	r1, [sl, #12]
   83cde:	2a24      	cmp	r2, #36	; 0x24
   83ce0:	60c1      	str	r1, [r0, #12]
   83ce2:	6088      	str	r0, [r1, #8]
   83ce4:	d826      	bhi.n	83d34 <_realloc_r+0x1bc>
   83ce6:	2a13      	cmp	r2, #19
   83ce8:	f240 8081 	bls.w	83dee <_realloc_r+0x276>
   83cec:	6821      	ldr	r1, [r4, #0]
   83cee:	2a1b      	cmp	r2, #27
   83cf0:	f8ca 1008 	str.w	r1, [sl, #8]
   83cf4:	6861      	ldr	r1, [r4, #4]
   83cf6:	f8ca 100c 	str.w	r1, [sl, #12]
   83cfa:	f200 80ad 	bhi.w	83e58 <_realloc_r+0x2e0>
   83cfe:	f104 0008 	add.w	r0, r4, #8
   83d02:	f10a 0210 	add.w	r2, sl, #16
   83d06:	e074      	b.n	83df2 <_realloc_r+0x27a>
   83d08:	f854 3c08 	ldr.w	r3, [r4, #-8]
   83d0c:	eba9 0a03 	sub.w	sl, r9, r3
   83d10:	f8da 1004 	ldr.w	r1, [sl, #4]
   83d14:	f021 0103 	bic.w	r1, r1, #3
   83d18:	187b      	adds	r3, r7, r1
   83d1a:	4293      	cmp	r3, r2
   83d1c:	f6ff af59 	blt.w	83bd2 <_realloc_r+0x5a>
   83d20:	4655      	mov	r5, sl
   83d22:	f8da 100c 	ldr.w	r1, [sl, #12]
   83d26:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83d2a:	1f3a      	subs	r2, r7, #4
   83d2c:	2a24      	cmp	r2, #36	; 0x24
   83d2e:	60c1      	str	r1, [r0, #12]
   83d30:	6088      	str	r0, [r1, #8]
   83d32:	d9d8      	bls.n	83ce6 <_realloc_r+0x16e>
   83d34:	4621      	mov	r1, r4
   83d36:	4628      	mov	r0, r5
   83d38:	461f      	mov	r7, r3
   83d3a:	46d1      	mov	r9, sl
   83d3c:	f7ff feac 	bl	83a98 <memmove>
   83d40:	e77a      	b.n	83c38 <_realloc_r+0xc0>
   83d42:	6841      	ldr	r1, [r0, #4]
   83d44:	f106 0010 	add.w	r0, r6, #16
   83d48:	f021 0b03 	bic.w	fp, r1, #3
   83d4c:	44bb      	add	fp, r7
   83d4e:	4583      	cmp	fp, r0
   83d50:	da58      	bge.n	83e04 <_realloc_r+0x28c>
   83d52:	f01e 0f01 	tst.w	lr, #1
   83d56:	f47f af3c 	bne.w	83bd2 <_realloc_r+0x5a>
   83d5a:	f854 1c08 	ldr.w	r1, [r4, #-8]
   83d5e:	eba9 0a01 	sub.w	sl, r9, r1
   83d62:	f8da 1004 	ldr.w	r1, [sl, #4]
   83d66:	f021 0103 	bic.w	r1, r1, #3
   83d6a:	448b      	add	fp, r1
   83d6c:	4558      	cmp	r0, fp
   83d6e:	dcd3      	bgt.n	83d18 <_realloc_r+0x1a0>
   83d70:	4655      	mov	r5, sl
   83d72:	f8da 100c 	ldr.w	r1, [sl, #12]
   83d76:	f855 0f08 	ldr.w	r0, [r5, #8]!
   83d7a:	1f3a      	subs	r2, r7, #4
   83d7c:	2a24      	cmp	r2, #36	; 0x24
   83d7e:	60c1      	str	r1, [r0, #12]
   83d80:	6088      	str	r0, [r1, #8]
   83d82:	f200 808d 	bhi.w	83ea0 <_realloc_r+0x328>
   83d86:	2a13      	cmp	r2, #19
   83d88:	f240 8087 	bls.w	83e9a <_realloc_r+0x322>
   83d8c:	6821      	ldr	r1, [r4, #0]
   83d8e:	2a1b      	cmp	r2, #27
   83d90:	f8ca 1008 	str.w	r1, [sl, #8]
   83d94:	6861      	ldr	r1, [r4, #4]
   83d96:	f8ca 100c 	str.w	r1, [sl, #12]
   83d9a:	f200 8088 	bhi.w	83eae <_realloc_r+0x336>
   83d9e:	f104 0108 	add.w	r1, r4, #8
   83da2:	f10a 0210 	add.w	r2, sl, #16
   83da6:	6808      	ldr	r0, [r1, #0]
   83da8:	6010      	str	r0, [r2, #0]
   83daa:	6848      	ldr	r0, [r1, #4]
   83dac:	6050      	str	r0, [r2, #4]
   83dae:	6889      	ldr	r1, [r1, #8]
   83db0:	6091      	str	r1, [r2, #8]
   83db2:	ebab 0206 	sub.w	r2, fp, r6
   83db6:	eb0a 0106 	add.w	r1, sl, r6
   83dba:	f042 0201 	orr.w	r2, r2, #1
   83dbe:	6099      	str	r1, [r3, #8]
   83dc0:	604a      	str	r2, [r1, #4]
   83dc2:	f8da 3004 	ldr.w	r3, [sl, #4]
   83dc6:	4640      	mov	r0, r8
   83dc8:	f003 0301 	and.w	r3, r3, #1
   83dcc:	431e      	orrs	r6, r3
   83dce:	f8ca 6004 	str.w	r6, [sl, #4]
   83dd2:	f7ff fecb 	bl	83b6c <__malloc_unlock>
   83dd6:	e742      	b.n	83c5e <_realloc_r+0xe6>
   83dd8:	6823      	ldr	r3, [r4, #0]
   83dda:	2a1b      	cmp	r2, #27
   83ddc:	6003      	str	r3, [r0, #0]
   83dde:	6863      	ldr	r3, [r4, #4]
   83de0:	6043      	str	r3, [r0, #4]
   83de2:	d827      	bhi.n	83e34 <_realloc_r+0x2bc>
   83de4:	f100 0308 	add.w	r3, r0, #8
   83de8:	f104 0208 	add.w	r2, r4, #8
   83dec:	e70b      	b.n	83c06 <_realloc_r+0x8e>
   83dee:	4620      	mov	r0, r4
   83df0:	462a      	mov	r2, r5
   83df2:	6801      	ldr	r1, [r0, #0]
   83df4:	461f      	mov	r7, r3
   83df6:	6011      	str	r1, [r2, #0]
   83df8:	6841      	ldr	r1, [r0, #4]
   83dfa:	46d1      	mov	r9, sl
   83dfc:	6051      	str	r1, [r2, #4]
   83dfe:	6883      	ldr	r3, [r0, #8]
   83e00:	6093      	str	r3, [r2, #8]
   83e02:	e719      	b.n	83c38 <_realloc_r+0xc0>
   83e04:	ebab 0b06 	sub.w	fp, fp, r6
   83e08:	eb09 0106 	add.w	r1, r9, r6
   83e0c:	f04b 0201 	orr.w	r2, fp, #1
   83e10:	6099      	str	r1, [r3, #8]
   83e12:	604a      	str	r2, [r1, #4]
   83e14:	f854 3c04 	ldr.w	r3, [r4, #-4]
   83e18:	4640      	mov	r0, r8
   83e1a:	f003 0301 	and.w	r3, r3, #1
   83e1e:	431e      	orrs	r6, r3
   83e20:	f844 6c04 	str.w	r6, [r4, #-4]
   83e24:	f7ff fea2 	bl	83b6c <__malloc_unlock>
   83e28:	4625      	mov	r5, r4
   83e2a:	e718      	b.n	83c5e <_realloc_r+0xe6>
   83e2c:	4621      	mov	r1, r4
   83e2e:	f7ff fe33 	bl	83a98 <memmove>
   83e32:	e6ee      	b.n	83c12 <_realloc_r+0x9a>
   83e34:	68a3      	ldr	r3, [r4, #8]
   83e36:	2a24      	cmp	r2, #36	; 0x24
   83e38:	6083      	str	r3, [r0, #8]
   83e3a:	68e3      	ldr	r3, [r4, #12]
   83e3c:	60c3      	str	r3, [r0, #12]
   83e3e:	d018      	beq.n	83e72 <_realloc_r+0x2fa>
   83e40:	f100 0310 	add.w	r3, r0, #16
   83e44:	f104 0210 	add.w	r2, r4, #16
   83e48:	e6dd      	b.n	83c06 <_realloc_r+0x8e>
   83e4a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   83e4e:	4625      	mov	r5, r4
   83e50:	f023 0303 	bic.w	r3, r3, #3
   83e54:	441f      	add	r7, r3
   83e56:	e6ef      	b.n	83c38 <_realloc_r+0xc0>
   83e58:	68a1      	ldr	r1, [r4, #8]
   83e5a:	2a24      	cmp	r2, #36	; 0x24
   83e5c:	f8ca 1010 	str.w	r1, [sl, #16]
   83e60:	68e1      	ldr	r1, [r4, #12]
   83e62:	f8ca 1014 	str.w	r1, [sl, #20]
   83e66:	d00d      	beq.n	83e84 <_realloc_r+0x30c>
   83e68:	f104 0010 	add.w	r0, r4, #16
   83e6c:	f10a 0218 	add.w	r2, sl, #24
   83e70:	e7bf      	b.n	83df2 <_realloc_r+0x27a>
   83e72:	6922      	ldr	r2, [r4, #16]
   83e74:	f100 0318 	add.w	r3, r0, #24
   83e78:	6102      	str	r2, [r0, #16]
   83e7a:	6961      	ldr	r1, [r4, #20]
   83e7c:	f104 0218 	add.w	r2, r4, #24
   83e80:	6141      	str	r1, [r0, #20]
   83e82:	e6c0      	b.n	83c06 <_realloc_r+0x8e>
   83e84:	6922      	ldr	r2, [r4, #16]
   83e86:	f104 0018 	add.w	r0, r4, #24
   83e8a:	f8ca 2018 	str.w	r2, [sl, #24]
   83e8e:	6961      	ldr	r1, [r4, #20]
   83e90:	f10a 0220 	add.w	r2, sl, #32
   83e94:	f8ca 101c 	str.w	r1, [sl, #28]
   83e98:	e7ab      	b.n	83df2 <_realloc_r+0x27a>
   83e9a:	4621      	mov	r1, r4
   83e9c:	462a      	mov	r2, r5
   83e9e:	e782      	b.n	83da6 <_realloc_r+0x22e>
   83ea0:	4621      	mov	r1, r4
   83ea2:	4628      	mov	r0, r5
   83ea4:	9301      	str	r3, [sp, #4]
   83ea6:	f7ff fdf7 	bl	83a98 <memmove>
   83eaa:	9b01      	ldr	r3, [sp, #4]
   83eac:	e781      	b.n	83db2 <_realloc_r+0x23a>
   83eae:	68a1      	ldr	r1, [r4, #8]
   83eb0:	2a24      	cmp	r2, #36	; 0x24
   83eb2:	f8ca 1010 	str.w	r1, [sl, #16]
   83eb6:	68e1      	ldr	r1, [r4, #12]
   83eb8:	f8ca 1014 	str.w	r1, [sl, #20]
   83ebc:	d006      	beq.n	83ecc <_realloc_r+0x354>
   83ebe:	f104 0110 	add.w	r1, r4, #16
   83ec2:	f10a 0218 	add.w	r2, sl, #24
   83ec6:	e76e      	b.n	83da6 <_realloc_r+0x22e>
   83ec8:	200706e0 	.word	0x200706e0
   83ecc:	6922      	ldr	r2, [r4, #16]
   83ece:	f104 0118 	add.w	r1, r4, #24
   83ed2:	f8ca 2018 	str.w	r2, [sl, #24]
   83ed6:	6960      	ldr	r0, [r4, #20]
   83ed8:	f10a 0220 	add.w	r2, sl, #32
   83edc:	f8ca 001c 	str.w	r0, [sl, #28]
   83ee0:	e761      	b.n	83da6 <_realloc_r+0x22e>
   83ee2:	bf00      	nop

00083ee4 <_sbrk_r>:
   83ee4:	b538      	push	{r3, r4, r5, lr}
   83ee6:	2300      	movs	r3, #0
   83ee8:	4c06      	ldr	r4, [pc, #24]	; (83f04 <_sbrk_r+0x20>)
   83eea:	4605      	mov	r5, r0
   83eec:	4608      	mov	r0, r1
   83eee:	6023      	str	r3, [r4, #0]
   83ef0:	f7fd fa7c 	bl	813ec <_sbrk>
   83ef4:	1c43      	adds	r3, r0, #1
   83ef6:	d000      	beq.n	83efa <_sbrk_r+0x16>
   83ef8:	bd38      	pop	{r3, r4, r5, pc}
   83efa:	6823      	ldr	r3, [r4, #0]
   83efc:	2b00      	cmp	r3, #0
   83efe:	d0fb      	beq.n	83ef8 <_sbrk_r+0x14>
   83f00:	602b      	str	r3, [r5, #0]
   83f02:	bd38      	pop	{r3, r4, r5, pc}
   83f04:	20070cbc 	.word	0x20070cbc

00083f08 <__sread>:
   83f08:	b510      	push	{r4, lr}
   83f0a:	460c      	mov	r4, r1
   83f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f10:	f000 f9f4 	bl	842fc <_read_r>
   83f14:	2800      	cmp	r0, #0
   83f16:	db03      	blt.n	83f20 <__sread+0x18>
   83f18:	6d23      	ldr	r3, [r4, #80]	; 0x50
   83f1a:	4403      	add	r3, r0
   83f1c:	6523      	str	r3, [r4, #80]	; 0x50
   83f1e:	bd10      	pop	{r4, pc}
   83f20:	89a3      	ldrh	r3, [r4, #12]
   83f22:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   83f26:	81a3      	strh	r3, [r4, #12]
   83f28:	bd10      	pop	{r4, pc}
   83f2a:	bf00      	nop

00083f2c <__swrite>:
   83f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   83f30:	460c      	mov	r4, r1
   83f32:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   83f36:	461f      	mov	r7, r3
   83f38:	05cb      	lsls	r3, r1, #23
   83f3a:	4616      	mov	r6, r2
   83f3c:	4605      	mov	r5, r0
   83f3e:	d507      	bpl.n	83f50 <__swrite+0x24>
   83f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83f44:	2302      	movs	r3, #2
   83f46:	2200      	movs	r2, #0
   83f48:	f000 f9c2 	bl	842d0 <_lseek_r>
   83f4c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   83f50:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   83f54:	81a1      	strh	r1, [r4, #12]
   83f56:	463b      	mov	r3, r7
   83f58:	4632      	mov	r2, r6
   83f5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   83f5e:	4628      	mov	r0, r5
   83f60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   83f64:	f000 b8a2 	b.w	840ac <_write_r>

00083f68 <__sseek>:
   83f68:	b510      	push	{r4, lr}
   83f6a:	460c      	mov	r4, r1
   83f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f70:	f000 f9ae 	bl	842d0 <_lseek_r>
   83f74:	89a3      	ldrh	r3, [r4, #12]
   83f76:	1c42      	adds	r2, r0, #1
   83f78:	bf0e      	itee	eq
   83f7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   83f7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   83f82:	6520      	strne	r0, [r4, #80]	; 0x50
   83f84:	81a3      	strh	r3, [r4, #12]
   83f86:	bd10      	pop	{r4, pc}

00083f88 <__sclose>:
   83f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   83f8c:	f000 b906 	b.w	8419c <_close_r>

00083f90 <__swbuf_r>:
   83f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   83f92:	460d      	mov	r5, r1
   83f94:	4614      	mov	r4, r2
   83f96:	4606      	mov	r6, r0
   83f98:	b110      	cbz	r0, 83fa0 <__swbuf_r+0x10>
   83f9a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83f9c:	2b00      	cmp	r3, #0
   83f9e:	d04b      	beq.n	84038 <__swbuf_r+0xa8>
   83fa0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   83fa4:	69a3      	ldr	r3, [r4, #24]
   83fa6:	b291      	uxth	r1, r2
   83fa8:	0708      	lsls	r0, r1, #28
   83faa:	60a3      	str	r3, [r4, #8]
   83fac:	d539      	bpl.n	84022 <__swbuf_r+0x92>
   83fae:	6923      	ldr	r3, [r4, #16]
   83fb0:	2b00      	cmp	r3, #0
   83fb2:	d036      	beq.n	84022 <__swbuf_r+0x92>
   83fb4:	b2ed      	uxtb	r5, r5
   83fb6:	0489      	lsls	r1, r1, #18
   83fb8:	462f      	mov	r7, r5
   83fba:	d515      	bpl.n	83fe8 <__swbuf_r+0x58>
   83fbc:	6822      	ldr	r2, [r4, #0]
   83fbe:	6961      	ldr	r1, [r4, #20]
   83fc0:	1ad3      	subs	r3, r2, r3
   83fc2:	428b      	cmp	r3, r1
   83fc4:	da1c      	bge.n	84000 <__swbuf_r+0x70>
   83fc6:	3301      	adds	r3, #1
   83fc8:	68a1      	ldr	r1, [r4, #8]
   83fca:	1c50      	adds	r0, r2, #1
   83fcc:	3901      	subs	r1, #1
   83fce:	60a1      	str	r1, [r4, #8]
   83fd0:	6020      	str	r0, [r4, #0]
   83fd2:	7015      	strb	r5, [r2, #0]
   83fd4:	6962      	ldr	r2, [r4, #20]
   83fd6:	429a      	cmp	r2, r3
   83fd8:	d01a      	beq.n	84010 <__swbuf_r+0x80>
   83fda:	89a3      	ldrh	r3, [r4, #12]
   83fdc:	07db      	lsls	r3, r3, #31
   83fde:	d501      	bpl.n	83fe4 <__swbuf_r+0x54>
   83fe0:	2d0a      	cmp	r5, #10
   83fe2:	d015      	beq.n	84010 <__swbuf_r+0x80>
   83fe4:	4638      	mov	r0, r7
   83fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83fe8:	6e61      	ldr	r1, [r4, #100]	; 0x64
   83fea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   83fee:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
   83ff2:	81a2      	strh	r2, [r4, #12]
   83ff4:	6822      	ldr	r2, [r4, #0]
   83ff6:	6661      	str	r1, [r4, #100]	; 0x64
   83ff8:	6961      	ldr	r1, [r4, #20]
   83ffa:	1ad3      	subs	r3, r2, r3
   83ffc:	428b      	cmp	r3, r1
   83ffe:	dbe2      	blt.n	83fc6 <__swbuf_r+0x36>
   84000:	4621      	mov	r1, r4
   84002:	4630      	mov	r0, r6
   84004:	f7fe fdae 	bl	82b64 <_fflush_r>
   84008:	b940      	cbnz	r0, 8401c <__swbuf_r+0x8c>
   8400a:	2301      	movs	r3, #1
   8400c:	6822      	ldr	r2, [r4, #0]
   8400e:	e7db      	b.n	83fc8 <__swbuf_r+0x38>
   84010:	4621      	mov	r1, r4
   84012:	4630      	mov	r0, r6
   84014:	f7fe fda6 	bl	82b64 <_fflush_r>
   84018:	2800      	cmp	r0, #0
   8401a:	d0e3      	beq.n	83fe4 <__swbuf_r+0x54>
   8401c:	f04f 37ff 	mov.w	r7, #4294967295
   84020:	e7e0      	b.n	83fe4 <__swbuf_r+0x54>
   84022:	4621      	mov	r1, r4
   84024:	4630      	mov	r0, r6
   84026:	f7fe fc8d 	bl	82944 <__swsetup_r>
   8402a:	2800      	cmp	r0, #0
   8402c:	d1f6      	bne.n	8401c <__swbuf_r+0x8c>
   8402e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   84032:	6923      	ldr	r3, [r4, #16]
   84034:	b291      	uxth	r1, r2
   84036:	e7bd      	b.n	83fb4 <__swbuf_r+0x24>
   84038:	f7fe fdec 	bl	82c14 <__sinit>
   8403c:	e7b0      	b.n	83fa0 <__swbuf_r+0x10>
   8403e:	bf00      	nop

00084040 <_wcrtomb_r>:
   84040:	b5f0      	push	{r4, r5, r6, r7, lr}
   84042:	4606      	mov	r6, r0
   84044:	b085      	sub	sp, #20
   84046:	461f      	mov	r7, r3
   84048:	b189      	cbz	r1, 8406e <_wcrtomb_r+0x2e>
   8404a:	4c10      	ldr	r4, [pc, #64]	; (8408c <_wcrtomb_r+0x4c>)
   8404c:	4d10      	ldr	r5, [pc, #64]	; (84090 <_wcrtomb_r+0x50>)
   8404e:	6824      	ldr	r4, [r4, #0]
   84050:	6b64      	ldr	r4, [r4, #52]	; 0x34
   84052:	2c00      	cmp	r4, #0
   84054:	bf08      	it	eq
   84056:	462c      	moveq	r4, r5
   84058:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   8405c:	47a0      	blx	r4
   8405e:	1c43      	adds	r3, r0, #1
   84060:	d103      	bne.n	8406a <_wcrtomb_r+0x2a>
   84062:	2200      	movs	r2, #0
   84064:	238a      	movs	r3, #138	; 0x8a
   84066:	603a      	str	r2, [r7, #0]
   84068:	6033      	str	r3, [r6, #0]
   8406a:	b005      	add	sp, #20
   8406c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8406e:	460c      	mov	r4, r1
   84070:	4a06      	ldr	r2, [pc, #24]	; (8408c <_wcrtomb_r+0x4c>)
   84072:	4d07      	ldr	r5, [pc, #28]	; (84090 <_wcrtomb_r+0x50>)
   84074:	6811      	ldr	r1, [r2, #0]
   84076:	4622      	mov	r2, r4
   84078:	6b4c      	ldr	r4, [r1, #52]	; 0x34
   8407a:	a901      	add	r1, sp, #4
   8407c:	2c00      	cmp	r4, #0
   8407e:	bf08      	it	eq
   84080:	462c      	moveq	r4, r5
   84082:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
   84086:	47a0      	blx	r4
   84088:	e7e9      	b.n	8405e <_wcrtomb_r+0x1e>
   8408a:	bf00      	nop
   8408c:	20070140 	.word	0x20070140
   84090:	20070574 	.word	0x20070574

00084094 <__ascii_wctomb>:
   84094:	b119      	cbz	r1, 8409e <__ascii_wctomb+0xa>
   84096:	2aff      	cmp	r2, #255	; 0xff
   84098:	d803      	bhi.n	840a2 <__ascii_wctomb+0xe>
   8409a:	700a      	strb	r2, [r1, #0]
   8409c:	2101      	movs	r1, #1
   8409e:	4608      	mov	r0, r1
   840a0:	4770      	bx	lr
   840a2:	238a      	movs	r3, #138	; 0x8a
   840a4:	f04f 31ff 	mov.w	r1, #4294967295
   840a8:	6003      	str	r3, [r0, #0]
   840aa:	e7f8      	b.n	8409e <__ascii_wctomb+0xa>

000840ac <_write_r>:
   840ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   840ae:	460e      	mov	r6, r1
   840b0:	2500      	movs	r5, #0
   840b2:	4c08      	ldr	r4, [pc, #32]	; (840d4 <_write_r+0x28>)
   840b4:	4611      	mov	r1, r2
   840b6:	4607      	mov	r7, r0
   840b8:	461a      	mov	r2, r3
   840ba:	4630      	mov	r0, r6
   840bc:	6025      	str	r5, [r4, #0]
   840be:	f7fc fb1f 	bl	80700 <_write>
   840c2:	1c43      	adds	r3, r0, #1
   840c4:	d000      	beq.n	840c8 <_write_r+0x1c>
   840c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   840c8:	6823      	ldr	r3, [r4, #0]
   840ca:	2b00      	cmp	r3, #0
   840cc:	d0fb      	beq.n	840c6 <_write_r+0x1a>
   840ce:	603b      	str	r3, [r7, #0]
   840d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   840d2:	bf00      	nop
   840d4:	20070cbc 	.word	0x20070cbc

000840d8 <__register_exitproc>:
   840d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   840dc:	4d2c      	ldr	r5, [pc, #176]	; (84190 <__register_exitproc+0xb8>)
   840de:	4606      	mov	r6, r0
   840e0:	6828      	ldr	r0, [r5, #0]
   840e2:	4698      	mov	r8, r3
   840e4:	460f      	mov	r7, r1
   840e6:	4691      	mov	r9, r2
   840e8:	f7ff f954 	bl	83394 <__retarget_lock_acquire_recursive>
   840ec:	4b29      	ldr	r3, [pc, #164]	; (84194 <__register_exitproc+0xbc>)
   840ee:	681c      	ldr	r4, [r3, #0]
   840f0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   840f4:	2b00      	cmp	r3, #0
   840f6:	d03e      	beq.n	84176 <__register_exitproc+0x9e>
   840f8:	685a      	ldr	r2, [r3, #4]
   840fa:	2a1f      	cmp	r2, #31
   840fc:	dc1c      	bgt.n	84138 <__register_exitproc+0x60>
   840fe:	f102 0e01 	add.w	lr, r2, #1
   84102:	b176      	cbz	r6, 84122 <__register_exitproc+0x4a>
   84104:	2101      	movs	r1, #1
   84106:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   8410a:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   8410e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   84112:	4091      	lsls	r1, r2
   84114:	4308      	orrs	r0, r1
   84116:	2e02      	cmp	r6, #2
   84118:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   8411c:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   84120:	d023      	beq.n	8416a <__register_exitproc+0x92>
   84122:	3202      	adds	r2, #2
   84124:	f8c3 e004 	str.w	lr, [r3, #4]
   84128:	6828      	ldr	r0, [r5, #0]
   8412a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   8412e:	f7ff f933 	bl	83398 <__retarget_lock_release_recursive>
   84132:	2000      	movs	r0, #0
   84134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   84138:	4b17      	ldr	r3, [pc, #92]	; (84198 <__register_exitproc+0xc0>)
   8413a:	b30b      	cbz	r3, 84180 <__register_exitproc+0xa8>
   8413c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   84140:	f7ff f9a4 	bl	8348c <malloc>
   84144:	4603      	mov	r3, r0
   84146:	b1d8      	cbz	r0, 84180 <__register_exitproc+0xa8>
   84148:	2000      	movs	r0, #0
   8414a:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   8414e:	f04f 0e01 	mov.w	lr, #1
   84152:	6058      	str	r0, [r3, #4]
   84154:	6019      	str	r1, [r3, #0]
   84156:	4602      	mov	r2, r0
   84158:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8415c:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   84160:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   84164:	2e00      	cmp	r6, #0
   84166:	d0dc      	beq.n	84122 <__register_exitproc+0x4a>
   84168:	e7cc      	b.n	84104 <__register_exitproc+0x2c>
   8416a:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8416e:	4301      	orrs	r1, r0
   84170:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   84174:	e7d5      	b.n	84122 <__register_exitproc+0x4a>
   84176:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   8417a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8417e:	e7bb      	b.n	840f8 <__register_exitproc+0x20>
   84180:	6828      	ldr	r0, [r5, #0]
   84182:	f7ff f909 	bl	83398 <__retarget_lock_release_recursive>
   84186:	f04f 30ff 	mov.w	r0, #4294967295
   8418a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8418e:	bf00      	nop
   84190:	20070570 	.word	0x20070570
   84194:	00084598 	.word	0x00084598
   84198:	0008348d 	.word	0x0008348d

0008419c <_close_r>:
   8419c:	b538      	push	{r3, r4, r5, lr}
   8419e:	2300      	movs	r3, #0
   841a0:	4c06      	ldr	r4, [pc, #24]	; (841bc <_close_r+0x20>)
   841a2:	4605      	mov	r5, r0
   841a4:	4608      	mov	r0, r1
   841a6:	6023      	str	r3, [r4, #0]
   841a8:	f7fd f93c 	bl	81424 <_close>
   841ac:	1c43      	adds	r3, r0, #1
   841ae:	d000      	beq.n	841b2 <_close_r+0x16>
   841b0:	bd38      	pop	{r3, r4, r5, pc}
   841b2:	6823      	ldr	r3, [r4, #0]
   841b4:	2b00      	cmp	r3, #0
   841b6:	d0fb      	beq.n	841b0 <_close_r+0x14>
   841b8:	602b      	str	r3, [r5, #0]
   841ba:	bd38      	pop	{r3, r4, r5, pc}
   841bc:	20070cbc 	.word	0x20070cbc

000841c0 <_fclose_r>:
   841c0:	b570      	push	{r4, r5, r6, lr}
   841c2:	b159      	cbz	r1, 841dc <_fclose_r+0x1c>
   841c4:	4605      	mov	r5, r0
   841c6:	460c      	mov	r4, r1
   841c8:	b110      	cbz	r0, 841d0 <_fclose_r+0x10>
   841ca:	6b83      	ldr	r3, [r0, #56]	; 0x38
   841cc:	2b00      	cmp	r3, #0
   841ce:	d03c      	beq.n	8424a <_fclose_r+0x8a>
   841d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   841d2:	07d8      	lsls	r0, r3, #31
   841d4:	d505      	bpl.n	841e2 <_fclose_r+0x22>
   841d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   841da:	b92b      	cbnz	r3, 841e8 <_fclose_r+0x28>
   841dc:	2600      	movs	r6, #0
   841de:	4630      	mov	r0, r6
   841e0:	bd70      	pop	{r4, r5, r6, pc}
   841e2:	89a3      	ldrh	r3, [r4, #12]
   841e4:	0599      	lsls	r1, r3, #22
   841e6:	d53c      	bpl.n	84262 <_fclose_r+0xa2>
   841e8:	4621      	mov	r1, r4
   841ea:	4628      	mov	r0, r5
   841ec:	f7fe fc1e 	bl	82a2c <__sflush_r>
   841f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   841f2:	4606      	mov	r6, r0
   841f4:	b133      	cbz	r3, 84204 <_fclose_r+0x44>
   841f6:	69e1      	ldr	r1, [r4, #28]
   841f8:	4628      	mov	r0, r5
   841fa:	4798      	blx	r3
   841fc:	2800      	cmp	r0, #0
   841fe:	bfb8      	it	lt
   84200:	f04f 36ff 	movlt.w	r6, #4294967295
   84204:	89a3      	ldrh	r3, [r4, #12]
   84206:	061a      	lsls	r2, r3, #24
   84208:	d422      	bmi.n	84250 <_fclose_r+0x90>
   8420a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8420c:	b141      	cbz	r1, 84220 <_fclose_r+0x60>
   8420e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84212:	4299      	cmp	r1, r3
   84214:	d002      	beq.n	8421c <_fclose_r+0x5c>
   84216:	4628      	mov	r0, r5
   84218:	f7fe fe22 	bl	82e60 <_free_r>
   8421c:	2300      	movs	r3, #0
   8421e:	6323      	str	r3, [r4, #48]	; 0x30
   84220:	6c61      	ldr	r1, [r4, #68]	; 0x44
   84222:	b121      	cbz	r1, 8422e <_fclose_r+0x6e>
   84224:	4628      	mov	r0, r5
   84226:	f7fe fe1b 	bl	82e60 <_free_r>
   8422a:	2300      	movs	r3, #0
   8422c:	6463      	str	r3, [r4, #68]	; 0x44
   8422e:	f7fe fd21 	bl	82c74 <__sfp_lock_acquire>
   84232:	2200      	movs	r2, #0
   84234:	6e63      	ldr	r3, [r4, #100]	; 0x64
   84236:	81a2      	strh	r2, [r4, #12]
   84238:	07db      	lsls	r3, r3, #31
   8423a:	d50e      	bpl.n	8425a <_fclose_r+0x9a>
   8423c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8423e:	f7ff f8a7 	bl	83390 <__retarget_lock_close_recursive>
   84242:	f7fe fd1d 	bl	82c80 <__sfp_lock_release>
   84246:	4630      	mov	r0, r6
   84248:	bd70      	pop	{r4, r5, r6, pc}
   8424a:	f7fe fce3 	bl	82c14 <__sinit>
   8424e:	e7bf      	b.n	841d0 <_fclose_r+0x10>
   84250:	6921      	ldr	r1, [r4, #16]
   84252:	4628      	mov	r0, r5
   84254:	f7fe fe04 	bl	82e60 <_free_r>
   84258:	e7d7      	b.n	8420a <_fclose_r+0x4a>
   8425a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8425c:	f7ff f89c 	bl	83398 <__retarget_lock_release_recursive>
   84260:	e7ec      	b.n	8423c <_fclose_r+0x7c>
   84262:	6da0      	ldr	r0, [r4, #88]	; 0x58
   84264:	f7ff f896 	bl	83394 <__retarget_lock_acquire_recursive>
   84268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8426c:	2b00      	cmp	r3, #0
   8426e:	d1bb      	bne.n	841e8 <_fclose_r+0x28>
   84270:	6e66      	ldr	r6, [r4, #100]	; 0x64
   84272:	f016 0601 	ands.w	r6, r6, #1
   84276:	d1b1      	bne.n	841dc <_fclose_r+0x1c>
   84278:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8427a:	f7ff f88d 	bl	83398 <__retarget_lock_release_recursive>
   8427e:	4630      	mov	r0, r6
   84280:	bd70      	pop	{r4, r5, r6, pc}
   84282:	bf00      	nop

00084284 <_fstat_r>:
   84284:	b570      	push	{r4, r5, r6, lr}
   84286:	460d      	mov	r5, r1
   84288:	2300      	movs	r3, #0
   8428a:	4c07      	ldr	r4, [pc, #28]	; (842a8 <_fstat_r+0x24>)
   8428c:	4606      	mov	r6, r0
   8428e:	4611      	mov	r1, r2
   84290:	4628      	mov	r0, r5
   84292:	6023      	str	r3, [r4, #0]
   84294:	f7fd f8c9 	bl	8142a <_fstat>
   84298:	1c43      	adds	r3, r0, #1
   8429a:	d000      	beq.n	8429e <_fstat_r+0x1a>
   8429c:	bd70      	pop	{r4, r5, r6, pc}
   8429e:	6823      	ldr	r3, [r4, #0]
   842a0:	2b00      	cmp	r3, #0
   842a2:	d0fb      	beq.n	8429c <_fstat_r+0x18>
   842a4:	6033      	str	r3, [r6, #0]
   842a6:	bd70      	pop	{r4, r5, r6, pc}
   842a8:	20070cbc 	.word	0x20070cbc

000842ac <_isatty_r>:
   842ac:	b538      	push	{r3, r4, r5, lr}
   842ae:	2300      	movs	r3, #0
   842b0:	4c06      	ldr	r4, [pc, #24]	; (842cc <_isatty_r+0x20>)
   842b2:	4605      	mov	r5, r0
   842b4:	4608      	mov	r0, r1
   842b6:	6023      	str	r3, [r4, #0]
   842b8:	f7fd f8bc 	bl	81434 <_isatty>
   842bc:	1c43      	adds	r3, r0, #1
   842be:	d000      	beq.n	842c2 <_isatty_r+0x16>
   842c0:	bd38      	pop	{r3, r4, r5, pc}
   842c2:	6823      	ldr	r3, [r4, #0]
   842c4:	2b00      	cmp	r3, #0
   842c6:	d0fb      	beq.n	842c0 <_isatty_r+0x14>
   842c8:	602b      	str	r3, [r5, #0]
   842ca:	bd38      	pop	{r3, r4, r5, pc}
   842cc:	20070cbc 	.word	0x20070cbc

000842d0 <_lseek_r>:
   842d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   842d2:	460e      	mov	r6, r1
   842d4:	2500      	movs	r5, #0
   842d6:	4c08      	ldr	r4, [pc, #32]	; (842f8 <_lseek_r+0x28>)
   842d8:	4611      	mov	r1, r2
   842da:	4607      	mov	r7, r0
   842dc:	461a      	mov	r2, r3
   842de:	4630      	mov	r0, r6
   842e0:	6025      	str	r5, [r4, #0]
   842e2:	f7fd f8a9 	bl	81438 <_lseek>
   842e6:	1c43      	adds	r3, r0, #1
   842e8:	d000      	beq.n	842ec <_lseek_r+0x1c>
   842ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842ec:	6823      	ldr	r3, [r4, #0]
   842ee:	2b00      	cmp	r3, #0
   842f0:	d0fb      	beq.n	842ea <_lseek_r+0x1a>
   842f2:	603b      	str	r3, [r7, #0]
   842f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842f6:	bf00      	nop
   842f8:	20070cbc 	.word	0x20070cbc

000842fc <_read_r>:
   842fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   842fe:	460e      	mov	r6, r1
   84300:	2500      	movs	r5, #0
   84302:	4c08      	ldr	r4, [pc, #32]	; (84324 <_read_r+0x28>)
   84304:	4611      	mov	r1, r2
   84306:	4607      	mov	r7, r0
   84308:	461a      	mov	r2, r3
   8430a:	4630      	mov	r0, r6
   8430c:	6025      	str	r5, [r4, #0]
   8430e:	f7fc f9d9 	bl	806c4 <_read>
   84312:	1c43      	adds	r3, r0, #1
   84314:	d000      	beq.n	84318 <_read_r+0x1c>
   84316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84318:	6823      	ldr	r3, [r4, #0]
   8431a:	2b00      	cmp	r3, #0
   8431c:	d0fb      	beq.n	84316 <_read_r+0x1a>
   8431e:	603b      	str	r3, [r7, #0]
   84320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84322:	bf00      	nop
   84324:	20070cbc 	.word	0x20070cbc
   84328:	7466654c 	.word	0x7466654c
   8432c:	736c7550 	.word	0x736c7550
   84330:	6d695465 	.word	0x6d695465
   84334:	3a412065 	.word	0x3a412065
   84338:	20692520 	.word	0x20692520
   8433c:	000a736d 	.word	0x000a736d
   84340:	7466654c 	.word	0x7466654c
   84344:	736c7550 	.word	0x736c7550
   84348:	41207365 	.word	0x41207365
   8434c:	2523203a 	.word	0x2523203a
   84350:	00000a69 	.word	0x00000a69
   84354:	7466654c 	.word	0x7466654c
   84358:	736c7550 	.word	0x736c7550
   8435c:	42207365 	.word	0x42207365
   84360:	2523203a 	.word	0x2523203a
   84364:	00000a69 	.word	0x00000a69
   84368:	7466654c 	.word	0x7466654c
   8436c:	736c7550 	.word	0x736c7550
   84370:	3a207365 	.word	0x3a207365
   84374:	69252320 	.word	0x69252320
   84378:	0000000a 	.word	0x0000000a
   8437c:	68676952 	.word	0x68676952
   84380:	6c755074 	.word	0x6c755074
   84384:	20736573 	.word	0x20736573
   84388:	23203a41 	.word	0x23203a41
   8438c:	000a6925 	.word	0x000a6925
   84390:	68676952 	.word	0x68676952
   84394:	6c755074 	.word	0x6c755074
   84398:	20736573 	.word	0x20736573
   8439c:	23203a42 	.word	0x23203a42
   843a0:	000a6925 	.word	0x000a6925
   843a4:	68676952 	.word	0x68676952
   843a8:	6c755074 	.word	0x6c755074
   843ac:	20736573 	.word	0x20736573
   843b0:	2523203a 	.word	0x2523203a
   843b4:	00000a69 	.word	0x00000a69
   843b8:	4f525245 	.word	0x4f525245
   843bc:	6e203a52 	.word	0x6e203a52
   843c0:	6964206f 	.word	0x6964206f
   843c4:	74636572 	.word	0x74636572
   843c8:	206e6f69 	.word	0x206e6f69
   843cc:	6c756f63 	.word	0x6c756f63
   843d0:	65622064 	.word	0x65622064
   843d4:	74656620 	.word	0x74656620
   843d8:	64656863 	.word	0x64656863
   843dc:	6f726620 	.word	0x6f726620
   843e0:	6874206d 	.word	0x6874206d
   843e4:	656c2065 	.word	0x656c2065
   843e8:	6d207466 	.word	0x6d207466
   843ec:	726f746f 	.word	0x726f746f
   843f0:	74756220 	.word	0x74756220
   843f4:	6c757020 	.word	0x6c757020
   843f8:	77206573 	.word	0x77206573
   843fc:	73207361 	.word	0x73207361
   84400:	6c6c6974 	.word	0x6c6c6974
   84404:	69727420 	.word	0x69727420
   84408:	72656767 	.word	0x72656767
   8440c:	202e6465 	.word	0x202e6465
   84410:	6f636e45 	.word	0x6f636e45
   84414:	20726564 	.word	0x20726564
   84418:	736c7570 	.word	0x736c7570
   8441c:	61642065 	.word	0x61642065
   84420:	77206174 	.word	0x77206174
   84424:	206c6c69 	.word	0x206c6c69
   84428:	75206562 	.word	0x75206562
   8442c:	6c65726e 	.word	0x6c65726e
   84430:	6c626169 	.word	0x6c626169
   84434:	000a2e65 	.word	0x000a2e65
   84438:	7466654c 	.word	0x7466654c
   8443c:	736c7550 	.word	0x736c7550
   84440:	6d695465 	.word	0x6d695465
   84444:	25203a65 	.word	0x25203a65
   84448:	736d2069 	.word	0x736d2069
   8444c:	0000000a 	.word	0x0000000a
   84450:	7466654c 	.word	0x7466654c
   84454:	736c7550 	.word	0x736c7550
   84458:	6d695465 	.word	0x6d695465
   8445c:	3a422065 	.word	0x3a422065
   84460:	20692520 	.word	0x20692520
   84464:	000a736d 	.word	0x000a736d
   84468:	4f525245 	.word	0x4f525245
   8446c:	6e203a52 	.word	0x6e203a52
   84470:	6964206f 	.word	0x6964206f
   84474:	74636572 	.word	0x74636572
   84478:	206e6f69 	.word	0x206e6f69
   8447c:	6c756f63 	.word	0x6c756f63
   84480:	65622064 	.word	0x65622064
   84484:	74656620 	.word	0x74656620
   84488:	64656863 	.word	0x64656863
   8448c:	6f726620 	.word	0x6f726620
   84490:	6874206d 	.word	0x6874206d
   84494:	69722065 	.word	0x69722065
   84498:	20746867 	.word	0x20746867
   8449c:	6f746f6d 	.word	0x6f746f6d
   844a0:	75622072 	.word	0x75622072
   844a4:	75702074 	.word	0x75702074
   844a8:	2065736c 	.word	0x2065736c
   844ac:	20736177 	.word	0x20736177
   844b0:	6c697473 	.word	0x6c697473
   844b4:	7274206c 	.word	0x7274206c
   844b8:	65676769 	.word	0x65676769
   844bc:	2e646572 	.word	0x2e646572
   844c0:	636e4520 	.word	0x636e4520
   844c4:	7265646f 	.word	0x7265646f
   844c8:	6c757020 	.word	0x6c757020
   844cc:	64206573 	.word	0x64206573
   844d0:	20617461 	.word	0x20617461
   844d4:	6c6c6977 	.word	0x6c6c6977
   844d8:	20656220 	.word	0x20656220
   844dc:	65726e75 	.word	0x65726e75
   844e0:	6261696c 	.word	0x6261696c
   844e4:	0a2e656c 	.word	0x0a2e656c
   844e8:	00000000 	.word	0x00000000
   844ec:	68676952 	.word	0x68676952
   844f0:	6c755074 	.word	0x6c755074
   844f4:	69546573 	.word	0x69546573
   844f8:	203a656d 	.word	0x203a656d
   844fc:	6d206925 	.word	0x6d206925
   84500:	00000a73 	.word	0x00000a73
   84504:	68676952 	.word	0x68676952
   84508:	6c755074 	.word	0x6c755074
   8450c:	69546573 	.word	0x69546573
   84510:	4220656d 	.word	0x4220656d
   84514:	6925203a 	.word	0x6925203a
   84518:	0a736d20 	.word	0x0a736d20
   8451c:	00000000 	.word	0x00000000
   84520:	20746553 	.word	0x20746553
   84524:	65726944 	.word	0x65726944
   84528:	6f697463 	.word	0x6f697463
   8452c:	6f66206e 	.word	0x6f66206e
   84530:	654c2072 	.word	0x654c2072
   84534:	4d207466 	.word	0x4d207466
   84538:	726f746f 	.word	0x726f746f
   8453c:	3a736920 	.word	0x3a736920
   84540:	0a692520 	.word	0x0a692520
   84544:	00000000 	.word	0x00000000
   84548:	20746553 	.word	0x20746553
   8454c:	65726944 	.word	0x65726944
   84550:	6f697463 	.word	0x6f697463
   84554:	6f66206e 	.word	0x6f66206e
   84558:	69522072 	.word	0x69522072
   8455c:	20746867 	.word	0x20746867
   84560:	6f746f4d 	.word	0x6f746f4d
   84564:	73692072 	.word	0x73692072
   84568:	6925203a 	.word	0x6925203a
   8456c:	0000000a 	.word	0x0000000a
   84570:	736e6f43 	.word	0x736e6f43
   84574:	20656c6f 	.word	0x20656c6f
   84578:	64616572 	.word	0x64616572
   8457c:	00000a79 	.word	0x00000a79
   84580:	3d3d3d3d 	.word	0x3d3d3d3d
   84584:	3d3d3d3d 	.word	0x3d3d3d3d
   84588:	3d3d3d3d 	.word	0x3d3d3d3d
   8458c:	00000a3d 	.word	0x00000a3d
   84590:	74736554 	.word	0x74736554
   84594:	0000000a 	.word	0x0000000a

00084598 <_global_impure_ptr>:
   84598:	20070148 33323130 37363534 42413938     H.. 0123456789AB
   845a8:	46454443 00000000 33323130 37363534     CDEF....01234567
   845b8:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
   845c8:	0000296c                                l)..

000845cc <blanks.7217>:
   845cc:	20202020 20202020 20202020 20202020                     

000845dc <zeroes.7218>:
   845dc:	30303030 30303030 30303030 30303030     0000000000000000
   845ec:	00000043 49534f50 00000058 0000002e     C...POSIX.......

000845fc <_ctype_>:
   845fc:	20202000 20202020 28282020 20282828     .         ((((( 
   8460c:	20202020 20202020 20202020 20202020                     
   8461c:	10108820 10101010 10101010 10101010      ...............
   8462c:	04040410 04040404 10040404 10101010     ................
   8463c:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8464c:	01010101 01010101 01010101 10101010     ................
   8465c:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8466c:	02020202 02020202 02020202 10101010     ................
   8467c:	00000020 00000000 00000000 00000000      ...............
	...

00084700 <_init>:
   84700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84702:	bf00      	nop
   84704:	bcf8      	pop	{r3, r4, r5, r6, r7}
   84706:	bc08      	pop	{r3}
   84708:	469e      	mov	lr, r3
   8470a:	4770      	bx	lr

0008470c <__init_array_start>:
   8470c:	00082a0d 	.word	0x00082a0d

00084710 <__frame_dummy_init_array_entry>:
   84710:	00080119                                ....

00084714 <_fini>:
   84714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   84716:	bf00      	nop
   84718:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8471a:	bc08      	pop	{r3}
   8471c:	469e      	mov	lr, r3
   8471e:	4770      	bx	lr

00084720 <__fini_array_start>:
   84720:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
	...

2007000c <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4a14      	ldr	r2, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b13      	ldr	r3, [r2, #48]	; 0x30
20070048:	f023 0303 	bic.w	r3, r3, #3
2007004c:	f043 0301 	orr.w	r3, r3, #1
20070050:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070054:	f013 0f08 	tst.w	r3, #8
20070058:	d0fb      	beq.n	20070052 <SystemInit+0x46>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005a:	4a12      	ldr	r2, [pc, #72]	; (200700a4 <SystemInit+0x98>)
2007005c:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
2007005e:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070060:	461a      	mov	r2, r3
20070062:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070064:	f013 0f02 	tst.w	r3, #2
20070068:	d0fb      	beq.n	20070062 <SystemInit+0x56>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006a:	2211      	movs	r2, #17
2007006c:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
2007006e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070070:	461a      	mov	r2, r3
20070072:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070074:	f013 0f08 	tst.w	r3, #8
20070078:	d0fb      	beq.n	20070072 <SystemInit+0x66>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007a:	2212      	movs	r2, #18
2007007c:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
2007007e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070080:	461a      	mov	r2, r3
20070082:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070084:	f013 0f08 	tst.w	r3, #8
20070088:	d0fb      	beq.n	20070082 <SystemInit+0x76>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008a:	4a07      	ldr	r2, [pc, #28]	; (200700a8 <SystemInit+0x9c>)
2007008c:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
2007008e:	601a      	str	r2, [r3, #0]
20070090:	4770      	bx	lr
20070092:	bf00      	nop
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d915      	bls.n	200700e2 <system_init_flash+0x32>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b6:	4b1b      	ldr	r3, [pc, #108]	; (20070124 <system_init_flash+0x74>)
200700b8:	4298      	cmp	r0, r3
200700ba:	d919      	bls.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700bc:	4b1a      	ldr	r3, [pc, #104]	; (20070128 <system_init_flash+0x78>)
200700be:	4298      	cmp	r0, r3
200700c0:	d91e      	bls.n	20070100 <system_init_flash+0x50>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700c2:	4b1a      	ldr	r3, [pc, #104]	; (2007012c <system_init_flash+0x7c>)
200700c4:	4298      	cmp	r0, r3
200700c6:	d923      	bls.n	20070110 <system_init_flash+0x60>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700c8:	4b19      	ldr	r3, [pc, #100]	; (20070130 <system_init_flash+0x80>)
200700ca:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700cc:	bf94      	ite	ls
200700ce:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700d2:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
200700d6:	4a17      	ldr	r2, [pc, #92]	; (20070134 <system_init_flash+0x84>)
200700d8:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700da:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700de:	6013      	str	r3, [r2, #0]
200700e0:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700e2:	2300      	movs	r3, #0
200700e4:	4a13      	ldr	r2, [pc, #76]	; (20070134 <system_init_flash+0x84>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700f0:	f44f 7380 	mov.w	r3, #256	; 0x100
200700f4:	4a0f      	ldr	r2, [pc, #60]	; (20070134 <system_init_flash+0x84>)
200700f6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700f8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700fc:	6013      	str	r3, [r2, #0]
200700fe:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
20070100:	f44f 7300 	mov.w	r3, #512	; 0x200
20070104:	4a0b      	ldr	r2, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070106:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20070108:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007010c:	6013      	str	r3, [r2, #0]
2007010e:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20070110:	f44f 7340 	mov.w	r3, #768	; 0x300
20070114:	4a07      	ldr	r2, [pc, #28]	; (20070134 <system_init_flash+0x84>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	02faf07f 	.word	0x02faf07f
20070128:	03d08fff 	.word	0x03d08fff
2007012c:	04c4b3ff 	.word	0x04c4b3ff
20070130:	055d4a7f 	.word	0x055d4a7f
20070134:	400e0a00 	.word	0x400e0a00

20070138 <xNextTaskUnblockTime>:
20070138:	ffffffff                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <_impure_ptr>:
20070140:	20070148 00000000                       H.. ....

20070148 <impure_data>:
20070148:	00000000 20070434 2007049c 20070504     ....4.. ... ... 
	...
200701f0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070200:	0005deec 0000000b 00000000 00000000     ................
	...

20070570 <__atexit_recursive_mutex>:
20070570:	20070c98                                ... 

20070574 <__global_locale>:
20070574:	00000043 00000000 00000000 00000000     C...............
	...
20070594:	00000043 00000000 00000000 00000000     C...............
	...
200705b4:	00000043 00000000 00000000 00000000     C...............
	...
200705d4:	00000043 00000000 00000000 00000000     C...............
	...
200705f4:	00000043 00000000 00000000 00000000     C...............
	...
20070614:	00000043 00000000 00000000 00000000     C...............
	...
20070634:	00000043 00000000 00000000 00000000     C...............
	...
20070654:	00084095 000839e1 00000000 000845fc     .@...9.......E..
20070664:	000845f8 000844e8 000844e8 000844e8     .E...D...D...D..
20070674:	000844e8 000844e8 000844e8 000844e8     .D...D...D...D..
20070684:	000844e8 000844e8 ffffffff ffffffff     .D...D..........
20070694:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
200706bc:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

200706e0 <__malloc_av_>:
	...
200706e8:	200706e0 200706e0 200706e8 200706e8     ... ... ... ... 
200706f8:	200706f0 200706f0 200706f8 200706f8     ... ... ... ... 
20070708:	20070700 20070700 20070708 20070708     ... ... ... ... 
20070718:	20070710 20070710 20070718 20070718     ... ... ... ... 
20070728:	20070720 20070720 20070728 20070728      ..  .. (.. (.. 
20070738:	20070730 20070730 20070738 20070738     0.. 0.. 8.. 8.. 
20070748:	20070740 20070740 20070748 20070748     @.. @.. H.. H.. 
20070758:	20070750 20070750 20070758 20070758     P.. P.. X.. X.. 
20070768:	20070760 20070760 20070768 20070768     `.. `.. h.. h.. 
20070778:	20070770 20070770 20070778 20070778     p.. p.. x.. x.. 
20070788:	20070780 20070780 20070788 20070788     ... ... ... ... 
20070798:	20070790 20070790 20070798 20070798     ... ... ... ... 
200707a8:	200707a0 200707a0 200707a8 200707a8     ... ... ... ... 
200707b8:	200707b0 200707b0 200707b8 200707b8     ... ... ... ... 
200707c8:	200707c0 200707c0 200707c8 200707c8     ... ... ... ... 
200707d8:	200707d0 200707d0 200707d8 200707d8     ... ... ... ... 
200707e8:	200707e0 200707e0 200707e8 200707e8     ... ... ... ... 
200707f8:	200707f0 200707f0 200707f8 200707f8     ... ... ... ... 
20070808:	20070800 20070800 20070808 20070808     ... ... ... ... 
20070818:	20070810 20070810 20070818 20070818     ... ... ... ... 
20070828:	20070820 20070820 20070828 20070828      ..  .. (.. (.. 
20070838:	20070830 20070830 20070838 20070838     0.. 0.. 8.. 8.. 
20070848:	20070840 20070840 20070848 20070848     @.. @.. H.. H.. 
20070858:	20070850 20070850 20070858 20070858     P.. P.. X.. X.. 
20070868:	20070860 20070860 20070868 20070868     `.. `.. h.. h.. 
20070878:	20070870 20070870 20070878 20070878     p.. p.. x.. x.. 
20070888:	20070880 20070880 20070888 20070888     ... ... ... ... 
20070898:	20070890 20070890 20070898 20070898     ... ... ... ... 
200708a8:	200708a0 200708a0 200708a8 200708a8     ... ... ... ... 
200708b8:	200708b0 200708b0 200708b8 200708b8     ... ... ... ... 
200708c8:	200708c0 200708c0 200708c8 200708c8     ... ... ... ... 
200708d8:	200708d0 200708d0 200708d8 200708d8     ... ... ... ... 
200708e8:	200708e0 200708e0 200708e8 200708e8     ... ... ... ... 
200708f8:	200708f0 200708f0 200708f8 200708f8     ... ... ... ... 
20070908:	20070900 20070900 20070908 20070908     ... ... ... ... 
20070918:	20070910 20070910 20070918 20070918     ... ... ... ... 
20070928:	20070920 20070920 20070928 20070928      ..  .. (.. (.. 
20070938:	20070930 20070930 20070938 20070938     0.. 0.. 8.. 8.. 
20070948:	20070940 20070940 20070948 20070948     @.. @.. H.. H.. 
20070958:	20070950 20070950 20070958 20070958     P.. P.. X.. X.. 
20070968:	20070960 20070960 20070968 20070968     `.. `.. h.. h.. 
20070978:	20070970 20070970 20070978 20070978     p.. p.. x.. x.. 
20070988:	20070980 20070980 20070988 20070988     ... ... ... ... 
20070998:	20070990 20070990 20070998 20070998     ... ... ... ... 
200709a8:	200709a0 200709a0 200709a8 200709a8     ... ... ... ... 
200709b8:	200709b0 200709b0 200709b8 200709b8     ... ... ... ... 
200709c8:	200709c0 200709c0 200709c8 200709c8     ... ... ... ... 
200709d8:	200709d0 200709d0 200709d8 200709d8     ... ... ... ... 
200709e8:	200709e0 200709e0 200709e8 200709e8     ... ... ... ... 
200709f8:	200709f0 200709f0 200709f8 200709f8     ... ... ... ... 
20070a08:	20070a00 20070a00 20070a08 20070a08     ... ... ... ... 
20070a18:	20070a10 20070a10 20070a18 20070a18     ... ... ... ... 
20070a28:	20070a20 20070a20 20070a28 20070a28      ..  .. (.. (.. 
20070a38:	20070a30 20070a30 20070a38 20070a38     0.. 0.. 8.. 8.. 
20070a48:	20070a40 20070a40 20070a48 20070a48     @.. @.. H.. H.. 
20070a58:	20070a50 20070a50 20070a58 20070a58     P.. P.. X.. X.. 
20070a68:	20070a60 20070a60 20070a68 20070a68     `.. `.. h.. h.. 
20070a78:	20070a70 20070a70 20070a78 20070a78     p.. p.. x.. x.. 
20070a88:	20070a80 20070a80 20070a88 20070a88     ... ... ... ... 
20070a98:	20070a90 20070a90 20070a98 20070a98     ... ... ... ... 
20070aa8:	20070aa0 20070aa0 20070aa8 20070aa8     ... ... ... ... 
20070ab8:	20070ab0 20070ab0 20070ab8 20070ab8     ... ... ... ... 
20070ac8:	20070ac0 20070ac0 20070ac8 20070ac8     ... ... ... ... 
20070ad8:	20070ad0 20070ad0 20070ad8 20070ad8     ... ... ... ... 

20070ae8 <__malloc_sbrk_base>:
20070ae8:	ffffffff                                ....

20070aec <__malloc_trim_threshold>:
20070aec:	00020000                                ....


GccBoardProject4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000860  00080000  00080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000043c  20070000  00080860  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          000000b4  2007043c  00080c9c  0002043c  2**2
                  ALLOC
  3 .stack        00002000  200704f0  00080d50  0002043c  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020465  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000a51d  00000000  00000000  000204be  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000175f  00000000  00000000  0002a9db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00001cdd  00000000  00000000  0002c13a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000460  00000000  00000000  0002de17  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000418  00000000  00000000  0002e277  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015883  00000000  00000000  0002e68f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000076b6  00000000  00000000  00043f12  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00062225  00000000  00000000  0004b5c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000a34  00000000  00000000  000ad7f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <exception_table>:
   80000:	f0 24 07 20 95 05 08 00 91 05 08 00 91 05 08 00     .$. ............
   80010:	91 05 08 00 91 05 08 00 91 05 08 00 00 00 00 00     ................
	...
   8002c:	91 05 08 00 91 05 08 00 00 00 00 00 91 05 08 00     ................
   8003c:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   8004c:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   8005c:	91 05 08 00 91 05 08 00 91 05 08 00 00 00 00 00     ................
   8006c:	ed 04 08 00 01 05 08 00 15 05 08 00 29 05 08 00     ............)...
	...
   80084:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   80094:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   800a4:	00 00 00 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   800b4:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   800c4:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   800d4:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................
   800e4:	91 05 08 00 91 05 08 00 91 05 08 00 91 05 08 00     ................

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	2007043c 	.word	0x2007043c
   80110:	00000000 	.word	0x00000000
   80114:	00080860 	.word	0x00080860

00080118 <frame_dummy>:
   80118:	4b0c      	ldr	r3, [pc, #48]	; (8014c <frame_dummy+0x34>)
   8011a:	b143      	cbz	r3, 8012e <frame_dummy+0x16>
   8011c:	480c      	ldr	r0, [pc, #48]	; (80150 <frame_dummy+0x38>)
   8011e:	b510      	push	{r4, lr}
   80120:	490c      	ldr	r1, [pc, #48]	; (80154 <frame_dummy+0x3c>)
   80122:	f3af 8000 	nop.w
   80126:	480c      	ldr	r0, [pc, #48]	; (80158 <frame_dummy+0x40>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b923      	cbnz	r3, 80136 <frame_dummy+0x1e>
   8012c:	bd10      	pop	{r4, pc}
   8012e:	480a      	ldr	r0, [pc, #40]	; (80158 <frame_dummy+0x40>)
   80130:	6803      	ldr	r3, [r0, #0]
   80132:	b933      	cbnz	r3, 80142 <frame_dummy+0x2a>
   80134:	4770      	bx	lr
   80136:	4b09      	ldr	r3, [pc, #36]	; (8015c <frame_dummy+0x44>)
   80138:	2b00      	cmp	r3, #0
   8013a:	d0f7      	beq.n	8012c <frame_dummy+0x14>
   8013c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   80140:	4718      	bx	r3
   80142:	4b06      	ldr	r3, [pc, #24]	; (8015c <frame_dummy+0x44>)
   80144:	2b00      	cmp	r3, #0
   80146:	d0f5      	beq.n	80134 <frame_dummy+0x1c>
   80148:	4718      	bx	r3
   8014a:	bf00      	nop
   8014c:	00000000 	.word	0x00000000
   80150:	00080860 	.word	0x00080860
   80154:	20070440 	.word	0x20070440
   80158:	00080860 	.word	0x00080860
   8015c:	00000000 	.word	0x00000000

00080160 <myISR>:
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80160:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80164:	4b01      	ldr	r3, [pc, #4]	; (8016c <myISR+0xc>)
   80166:	631a      	str	r2, [r3, #48]	; 0x30
   80168:	4770      	bx	lr
   8016a:	bf00      	nop
   8016c:	400e1000 	.word	0x400e1000

00080170 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80170:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80172:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80176:	4b16      	ldr	r3, [pc, #88]	; (801d0 <board_init+0x60>)
   80178:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8017a:	200b      	movs	r0, #11
   8017c:	4c15      	ldr	r4, [pc, #84]	; (801d4 <board_init+0x64>)
   8017e:	47a0      	blx	r4
   80180:	200c      	movs	r0, #12
   80182:	47a0      	blx	r4
   80184:	200d      	movs	r0, #13
   80186:	47a0      	blx	r4
   80188:	200e      	movs	r0, #14
   8018a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8018c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80190:	203b      	movs	r0, #59	; 0x3b
   80192:	4c11      	ldr	r4, [pc, #68]	; (801d8 <board_init+0x68>)
   80194:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80196:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8019a:	2055      	movs	r0, #85	; 0x55
   8019c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8019e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801a2:	2056      	movs	r0, #86	; 0x56
   801a4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   801a6:	490d      	ldr	r1, [pc, #52]	; (801dc <board_init+0x6c>)
   801a8:	2068      	movs	r0, #104	; 0x68
   801aa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   801ac:	490c      	ldr	r1, [pc, #48]	; (801e0 <board_init+0x70>)
   801ae:	205c      	movs	r0, #92	; 0x5c
   801b0:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   801b2:	4a0c      	ldr	r2, [pc, #48]	; (801e4 <board_init+0x74>)
   801b4:	f44f 7140 	mov.w	r1, #768	; 0x300
   801b8:	480b      	ldr	r0, [pc, #44]	; (801e8 <board_init+0x78>)
   801ba:	4b0c      	ldr	r3, [pc, #48]	; (801ec <board_init+0x7c>)
   801bc:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   801be:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801c2:	202b      	movs	r0, #43	; 0x2b
   801c4:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   801c6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   801ca:	202a      	movs	r0, #42	; 0x2a
   801cc:	47a0      	blx	r4
   801ce:	bd10      	pop	{r4, pc}
   801d0:	400e1a50 	.word	0x400e1a50
   801d4:	0008053d 	.word	0x0008053d
   801d8:	000802c1 	.word	0x000802c1
   801dc:	28000079 	.word	0x28000079
   801e0:	28000001 	.word	0x28000001
   801e4:	08000001 	.word	0x08000001
   801e8:	400e0e00 	.word	0x400e0e00
   801ec:	00080391 	.word	0x00080391

000801f0 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   801f0:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   801f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   801f6:	d016      	beq.n	80226 <pio_set_peripheral+0x36>
   801f8:	d80b      	bhi.n	80212 <pio_set_peripheral+0x22>
   801fa:	b149      	cbz	r1, 80210 <pio_set_peripheral+0x20>
   801fc:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80200:	d105      	bne.n	8020e <pio_set_peripheral+0x1e>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80202:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80204:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80206:	400b      	ands	r3, r1
   80208:	ea23 0302 	bic.w	r3, r3, r2
   8020c:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   8020e:	6042      	str	r2, [r0, #4]
   80210:	4770      	bx	lr
	switch (ul_type) {
   80212:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80216:	d0fb      	beq.n	80210 <pio_set_peripheral+0x20>
   80218:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8021c:	d0f8      	beq.n	80210 <pio_set_peripheral+0x20>
   8021e:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80222:	d1f4      	bne.n	8020e <pio_set_peripheral+0x1e>
   80224:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABSR;
   80226:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80228:	4313      	orrs	r3, r2
   8022a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8022c:	e7ef      	b.n	8020e <pio_set_peripheral+0x1e>

0008022e <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8022e:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80230:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80234:	bf14      	ite	ne
   80236:	6641      	strne	r1, [r0, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80238:	6601      	streq	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8023a:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8023e:	bf14      	ite	ne
   80240:	6201      	strne	r1, [r0, #32]
		p_pio->PIO_IFDR = ul_mask;
   80242:	6241      	streq	r1, [r0, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   80244:	f012 0f02 	tst.w	r2, #2
   80248:	d107      	bne.n	8025a <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
   8024a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8024e:	bf18      	it	ne
   80250:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
	p_pio->PIO_ODR = ul_mask;
   80254:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80256:	6001      	str	r1, [r0, #0]
   80258:	4770      	bx	lr
		p_pio->PIO_SCIFSR = ul_mask;
   8025a:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8025e:	e7f9      	b.n	80254 <pio_set_input+0x26>

00080260 <pio_set_output>:
{
   80260:	b410      	push	{r4}
   80262:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
   80264:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
   80266:	b944      	cbnz	r4, 8027a <pio_set_output+0x1a>
		p_pio->PIO_PUDR = ul_mask;
   80268:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
   8026a:	b143      	cbz	r3, 8027e <pio_set_output+0x1e>
		p_pio->PIO_MDER = ul_mask;
   8026c:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
   8026e:	b942      	cbnz	r2, 80282 <pio_set_output+0x22>
		p_pio->PIO_CODR = ul_mask;
   80270:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   80272:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   80274:	6001      	str	r1, [r0, #0]
}
   80276:	bc10      	pop	{r4}
   80278:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
   8027a:	6641      	str	r1, [r0, #100]	; 0x64
   8027c:	e7f5      	b.n	8026a <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
   8027e:	6541      	str	r1, [r0, #84]	; 0x54
   80280:	e7f5      	b.n	8026e <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
   80282:	6301      	str	r1, [r0, #48]	; 0x30
   80284:	e7f5      	b.n	80272 <pio_set_output+0x12>

00080286 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
   80286:	f012 0f10 	tst.w	r2, #16
   8028a:	d010      	beq.n	802ae <pio_configure_interrupt+0x28>
		p_pio->PIO_AIMER = ul_mask;
   8028c:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
   80290:	f012 0f20 	tst.w	r2, #32
			p_pio->PIO_REHLSR = ul_mask;
   80294:	bf14      	ite	ne
   80296:	f8c0 10d4 	strne.w	r1, [r0, #212]	; 0xd4
			p_pio->PIO_FELLSR = ul_mask;
   8029a:	f8c0 10d0 	streq.w	r1, [r0, #208]	; 0xd0
		if (ul_attr & PIO_IT_EDGE) {
   8029e:	f012 0f40 	tst.w	r2, #64	; 0x40
			p_pio->PIO_ESR = ul_mask;
   802a2:	bf14      	ite	ne
   802a4:	f8c0 10c0 	strne.w	r1, [r0, #192]	; 0xc0
			p_pio->PIO_LSR = ul_mask;
   802a8:	f8c0 10c4 	streq.w	r1, [r0, #196]	; 0xc4
   802ac:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
   802ae:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
   802b2:	4770      	bx	lr

000802b4 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
   802b4:	6401      	str	r1, [r0, #64]	; 0x40
   802b6:	4770      	bx	lr

000802b8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   802b8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   802ba:	4770      	bx	lr

000802bc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   802bc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   802be:	4770      	bx	lr

000802c0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   802c0:	b570      	push	{r4, r5, r6, lr}
   802c2:	b082      	sub	sp, #8
   802c4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   802c6:	0943      	lsrs	r3, r0, #5
   802c8:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   802cc:	f203 7307 	addw	r3, r3, #1799	; 0x707
   802d0:	025c      	lsls	r4, r3, #9
	switch (ul_flags & PIO_TYPE_Msk) {
   802d2:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
   802d6:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   802da:	d031      	beq.n	80340 <pio_configure_pin+0x80>
   802dc:	d816      	bhi.n	8030c <pio_configure_pin+0x4c>
   802de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   802e2:	d01b      	beq.n	8031c <pio_configure_pin+0x5c>
   802e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   802e8:	d116      	bne.n	80318 <pio_configure_pin+0x58>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   802ea:	f000 001f 	and.w	r0, r0, #31
   802ee:	2601      	movs	r6, #1
   802f0:	4086      	lsls	r6, r0
   802f2:	4632      	mov	r2, r6
   802f4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   802f8:	4620      	mov	r0, r4
   802fa:	4b22      	ldr	r3, [pc, #136]	; (80384 <pio_configure_pin+0xc4>)
   802fc:	4798      	blx	r3
	if (ul_pull_up_enable) {
   802fe:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80302:	bf14      	ite	ne
   80304:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80306:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   80308:	2001      	movs	r0, #1
   8030a:	e017      	b.n	8033c <pio_configure_pin+0x7c>
	switch (ul_flags & PIO_TYPE_Msk) {
   8030c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   80310:	d021      	beq.n	80356 <pio_configure_pin+0x96>
   80312:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   80316:	d01e      	beq.n	80356 <pio_configure_pin+0x96>
		return 0;
   80318:	2000      	movs	r0, #0
   8031a:	e00f      	b.n	8033c <pio_configure_pin+0x7c>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8031c:	f000 001f 	and.w	r0, r0, #31
   80320:	2601      	movs	r6, #1
   80322:	4086      	lsls	r6, r0
   80324:	4632      	mov	r2, r6
   80326:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8032a:	4620      	mov	r0, r4
   8032c:	4b15      	ldr	r3, [pc, #84]	; (80384 <pio_configure_pin+0xc4>)
   8032e:	4798      	blx	r3
	if (ul_pull_up_enable) {
   80330:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80334:	bf14      	ite	ne
   80336:	6666      	strne	r6, [r4, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   80338:	6626      	streq	r6, [r4, #96]	; 0x60
	return 1;
   8033a:	2001      	movs	r0, #1
}
   8033c:	b002      	add	sp, #8
   8033e:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   80340:	f000 011f 	and.w	r1, r0, #31
   80344:	2601      	movs	r6, #1
   80346:	462a      	mov	r2, r5
   80348:	fa06 f101 	lsl.w	r1, r6, r1
   8034c:	4620      	mov	r0, r4
   8034e:	4b0e      	ldr	r3, [pc, #56]	; (80388 <pio_configure_pin+0xc8>)
   80350:	4798      	blx	r3
	return 1;
   80352:	4630      	mov	r0, r6
		break;
   80354:	e7f2      	b.n	8033c <pio_configure_pin+0x7c>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80356:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8035a:	f000 011f 	and.w	r1, r0, #31
   8035e:	2601      	movs	r6, #1
   80360:	ea05 0306 	and.w	r3, r5, r6
   80364:	9300      	str	r3, [sp, #0]
   80366:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8036a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8036e:	bf14      	ite	ne
   80370:	2200      	movne	r2, #0
   80372:	2201      	moveq	r2, #1
   80374:	fa06 f101 	lsl.w	r1, r6, r1
   80378:	4620      	mov	r0, r4
   8037a:	4c04      	ldr	r4, [pc, #16]	; (8038c <pio_configure_pin+0xcc>)
   8037c:	47a0      	blx	r4
	return 1;
   8037e:	4630      	mov	r0, r6
		break;
   80380:	e7dc      	b.n	8033c <pio_configure_pin+0x7c>
   80382:	bf00      	nop
   80384:	000801f1 	.word	0x000801f1
   80388:	0008022f 	.word	0x0008022f
   8038c:	00080261 	.word	0x00080261

00080390 <pio_configure_pin_group>:
{
   80390:	b570      	push	{r4, r5, r6, lr}
   80392:	b082      	sub	sp, #8
   80394:	4605      	mov	r5, r0
   80396:	460e      	mov	r6, r1
   80398:	4614      	mov	r4, r2
	switch (ul_flags & PIO_TYPE_Msk) {
   8039a:	f002 43f0 	and.w	r3, r2, #2013265920	; 0x78000000
   8039e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   803a2:	d027      	beq.n	803f4 <pio_configure_pin_group+0x64>
   803a4:	d811      	bhi.n	803ca <pio_configure_pin_group+0x3a>
   803a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   803aa:	d016      	beq.n	803da <pio_configure_pin_group+0x4a>
   803ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   803b0:	d111      	bne.n	803d6 <pio_configure_pin_group+0x46>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   803b2:	460a      	mov	r2, r1
   803b4:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803b8:	4b19      	ldr	r3, [pc, #100]	; (80420 <pio_configure_pin_group+0x90>)
   803ba:	4798      	blx	r3
	if (ul_pull_up_enable) {
   803bc:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   803c0:	bf14      	ite	ne
   803c2:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   803c4:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   803c6:	2001      	movs	r0, #1
   803c8:	e012      	b.n	803f0 <pio_configure_pin_group+0x60>
	switch (ul_flags & PIO_TYPE_Msk) {
   803ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   803ce:	d015      	beq.n	803fc <pio_configure_pin_group+0x6c>
   803d0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   803d4:	d012      	beq.n	803fc <pio_configure_pin_group+0x6c>
		return 0;
   803d6:	2000      	movs	r0, #0
   803d8:	e00a      	b.n	803f0 <pio_configure_pin_group+0x60>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   803da:	460a      	mov	r2, r1
   803dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803e0:	4b0f      	ldr	r3, [pc, #60]	; (80420 <pio_configure_pin_group+0x90>)
   803e2:	4798      	blx	r3
	if (ul_pull_up_enable) {
   803e4:	f014 0f01 	tst.w	r4, #1
		p_pio->PIO_PUER = ul_mask;
   803e8:	bf14      	ite	ne
   803ea:	666e      	strne	r6, [r5, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   803ec:	662e      	streq	r6, [r5, #96]	; 0x60
	return 1;
   803ee:	2001      	movs	r0, #1
}
   803f0:	b002      	add	sp, #8
   803f2:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_input(p_pio, ul_mask, ul_flags);
   803f4:	4b0b      	ldr	r3, [pc, #44]	; (80424 <pio_configure_pin_group+0x94>)
   803f6:	4798      	blx	r3
	return 1;
   803f8:	2001      	movs	r0, #1
		break;
   803fa:	e7f9      	b.n	803f0 <pio_configure_pin_group+0x60>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   803fc:	f004 5260 	and.w	r2, r4, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   80400:	f004 0301 	and.w	r3, r4, #1
   80404:	9300      	str	r3, [sp, #0]
   80406:	f3c4 0380 	ubfx	r3, r4, #2, #1
   8040a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8040e:	bf14      	ite	ne
   80410:	2200      	movne	r2, #0
   80412:	2201      	moveq	r2, #1
   80414:	4631      	mov	r1, r6
   80416:	4628      	mov	r0, r5
   80418:	4c03      	ldr	r4, [pc, #12]	; (80428 <pio_configure_pin_group+0x98>)
   8041a:	47a0      	blx	r4
	return 1;
   8041c:	2001      	movs	r0, #1
		break;
   8041e:	e7e7      	b.n	803f0 <pio_configure_pin_group+0x60>
   80420:	000801f1 	.word	0x000801f1
   80424:	0008022f 	.word	0x0008022f
   80428:	00080261 	.word	0x00080261

0008042c <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   8042c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80430:	4604      	mov	r4, r0
   80432:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80434:	4b0e      	ldr	r3, [pc, #56]	; (80470 <pio_handler_process+0x44>)
   80436:	4798      	blx	r3
   80438:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8043a:	4620      	mov	r0, r4
   8043c:	4b0d      	ldr	r3, [pc, #52]	; (80474 <pio_handler_process+0x48>)
   8043e:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80440:	4005      	ands	r5, r0
   80442:	d013      	beq.n	8046c <pio_handler_process+0x40>
   80444:	4c0c      	ldr	r4, [pc, #48]	; (80478 <pio_handler_process+0x4c>)
   80446:	f104 0660 	add.w	r6, r4, #96	; 0x60
   8044a:	e003      	b.n	80454 <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   8044c:	42b4      	cmp	r4, r6
   8044e:	d00d      	beq.n	8046c <pio_handler_process+0x40>
   80450:	3410      	adds	r4, #16
		while (status != 0) {
   80452:	b15d      	cbz	r5, 8046c <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
   80454:	6820      	ldr	r0, [r4, #0]
   80456:	4540      	cmp	r0, r8
   80458:	d1f8      	bne.n	8044c <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8045a:	6861      	ldr	r1, [r4, #4]
   8045c:	4229      	tst	r1, r5
   8045e:	d0f5      	beq.n	8044c <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80460:	68e3      	ldr	r3, [r4, #12]
   80462:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   80464:	6863      	ldr	r3, [r4, #4]
   80466:	ea25 0503 	bic.w	r5, r5, r3
   8046a:	e7ef      	b.n	8044c <pio_handler_process+0x20>
   8046c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80470:	000802b9 	.word	0x000802b9
   80474:	000802bd 	.word	0x000802bd
   80478:	20070458 	.word	0x20070458

0008047c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   8047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8047e:	4c18      	ldr	r4, [pc, #96]	; (804e0 <pio_handler_set+0x64>)
   80480:	6826      	ldr	r6, [r4, #0]
   80482:	2e06      	cmp	r6, #6
   80484:	d829      	bhi.n	804da <pio_handler_set+0x5e>
   80486:	f04f 0c00 	mov.w	ip, #0
   8048a:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8048c:	4f15      	ldr	r7, [pc, #84]	; (804e4 <pio_handler_set+0x68>)
   8048e:	e004      	b.n	8049a <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   80490:	3401      	adds	r4, #1
   80492:	b2e4      	uxtb	r4, r4
   80494:	46a4      	mov	ip, r4
   80496:	42a6      	cmp	r6, r4
   80498:	d309      	bcc.n	804ae <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
   8049a:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8049c:	0125      	lsls	r5, r4, #4
   8049e:	597d      	ldr	r5, [r7, r5]
   804a0:	428d      	cmp	r5, r1
   804a2:	d1f5      	bne.n	80490 <pio_handler_set+0x14>
   804a4:	eb07 1504 	add.w	r5, r7, r4, lsl #4
   804a8:	686d      	ldr	r5, [r5, #4]
   804aa:	4295      	cmp	r5, r2
   804ac:	d1f0      	bne.n	80490 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
   804ae:	4d0d      	ldr	r5, [pc, #52]	; (804e4 <pio_handler_set+0x68>)
   804b0:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
   804b4:	eb05 040e 	add.w	r4, r5, lr
   804b8:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
   804bc:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
   804be:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
   804c0:	9906      	ldr	r1, [sp, #24]
   804c2:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   804c4:	3601      	adds	r6, #1
   804c6:	4566      	cmp	r6, ip
		gs_ul_nb_sources++;
   804c8:	bf04      	itt	eq
   804ca:	4905      	ldreq	r1, [pc, #20]	; (804e0 <pio_handler_set+0x64>)
   804cc:	600e      	streq	r6, [r1, #0]
   804ce:	4611      	mov	r1, r2
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   804d0:	461a      	mov	r2, r3
   804d2:	4b05      	ldr	r3, [pc, #20]	; (804e8 <pio_handler_set+0x6c>)
   804d4:	4798      	blx	r3

	return 0;
   804d6:	2000      	movs	r0, #0
   804d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 1;
   804da:	2001      	movs	r0, #1
}
   804dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   804de:	bf00      	nop
   804e0:	200704c8 	.word	0x200704c8
   804e4:	20070458 	.word	0x20070458
   804e8:	00080287 	.word	0x00080287

000804ec <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   804ec:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   804ee:	210b      	movs	r1, #11
   804f0:	4801      	ldr	r0, [pc, #4]	; (804f8 <PIOA_Handler+0xc>)
   804f2:	4b02      	ldr	r3, [pc, #8]	; (804fc <PIOA_Handler+0x10>)
   804f4:	4798      	blx	r3
   804f6:	bd08      	pop	{r3, pc}
   804f8:	400e0e00 	.word	0x400e0e00
   804fc:	0008042d 	.word	0x0008042d

00080500 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   80500:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   80502:	210c      	movs	r1, #12
   80504:	4801      	ldr	r0, [pc, #4]	; (8050c <PIOB_Handler+0xc>)
   80506:	4b02      	ldr	r3, [pc, #8]	; (80510 <PIOB_Handler+0x10>)
   80508:	4798      	blx	r3
   8050a:	bd08      	pop	{r3, pc}
   8050c:	400e1000 	.word	0x400e1000
   80510:	0008042d 	.word	0x0008042d

00080514 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   80514:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   80516:	210d      	movs	r1, #13
   80518:	4801      	ldr	r0, [pc, #4]	; (80520 <PIOC_Handler+0xc>)
   8051a:	4b02      	ldr	r3, [pc, #8]	; (80524 <PIOC_Handler+0x10>)
   8051c:	4798      	blx	r3
   8051e:	bd08      	pop	{r3, pc}
   80520:	400e1200 	.word	0x400e1200
   80524:	0008042d 	.word	0x0008042d

00080528 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80528:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8052a:	210e      	movs	r1, #14
   8052c:	4801      	ldr	r0, [pc, #4]	; (80534 <PIOD_Handler+0xc>)
   8052e:	4b02      	ldr	r3, [pc, #8]	; (80538 <PIOD_Handler+0x10>)
   80530:	4798      	blx	r3
   80532:	bd08      	pop	{r3, pc}
   80534:	400e1400 	.word	0x400e1400
   80538:	0008042d 	.word	0x0008042d

0008053c <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   8053c:	282c      	cmp	r0, #44	; 0x2c
   8053e:	d81e      	bhi.n	8057e <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
   80540:	281f      	cmp	r0, #31
   80542:	d80c      	bhi.n	8055e <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80544:	4b11      	ldr	r3, [pc, #68]	; (8058c <pmc_enable_periph_clk+0x50>)
   80546:	699a      	ldr	r2, [r3, #24]
   80548:	2301      	movs	r3, #1
   8054a:	4083      	lsls	r3, r0
   8054c:	4393      	bics	r3, r2
   8054e:	d018      	beq.n	80582 <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
   80550:	2301      	movs	r3, #1
   80552:	fa03 f000 	lsl.w	r0, r3, r0
   80556:	4b0d      	ldr	r3, [pc, #52]	; (8058c <pmc_enable_periph_clk+0x50>)
   80558:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8055a:	2000      	movs	r0, #0
   8055c:	4770      	bx	lr
		ul_id -= 32;
   8055e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80560:	4b0a      	ldr	r3, [pc, #40]	; (8058c <pmc_enable_periph_clk+0x50>)
   80562:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
   80566:	2301      	movs	r3, #1
   80568:	4083      	lsls	r3, r0
   8056a:	4393      	bics	r3, r2
   8056c:	d00b      	beq.n	80586 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
   8056e:	2301      	movs	r3, #1
   80570:	fa03 f000 	lsl.w	r0, r3, r0
   80574:	4b05      	ldr	r3, [pc, #20]	; (8058c <pmc_enable_periph_clk+0x50>)
   80576:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
   8057a:	2000      	movs	r0, #0
   8057c:	4770      	bx	lr
		return 1;
   8057e:	2001      	movs	r0, #1
   80580:	4770      	bx	lr
	return 0;
   80582:	2000      	movs	r0, #0
   80584:	4770      	bx	lr
   80586:	2000      	movs	r0, #0
}
   80588:	4770      	bx	lr
   8058a:	bf00      	nop
   8058c:	400e0600 	.word	0x400e0600

00080590 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80590:	e7fe      	b.n	80590 <Dummy_Handler>
	...

00080594 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80594:	b508      	push	{r3, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80596:	4b1c      	ldr	r3, [pc, #112]	; (80608 <Reset_Handler+0x74>)
   80598:	4a1c      	ldr	r2, [pc, #112]	; (8060c <Reset_Handler+0x78>)
   8059a:	429a      	cmp	r2, r3
   8059c:	d010      	beq.n	805c0 <Reset_Handler+0x2c>
		for (; pDest < &_erelocate;) {
   8059e:	4b1c      	ldr	r3, [pc, #112]	; (80610 <Reset_Handler+0x7c>)
   805a0:	4a19      	ldr	r2, [pc, #100]	; (80608 <Reset_Handler+0x74>)
   805a2:	429a      	cmp	r2, r3
   805a4:	d20c      	bcs.n	805c0 <Reset_Handler+0x2c>
   805a6:	3b01      	subs	r3, #1
   805a8:	1a9b      	subs	r3, r3, r2
   805aa:	f023 0303 	bic.w	r3, r3, #3
   805ae:	3304      	adds	r3, #4
   805b0:	4413      	add	r3, r2
   805b2:	4916      	ldr	r1, [pc, #88]	; (8060c <Reset_Handler+0x78>)
			*pDest++ = *pSrc++;
   805b4:	f851 0b04 	ldr.w	r0, [r1], #4
   805b8:	f842 0b04 	str.w	r0, [r2], #4
		for (; pDest < &_erelocate;) {
   805bc:	429a      	cmp	r2, r3
   805be:	d1f9      	bne.n	805b4 <Reset_Handler+0x20>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   805c0:	4b14      	ldr	r3, [pc, #80]	; (80614 <Reset_Handler+0x80>)
   805c2:	4a15      	ldr	r2, [pc, #84]	; (80618 <Reset_Handler+0x84>)
   805c4:	429a      	cmp	r2, r3
   805c6:	d20a      	bcs.n	805de <Reset_Handler+0x4a>
   805c8:	3b01      	subs	r3, #1
   805ca:	1a9b      	subs	r3, r3, r2
   805cc:	f023 0303 	bic.w	r3, r3, #3
   805d0:	3304      	adds	r3, #4
   805d2:	4413      	add	r3, r2
		*pDest++ = 0;
   805d4:	2100      	movs	r1, #0
   805d6:	f842 1b04 	str.w	r1, [r2], #4
	for (pDest = &_szero; pDest < &_ezero;) {
   805da:	4293      	cmp	r3, r2
   805dc:	d1fb      	bne.n	805d6 <Reset_Handler+0x42>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   805de:	4b0f      	ldr	r3, [pc, #60]	; (8061c <Reset_Handler+0x88>)
   805e0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
   805e4:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   805e8:	490d      	ldr	r1, [pc, #52]	; (80620 <Reset_Handler+0x8c>)
   805ea:	608a      	str	r2, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   805ec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   805f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   805f4:	d203      	bcs.n	805fe <Reset_Handler+0x6a>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   805f6:	688b      	ldr	r3, [r1, #8]
   805f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   805fc:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   805fe:	4b09      	ldr	r3, [pc, #36]	; (80624 <Reset_Handler+0x90>)
   80600:	4798      	blx	r3

	/* Branch to main function */
	main();
   80602:	4b09      	ldr	r3, [pc, #36]	; (80628 <Reset_Handler+0x94>)
   80604:	4798      	blx	r3
   80606:	e7fe      	b.n	80606 <Reset_Handler+0x72>
   80608:	20070000 	.word	0x20070000
   8060c:	00080860 	.word	0x00080860
   80610:	2007043c 	.word	0x2007043c
   80614:	200704f0 	.word	0x200704f0
   80618:	2007043c 	.word	0x2007043c
   8061c:	00080000 	.word	0x00080000
   80620:	e000ed00 	.word	0xe000ed00
   80624:	000806c9 	.word	0x000806c9
   80628:	0008062d 	.word	0x0008062d

0008062c <main>:
#include "interruptz.h"



int main (void)
{
   8062c:	b500      	push	{lr}
   8062e:	b083      	sub	sp, #12
	/* Insert system clock initialization code here (sysclk_init()). */

	board_init();
   80630:	4b1a      	ldr	r3, [pc, #104]	; (8069c <main+0x70>)
   80632:	4798      	blx	r3
	pmc_enable_periph_clk(ID_PIOA); 
   80634:	200b      	movs	r0, #11
   80636:	4c1a      	ldr	r4, [pc, #104]	; (806a0 <main+0x74>)
   80638:	47a0      	blx	r4
	pio_set_input(PIOA, PIO_PA16,NULL); 
   8063a:	4d1a      	ldr	r5, [pc, #104]	; (806a4 <main+0x78>)
   8063c:	2200      	movs	r2, #0
   8063e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   80642:	4628      	mov	r0, r5
   80644:	4b18      	ldr	r3, [pc, #96]	; (806a8 <main+0x7c>)
   80646:	4798      	blx	r3
	pio_handler_set(PIOA, ID_PIOA, PIO_PA16, PIO_IT_EDGE, myISR); 
   80648:	4b18      	ldr	r3, [pc, #96]	; (806ac <main+0x80>)
   8064a:	9300      	str	r3, [sp, #0]
   8064c:	2340      	movs	r3, #64	; 0x40
   8064e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   80652:	210b      	movs	r1, #11
   80654:	4628      	mov	r0, r5
   80656:	4e16      	ldr	r6, [pc, #88]	; (806b0 <main+0x84>)
   80658:	47b0      	blx	r6
	pio_enable_interrupt(PIOA, PIO_PA16); 
   8065a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   8065e:	4628      	mov	r0, r5
   80660:	4b14      	ldr	r3, [pc, #80]	; (806b4 <main+0x88>)
   80662:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80664:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80668:	4b13      	ldr	r3, [pc, #76]	; (806b8 <main+0x8c>)
   8066a:	601a      	str	r2, [r3, #0]
   8066c:	200b      	movs	r0, #11
   8066e:	47a0      	blx	r4
   80670:	200c      	movs	r0, #12
   80672:	47a0      	blx	r4
   80674:	200d      	movs	r0, #13
   80676:	47a0      	blx	r4
   80678:	200e      	movs	r0, #14
   8067a:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   8067c:	4b0f      	ldr	r3, [pc, #60]	; (806bc <main+0x90>)
   8067e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80682:	611a      	str	r2, [r3, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80684:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80688:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_init();
	ioport_set_pin_dir(PIO_PB27_IDX,IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(PIO_PB27_IDX,LOW);
	
	while(1){
		delay_s(2);
   8068a:	4e0d      	ldr	r6, [pc, #52]	; (806c0 <main+0x94>)
   8068c:	4d0d      	ldr	r5, [pc, #52]	; (806c4 <main+0x98>)
   8068e:	461c      	mov	r4, r3
   80690:	4630      	mov	r0, r6
   80692:	47a8      	blx	r5
   80694:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
   80698:	6363      	str	r3, [r4, #52]	; 0x34
   8069a:	e7f9      	b.n	80690 <main+0x64>
   8069c:	00080171 	.word	0x00080171
   806a0:	0008053d 	.word	0x0008053d
   806a4:	400e0e00 	.word	0x400e0e00
   806a8:	0008022f 	.word	0x0008022f
   806ac:	00080161 	.word	0x00080161
   806b0:	0008047d 	.word	0x0008047d
   806b4:	000802b5 	.word	0x000802b5
   806b8:	e000e100 	.word	0xe000e100
   806bc:	400e1000 	.word	0x400e1000
   806c0:	00b71b00 	.word	0x00b71b00
   806c4:	20070001 	.word	0x20070001

000806c8 <__libc_init_array>:
   806c8:	b570      	push	{r4, r5, r6, lr}
   806ca:	4e0f      	ldr	r6, [pc, #60]	; (80708 <__libc_init_array+0x40>)
   806cc:	4d0f      	ldr	r5, [pc, #60]	; (8070c <__libc_init_array+0x44>)
   806ce:	1b76      	subs	r6, r6, r5
   806d0:	10b6      	asrs	r6, r6, #2
   806d2:	bf18      	it	ne
   806d4:	2400      	movne	r4, #0
   806d6:	d005      	beq.n	806e4 <__libc_init_array+0x1c>
   806d8:	3401      	adds	r4, #1
   806da:	f855 3b04 	ldr.w	r3, [r5], #4
   806de:	4798      	blx	r3
   806e0:	42a6      	cmp	r6, r4
   806e2:	d1f9      	bne.n	806d8 <__libc_init_array+0x10>
   806e4:	4e0a      	ldr	r6, [pc, #40]	; (80710 <__libc_init_array+0x48>)
   806e6:	4d0b      	ldr	r5, [pc, #44]	; (80714 <__libc_init_array+0x4c>)
   806e8:	f000 f8a8 	bl	8083c <_init>
   806ec:	1b76      	subs	r6, r6, r5
   806ee:	10b6      	asrs	r6, r6, #2
   806f0:	bf18      	it	ne
   806f2:	2400      	movne	r4, #0
   806f4:	d006      	beq.n	80704 <__libc_init_array+0x3c>
   806f6:	3401      	adds	r4, #1
   806f8:	f855 3b04 	ldr.w	r3, [r5], #4
   806fc:	4798      	blx	r3
   806fe:	42a6      	cmp	r6, r4
   80700:	d1f9      	bne.n	806f6 <__libc_init_array+0x2e>
   80702:	bd70      	pop	{r4, r5, r6, pc}
   80704:	bd70      	pop	{r4, r5, r6, pc}
   80706:	bf00      	nop
   80708:	00080848 	.word	0x00080848
   8070c:	00080848 	.word	0x00080848
   80710:	00080850 	.word	0x00080850
   80714:	00080848 	.word	0x00080848

00080718 <register_fini>:
   80718:	4b02      	ldr	r3, [pc, #8]	; (80724 <register_fini+0xc>)
   8071a:	b113      	cbz	r3, 80722 <register_fini+0xa>
   8071c:	4802      	ldr	r0, [pc, #8]	; (80728 <register_fini+0x10>)
   8071e:	f000 b805 	b.w	8072c <atexit>
   80722:	4770      	bx	lr
   80724:	00000000 	.word	0x00000000
   80728:	00080739 	.word	0x00080739

0008072c <atexit>:
   8072c:	2300      	movs	r3, #0
   8072e:	4601      	mov	r1, r0
   80730:	461a      	mov	r2, r3
   80732:	4618      	mov	r0, r3
   80734:	f000 b81e 	b.w	80774 <__register_exitproc>

00080738 <__libc_fini_array>:
   80738:	b538      	push	{r3, r4, r5, lr}
   8073a:	4c0a      	ldr	r4, [pc, #40]	; (80764 <__libc_fini_array+0x2c>)
   8073c:	4d0a      	ldr	r5, [pc, #40]	; (80768 <__libc_fini_array+0x30>)
   8073e:	1b64      	subs	r4, r4, r5
   80740:	10a4      	asrs	r4, r4, #2
   80742:	d00a      	beq.n	8075a <__libc_fini_array+0x22>
   80744:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
   80748:	3b01      	subs	r3, #1
   8074a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   8074e:	3c01      	subs	r4, #1
   80750:	f855 3904 	ldr.w	r3, [r5], #-4
   80754:	4798      	blx	r3
   80756:	2c00      	cmp	r4, #0
   80758:	d1f9      	bne.n	8074e <__libc_fini_array+0x16>
   8075a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8075e:	f000 b877 	b.w	80850 <_fini>
   80762:	bf00      	nop
   80764:	00080860 	.word	0x00080860
   80768:	0008085c 	.word	0x0008085c

0008076c <__retarget_lock_acquire_recursive>:
   8076c:	4770      	bx	lr
   8076e:	bf00      	nop

00080770 <__retarget_lock_release_recursive>:
   80770:	4770      	bx	lr
   80772:	bf00      	nop

00080774 <__register_exitproc>:
   80774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   80778:	4d2c      	ldr	r5, [pc, #176]	; (8082c <__register_exitproc+0xb8>)
   8077a:	4606      	mov	r6, r0
   8077c:	6828      	ldr	r0, [r5, #0]
   8077e:	4698      	mov	r8, r3
   80780:	460f      	mov	r7, r1
   80782:	4691      	mov	r9, r2
   80784:	f7ff fff2 	bl	8076c <__retarget_lock_acquire_recursive>
   80788:	4b29      	ldr	r3, [pc, #164]	; (80830 <__register_exitproc+0xbc>)
   8078a:	681c      	ldr	r4, [r3, #0]
   8078c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
   80790:	2b00      	cmp	r3, #0
   80792:	d03e      	beq.n	80812 <__register_exitproc+0x9e>
   80794:	685a      	ldr	r2, [r3, #4]
   80796:	2a1f      	cmp	r2, #31
   80798:	dc1c      	bgt.n	807d4 <__register_exitproc+0x60>
   8079a:	f102 0e01 	add.w	lr, r2, #1
   8079e:	b176      	cbz	r6, 807be <__register_exitproc+0x4a>
   807a0:	2101      	movs	r1, #1
   807a2:	eb03 0482 	add.w	r4, r3, r2, lsl #2
   807a6:	f8c4 9088 	str.w	r9, [r4, #136]	; 0x88
   807aa:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
   807ae:	4091      	lsls	r1, r2
   807b0:	4308      	orrs	r0, r1
   807b2:	2e02      	cmp	r6, #2
   807b4:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   807b8:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
   807bc:	d023      	beq.n	80806 <__register_exitproc+0x92>
   807be:	3202      	adds	r2, #2
   807c0:	f8c3 e004 	str.w	lr, [r3, #4]
   807c4:	6828      	ldr	r0, [r5, #0]
   807c6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   807ca:	f7ff ffd1 	bl	80770 <__retarget_lock_release_recursive>
   807ce:	2000      	movs	r0, #0
   807d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   807d4:	4b17      	ldr	r3, [pc, #92]	; (80834 <__register_exitproc+0xc0>)
   807d6:	b30b      	cbz	r3, 8081c <__register_exitproc+0xa8>
   807d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
   807dc:	f3af 8000 	nop.w
   807e0:	4603      	mov	r3, r0
   807e2:	b1d8      	cbz	r0, 8081c <__register_exitproc+0xa8>
   807e4:	2000      	movs	r0, #0
   807e6:	f8d4 1148 	ldr.w	r1, [r4, #328]	; 0x148
   807ea:	f04f 0e01 	mov.w	lr, #1
   807ee:	6058      	str	r0, [r3, #4]
   807f0:	6019      	str	r1, [r3, #0]
   807f2:	4602      	mov	r2, r0
   807f4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   807f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
   807fc:	f8c3 018c 	str.w	r0, [r3, #396]	; 0x18c
   80800:	2e00      	cmp	r6, #0
   80802:	d0dc      	beq.n	807be <__register_exitproc+0x4a>
   80804:	e7cc      	b.n	807a0 <__register_exitproc+0x2c>
   80806:	f8d3 018c 	ldr.w	r0, [r3, #396]	; 0x18c
   8080a:	4301      	orrs	r1, r0
   8080c:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
   80810:	e7d5      	b.n	807be <__register_exitproc+0x4a>
   80812:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
   80816:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
   8081a:	e7bb      	b.n	80794 <__register_exitproc+0x20>
   8081c:	6828      	ldr	r0, [r5, #0]
   8081e:	f7ff ffa7 	bl	80770 <__retarget_lock_release_recursive>
   80822:	f04f 30ff 	mov.w	r0, #4294967295
   80826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8082a:	bf00      	nop
   8082c:	20070438 	.word	0x20070438
   80830:	00080838 	.word	0x00080838
   80834:	00000000 	.word	0x00000000

00080838 <_global_impure_ptr>:
   80838:	20070010                                ... 

0008083c <_init>:
   8083c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8083e:	bf00      	nop
   80840:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80842:	bc08      	pop	{r3}
   80844:	469e      	mov	lr, r3
   80846:	4770      	bx	lr

00080848 <__init_array_start>:
   80848:	00080719 	.word	0x00080719

0008084c <__frame_dummy_init_array_entry>:
   8084c:	00080119                                ....

00080850 <_fini>:
   80850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80852:	bf00      	nop
   80854:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80856:	bc08      	pop	{r3}
   80858:	469e      	mov	lr, r3
   8085a:	4770      	bx	lr

0008085c <__fini_array_start>:
   8085c:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	0000      	movs	r0, r0
2007000c:	0000      	movs	r0, r0
	...

20070010 <impure_data>:
20070010:	0000 0000 02fc 2007 0364 2007 03cc 2007     ....... d.. ... 
	...
200700b8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
200700c8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20070438 <__atexit_recursive_mutex>:
20070438:	04cc 2007                                   ... 
